
AT25DFX_Sample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002304  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000010  20000000  00002304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d0  20000010  00002314  00020010  2**2
                  ALLOC
  3 .stack        00002000  200000e0  000023e4  00020010  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  6 .debug_info   00021d67  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000028d9  00000000  00000000  00041df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000080bc  00000000  00000000  000446d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000418  00000000  00000000  0004c78d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000898  00000000  00000000  0004cba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018fa2  00000000  00000000  0004d43d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000af3c  00000000  00000000  000663df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00088c87  00000000  00000000  0007131b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000a70  00000000  00000000  000f9fa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200020e0 	.word	0x200020e0
       4:	00001da5 	.word	0x00001da5
       8:	00001da1 	.word	0x00001da1
       c:	00001da1 	.word	0x00001da1
	...
      2c:	00001da1 	.word	0x00001da1
	...
      38:	00001da1 	.word	0x00001da1
      3c:	00001da1 	.word	0x00001da1
      40:	00001da1 	.word	0x00001da1
      44:	00001da1 	.word	0x00001da1
      48:	00001da1 	.word	0x00001da1
      4c:	00001da1 	.word	0x00001da1
      50:	00001da1 	.word	0x00001da1
      54:	00001da1 	.word	0x00001da1
      58:	00001da1 	.word	0x00001da1
      5c:	00001da1 	.word	0x00001da1
      60:	00001da1 	.word	0x00001da1
      64:	000014b5 	.word	0x000014b5
      68:	000014c5 	.word	0x000014c5
      6c:	000014d5 	.word	0x000014d5
      70:	000014e5 	.word	0x000014e5
      74:	000014f5 	.word	0x000014f5
      78:	00001505 	.word	0x00001505
      7c:	00001da1 	.word	0x00001da1
      80:	00001da1 	.word	0x00001da1
      84:	00001da1 	.word	0x00001da1
      88:	00000ced 	.word	0x00000ced
      8c:	00000cfd 	.word	0x00000cfd
      90:	00000d0d 	.word	0x00000d0d
	...
      9c:	00001da1 	.word	0x00001da1
      a0:	00001da1 	.word	0x00001da1
      a4:	00001da1 	.word	0x00001da1
      a8:	00001da1 	.word	0x00001da1
      ac:	00001da1 	.word	0x00001da1
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000010 	.word	0x20000010
      d4:	00000000 	.word	0x00000000
      d8:	00002304 	.word	0x00002304

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000014 	.word	0x20000014
     108:	00002304 	.word	0x00002304
     10c:	00002304 	.word	0x00002304
     110:	00000000 	.word	0x00000000

00000114 <at25dfx_chip_check_presence>:
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     114:	b530      	push	{r4, r5, lr}
     116:	b085      	sub	sp, #20
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     118:	0004      	movs	r4, r0
     11a:	2300      	movs	r3, #0

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
     11c:	9303      	str	r3, [sp, #12]
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     11e:	6805      	ldr	r5, [r0, #0]
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
     120:	4b2f      	ldr	r3, [pc, #188]	; (1e0 <at25dfx_chip_check_presence+0xcc>)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     122:	4798      	blx	r3
     124:	792b      	ldrb	r3, [r5, #4]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     126:	2b00      	cmp	r3, #0

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
     128:	d155      	bne.n	1d6 <at25dfx_chip_check_presence+0xc2>
     12a:	3301      	adds	r3, #1
     12c:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     12e:	4b2d      	ldr	r3, [pc, #180]	; (1e4 <at25dfx_chip_check_presence+0xd0>)
     130:	4798      	blx	r3
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     132:	229f      	movs	r2, #159	; 0x9f
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
     134:	ab01      	add	r3, sp, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     136:	701a      	strb	r2, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     138:	7963      	ldrb	r3, [r4, #5]
     13a:	09d9      	lsrs	r1, r3, #7
     13c:	2200      	movs	r2, #0
     13e:	2900      	cmp	r1, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     140:	d104      	bne.n	14c <at25dfx_chip_check_presence+0x38>
     142:	095a      	lsrs	r2, r3, #5

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     144:	01d2      	lsls	r2, r2, #7
     146:	4928      	ldr	r1, [pc, #160]	; (1e8 <at25dfx_chip_check_presence+0xd4>)
     148:	468c      	mov	ip, r1
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     14a:	4462      	add	r2, ip
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     14c:	211f      	movs	r1, #31
     14e:	400b      	ands	r3, r1
     150:	391e      	subs	r1, #30
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     152:	4099      	lsls	r1, r3
     154:	6151      	str	r1, [r2, #20]
     156:	2201      	movs	r2, #1
     158:	a901      	add	r1, sp, #4
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     15a:	6820      	ldr	r0, [r4, #0]
     15c:	4b23      	ldr	r3, [pc, #140]	; (1ec <at25dfx_chip_check_presence+0xd8>)
		}
		status = spi_read(chip->spi, &status_reg);
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
     15e:	4798      	blx	r3
     160:	2300      	movs	r3, #0
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     162:	2203      	movs	r2, #3
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     164:	a903      	add	r1, sp, #12
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     166:	6820      	ldr	r0, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     168:	4d21      	ldr	r5, [pc, #132]	; (1f0 <at25dfx_chip_check_presence+0xdc>)
     16a:	47a8      	blx	r5
		return &(ports[port_index]->Group[group_index]);
     16c:	7963      	ldrb	r3, [r4, #5]
     16e:	09d9      	lsrs	r1, r3, #7
     170:	2200      	movs	r2, #0
     172:	2900      	cmp	r1, #0
     174:	d104      	bne.n	180 <at25dfx_chip_check_presence+0x6c>
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     176:	095a      	lsrs	r2, r3, #5
     178:	01d2      	lsls	r2, r2, #7
     17a:	491b      	ldr	r1, [pc, #108]	; (1e8 <at25dfx_chip_check_presence+0xd4>)
     17c:	468c      	mov	ip, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     17e:	4462      	add	r2, ip

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
     180:	211f      	movs	r1, #31
		return STATUS_ERR_IO;
	}
	return STATUS_OK;
     182:	400b      	ands	r3, r1
     184:	391e      	subs	r1, #30

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);
     186:	4099      	lsls	r1, r3
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
	module->locked = false;
     188:	6191      	str	r1, [r2, #24]
     18a:	2300      	movs	r3, #0

	return status;
     18c:	6822      	ldr	r2, [r4, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     18e:	7113      	strb	r3, [r2, #4]
     190:	7923      	ldrb	r3, [r4, #4]

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
	if (status == STATUS_BUSY) {
		return status;
     192:	2b09      	cmp	r3, #9
	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
     194:	d815      	bhi.n	1c2 <at25dfx_chip_check_presence+0xae>
     196:	009b      	lsls	r3, r3, #2
     198:	4a16      	ldr	r2, [pc, #88]	; (1f4 <at25dfx_chip_check_presence+0xe0>)
     19a:	58d3      	ldr	r3, [r2, r3]
     19c:	469f      	mov	pc, r3
     19e:	4b16      	ldr	r3, [pc, #88]	; (1f8 <at25dfx_chip_check_presence+0xe4>)
     1a0:	e012      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
     1a2:	4b16      	ldr	r3, [pc, #88]	; (1fc <at25dfx_chip_check_presence+0xe8>)
     1a4:	e010      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
     1a6:	4b16      	ldr	r3, [pc, #88]	; (200 <at25dfx_chip_check_presence+0xec>)

	case AT25DFX_041A:
		return 0x01441f;

	case AT25DFX_081:
		return 0x02451f;
     1a8:	e00e      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>

	case AT25DFX_081A:
		return 0x01451f;
     1aa:	4b16      	ldr	r3, [pc, #88]	; (204 <at25dfx_chip_check_presence+0xf0>)
     1ac:	e00c      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>

	case AT25DFX_161:
		return 0x02461f;
     1ae:	4b16      	ldr	r3, [pc, #88]	; (208 <at25dfx_chip_check_presence+0xf4>)
     1b0:	e00a      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>

	case AT25DFX_L161:
		return 0x03461f;
     1b2:	4b16      	ldr	r3, [pc, #88]	; (20c <at25dfx_chip_check_presence+0xf8>)
     1b4:	e008      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>

	case AT25DFX_Q161:
		return 0x00861f;
     1b6:	4b16      	ldr	r3, [pc, #88]	; (210 <at25dfx_chip_check_presence+0xfc>)
     1b8:	e006      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>

	case AT25DFX_321A:
		return 0x01471f;
     1ba:	4b16      	ldr	r3, [pc, #88]	; (214 <at25dfx_chip_check_presence+0x100>)
     1bc:	e004      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>

	case AT25DFX_641:
		return 0x00481f;
     1be:	4b16      	ldr	r3, [pc, #88]	; (218 <at25dfx_chip_check_presence+0x104>)
     1c0:	e002      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>

	default:
		Assert(false);
		return 0;
     1c2:	2300      	movs	r3, #0
     1c4:	e000      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
 */
static inline uint32_t _at25dfx_get_device_id(enum at25dfx_type type)
{
	switch (type) {
	case AT25DFX_512B:
		return 0x00651f;
     1c6:	4b15      	ldr	r3, [pc, #84]	; (21c <at25dfx_chip_check_presence+0x108>)

	_at25dfx_chip_issue_read_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	if (id == _at25dfx_get_device_id(chip->type)) {
     1c8:	9a03      	ldr	r2, [sp, #12]
     1ca:	429a      	cmp	r2, r3
     1cc:	d001      	beq.n	1d2 <at25dfx_chip_check_presence+0xbe>
		return STATUS_OK;
	} else {
		return STATUS_ERR_NOT_FOUND;
     1ce:	2014      	movs	r0, #20
     1d0:	e004      	b.n	1dc <at25dfx_chip_check_presence+0xc8>
	_at25dfx_chip_issue_read_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	if (id == _at25dfx_get_device_id(chip->type)) {
		return STATUS_OK;
     1d2:	2000      	movs	r0, #0
     1d4:	e002      	b.n	1dc <at25dfx_chip_check_presence+0xc8>
     1d6:	4b03      	ldr	r3, [pc, #12]	; (1e4 <at25dfx_chip_check_presence+0xd0>)
     1d8:	4798      	blx	r3
	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
	if (status == STATUS_BUSY) {
		return status;
     1da:	2005      	movs	r0, #5
	if (id == _at25dfx_get_device_id(chip->type)) {
		return STATUS_OK;
	} else {
		return STATUS_ERR_NOT_FOUND;
	}
}
     1dc:	b005      	add	sp, #20
     1de:	bd30      	pop	{r4, r5, pc}
     1e0:	00001515 	.word	0x00001515
     1e4:	00001555 	.word	0x00001555
     1e8:	41004400 	.word	0x41004400
     1ec:	000011d1 	.word	0x000011d1
     1f0:	00001121 	.word	0x00001121
     1f4:	000021b0 	.word	0x000021b0
     1f8:	0000431f 	.word	0x0000431f
     1fc:	0001441f 	.word	0x0001441f
     200:	0002451f 	.word	0x0002451f
     204:	0001451f 	.word	0x0001451f
     208:	0002461f 	.word	0x0002461f
     20c:	0003461f 	.word	0x0003461f
     210:	0000861f 	.word	0x0000861f
     214:	0001471f 	.word	0x0001471f
     218:	0000481f 	.word	0x0000481f
     21c:	0000651f 	.word	0x0000651f

00000220 <at25dfx_chip_read_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_read_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, void *data, at25dfx_datalen_t length)
{
     220:	b5f0      	push	{r4, r5, r6, r7, lr}
     222:	b085      	sub	sp, #20
     224:	0004      	movs	r4, r0
     226:	000e      	movs	r6, r1
     228:	9201      	str	r2, [sp, #4]
     22a:	001f      	movs	r7, r3
	Assert(chip);
	Assert(data);
	Assert(length);

	// Address out of range?
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     22c:	185a      	adds	r2, r3, r1
 *
 * \return SerialFlash storage size.
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
	switch (type) {
     22e:	7903      	ldrb	r3, [r0, #4]
     230:	2b09      	cmp	r3, #9
     232:	d815      	bhi.n	260 <at25dfx_chip_read_buffer+0x40>
     234:	009b      	lsls	r3, r3, #2
     236:	4931      	ldr	r1, [pc, #196]	; (2fc <at25dfx_chip_read_buffer+0xdc>)
     238:	58cb      	ldr	r3, [r1, r3]
     23a:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 64 * 1024UL;

	case AT25DFX_021:
		return 256 * 1024UL;
     23c:	2380      	movs	r3, #128	; 0x80
     23e:	02db      	lsls	r3, r3, #11
     240:	e012      	b.n	268 <at25dfx_chip_read_buffer+0x48>

	case AT25DFX_041A:
		return 512 * 1024UL;
     242:	2380      	movs	r3, #128	; 0x80
     244:	031b      	lsls	r3, r3, #12
     246:	e00f      	b.n	268 <at25dfx_chip_read_buffer+0x48>

	case AT25DFX_081:
	case AT25DFX_081A:
		return 1024 * 1024UL;
     248:	2380      	movs	r3, #128	; 0x80
     24a:	035b      	lsls	r3, r3, #13
     24c:	e00c      	b.n	268 <at25dfx_chip_read_buffer+0x48>

	case AT25DFX_161:
	case AT25DFX_L161:
	case AT25DFX_Q161:
		return 2048 * 1024UL;
     24e:	2380      	movs	r3, #128	; 0x80
     250:	039b      	lsls	r3, r3, #14
     252:	e009      	b.n	268 <at25dfx_chip_read_buffer+0x48>

	case AT25DFX_321A:
		return 4096 * 1024UL;
     254:	2380      	movs	r3, #128	; 0x80
     256:	03db      	lsls	r3, r3, #15
     258:	e006      	b.n	268 <at25dfx_chip_read_buffer+0x48>

	case AT25DFX_641:
		return 8192 * 1024UL;
     25a:	2380      	movs	r3, #128	; 0x80
     25c:	041b      	lsls	r3, r3, #16
     25e:	e003      	b.n	268 <at25dfx_chip_read_buffer+0x48>

	default:
		Assert(false);
		return 0;
     260:	2300      	movs	r3, #0
     262:	e001      	b.n	268 <at25dfx_chip_read_buffer+0x48>
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
	switch (type) {
	case AT25DFX_512B:
		return 64 * 1024UL;
     264:	2380      	movs	r3, #128	; 0x80
     266:	025b      	lsls	r3, r3, #9
	Assert(data);
	Assert(length);

	// Address out of range?
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
     268:	2017      	movs	r0, #23
	Assert(chip);
	Assert(data);
	Assert(length);

	// Address out of range?
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     26a:	429a      	cmp	r2, r3
     26c:	d844      	bhi.n	2f8 <at25dfx_chip_read_buffer+0xd8>
		return STATUS_ERR_INVALID_ARG;
	}

	status = _at25dfx_spi_lock(chip->spi);
     26e:	6825      	ldr	r5, [r4, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     270:	4b23      	ldr	r3, [pc, #140]	; (300 <at25dfx_chip_read_buffer+0xe0>)
     272:	4798      	blx	r3
{
	enum status_code status;

	system_interrupt_enter_critical_section();

	if (module->locked) {
     274:	792b      	ldrb	r3, [r5, #4]
     276:	2b00      	cmp	r3, #0
     278:	d13b      	bne.n	2f2 <at25dfx_chip_read_buffer+0xd2>
		status = STATUS_BUSY;
	} else {
		module->locked = true;
     27a:	3301      	adds	r3, #1
     27c:	712b      	strb	r3, [r5, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     27e:	4b21      	ldr	r3, [pc, #132]	; (304 <at25dfx_chip_read_buffer+0xe4>)
     280:	4798      	blx	r3
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
     282:	230b      	movs	r3, #11
     284:	aa02      	add	r2, sp, #8
     286:	7013      	strb	r3, [r2, #0]

	if (cmd.command_size > 1) {
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
     288:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     28a:	0a33      	lsrs	r3, r6, #8
     28c:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     28e:	0c36      	lsrs	r6, r6, #16
     290:	7056      	strb	r6, [r2, #1]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
     292:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     294:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     296:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     298:	2900      	cmp	r1, #0
     29a:	d104      	bne.n	2a6 <at25dfx_chip_read_buffer+0x86>
		return &(ports[port_index]->Group[group_index]);
     29c:	095a      	lsrs	r2, r3, #5
     29e:	01d2      	lsls	r2, r2, #7
     2a0:	4919      	ldr	r1, [pc, #100]	; (308 <at25dfx_chip_read_buffer+0xe8>)
     2a2:	468c      	mov	ip, r1
     2a4:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2a6:	211f      	movs	r1, #31
     2a8:	400b      	ands	r3, r1
     2aa:	391e      	subs	r1, #30
     2ac:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     2ae:	6151      	str	r1, [r2, #20]
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     2b0:	2205      	movs	r2, #5
     2b2:	a902      	add	r1, sp, #8
     2b4:	6820      	ldr	r0, [r4, #0]
     2b6:	4b15      	ldr	r3, [pc, #84]	; (30c <at25dfx_chip_read_buffer+0xec>)
     2b8:	4798      	blx	r3
	Assert(status == STATUS_OK);

	if (cmd.length) {
     2ba:	2f00      	cmp	r7, #0
     2bc:	d005      	beq.n	2ca <at25dfx_chip_read_buffer+0xaa>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
     2be:	2300      	movs	r3, #0
     2c0:	003a      	movs	r2, r7
     2c2:	9901      	ldr	r1, [sp, #4]
     2c4:	6820      	ldr	r0, [r4, #0]
     2c6:	4d12      	ldr	r5, [pc, #72]	; (310 <at25dfx_chip_read_buffer+0xf0>)
     2c8:	47a8      	blx	r5
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     2ca:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2cc:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     2ce:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2d0:	2900      	cmp	r1, #0
     2d2:	d104      	bne.n	2de <at25dfx_chip_read_buffer+0xbe>
		return &(ports[port_index]->Group[group_index]);
     2d4:	095a      	lsrs	r2, r3, #5
     2d6:	01d2      	lsls	r2, r2, #7
     2d8:	490b      	ldr	r1, [pc, #44]	; (308 <at25dfx_chip_read_buffer+0xe8>)
     2da:	468c      	mov	ip, r1
     2dc:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2de:	211f      	movs	r1, #31
     2e0:	400b      	ands	r3, r1
     2e2:	391e      	subs	r1, #30
     2e4:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     2e6:	6191      	str	r1, [r2, #24]
	cmd.address = address;
	cmd.data.rx = (uint8_t *)data;
	cmd.length = length;
	_at25dfx_chip_issue_read_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
     2e8:	6823      	ldr	r3, [r4, #0]
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
	module->locked = false;
     2ea:	2200      	movs	r2, #0
     2ec:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
     2ee:	2000      	movs	r0, #0
     2f0:	e002      	b.n	2f8 <at25dfx_chip_read_buffer+0xd8>
     2f2:	4b04      	ldr	r3, [pc, #16]	; (304 <at25dfx_chip_read_buffer+0xe4>)
     2f4:	4798      	blx	r3
		return STATUS_ERR_INVALID_ARG;
	}

	status = _at25dfx_spi_lock(chip->spi);
	if (status == STATUS_BUSY) {
		return status;
     2f6:	2005      	movs	r0, #5
	_at25dfx_chip_issue_read_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	return STATUS_OK;
}
     2f8:	b005      	add	sp, #20
     2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2fc:	000021d8 	.word	0x000021d8
     300:	00001515 	.word	0x00001515
     304:	00001555 	.word	0x00001555
     308:	41004400 	.word	0x41004400
     30c:	000011d1 	.word	0x000011d1
     310:	00001121 	.word	0x00001121

00000314 <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
     314:	b5f0      	push	{r4, r5, r6, r7, lr}
     316:	465f      	mov	r7, fp
     318:	4656      	mov	r6, sl
     31a:	464d      	mov	r5, r9
     31c:	4644      	mov	r4, r8
     31e:	b4f0      	push	{r4, r5, r6, r7}
     320:	b085      	sub	sp, #20
     322:	0005      	movs	r5, r0
     324:	000e      	movs	r6, r1
     326:	9200      	str	r2, [sp, #0]
     328:	001f      	movs	r7, r3

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     32a:	185a      	adds	r2, r3, r1
 *
 * \return SerialFlash storage size.
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
	switch (type) {
     32c:	7903      	ldrb	r3, [r0, #4]
     32e:	2b09      	cmp	r3, #9
     330:	d815      	bhi.n	35e <at25dfx_chip_write_buffer+0x4a>
     332:	009b      	lsls	r3, r3, #2
     334:	49cd      	ldr	r1, [pc, #820]	; (66c <at25dfx_chip_write_buffer+0x358>)
     336:	58cb      	ldr	r3, [r1, r3]
     338:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 64 * 1024UL;

	case AT25DFX_021:
		return 256 * 1024UL;
     33a:	2380      	movs	r3, #128	; 0x80
     33c:	02db      	lsls	r3, r3, #11
     33e:	e012      	b.n	366 <at25dfx_chip_write_buffer+0x52>

	case AT25DFX_041A:
		return 512 * 1024UL;
     340:	2380      	movs	r3, #128	; 0x80
     342:	031b      	lsls	r3, r3, #12
     344:	e00f      	b.n	366 <at25dfx_chip_write_buffer+0x52>

	case AT25DFX_081:
	case AT25DFX_081A:
		return 1024 * 1024UL;
     346:	2380      	movs	r3, #128	; 0x80
     348:	035b      	lsls	r3, r3, #13
     34a:	e00c      	b.n	366 <at25dfx_chip_write_buffer+0x52>

	case AT25DFX_161:
	case AT25DFX_L161:
	case AT25DFX_Q161:
		return 2048 * 1024UL;
     34c:	2380      	movs	r3, #128	; 0x80
     34e:	039b      	lsls	r3, r3, #14
     350:	e009      	b.n	366 <at25dfx_chip_write_buffer+0x52>

	case AT25DFX_321A:
		return 4096 * 1024UL;
     352:	2380      	movs	r3, #128	; 0x80
     354:	03db      	lsls	r3, r3, #15
     356:	e006      	b.n	366 <at25dfx_chip_write_buffer+0x52>

	case AT25DFX_641:
		return 8192 * 1024UL;
     358:	2380      	movs	r3, #128	; 0x80
     35a:	041b      	lsls	r3, r3, #16
     35c:	e003      	b.n	366 <at25dfx_chip_write_buffer+0x52>

	default:
		Assert(false);
		return 0;
     35e:	2300      	movs	r3, #0
     360:	e001      	b.n	366 <at25dfx_chip_write_buffer+0x52>
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
	switch (type) {
	case AT25DFX_512B:
		return 64 * 1024UL;
     362:	2380      	movs	r3, #128	; 0x80
     364:	025b      	lsls	r3, r3, #9
	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
     366:	2017      	movs	r0, #23

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     368:	429a      	cmp	r2, r3
     36a:	d900      	bls.n	36e <at25dfx_chip_write_buffer+0x5a>
     36c:	e1dd      	b.n	72a <at25dfx_chip_write_buffer+0x416>
		return STATUS_ERR_INVALID_ARG;
	}

	status = _at25dfx_spi_lock(chip->spi);
     36e:	682c      	ldr	r4, [r5, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     370:	4bbf      	ldr	r3, [pc, #764]	; (670 <at25dfx_chip_write_buffer+0x35c>)
     372:	4798      	blx	r3
{
	enum status_code status;

	system_interrupt_enter_critical_section();

	if (module->locked) {
     374:	7923      	ldrb	r3, [r4, #4]
     376:	2b00      	cmp	r3, #0
     378:	d000      	beq.n	37c <at25dfx_chip_write_buffer+0x68>
     37a:	e1bc      	b.n	6f6 <at25dfx_chip_write_buffer+0x3e2>
		status = STATUS_BUSY;
	} else {
		module->locked = true;
     37c:	3301      	adds	r3, #1
     37e:	7123      	strb	r3, [r4, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     380:	4bbc      	ldr	r3, [pc, #752]	; (674 <at25dfx_chip_write_buffer+0x360>)
     382:	4798      	blx	r3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
     384:	2306      	movs	r3, #6
     386:	aa02      	add	r2, sp, #8
     388:	7013      	strb	r3, [r2, #0]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
     38a:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     38c:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     38e:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     390:	2900      	cmp	r1, #0
     392:	d104      	bne.n	39e <at25dfx_chip_write_buffer+0x8a>
		return &(ports[port_index]->Group[group_index]);
     394:	095a      	lsrs	r2, r3, #5
     396:	01d2      	lsls	r2, r2, #7
     398:	49b7      	ldr	r1, [pc, #732]	; (678 <at25dfx_chip_write_buffer+0x364>)
     39a:	468c      	mov	ip, r1
     39c:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     39e:	211f      	movs	r1, #31
     3a0:	400b      	ands	r3, r1
     3a2:	391e      	subs	r1, #30
     3a4:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     3a6:	6151      	str	r1, [r2, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     3a8:	2201      	movs	r2, #1
     3aa:	a902      	add	r1, sp, #8
     3ac:	6828      	ldr	r0, [r5, #0]
     3ae:	4bb3      	ldr	r3, [pc, #716]	; (67c <at25dfx_chip_write_buffer+0x368>)
     3b0:	4798      	blx	r3
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     3b2:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     3b4:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     3b6:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     3b8:	2900      	cmp	r1, #0
     3ba:	d104      	bne.n	3c6 <at25dfx_chip_write_buffer+0xb2>
		return &(ports[port_index]->Group[group_index]);
     3bc:	095a      	lsrs	r2, r3, #5
     3be:	01d2      	lsls	r2, r2, #7
     3c0:	49ad      	ldr	r1, [pc, #692]	; (678 <at25dfx_chip_write_buffer+0x364>)
     3c2:	468c      	mov	ip, r1
     3c4:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3c6:	211f      	movs	r1, #31
     3c8:	400b      	ands	r3, r1
     3ca:	391e      	subs	r1, #30
     3cc:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     3ce:	6191      	str	r1, [r2, #24]
	cmd.opcode = AT25DFX_COMMAND_PROGRAM_PAGE;
	cmd.command_size = 4;
	cmd.address = address;
	cmd.data.tx = (uint8_t *)data;
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
	cmd.length = min(page_bytes, length);
     3d0:	23ff      	movs	r3, #255	; 0xff
     3d2:	4033      	ands	r3, r6
     3d4:	001a      	movs	r2, r3
     3d6:	2380      	movs	r3, #128	; 0x80
     3d8:	005b      	lsls	r3, r3, #1
     3da:	1a9b      	subs	r3, r3, r2
     3dc:	1c1a      	adds	r2, r3, #0
     3de:	b29b      	uxth	r3, r3
     3e0:	42bb      	cmp	r3, r7
     3e2:	d900      	bls.n	3e6 <at25dfx_chip_write_buffer+0xd2>
     3e4:	1c3a      	adds	r2, r7, #0
     3e6:	b293      	uxth	r3, r2
     3e8:	4699      	mov	r9, r3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
     3ea:	2302      	movs	r3, #2
     3ec:	aa02      	add	r2, sp, #8
     3ee:	7013      	strb	r3, [r2, #0]

	if (cmd.command_size > 1) {
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
     3f0:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     3f2:	0a33      	lsrs	r3, r6, #8
     3f4:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     3f6:	0c33      	lsrs	r3, r6, #16
     3f8:	7053      	strb	r3, [r2, #1]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
     3fa:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     3fc:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     3fe:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     400:	2900      	cmp	r1, #0
     402:	d104      	bne.n	40e <at25dfx_chip_write_buffer+0xfa>
		return &(ports[port_index]->Group[group_index]);
     404:	095a      	lsrs	r2, r3, #5
     406:	01d2      	lsls	r2, r2, #7
     408:	499b      	ldr	r1, [pc, #620]	; (678 <at25dfx_chip_write_buffer+0x364>)
     40a:	468c      	mov	ip, r1
     40c:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     40e:	211f      	movs	r1, #31
     410:	400b      	ands	r3, r1
     412:	391e      	subs	r1, #30
     414:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     416:	6151      	str	r1, [r2, #20]
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     418:	2204      	movs	r2, #4
     41a:	a902      	add	r1, sp, #8
     41c:	6828      	ldr	r0, [r5, #0]
     41e:	4b97      	ldr	r3, [pc, #604]	; (67c <at25dfx_chip_write_buffer+0x368>)
     420:	4798      	blx	r3
	Assert(status == STATUS_OK);

	if (cmd.length) {
     422:	464b      	mov	r3, r9
     424:	2b00      	cmp	r3, #0
     426:	d004      	beq.n	432 <at25dfx_chip_write_buffer+0x11e>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     428:	464a      	mov	r2, r9
     42a:	9900      	ldr	r1, [sp, #0]
     42c:	6828      	ldr	r0, [r5, #0]
     42e:	4b93      	ldr	r3, [pc, #588]	; (67c <at25dfx_chip_write_buffer+0x368>)
     430:	4798      	blx	r3
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     432:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     434:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     436:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     438:	2900      	cmp	r1, #0
     43a:	d104      	bne.n	446 <at25dfx_chip_write_buffer+0x132>
		return &(ports[port_index]->Group[group_index]);
     43c:	095a      	lsrs	r2, r3, #5
     43e:	01d2      	lsls	r2, r2, #7
     440:	498d      	ldr	r1, [pc, #564]	; (678 <at25dfx_chip_write_buffer+0x364>)
     442:	468c      	mov	ip, r1
     444:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     446:	211f      	movs	r1, #31
     448:	400b      	ands	r3, r1
     44a:	391e      	subs	r1, #30
     44c:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     44e:	6191      	str	r1, [r2, #24]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     450:	682b      	ldr	r3, [r5, #0]
     452:	6819      	ldr	r1, [r3, #0]
	uint16_t status_reg = 0;

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
     454:	2201      	movs	r2, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     456:	7e0b      	ldrb	r3, [r1, #24]
     458:	4213      	tst	r3, r2
     45a:	d0fc      	beq.n	456 <at25dfx_chip_write_buffer+0x142>
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
     45c:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     45e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     460:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     462:	2900      	cmp	r1, #0
     464:	d104      	bne.n	470 <at25dfx_chip_write_buffer+0x15c>
		return &(ports[port_index]->Group[group_index]);
     466:	095a      	lsrs	r2, r3, #5
     468:	01d2      	lsls	r2, r2, #7
     46a:	4983      	ldr	r1, [pc, #524]	; (678 <at25dfx_chip_write_buffer+0x364>)
     46c:	468c      	mov	ip, r1
     46e:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     470:	211f      	movs	r1, #31
     472:	400b      	ands	r3, r1
     474:	391e      	subs	r1, #30
     476:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     478:	6151      	str	r1, [r2, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     47a:	682b      	ldr	r3, [r5, #0]
     47c:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     47e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     480:	07d2      	lsls	r2, r2, #31
     482:	d501      	bpl.n	488 <at25dfx_chip_write_buffer+0x174>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     484:	2205      	movs	r2, #5
     486:	629a      	str	r2, [r3, #40]	; 0x28

	_at25dfx_chip_select(chip);
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
     488:	6828      	ldr	r0, [r5, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     48a:	6802      	ldr	r2, [r0, #0]
     48c:	2104      	movs	r1, #4

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     48e:	7e13      	ldrb	r3, [r2, #24]
     490:	420b      	tst	r3, r1
     492:	d0fc      	beq.n	48e <at25dfx_chip_write_buffer+0x17a>
     494:	7e13      	ldrb	r3, [r2, #24]
 */
static inline enum status_code _at25dfx_chip_get_nonbusy_status(
		struct at25dfx_chip_module *chip)
{
	enum status_code status;
	uint16_t status_reg = 0;
     496:	2400      	movs	r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     498:	075b      	lsls	r3, r3, #29
     49a:	d50d      	bpl.n	4b8 <at25dfx_chip_write_buffer+0x1a4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     49c:	8b53      	ldrh	r3, [r2, #26]
     49e:	075b      	lsls	r3, r3, #29
     4a0:	d501      	bpl.n	4a6 <at25dfx_chip_write_buffer+0x192>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     4a2:	2304      	movs	r3, #4
     4a4:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     4a6:	7983      	ldrb	r3, [r0, #6]
     4a8:	2b01      	cmp	r3, #1
     4aa:	d103      	bne.n	4b4 <at25dfx_chip_write_buffer+0x1a0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     4ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
     4ae:	05db      	lsls	r3, r3, #23
     4b0:	0ddc      	lsrs	r4, r3, #23
     4b2:	e001      	b.n	4b8 <at25dfx_chip_write_buffer+0x1a4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     4b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
     4b6:	b2dc      	uxtb	r4, r3

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
     4b8:	2101      	movs	r1, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     4ba:	2300      	movs	r3, #0
     4bc:	4698      	mov	r8, r3
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
     4be:	2004      	movs	r0, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     4c0:	682b      	ldr	r3, [r5, #0]
     4c2:	681a      	ldr	r2, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     4c4:	7e13      	ldrb	r3, [r2, #24]

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
     4c6:	420b      	tst	r3, r1
     4c8:	d0fc      	beq.n	4c4 <at25dfx_chip_write_buffer+0x1b0>
     4ca:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     4cc:	420b      	tst	r3, r1
     4ce:	d001      	beq.n	4d4 <at25dfx_chip_write_buffer+0x1c0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     4d0:	4643      	mov	r3, r8
     4d2:	6293      	str	r3, [r2, #40]	; 0x28
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
     4d4:	682b      	ldr	r3, [r5, #0]
     4d6:	469a      	mov	sl, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     4d8:	681a      	ldr	r2, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     4da:	7e13      	ldrb	r3, [r2, #24]
     4dc:	4203      	tst	r3, r0
     4de:	d0fc      	beq.n	4da <at25dfx_chip_write_buffer+0x1c6>
     4e0:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     4e2:	4203      	tst	r3, r0
     4e4:	d00d      	beq.n	502 <at25dfx_chip_write_buffer+0x1ee>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     4e6:	8b53      	ldrh	r3, [r2, #26]
     4e8:	4203      	tst	r3, r0
     4ea:	d000      	beq.n	4ee <at25dfx_chip_write_buffer+0x1da>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     4ec:	8350      	strh	r0, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     4ee:	4653      	mov	r3, sl
     4f0:	799b      	ldrb	r3, [r3, #6]
     4f2:	2b01      	cmp	r3, #1
     4f4:	d103      	bne.n	4fe <at25dfx_chip_write_buffer+0x1ea>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     4f6:	6a93      	ldr	r3, [r2, #40]	; 0x28
     4f8:	05db      	lsls	r3, r3, #23
     4fa:	0ddc      	lsrs	r4, r3, #23
     4fc:	e001      	b.n	502 <at25dfx_chip_write_buffer+0x1ee>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     4fe:	6a93      	ldr	r3, [r2, #40]	; 0x28
     500:	b2dc      	uxtb	r4, r3
		}
		status = spi_read(chip->spi, &status_reg);
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
     502:	4221      	tst	r1, r4
     504:	d1dc      	bne.n	4c0 <at25dfx_chip_write_buffer+0x1ac>
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     506:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     508:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     50a:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     50c:	2900      	cmp	r1, #0
     50e:	d104      	bne.n	51a <at25dfx_chip_write_buffer+0x206>
		return &(ports[port_index]->Group[group_index]);
     510:	095a      	lsrs	r2, r3, #5
     512:	01d2      	lsls	r2, r2, #7
     514:	4958      	ldr	r1, [pc, #352]	; (678 <at25dfx_chip_write_buffer+0x364>)
     516:	468c      	mov	ip, r1
     518:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     51a:	211f      	movs	r1, #31
     51c:	400b      	ands	r3, r1
     51e:	391e      	subs	r1, #30
     520:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     522:	6191      	str	r1, [r2, #24]

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
		return STATUS_ERR_IO;
     524:	2010      	movs	r0, #16
	} while (status_reg & AT25DFX_STATUS_BUSY);

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
     526:	06a3      	lsls	r3, r4, #26
     528:	d500      	bpl.n	52c <at25dfx_chip_write_buffer+0x218>
     52a:	e0e0      	b.n	6ee <at25dfx_chip_write_buffer+0x3da>
     52c:	e0e7      	b.n	6fe <at25dfx_chip_write_buffer+0x3ea>
	} else {
		Assert(false);
		return NULL;
     52e:	2700      	movs	r7, #0
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     530:	231f      	movs	r3, #31
     532:	469a      	mov	sl, r3
     534:	2401      	movs	r4, #1

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
     536:	2306      	movs	r3, #6
     538:	aa02      	add	r2, sp, #8
     53a:	7013      	strb	r3, [r2, #0]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
     53c:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     53e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     540:	003a      	movs	r2, r7
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     542:	2900      	cmp	r1, #0
     544:	d104      	bne.n	550 <at25dfx_chip_write_buffer+0x23c>
		return &(ports[port_index]->Group[group_index]);
     546:	095a      	lsrs	r2, r3, #5
     548:	01d2      	lsls	r2, r2, #7
     54a:	494b      	ldr	r1, [pc, #300]	; (678 <at25dfx_chip_write_buffer+0x364>)
     54c:	468c      	mov	ip, r1
     54e:	4462      	add	r2, ip
     550:	4651      	mov	r1, sl
     552:	400b      	ands	r3, r1
     554:	0021      	movs	r1, r4
     556:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     558:	6151      	str	r1, [r2, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     55a:	0022      	movs	r2, r4
     55c:	a902      	add	r1, sp, #8
     55e:	6828      	ldr	r0, [r5, #0]
     560:	4b46      	ldr	r3, [pc, #280]	; (67c <at25dfx_chip_write_buffer+0x368>)
     562:	4798      	blx	r3
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     564:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     566:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     568:	003a      	movs	r2, r7
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     56a:	2900      	cmp	r1, #0
     56c:	d104      	bne.n	578 <at25dfx_chip_write_buffer+0x264>
		return &(ports[port_index]->Group[group_index]);
     56e:	095a      	lsrs	r2, r3, #5
     570:	01d2      	lsls	r2, r2, #7
     572:	4941      	ldr	r1, [pc, #260]	; (678 <at25dfx_chip_write_buffer+0x364>)
     574:	468c      	mov	ip, r1
     576:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     578:	4651      	mov	r1, sl
     57a:	400b      	ands	r3, r1
     57c:	0021      	movs	r1, r4
     57e:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     580:	6191      	str	r1, [r2, #24]
	length -= cmd.length;

	while (length && (status == STATUS_OK)) {
		_at25dfx_chip_enable_write(chip);

		cmd.address += cmd.length;
     582:	9b01      	ldr	r3, [sp, #4]
     584:	444b      	add	r3, r9
     586:	9301      	str	r3, [sp, #4]
		cmd.data.tx += cmd.length;
     588:	44cb      	add	fp, r9
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
     58a:	4643      	mov	r3, r8
     58c:	2280      	movs	r2, #128	; 0x80
     58e:	0052      	lsls	r2, r2, #1
     590:	4590      	cmp	r8, r2
     592:	d901      	bls.n	598 <at25dfx_chip_write_buffer+0x284>
     594:	4b3a      	ldr	r3, [pc, #232]	; (680 <at25dfx_chip_write_buffer+0x36c>)
     596:	881b      	ldrh	r3, [r3, #0]
     598:	b29b      	uxth	r3, r3
     59a:	4699      	mov	r9, r3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
     59c:	2302      	movs	r3, #2
     59e:	aa02      	add	r2, sp, #8
     5a0:	7013      	strb	r3, [r2, #0]

	if (cmd.command_size > 1) {
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
     5a2:	0011      	movs	r1, r2
     5a4:	9a01      	ldr	r2, [sp, #4]
     5a6:	70ca      	strb	r2, [r1, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     5a8:	0a13      	lsrs	r3, r2, #8
     5aa:	708b      	strb	r3, [r1, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     5ac:	0c13      	lsrs	r3, r2, #16
     5ae:	704b      	strb	r3, [r1, #1]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
     5b0:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     5b2:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     5b4:	003a      	movs	r2, r7
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     5b6:	2900      	cmp	r1, #0
     5b8:	d104      	bne.n	5c4 <at25dfx_chip_write_buffer+0x2b0>
		return &(ports[port_index]->Group[group_index]);
     5ba:	095a      	lsrs	r2, r3, #5
     5bc:	01d2      	lsls	r2, r2, #7
     5be:	492e      	ldr	r1, [pc, #184]	; (678 <at25dfx_chip_write_buffer+0x364>)
     5c0:	468c      	mov	ip, r1
     5c2:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     5c4:	4651      	mov	r1, sl
     5c6:	400b      	ands	r3, r1
     5c8:	0021      	movs	r1, r4
     5ca:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     5cc:	6151      	str	r1, [r2, #20]
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     5ce:	2204      	movs	r2, #4
     5d0:	a902      	add	r1, sp, #8
     5d2:	6828      	ldr	r0, [r5, #0]
     5d4:	4b29      	ldr	r3, [pc, #164]	; (67c <at25dfx_chip_write_buffer+0x368>)
     5d6:	4798      	blx	r3
	Assert(status == STATUS_OK);

	if (cmd.length) {
     5d8:	464b      	mov	r3, r9
     5da:	2b00      	cmp	r3, #0
     5dc:	d004      	beq.n	5e8 <at25dfx_chip_write_buffer+0x2d4>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     5de:	464a      	mov	r2, r9
     5e0:	4659      	mov	r1, fp
     5e2:	6828      	ldr	r0, [r5, #0]
     5e4:	4b25      	ldr	r3, [pc, #148]	; (67c <at25dfx_chip_write_buffer+0x368>)
     5e6:	4798      	blx	r3
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     5e8:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     5ea:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     5ec:	003a      	movs	r2, r7
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     5ee:	2900      	cmp	r1, #0
     5f0:	d104      	bne.n	5fc <at25dfx_chip_write_buffer+0x2e8>
		return &(ports[port_index]->Group[group_index]);
     5f2:	095a      	lsrs	r2, r3, #5
     5f4:	01d2      	lsls	r2, r2, #7
     5f6:	4920      	ldr	r1, [pc, #128]	; (678 <at25dfx_chip_write_buffer+0x364>)
     5f8:	468c      	mov	ip, r1
     5fa:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     5fc:	4651      	mov	r1, sl
     5fe:	400b      	ands	r3, r1
     600:	0021      	movs	r1, r4
     602:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     604:	6191      	str	r1, [r2, #24]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     606:	682b      	ldr	r3, [r5, #0]
     608:	681a      	ldr	r2, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     60a:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
     60c:	4223      	tst	r3, r4
     60e:	d0fc      	beq.n	60a <at25dfx_chip_write_buffer+0x2f6>
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
     610:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     612:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     614:	003a      	movs	r2, r7
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     616:	2900      	cmp	r1, #0
     618:	d104      	bne.n	624 <at25dfx_chip_write_buffer+0x310>
		return &(ports[port_index]->Group[group_index]);
     61a:	095a      	lsrs	r2, r3, #5
     61c:	01d2      	lsls	r2, r2, #7
     61e:	4916      	ldr	r1, [pc, #88]	; (678 <at25dfx_chip_write_buffer+0x364>)
     620:	468c      	mov	ip, r1
     622:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     624:	4651      	mov	r1, sl
     626:	400b      	ands	r3, r1
     628:	0021      	movs	r1, r4
     62a:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     62c:	6151      	str	r1, [r2, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     62e:	682b      	ldr	r3, [r5, #0]
     630:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     632:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     634:	4222      	tst	r2, r4
     636:	d001      	beq.n	63c <at25dfx_chip_write_buffer+0x328>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     638:	2205      	movs	r2, #5
     63a:	629a      	str	r2, [r3, #40]	; 0x28

	_at25dfx_chip_select(chip);
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
     63c:	682b      	ldr	r3, [r5, #0]
     63e:	469c      	mov	ip, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     640:	681a      	ldr	r2, [r3, #0]
     642:	2104      	movs	r1, #4

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     644:	7e13      	ldrb	r3, [r2, #24]
     646:	420b      	tst	r3, r1
     648:	d0fc      	beq.n	644 <at25dfx_chip_write_buffer+0x330>
     64a:	7e13      	ldrb	r3, [r2, #24]
 */
static inline enum status_code _at25dfx_chip_get_nonbusy_status(
		struct at25dfx_chip_module *chip)
{
	enum status_code status;
	uint16_t status_reg = 0;
     64c:	0038      	movs	r0, r7
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     64e:	075b      	lsls	r3, r3, #29
     650:	d51a      	bpl.n	688 <at25dfx_chip_write_buffer+0x374>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     652:	8b53      	ldrh	r3, [r2, #26]
     654:	075b      	lsls	r3, r3, #29
     656:	d501      	bpl.n	65c <at25dfx_chip_write_buffer+0x348>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     658:	2304      	movs	r3, #4
     65a:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     65c:	4663      	mov	r3, ip
     65e:	799b      	ldrb	r3, [r3, #6]
     660:	2b01      	cmp	r3, #1
     662:	d10f      	bne.n	684 <at25dfx_chip_write_buffer+0x370>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     664:	6a90      	ldr	r0, [r2, #40]	; 0x28
     666:	05c0      	lsls	r0, r0, #23
     668:	0dc0      	lsrs	r0, r0, #23
     66a:	e00d      	b.n	688 <at25dfx_chip_write_buffer+0x374>
     66c:	00002204 	.word	0x00002204
     670:	00001515 	.word	0x00001515
     674:	00001555 	.word	0x00001555
     678:	41004400 	.word	0x41004400
     67c:	000011d1 	.word	0x000011d1
     680:	00002200 	.word	0x00002200
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     684:	6a90      	ldr	r0, [r2, #40]	; 0x28
     686:	b2c0      	uxtb	r0, r0
		while (!spi_is_ready_to_write(chip->spi)) {
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
     688:	2104      	movs	r1, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     68a:	682b      	ldr	r3, [r5, #0]
     68c:	681a      	ldr	r2, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     68e:	7e13      	ldrb	r3, [r2, #24]

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
     690:	4223      	tst	r3, r4
     692:	d0fc      	beq.n	68e <at25dfx_chip_write_buffer+0x37a>
     694:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     696:	4223      	tst	r3, r4
     698:	d000      	beq.n	69c <at25dfx_chip_write_buffer+0x388>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     69a:	6297      	str	r7, [r2, #40]	; 0x28
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
     69c:	682e      	ldr	r6, [r5, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     69e:	6832      	ldr	r2, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     6a0:	7e13      	ldrb	r3, [r2, #24]
     6a2:	420b      	tst	r3, r1
     6a4:	d0fc      	beq.n	6a0 <at25dfx_chip_write_buffer+0x38c>
     6a6:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     6a8:	420b      	tst	r3, r1
     6aa:	d00c      	beq.n	6c6 <at25dfx_chip_write_buffer+0x3b2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     6ac:	8b53      	ldrh	r3, [r2, #26]
     6ae:	420b      	tst	r3, r1
     6b0:	d000      	beq.n	6b4 <at25dfx_chip_write_buffer+0x3a0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     6b2:	8351      	strh	r1, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     6b4:	79b3      	ldrb	r3, [r6, #6]
     6b6:	2b01      	cmp	r3, #1
     6b8:	d103      	bne.n	6c2 <at25dfx_chip_write_buffer+0x3ae>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     6ba:	6a90      	ldr	r0, [r2, #40]	; 0x28
     6bc:	05c0      	lsls	r0, r0, #23
     6be:	0dc0      	lsrs	r0, r0, #23
     6c0:	e001      	b.n	6c6 <at25dfx_chip_write_buffer+0x3b2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     6c2:	6a90      	ldr	r0, [r2, #40]	; 0x28
     6c4:	b2c0      	uxtb	r0, r0
		}
		status = spi_read(chip->spi, &status_reg);
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
     6c6:	4204      	tst	r4, r0
     6c8:	d1df      	bne.n	68a <at25dfx_chip_write_buffer+0x376>
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     6ca:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     6cc:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     6ce:	003a      	movs	r2, r7
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     6d0:	2900      	cmp	r1, #0
     6d2:	d104      	bne.n	6de <at25dfx_chip_write_buffer+0x3ca>
		return &(ports[port_index]->Group[group_index]);
     6d4:	095a      	lsrs	r2, r3, #5
     6d6:	01d2      	lsls	r2, r2, #7
     6d8:	4917      	ldr	r1, [pc, #92]	; (738 <at25dfx_chip_write_buffer+0x424>)
     6da:	468c      	mov	ip, r1
     6dc:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     6de:	4651      	mov	r1, sl
     6e0:	400b      	ands	r3, r1
     6e2:	0021      	movs	r1, r4
     6e4:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     6e6:	6191      	str	r1, [r2, #24]

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
     6e8:	0683      	lsls	r3, r0, #26
     6ea:	d514      	bpl.n	716 <at25dfx_chip_write_buffer+0x402>
		return STATUS_ERR_IO;
     6ec:	2010      	movs	r0, #16
		status = _at25dfx_chip_get_nonbusy_status(chip);

		length -= cmd.length;
	}

	_at25dfx_spi_unlock(chip->spi);
     6ee:	682b      	ldr	r3, [r5, #0]
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
	module->locked = false;
     6f0:	2200      	movs	r2, #0
     6f2:	711a      	strb	r2, [r3, #4]

	return status;
     6f4:	e019      	b.n	72a <at25dfx_chip_write_buffer+0x416>
     6f6:	4b11      	ldr	r3, [pc, #68]	; (73c <at25dfx_chip_write_buffer+0x428>)
     6f8:	4798      	blx	r3
		return STATUS_ERR_INVALID_ARG;
	}

	status = _at25dfx_spi_lock(chip->spi);
	if (status == STATUS_BUSY) {
		return status;
     6fa:	2005      	movs	r0, #5
     6fc:	e015      	b.n	72a <at25dfx_chip_write_buffer+0x416>
	cmd.length = min(page_bytes, length);
	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	status = _at25dfx_chip_get_nonbusy_status(chip);

	length -= cmd.length;
     6fe:	464b      	mov	r3, r9
     700:	1aff      	subs	r7, r7, r3
     702:	b2bb      	uxth	r3, r7
     704:	4698      	mov	r8, r3

	while (length && (status == STATUS_OK)) {
     706:	9601      	str	r6, [sp, #4]
     708:	9b00      	ldr	r3, [sp, #0]
     70a:	469b      	mov	fp, r3
     70c:	4643      	mov	r3, r8
	}
	return STATUS_OK;
     70e:	2000      	movs	r0, #0
     710:	2b00      	cmp	r3, #0
     712:	d0ec      	beq.n	6ee <at25dfx_chip_write_buffer+0x3da>
     714:	e70b      	b.n	52e <at25dfx_chip_write_buffer+0x21a>

		_at25dfx_chip_issue_write_command_wait(chip, cmd);

		status = _at25dfx_chip_get_nonbusy_status(chip);

		length -= cmd.length;
     716:	4643      	mov	r3, r8
     718:	464a      	mov	r2, r9
     71a:	1a9b      	subs	r3, r3, r2
     71c:	b29b      	uxth	r3, r3
     71e:	4698      	mov	r8, r3

	status = _at25dfx_chip_get_nonbusy_status(chip);

	length -= cmd.length;

	while (length && (status == STATUS_OK)) {
     720:	2b00      	cmp	r3, #0
     722:	d000      	beq.n	726 <at25dfx_chip_write_buffer+0x412>
     724:	e707      	b.n	536 <at25dfx_chip_write_buffer+0x222>
     726:	2000      	movs	r0, #0
     728:	e7e1      	b.n	6ee <at25dfx_chip_write_buffer+0x3da>
	}

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
     72a:	b005      	add	sp, #20
     72c:	bc3c      	pop	{r2, r3, r4, r5}
     72e:	4690      	mov	r8, r2
     730:	4699      	mov	r9, r3
     732:	46a2      	mov	sl, r4
     734:	46ab      	mov	fp, r5
     736:	bdf0      	pop	{r4, r5, r6, r7, pc}
     738:	41004400 	.word	0x41004400
     73c:	00001555 	.word	0x00001555

00000740 <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
     740:	b5f0      	push	{r4, r5, r6, r7, lr}
     742:	b083      	sub	sp, #12
     744:	0004      	movs	r4, r0
     746:	000e      	movs	r6, r1
     748:	0015      	movs	r5, r2
 *
 * \return SerialFlash storage size.
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
	switch (type) {
     74a:	7903      	ldrb	r3, [r0, #4]
     74c:	2b09      	cmp	r3, #9
     74e:	d900      	bls.n	752 <at25dfx_chip_erase_block+0x12>
     750:	e0f0      	b.n	934 <at25dfx_chip_erase_block+0x1f4>
     752:	009b      	lsls	r3, r3, #2
     754:	4a7b      	ldr	r2, [pc, #492]	; (944 <at25dfx_chip_erase_block+0x204>)
     756:	58d3      	ldr	r3, [r2, r3]
     758:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 64 * 1024UL;

	case AT25DFX_021:
		return 256 * 1024UL;
     75a:	2380      	movs	r3, #128	; 0x80
     75c:	02db      	lsls	r3, r3, #11
     75e:	e010      	b.n	782 <at25dfx_chip_erase_block+0x42>

	case AT25DFX_041A:
		return 512 * 1024UL;
     760:	2380      	movs	r3, #128	; 0x80
     762:	031b      	lsls	r3, r3, #12
     764:	e00d      	b.n	782 <at25dfx_chip_erase_block+0x42>

	case AT25DFX_081:
	case AT25DFX_081A:
		return 1024 * 1024UL;
     766:	2380      	movs	r3, #128	; 0x80
     768:	035b      	lsls	r3, r3, #13
     76a:	e00a      	b.n	782 <at25dfx_chip_erase_block+0x42>

	case AT25DFX_161:
	case AT25DFX_L161:
	case AT25DFX_Q161:
		return 2048 * 1024UL;
     76c:	2380      	movs	r3, #128	; 0x80
     76e:	039b      	lsls	r3, r3, #14
     770:	e007      	b.n	782 <at25dfx_chip_erase_block+0x42>

	case AT25DFX_321A:
		return 4096 * 1024UL;
     772:	2380      	movs	r3, #128	; 0x80
     774:	03db      	lsls	r3, r3, #15
     776:	e004      	b.n	782 <at25dfx_chip_erase_block+0x42>

	case AT25DFX_641:
		return 8192 * 1024UL;
     778:	2380      	movs	r3, #128	; 0x80
     77a:	041b      	lsls	r3, r3, #16
     77c:	e001      	b.n	782 <at25dfx_chip_erase_block+0x42>
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
	switch (type) {
	case AT25DFX_512B:
		return 64 * 1024UL;
     77e:	2380      	movs	r3, #128	; 0x80
     780:	025b      	lsls	r3, r3, #9
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
     782:	2017      	movs	r0, #23
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
     784:	42b3      	cmp	r3, r6
     786:	d800      	bhi.n	78a <at25dfx_chip_erase_block+0x4a>
     788:	e0d9      	b.n	93e <at25dfx_chip_erase_block+0x1fe>
		return STATUS_ERR_INVALID_ARG;
	}

	status = _at25dfx_spi_lock(chip->spi);
     78a:	6827      	ldr	r7, [r4, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     78c:	4b6e      	ldr	r3, [pc, #440]	; (948 <at25dfx_chip_erase_block+0x208>)
     78e:	4798      	blx	r3
{
	enum status_code status;

	system_interrupt_enter_critical_section();

	if (module->locked) {
     790:	793b      	ldrb	r3, [r7, #4]
     792:	2b00      	cmp	r3, #0
     794:	d000      	beq.n	798 <at25dfx_chip_erase_block+0x58>
     796:	e0cf      	b.n	938 <at25dfx_chip_erase_block+0x1f8>
		status = STATUS_BUSY;
	} else {
		module->locked = true;
     798:	3301      	adds	r3, #1
     79a:	713b      	strb	r3, [r7, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     79c:	4b6b      	ldr	r3, [pc, #428]	; (94c <at25dfx_chip_erase_block+0x20c>)
     79e:	4798      	blx	r3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
     7a0:	2306      	movs	r3, #6
     7a2:	466a      	mov	r2, sp
     7a4:	7013      	strb	r3, [r2, #0]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
     7a6:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     7a8:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     7aa:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     7ac:	2900      	cmp	r1, #0
     7ae:	d104      	bne.n	7ba <at25dfx_chip_erase_block+0x7a>
		return &(ports[port_index]->Group[group_index]);
     7b0:	095a      	lsrs	r2, r3, #5
     7b2:	01d2      	lsls	r2, r2, #7
     7b4:	4966      	ldr	r1, [pc, #408]	; (950 <at25dfx_chip_erase_block+0x210>)
     7b6:	468c      	mov	ip, r1
     7b8:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7ba:	211f      	movs	r1, #31
     7bc:	400b      	ands	r3, r1
     7be:	391e      	subs	r1, #30
     7c0:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     7c2:	6151      	str	r1, [r2, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     7c4:	2201      	movs	r2, #1
     7c6:	4669      	mov	r1, sp
     7c8:	6820      	ldr	r0, [r4, #0]
     7ca:	4b62      	ldr	r3, [pc, #392]	; (954 <at25dfx_chip_erase_block+0x214>)
     7cc:	4798      	blx	r3
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     7ce:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     7d0:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     7d2:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     7d4:	2900      	cmp	r1, #0
     7d6:	d104      	bne.n	7e2 <at25dfx_chip_erase_block+0xa2>
		return &(ports[port_index]->Group[group_index]);
     7d8:	095a      	lsrs	r2, r3, #5
     7da:	01d2      	lsls	r2, r2, #7
     7dc:	495c      	ldr	r1, [pc, #368]	; (950 <at25dfx_chip_erase_block+0x210>)
     7de:	468c      	mov	ip, r1
     7e0:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7e2:	211f      	movs	r1, #31
     7e4:	400b      	ands	r3, r1
     7e6:	391e      	subs	r1, #30
     7e8:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     7ea:	6191      	str	r1, [r2, #24]
		return status;
	}

	_at25dfx_chip_enable_write(chip);

	switch (block_size) {
     7ec:	2d01      	cmp	r5, #1
     7ee:	d005      	beq.n	7fc <at25dfx_chip_erase_block+0xbc>
     7f0:	2d00      	cmp	r5, #0
     7f2:	d007      	beq.n	804 <at25dfx_chip_erase_block+0xc4>
	case AT25DFX_BLOCK_SIZE_32KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
		break;

	case AT25DFX_BLOCK_SIZE_64KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
     7f4:	23d8      	movs	r3, #216	; 0xd8
		return status;
	}

	_at25dfx_chip_enable_write(chip);

	switch (block_size) {
     7f6:	2d02      	cmp	r5, #2
     7f8:	d005      	beq.n	806 <at25dfx_chip_erase_block+0xc6>
     7fa:	e001      	b.n	800 <at25dfx_chip_erase_block+0xc0>
	case AT25DFX_BLOCK_SIZE_4KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
		break;

	case AT25DFX_BLOCK_SIZE_32KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
     7fc:	2352      	movs	r3, #82	; 0x52
     7fe:	e002      	b.n	806 <at25dfx_chip_erase_block+0xc6>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
		break;

	default:
		Assert(false);
		cmd.opcode = (enum at25dfx_command_opcode)0;
     800:	2300      	movs	r3, #0
     802:	e000      	b.n	806 <at25dfx_chip_erase_block+0xc6>

	_at25dfx_chip_enable_write(chip);

	switch (block_size) {
	case AT25DFX_BLOCK_SIZE_4KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
     804:	2320      	movs	r3, #32

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
     806:	466a      	mov	r2, sp
     808:	7013      	strb	r3, [r2, #0]

	if (cmd.command_size > 1) {
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
     80a:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     80c:	0a33      	lsrs	r3, r6, #8
     80e:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     810:	0c36      	lsrs	r6, r6, #16
     812:	7056      	strb	r6, [r2, #1]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
     814:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     816:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     818:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     81a:	2900      	cmp	r1, #0
     81c:	d104      	bne.n	828 <at25dfx_chip_erase_block+0xe8>
		return &(ports[port_index]->Group[group_index]);
     81e:	095a      	lsrs	r2, r3, #5
     820:	01d2      	lsls	r2, r2, #7
     822:	494b      	ldr	r1, [pc, #300]	; (950 <at25dfx_chip_erase_block+0x210>)
     824:	468c      	mov	ip, r1
     826:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     828:	211f      	movs	r1, #31
     82a:	400b      	ands	r3, r1
     82c:	391e      	subs	r1, #30
     82e:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     830:	6151      	str	r1, [r2, #20]
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     832:	2204      	movs	r2, #4
     834:	4669      	mov	r1, sp
     836:	6820      	ldr	r0, [r4, #0]
     838:	4b46      	ldr	r3, [pc, #280]	; (954 <at25dfx_chip_erase_block+0x214>)
     83a:	4798      	blx	r3
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     83c:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     83e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     840:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     842:	2900      	cmp	r1, #0
     844:	d104      	bne.n	850 <at25dfx_chip_erase_block+0x110>
		return &(ports[port_index]->Group[group_index]);
     846:	095a      	lsrs	r2, r3, #5
     848:	01d2      	lsls	r2, r2, #7
     84a:	4941      	ldr	r1, [pc, #260]	; (950 <at25dfx_chip_erase_block+0x210>)
     84c:	468c      	mov	ip, r1
     84e:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     850:	211f      	movs	r1, #31
     852:	400b      	ands	r3, r1
     854:	391e      	subs	r1, #30
     856:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     858:	6191      	str	r1, [r2, #24]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     85a:	6823      	ldr	r3, [r4, #0]
     85c:	6819      	ldr	r1, [r3, #0]
	uint16_t status_reg = 0;

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
     85e:	2201      	movs	r2, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     860:	7e0b      	ldrb	r3, [r1, #24]
     862:	4213      	tst	r3, r2
     864:	d0fc      	beq.n	860 <at25dfx_chip_erase_block+0x120>
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
     866:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     868:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     86a:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     86c:	2900      	cmp	r1, #0
     86e:	d104      	bne.n	87a <at25dfx_chip_erase_block+0x13a>
		return &(ports[port_index]->Group[group_index]);
     870:	095a      	lsrs	r2, r3, #5
     872:	01d2      	lsls	r2, r2, #7
     874:	4936      	ldr	r1, [pc, #216]	; (950 <at25dfx_chip_erase_block+0x210>)
     876:	468c      	mov	ip, r1
     878:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     87a:	211f      	movs	r1, #31
     87c:	400b      	ands	r3, r1
     87e:	391e      	subs	r1, #30
     880:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     882:	6151      	str	r1, [r2, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     884:	6823      	ldr	r3, [r4, #0]
     886:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     888:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     88a:	07d2      	lsls	r2, r2, #31
     88c:	d501      	bpl.n	892 <at25dfx_chip_erase_block+0x152>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     88e:	2205      	movs	r2, #5
     890:	629a      	str	r2, [r3, #40]	; 0x28

	_at25dfx_chip_select(chip);
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
     892:	6820      	ldr	r0, [r4, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     894:	6802      	ldr	r2, [r0, #0]
     896:	2104      	movs	r1, #4

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     898:	7e13      	ldrb	r3, [r2, #24]
     89a:	420b      	tst	r3, r1
     89c:	d0fc      	beq.n	898 <at25dfx_chip_erase_block+0x158>
     89e:	7e13      	ldrb	r3, [r2, #24]
 */
static inline enum status_code _at25dfx_chip_get_nonbusy_status(
		struct at25dfx_chip_module *chip)
{
	enum status_code status;
	uint16_t status_reg = 0;
     8a0:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     8a2:	075b      	lsls	r3, r3, #29
     8a4:	d50d      	bpl.n	8c2 <at25dfx_chip_erase_block+0x182>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     8a6:	8b53      	ldrh	r3, [r2, #26]
     8a8:	075b      	lsls	r3, r3, #29
     8aa:	d501      	bpl.n	8b0 <at25dfx_chip_erase_block+0x170>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     8ac:	2304      	movs	r3, #4
     8ae:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     8b0:	7983      	ldrb	r3, [r0, #6]
     8b2:	2b01      	cmp	r3, #1
     8b4:	d103      	bne.n	8be <at25dfx_chip_erase_block+0x17e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     8b6:	6a95      	ldr	r5, [r2, #40]	; 0x28
     8b8:	05ed      	lsls	r5, r5, #23
     8ba:	0ded      	lsrs	r5, r5, #23
     8bc:	e001      	b.n	8c2 <at25dfx_chip_erase_block+0x182>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     8be:	6a95      	ldr	r5, [r2, #40]	; 0x28
     8c0:	b2ed      	uxtb	r5, r5

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
     8c2:	2101      	movs	r1, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     8c4:	2700      	movs	r7, #0
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
     8c6:	2004      	movs	r0, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8c8:	6823      	ldr	r3, [r4, #0]
     8ca:	681a      	ldr	r2, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     8cc:	7e13      	ldrb	r3, [r2, #24]

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
     8ce:	420b      	tst	r3, r1
     8d0:	d0fc      	beq.n	8cc <at25dfx_chip_erase_block+0x18c>
     8d2:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     8d4:	420b      	tst	r3, r1
     8d6:	d000      	beq.n	8da <at25dfx_chip_erase_block+0x19a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     8d8:	6297      	str	r7, [r2, #40]	; 0x28
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
     8da:	6826      	ldr	r6, [r4, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8dc:	6832      	ldr	r2, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     8de:	7e13      	ldrb	r3, [r2, #24]
     8e0:	4203      	tst	r3, r0
     8e2:	d0fc      	beq.n	8de <at25dfx_chip_erase_block+0x19e>
     8e4:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     8e6:	4203      	tst	r3, r0
     8e8:	d00c      	beq.n	904 <at25dfx_chip_erase_block+0x1c4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     8ea:	8b53      	ldrh	r3, [r2, #26]
     8ec:	4203      	tst	r3, r0
     8ee:	d000      	beq.n	8f2 <at25dfx_chip_erase_block+0x1b2>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     8f0:	8350      	strh	r0, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     8f2:	79b3      	ldrb	r3, [r6, #6]
     8f4:	2b01      	cmp	r3, #1
     8f6:	d103      	bne.n	900 <at25dfx_chip_erase_block+0x1c0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     8f8:	6a95      	ldr	r5, [r2, #40]	; 0x28
     8fa:	05ed      	lsls	r5, r5, #23
     8fc:	0ded      	lsrs	r5, r5, #23
     8fe:	e001      	b.n	904 <at25dfx_chip_erase_block+0x1c4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     900:	6a95      	ldr	r5, [r2, #40]	; 0x28
     902:	b2ed      	uxtb	r5, r5
		}
		status = spi_read(chip->spi, &status_reg);
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
     904:	4229      	tst	r1, r5
     906:	d1df      	bne.n	8c8 <at25dfx_chip_erase_block+0x188>
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     908:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     90a:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     90c:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     90e:	2900      	cmp	r1, #0
     910:	d104      	bne.n	91c <at25dfx_chip_erase_block+0x1dc>
		return &(ports[port_index]->Group[group_index]);
     912:	095a      	lsrs	r2, r3, #5
     914:	01d2      	lsls	r2, r2, #7
     916:	490e      	ldr	r1, [pc, #56]	; (950 <at25dfx_chip_erase_block+0x210>)
     918:	468c      	mov	ip, r1
     91a:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     91c:	211f      	movs	r1, #31
     91e:	400b      	ands	r3, r1
     920:	391e      	subs	r1, #30
     922:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     924:	6191      	str	r1, [r2, #24]

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
     926:	06a8      	lsls	r0, r5, #26
		return STATUS_ERR_IO;
	}
	return STATUS_OK;
     928:	0fc0      	lsrs	r0, r0, #31
     92a:	0100      	lsls	r0, r0, #4

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);
     92c:	6823      	ldr	r3, [r4, #0]
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
	module->locked = false;
     92e:	2200      	movs	r2, #0
     930:	711a      	strb	r2, [r3, #4]

	return status;
     932:	e004      	b.n	93e <at25dfx_chip_erase_block+0x1fe>
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
     934:	2017      	movs	r0, #23
     936:	e002      	b.n	93e <at25dfx_chip_erase_block+0x1fe>
     938:	4b04      	ldr	r3, [pc, #16]	; (94c <at25dfx_chip_erase_block+0x20c>)
     93a:	4798      	blx	r3
	}

	status = _at25dfx_spi_lock(chip->spi);
	if (status == STATUS_BUSY) {
		return status;
     93c:	2005      	movs	r0, #5
	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
     93e:	b003      	add	sp, #12
     940:	bdf0      	pop	{r4, r5, r6, r7, pc}
     942:	46c0      	nop			; (mov r8, r8)
     944:	0000222c 	.word	0x0000222c
     948:	00001515 	.word	0x00001515
     94c:	00001555 	.word	0x00001555
     950:	41004400 	.word	0x41004400
     954:	000011d1 	.word	0x000011d1

00000958 <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
     958:	b570      	push	{r4, r5, r6, lr}
     95a:	b082      	sub	sp, #8
     95c:	0004      	movs	r4, r0
     95e:	000d      	movs	r5, r1
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     960:	6806      	ldr	r6, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     962:	4b35      	ldr	r3, [pc, #212]	; (a38 <at25dfx_chip_set_global_sector_protect+0xe0>)
     964:	4798      	blx	r3
{
	enum status_code status;

	system_interrupt_enter_critical_section();

	if (module->locked) {
     966:	7933      	ldrb	r3, [r6, #4]
     968:	2b00      	cmp	r3, #0
     96a:	d160      	bne.n	a2e <at25dfx_chip_set_global_sector_protect+0xd6>
		status = STATUS_BUSY;
	} else {
		module->locked = true;
     96c:	3301      	adds	r3, #1
     96e:	7133      	strb	r3, [r6, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     970:	4b32      	ldr	r3, [pc, #200]	; (a3c <at25dfx_chip_set_global_sector_protect+0xe4>)
     972:	4798      	blx	r3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
     974:	2306      	movs	r3, #6
     976:	466a      	mov	r2, sp
     978:	7013      	strb	r3, [r2, #0]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
     97a:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     97c:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     97e:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     980:	2900      	cmp	r1, #0
     982:	d104      	bne.n	98e <at25dfx_chip_set_global_sector_protect+0x36>
		return &(ports[port_index]->Group[group_index]);
     984:	095a      	lsrs	r2, r3, #5
     986:	01d2      	lsls	r2, r2, #7
     988:	492d      	ldr	r1, [pc, #180]	; (a40 <at25dfx_chip_set_global_sector_protect+0xe8>)
     98a:	468c      	mov	ip, r1
     98c:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     98e:	211f      	movs	r1, #31
     990:	400b      	ands	r3, r1
     992:	391e      	subs	r1, #30
     994:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     996:	6151      	str	r1, [r2, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     998:	2201      	movs	r2, #1
     99a:	4669      	mov	r1, sp
     99c:	6820      	ldr	r0, [r4, #0]
     99e:	4b29      	ldr	r3, [pc, #164]	; (a44 <at25dfx_chip_set_global_sector_protect+0xec>)
     9a0:	4798      	blx	r3
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     9a2:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     9a4:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     9a6:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     9a8:	2900      	cmp	r1, #0
     9aa:	d104      	bne.n	9b6 <at25dfx_chip_set_global_sector_protect+0x5e>
		return &(ports[port_index]->Group[group_index]);
     9ac:	095a      	lsrs	r2, r3, #5
     9ae:	01d2      	lsls	r2, r2, #7
     9b0:	4923      	ldr	r1, [pc, #140]	; (a40 <at25dfx_chip_set_global_sector_protect+0xe8>)
     9b2:	468c      	mov	ip, r1
     9b4:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9b6:	211f      	movs	r1, #31
     9b8:	400b      	ands	r3, r1
     9ba:	391e      	subs	r1, #30
     9bc:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     9be:	6191      	str	r1, [r2, #24]
		return status;
	}

	_at25dfx_chip_enable_write(chip);

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
     9c0:	233c      	movs	r3, #60	; 0x3c
     9c2:	1e6a      	subs	r2, r5, #1
     9c4:	4195      	sbcs	r5, r2
     9c6:	426d      	negs	r5, r5
     9c8:	402b      	ands	r3, r5
     9ca:	466a      	mov	r2, sp
     9cc:	71d3      	strb	r3, [r2, #7]

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
     9ce:	2301      	movs	r3, #1
     9d0:	466a      	mov	r2, sp
     9d2:	7013      	strb	r3, [r2, #0]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
     9d4:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     9d6:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     9d8:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     9da:	2900      	cmp	r1, #0
     9dc:	d104      	bne.n	9e8 <at25dfx_chip_set_global_sector_protect+0x90>
		return &(ports[port_index]->Group[group_index]);
     9de:	095a      	lsrs	r2, r3, #5
     9e0:	01d2      	lsls	r2, r2, #7
     9e2:	4917      	ldr	r1, [pc, #92]	; (a40 <at25dfx_chip_set_global_sector_protect+0xe8>)
     9e4:	468c      	mov	ip, r1
     9e6:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9e8:	211f      	movs	r1, #31
     9ea:	400b      	ands	r3, r1
     9ec:	391e      	subs	r1, #30
     9ee:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     9f0:	6151      	str	r1, [r2, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     9f2:	2201      	movs	r2, #1
     9f4:	4669      	mov	r1, sp
     9f6:	6820      	ldr	r0, [r4, #0]
     9f8:	4d12      	ldr	r5, [pc, #72]	; (a44 <at25dfx_chip_set_global_sector_protect+0xec>)
     9fa:	47a8      	blx	r5
	Assert(status == STATUS_OK);

	if (cmd.length) {
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     9fc:	2201      	movs	r2, #1
     9fe:	466b      	mov	r3, sp
     a00:	1dd9      	adds	r1, r3, #7
     a02:	6820      	ldr	r0, [r4, #0]
     a04:	47a8      	blx	r5
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     a06:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     a08:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     a0a:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     a0c:	2900      	cmp	r1, #0
     a0e:	d104      	bne.n	a1a <at25dfx_chip_set_global_sector_protect+0xc2>
		return &(ports[port_index]->Group[group_index]);
     a10:	095a      	lsrs	r2, r3, #5
     a12:	01d2      	lsls	r2, r2, #7
     a14:	490a      	ldr	r1, [pc, #40]	; (a40 <at25dfx_chip_set_global_sector_protect+0xe8>)
     a16:	468c      	mov	ip, r1
     a18:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     a1a:	211f      	movs	r1, #31
     a1c:	400b      	ands	r3, r1
     a1e:	391e      	subs	r1, #30
     a20:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     a22:	6191      	str	r1, [r2, #24]
	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
     a24:	6823      	ldr	r3, [r4, #0]
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
	module->locked = false;
     a26:	2200      	movs	r2, #0
     a28:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
     a2a:	2000      	movs	r0, #0
     a2c:	e002      	b.n	a34 <at25dfx_chip_set_global_sector_protect+0xdc>
     a2e:	4b03      	ldr	r3, [pc, #12]	; (a3c <at25dfx_chip_set_global_sector_protect+0xe4>)
     a30:	4798      	blx	r3

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
	if (status == STATUS_BUSY) {
		return status;
     a32:	2005      	movs	r0, #5
	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	return STATUS_OK;
}
     a34:	b002      	add	sp, #8
     a36:	bd70      	pop	{r4, r5, r6, pc}
     a38:	00001515 	.word	0x00001515
     a3c:	00001555 	.word	0x00001555
     a40:	41004400 	.word	0x41004400
     a44:	000011d1 	.word	0x000011d1

00000a48 <at25dfx_chip_set_sector_protect>:
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_set_sector_protect(
		struct at25dfx_chip_module *chip, at25dfx_address_t address,
		bool protect)
{
     a48:	b5f0      	push	{r4, r5, r6, r7, lr}
     a4a:	b083      	sub	sp, #12
     a4c:	0004      	movs	r4, r0
     a4e:	000e      	movs	r6, r1
     a50:	0015      	movs	r5, r2
 *
 * \return SerialFlash storage size.
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
	switch (type) {
     a52:	7903      	ldrb	r3, [r0, #4]
     a54:	2b09      	cmp	r3, #9
     a56:	d87d      	bhi.n	b54 <at25dfx_chip_set_sector_protect+0x10c>
     a58:	009b      	lsls	r3, r3, #2
     a5a:	4a42      	ldr	r2, [pc, #264]	; (b64 <at25dfx_chip_set_sector_protect+0x11c>)
     a5c:	58d3      	ldr	r3, [r2, r3]
     a5e:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 64 * 1024UL;

	case AT25DFX_021:
		return 256 * 1024UL;
     a60:	2380      	movs	r3, #128	; 0x80
     a62:	02db      	lsls	r3, r3, #11
     a64:	e010      	b.n	a88 <at25dfx_chip_set_sector_protect+0x40>

	case AT25DFX_041A:
		return 512 * 1024UL;
     a66:	2380      	movs	r3, #128	; 0x80
     a68:	031b      	lsls	r3, r3, #12
     a6a:	e00d      	b.n	a88 <at25dfx_chip_set_sector_protect+0x40>

	case AT25DFX_081:
	case AT25DFX_081A:
		return 1024 * 1024UL;
     a6c:	2380      	movs	r3, #128	; 0x80
     a6e:	035b      	lsls	r3, r3, #13
     a70:	e00a      	b.n	a88 <at25dfx_chip_set_sector_protect+0x40>

	case AT25DFX_161:
	case AT25DFX_L161:
	case AT25DFX_Q161:
		return 2048 * 1024UL;
     a72:	2380      	movs	r3, #128	; 0x80
     a74:	039b      	lsls	r3, r3, #14
     a76:	e007      	b.n	a88 <at25dfx_chip_set_sector_protect+0x40>

	case AT25DFX_321A:
		return 4096 * 1024UL;
     a78:	2380      	movs	r3, #128	; 0x80
     a7a:	03db      	lsls	r3, r3, #15
     a7c:	e004      	b.n	a88 <at25dfx_chip_set_sector_protect+0x40>

	case AT25DFX_641:
		return 8192 * 1024UL;
     a7e:	2380      	movs	r3, #128	; 0x80
     a80:	041b      	lsls	r3, r3, #16
     a82:	e001      	b.n	a88 <at25dfx_chip_set_sector_protect+0x40>
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
	switch (type) {
	case AT25DFX_512B:
		return 64 * 1024UL;
     a84:	2380      	movs	r3, #128	; 0x80
     a86:	025b      	lsls	r3, r3, #9
	struct at25dfx_command cmd;

	Assert(chip);

	if ((address) >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
     a88:	2017      	movs	r0, #23
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if ((address) >= _at25dfx_get_device_size(chip->type)) {
     a8a:	42b3      	cmp	r3, r6
     a8c:	d967      	bls.n	b5e <at25dfx_chip_set_sector_protect+0x116>
		return STATUS_ERR_INVALID_ARG;
	}

	status = _at25dfx_spi_lock(chip->spi);
     a8e:	6827      	ldr	r7, [r4, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     a90:	4b35      	ldr	r3, [pc, #212]	; (b68 <at25dfx_chip_set_sector_protect+0x120>)
     a92:	4798      	blx	r3
{
	enum status_code status;

	system_interrupt_enter_critical_section();

	if (module->locked) {
     a94:	793b      	ldrb	r3, [r7, #4]
     a96:	2b00      	cmp	r3, #0
     a98:	d15e      	bne.n	b58 <at25dfx_chip_set_sector_protect+0x110>
		status = STATUS_BUSY;
	} else {
		module->locked = true;
     a9a:	3301      	adds	r3, #1
     a9c:	713b      	strb	r3, [r7, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     a9e:	4b33      	ldr	r3, [pc, #204]	; (b6c <at25dfx_chip_set_sector_protect+0x124>)
     aa0:	4798      	blx	r3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
     aa2:	2306      	movs	r3, #6
     aa4:	466a      	mov	r2, sp
     aa6:	7013      	strb	r3, [r2, #0]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
     aa8:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     aaa:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     aac:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     aae:	2900      	cmp	r1, #0
     ab0:	d104      	bne.n	abc <at25dfx_chip_set_sector_protect+0x74>
		return &(ports[port_index]->Group[group_index]);
     ab2:	095a      	lsrs	r2, r3, #5
     ab4:	01d2      	lsls	r2, r2, #7
     ab6:	492e      	ldr	r1, [pc, #184]	; (b70 <at25dfx_chip_set_sector_protect+0x128>)
     ab8:	468c      	mov	ip, r1
     aba:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     abc:	211f      	movs	r1, #31
     abe:	400b      	ands	r3, r1
     ac0:	391e      	subs	r1, #30
     ac2:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     ac4:	6151      	str	r1, [r2, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     ac6:	2201      	movs	r2, #1
     ac8:	4669      	mov	r1, sp
     aca:	6820      	ldr	r0, [r4, #0]
     acc:	4b29      	ldr	r3, [pc, #164]	; (b74 <at25dfx_chip_set_sector_protect+0x12c>)
     ace:	4798      	blx	r3
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     ad0:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     ad2:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     ad4:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     ad6:	2900      	cmp	r1, #0
     ad8:	d104      	bne.n	ae4 <at25dfx_chip_set_sector_protect+0x9c>
		return &(ports[port_index]->Group[group_index]);
     ada:	095a      	lsrs	r2, r3, #5
     adc:	01d2      	lsls	r2, r2, #7
     ade:	4924      	ldr	r1, [pc, #144]	; (b70 <at25dfx_chip_set_sector_protect+0x128>)
     ae0:	468c      	mov	ip, r1
     ae2:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     ae4:	211f      	movs	r1, #31
     ae6:	400b      	ands	r3, r1
     ae8:	391e      	subs	r1, #30
     aea:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     aec:	6191      	str	r1, [r2, #24]
		return status;
	}

	_at25dfx_chip_enable_write(chip);

	cmd.opcode = protect ?
     aee:	2336      	movs	r3, #54	; 0x36
     af0:	2d00      	cmp	r5, #0
     af2:	d100      	bne.n	af6 <at25dfx_chip_set_sector_protect+0xae>
     af4:	3303      	adds	r3, #3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
     af6:	466a      	mov	r2, sp
     af8:	7013      	strb	r3, [r2, #0]

	if (cmd.command_size > 1) {
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
     afa:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     afc:	0a33      	lsrs	r3, r6, #8
     afe:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     b00:	0c36      	lsrs	r6, r6, #16
     b02:	7056      	strb	r6, [r2, #1]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
     b04:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     b06:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     b08:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     b0a:	2900      	cmp	r1, #0
     b0c:	d104      	bne.n	b18 <at25dfx_chip_set_sector_protect+0xd0>
		return &(ports[port_index]->Group[group_index]);
     b0e:	095a      	lsrs	r2, r3, #5
     b10:	01d2      	lsls	r2, r2, #7
     b12:	4917      	ldr	r1, [pc, #92]	; (b70 <at25dfx_chip_set_sector_protect+0x128>)
     b14:	468c      	mov	ip, r1
     b16:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     b18:	211f      	movs	r1, #31
     b1a:	400b      	ands	r3, r1
     b1c:	391e      	subs	r1, #30
     b1e:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     b20:	6151      	str	r1, [r2, #20]
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     b22:	2204      	movs	r2, #4
     b24:	4669      	mov	r1, sp
     b26:	6820      	ldr	r0, [r4, #0]
     b28:	4b12      	ldr	r3, [pc, #72]	; (b74 <at25dfx_chip_set_sector_protect+0x12c>)
     b2a:	4798      	blx	r3
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     b2c:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     b2e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     b30:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     b32:	2900      	cmp	r1, #0
     b34:	d104      	bne.n	b40 <at25dfx_chip_set_sector_protect+0xf8>
		return &(ports[port_index]->Group[group_index]);
     b36:	095a      	lsrs	r2, r3, #5
     b38:	01d2      	lsls	r2, r2, #7
     b3a:	490d      	ldr	r1, [pc, #52]	; (b70 <at25dfx_chip_set_sector_protect+0x128>)
     b3c:	468c      	mov	ip, r1
     b3e:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     b40:	211f      	movs	r1, #31
     b42:	400b      	ands	r3, r1
     b44:	391e      	subs	r1, #30
     b46:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     b48:	6191      	str	r1, [r2, #24]
	// Init to avoid warnings with -Os
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
     b4a:	6823      	ldr	r3, [r4, #0]
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
	module->locked = false;
     b4c:	2200      	movs	r2, #0
     b4e:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
     b50:	2000      	movs	r0, #0
     b52:	e004      	b.n	b5e <at25dfx_chip_set_sector_protect+0x116>
	struct at25dfx_command cmd;

	Assert(chip);

	if ((address) >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
     b54:	2017      	movs	r0, #23
     b56:	e002      	b.n	b5e <at25dfx_chip_set_sector_protect+0x116>
     b58:	4b04      	ldr	r3, [pc, #16]	; (b6c <at25dfx_chip_set_sector_protect+0x124>)
     b5a:	4798      	blx	r3
	}

	status = _at25dfx_spi_lock(chip->spi);
	if (status == STATUS_BUSY) {
		return status;
     b5c:	2005      	movs	r0, #5
	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	return STATUS_OK;
}
     b5e:	b003      	add	sp, #12
     b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b62:	46c0      	nop			; (mov r8, r8)
     b64:	00002254 	.word	0x00002254
     b68:	00001515 	.word	0x00001515
     b6c:	00001555 	.word	0x00001555
     b70:	41004400 	.word	0x41004400
     b74:	000011d1 	.word	0x000011d1

00000b78 <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
     b78:	b530      	push	{r4, r5, lr}
     b7a:	b083      	sub	sp, #12
     b7c:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     b7e:	6805      	ldr	r5, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     b80:	4b1c      	ldr	r3, [pc, #112]	; (bf4 <at25dfx_chip_sleep+0x7c>)
     b82:	4798      	blx	r3
{
	enum status_code status;

	system_interrupt_enter_critical_section();

	if (module->locked) {
     b84:	792b      	ldrb	r3, [r5, #4]
     b86:	2b00      	cmp	r3, #0
     b88:	d12e      	bne.n	be8 <at25dfx_chip_sleep+0x70>
		status = STATUS_BUSY;
	} else {
		module->locked = true;
     b8a:	3301      	adds	r3, #1
     b8c:	712b      	strb	r3, [r5, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     b8e:	4b1a      	ldr	r3, [pc, #104]	; (bf8 <at25dfx_chip_sleep+0x80>)
     b90:	4798      	blx	r3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
     b92:	23b9      	movs	r3, #185	; 0xb9
     b94:	466a      	mov	r2, sp
     b96:	7013      	strb	r3, [r2, #0]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
     b98:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     b9a:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     b9c:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     b9e:	2900      	cmp	r1, #0
     ba0:	d104      	bne.n	bac <at25dfx_chip_sleep+0x34>
		return &(ports[port_index]->Group[group_index]);
     ba2:	095a      	lsrs	r2, r3, #5
     ba4:	01d2      	lsls	r2, r2, #7
     ba6:	4915      	ldr	r1, [pc, #84]	; (bfc <at25dfx_chip_sleep+0x84>)
     ba8:	468c      	mov	ip, r1
     baa:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     bac:	211f      	movs	r1, #31
     bae:	400b      	ands	r3, r1
     bb0:	391e      	subs	r1, #30
     bb2:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     bb4:	6151      	str	r1, [r2, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     bb6:	2201      	movs	r2, #1
     bb8:	4669      	mov	r1, sp
     bba:	6820      	ldr	r0, [r4, #0]
     bbc:	4b10      	ldr	r3, [pc, #64]	; (c00 <at25dfx_chip_sleep+0x88>)
     bbe:	4798      	blx	r3
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     bc0:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     bc2:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     bc4:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     bc6:	2900      	cmp	r1, #0
     bc8:	d104      	bne.n	bd4 <at25dfx_chip_sleep+0x5c>
		return &(ports[port_index]->Group[group_index]);
     bca:	095a      	lsrs	r2, r3, #5
     bcc:	01d2      	lsls	r2, r2, #7
     bce:	490b      	ldr	r1, [pc, #44]	; (bfc <at25dfx_chip_sleep+0x84>)
     bd0:	468c      	mov	ip, r1
     bd2:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     bd4:	211f      	movs	r1, #31
     bd6:	400b      	ands	r3, r1
     bd8:	391e      	subs	r1, #30
     bda:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     bdc:	6191      	str	r1, [r2, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
     bde:	6823      	ldr	r3, [r4, #0]
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
	module->locked = false;
     be0:	2200      	movs	r2, #0
     be2:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
     be4:	2000      	movs	r0, #0
     be6:	e002      	b.n	bee <at25dfx_chip_sleep+0x76>
     be8:	4b03      	ldr	r3, [pc, #12]	; (bf8 <at25dfx_chip_sleep+0x80>)
     bea:	4798      	blx	r3

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
	if (status == STATUS_BUSY) {
		return status;
     bec:	2005      	movs	r0, #5
	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	return STATUS_OK;
}
     bee:	b003      	add	sp, #12
     bf0:	bd30      	pop	{r4, r5, pc}
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	00001515 	.word	0x00001515
     bf8:	00001555 	.word	0x00001555
     bfc:	41004400 	.word	0x41004400
     c00:	000011d1 	.word	0x000011d1

00000c04 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
     c04:	b530      	push	{r4, r5, lr}
     c06:	b083      	sub	sp, #12
     c08:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     c0a:	6805      	ldr	r5, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     c0c:	4b1c      	ldr	r3, [pc, #112]	; (c80 <at25dfx_chip_wake+0x7c>)
     c0e:	4798      	blx	r3
{
	enum status_code status;

	system_interrupt_enter_critical_section();

	if (module->locked) {
     c10:	792b      	ldrb	r3, [r5, #4]
     c12:	2b00      	cmp	r3, #0
     c14:	d12e      	bne.n	c74 <at25dfx_chip_wake+0x70>
		status = STATUS_BUSY;
	} else {
		module->locked = true;
     c16:	3301      	adds	r3, #1
     c18:	712b      	strb	r3, [r5, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     c1a:	4b1a      	ldr	r3, [pc, #104]	; (c84 <at25dfx_chip_wake+0x80>)
     c1c:	4798      	blx	r3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
     c1e:	23ab      	movs	r3, #171	; 0xab
     c20:	466a      	mov	r2, sp
     c22:	7013      	strb	r3, [r2, #0]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
     c24:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     c26:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     c28:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     c2a:	2900      	cmp	r1, #0
     c2c:	d104      	bne.n	c38 <at25dfx_chip_wake+0x34>
		return &(ports[port_index]->Group[group_index]);
     c2e:	095a      	lsrs	r2, r3, #5
     c30:	01d2      	lsls	r2, r2, #7
     c32:	4915      	ldr	r1, [pc, #84]	; (c88 <at25dfx_chip_wake+0x84>)
     c34:	468c      	mov	ip, r1
     c36:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c38:	211f      	movs	r1, #31
     c3a:	400b      	ands	r3, r1
     c3c:	391e      	subs	r1, #30
     c3e:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     c40:	6151      	str	r1, [r2, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     c42:	2201      	movs	r2, #1
     c44:	4669      	mov	r1, sp
     c46:	6820      	ldr	r0, [r4, #0]
     c48:	4b10      	ldr	r3, [pc, #64]	; (c8c <at25dfx_chip_wake+0x88>)
     c4a:	4798      	blx	r3
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     c4c:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     c4e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     c50:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     c52:	2900      	cmp	r1, #0
     c54:	d104      	bne.n	c60 <at25dfx_chip_wake+0x5c>
		return &(ports[port_index]->Group[group_index]);
     c56:	095a      	lsrs	r2, r3, #5
     c58:	01d2      	lsls	r2, r2, #7
     c5a:	490b      	ldr	r1, [pc, #44]	; (c88 <at25dfx_chip_wake+0x84>)
     c5c:	468c      	mov	ip, r1
     c5e:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c60:	211f      	movs	r1, #31
     c62:	400b      	ands	r3, r1
     c64:	391e      	subs	r1, #30
     c66:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     c68:	6191      	str	r1, [r2, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
     c6a:	6823      	ldr	r3, [r4, #0]
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
	module->locked = false;
     c6c:	2200      	movs	r2, #0
     c6e:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
     c70:	2000      	movs	r0, #0
     c72:	e002      	b.n	c7a <at25dfx_chip_wake+0x76>
     c74:	4b03      	ldr	r3, [pc, #12]	; (c84 <at25dfx_chip_wake+0x80>)
     c76:	4798      	blx	r3

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
	if (status == STATUS_BUSY) {
		return status;
     c78:	2005      	movs	r0, #5
	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	return STATUS_OK;
     c7a:	b003      	add	sp, #12
     c7c:	bd30      	pop	{r4, r5, pc}
     c7e:	46c0      	nop			; (mov r8, r8)
     c80:	00001515 	.word	0x00001515
     c84:	00001555 	.word	0x00001555
     c88:	41004400 	.word	0x41004400
     c8c:	000011d1 	.word	0x000011d1

00000c90 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     c90:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     c92:	0080      	lsls	r0, r0, #2
     c94:	4b14      	ldr	r3, [pc, #80]	; (ce8 <_tc_interrupt_handler+0x58>)
     c96:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     c98:	682b      	ldr	r3, [r5, #0]
     c9a:	7b9c      	ldrb	r4, [r3, #14]
     c9c:	7e2b      	ldrb	r3, [r5, #24]
     c9e:	401c      	ands	r4, r3
     ca0:	7e6b      	ldrb	r3, [r5, #25]
     ca2:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     ca4:	07e3      	lsls	r3, r4, #31
     ca6:	d505      	bpl.n	cb4 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     ca8:	0028      	movs	r0, r5
     caa:	68ab      	ldr	r3, [r5, #8]
     cac:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     cae:	2301      	movs	r3, #1
     cb0:	682a      	ldr	r2, [r5, #0]
     cb2:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     cb4:	07a3      	lsls	r3, r4, #30
     cb6:	d505      	bpl.n	cc4 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     cb8:	0028      	movs	r0, r5
     cba:	68eb      	ldr	r3, [r5, #12]
     cbc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     cbe:	2302      	movs	r3, #2
     cc0:	682a      	ldr	r2, [r5, #0]
     cc2:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     cc4:	06e3      	lsls	r3, r4, #27
     cc6:	d505      	bpl.n	cd4 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     cc8:	0028      	movs	r0, r5
     cca:	692b      	ldr	r3, [r5, #16]
     ccc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     cce:	2310      	movs	r3, #16
     cd0:	682a      	ldr	r2, [r5, #0]
     cd2:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     cd4:	06a3      	lsls	r3, r4, #26
     cd6:	d505      	bpl.n	ce4 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     cd8:	0028      	movs	r0, r5
     cda:	696b      	ldr	r3, [r5, #20]
     cdc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     cde:	682b      	ldr	r3, [r5, #0]
     ce0:	2220      	movs	r2, #32
     ce2:	739a      	strb	r2, [r3, #14]
	}
}
     ce4:	bd70      	pop	{r4, r5, r6, pc}
     ce6:	46c0      	nop			; (mov r8, r8)
     ce8:	20000074 	.word	0x20000074

00000cec <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     cec:	b510      	push	{r4, lr}
     cee:	2000      	movs	r0, #0
     cf0:	4b01      	ldr	r3, [pc, #4]	; (cf8 <TC3_Handler+0xc>)
     cf2:	4798      	blx	r3
     cf4:	bd10      	pop	{r4, pc}
     cf6:	46c0      	nop			; (mov r8, r8)
     cf8:	00000c91 	.word	0x00000c91

00000cfc <TC4_Handler>:
     cfc:	b510      	push	{r4, lr}
     cfe:	2001      	movs	r0, #1
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <TC4_Handler+0xc>)
     d02:	4798      	blx	r3
     d04:	bd10      	pop	{r4, pc}
     d06:	46c0      	nop			; (mov r8, r8)
     d08:	00000c91 	.word	0x00000c91

00000d0c <TC5_Handler>:
     d0c:	b510      	push	{r4, lr}
     d0e:	2002      	movs	r0, #2
     d10:	4b01      	ldr	r3, [pc, #4]	; (d18 <TC5_Handler+0xc>)
     d12:	4798      	blx	r3
     d14:	bd10      	pop	{r4, pc}
     d16:	46c0      	nop			; (mov r8, r8)
     d18:	00000c91 	.word	0x00000c91

00000d1c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     d1c:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     d1e:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d20:	2340      	movs	r3, #64	; 0x40
     d22:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     d24:	4281      	cmp	r1, r0
     d26:	d201      	bcs.n	d2c <_sercom_get_sync_baud_val+0x10>
     d28:	e00a      	b.n	d40 <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
     d2a:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     d2c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     d2e:	1c63      	adds	r3, r4, #1
     d30:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     d32:	4288      	cmp	r0, r1
     d34:	d9f9      	bls.n	d2a <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d36:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     d38:	2cff      	cmp	r4, #255	; 0xff
     d3a:	d801      	bhi.n	d40 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     d3c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     d3e:	2300      	movs	r3, #0
	}
}
     d40:	0018      	movs	r0, r3
     d42:	bd10      	pop	{r4, pc}

00000d44 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     d44:	b510      	push	{r4, lr}
     d46:	b082      	sub	sp, #8
     d48:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     d4a:	4b0e      	ldr	r3, [pc, #56]	; (d84 <sercom_set_gclk_generator+0x40>)
     d4c:	781b      	ldrb	r3, [r3, #0]
     d4e:	2b00      	cmp	r3, #0
     d50:	d001      	beq.n	d56 <sercom_set_gclk_generator+0x12>
     d52:	2900      	cmp	r1, #0
     d54:	d00d      	beq.n	d72 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     d56:	a901      	add	r1, sp, #4
     d58:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     d5a:	2013      	movs	r0, #19
     d5c:	4b0a      	ldr	r3, [pc, #40]	; (d88 <sercom_set_gclk_generator+0x44>)
     d5e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     d60:	2013      	movs	r0, #19
     d62:	4b0a      	ldr	r3, [pc, #40]	; (d8c <sercom_set_gclk_generator+0x48>)
     d64:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     d66:	4b07      	ldr	r3, [pc, #28]	; (d84 <sercom_set_gclk_generator+0x40>)
     d68:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     d6a:	2201      	movs	r2, #1
     d6c:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     d6e:	2000      	movs	r0, #0
     d70:	e006      	b.n	d80 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     d72:	4b04      	ldr	r3, [pc, #16]	; (d84 <sercom_set_gclk_generator+0x40>)
     d74:	785b      	ldrb	r3, [r3, #1]
     d76:	4283      	cmp	r3, r0
     d78:	d001      	beq.n	d7e <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     d7a:	201d      	movs	r0, #29
     d7c:	e000      	b.n	d80 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     d7e:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     d80:	b002      	add	sp, #8
     d82:	bd10      	pop	{r4, pc}
     d84:	2000002c 	.word	0x2000002c
     d88:	00001c49 	.word	0x00001c49
     d8c:	00001bbd 	.word	0x00001bbd

00000d90 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     d90:	4b44      	ldr	r3, [pc, #272]	; (ea4 <_sercom_get_default_pad+0x114>)
     d92:	4298      	cmp	r0, r3
     d94:	d033      	beq.n	dfe <_sercom_get_default_pad+0x6e>
     d96:	d806      	bhi.n	da6 <_sercom_get_default_pad+0x16>
     d98:	4b43      	ldr	r3, [pc, #268]	; (ea8 <_sercom_get_default_pad+0x118>)
     d9a:	4298      	cmp	r0, r3
     d9c:	d00d      	beq.n	dba <_sercom_get_default_pad+0x2a>
     d9e:	4b43      	ldr	r3, [pc, #268]	; (eac <_sercom_get_default_pad+0x11c>)
     da0:	4298      	cmp	r0, r3
     da2:	d01b      	beq.n	ddc <_sercom_get_default_pad+0x4c>
     da4:	e06f      	b.n	e86 <_sercom_get_default_pad+0xf6>
     da6:	4b42      	ldr	r3, [pc, #264]	; (eb0 <_sercom_get_default_pad+0x120>)
     da8:	4298      	cmp	r0, r3
     daa:	d04a      	beq.n	e42 <_sercom_get_default_pad+0xb2>
     dac:	4b41      	ldr	r3, [pc, #260]	; (eb4 <_sercom_get_default_pad+0x124>)
     dae:	4298      	cmp	r0, r3
     db0:	d058      	beq.n	e64 <_sercom_get_default_pad+0xd4>
     db2:	4b41      	ldr	r3, [pc, #260]	; (eb8 <_sercom_get_default_pad+0x128>)
     db4:	4298      	cmp	r0, r3
     db6:	d166      	bne.n	e86 <_sercom_get_default_pad+0xf6>
     db8:	e032      	b.n	e20 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dba:	2901      	cmp	r1, #1
     dbc:	d006      	beq.n	dcc <_sercom_get_default_pad+0x3c>
     dbe:	2900      	cmp	r1, #0
     dc0:	d063      	beq.n	e8a <_sercom_get_default_pad+0xfa>
     dc2:	2902      	cmp	r1, #2
     dc4:	d006      	beq.n	dd4 <_sercom_get_default_pad+0x44>
     dc6:	2903      	cmp	r1, #3
     dc8:	d006      	beq.n	dd8 <_sercom_get_default_pad+0x48>
     dca:	e001      	b.n	dd0 <_sercom_get_default_pad+0x40>
     dcc:	483b      	ldr	r0, [pc, #236]	; (ebc <_sercom_get_default_pad+0x12c>)
     dce:	e067      	b.n	ea0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     dd0:	2000      	movs	r0, #0
     dd2:	e065      	b.n	ea0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dd4:	483a      	ldr	r0, [pc, #232]	; (ec0 <_sercom_get_default_pad+0x130>)
     dd6:	e063      	b.n	ea0 <_sercom_get_default_pad+0x110>
     dd8:	483a      	ldr	r0, [pc, #232]	; (ec4 <_sercom_get_default_pad+0x134>)
     dda:	e061      	b.n	ea0 <_sercom_get_default_pad+0x110>
     ddc:	2901      	cmp	r1, #1
     dde:	d006      	beq.n	dee <_sercom_get_default_pad+0x5e>
     de0:	2900      	cmp	r1, #0
     de2:	d054      	beq.n	e8e <_sercom_get_default_pad+0xfe>
     de4:	2902      	cmp	r1, #2
     de6:	d006      	beq.n	df6 <_sercom_get_default_pad+0x66>
     de8:	2903      	cmp	r1, #3
     dea:	d006      	beq.n	dfa <_sercom_get_default_pad+0x6a>
     dec:	e001      	b.n	df2 <_sercom_get_default_pad+0x62>
     dee:	4836      	ldr	r0, [pc, #216]	; (ec8 <_sercom_get_default_pad+0x138>)
     df0:	e056      	b.n	ea0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     df2:	2000      	movs	r0, #0
     df4:	e054      	b.n	ea0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     df6:	4835      	ldr	r0, [pc, #212]	; (ecc <_sercom_get_default_pad+0x13c>)
     df8:	e052      	b.n	ea0 <_sercom_get_default_pad+0x110>
     dfa:	4835      	ldr	r0, [pc, #212]	; (ed0 <_sercom_get_default_pad+0x140>)
     dfc:	e050      	b.n	ea0 <_sercom_get_default_pad+0x110>
     dfe:	2901      	cmp	r1, #1
     e00:	d006      	beq.n	e10 <_sercom_get_default_pad+0x80>
     e02:	2900      	cmp	r1, #0
     e04:	d045      	beq.n	e92 <_sercom_get_default_pad+0x102>
     e06:	2902      	cmp	r1, #2
     e08:	d006      	beq.n	e18 <_sercom_get_default_pad+0x88>
     e0a:	2903      	cmp	r1, #3
     e0c:	d006      	beq.n	e1c <_sercom_get_default_pad+0x8c>
     e0e:	e001      	b.n	e14 <_sercom_get_default_pad+0x84>
     e10:	4830      	ldr	r0, [pc, #192]	; (ed4 <_sercom_get_default_pad+0x144>)
     e12:	e045      	b.n	ea0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     e14:	2000      	movs	r0, #0
     e16:	e043      	b.n	ea0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e18:	482f      	ldr	r0, [pc, #188]	; (ed8 <_sercom_get_default_pad+0x148>)
     e1a:	e041      	b.n	ea0 <_sercom_get_default_pad+0x110>
     e1c:	482f      	ldr	r0, [pc, #188]	; (edc <_sercom_get_default_pad+0x14c>)
     e1e:	e03f      	b.n	ea0 <_sercom_get_default_pad+0x110>
     e20:	2901      	cmp	r1, #1
     e22:	d006      	beq.n	e32 <_sercom_get_default_pad+0xa2>
     e24:	2900      	cmp	r1, #0
     e26:	d036      	beq.n	e96 <_sercom_get_default_pad+0x106>
     e28:	2902      	cmp	r1, #2
     e2a:	d006      	beq.n	e3a <_sercom_get_default_pad+0xaa>
     e2c:	2903      	cmp	r1, #3
     e2e:	d006      	beq.n	e3e <_sercom_get_default_pad+0xae>
     e30:	e001      	b.n	e36 <_sercom_get_default_pad+0xa6>
     e32:	482b      	ldr	r0, [pc, #172]	; (ee0 <_sercom_get_default_pad+0x150>)
     e34:	e034      	b.n	ea0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     e36:	2000      	movs	r0, #0
     e38:	e032      	b.n	ea0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e3a:	482a      	ldr	r0, [pc, #168]	; (ee4 <_sercom_get_default_pad+0x154>)
     e3c:	e030      	b.n	ea0 <_sercom_get_default_pad+0x110>
     e3e:	482a      	ldr	r0, [pc, #168]	; (ee8 <_sercom_get_default_pad+0x158>)
     e40:	e02e      	b.n	ea0 <_sercom_get_default_pad+0x110>
     e42:	2901      	cmp	r1, #1
     e44:	d006      	beq.n	e54 <_sercom_get_default_pad+0xc4>
     e46:	2900      	cmp	r1, #0
     e48:	d027      	beq.n	e9a <_sercom_get_default_pad+0x10a>
     e4a:	2902      	cmp	r1, #2
     e4c:	d006      	beq.n	e5c <_sercom_get_default_pad+0xcc>
     e4e:	2903      	cmp	r1, #3
     e50:	d006      	beq.n	e60 <_sercom_get_default_pad+0xd0>
     e52:	e001      	b.n	e58 <_sercom_get_default_pad+0xc8>
     e54:	4825      	ldr	r0, [pc, #148]	; (eec <_sercom_get_default_pad+0x15c>)
     e56:	e023      	b.n	ea0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     e58:	2000      	movs	r0, #0
     e5a:	e021      	b.n	ea0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e5c:	4824      	ldr	r0, [pc, #144]	; (ef0 <_sercom_get_default_pad+0x160>)
     e5e:	e01f      	b.n	ea0 <_sercom_get_default_pad+0x110>
     e60:	4824      	ldr	r0, [pc, #144]	; (ef4 <_sercom_get_default_pad+0x164>)
     e62:	e01d      	b.n	ea0 <_sercom_get_default_pad+0x110>
     e64:	2901      	cmp	r1, #1
     e66:	d006      	beq.n	e76 <_sercom_get_default_pad+0xe6>
     e68:	2900      	cmp	r1, #0
     e6a:	d018      	beq.n	e9e <_sercom_get_default_pad+0x10e>
     e6c:	2902      	cmp	r1, #2
     e6e:	d006      	beq.n	e7e <_sercom_get_default_pad+0xee>
     e70:	2903      	cmp	r1, #3
     e72:	d006      	beq.n	e82 <_sercom_get_default_pad+0xf2>
     e74:	e001      	b.n	e7a <_sercom_get_default_pad+0xea>
     e76:	4820      	ldr	r0, [pc, #128]	; (ef8 <_sercom_get_default_pad+0x168>)
     e78:	e012      	b.n	ea0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     e7a:	2000      	movs	r0, #0
     e7c:	e010      	b.n	ea0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e7e:	481f      	ldr	r0, [pc, #124]	; (efc <_sercom_get_default_pad+0x16c>)
     e80:	e00e      	b.n	ea0 <_sercom_get_default_pad+0x110>
     e82:	481f      	ldr	r0, [pc, #124]	; (f00 <_sercom_get_default_pad+0x170>)
     e84:	e00c      	b.n	ea0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     e86:	2000      	movs	r0, #0
     e88:	e00a      	b.n	ea0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e8a:	481e      	ldr	r0, [pc, #120]	; (f04 <_sercom_get_default_pad+0x174>)
     e8c:	e008      	b.n	ea0 <_sercom_get_default_pad+0x110>
     e8e:	2003      	movs	r0, #3
     e90:	e006      	b.n	ea0 <_sercom_get_default_pad+0x110>
     e92:	481d      	ldr	r0, [pc, #116]	; (f08 <_sercom_get_default_pad+0x178>)
     e94:	e004      	b.n	ea0 <_sercom_get_default_pad+0x110>
     e96:	481d      	ldr	r0, [pc, #116]	; (f0c <_sercom_get_default_pad+0x17c>)
     e98:	e002      	b.n	ea0 <_sercom_get_default_pad+0x110>
     e9a:	481d      	ldr	r0, [pc, #116]	; (f10 <_sercom_get_default_pad+0x180>)
     e9c:	e000      	b.n	ea0 <_sercom_get_default_pad+0x110>
     e9e:	481d      	ldr	r0, [pc, #116]	; (f14 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     ea0:	4770      	bx	lr
     ea2:	46c0      	nop			; (mov r8, r8)
     ea4:	42001000 	.word	0x42001000
     ea8:	42000800 	.word	0x42000800
     eac:	42000c00 	.word	0x42000c00
     eb0:	42001800 	.word	0x42001800
     eb4:	42001c00 	.word	0x42001c00
     eb8:	42001400 	.word	0x42001400
     ebc:	00050003 	.word	0x00050003
     ec0:	00060003 	.word	0x00060003
     ec4:	00070003 	.word	0x00070003
     ec8:	00010003 	.word	0x00010003
     ecc:	001e0003 	.word	0x001e0003
     ed0:	001f0003 	.word	0x001f0003
     ed4:	00090003 	.word	0x00090003
     ed8:	000a0003 	.word	0x000a0003
     edc:	000b0003 	.word	0x000b0003
     ee0:	00110003 	.word	0x00110003
     ee4:	00120003 	.word	0x00120003
     ee8:	00130003 	.word	0x00130003
     eec:	000d0003 	.word	0x000d0003
     ef0:	000e0003 	.word	0x000e0003
     ef4:	000f0003 	.word	0x000f0003
     ef8:	00170003 	.word	0x00170003
     efc:	00180003 	.word	0x00180003
     f00:	00190003 	.word	0x00190003
     f04:	00040003 	.word	0x00040003
     f08:	00080003 	.word	0x00080003
     f0c:	00100003 	.word	0x00100003
     f10:	000c0003 	.word	0x000c0003
     f14:	00160003 	.word	0x00160003

00000f18 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     f18:	b530      	push	{r4, r5, lr}
     f1a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     f1c:	4b0c      	ldr	r3, [pc, #48]	; (f50 <_sercom_get_sercom_inst_index+0x38>)
     f1e:	466a      	mov	r2, sp
     f20:	cb32      	ldmia	r3!, {r1, r4, r5}
     f22:	c232      	stmia	r2!, {r1, r4, r5}
     f24:	cb32      	ldmia	r3!, {r1, r4, r5}
     f26:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     f28:	9b00      	ldr	r3, [sp, #0]
     f2a:	4283      	cmp	r3, r0
     f2c:	d006      	beq.n	f3c <_sercom_get_sercom_inst_index+0x24>
     f2e:	2301      	movs	r3, #1
     f30:	009a      	lsls	r2, r3, #2
     f32:	4669      	mov	r1, sp
     f34:	5852      	ldr	r2, [r2, r1]
     f36:	4282      	cmp	r2, r0
     f38:	d103      	bne.n	f42 <_sercom_get_sercom_inst_index+0x2a>
     f3a:	e000      	b.n	f3e <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f3c:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     f3e:	b2d8      	uxtb	r0, r3
     f40:	e003      	b.n	f4a <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f42:	3301      	adds	r3, #1
     f44:	2b06      	cmp	r3, #6
     f46:	d1f3      	bne.n	f30 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     f48:	2000      	movs	r0, #0
}
     f4a:	b007      	add	sp, #28
     f4c:	bd30      	pop	{r4, r5, pc}
     f4e:	46c0      	nop			; (mov r8, r8)
     f50:	0000227c 	.word	0x0000227c

00000f54 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     f54:	b5f0      	push	{r4, r5, r6, r7, lr}
     f56:	b08b      	sub	sp, #44	; 0x2c
     f58:	0005      	movs	r5, r0
     f5a:	000c      	movs	r4, r1
     f5c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     f5e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     f60:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     f62:	201c      	movs	r0, #28
	module->hw = hw;

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     f64:	079b      	lsls	r3, r3, #30
     f66:	d500      	bpl.n	f6a <spi_init+0x16>
     f68:	e0be      	b.n	10e8 <spi_init+0x194>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     f6a:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     f6c:	3817      	subs	r0, #23
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     f6e:	07db      	lsls	r3, r3, #31
     f70:	d500      	bpl.n	f74 <spi_init+0x20>
     f72:	e0b9      	b.n	10e8 <spi_init+0x194>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f74:	0008      	movs	r0, r1
     f76:	4b5d      	ldr	r3, [pc, #372]	; (10ec <spi_init+0x198>)
     f78:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     f7a:	495d      	ldr	r1, [pc, #372]	; (10f0 <spi_init+0x19c>)
     f7c:	6a0a      	ldr	r2, [r1, #32]
     f7e:	1c87      	adds	r7, r0, #2
     f80:	2301      	movs	r3, #1
     f82:	40bb      	lsls	r3, r7
     f84:	4313      	orrs	r3, r2
     f86:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     f88:	a909      	add	r1, sp, #36	; 0x24
     f8a:	2724      	movs	r7, #36	; 0x24
     f8c:	5df3      	ldrb	r3, [r6, r7]
     f8e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     f90:	3014      	adds	r0, #20
     f92:	b2c3      	uxtb	r3, r0
     f94:	9301      	str	r3, [sp, #4]
     f96:	0018      	movs	r0, r3
     f98:	4b56      	ldr	r3, [pc, #344]	; (10f4 <spi_init+0x1a0>)
     f9a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     f9c:	9801      	ldr	r0, [sp, #4]
     f9e:	4b56      	ldr	r3, [pc, #344]	; (10f8 <spi_init+0x1a4>)
     fa0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     fa2:	5df0      	ldrb	r0, [r6, r7]
     fa4:	2100      	movs	r1, #0
     fa6:	4b55      	ldr	r3, [pc, #340]	; (10fc <spi_init+0x1a8>)
     fa8:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     faa:	7833      	ldrb	r3, [r6, #0]
     fac:	2b01      	cmp	r3, #1
     fae:	d103      	bne.n	fb8 <spi_init+0x64>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     fb0:	6822      	ldr	r2, [r4, #0]
     fb2:	330b      	adds	r3, #11
     fb4:	4313      	orrs	r3, r2
     fb6:	6023      	str	r3, [r4, #0]
     fb8:	002b      	movs	r3, r5
     fba:	330c      	adds	r3, #12
     fbc:	0029      	movs	r1, r5
     fbe:	3128      	adds	r1, #40	; 0x28
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     fc0:	2200      	movs	r2, #0
     fc2:	c304      	stmia	r3!, {r2}
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     fc4:	4299      	cmp	r1, r3
     fc6:	d1fc      	bne.n	fc2 <spi_init+0x6e>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
     fc8:	2300      	movs	r3, #0
     fca:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     fcc:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     fce:	2400      	movs	r4, #0
     fd0:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     fd2:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     fd4:	3336      	adds	r3, #54	; 0x36
     fd6:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
     fd8:	3301      	adds	r3, #1
     fda:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
     fdc:	3301      	adds	r3, #1
     fde:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
     fe0:	3b35      	subs	r3, #53	; 0x35
     fe2:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
     fe4:	712c      	strb	r4, [r5, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     fe6:	6828      	ldr	r0, [r5, #0]
     fe8:	4b40      	ldr	r3, [pc, #256]	; (10ec <spi_init+0x198>)
     fea:	4798      	blx	r3
     fec:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     fee:	4944      	ldr	r1, [pc, #272]	; (1100 <spi_init+0x1ac>)
     ff0:	4b44      	ldr	r3, [pc, #272]	; (1104 <spi_init+0x1b0>)
     ff2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     ff4:	00b8      	lsls	r0, r7, #2
     ff6:	4b44      	ldr	r3, [pc, #272]	; (1108 <spi_init+0x1b4>)
     ff8:	50c5      	str	r5, [r0, r3]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     ffa:	682f      	ldr	r7, [r5, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     ffc:	ab04      	add	r3, sp, #16
     ffe:	2280      	movs	r2, #128	; 0x80
    1000:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1002:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1004:	3a7f      	subs	r2, #127	; 0x7f
    1006:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1008:	70dc      	strb	r4, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    100a:	7833      	ldrb	r3, [r6, #0]
    100c:	2b00      	cmp	r3, #0
    100e:	d102      	bne.n	1016 <spi_init+0xc2>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1010:	2200      	movs	r2, #0
    1012:	ab04      	add	r3, sp, #16
    1014:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    1016:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1018:	9305      	str	r3, [sp, #20]
    101a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    101c:	9306      	str	r3, [sp, #24]
    101e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1020:	9307      	str	r3, [sp, #28]
    1022:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1024:	9308      	str	r3, [sp, #32]
    1026:	2400      	movs	r4, #0
    1028:	b2e1      	uxtb	r1, r4
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    102a:	00a3      	lsls	r3, r4, #2
    102c:	aa05      	add	r2, sp, #20
    102e:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    1030:	2800      	cmp	r0, #0
    1032:	d102      	bne.n	103a <spi_init+0xe6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1034:	0038      	movs	r0, r7
    1036:	4b35      	ldr	r3, [pc, #212]	; (110c <spi_init+0x1b8>)
    1038:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    103a:	1c43      	adds	r3, r0, #1
    103c:	d006      	beq.n	104c <spi_init+0xf8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    103e:	ab02      	add	r3, sp, #8
    1040:	7218      	strb	r0, [r3, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1042:	0c00      	lsrs	r0, r0, #16
    1044:	b2c0      	uxtb	r0, r0
    1046:	a904      	add	r1, sp, #16
    1048:	4b31      	ldr	r3, [pc, #196]	; (1110 <spi_init+0x1bc>)
    104a:	4798      	blx	r3
    104c:	3401      	adds	r4, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    104e:	2c04      	cmp	r4, #4
    1050:	d1ea      	bne.n	1028 <spi_init+0xd4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    1052:	7833      	ldrb	r3, [r6, #0]
    1054:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    1056:	7c33      	ldrb	r3, [r6, #16]
    1058:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    105a:	7cb3      	ldrb	r3, [r6, #18]
    105c:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    105e:	7d33      	ldrb	r3, [r6, #20]
    1060:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    1062:	2200      	movs	r2, #0
    1064:	ab02      	add	r3, sp, #8
    1066:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    1068:	7833      	ldrb	r3, [r6, #0]
    106a:	2b01      	cmp	r3, #1
    106c:	d114      	bne.n	1098 <spi_init+0x144>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    106e:	6828      	ldr	r0, [r5, #0]
    1070:	4b1e      	ldr	r3, [pc, #120]	; (10ec <spi_init+0x198>)
    1072:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1074:	3014      	adds	r0, #20
    1076:	b2c0      	uxtb	r0, r0
    1078:	4b26      	ldr	r3, [pc, #152]	; (1114 <spi_init+0x1c0>)
    107a:	4798      	blx	r3
    107c:	0001      	movs	r1, r0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    107e:	ab02      	add	r3, sp, #8
    1080:	1d9a      	adds	r2, r3, #6
    1082:	69b0      	ldr	r0, [r6, #24]
    1084:	4b24      	ldr	r3, [pc, #144]	; (1118 <spi_init+0x1c4>)
    1086:	4798      	blx	r3
    1088:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    108a:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    108c:	2b00      	cmp	r3, #0
    108e:	d12b      	bne.n	10e8 <spi_init+0x194>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    1090:	ab02      	add	r3, sp, #8
    1092:	3306      	adds	r3, #6
    1094:	781b      	ldrb	r3, [r3, #0]
    1096:	733b      	strb	r3, [r7, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    1098:	6873      	ldr	r3, [r6, #4]
    109a:	68b2      	ldr	r2, [r6, #8]
    109c:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    109e:	68f2      	ldr	r2, [r6, #12]
    10a0:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
    10a2:	7c32      	ldrb	r2, [r6, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    10a4:	7c71      	ldrb	r1, [r6, #17]
    10a6:	2900      	cmp	r1, #0
    10a8:	d103      	bne.n	10b2 <spi_init+0x15e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    10aa:	491c      	ldr	r1, [pc, #112]	; (111c <spi_init+0x1c8>)
    10ac:	7889      	ldrb	r1, [r1, #2]
    10ae:	0789      	lsls	r1, r1, #30
    10b0:	d501      	bpl.n	10b6 <spi_init+0x162>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    10b2:	2180      	movs	r1, #128	; 0x80
    10b4:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
    10b6:	7cb1      	ldrb	r1, [r6, #18]
    10b8:	2900      	cmp	r1, #0
    10ba:	d002      	beq.n	10c2 <spi_init+0x16e>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    10bc:	2180      	movs	r1, #128	; 0x80
    10be:	0289      	lsls	r1, r1, #10
    10c0:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    10c2:	7cf1      	ldrb	r1, [r6, #19]
    10c4:	2900      	cmp	r1, #0
    10c6:	d002      	beq.n	10ce <spi_init+0x17a>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    10c8:	2180      	movs	r1, #128	; 0x80
    10ca:	0089      	lsls	r1, r1, #2
    10cc:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    10ce:	7d31      	ldrb	r1, [r6, #20]
    10d0:	2900      	cmp	r1, #0
    10d2:	d002      	beq.n	10da <spi_init+0x186>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    10d4:	2180      	movs	r1, #128	; 0x80
    10d6:	0189      	lsls	r1, r1, #6
    10d8:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    10da:	6839      	ldr	r1, [r7, #0]
    10dc:	430b      	orrs	r3, r1
    10de:	603b      	str	r3, [r7, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    10e0:	687b      	ldr	r3, [r7, #4]
    10e2:	4313      	orrs	r3, r2
    10e4:	607b      	str	r3, [r7, #4]

	return STATUS_OK;
    10e6:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    10e8:	b00b      	add	sp, #44	; 0x2c
    10ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10ec:	00000f19 	.word	0x00000f19
    10f0:	40000400 	.word	0x40000400
    10f4:	00001c49 	.word	0x00001c49
    10f8:	00001bbd 	.word	0x00001bbd
    10fc:	00000d45 	.word	0x00000d45
    1100:	0000129d 	.word	0x0000129d
    1104:	0000144d 	.word	0x0000144d
    1108:	20000084 	.word	0x20000084
    110c:	00000d91 	.word	0x00000d91
    1110:	00001d41 	.word	0x00001d41
    1114:	00001c65 	.word	0x00001c65
    1118:	00000d1d 	.word	0x00000d1d
    111c:	41002000 	.word	0x41002000

00001120 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    1120:	b5f0      	push	{r4, r5, r6, r7, lr}
    1122:	4657      	mov	r7, sl
    1124:	4646      	mov	r6, r8
    1126:	b4c0      	push	{r6, r7}
    1128:	0007      	movs	r7, r0
    112a:	4688      	mov	r8, r1
    112c:	001d      	movs	r5, r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    112e:	2038      	movs	r0, #56	; 0x38
    1130:	5c3c      	ldrb	r4, [r7, r0]
    1132:	b2e0      	uxtb	r0, r4
    1134:	2805      	cmp	r0, #5
    1136:	d047      	beq.n	11c8 <spi_read_buffer_wait+0xa8>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1138:	2017      	movs	r0, #23
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    113a:	2a00      	cmp	r2, #0
    113c:	d044      	beq.n	11c8 <spi_read_buffer_wait+0xa8>
		return STATUS_ERR_INVALID_ARG;
	}

	if (!(module->receiver_enabled)) {
    113e:	79fc      	ldrb	r4, [r7, #7]
		return STATUS_ERR_DENIED;
    1140:	3005      	adds	r0, #5
	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	if (!(module->receiver_enabled)) {
    1142:	2c00      	cmp	r4, #0
    1144:	d040      	beq.n	11c8 <spi_read_buffer_wait+0xa8>
    1146:	2300      	movs	r3, #0

	while (length--) {
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    1148:	381b      	subs	r0, #27
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    114a:	05ec      	lsls	r4, r5, #23
    114c:	0de1      	lsrs	r1, r4, #23
    114e:	468c      	mov	ip, r1
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    1150:	2604      	movs	r6, #4
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    1152:	797c      	ldrb	r4, [r7, #5]
    1154:	2c01      	cmp	r4, #1
    1156:	d108      	bne.n	116a <spi_read_buffer_wait+0x4a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1158:	683d      	ldr	r5, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    115a:	7e2c      	ldrb	r4, [r5, #24]
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    115c:	4204      	tst	r4, r0
    115e:	d0fc      	beq.n	115a <spi_read_buffer_wait+0x3a>
    1160:	7e2c      	ldrb	r4, [r5, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1162:	4204      	tst	r4, r0
    1164:	d001      	beq.n	116a <spi_read_buffer_wait+0x4a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1166:	4661      	mov	r1, ip
    1168:	62a9      	str	r1, [r5, #40]	; 0x28
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    116a:	683d      	ldr	r5, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    116c:	7e2c      	ldrb	r4, [r5, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    116e:	4234      	tst	r4, r6
    1170:	d0fc      	beq.n	116c <spi_read_buffer_wait+0x4c>
    1172:	7e2c      	ldrb	r4, [r5, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1174:	4234      	tst	r4, r6
    1176:	d024      	beq.n	11c2 <spi_read_buffer_wait+0xa2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1178:	8b69      	ldrh	r1, [r5, #26]
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    117a:	2400      	movs	r4, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    117c:	4231      	tst	r1, r6
    117e:	d001      	beq.n	1184 <spi_read_buffer_wait+0x64>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1180:	836e      	strh	r6, [r5, #26]
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
    1182:	341e      	adds	r4, #30
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1184:	79b9      	ldrb	r1, [r7, #6]
    1186:	2901      	cmp	r1, #1
    1188:	d103      	bne.n	1192 <spi_read_buffer_wait+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    118a:	6aad      	ldr	r5, [r5, #40]	; 0x28
    118c:	05ed      	lsls	r5, r5, #23
    118e:	0ded      	lsrs	r5, r5, #23
    1190:	e001      	b.n	1196 <spi_read_buffer_wait+0x76>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1192:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1194:	b2ed      	uxtb	r5, r5
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    1196:	2c00      	cmp	r4, #0
    1198:	d115      	bne.n	11c6 <spi_read_buffer_wait+0xa6>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    119a:	1c5c      	adds	r4, r3, #1
    119c:	b2a4      	uxth	r4, r4
    119e:	4641      	mov	r1, r8
    11a0:	54cd      	strb	r5, [r1, r3]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    11a2:	79b9      	ldrb	r1, [r7, #6]
    11a4:	2901      	cmp	r1, #1
    11a6:	d105      	bne.n	11b4 <spi_read_buffer_wait+0x94>
			rx_data[rx_pos++] = (received_data >> 8);
    11a8:	3302      	adds	r3, #2
    11aa:	b29b      	uxth	r3, r3
    11ac:	0a2d      	lsrs	r5, r5, #8
    11ae:	4641      	mov	r1, r8
    11b0:	550d      	strb	r5, [r1, r4]
    11b2:	e000      	b.n	11b6 <spi_read_buffer_wait+0x96>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    11b4:	0023      	movs	r3, r4
    11b6:	3a01      	subs	r2, #1
    11b8:	b292      	uxth	r2, r2
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    11ba:	2a00      	cmp	r2, #0
    11bc:	d1c9      	bne.n	1152 <spi_read_buffer_wait+0x32>
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
    11be:	2000      	movs	r0, #0
    11c0:	e002      	b.n	11c8 <spi_read_buffer_wait+0xa8>
	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
		/* No data has been received, return */
		return STATUS_ERR_IO;
    11c2:	2010      	movs	r0, #16
    11c4:	e000      	b.n	11c8 <spi_read_buffer_wait+0xa8>
    11c6:	0020      	movs	r0, r4
}
    11c8:	bc0c      	pop	{r2, r3}
    11ca:	4690      	mov	r8, r2
    11cc:	469a      	mov	sl, r3
    11ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000011d0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    11d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    11d2:	465f      	mov	r7, fp
    11d4:	4656      	mov	r6, sl
    11d6:	464d      	mov	r5, r9
    11d8:	4644      	mov	r4, r8
    11da:	b4f0      	push	{r4, r5, r6, r7}
    11dc:	b083      	sub	sp, #12
    11de:	0007      	movs	r7, r0
    11e0:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    11e2:	2338      	movs	r3, #56	; 0x38
    11e4:	5cc0      	ldrb	r0, [r0, r3]
    11e6:	b2c0      	uxtb	r0, r0
    11e8:	2805      	cmp	r0, #5
    11ea:	d04e      	beq.n	128a <spi_write_buffer_wait+0xba>
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    11ec:	2017      	movs	r0, #23
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
    11ee:	2a00      	cmp	r2, #0
    11f0:	d04b      	beq.n	128a <spi_write_buffer_wait+0xba>
    11f2:	e042      	b.n	127a <spi_write_buffer_wait+0xaa>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    11f4:	683a      	ldr	r2, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    11f6:	7e13      	ldrb	r3, [r2, #24]
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    11f8:	4223      	tst	r3, r4
    11fa:	d0fc      	beq.n	11f6 <spi_write_buffer_wait+0x26>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    11fc:	1c43      	adds	r3, r0, #1
    11fe:	b29b      	uxth	r3, r3
    1200:	4698      	mov	r8, r3
    1202:	4653      	mov	r3, sl
    1204:	5c1b      	ldrb	r3, [r3, r0]
    1206:	469b      	mov	fp, r3

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1208:	79b9      	ldrb	r1, [r7, #6]
    120a:	2901      	cmp	r1, #1
    120c:	d004      	beq.n	1218 <spi_write_buffer_wait+0x48>
		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    120e:	4669      	mov	r1, sp
    1210:	80cb      	strh	r3, [r1, #6]
    1212:	88cb      	ldrh	r3, [r1, #6]
    1214:	4640      	mov	r0, r8
    1216:	e007      	b.n	1228 <spi_write_buffer_wait+0x58>

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    1218:	3002      	adds	r0, #2
    121a:	b280      	uxth	r0, r0
    121c:	4641      	mov	r1, r8
    121e:	4653      	mov	r3, sl
    1220:	5c59      	ldrb	r1, [r3, r1]
    1222:	0209      	lsls	r1, r1, #8
    1224:	465b      	mov	r3, fp
    1226:	430b      	orrs	r3, r1
    1228:	7e11      	ldrb	r1, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    122a:	4221      	tst	r1, r4
    122c:	d002      	beq.n	1234 <spi_write_buffer_wait+0x64>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    122e:	05db      	lsls	r3, r3, #23
    1230:	0ddb      	lsrs	r3, r3, #23
    1232:	6293      	str	r3, [r2, #40]	; 0x28
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
    1234:	79fb      	ldrb	r3, [r7, #7]
    1236:	2b00      	cmp	r3, #0
    1238:	d010      	beq.n	125c <spi_write_buffer_wait+0x8c>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    123a:	683a      	ldr	r2, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    123c:	7e13      	ldrb	r3, [r2, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    123e:	422b      	tst	r3, r5
    1240:	d0fc      	beq.n	123c <spi_write_buffer_wait+0x6c>
    1242:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1244:	422b      	tst	r3, r5
    1246:	d009      	beq.n	125c <spi_write_buffer_wait+0x8c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1248:	8b53      	ldrh	r3, [r2, #26]
    124a:	422b      	tst	r3, r5
    124c:	d000      	beq.n	1250 <spi_write_buffer_wait+0x80>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    124e:	8355      	strh	r5, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1250:	79bb      	ldrb	r3, [r7, #6]
    1252:	2b01      	cmp	r3, #1
    1254:	d101      	bne.n	125a <spi_write_buffer_wait+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1256:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1258:	e000      	b.n	125c <spi_write_buffer_wait+0x8c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    125a:	6a93      	ldr	r3, [r2, #40]	; 0x28

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
    125c:	3e01      	subs	r6, #1
    125e:	b2b6      	uxth	r6, r6
    1260:	4566      	cmp	r6, ip
    1262:	d1c7      	bne.n	11f4 <spi_write_buffer_wait+0x24>
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    1264:	797b      	ldrb	r3, [r7, #5]
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    1266:	2000      	movs	r0, #0
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    1268:	2b01      	cmp	r3, #1
    126a:	d10e      	bne.n	128a <spi_write_buffer_wait+0xba>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    126c:	6839      	ldr	r1, [r7, #0]
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    126e:	2202      	movs	r2, #2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1270:	7e0b      	ldrb	r3, [r1, #24]
    1272:	4213      	tst	r3, r2
    1274:	d0fc      	beq.n	1270 <spi_write_buffer_wait+0xa0>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    1276:	2000      	movs	r0, #0
    1278:	e007      	b.n	128a <spi_write_buffer_wait+0xba>

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
    127a:	3a01      	subs	r2, #1
    127c:	b296      	uxth	r6, r2
    127e:	2000      	movs	r0, #0
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    1280:	2401      	movs	r4, #1
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    1282:	2504      	movs	r5, #4

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
    1284:	4b04      	ldr	r3, [pc, #16]	; (1298 <spi_write_buffer_wait+0xc8>)
    1286:	469c      	mov	ip, r3
    1288:	e7b4      	b.n	11f4 <spi_write_buffer_wait+0x24>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    128a:	b003      	add	sp, #12
    128c:	bc3c      	pop	{r2, r3, r4, r5}
    128e:	4690      	mov	r8, r2
    1290:	4699      	mov	r9, r3
    1292:	46a2      	mov	sl, r4
    1294:	46ab      	mov	fp, r5
    1296:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1298:	0000ffff 	.word	0x0000ffff

0000129c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    129c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    129e:	0080      	lsls	r0, r0, #2
    12a0:	4b67      	ldr	r3, [pc, #412]	; (1440 <_spi_interrupt_handler+0x1a4>)
    12a2:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    12a4:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    12a6:	2337      	movs	r3, #55	; 0x37

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    12a8:	5ce3      	ldrb	r3, [r4, r3]
    12aa:	2236      	movs	r2, #54	; 0x36
    12ac:	5ca7      	ldrb	r7, [r4, r2]
    12ae:	401f      	ands	r7, r3
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    12b0:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    12b2:	7db5      	ldrb	r5, [r6, #22]
    12b4:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    12b6:	07eb      	lsls	r3, r5, #31
    12b8:	d53d      	bpl.n	1336 <_spi_interrupt_handler+0x9a>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    12ba:	7963      	ldrb	r3, [r4, #5]
    12bc:	2b01      	cmp	r3, #1
    12be:	d13a      	bne.n	1336 <_spi_interrupt_handler+0x9a>
			(module->dir == SPI_DIRECTION_READ)) {
    12c0:	7a63      	ldrb	r3, [r4, #9]
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    12c2:	2b00      	cmp	r3, #0
    12c4:	d10f      	bne.n	12e6 <_spi_interrupt_handler+0x4a>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    12c6:	4b5f      	ldr	r3, [pc, #380]	; (1444 <_spi_interrupt_handler+0x1a8>)
    12c8:	881b      	ldrh	r3, [r3, #0]
    12ca:	62b3      	str	r3, [r6, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    12cc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    12ce:	3b01      	subs	r3, #1
    12d0:	b29b      	uxth	r3, r3
    12d2:	8663      	strh	r3, [r4, #50]	; 0x32
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
    12d4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    12d6:	b29b      	uxth	r3, r3
    12d8:	2b00      	cmp	r3, #0
    12da:	d101      	bne.n	12e0 <_spi_interrupt_handler+0x44>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    12dc:	3301      	adds	r3, #1
    12de:	7533      	strb	r3, [r6, #20]
			}
		}
#  endif

		if (0
    12e0:	7963      	ldrb	r3, [r4, #5]
    12e2:	2b01      	cmp	r3, #1
    12e4:	d127      	bne.n	1336 <_spi_interrupt_handler+0x9a>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    12e6:	7a63      	ldrb	r3, [r4, #9]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    12e8:	2b00      	cmp	r3, #0
    12ea:	d024      	beq.n	1336 <_spi_interrupt_handler+0x9a>
 */
static void _spi_write(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    12ec:	6820      	ldr	r0, [r4, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    12ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    12f0:	780b      	ldrb	r3, [r1, #0]
    12f2:	b2da      	uxtb	r2, r3
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    12f4:	1c4b      	adds	r3, r1, #1
    12f6:	62e3      	str	r3, [r4, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    12f8:	79a3      	ldrb	r3, [r4, #6]
    12fa:	2b01      	cmp	r3, #1
    12fc:	d001      	beq.n	1302 <_spi_interrupt_handler+0x66>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    12fe:	b293      	uxth	r3, r2
    1300:	e004      	b.n	130c <_spi_interrupt_handler+0x70>
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1302:	784b      	ldrb	r3, [r1, #1]
    1304:	021b      	lsls	r3, r3, #8
    1306:	4313      	orrs	r3, r2
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    1308:	3102      	adds	r1, #2
    130a:	62e1      	str	r1, [r4, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    130c:	05db      	lsls	r3, r3, #23
    130e:	0ddb      	lsrs	r3, r3, #23
    1310:	6283      	str	r3, [r0, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    1312:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1314:	3b01      	subs	r3, #1
    1316:	b29b      	uxth	r3, r3
    1318:	86a3      	strh	r3, [r4, #52]	; 0x34
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    131a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    131c:	b29b      	uxth	r3, r3
    131e:	2b00      	cmp	r3, #0
    1320:	d109      	bne.n	1336 <_spi_interrupt_handler+0x9a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1322:	3301      	adds	r3, #1
    1324:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    1326:	7a63      	ldrb	r3, [r4, #9]
    1328:	2b01      	cmp	r3, #1
    132a:	d104      	bne.n	1336 <_spi_interrupt_handler+0x9a>
    132c:	79e3      	ldrb	r3, [r4, #7]
    132e:	2b00      	cmp	r3, #0
    1330:	d101      	bne.n	1336 <_spi_interrupt_handler+0x9a>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1332:	3302      	adds	r3, #2
    1334:	75b3      	strb	r3, [r6, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1336:	076b      	lsls	r3, r5, #29
    1338:	d55f      	bpl.n	13fa <_spi_interrupt_handler+0x15e>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    133a:	8b73      	ldrh	r3, [r6, #26]
    133c:	075b      	lsls	r3, r3, #29
    133e:	d512      	bpl.n	1366 <_spi_interrupt_handler+0xca>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1340:	7a63      	ldrb	r3, [r4, #9]
    1342:	2b01      	cmp	r3, #1
    1344:	d00b      	beq.n	135e <_spi_interrupt_handler+0xc2>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1346:	221e      	movs	r2, #30
    1348:	2338      	movs	r3, #56	; 0x38
    134a:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    134c:	3b35      	subs	r3, #53	; 0x35
    134e:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1350:	3302      	adds	r3, #2
    1352:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    1354:	073b      	lsls	r3, r7, #28
    1356:	d502      	bpl.n	135e <_spi_interrupt_handler+0xc2>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1358:	0020      	movs	r0, r4
    135a:	69a3      	ldr	r3, [r4, #24]
    135c:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    135e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1360:	2304      	movs	r3, #4
    1362:	8373      	strh	r3, [r6, #26]
    1364:	e049      	b.n	13fa <_spi_interrupt_handler+0x15e>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    1366:	7a63      	ldrb	r3, [r4, #9]
    1368:	2b01      	cmp	r3, #1
    136a:	d116      	bne.n	139a <_spi_interrupt_handler+0xfe>
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    136c:	6823      	ldr	r3, [r4, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    136e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1370:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1372:	3b01      	subs	r3, #1
    1374:	b29b      	uxth	r3, r3
    1376:	8663      	strh	r3, [r4, #50]	; 0x32
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
    1378:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    137a:	b29b      	uxth	r3, r3
    137c:	2b00      	cmp	r3, #0
    137e:	d13c      	bne.n	13fa <_spi_interrupt_handler+0x15e>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1380:	3304      	adds	r3, #4
    1382:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    1384:	2200      	movs	r2, #0
    1386:	3334      	adds	r3, #52	; 0x34
    1388:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    138a:	3b35      	subs	r3, #53	; 0x35
    138c:	7263      	strb	r3, [r4, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    138e:	07fb      	lsls	r3, r7, #31
    1390:	d533      	bpl.n	13fa <_spi_interrupt_handler+0x15e>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1392:	0020      	movs	r0, r4
    1394:	68e3      	ldr	r3, [r4, #12]
    1396:	4798      	blx	r3
    1398:	e02f      	b.n	13fa <_spi_interrupt_handler+0x15e>
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    139a:	6823      	ldr	r3, [r4, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    139c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    139e:	05db      	lsls	r3, r3, #23
    13a0:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    13a2:	b2da      	uxtb	r2, r3
    13a4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    13a6:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    13a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    13aa:	1c51      	adds	r1, r2, #1
    13ac:	62a1      	str	r1, [r4, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    13ae:	79a1      	ldrb	r1, [r4, #6]
    13b0:	2901      	cmp	r1, #1
    13b2:	d104      	bne.n	13be <_spi_interrupt_handler+0x122>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    13b4:	0a1b      	lsrs	r3, r3, #8
    13b6:	7053      	strb	r3, [r2, #1]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    13b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    13ba:	3301      	adds	r3, #1
    13bc:	62a3      	str	r3, [r4, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    13be:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    13c0:	3b01      	subs	r3, #1
    13c2:	b29b      	uxth	r3, r3
    13c4:	8623      	strh	r3, [r4, #48]	; 0x30
			} else {
				/* Read data register */
				_spi_read(module);

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    13c6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    13c8:	b29b      	uxth	r3, r3
    13ca:	2b00      	cmp	r3, #0
    13cc:	d115      	bne.n	13fa <_spi_interrupt_handler+0x15e>
					module->status = STATUS_OK;
    13ce:	2200      	movs	r2, #0
    13d0:	3338      	adds	r3, #56	; 0x38
    13d2:	54e2      	strb	r2, [r4, r3]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    13d4:	3b34      	subs	r3, #52	; 0x34
    13d6:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    13d8:	7a63      	ldrb	r3, [r4, #9]
    13da:	2b02      	cmp	r3, #2
    13dc:	d105      	bne.n	13ea <_spi_interrupt_handler+0x14e>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    13de:	077b      	lsls	r3, r7, #29
    13e0:	d50b      	bpl.n	13fa <_spi_interrupt_handler+0x15e>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    13e2:	0020      	movs	r0, r4
    13e4:	6963      	ldr	r3, [r4, #20]
    13e6:	4798      	blx	r3
    13e8:	e007      	b.n	13fa <_spi_interrupt_handler+0x15e>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    13ea:	7a63      	ldrb	r3, [r4, #9]
    13ec:	2b00      	cmp	r3, #0
    13ee:	d104      	bne.n	13fa <_spi_interrupt_handler+0x15e>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    13f0:	07bb      	lsls	r3, r7, #30
    13f2:	d502      	bpl.n	13fa <_spi_interrupt_handler+0x15e>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    13f4:	0020      	movs	r0, r4
    13f6:	6923      	ldr	r3, [r4, #16]
    13f8:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    13fa:	07ab      	lsls	r3, r5, #30
    13fc:	d514      	bpl.n	1428 <_spi_interrupt_handler+0x18c>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    13fe:	7963      	ldrb	r3, [r4, #5]
    1400:	2b01      	cmp	r3, #1
    1402:	d111      	bne.n	1428 <_spi_interrupt_handler+0x18c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1404:	7a63      	ldrb	r3, [r4, #9]
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1406:	2b01      	cmp	r3, #1
    1408:	d10e      	bne.n	1428 <_spi_interrupt_handler+0x18c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    140a:	79e3      	ldrb	r3, [r4, #7]
    140c:	2b00      	cmp	r3, #0
    140e:	d10b      	bne.n	1428 <_spi_interrupt_handler+0x18c>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1410:	3302      	adds	r3, #2
    1412:	7533      	strb	r3, [r6, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    1414:	3301      	adds	r3, #1
    1416:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    1418:	2200      	movs	r2, #0
    141a:	3335      	adds	r3, #53	; 0x35
    141c:	54e2      	strb	r2, [r4, r3]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    141e:	07fb      	lsls	r3, r7, #31
    1420:	d502      	bpl.n	1428 <_spi_interrupt_handler+0x18c>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1422:	0020      	movs	r0, r4
    1424:	68e3      	ldr	r3, [r4, #12]
    1426:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    1428:	09ed      	lsrs	r5, r5, #7
    142a:	d007      	beq.n	143c <_spi_interrupt_handler+0x1a0>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    142c:	2380      	movs	r3, #128	; 0x80
    142e:	7533      	strb	r3, [r6, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1430:	7633      	strb	r3, [r6, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1432:	067b      	lsls	r3, r7, #25
    1434:	d502      	bpl.n	143c <_spi_interrupt_handler+0x1a0>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1436:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1438:	0020      	movs	r0, r4
    143a:	4798      	blx	r3
		}
	}
#  endif
}
    143c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    143e:	46c0      	nop			; (mov r8, r8)
    1440:	20000084 	.word	0x20000084
    1444:	20000080 	.word	0x20000080

00001448 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1448:	4770      	bx	lr
    144a:	46c0      	nop			; (mov r8, r8)

0000144c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    144c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    144e:	4b0a      	ldr	r3, [pc, #40]	; (1478 <_sercom_set_handler+0x2c>)
    1450:	781b      	ldrb	r3, [r3, #0]
    1452:	2b00      	cmp	r3, #0
    1454:	d10c      	bne.n	1470 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1456:	4f09      	ldr	r7, [pc, #36]	; (147c <_sercom_set_handler+0x30>)
    1458:	4e09      	ldr	r6, [pc, #36]	; (1480 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    145a:	4d0a      	ldr	r5, [pc, #40]	; (1484 <_sercom_set_handler+0x38>)
    145c:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    145e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1460:	195a      	adds	r2, r3, r5
    1462:	6014      	str	r4, [r2, #0]
    1464:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1466:	2b18      	cmp	r3, #24
    1468:	d1f9      	bne.n	145e <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    146a:	2201      	movs	r2, #1
    146c:	4b02      	ldr	r3, [pc, #8]	; (1478 <_sercom_set_handler+0x2c>)
    146e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1470:	0080      	lsls	r0, r0, #2
    1472:	4b02      	ldr	r3, [pc, #8]	; (147c <_sercom_set_handler+0x30>)
    1474:	50c1      	str	r1, [r0, r3]
}
    1476:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1478:	2000002e 	.word	0x2000002e
    147c:	20000030 	.word	0x20000030
    1480:	00001449 	.word	0x00001449
    1484:	20000084 	.word	0x20000084

00001488 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1488:	b510      	push	{r4, lr}
    148a:	b082      	sub	sp, #8
    148c:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    148e:	2206      	movs	r2, #6
    1490:	4905      	ldr	r1, [pc, #20]	; (14a8 <_sercom_get_interrupt_vector+0x20>)
    1492:	4668      	mov	r0, sp
    1494:	4b05      	ldr	r3, [pc, #20]	; (14ac <_sercom_get_interrupt_vector+0x24>)
    1496:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1498:	0020      	movs	r0, r4
    149a:	4b05      	ldr	r3, [pc, #20]	; (14b0 <_sercom_get_interrupt_vector+0x28>)
    149c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    149e:	466b      	mov	r3, sp
    14a0:	5618      	ldrsb	r0, [r3, r0]
}
    14a2:	b002      	add	sp, #8
    14a4:	bd10      	pop	{r4, pc}
    14a6:	46c0      	nop			; (mov r8, r8)
    14a8:	00002294 	.word	0x00002294
    14ac:	0000218d 	.word	0x0000218d
    14b0:	00000f19 	.word	0x00000f19

000014b4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    14b4:	b510      	push	{r4, lr}
    14b6:	4b02      	ldr	r3, [pc, #8]	; (14c0 <SERCOM0_Handler+0xc>)
    14b8:	681b      	ldr	r3, [r3, #0]
    14ba:	2000      	movs	r0, #0
    14bc:	4798      	blx	r3
    14be:	bd10      	pop	{r4, pc}
    14c0:	20000030 	.word	0x20000030

000014c4 <SERCOM1_Handler>:
    14c4:	b510      	push	{r4, lr}
    14c6:	4b02      	ldr	r3, [pc, #8]	; (14d0 <SERCOM1_Handler+0xc>)
    14c8:	685b      	ldr	r3, [r3, #4]
    14ca:	2001      	movs	r0, #1
    14cc:	4798      	blx	r3
    14ce:	bd10      	pop	{r4, pc}
    14d0:	20000030 	.word	0x20000030

000014d4 <SERCOM2_Handler>:
    14d4:	b510      	push	{r4, lr}
    14d6:	4b02      	ldr	r3, [pc, #8]	; (14e0 <SERCOM2_Handler+0xc>)
    14d8:	689b      	ldr	r3, [r3, #8]
    14da:	2002      	movs	r0, #2
    14dc:	4798      	blx	r3
    14de:	bd10      	pop	{r4, pc}
    14e0:	20000030 	.word	0x20000030

000014e4 <SERCOM3_Handler>:
    14e4:	b510      	push	{r4, lr}
    14e6:	4b02      	ldr	r3, [pc, #8]	; (14f0 <SERCOM3_Handler+0xc>)
    14e8:	68db      	ldr	r3, [r3, #12]
    14ea:	2003      	movs	r0, #3
    14ec:	4798      	blx	r3
    14ee:	bd10      	pop	{r4, pc}
    14f0:	20000030 	.word	0x20000030

000014f4 <SERCOM4_Handler>:
    14f4:	b510      	push	{r4, lr}
    14f6:	4b02      	ldr	r3, [pc, #8]	; (1500 <SERCOM4_Handler+0xc>)
    14f8:	691b      	ldr	r3, [r3, #16]
    14fa:	2004      	movs	r0, #4
    14fc:	4798      	blx	r3
    14fe:	bd10      	pop	{r4, pc}
    1500:	20000030 	.word	0x20000030

00001504 <SERCOM5_Handler>:
    1504:	b510      	push	{r4, lr}
    1506:	4b02      	ldr	r3, [pc, #8]	; (1510 <SERCOM5_Handler+0xc>)
    1508:	695b      	ldr	r3, [r3, #20]
    150a:	2005      	movs	r0, #5
    150c:	4798      	blx	r3
    150e:	bd10      	pop	{r4, pc}
    1510:	20000030 	.word	0x20000030

00001514 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1514:	4b0c      	ldr	r3, [pc, #48]	; (1548 <cpu_irq_enter_critical+0x34>)
    1516:	681b      	ldr	r3, [r3, #0]
    1518:	2b00      	cmp	r3, #0
    151a:	d110      	bne.n	153e <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    151c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1520:	2b00      	cmp	r3, #0
    1522:	d109      	bne.n	1538 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1524:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1526:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    152a:	2200      	movs	r2, #0
    152c:	4b07      	ldr	r3, [pc, #28]	; (154c <cpu_irq_enter_critical+0x38>)
    152e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1530:	3201      	adds	r2, #1
    1532:	4b07      	ldr	r3, [pc, #28]	; (1550 <cpu_irq_enter_critical+0x3c>)
    1534:	701a      	strb	r2, [r3, #0]
    1536:	e002      	b.n	153e <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1538:	2200      	movs	r2, #0
    153a:	4b05      	ldr	r3, [pc, #20]	; (1550 <cpu_irq_enter_critical+0x3c>)
    153c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    153e:	4a02      	ldr	r2, [pc, #8]	; (1548 <cpu_irq_enter_critical+0x34>)
    1540:	6813      	ldr	r3, [r2, #0]
    1542:	3301      	adds	r3, #1
    1544:	6013      	str	r3, [r2, #0]
}
    1546:	4770      	bx	lr
    1548:	20000048 	.word	0x20000048
    154c:	20000000 	.word	0x20000000
    1550:	2000004c 	.word	0x2000004c

00001554 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1554:	4b08      	ldr	r3, [pc, #32]	; (1578 <cpu_irq_leave_critical+0x24>)
    1556:	681a      	ldr	r2, [r3, #0]
    1558:	3a01      	subs	r2, #1
    155a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    155c:	681b      	ldr	r3, [r3, #0]
    155e:	2b00      	cmp	r3, #0
    1560:	d109      	bne.n	1576 <cpu_irq_leave_critical+0x22>
    1562:	4b06      	ldr	r3, [pc, #24]	; (157c <cpu_irq_leave_critical+0x28>)
    1564:	781b      	ldrb	r3, [r3, #0]
    1566:	2b00      	cmp	r3, #0
    1568:	d005      	beq.n	1576 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    156a:	2201      	movs	r2, #1
    156c:	4b04      	ldr	r3, [pc, #16]	; (1580 <cpu_irq_leave_critical+0x2c>)
    156e:	701a      	strb	r2, [r3, #0]
    1570:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1574:	b662      	cpsie	i
	}
}
    1576:	4770      	bx	lr
    1578:	20000048 	.word	0x20000048
    157c:	2000004c 	.word	0x2000004c
    1580:	20000000 	.word	0x20000000

00001584 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1584:	b5f0      	push	{r4, r5, r6, r7, lr}
    1586:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1588:	ac01      	add	r4, sp, #4
    158a:	2501      	movs	r5, #1
    158c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    158e:	2700      	movs	r7, #0
    1590:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1592:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1594:	0021      	movs	r1, r4
    1596:	2017      	movs	r0, #23
    1598:	4e06      	ldr	r6, [pc, #24]	; (15b4 <system_board_init+0x30>)
    159a:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    159c:	2280      	movs	r2, #128	; 0x80
    159e:	0412      	lsls	r2, r2, #16
    15a0:	4b05      	ldr	r3, [pc, #20]	; (15b8 <system_board_init+0x34>)
    15a2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    15a4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    15a6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    15a8:	0021      	movs	r1, r4
    15aa:	2037      	movs	r0, #55	; 0x37
    15ac:	47b0      	blx	r6
}
    15ae:	b003      	add	sp, #12
    15b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15b2:	46c0      	nop			; (mov r8, r8)
    15b4:	000015bd 	.word	0x000015bd
    15b8:	41004400 	.word	0x41004400

000015bc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    15bc:	b500      	push	{lr}
    15be:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    15c0:	ab01      	add	r3, sp, #4
    15c2:	2280      	movs	r2, #128	; 0x80
    15c4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    15c6:	780a      	ldrb	r2, [r1, #0]
    15c8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    15ca:	784a      	ldrb	r2, [r1, #1]
    15cc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    15ce:	788a      	ldrb	r2, [r1, #2]
    15d0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    15d2:	0019      	movs	r1, r3
    15d4:	4b01      	ldr	r3, [pc, #4]	; (15dc <port_pin_set_config+0x20>)
    15d6:	4798      	blx	r3
}
    15d8:	b003      	add	sp, #12
    15da:	bd00      	pop	{pc}
    15dc:	00001d41 	.word	0x00001d41

000015e0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    15e0:	b510      	push	{r4, lr}
	switch (clock_source) {
    15e2:	2808      	cmp	r0, #8
    15e4:	d803      	bhi.n	15ee <system_clock_source_get_hz+0xe>
    15e6:	0080      	lsls	r0, r0, #2
    15e8:	4b1b      	ldr	r3, [pc, #108]	; (1658 <system_clock_source_get_hz+0x78>)
    15ea:	581b      	ldr	r3, [r3, r0]
    15ec:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    15ee:	2000      	movs	r0, #0
    15f0:	e030      	b.n	1654 <system_clock_source_get_hz+0x74>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    15f2:	4b1a      	ldr	r3, [pc, #104]	; (165c <system_clock_source_get_hz+0x7c>)
    15f4:	6918      	ldr	r0, [r3, #16]
    15f6:	e02d      	b.n	1654 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    15f8:	4b19      	ldr	r3, [pc, #100]	; (1660 <system_clock_source_get_hz+0x80>)
    15fa:	6a1b      	ldr	r3, [r3, #32]
    15fc:	059b      	lsls	r3, r3, #22
    15fe:	0f9b      	lsrs	r3, r3, #30
    1600:	4818      	ldr	r0, [pc, #96]	; (1664 <system_clock_source_get_hz+0x84>)
    1602:	40d8      	lsrs	r0, r3
    1604:	e026      	b.n	1654 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1606:	4b15      	ldr	r3, [pc, #84]	; (165c <system_clock_source_get_hz+0x7c>)
    1608:	6958      	ldr	r0, [r3, #20]
    160a:	e023      	b.n	1654 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    160c:	4b13      	ldr	r3, [pc, #76]	; (165c <system_clock_source_get_hz+0x7c>)
    160e:	681b      	ldr	r3, [r3, #0]
    1610:	2002      	movs	r0, #2
    1612:	4018      	ands	r0, r3
    1614:	d01e      	beq.n	1654 <system_clock_source_get_hz+0x74>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1616:	4912      	ldr	r1, [pc, #72]	; (1660 <system_clock_source_get_hz+0x80>)
    1618:	2210      	movs	r2, #16
    161a:	68cb      	ldr	r3, [r1, #12]
    161c:	421a      	tst	r2, r3
    161e:	d0fc      	beq.n	161a <system_clock_source_get_hz+0x3a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1620:	4b0e      	ldr	r3, [pc, #56]	; (165c <system_clock_source_get_hz+0x7c>)
    1622:	681b      	ldr	r3, [r3, #0]
    1624:	075b      	lsls	r3, r3, #29
    1626:	d514      	bpl.n	1652 <system_clock_source_get_hz+0x72>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1628:	2000      	movs	r0, #0
    162a:	4b0f      	ldr	r3, [pc, #60]	; (1668 <system_clock_source_get_hz+0x88>)
    162c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    162e:	4b0b      	ldr	r3, [pc, #44]	; (165c <system_clock_source_get_hz+0x7c>)
    1630:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1632:	041b      	lsls	r3, r3, #16
    1634:	0c1b      	lsrs	r3, r3, #16
    1636:	4358      	muls	r0, r3
    1638:	e00c      	b.n	1654 <system_clock_source_get_hz+0x74>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    163a:	2350      	movs	r3, #80	; 0x50
    163c:	4a08      	ldr	r2, [pc, #32]	; (1660 <system_clock_source_get_hz+0x80>)
    163e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1640:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1642:	075b      	lsls	r3, r3, #29
    1644:	d506      	bpl.n	1654 <system_clock_source_get_hz+0x74>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1646:	4b05      	ldr	r3, [pc, #20]	; (165c <system_clock_source_get_hz+0x7c>)
    1648:	68d8      	ldr	r0, [r3, #12]
    164a:	e003      	b.n	1654 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    164c:	2080      	movs	r0, #128	; 0x80
    164e:	0200      	lsls	r0, r0, #8
    1650:	e000      	b.n	1654 <system_clock_source_get_hz+0x74>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1652:	4806      	ldr	r0, [pc, #24]	; (166c <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    1654:	bd10      	pop	{r4, pc}
    1656:	46c0      	nop			; (mov r8, r8)
    1658:	0000229c 	.word	0x0000229c
    165c:	20000050 	.word	0x20000050
    1660:	40000800 	.word	0x40000800
    1664:	007a1200 	.word	0x007a1200
    1668:	00001c65 	.word	0x00001c65
    166c:	02dc6c00 	.word	0x02dc6c00

00001670 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1670:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1672:	4c0c      	ldr	r4, [pc, #48]	; (16a4 <system_clock_source_osc8m_set_config+0x34>)
    1674:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1676:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1678:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    167a:	7842      	ldrb	r2, [r0, #1]
    167c:	2001      	movs	r0, #1
    167e:	4002      	ands	r2, r0
    1680:	0192      	lsls	r2, r2, #6
    1682:	2640      	movs	r6, #64	; 0x40
    1684:	43b3      	bics	r3, r6
    1686:	4313      	orrs	r3, r2
    1688:	0002      	movs	r2, r0
    168a:	402a      	ands	r2, r5
    168c:	01d2      	lsls	r2, r2, #7
    168e:	307f      	adds	r0, #127	; 0x7f
    1690:	4383      	bics	r3, r0
    1692:	4313      	orrs	r3, r2
    1694:	2203      	movs	r2, #3
    1696:	400a      	ands	r2, r1
    1698:	0212      	lsls	r2, r2, #8
    169a:	4903      	ldr	r1, [pc, #12]	; (16a8 <system_clock_source_osc8m_set_config+0x38>)
    169c:	400b      	ands	r3, r1
    169e:	4313      	orrs	r3, r2
    16a0:	6223      	str	r3, [r4, #32]
}
    16a2:	bd70      	pop	{r4, r5, r6, pc}
    16a4:	40000800 	.word	0x40000800
    16a8:	fffffcff 	.word	0xfffffcff

000016ac <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    16ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    16ae:	465f      	mov	r7, fp
    16b0:	4656      	mov	r6, sl
    16b2:	464d      	mov	r5, r9
    16b4:	4644      	mov	r4, r8
    16b6:	b4f0      	push	{r4, r5, r6, r7}
    16b8:	b083      	sub	sp, #12
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    16ba:	4e2e      	ldr	r6, [pc, #184]	; (1774 <system_clock_source_xosc32k_set_config+0xc8>)
    16bc:	8ab3      	ldrh	r3, [r6, #20]
    16be:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    16c0:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    16c2:	7803      	ldrb	r3, [r0, #0]
    16c4:	425a      	negs	r2, r3
    16c6:	415a      	adcs	r2, r3
    16c8:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    16ca:	7883      	ldrb	r3, [r0, #2]
    16cc:	469b      	mov	fp, r3
	temp.bit.EN1K = config->enable_1khz_output;
    16ce:	78c3      	ldrb	r3, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    16d0:	7902      	ldrb	r2, [r0, #4]
    16d2:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    16d4:	7b47      	ldrb	r7, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    16d6:	7b02      	ldrb	r2, [r0, #12]
    16d8:	9201      	str	r2, [sp, #4]
	temp.bit.WRTLOCK  = config->write_once;
    16da:	7b84      	ldrb	r4, [r0, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    16dc:	6882      	ldr	r2, [r0, #8]
    16de:	4826      	ldr	r0, [pc, #152]	; (1778 <system_clock_source_xosc32k_set_config+0xcc>)
    16e0:	6142      	str	r2, [r0, #20]

	SYSCTRL->XOSC32K = temp;
    16e2:	2001      	movs	r0, #1
    16e4:	464a      	mov	r2, r9
    16e6:	0092      	lsls	r2, r2, #2
    16e8:	4691      	mov	r9, r2
    16ea:	2204      	movs	r2, #4
    16ec:	4692      	mov	sl, r2
    16ee:	4662      	mov	r2, ip
    16f0:	4651      	mov	r1, sl
    16f2:	438a      	bics	r2, r1
    16f4:	4694      	mov	ip, r2
    16f6:	464a      	mov	r2, r9
    16f8:	4661      	mov	r1, ip
    16fa:	430a      	orrs	r2, r1
    16fc:	4694      	mov	ip, r2
    16fe:	4642      	mov	r2, r8
    1700:	4002      	ands	r2, r0
    1702:	00d2      	lsls	r2, r2, #3
    1704:	4690      	mov	r8, r2
    1706:	2208      	movs	r2, #8
    1708:	4691      	mov	r9, r2
    170a:	4662      	mov	r2, ip
    170c:	4649      	mov	r1, r9
    170e:	438a      	bics	r2, r1
    1710:	4694      	mov	ip, r2
    1712:	4642      	mov	r2, r8
    1714:	4661      	mov	r1, ip
    1716:	430a      	orrs	r2, r1
    1718:	4694      	mov	ip, r2
    171a:	4003      	ands	r3, r0
    171c:	011b      	lsls	r3, r3, #4
    171e:	2210      	movs	r2, #16
    1720:	4690      	mov	r8, r2
    1722:	4662      	mov	r2, ip
    1724:	4641      	mov	r1, r8
    1726:	438a      	bics	r2, r1
    1728:	4313      	orrs	r3, r2
    172a:	4659      	mov	r1, fp
    172c:	4001      	ands	r1, r0
    172e:	0149      	lsls	r1, r1, #5
    1730:	2220      	movs	r2, #32
    1732:	4393      	bics	r3, r2
    1734:	430b      	orrs	r3, r1
    1736:	9a01      	ldr	r2, [sp, #4]
    1738:	4002      	ands	r2, r0
    173a:	0192      	lsls	r2, r2, #6
    173c:	2140      	movs	r1, #64	; 0x40
    173e:	438b      	bics	r3, r1
    1740:	4313      	orrs	r3, r2
    1742:	4007      	ands	r7, r0
    1744:	01ff      	lsls	r7, r7, #7
    1746:	2280      	movs	r2, #128	; 0x80
    1748:	4393      	bics	r3, r2
    174a:	433b      	orrs	r3, r7
    174c:	3a79      	subs	r2, #121	; 0x79
    174e:	4015      	ands	r5, r2
    1750:	022d      	lsls	r5, r5, #8
    1752:	4f0a      	ldr	r7, [pc, #40]	; (177c <system_clock_source_xosc32k_set_config+0xd0>)
    1754:	403b      	ands	r3, r7
    1756:	432b      	orrs	r3, r5
    1758:	4004      	ands	r4, r0
    175a:	0320      	lsls	r0, r4, #12
    175c:	4c08      	ldr	r4, [pc, #32]	; (1780 <system_clock_source_xosc32k_set_config+0xd4>)
    175e:	401c      	ands	r4, r3
    1760:	4304      	orrs	r4, r0
    1762:	82b4      	strh	r4, [r6, #20]
}
    1764:	b003      	add	sp, #12
    1766:	bc3c      	pop	{r2, r3, r4, r5}
    1768:	4690      	mov	r8, r2
    176a:	4699      	mov	r9, r3
    176c:	46a2      	mov	sl, r4
    176e:	46ab      	mov	fp, r5
    1770:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1772:	46c0      	nop			; (mov r8, r8)
    1774:	40000800 	.word	0x40000800
    1778:	20000050 	.word	0x20000050
    177c:	fffff8ff 	.word	0xfffff8ff
    1780:	ffffefff 	.word	0xffffefff

00001784 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1784:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1786:	7a03      	ldrb	r3, [r0, #8]
    1788:	069b      	lsls	r3, r3, #26
    178a:	0c1a      	lsrs	r2, r3, #16
    178c:	8943      	ldrh	r3, [r0, #10]
    178e:	059b      	lsls	r3, r3, #22
    1790:	0d9b      	lsrs	r3, r3, #22
    1792:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    1794:	4c19      	ldr	r4, [pc, #100]	; (17fc <system_clock_source_dfll_set_config+0x78>)
    1796:	6063      	str	r3, [r4, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    1798:	7981      	ldrb	r1, [r0, #6]
    179a:	79c3      	ldrb	r3, [r0, #7]
    179c:	4319      	orrs	r1, r3
    179e:	8843      	ldrh	r3, [r0, #2]
    17a0:	8882      	ldrh	r2, [r0, #4]
    17a2:	4313      	orrs	r3, r2
    17a4:	430b      	orrs	r3, r1
    17a6:	7842      	ldrb	r2, [r0, #1]
    17a8:	01d2      	lsls	r2, r2, #7
    17aa:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    17ac:	6023      	str	r3, [r4, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    17ae:	7803      	ldrb	r3, [r0, #0]
    17b0:	2b04      	cmp	r3, #4
    17b2:	d10f      	bne.n	17d4 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    17b4:	7b03      	ldrb	r3, [r0, #12]
    17b6:	069b      	lsls	r3, r3, #26
    17b8:	8a02      	ldrh	r2, [r0, #16]
    17ba:	4313      	orrs	r3, r2
    17bc:	0019      	movs	r1, r3
    17be:	89c3      	ldrh	r3, [r0, #14]
    17c0:	041b      	lsls	r3, r3, #16
    17c2:	4a0f      	ldr	r2, [pc, #60]	; (1800 <system_clock_source_dfll_set_config+0x7c>)
    17c4:	4013      	ands	r3, r2
    17c6:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    17c8:	60a3      	str	r3, [r4, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    17ca:	6821      	ldr	r1, [r4, #0]
    17cc:	2304      	movs	r3, #4
    17ce:	430b      	orrs	r3, r1
    17d0:	6023      	str	r3, [r4, #0]
    17d2:	e011      	b.n	17f8 <system_clock_source_dfll_set_config+0x74>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    17d4:	2b20      	cmp	r3, #32
    17d6:	d10f      	bne.n	17f8 <system_clock_source_dfll_set_config+0x74>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    17d8:	7b03      	ldrb	r3, [r0, #12]
    17da:	069b      	lsls	r3, r3, #26
    17dc:	8a02      	ldrh	r2, [r0, #16]
    17de:	4313      	orrs	r3, r2
    17e0:	0019      	movs	r1, r3
    17e2:	89c3      	ldrh	r3, [r0, #14]
    17e4:	041b      	lsls	r3, r3, #16
    17e6:	4a06      	ldr	r2, [pc, #24]	; (1800 <system_clock_source_dfll_set_config+0x7c>)
    17e8:	4013      	ands	r3, r2
    17ea:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    17ec:	4a03      	ldr	r2, [pc, #12]	; (17fc <system_clock_source_dfll_set_config+0x78>)
    17ee:	6093      	str	r3, [r2, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    17f0:	6813      	ldr	r3, [r2, #0]
    17f2:	4904      	ldr	r1, [pc, #16]	; (1804 <system_clock_source_dfll_set_config+0x80>)
    17f4:	430b      	orrs	r3, r1
    17f6:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    17f8:	bd10      	pop	{r4, pc}
    17fa:	46c0      	nop			; (mov r8, r8)
    17fc:	20000050 	.word	0x20000050
    1800:	03ff0000 	.word	0x03ff0000
    1804:	00000424 	.word	0x00000424

00001808 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1808:	2808      	cmp	r0, #8
    180a:	d803      	bhi.n	1814 <system_clock_source_enable+0xc>
    180c:	0080      	lsls	r0, r0, #2
    180e:	4b25      	ldr	r3, [pc, #148]	; (18a4 <system_clock_source_enable+0x9c>)
    1810:	581b      	ldr	r3, [r3, r0]
    1812:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1814:	2017      	movs	r0, #23
    1816:	e044      	b.n	18a2 <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1818:	4a23      	ldr	r2, [pc, #140]	; (18a8 <system_clock_source_enable+0xa0>)
    181a:	6a11      	ldr	r1, [r2, #32]
    181c:	2302      	movs	r3, #2
    181e:	430b      	orrs	r3, r1
    1820:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1822:	2000      	movs	r0, #0
    1824:	e03d      	b.n	18a2 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1826:	4a20      	ldr	r2, [pc, #128]	; (18a8 <system_clock_source_enable+0xa0>)
    1828:	6991      	ldr	r1, [r2, #24]
    182a:	2302      	movs	r3, #2
    182c:	430b      	orrs	r3, r1
    182e:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1830:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1832:	e036      	b.n	18a2 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1834:	4a1c      	ldr	r2, [pc, #112]	; (18a8 <system_clock_source_enable+0xa0>)
    1836:	8a11      	ldrh	r1, [r2, #16]
    1838:	2302      	movs	r3, #2
    183a:	430b      	orrs	r3, r1
    183c:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    183e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1840:	e02f      	b.n	18a2 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1842:	4a19      	ldr	r2, [pc, #100]	; (18a8 <system_clock_source_enable+0xa0>)
    1844:	8a91      	ldrh	r1, [r2, #20]
    1846:	2302      	movs	r3, #2
    1848:	430b      	orrs	r3, r1
    184a:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    184c:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    184e:	e028      	b.n	18a2 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1850:	4916      	ldr	r1, [pc, #88]	; (18ac <system_clock_source_enable+0xa4>)
    1852:	680b      	ldr	r3, [r1, #0]
    1854:	2202      	movs	r2, #2
    1856:	4313      	orrs	r3, r2
    1858:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    185a:	4b13      	ldr	r3, [pc, #76]	; (18a8 <system_clock_source_enable+0xa0>)
    185c:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    185e:	0019      	movs	r1, r3
    1860:	320e      	adds	r2, #14
    1862:	68cb      	ldr	r3, [r1, #12]
    1864:	421a      	tst	r2, r3
    1866:	d0fc      	beq.n	1862 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1868:	4a10      	ldr	r2, [pc, #64]	; (18ac <system_clock_source_enable+0xa4>)
    186a:	6891      	ldr	r1, [r2, #8]
    186c:	4b0e      	ldr	r3, [pc, #56]	; (18a8 <system_clock_source_enable+0xa0>)
    186e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1870:	6852      	ldr	r2, [r2, #4]
    1872:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1874:	2200      	movs	r2, #0
    1876:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1878:	0019      	movs	r1, r3
    187a:	3210      	adds	r2, #16
    187c:	68cb      	ldr	r3, [r1, #12]
    187e:	421a      	tst	r2, r3
    1880:	d0fc      	beq.n	187c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1882:	4b0a      	ldr	r3, [pc, #40]	; (18ac <system_clock_source_enable+0xa4>)
    1884:	681b      	ldr	r3, [r3, #0]
    1886:	b29b      	uxth	r3, r3
    1888:	4a07      	ldr	r2, [pc, #28]	; (18a8 <system_clock_source_enable+0xa0>)
    188a:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    188c:	2000      	movs	r0, #0
    188e:	e008      	b.n	18a2 <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1890:	4905      	ldr	r1, [pc, #20]	; (18a8 <system_clock_source_enable+0xa0>)
    1892:	2244      	movs	r2, #68	; 0x44
    1894:	5c88      	ldrb	r0, [r1, r2]
    1896:	2302      	movs	r3, #2
    1898:	4303      	orrs	r3, r0
    189a:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    189c:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    189e:	e000      	b.n	18a2 <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    18a0:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    18a2:	4770      	bx	lr
    18a4:	000022c0 	.word	0x000022c0
    18a8:	40000800 	.word	0x40000800
    18ac:	20000050 	.word	0x20000050

000018b0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    18b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    18b2:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    18b4:	22c2      	movs	r2, #194	; 0xc2
    18b6:	00d2      	lsls	r2, r2, #3
    18b8:	4b47      	ldr	r3, [pc, #284]	; (19d8 <system_clock_init+0x128>)
    18ba:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    18bc:	4947      	ldr	r1, [pc, #284]	; (19dc <system_clock_init+0x12c>)
    18be:	684b      	ldr	r3, [r1, #4]
    18c0:	221e      	movs	r2, #30
    18c2:	4393      	bics	r3, r2
    18c4:	3a1a      	subs	r2, #26
    18c6:	4313      	orrs	r3, r2
    18c8:	604b      	str	r3, [r1, #4]
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    18ca:	3a02      	subs	r2, #2
    18cc:	ab01      	add	r3, sp, #4
    18ce:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    18d0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    18d2:	4d43      	ldr	r5, [pc, #268]	; (19e0 <system_clock_init+0x130>)
    18d4:	b2e0      	uxtb	r0, r4
    18d6:	a901      	add	r1, sp, #4
    18d8:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    18da:	3401      	adds	r4, #1
    18dc:	2c25      	cmp	r4, #37	; 0x25
    18de:	d1f9      	bne.n	18d4 <system_clock_init+0x24>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    18e0:	a80a      	add	r0, sp, #40	; 0x28
    18e2:	2300      	movs	r3, #0
    18e4:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
    18e6:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    18e8:	2280      	movs	r2, #128	; 0x80
    18ea:	0212      	lsls	r2, r2, #8
    18ec:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    18ee:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    18f0:	2201      	movs	r2, #1
    18f2:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    18f4:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    18f6:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    18f8:	3202      	adds	r2, #2
    18fa:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    18fc:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    18fe:	4b39      	ldr	r3, [pc, #228]	; (19e4 <system_clock_init+0x134>)
    1900:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1902:	2005      	movs	r0, #5
    1904:	4b38      	ldr	r3, [pc, #224]	; (19e8 <system_clock_init+0x138>)
    1906:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1908:	4933      	ldr	r1, [pc, #204]	; (19d8 <system_clock_init+0x128>)
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    190a:	2202      	movs	r2, #2

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    190c:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    190e:	421a      	tst	r2, r3
    1910:	d0fc      	beq.n	190c <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1912:	4a31      	ldr	r2, [pc, #196]	; (19d8 <system_clock_init+0x128>)
    1914:	8a91      	ldrh	r1, [r2, #20]
    1916:	2380      	movs	r3, #128	; 0x80
    1918:	430b      	orrs	r3, r1
    191a:	8293      	strh	r3, [r2, #20]
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    191c:	ab05      	add	r3, sp, #20
    191e:	2100      	movs	r1, #0
    1920:	2200      	movs	r2, #0
    1922:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1924:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1926:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1928:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
	config->fine_value      = 0xff / 4; /* Midpoint */
    192a:	313f      	adds	r1, #63	; 0x3f
    192c:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    192e:	393b      	subs	r1, #59	; 0x3b
    1930:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1932:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1934:	4b2d      	ldr	r3, [pc, #180]	; (19ec <system_clock_init+0x13c>)
    1936:	681b      	ldr	r3, [r3, #0]
    1938:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    193a:	2b3f      	cmp	r3, #63	; 0x3f
    193c:	d100      	bne.n	1940 <system_clock_init+0x90>
		coarse = 0x1f;
    193e:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
    1940:	a805      	add	r0, sp, #20
    1942:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1944:	4b2a      	ldr	r3, [pc, #168]	; (19f0 <system_clock_init+0x140>)
    1946:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1948:	2307      	movs	r3, #7
    194a:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    194c:	3338      	adds	r3, #56	; 0x38
    194e:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1950:	4b28      	ldr	r3, [pc, #160]	; (19f4 <system_clock_init+0x144>)
    1952:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1954:	a804      	add	r0, sp, #16
    1956:	2500      	movs	r5, #0
    1958:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    195a:	2601      	movs	r6, #1
    195c:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    195e:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1960:	4b25      	ldr	r3, [pc, #148]	; (19f8 <system_clock_init+0x148>)
    1962:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1964:	2006      	movs	r0, #6
    1966:	4f20      	ldr	r7, [pc, #128]	; (19e8 <system_clock_init+0x138>)
    1968:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    196a:	4b24      	ldr	r3, [pc, #144]	; (19fc <system_clock_init+0x14c>)
    196c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    196e:	ac01      	add	r4, sp, #4
    1970:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1972:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1974:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1976:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1978:	2305      	movs	r3, #5
    197a:	7023      	strb	r3, [r4, #0]
    197c:	0021      	movs	r1, r4
    197e:	2001      	movs	r0, #1
    1980:	4b1f      	ldr	r3, [pc, #124]	; (1a00 <system_clock_init+0x150>)
    1982:	4798      	blx	r3
    1984:	2001      	movs	r0, #1
    1986:	4b1f      	ldr	r3, [pc, #124]	; (1a04 <system_clock_init+0x154>)
    1988:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    198a:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    198c:	0021      	movs	r1, r4
    198e:	2000      	movs	r0, #0
    1990:	4b13      	ldr	r3, [pc, #76]	; (19e0 <system_clock_init+0x130>)
    1992:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1994:	2000      	movs	r0, #0
    1996:	4b1c      	ldr	r3, [pc, #112]	; (1a08 <system_clock_init+0x158>)
    1998:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    199a:	2007      	movs	r0, #7
    199c:	47b8      	blx	r7

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    199e:	490e      	ldr	r1, [pc, #56]	; (19d8 <system_clock_init+0x128>)


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    19a0:	22d0      	movs	r2, #208	; 0xd0

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    19a2:	68cb      	ldr	r3, [r1, #12]


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    19a4:	4013      	ands	r3, r2
    19a6:	2bd0      	cmp	r3, #208	; 0xd0
    19a8:	d1fb      	bne.n	19a2 <system_clock_init+0xf2>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    19aa:	4a18      	ldr	r2, [pc, #96]	; (1a0c <system_clock_init+0x15c>)
    19ac:	2300      	movs	r3, #0
    19ae:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    19b0:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    19b2:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    19b4:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    19b6:	a901      	add	r1, sp, #4
    19b8:	2201      	movs	r2, #1
    19ba:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    19bc:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    19be:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    19c0:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    19c2:	3307      	adds	r3, #7
    19c4:	700b      	strb	r3, [r1, #0]
    19c6:	2000      	movs	r0, #0
    19c8:	4b0d      	ldr	r3, [pc, #52]	; (1a00 <system_clock_init+0x150>)
    19ca:	4798      	blx	r3
    19cc:	2000      	movs	r0, #0
    19ce:	4b0d      	ldr	r3, [pc, #52]	; (1a04 <system_clock_init+0x154>)
    19d0:	4798      	blx	r3
#endif
}
    19d2:	b00f      	add	sp, #60	; 0x3c
    19d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19d6:	46c0      	nop			; (mov r8, r8)
    19d8:	40000800 	.word	0x40000800
    19dc:	41004000 	.word	0x41004000
    19e0:	00001c49 	.word	0x00001c49
    19e4:	000016ad 	.word	0x000016ad
    19e8:	00001809 	.word	0x00001809
    19ec:	00806024 	.word	0x00806024
    19f0:	000005b9 	.word	0x000005b9
    19f4:	00001785 	.word	0x00001785
    19f8:	00001671 	.word	0x00001671
    19fc:	00001a11 	.word	0x00001a11
    1a00:	00001a35 	.word	0x00001a35
    1a04:	00001aed 	.word	0x00001aed
    1a08:	00001bbd 	.word	0x00001bbd
    1a0c:	40000400 	.word	0x40000400

00001a10 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1a10:	4a06      	ldr	r2, [pc, #24]	; (1a2c <system_gclk_init+0x1c>)
    1a12:	6991      	ldr	r1, [r2, #24]
    1a14:	2308      	movs	r3, #8
    1a16:	430b      	orrs	r3, r1
    1a18:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1a1a:	2201      	movs	r2, #1
    1a1c:	4b04      	ldr	r3, [pc, #16]	; (1a30 <system_gclk_init+0x20>)
    1a1e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1a20:	0019      	movs	r1, r3
    1a22:	780b      	ldrb	r3, [r1, #0]
    1a24:	4213      	tst	r3, r2
    1a26:	d1fc      	bne.n	1a22 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1a28:	4770      	bx	lr
    1a2a:	46c0      	nop			; (mov r8, r8)
    1a2c:	40000400 	.word	0x40000400
    1a30:	40000c00 	.word	0x40000c00

00001a34 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1a34:	b570      	push	{r4, r5, r6, lr}
    1a36:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1a38:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1a3a:	780c      	ldrb	r4, [r1, #0]
    1a3c:	0224      	lsls	r4, r4, #8
    1a3e:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1a40:	784b      	ldrb	r3, [r1, #1]
    1a42:	2b00      	cmp	r3, #0
    1a44:	d002      	beq.n	1a4c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1a46:	2380      	movs	r3, #128	; 0x80
    1a48:	02db      	lsls	r3, r3, #11
    1a4a:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1a4c:	7a4b      	ldrb	r3, [r1, #9]
    1a4e:	2b00      	cmp	r3, #0
    1a50:	d002      	beq.n	1a58 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1a52:	2380      	movs	r3, #128	; 0x80
    1a54:	031b      	lsls	r3, r3, #12
    1a56:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1a58:	6848      	ldr	r0, [r1, #4]
    1a5a:	2801      	cmp	r0, #1
    1a5c:	d918      	bls.n	1a90 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1a5e:	1e43      	subs	r3, r0, #1
    1a60:	4218      	tst	r0, r3
    1a62:	d110      	bne.n	1a86 <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1a64:	2802      	cmp	r0, #2
    1a66:	d906      	bls.n	1a76 <system_gclk_gen_set_config+0x42>
    1a68:	2302      	movs	r3, #2
    1a6a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1a6c:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1a6e:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1a70:	4298      	cmp	r0, r3
    1a72:	d8fb      	bhi.n	1a6c <system_gclk_gen_set_config+0x38>
    1a74:	e000      	b.n	1a78 <system_gclk_gen_set_config+0x44>
    1a76:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1a78:	0212      	lsls	r2, r2, #8
    1a7a:	4332      	orrs	r2, r6
    1a7c:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1a7e:	2380      	movs	r3, #128	; 0x80
    1a80:	035b      	lsls	r3, r3, #13
    1a82:	431c      	orrs	r4, r3
    1a84:	e004      	b.n	1a90 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1a86:	0205      	lsls	r5, r0, #8
    1a88:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1a8a:	2380      	movs	r3, #128	; 0x80
    1a8c:	029b      	lsls	r3, r3, #10
    1a8e:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1a90:	7a0b      	ldrb	r3, [r1, #8]
    1a92:	2b00      	cmp	r3, #0
    1a94:	d002      	beq.n	1a9c <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1a96:	2380      	movs	r3, #128	; 0x80
    1a98:	039b      	lsls	r3, r3, #14
    1a9a:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a9c:	4a0f      	ldr	r2, [pc, #60]	; (1adc <system_gclk_gen_set_config+0xa8>)
    1a9e:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    1aa0:	b25b      	sxtb	r3, r3
    1aa2:	2b00      	cmp	r3, #0
    1aa4:	dbfb      	blt.n	1a9e <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1aa6:	4b0e      	ldr	r3, [pc, #56]	; (1ae0 <system_gclk_gen_set_config+0xac>)
    1aa8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1aaa:	4b0e      	ldr	r3, [pc, #56]	; (1ae4 <system_gclk_gen_set_config+0xb0>)
    1aac:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1aae:	4a0b      	ldr	r2, [pc, #44]	; (1adc <system_gclk_gen_set_config+0xa8>)
    1ab0:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1ab2:	b25b      	sxtb	r3, r3
    1ab4:	2b00      	cmp	r3, #0
    1ab6:	dbfb      	blt.n	1ab0 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1ab8:	4b08      	ldr	r3, [pc, #32]	; (1adc <system_gclk_gen_set_config+0xa8>)
    1aba:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1abc:	001a      	movs	r2, r3
    1abe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    1ac0:	b25b      	sxtb	r3, r3
    1ac2:	2b00      	cmp	r3, #0
    1ac4:	dbfb      	blt.n	1abe <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1ac6:	4a05      	ldr	r2, [pc, #20]	; (1adc <system_gclk_gen_set_config+0xa8>)
    1ac8:	6851      	ldr	r1, [r2, #4]
    1aca:	2380      	movs	r3, #128	; 0x80
    1acc:	025b      	lsls	r3, r3, #9
    1ace:	400b      	ands	r3, r1
    1ad0:	431c      	orrs	r4, r3
    1ad2:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1ad4:	4b04      	ldr	r3, [pc, #16]	; (1ae8 <system_gclk_gen_set_config+0xb4>)
    1ad6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1ad8:	bd70      	pop	{r4, r5, r6, pc}
    1ada:	46c0      	nop			; (mov r8, r8)
    1adc:	40000c00 	.word	0x40000c00
    1ae0:	00001515 	.word	0x00001515
    1ae4:	40000c08 	.word	0x40000c08
    1ae8:	00001555 	.word	0x00001555

00001aec <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1aec:	b510      	push	{r4, lr}
    1aee:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1af0:	4a0b      	ldr	r2, [pc, #44]	; (1b20 <system_gclk_gen_enable+0x34>)
    1af2:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1af4:	b25b      	sxtb	r3, r3
    1af6:	2b00      	cmp	r3, #0
    1af8:	dbfb      	blt.n	1af2 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1afa:	4b0a      	ldr	r3, [pc, #40]	; (1b24 <system_gclk_gen_enable+0x38>)
    1afc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1afe:	4b0a      	ldr	r3, [pc, #40]	; (1b28 <system_gclk_gen_enable+0x3c>)
    1b00:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b02:	4a07      	ldr	r2, [pc, #28]	; (1b20 <system_gclk_gen_enable+0x34>)
    1b04:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1b06:	b25b      	sxtb	r3, r3
    1b08:	2b00      	cmp	r3, #0
    1b0a:	dbfb      	blt.n	1b04 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1b0c:	4a04      	ldr	r2, [pc, #16]	; (1b20 <system_gclk_gen_enable+0x34>)
    1b0e:	6853      	ldr	r3, [r2, #4]
    1b10:	2180      	movs	r1, #128	; 0x80
    1b12:	0249      	lsls	r1, r1, #9
    1b14:	430b      	orrs	r3, r1
    1b16:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1b18:	4b04      	ldr	r3, [pc, #16]	; (1b2c <system_gclk_gen_enable+0x40>)
    1b1a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b1c:	bd10      	pop	{r4, pc}
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	40000c00 	.word	0x40000c00
    1b24:	00001515 	.word	0x00001515
    1b28:	40000c04 	.word	0x40000c04
    1b2c:	00001555 	.word	0x00001555

00001b30 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1b30:	b570      	push	{r4, r5, r6, lr}
    1b32:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b34:	4a1a      	ldr	r2, [pc, #104]	; (1ba0 <system_gclk_gen_get_hz+0x70>)
    1b36:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1b38:	b25b      	sxtb	r3, r3
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	dbfb      	blt.n	1b36 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1b3e:	4b19      	ldr	r3, [pc, #100]	; (1ba4 <system_gclk_gen_get_hz+0x74>)
    1b40:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b42:	4b19      	ldr	r3, [pc, #100]	; (1ba8 <system_gclk_gen_get_hz+0x78>)
    1b44:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b46:	4a16      	ldr	r2, [pc, #88]	; (1ba0 <system_gclk_gen_get_hz+0x70>)
    1b48:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1b4a:	b25b      	sxtb	r3, r3
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	dbfb      	blt.n	1b48 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1b50:	4e13      	ldr	r6, [pc, #76]	; (1ba0 <system_gclk_gen_get_hz+0x70>)
    1b52:	6870      	ldr	r0, [r6, #4]
    1b54:	04c0      	lsls	r0, r0, #19
    1b56:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1b58:	4b14      	ldr	r3, [pc, #80]	; (1bac <system_gclk_gen_get_hz+0x7c>)
    1b5a:	4798      	blx	r3
    1b5c:	0005      	movs	r5, r0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b5e:	4b12      	ldr	r3, [pc, #72]	; (1ba8 <system_gclk_gen_get_hz+0x78>)
    1b60:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1b62:	6876      	ldr	r6, [r6, #4]
    1b64:	02f6      	lsls	r6, r6, #11
    1b66:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1b68:	4b11      	ldr	r3, [pc, #68]	; (1bb0 <system_gclk_gen_get_hz+0x80>)
    1b6a:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b6c:	4a0c      	ldr	r2, [pc, #48]	; (1ba0 <system_gclk_gen_get_hz+0x70>)
    1b6e:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    1b70:	b25b      	sxtb	r3, r3
    1b72:	2b00      	cmp	r3, #0
    1b74:	dbfb      	blt.n	1b6e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1b76:	4b0a      	ldr	r3, [pc, #40]	; (1ba0 <system_gclk_gen_get_hz+0x70>)
    1b78:	689c      	ldr	r4, [r3, #8]
    1b7a:	0224      	lsls	r4, r4, #8
    1b7c:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1b7e:	4b0d      	ldr	r3, [pc, #52]	; (1bb4 <system_gclk_gen_get_hz+0x84>)
    1b80:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1b82:	2e00      	cmp	r6, #0
    1b84:	d107      	bne.n	1b96 <system_gclk_gen_get_hz+0x66>
    1b86:	2c01      	cmp	r4, #1
    1b88:	d907      	bls.n	1b9a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1b8a:	0021      	movs	r1, r4
    1b8c:	0028      	movs	r0, r5
    1b8e:	4b0a      	ldr	r3, [pc, #40]	; (1bb8 <system_gclk_gen_get_hz+0x88>)
    1b90:	4798      	blx	r3
    1b92:	0005      	movs	r5, r0
    1b94:	e001      	b.n	1b9a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1b96:	3401      	adds	r4, #1
    1b98:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1b9a:	0028      	movs	r0, r5
    1b9c:	bd70      	pop	{r4, r5, r6, pc}
    1b9e:	46c0      	nop			; (mov r8, r8)
    1ba0:	40000c00 	.word	0x40000c00
    1ba4:	00001515 	.word	0x00001515
    1ba8:	40000c04 	.word	0x40000c04
    1bac:	000015e1 	.word	0x000015e1
    1bb0:	40000c08 	.word	0x40000c08
    1bb4:	00001555 	.word	0x00001555
    1bb8:	00002029 	.word	0x00002029

00001bbc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1bbc:	b510      	push	{r4, lr}
    1bbe:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1bc0:	4b06      	ldr	r3, [pc, #24]	; (1bdc <system_gclk_chan_enable+0x20>)
    1bc2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1bc4:	4b06      	ldr	r3, [pc, #24]	; (1be0 <system_gclk_chan_enable+0x24>)
    1bc6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1bc8:	4a06      	ldr	r2, [pc, #24]	; (1be4 <system_gclk_chan_enable+0x28>)
    1bca:	8851      	ldrh	r1, [r2, #2]
    1bcc:	2380      	movs	r3, #128	; 0x80
    1bce:	01db      	lsls	r3, r3, #7
    1bd0:	430b      	orrs	r3, r1
    1bd2:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1bd4:	4b04      	ldr	r3, [pc, #16]	; (1be8 <system_gclk_chan_enable+0x2c>)
    1bd6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1bd8:	bd10      	pop	{r4, pc}
    1bda:	46c0      	nop			; (mov r8, r8)
    1bdc:	00001515 	.word	0x00001515
    1be0:	40000c02 	.word	0x40000c02
    1be4:	40000c00 	.word	0x40000c00
    1be8:	00001555 	.word	0x00001555

00001bec <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1bec:	b510      	push	{r4, lr}
    1bee:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1bf0:	4b0f      	ldr	r3, [pc, #60]	; (1c30 <system_gclk_chan_disable+0x44>)
    1bf2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1bf4:	4b0f      	ldr	r3, [pc, #60]	; (1c34 <system_gclk_chan_disable+0x48>)
    1bf6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1bf8:	4b0f      	ldr	r3, [pc, #60]	; (1c38 <system_gclk_chan_disable+0x4c>)
    1bfa:	885a      	ldrh	r2, [r3, #2]
    1bfc:	0512      	lsls	r2, r2, #20
    1bfe:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1c00:	8859      	ldrh	r1, [r3, #2]
    1c02:	4a0e      	ldr	r2, [pc, #56]	; (1c3c <system_gclk_chan_disable+0x50>)
    1c04:	400a      	ands	r2, r1
    1c06:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1c08:	8859      	ldrh	r1, [r3, #2]
    1c0a:	4a0d      	ldr	r2, [pc, #52]	; (1c40 <system_gclk_chan_disable+0x54>)
    1c0c:	400a      	ands	r2, r1
    1c0e:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1c10:	0019      	movs	r1, r3
    1c12:	2280      	movs	r2, #128	; 0x80
    1c14:	01d2      	lsls	r2, r2, #7
    1c16:	884b      	ldrh	r3, [r1, #2]
    1c18:	4213      	tst	r3, r2
    1c1a:	d1fc      	bne.n	1c16 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1c1c:	4906      	ldr	r1, [pc, #24]	; (1c38 <system_gclk_chan_disable+0x4c>)
    1c1e:	884c      	ldrh	r4, [r1, #2]
    1c20:	0202      	lsls	r2, r0, #8
    1c22:	4b06      	ldr	r3, [pc, #24]	; (1c3c <system_gclk_chan_disable+0x50>)
    1c24:	4023      	ands	r3, r4
    1c26:	4313      	orrs	r3, r2
    1c28:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1c2a:	4b06      	ldr	r3, [pc, #24]	; (1c44 <system_gclk_chan_disable+0x58>)
    1c2c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1c2e:	bd10      	pop	{r4, pc}
    1c30:	00001515 	.word	0x00001515
    1c34:	40000c02 	.word	0x40000c02
    1c38:	40000c00 	.word	0x40000c00
    1c3c:	fffff0ff 	.word	0xfffff0ff
    1c40:	ffffbfff 	.word	0xffffbfff
    1c44:	00001555 	.word	0x00001555

00001c48 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1c48:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1c4a:	780c      	ldrb	r4, [r1, #0]
    1c4c:	0224      	lsls	r4, r4, #8
    1c4e:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1c50:	4b02      	ldr	r3, [pc, #8]	; (1c5c <system_gclk_chan_set_config+0x14>)
    1c52:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1c54:	b2a4      	uxth	r4, r4
    1c56:	4b02      	ldr	r3, [pc, #8]	; (1c60 <system_gclk_chan_set_config+0x18>)
    1c58:	805c      	strh	r4, [r3, #2]
}
    1c5a:	bd10      	pop	{r4, pc}
    1c5c:	00001bed 	.word	0x00001bed
    1c60:	40000c00 	.word	0x40000c00

00001c64 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1c64:	b510      	push	{r4, lr}
    1c66:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1c68:	4b06      	ldr	r3, [pc, #24]	; (1c84 <system_gclk_chan_get_hz+0x20>)
    1c6a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c6c:	4b06      	ldr	r3, [pc, #24]	; (1c88 <system_gclk_chan_get_hz+0x24>)
    1c6e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1c70:	4b06      	ldr	r3, [pc, #24]	; (1c8c <system_gclk_chan_get_hz+0x28>)
    1c72:	885c      	ldrh	r4, [r3, #2]
    1c74:	0524      	lsls	r4, r4, #20
    1c76:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1c78:	4b05      	ldr	r3, [pc, #20]	; (1c90 <system_gclk_chan_get_hz+0x2c>)
    1c7a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1c7c:	0020      	movs	r0, r4
    1c7e:	4b05      	ldr	r3, [pc, #20]	; (1c94 <system_gclk_chan_get_hz+0x30>)
    1c80:	4798      	blx	r3
}
    1c82:	bd10      	pop	{r4, pc}
    1c84:	00001515 	.word	0x00001515
    1c88:	40000c02 	.word	0x40000c02
    1c8c:	40000c00 	.word	0x40000c00
    1c90:	00001555 	.word	0x00001555
    1c94:	00001b31 	.word	0x00001b31

00001c98 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1c98:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1c9a:	78d3      	ldrb	r3, [r2, #3]
    1c9c:	2b00      	cmp	r3, #0
    1c9e:	d11e      	bne.n	1cde <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1ca0:	7813      	ldrb	r3, [r2, #0]
    1ca2:	2b80      	cmp	r3, #128	; 0x80
    1ca4:	d004      	beq.n	1cb0 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1ca6:	061b      	lsls	r3, r3, #24
    1ca8:	2480      	movs	r4, #128	; 0x80
    1caa:	0264      	lsls	r4, r4, #9
    1cac:	4323      	orrs	r3, r4
    1cae:	e000      	b.n	1cb2 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1cb0:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1cb2:	7854      	ldrb	r4, [r2, #1]
    1cb4:	2502      	movs	r5, #2
    1cb6:	43ac      	bics	r4, r5
    1cb8:	d10a      	bne.n	1cd0 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1cba:	7894      	ldrb	r4, [r2, #2]
    1cbc:	2c00      	cmp	r4, #0
    1cbe:	d103      	bne.n	1cc8 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1cc0:	2480      	movs	r4, #128	; 0x80
    1cc2:	02a4      	lsls	r4, r4, #10
    1cc4:	4323      	orrs	r3, r4
    1cc6:	e002      	b.n	1cce <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1cc8:	24c0      	movs	r4, #192	; 0xc0
    1cca:	02e4      	lsls	r4, r4, #11
    1ccc:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1cce:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1cd0:	7854      	ldrb	r4, [r2, #1]
    1cd2:	3c01      	subs	r4, #1
    1cd4:	2c01      	cmp	r4, #1
    1cd6:	d812      	bhi.n	1cfe <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1cd8:	4c18      	ldr	r4, [pc, #96]	; (1d3c <_system_pinmux_config+0xa4>)
    1cda:	4023      	ands	r3, r4
    1cdc:	e00f      	b.n	1cfe <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1cde:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1ce0:	040b      	lsls	r3, r1, #16
    1ce2:	0c1b      	lsrs	r3, r3, #16
    1ce4:	24a0      	movs	r4, #160	; 0xa0
    1ce6:	05e4      	lsls	r4, r4, #23
    1ce8:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1cea:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1cec:	0c0b      	lsrs	r3, r1, #16
    1cee:	24d0      	movs	r4, #208	; 0xd0
    1cf0:	0624      	lsls	r4, r4, #24
    1cf2:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1cf4:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1cf6:	78d3      	ldrb	r3, [r2, #3]
    1cf8:	2b00      	cmp	r3, #0
    1cfa:	d018      	beq.n	1d2e <_system_pinmux_config+0x96>
    1cfc:	e01c      	b.n	1d38 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1cfe:	040c      	lsls	r4, r1, #16
    1d00:	0c24      	lsrs	r4, r4, #16
    1d02:	25a0      	movs	r5, #160	; 0xa0
    1d04:	05ed      	lsls	r5, r5, #23
    1d06:	432c      	orrs	r4, r5
    1d08:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d0a:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1d0c:	0c0c      	lsrs	r4, r1, #16
    1d0e:	25d0      	movs	r5, #208	; 0xd0
    1d10:	062d      	lsls	r5, r5, #24
    1d12:	432c      	orrs	r4, r5
    1d14:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d16:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1d18:	78d4      	ldrb	r4, [r2, #3]
    1d1a:	2c00      	cmp	r4, #0
    1d1c:	d10c      	bne.n	1d38 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1d1e:	035b      	lsls	r3, r3, #13
    1d20:	d505      	bpl.n	1d2e <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1d22:	7893      	ldrb	r3, [r2, #2]
    1d24:	2b01      	cmp	r3, #1
    1d26:	d101      	bne.n	1d2c <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    1d28:	6181      	str	r1, [r0, #24]
    1d2a:	e000      	b.n	1d2e <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    1d2c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d2e:	7853      	ldrb	r3, [r2, #1]
    1d30:	3b01      	subs	r3, #1
    1d32:	2b01      	cmp	r3, #1
    1d34:	d800      	bhi.n	1d38 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1d36:	6081      	str	r1, [r0, #8]
		}
	}
}
    1d38:	bd30      	pop	{r4, r5, pc}
    1d3a:	46c0      	nop			; (mov r8, r8)
    1d3c:	fffbffff 	.word	0xfffbffff

00001d40 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1d40:	b510      	push	{r4, lr}
    1d42:	0003      	movs	r3, r0
    1d44:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1d46:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1d48:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1d4a:	2900      	cmp	r1, #0
    1d4c:	d104      	bne.n	1d58 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    1d4e:	0958      	lsrs	r0, r3, #5
    1d50:	01c0      	lsls	r0, r0, #7
    1d52:	4905      	ldr	r1, [pc, #20]	; (1d68 <system_pinmux_pin_set_config+0x28>)
    1d54:	468c      	mov	ip, r1
    1d56:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    1d58:	211f      	movs	r1, #31
    1d5a:	400b      	ands	r3, r1
    1d5c:	391e      	subs	r1, #30
    1d5e:	4099      	lsls	r1, r3
    1d60:	4b02      	ldr	r3, [pc, #8]	; (1d6c <system_pinmux_pin_set_config+0x2c>)
    1d62:	4798      	blx	r3
}
    1d64:	bd10      	pop	{r4, pc}
    1d66:	46c0      	nop			; (mov r8, r8)
    1d68:	41004400 	.word	0x41004400
    1d6c:	00001c99 	.word	0x00001c99

00001d70 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1d70:	4770      	bx	lr
    1d72:	46c0      	nop			; (mov r8, r8)

00001d74 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1d74:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1d76:	4b05      	ldr	r3, [pc, #20]	; (1d8c <system_init+0x18>)
    1d78:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1d7a:	4b05      	ldr	r3, [pc, #20]	; (1d90 <system_init+0x1c>)
    1d7c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1d7e:	4b05      	ldr	r3, [pc, #20]	; (1d94 <system_init+0x20>)
    1d80:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1d82:	4b05      	ldr	r3, [pc, #20]	; (1d98 <system_init+0x24>)
    1d84:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1d86:	4b05      	ldr	r3, [pc, #20]	; (1d9c <system_init+0x28>)
    1d88:	4798      	blx	r3
}
    1d8a:	bd10      	pop	{r4, pc}
    1d8c:	000018b1 	.word	0x000018b1
    1d90:	00001585 	.word	0x00001585
    1d94:	00001d71 	.word	0x00001d71
    1d98:	00001d71 	.word	0x00001d71
    1d9c:	00001d71 	.word	0x00001d71

00001da0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1da0:	e7fe      	b.n	1da0 <Dummy_Handler>
    1da2:	46c0      	nop			; (mov r8, r8)

00001da4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1da4:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1da6:	4b2e      	ldr	r3, [pc, #184]	; (1e60 <Reset_Handler+0xbc>)
    1da8:	4a2e      	ldr	r2, [pc, #184]	; (1e64 <Reset_Handler+0xc0>)
    1daa:	429a      	cmp	r2, r3
    1dac:	d003      	beq.n	1db6 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1dae:	4b2e      	ldr	r3, [pc, #184]	; (1e68 <Reset_Handler+0xc4>)
    1db0:	4a2b      	ldr	r2, [pc, #172]	; (1e60 <Reset_Handler+0xbc>)
    1db2:	429a      	cmp	r2, r3
    1db4:	d304      	bcc.n	1dc0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1db6:	4b2d      	ldr	r3, [pc, #180]	; (1e6c <Reset_Handler+0xc8>)
    1db8:	4a2d      	ldr	r2, [pc, #180]	; (1e70 <Reset_Handler+0xcc>)
    1dba:	429a      	cmp	r2, r3
    1dbc:	d310      	bcc.n	1de0 <Reset_Handler+0x3c>
    1dbe:	e01e      	b.n	1dfe <Reset_Handler+0x5a>
    1dc0:	4a2c      	ldr	r2, [pc, #176]	; (1e74 <Reset_Handler+0xd0>)
    1dc2:	4b29      	ldr	r3, [pc, #164]	; (1e68 <Reset_Handler+0xc4>)
    1dc4:	3303      	adds	r3, #3
    1dc6:	1a9b      	subs	r3, r3, r2
    1dc8:	089b      	lsrs	r3, r3, #2
    1dca:	3301      	adds	r3, #1
    1dcc:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1dce:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1dd0:	4823      	ldr	r0, [pc, #140]	; (1e60 <Reset_Handler+0xbc>)
    1dd2:	4924      	ldr	r1, [pc, #144]	; (1e64 <Reset_Handler+0xc0>)
    1dd4:	588c      	ldr	r4, [r1, r2]
    1dd6:	5084      	str	r4, [r0, r2]
    1dd8:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1dda:	429a      	cmp	r2, r3
    1ddc:	d1fa      	bne.n	1dd4 <Reset_Handler+0x30>
    1dde:	e7ea      	b.n	1db6 <Reset_Handler+0x12>
    1de0:	4a25      	ldr	r2, [pc, #148]	; (1e78 <Reset_Handler+0xd4>)
    1de2:	4b22      	ldr	r3, [pc, #136]	; (1e6c <Reset_Handler+0xc8>)
    1de4:	3303      	adds	r3, #3
    1de6:	1a9b      	subs	r3, r3, r2
    1de8:	089b      	lsrs	r3, r3, #2
    1dea:	3301      	adds	r3, #1
    1dec:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1dee:	2200      	movs	r2, #0
                *pDest++ = 0;
    1df0:	481f      	ldr	r0, [pc, #124]	; (1e70 <Reset_Handler+0xcc>)
    1df2:	2100      	movs	r1, #0
    1df4:	1814      	adds	r4, r2, r0
    1df6:	6021      	str	r1, [r4, #0]
    1df8:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1dfa:	429a      	cmp	r2, r3
    1dfc:	d1fa      	bne.n	1df4 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1dfe:	4a1f      	ldr	r2, [pc, #124]	; (1e7c <Reset_Handler+0xd8>)
    1e00:	21ff      	movs	r1, #255	; 0xff
    1e02:	4b1f      	ldr	r3, [pc, #124]	; (1e80 <Reset_Handler+0xdc>)
    1e04:	438b      	bics	r3, r1
    1e06:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1e08:	39fd      	subs	r1, #253	; 0xfd
    1e0a:	2390      	movs	r3, #144	; 0x90
    1e0c:	005b      	lsls	r3, r3, #1
    1e0e:	4a1d      	ldr	r2, [pc, #116]	; (1e84 <Reset_Handler+0xe0>)
    1e10:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1e12:	481d      	ldr	r0, [pc, #116]	; (1e88 <Reset_Handler+0xe4>)
    1e14:	78c3      	ldrb	r3, [r0, #3]
    1e16:	2403      	movs	r4, #3
    1e18:	43a3      	bics	r3, r4
    1e1a:	2202      	movs	r2, #2
    1e1c:	4313      	orrs	r3, r2
    1e1e:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1e20:	78c3      	ldrb	r3, [r0, #3]
    1e22:	260c      	movs	r6, #12
    1e24:	43b3      	bics	r3, r6
    1e26:	2108      	movs	r1, #8
    1e28:	430b      	orrs	r3, r1
    1e2a:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    1e2c:	4b17      	ldr	r3, [pc, #92]	; (1e8c <Reset_Handler+0xe8>)
    1e2e:	7b98      	ldrb	r0, [r3, #14]
    1e30:	2530      	movs	r5, #48	; 0x30
    1e32:	43a8      	bics	r0, r5
    1e34:	0005      	movs	r5, r0
    1e36:	2020      	movs	r0, #32
    1e38:	4328      	orrs	r0, r5
    1e3a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1e3c:	7b98      	ldrb	r0, [r3, #14]
    1e3e:	43b0      	bics	r0, r6
    1e40:	4301      	orrs	r1, r0
    1e42:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1e44:	7b99      	ldrb	r1, [r3, #14]
    1e46:	43a1      	bics	r1, r4
    1e48:	430a      	orrs	r2, r1
    1e4a:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1e4c:	4a10      	ldr	r2, [pc, #64]	; (1e90 <Reset_Handler+0xec>)
    1e4e:	6851      	ldr	r1, [r2, #4]
    1e50:	2380      	movs	r3, #128	; 0x80
    1e52:	430b      	orrs	r3, r1
    1e54:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    1e56:	4b0f      	ldr	r3, [pc, #60]	; (1e94 <Reset_Handler+0xf0>)
    1e58:	4798      	blx	r3

        /* Branch to main function */
        main();
    1e5a:	4b0f      	ldr	r3, [pc, #60]	; (1e98 <Reset_Handler+0xf4>)
    1e5c:	4798      	blx	r3
    1e5e:	e7fe      	b.n	1e5e <Reset_Handler+0xba>
    1e60:	20000000 	.word	0x20000000
    1e64:	00002304 	.word	0x00002304
    1e68:	20000010 	.word	0x20000010
    1e6c:	200000e0 	.word	0x200000e0
    1e70:	20000010 	.word	0x20000010
    1e74:	20000004 	.word	0x20000004
    1e78:	20000014 	.word	0x20000014
    1e7c:	e000ed00 	.word	0xe000ed00
    1e80:	00000000 	.word	0x00000000
    1e84:	41007000 	.word	0x41007000
    1e88:	41005000 	.word	0x41005000
    1e8c:	41004800 	.word	0x41004800
    1e90:	41004000 	.word	0x41004000
    1e94:	00002141 	.word	0x00002141
    1e98:	00001e9d 	.word	0x00001e9d

00001e9c <main>:
	at25dfx_chip_config.cs_pin = AT25DFX_CS;
	at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at25dfx_chip_config);
}

int main (void)
{
    1e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e9e:	464f      	mov	r7, r9
    1ea0:	4646      	mov	r6, r8
    1ea2:	b4c0      	push	{r6, r7}
    1ea4:	b091      	sub	sp, #68	; 0x44
	system_init();
    1ea6:	4b47      	ldr	r3, [pc, #284]	; (1fc4 <main+0x128>)
    1ea8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    1eaa:	ac02      	add	r4, sp, #8
    1eac:	2501      	movs	r5, #1
    1eae:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1eb0:	2300      	movs	r3, #0
    1eb2:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1eb4:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1eb6:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    1eb8:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    1eba:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    1ebc:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    1ebe:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    1ec0:	2224      	movs	r2, #36	; 0x24
    1ec2:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1ec4:	3a18      	subs	r2, #24
    1ec6:	2100      	movs	r1, #0
    1ec8:	a808      	add	r0, sp, #32
    1eca:	4b3f      	ldr	r3, [pc, #252]	; (1fc8 <main+0x12c>)
    1ecc:	4798      	blx	r3
static void at25dfx_init(void)
{
	struct at25dfx_chip_config at25dfx_chip_config;
	struct spi_config at25dfx_spi_config;
	at25dfx_spi_get_config_defaults(&at25dfx_spi_config);
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
    1ece:	4b3f      	ldr	r3, [pc, #252]	; (1fcc <main+0x130>)
    1ed0:	61a3      	str	r3, [r4, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
    1ed2:	2380      	movs	r3, #128	; 0x80
    1ed4:	025b      	lsls	r3, r3, #9
    1ed6:	60e3      	str	r3, [r4, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
    1ed8:	4b3d      	ldr	r3, [pc, #244]	; (1fd0 <main+0x134>)
    1eda:	62a3      	str	r3, [r4, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
    1edc:	4b3d      	ldr	r3, [pc, #244]	; (1fd4 <main+0x138>)
    1ede:	62e3      	str	r3, [r4, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
    1ee0:	4b3d      	ldr	r3, [pc, #244]	; (1fd8 <main+0x13c>)
    1ee2:	6323      	str	r3, [r4, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
    1ee4:	4b3d      	ldr	r3, [pc, #244]	; (1fdc <main+0x140>)
    1ee6:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    1ee8:	4e3d      	ldr	r6, [pc, #244]	; (1fe0 <main+0x144>)
    1eea:	0022      	movs	r2, r4
    1eec:	493d      	ldr	r1, [pc, #244]	; (1fe4 <main+0x148>)
    1eee:	0030      	movs	r0, r6
    1ef0:	4b3d      	ldr	r3, [pc, #244]	; (1fe8 <main+0x14c>)
    1ef2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1ef4:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1ef6:	0020      	movs	r0, r4
    1ef8:	4b3c      	ldr	r3, [pc, #240]	; (1fec <main+0x150>)
    1efa:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1efc:	231f      	movs	r3, #31
    1efe:	4018      	ands	r0, r3
    1f00:	4085      	lsls	r5, r0
    1f02:	4b3b      	ldr	r3, [pc, #236]	; (1ff0 <main+0x154>)
    1f04:	601d      	str	r5, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1f06:	6833      	ldr	r3, [r6, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    1f08:	69da      	ldr	r2, [r3, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    1f0a:	2a00      	cmp	r2, #0
    1f0c:	d1fc      	bne.n	1f08 <main+0x6c>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1f0e:	6822      	ldr	r2, [r4, #0]
    1f10:	2302      	movs	r3, #2
    1f12:	4313      	orrs	r3, r2
    1f14:	6023      	str	r3, [r4, #0]
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
	struct port_config port_config;

	module->type = config->type;
    1f16:	4c37      	ldr	r4, [pc, #220]	; (1ff4 <main+0x158>)
    1f18:	2304      	movs	r3, #4
    1f1a:	7123      	strb	r3, [r4, #4]
	module->cs_pin = config->cs_pin;
    1f1c:	3303      	adds	r3, #3
    1f1e:	7163      	strb	r3, [r4, #5]
	module->spi = spi_module;
    1f20:	4b2f      	ldr	r3, [pc, #188]	; (1fe0 <main+0x144>)
    1f22:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1f24:	a901      	add	r1, sp, #4
    1f26:	2301      	movs	r3, #1
    1f28:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    1f2a:	2200      	movs	r2, #0
    1f2c:	708a      	strb	r2, [r1, #2]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    1f2e:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    1f30:	2007      	movs	r0, #7
    1f32:	4b31      	ldr	r3, [pc, #196]	; (1ff8 <main+0x15c>)
    1f34:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    1f36:	7963      	ldrb	r3, [r4, #5]
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
    1f38:	095a      	lsrs	r2, r3, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1f3a:	09d8      	lsrs	r0, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1f3c:	2100      	movs	r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1f3e:	2800      	cmp	r0, #0
    1f40:	d102      	bne.n	1f48 <main+0xac>
		return &(ports[port_index]->Group[group_index]);
    1f42:	01d2      	lsls	r2, r2, #7
    1f44:	492d      	ldr	r1, [pc, #180]	; (1ffc <main+0x160>)
    1f46:	1851      	adds	r1, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1f48:	221f      	movs	r2, #31
    1f4a:	4013      	ands	r3, r2
    1f4c:	3a1e      	subs	r2, #30
    1f4e:	409a      	lsls	r2, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1f50:	618a      	str	r2, [r1, #24]
int main (void)
{
	system_init();
	at25dfx_init();
	/* Insert application code here, after the board has been initialized. */
	at25dfx_chip_wake(&at25dfx_chip);
    1f52:	4c28      	ldr	r4, [pc, #160]	; (1ff4 <main+0x158>)
    1f54:	0020      	movs	r0, r4
    1f56:	4b2a      	ldr	r3, [pc, #168]	; (2000 <STACK_SIZE>)
    1f58:	4798      	blx	r3
	
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    1f5a:	0020      	movs	r0, r4
    1f5c:	4b29      	ldr	r3, [pc, #164]	; (2004 <STACK_SIZE+0x4>)
    1f5e:	4798      	blx	r3
		// Handle missing or non-responsive device
	}
	at25dfx_chip_read_buffer(&at25dfx_chip, 0x0000, read_buffer, AT25DFX_BUFFER_SIZE);
    1f60:	4f29      	ldr	r7, [pc, #164]	; (2008 <STACK_SIZE+0x8>)
    1f62:	230a      	movs	r3, #10
    1f64:	003a      	movs	r2, r7
    1f66:	2100      	movs	r1, #0
    1f68:	0020      	movs	r0, r4
    1f6a:	4d28      	ldr	r5, [pc, #160]	; (200c <STACK_SIZE+0xc>)
    1f6c:	46a9      	mov	r9, r5
    1f6e:	47a8      	blx	r5
	at25dfx_chip_set_sector_protect(&at25dfx_chip, 0x10000, false);
    1f70:	2580      	movs	r5, #128	; 0x80
    1f72:	026d      	lsls	r5, r5, #9
    1f74:	2200      	movs	r2, #0
    1f76:	0029      	movs	r1, r5
    1f78:	0020      	movs	r0, r4
    1f7a:	4b25      	ldr	r3, [pc, #148]	; (2010 <STACK_SIZE+0x10>)
    1f7c:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, 0x10000, AT25DFX_BLOCK_SIZE_4KB);
    1f7e:	2200      	movs	r2, #0
    1f80:	0029      	movs	r1, r5
    1f82:	0020      	movs	r0, r4
    1f84:	4b23      	ldr	r3, [pc, #140]	; (2014 <STACK_SIZE+0x14>)
    1f86:	4798      	blx	r3
	at25dfx_chip_write_buffer(&at25dfx_chip, 0x10000, write_buffer, AT25DFX_BUFFER_SIZE);
    1f88:	230a      	movs	r3, #10
    1f8a:	4a23      	ldr	r2, [pc, #140]	; (2018 <STACK_SIZE+0x18>)
    1f8c:	0029      	movs	r1, r5
    1f8e:	0020      	movs	r0, r4
    1f90:	4e22      	ldr	r6, [pc, #136]	; (201c <STACK_SIZE+0x1c>)
    1f92:	47b0      	blx	r6
	at25dfx_chip_read_buffer(&at25dfx_chip, 0x10000, read_buffer, AT25DFX_BUFFER_SIZE);
    1f94:	230a      	movs	r3, #10
    1f96:	003a      	movs	r2, r7
    1f98:	0029      	movs	r1, r5
    1f9a:	0020      	movs	r0, r4
    1f9c:	47c8      	blx	r9
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip, true);
    1f9e:	2101      	movs	r1, #1
    1fa0:	0020      	movs	r0, r4
    1fa2:	4b1f      	ldr	r3, [pc, #124]	; (2020 <STACK_SIZE+0x20>)
    1fa4:	4798      	blx	r3
	at25dfx_chip_sleep(&at25dfx_chip);
    1fa6:	0020      	movs	r0, r4
    1fa8:	4b1e      	ldr	r3, [pc, #120]	; (2024 <STACK_SIZE+0x24>)
    1faa:	4798      	blx	r3
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    1fac:	4913      	ldr	r1, [pc, #76]	; (1ffc <main+0x160>)
    1fae:	0008      	movs	r0, r1
    1fb0:	3080      	adds	r0, #128	; 0x80
	/* This skeleton code simply sets the LED to the state of the button. */
	while (1) {
		/* Is button pressed? */
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
    1fb2:	2380      	movs	r3, #128	; 0x80
    1fb4:	041b      	lsls	r3, r3, #16
    1fb6:	6a02      	ldr	r2, [r0, #32]
    1fb8:	421a      	tst	r2, r3
    1fba:	d101      	bne.n	1fc0 <main+0x124>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1fbc:	614b      	str	r3, [r1, #20]
    1fbe:	e7fa      	b.n	1fb6 <main+0x11a>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1fc0:	618b      	str	r3, [r1, #24]
    1fc2:	e7f8      	b.n	1fb6 <main+0x11a>
    1fc4:	00001d75 	.word	0x00001d75
    1fc8:	0000219f 	.word	0x0000219f
    1fcc:	0001d4c0 	.word	0x0001d4c0
    1fd0:	00100002 	.word	0x00100002
    1fd4:	00110002 	.word	0x00110002
    1fd8:	00120002 	.word	0x00120002
    1fdc:	00130002 	.word	0x00130002
    1fe0:	200000a4 	.word	0x200000a4
    1fe4:	42000c00 	.word	0x42000c00
    1fe8:	00000f55 	.word	0x00000f55
    1fec:	00001489 	.word	0x00001489
    1ff0:	e000e100 	.word	0xe000e100
    1ff4:	2000009c 	.word	0x2000009c
    1ff8:	000015bd 	.word	0x000015bd
    1ffc:	41004400 	.word	0x41004400
    2000:	00000c05 	.word	0x00000c05
    2004:	00000115 	.word	0x00000115
    2008:	20000068 	.word	0x20000068
    200c:	00000221 	.word	0x00000221
    2010:	00000a49 	.word	0x00000a49
    2014:	00000741 	.word	0x00000741
    2018:	20000004 	.word	0x20000004
    201c:	00000315 	.word	0x00000315
    2020:	00000959 	.word	0x00000959
    2024:	00000b79 	.word	0x00000b79

00002028 <__aeabi_uidiv>:
    2028:	2200      	movs	r2, #0
    202a:	0843      	lsrs	r3, r0, #1
    202c:	428b      	cmp	r3, r1
    202e:	d374      	bcc.n	211a <__aeabi_uidiv+0xf2>
    2030:	0903      	lsrs	r3, r0, #4
    2032:	428b      	cmp	r3, r1
    2034:	d35f      	bcc.n	20f6 <__aeabi_uidiv+0xce>
    2036:	0a03      	lsrs	r3, r0, #8
    2038:	428b      	cmp	r3, r1
    203a:	d344      	bcc.n	20c6 <__aeabi_uidiv+0x9e>
    203c:	0b03      	lsrs	r3, r0, #12
    203e:	428b      	cmp	r3, r1
    2040:	d328      	bcc.n	2094 <__aeabi_uidiv+0x6c>
    2042:	0c03      	lsrs	r3, r0, #16
    2044:	428b      	cmp	r3, r1
    2046:	d30d      	bcc.n	2064 <__aeabi_uidiv+0x3c>
    2048:	22ff      	movs	r2, #255	; 0xff
    204a:	0209      	lsls	r1, r1, #8
    204c:	ba12      	rev	r2, r2
    204e:	0c03      	lsrs	r3, r0, #16
    2050:	428b      	cmp	r3, r1
    2052:	d302      	bcc.n	205a <__aeabi_uidiv+0x32>
    2054:	1212      	asrs	r2, r2, #8
    2056:	0209      	lsls	r1, r1, #8
    2058:	d065      	beq.n	2126 <__aeabi_uidiv+0xfe>
    205a:	0b03      	lsrs	r3, r0, #12
    205c:	428b      	cmp	r3, r1
    205e:	d319      	bcc.n	2094 <__aeabi_uidiv+0x6c>
    2060:	e000      	b.n	2064 <__aeabi_uidiv+0x3c>
    2062:	0a09      	lsrs	r1, r1, #8
    2064:	0bc3      	lsrs	r3, r0, #15
    2066:	428b      	cmp	r3, r1
    2068:	d301      	bcc.n	206e <__aeabi_uidiv+0x46>
    206a:	03cb      	lsls	r3, r1, #15
    206c:	1ac0      	subs	r0, r0, r3
    206e:	4152      	adcs	r2, r2
    2070:	0b83      	lsrs	r3, r0, #14
    2072:	428b      	cmp	r3, r1
    2074:	d301      	bcc.n	207a <__aeabi_uidiv+0x52>
    2076:	038b      	lsls	r3, r1, #14
    2078:	1ac0      	subs	r0, r0, r3
    207a:	4152      	adcs	r2, r2
    207c:	0b43      	lsrs	r3, r0, #13
    207e:	428b      	cmp	r3, r1
    2080:	d301      	bcc.n	2086 <__aeabi_uidiv+0x5e>
    2082:	034b      	lsls	r3, r1, #13
    2084:	1ac0      	subs	r0, r0, r3
    2086:	4152      	adcs	r2, r2
    2088:	0b03      	lsrs	r3, r0, #12
    208a:	428b      	cmp	r3, r1
    208c:	d301      	bcc.n	2092 <__aeabi_uidiv+0x6a>
    208e:	030b      	lsls	r3, r1, #12
    2090:	1ac0      	subs	r0, r0, r3
    2092:	4152      	adcs	r2, r2
    2094:	0ac3      	lsrs	r3, r0, #11
    2096:	428b      	cmp	r3, r1
    2098:	d301      	bcc.n	209e <__aeabi_uidiv+0x76>
    209a:	02cb      	lsls	r3, r1, #11
    209c:	1ac0      	subs	r0, r0, r3
    209e:	4152      	adcs	r2, r2
    20a0:	0a83      	lsrs	r3, r0, #10
    20a2:	428b      	cmp	r3, r1
    20a4:	d301      	bcc.n	20aa <__aeabi_uidiv+0x82>
    20a6:	028b      	lsls	r3, r1, #10
    20a8:	1ac0      	subs	r0, r0, r3
    20aa:	4152      	adcs	r2, r2
    20ac:	0a43      	lsrs	r3, r0, #9
    20ae:	428b      	cmp	r3, r1
    20b0:	d301      	bcc.n	20b6 <__aeabi_uidiv+0x8e>
    20b2:	024b      	lsls	r3, r1, #9
    20b4:	1ac0      	subs	r0, r0, r3
    20b6:	4152      	adcs	r2, r2
    20b8:	0a03      	lsrs	r3, r0, #8
    20ba:	428b      	cmp	r3, r1
    20bc:	d301      	bcc.n	20c2 <__aeabi_uidiv+0x9a>
    20be:	020b      	lsls	r3, r1, #8
    20c0:	1ac0      	subs	r0, r0, r3
    20c2:	4152      	adcs	r2, r2
    20c4:	d2cd      	bcs.n	2062 <__aeabi_uidiv+0x3a>
    20c6:	09c3      	lsrs	r3, r0, #7
    20c8:	428b      	cmp	r3, r1
    20ca:	d301      	bcc.n	20d0 <__aeabi_uidiv+0xa8>
    20cc:	01cb      	lsls	r3, r1, #7
    20ce:	1ac0      	subs	r0, r0, r3
    20d0:	4152      	adcs	r2, r2
    20d2:	0983      	lsrs	r3, r0, #6
    20d4:	428b      	cmp	r3, r1
    20d6:	d301      	bcc.n	20dc <__aeabi_uidiv+0xb4>
    20d8:	018b      	lsls	r3, r1, #6
    20da:	1ac0      	subs	r0, r0, r3
    20dc:	4152      	adcs	r2, r2
    20de:	0943      	lsrs	r3, r0, #5
    20e0:	428b      	cmp	r3, r1
    20e2:	d301      	bcc.n	20e8 <__aeabi_uidiv+0xc0>
    20e4:	014b      	lsls	r3, r1, #5
    20e6:	1ac0      	subs	r0, r0, r3
    20e8:	4152      	adcs	r2, r2
    20ea:	0903      	lsrs	r3, r0, #4
    20ec:	428b      	cmp	r3, r1
    20ee:	d301      	bcc.n	20f4 <__aeabi_uidiv+0xcc>
    20f0:	010b      	lsls	r3, r1, #4
    20f2:	1ac0      	subs	r0, r0, r3
    20f4:	4152      	adcs	r2, r2
    20f6:	08c3      	lsrs	r3, r0, #3
    20f8:	428b      	cmp	r3, r1
    20fa:	d301      	bcc.n	2100 <__aeabi_uidiv+0xd8>
    20fc:	00cb      	lsls	r3, r1, #3
    20fe:	1ac0      	subs	r0, r0, r3
    2100:	4152      	adcs	r2, r2
    2102:	0883      	lsrs	r3, r0, #2
    2104:	428b      	cmp	r3, r1
    2106:	d301      	bcc.n	210c <__aeabi_uidiv+0xe4>
    2108:	008b      	lsls	r3, r1, #2
    210a:	1ac0      	subs	r0, r0, r3
    210c:	4152      	adcs	r2, r2
    210e:	0843      	lsrs	r3, r0, #1
    2110:	428b      	cmp	r3, r1
    2112:	d301      	bcc.n	2118 <__aeabi_uidiv+0xf0>
    2114:	004b      	lsls	r3, r1, #1
    2116:	1ac0      	subs	r0, r0, r3
    2118:	4152      	adcs	r2, r2
    211a:	1a41      	subs	r1, r0, r1
    211c:	d200      	bcs.n	2120 <__aeabi_uidiv+0xf8>
    211e:	4601      	mov	r1, r0
    2120:	4152      	adcs	r2, r2
    2122:	4610      	mov	r0, r2
    2124:	4770      	bx	lr
    2126:	e7ff      	b.n	2128 <__aeabi_uidiv+0x100>
    2128:	b501      	push	{r0, lr}
    212a:	2000      	movs	r0, #0
    212c:	f000 f806 	bl	213c <__aeabi_idiv0>
    2130:	bd02      	pop	{r1, pc}
    2132:	46c0      	nop			; (mov r8, r8)

00002134 <__aeabi_uidivmod>:
    2134:	2900      	cmp	r1, #0
    2136:	d0f7      	beq.n	2128 <__aeabi_uidiv+0x100>
    2138:	e776      	b.n	2028 <__aeabi_uidiv>
    213a:	4770      	bx	lr

0000213c <__aeabi_idiv0>:
    213c:	4770      	bx	lr
    213e:	46c0      	nop			; (mov r8, r8)

00002140 <__libc_init_array>:
    2140:	4b0e      	ldr	r3, [pc, #56]	; (217c <__libc_init_array+0x3c>)
    2142:	b570      	push	{r4, r5, r6, lr}
    2144:	2500      	movs	r5, #0
    2146:	001e      	movs	r6, r3
    2148:	4c0d      	ldr	r4, [pc, #52]	; (2180 <__libc_init_array+0x40>)
    214a:	1ae4      	subs	r4, r4, r3
    214c:	10a4      	asrs	r4, r4, #2
    214e:	42a5      	cmp	r5, r4
    2150:	d004      	beq.n	215c <__libc_init_array+0x1c>
    2152:	00ab      	lsls	r3, r5, #2
    2154:	58f3      	ldr	r3, [r6, r3]
    2156:	4798      	blx	r3
    2158:	3501      	adds	r5, #1
    215a:	e7f8      	b.n	214e <__libc_init_array+0xe>
    215c:	f000 f8c2 	bl	22e4 <_init>
    2160:	4b08      	ldr	r3, [pc, #32]	; (2184 <__libc_init_array+0x44>)
    2162:	2500      	movs	r5, #0
    2164:	001e      	movs	r6, r3
    2166:	4c08      	ldr	r4, [pc, #32]	; (2188 <__libc_init_array+0x48>)
    2168:	1ae4      	subs	r4, r4, r3
    216a:	10a4      	asrs	r4, r4, #2
    216c:	42a5      	cmp	r5, r4
    216e:	d004      	beq.n	217a <__libc_init_array+0x3a>
    2170:	00ab      	lsls	r3, r5, #2
    2172:	58f3      	ldr	r3, [r6, r3]
    2174:	4798      	blx	r3
    2176:	3501      	adds	r5, #1
    2178:	e7f8      	b.n	216c <__libc_init_array+0x2c>
    217a:	bd70      	pop	{r4, r5, r6, pc}
    217c:	000022f0 	.word	0x000022f0
    2180:	000022f0 	.word	0x000022f0
    2184:	000022f0 	.word	0x000022f0
    2188:	000022f4 	.word	0x000022f4

0000218c <memcpy>:
    218c:	2300      	movs	r3, #0
    218e:	b510      	push	{r4, lr}
    2190:	429a      	cmp	r2, r3
    2192:	d003      	beq.n	219c <memcpy+0x10>
    2194:	5ccc      	ldrb	r4, [r1, r3]
    2196:	54c4      	strb	r4, [r0, r3]
    2198:	3301      	adds	r3, #1
    219a:	e7f9      	b.n	2190 <memcpy+0x4>
    219c:	bd10      	pop	{r4, pc}

0000219e <memset>:
    219e:	0003      	movs	r3, r0
    21a0:	1882      	adds	r2, r0, r2
    21a2:	4293      	cmp	r3, r2
    21a4:	d002      	beq.n	21ac <memset+0xe>
    21a6:	7019      	strb	r1, [r3, #0]
    21a8:	3301      	adds	r3, #1
    21aa:	e7fa      	b.n	21a2 <memset+0x4>
    21ac:	4770      	bx	lr
    21ae:	0000      	movs	r0, r0
    21b0:	000001c6 	.word	0x000001c6
    21b4:	0000019e 	.word	0x0000019e
    21b8:	000001a2 	.word	0x000001a2
    21bc:	000001a6 	.word	0x000001a6
    21c0:	000001aa 	.word	0x000001aa
    21c4:	000001ae 	.word	0x000001ae
    21c8:	000001b2 	.word	0x000001b2
    21cc:	000001b6 	.word	0x000001b6
    21d0:	000001ba 	.word	0x000001ba
    21d4:	000001be 	.word	0x000001be
    21d8:	00000264 	.word	0x00000264
    21dc:	0000023c 	.word	0x0000023c
    21e0:	00000242 	.word	0x00000242
    21e4:	00000248 	.word	0x00000248
    21e8:	00000248 	.word	0x00000248
    21ec:	0000024e 	.word	0x0000024e
    21f0:	0000024e 	.word	0x0000024e
    21f4:	0000024e 	.word	0x0000024e
    21f8:	00000254 	.word	0x00000254
    21fc:	0000025a 	.word	0x0000025a
    2200:	00000100 	.word	0x00000100
    2204:	00000362 	.word	0x00000362
    2208:	0000033a 	.word	0x0000033a
    220c:	00000340 	.word	0x00000340
    2210:	00000346 	.word	0x00000346
    2214:	00000346 	.word	0x00000346
    2218:	0000034c 	.word	0x0000034c
    221c:	0000034c 	.word	0x0000034c
    2220:	0000034c 	.word	0x0000034c
    2224:	00000352 	.word	0x00000352
    2228:	00000358 	.word	0x00000358
    222c:	0000077e 	.word	0x0000077e
    2230:	0000075a 	.word	0x0000075a
    2234:	00000760 	.word	0x00000760
    2238:	00000766 	.word	0x00000766
    223c:	00000766 	.word	0x00000766
    2240:	0000076c 	.word	0x0000076c
    2244:	0000076c 	.word	0x0000076c
    2248:	0000076c 	.word	0x0000076c
    224c:	00000772 	.word	0x00000772
    2250:	00000778 	.word	0x00000778
    2254:	00000a84 	.word	0x00000a84
    2258:	00000a60 	.word	0x00000a60
    225c:	00000a66 	.word	0x00000a66
    2260:	00000a6c 	.word	0x00000a6c
    2264:	00000a6c 	.word	0x00000a6c
    2268:	00000a72 	.word	0x00000a72
    226c:	00000a72 	.word	0x00000a72
    2270:	00000a72 	.word	0x00000a72
    2274:	00000a78 	.word	0x00000a78
    2278:	00000a7e 	.word	0x00000a7e
    227c:	42000800 	.word	0x42000800
    2280:	42000c00 	.word	0x42000c00
    2284:	42001000 	.word	0x42001000
    2288:	42001400 	.word	0x42001400
    228c:	42001800 	.word	0x42001800
    2290:	42001c00 	.word	0x42001c00
    2294:	0c0b0a09 	.word	0x0c0b0a09
    2298:	00000e0d 	.word	0x00000e0d
    229c:	000015f2 	.word	0x000015f2
    22a0:	000015ee 	.word	0x000015ee
    22a4:	000015ee 	.word	0x000015ee
    22a8:	0000164c 	.word	0x0000164c
    22ac:	0000164c 	.word	0x0000164c
    22b0:	00001606 	.word	0x00001606
    22b4:	000015f8 	.word	0x000015f8
    22b8:	0000160c 	.word	0x0000160c
    22bc:	0000163a 	.word	0x0000163a
    22c0:	00001834 	.word	0x00001834
    22c4:	00001814 	.word	0x00001814
    22c8:	00001814 	.word	0x00001814
    22cc:	000018a0 	.word	0x000018a0
    22d0:	00001826 	.word	0x00001826
    22d4:	00001842 	.word	0x00001842
    22d8:	00001818 	.word	0x00001818
    22dc:	00001850 	.word	0x00001850
    22e0:	00001890 	.word	0x00001890

000022e4 <_init>:
    22e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22e6:	46c0      	nop			; (mov r8, r8)
    22e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    22ea:	bc08      	pop	{r3}
    22ec:	469e      	mov	lr, r3
    22ee:	4770      	bx	lr

000022f0 <__init_array_start>:
    22f0:	000000dd 	.word	0x000000dd

000022f4 <_fini>:
    22f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22f6:	46c0      	nop			; (mov r8, r8)
    22f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    22fa:	bc08      	pop	{r3}
    22fc:	469e      	mov	lr, r3
    22fe:	4770      	bx	lr

00002300 <__fini_array_start>:
    2300:	000000b5 	.word	0x000000b5
