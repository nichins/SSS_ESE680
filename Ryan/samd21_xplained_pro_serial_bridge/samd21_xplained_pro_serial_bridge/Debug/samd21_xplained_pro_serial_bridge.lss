
samd21_xplained_pro_serial_bridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e148  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000e148  0000e148  0001e148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008ac  20000000  0000e150  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000005b4  200008ac  0000e9fc  000208ac  2**2
                  ALLOC
  4 .stack        00002000  20000e60  0000efb0  000208ac  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000208ac  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000208d4  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002a1fa  00000000  00000000  0002092d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003d91  00000000  00000000  0004ab27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004879  00000000  00000000  0004e8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d50  00000000  00000000  00053131  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b80  00000000  00000000  00053e81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001e472  00000000  00000000  00054a01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000174fb  00000000  00000000  00072e73  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00087de8  00000000  00000000  0008a36e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003ea4  00000000  00000000  00112158  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002e60 	.word	0x20002e60
       4:	000062a1 	.word	0x000062a1
       8:	00006325 	.word	0x00006325
       c:	0000626d 	.word	0x0000626d
	...
      2c:	00006325 	.word	0x00006325
	...
      38:	00006325 	.word	0x00006325
      3c:	00006325 	.word	0x00006325
      40:	00006325 	.word	0x00006325
      44:	00006325 	.word	0x00006325
      48:	00006325 	.word	0x00006325
      4c:	00006325 	.word	0x00006325
      50:	000050e9 	.word	0x000050e9
      54:	00006325 	.word	0x00006325
      58:	00006325 	.word	0x00006325
      5c:	00006325 	.word	0x00006325
      60:	00006325 	.word	0x00006325
      64:	00004f8d 	.word	0x00004f8d
      68:	00004fa5 	.word	0x00004fa5
      6c:	00004fbd 	.word	0x00004fbd
      70:	00004fd5 	.word	0x00004fd5
      74:	00004fed 	.word	0x00004fed
      78:	00005005 	.word	0x00005005
      7c:	00004125 	.word	0x00004125
      80:	00004139 	.word	0x00004139
      84:	0000414d 	.word	0x0000414d
      88:	000041dd 	.word	0x000041dd
      8c:	000041f1 	.word	0x000041f1
      90:	00004205 	.word	0x00004205
      94:	00004219 	.word	0x00004219
      98:	0000422d 	.word	0x0000422d
      9c:	00006325 	.word	0x00006325
      a0:	00006325 	.word	0x00006325
      a4:	00006325 	.word	0x00006325
      a8:	00006325 	.word	0x00006325
      ac:	00006325 	.word	0x00006325

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	200008ac 	.word	0x200008ac
      d0:	00000000 	.word	0x00000000
      d4:	0000e150 	.word	0x0000e150

000000d8 <frame_dummy>:
      d8:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      da:	b510      	push	{r4, lr}
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4907      	ldr	r1, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4808      	ldr	r0, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d100      	bne.n	f2 <frame_dummy+0x1a>
      f0:	bd10      	pop	{r4, pc}
      f2:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f4:	2b00      	cmp	r3, #0
      f6:	d0fb      	beq.n	f0 <frame_dummy+0x18>
      f8:	4798      	blx	r3
      fa:	e7f9      	b.n	f0 <frame_dummy+0x18>
      fc:	00000000 	.word	0x00000000
     100:	200008b0 	.word	0x200008b0
     104:	0000e150 	.word	0x0000e150
     108:	0000e150 	.word	0x0000e150
     10c:	00000000 	.word	0x00000000

00000110 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     110:	b580      	push	{r7, lr}
     112:	b084      	sub	sp, #16
     114:	af00      	add	r7, sp, #0
     116:	0002      	movs	r2, r0
     118:	1dfb      	adds	r3, r7, #7
     11a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     11c:	230f      	movs	r3, #15
     11e:	18fb      	adds	r3, r7, r3
     120:	1dfa      	adds	r2, r7, #7
     122:	7812      	ldrb	r2, [r2, #0]
     124:	09d2      	lsrs	r2, r2, #7
     126:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     128:	230e      	movs	r3, #14
     12a:	18fb      	adds	r3, r7, r3
     12c:	1dfa      	adds	r2, r7, #7
     12e:	7812      	ldrb	r2, [r2, #0]
     130:	0952      	lsrs	r2, r2, #5
     132:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     134:	4b0d      	ldr	r3, [pc, #52]	; (16c <system_pinmux_get_group_from_gpio_pin+0x5c>)
     136:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     138:	230f      	movs	r3, #15
     13a:	18fb      	adds	r3, r7, r3
     13c:	781b      	ldrb	r3, [r3, #0]
     13e:	2b00      	cmp	r3, #0
     140:	d10f      	bne.n	162 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     142:	230f      	movs	r3, #15
     144:	18fb      	adds	r3, r7, r3
     146:	781b      	ldrb	r3, [r3, #0]
     148:	009b      	lsls	r3, r3, #2
     14a:	2210      	movs	r2, #16
     14c:	4694      	mov	ip, r2
     14e:	44bc      	add	ip, r7
     150:	4463      	add	r3, ip
     152:	3b08      	subs	r3, #8
     154:	681a      	ldr	r2, [r3, #0]
     156:	230e      	movs	r3, #14
     158:	18fb      	adds	r3, r7, r3
     15a:	781b      	ldrb	r3, [r3, #0]
     15c:	01db      	lsls	r3, r3, #7
     15e:	18d3      	adds	r3, r2, r3
     160:	e000      	b.n	164 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     162:	2300      	movs	r3, #0
	}
}
     164:	0018      	movs	r0, r3
     166:	46bd      	mov	sp, r7
     168:	b004      	add	sp, #16
     16a:	bd80      	pop	{r7, pc}
     16c:	41004400 	.word	0x41004400

00000170 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     170:	b580      	push	{r7, lr}
     172:	b082      	sub	sp, #8
     174:	af00      	add	r7, sp, #0
     176:	0002      	movs	r2, r0
     178:	1dfb      	adds	r3, r7, #7
     17a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <system_interrupt_enable+0x28>)
     17e:	1dfa      	adds	r2, r7, #7
     180:	7812      	ldrb	r2, [r2, #0]
     182:	0011      	movs	r1, r2
     184:	221f      	movs	r2, #31
     186:	400a      	ands	r2, r1
     188:	2101      	movs	r1, #1
     18a:	4091      	lsls	r1, r2
     18c:	000a      	movs	r2, r1
     18e:	601a      	str	r2, [r3, #0]
}
     190:	46c0      	nop			; (mov r8, r8)
     192:	46bd      	mov	sp, r7
     194:	b002      	add	sp, #8
     196:	bd80      	pop	{r7, pc}
     198:	e000e100 	.word	0xe000e100

0000019c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     19c:	b580      	push	{r7, lr}
     19e:	b082      	sub	sp, #8
     1a0:	af00      	add	r7, sp, #0
     1a2:	0002      	movs	r2, r0
     1a4:	1dfb      	adds	r3, r7, #7
     1a6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1a8:	4a07      	ldr	r2, [pc, #28]	; (1c8 <system_interrupt_disable+0x2c>)
     1aa:	1dfb      	adds	r3, r7, #7
     1ac:	781b      	ldrb	r3, [r3, #0]
     1ae:	0019      	movs	r1, r3
     1b0:	231f      	movs	r3, #31
     1b2:	400b      	ands	r3, r1
     1b4:	2101      	movs	r1, #1
     1b6:	4099      	lsls	r1, r3
     1b8:	000b      	movs	r3, r1
     1ba:	0019      	movs	r1, r3
     1bc:	2380      	movs	r3, #128	; 0x80
     1be:	50d1      	str	r1, [r2, r3]
}
     1c0:	46c0      	nop			; (mov r8, r8)
     1c2:	46bd      	mov	sp, r7
     1c4:	b002      	add	sp, #8
     1c6:	bd80      	pop	{r7, pc}
     1c8:	e000e100 	.word	0xe000e100

000001cc <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
     1cc:	b580      	push	{r7, lr}
     1ce:	b082      	sub	sp, #8
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	2200      	movs	r2, #0
     1d8:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
     1da:	687b      	ldr	r3, [r7, #4]
     1dc:	2200      	movs	r2, #0
     1de:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     1e0:	687b      	ldr	r3, [r7, #4]
     1e2:	2201      	movs	r2, #1
     1e4:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
     1e6:	687b      	ldr	r3, [r7, #4]
     1e8:	2201      	movs	r2, #1
     1ea:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
     1ec:	687b      	ldr	r3, [r7, #4]
     1ee:	2200      	movs	r2, #0
     1f0:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     1f2:	687b      	ldr	r3, [r7, #4]
     1f4:	2202      	movs	r2, #2
     1f6:	72da      	strb	r2, [r3, #11]
}
     1f8:	46c0      	nop			; (mov r8, r8)
     1fa:	46bd      	mov	sp, r7
     1fc:	b002      	add	sp, #8
     1fe:	bd80      	pop	{r7, pc}

00000200 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     200:	b580      	push	{r7, lr}
     202:	b082      	sub	sp, #8
     204:	af00      	add	r7, sp, #0
     206:	0002      	movs	r2, r0
     208:	1dfb      	adds	r3, r7, #7
     20a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     20c:	1dfb      	adds	r3, r7, #7
     20e:	781b      	ldrb	r3, [r3, #0]
     210:	0018      	movs	r0, r3
     212:	4b03      	ldr	r3, [pc, #12]	; (220 <port_get_group_from_gpio_pin+0x20>)
     214:	4798      	blx	r3
     216:	0003      	movs	r3, r0
}
     218:	0018      	movs	r0, r3
     21a:	46bd      	mov	sp, r7
     21c:	b002      	add	sp, #8
     21e:	bd80      	pop	{r7, pc}
     220:	00000111 	.word	0x00000111

00000224 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
     224:	b580      	push	{r7, lr}
     226:	b084      	sub	sp, #16
     228:	af00      	add	r7, sp, #0
     22a:	0002      	movs	r2, r0
     22c:	1dfb      	adds	r3, r7, #7
     22e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     230:	1dfb      	adds	r3, r7, #7
     232:	781b      	ldrb	r3, [r3, #0]
     234:	0018      	movs	r0, r3
     236:	4b0b      	ldr	r3, [pc, #44]	; (264 <port_pin_get_input_level+0x40>)
     238:	4798      	blx	r3
     23a:	0003      	movs	r3, r0
     23c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     23e:	1dfb      	adds	r3, r7, #7
     240:	781b      	ldrb	r3, [r3, #0]
     242:	221f      	movs	r2, #31
     244:	4013      	ands	r3, r2
     246:	2201      	movs	r2, #1
     248:	409a      	lsls	r2, r3
     24a:	0013      	movs	r3, r2
     24c:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
     24e:	68fb      	ldr	r3, [r7, #12]
     250:	6a1b      	ldr	r3, [r3, #32]
     252:	68ba      	ldr	r2, [r7, #8]
     254:	4013      	ands	r3, r2
     256:	1e5a      	subs	r2, r3, #1
     258:	4193      	sbcs	r3, r2
     25a:	b2db      	uxtb	r3, r3
}
     25c:	0018      	movs	r0, r3
     25e:	46bd      	mov	sp, r7
     260:	b004      	add	sp, #16
     262:	bd80      	pop	{r7, pc}
     264:	00000201 	.word	0x00000201

00000268 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     268:	b580      	push	{r7, lr}
     26a:	b084      	sub	sp, #16
     26c:	af00      	add	r7, sp, #0
     26e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     270:	687b      	ldr	r3, [r7, #4]
     272:	681b      	ldr	r3, [r3, #0]
     274:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     276:	68fb      	ldr	r3, [r7, #12]
     278:	69db      	ldr	r3, [r3, #28]
     27a:	1e5a      	subs	r2, r3, #1
     27c:	4193      	sbcs	r3, r2
     27e:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     280:	0018      	movs	r0, r3
     282:	46bd      	mov	sp, r7
     284:	b004      	add	sp, #16
     286:	bd80      	pop	{r7, pc}

00000288 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     288:	b580      	push	{r7, lr}
     28a:	b082      	sub	sp, #8
     28c:	af00      	add	r7, sp, #0
     28e:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     290:	46c0      	nop			; (mov r8, r8)
     292:	687b      	ldr	r3, [r7, #4]
     294:	0018      	movs	r0, r3
     296:	4b04      	ldr	r3, [pc, #16]	; (2a8 <_usart_wait_for_sync+0x20>)
     298:	4798      	blx	r3
     29a:	1e03      	subs	r3, r0, #0
     29c:	d1f9      	bne.n	292 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     29e:	46c0      	nop			; (mov r8, r8)
     2a0:	46bd      	mov	sp, r7
     2a2:	b002      	add	sp, #8
     2a4:	bd80      	pop	{r7, pc}
     2a6:	46c0      	nop			; (mov r8, r8)
     2a8:	00000269 	.word	0x00000269

000002ac <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     2ac:	b580      	push	{r7, lr}
     2ae:	b082      	sub	sp, #8
     2b0:	af00      	add	r7, sp, #0
     2b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	2280      	movs	r2, #128	; 0x80
     2b8:	05d2      	lsls	r2, r2, #23
     2ba:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     2bc:	687b      	ldr	r3, [r7, #4]
     2be:	2200      	movs	r2, #0
     2c0:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     2c2:	687b      	ldr	r3, [r7, #4]
     2c4:	22ff      	movs	r2, #255	; 0xff
     2c6:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     2c8:	687b      	ldr	r3, [r7, #4]
     2ca:	2200      	movs	r2, #0
     2cc:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     2ce:	687b      	ldr	r3, [r7, #4]
     2d0:	2200      	movs	r2, #0
     2d2:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     2d4:	687b      	ldr	r3, [r7, #4]
     2d6:	2296      	movs	r2, #150	; 0x96
     2d8:	0192      	lsls	r2, r2, #6
     2da:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     2dc:	687b      	ldr	r3, [r7, #4]
     2de:	2224      	movs	r2, #36	; 0x24
     2e0:	2101      	movs	r1, #1
     2e2:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     2e4:	687b      	ldr	r3, [r7, #4]
     2e6:	2225      	movs	r2, #37	; 0x25
     2e8:	2101      	movs	r1, #1
     2ea:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     2ec:	687b      	ldr	r3, [r7, #4]
     2ee:	2226      	movs	r2, #38	; 0x26
     2f0:	2100      	movs	r1, #0
     2f2:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     2f4:	687b      	ldr	r3, [r7, #4]
     2f6:	2227      	movs	r2, #39	; 0x27
     2f8:	2100      	movs	r1, #0
     2fa:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	2200      	movs	r2, #0
     300:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     302:	687b      	ldr	r3, [r7, #4]
     304:	2288      	movs	r2, #136	; 0x88
     306:	0352      	lsls	r2, r2, #13
     308:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     30a:	687b      	ldr	r3, [r7, #4]
     30c:	222c      	movs	r2, #44	; 0x2c
     30e:	2100      	movs	r1, #0
     310:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     312:	687b      	ldr	r3, [r7, #4]
     314:	222d      	movs	r2, #45	; 0x2d
     316:	2100      	movs	r1, #0
     318:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     31a:	687b      	ldr	r3, [r7, #4]
     31c:	2200      	movs	r2, #0
     31e:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     320:	687b      	ldr	r3, [r7, #4]
     322:	2200      	movs	r2, #0
     324:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     326:	687b      	ldr	r3, [r7, #4]
     328:	2200      	movs	r2, #0
     32a:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     32c:	687b      	ldr	r3, [r7, #4]
     32e:	2200      	movs	r2, #0
     330:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     332:	687b      	ldr	r3, [r7, #4]
     334:	2200      	movs	r2, #0
     336:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     338:	687b      	ldr	r3, [r7, #4]
     33a:	2200      	movs	r2, #0
     33c:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     33e:	687b      	ldr	r3, [r7, #4]
     340:	2200      	movs	r2, #0
     342:	76da      	strb	r2, [r3, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
     344:	687b      	ldr	r3, [r7, #4]
     346:	2200      	movs	r2, #0
     348:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
     34a:	687b      	ldr	r3, [r7, #4]
     34c:	2200      	movs	r2, #0
     34e:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
     350:	687b      	ldr	r3, [r7, #4]
     352:	2200      	movs	r2, #0
     354:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                        = 19;
     356:	687b      	ldr	r3, [r7, #4]
     358:	2213      	movs	r2, #19
     35a:	769a      	strb	r2, [r3, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
     35c:	687b      	ldr	r3, [r7, #4]
     35e:	2200      	movs	r2, #0
     360:	775a      	strb	r2, [r3, #29]
#endif
}
     362:	46c0      	nop			; (mov r8, r8)
     364:	46bd      	mov	sp, r7
     366:	b002      	add	sp, #8
     368:	bd80      	pop	{r7, pc}
     36a:	46c0      	nop			; (mov r8, r8)

0000036c <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     36c:	b580      	push	{r7, lr}
     36e:	b084      	sub	sp, #16
     370:	af00      	add	r7, sp, #0
     372:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     374:	687b      	ldr	r3, [r7, #4]
     376:	681b      	ldr	r3, [r3, #0]
     378:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     37a:	687b      	ldr	r3, [r7, #4]
     37c:	681b      	ldr	r3, [r3, #0]
     37e:	0018      	movs	r0, r3
     380:	4b09      	ldr	r3, [pc, #36]	; (3a8 <usart_enable+0x3c>)
     382:	4798      	blx	r3
     384:	0003      	movs	r3, r0
     386:	0018      	movs	r0, r3
     388:	4b08      	ldr	r3, [pc, #32]	; (3ac <usart_enable+0x40>)
     38a:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	0018      	movs	r0, r3
     390:	4b07      	ldr	r3, [pc, #28]	; (3b0 <usart_enable+0x44>)
     392:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     394:	68fb      	ldr	r3, [r7, #12]
     396:	681b      	ldr	r3, [r3, #0]
     398:	2202      	movs	r2, #2
     39a:	431a      	orrs	r2, r3
     39c:	68fb      	ldr	r3, [r7, #12]
     39e:	601a      	str	r2, [r3, #0]
}
     3a0:	46c0      	nop			; (mov r8, r8)
     3a2:	46bd      	mov	sp, r7
     3a4:	b004      	add	sp, #16
     3a6:	bd80      	pop	{r7, pc}
     3a8:	00004f41 	.word	0x00004f41
     3ac:	00000171 	.word	0x00000171
     3b0:	00000289 	.word	0x00000289

000003b4 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
     3b4:	b580      	push	{r7, lr}
     3b6:	b084      	sub	sp, #16
     3b8:	af00      	add	r7, sp, #0
     3ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     3bc:	687b      	ldr	r3, [r7, #4]
     3be:	681b      	ldr	r3, [r3, #0]
     3c0:	60fb      	str	r3, [r7, #12]

	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     3c2:	687b      	ldr	r3, [r7, #4]
     3c4:	681b      	ldr	r3, [r3, #0]
     3c6:	0018      	movs	r0, r3
     3c8:	4b0a      	ldr	r3, [pc, #40]	; (3f4 <usart_disable+0x40>)
     3ca:	4798      	blx	r3
     3cc:	0003      	movs	r3, r0
     3ce:	0018      	movs	r0, r3
     3d0:	4b09      	ldr	r3, [pc, #36]	; (3f8 <usart_disable+0x44>)
     3d2:	4798      	blx	r3

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	0018      	movs	r0, r3
     3d8:	4b08      	ldr	r3, [pc, #32]	; (3fc <usart_disable+0x48>)
     3da:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     3dc:	68fb      	ldr	r3, [r7, #12]
     3de:	681b      	ldr	r3, [r3, #0]
     3e0:	2202      	movs	r2, #2
     3e2:	4393      	bics	r3, r2
     3e4:	001a      	movs	r2, r3
     3e6:	68fb      	ldr	r3, [r7, #12]
     3e8:	601a      	str	r2, [r3, #0]
}
     3ea:	46c0      	nop			; (mov r8, r8)
     3ec:	46bd      	mov	sp, r7
     3ee:	b004      	add	sp, #16
     3f0:	bd80      	pop	{r7, pc}
     3f2:	46c0      	nop			; (mov r8, r8)
     3f4:	00004f41 	.word	0x00004f41
     3f8:	0000019d 	.word	0x0000019d
     3fc:	00000289 	.word	0x00000289

00000400 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
     400:	b580      	push	{r7, lr}
     402:	b082      	sub	sp, #8
     404:	af00      	add	r7, sp, #0
     406:	6078      	str	r0, [r7, #4]
     408:	000a      	movs	r2, r1
     40a:	1cfb      	adds	r3, r7, #3
     40c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     40e:	687b      	ldr	r3, [r7, #4]
     410:	2231      	movs	r2, #49	; 0x31
     412:	5c9b      	ldrb	r3, [r3, r2]
     414:	b25a      	sxtb	r2, r3
     416:	1cfb      	adds	r3, r7, #3
     418:	781b      	ldrb	r3, [r3, #0]
     41a:	2101      	movs	r1, #1
     41c:	4099      	lsls	r1, r3
     41e:	000b      	movs	r3, r1
     420:	b25b      	sxtb	r3, r3
     422:	4313      	orrs	r3, r2
     424:	b25b      	sxtb	r3, r3
     426:	b2d9      	uxtb	r1, r3
     428:	687b      	ldr	r3, [r7, #4]
     42a:	2231      	movs	r2, #49	; 0x31
     42c:	5499      	strb	r1, [r3, r2]

}
     42e:	46c0      	nop			; (mov r8, r8)
     430:	46bd      	mov	sp, r7
     432:	b002      	add	sp, #8
     434:	bd80      	pop	{r7, pc}
     436:	46c0      	nop			; (mov r8, r8)

00000438 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     438:	b580      	push	{r7, lr}
     43a:	b084      	sub	sp, #16
     43c:	af00      	add	r7, sp, #0
     43e:	60f8      	str	r0, [r7, #12]
     440:	60b9      	str	r1, [r7, #8]
     442:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
     444:	687a      	ldr	r2, [r7, #4]
     446:	68b9      	ldr	r1, [r7, #8]
     448:	68fb      	ldr	r3, [r7, #12]
     44a:	0018      	movs	r0, r3
     44c:	4b05      	ldr	r3, [pc, #20]	; (464 <usart_serial_init+0x2c>)
     44e:	4798      	blx	r3
     450:	1e03      	subs	r3, r0, #0
     452:	d101      	bne.n	458 <usart_serial_init+0x20>
		return true;
     454:	2301      	movs	r3, #1
     456:	e000      	b.n	45a <usart_serial_init+0x22>
	}
	else {
		return false;
     458:	2300      	movs	r3, #0
	}
}
     45a:	0018      	movs	r0, r3
     45c:	46bd      	mov	sp, r7
     45e:	b004      	add	sp, #16
     460:	bd80      	pop	{r7, pc}
     462:	46c0      	nop			; (mov r8, r8)
     464:	00004765 	.word	0x00004765

00000468 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     468:	b580      	push	{r7, lr}
     46a:	b082      	sub	sp, #8
     46c:	af00      	add	r7, sp, #0
     46e:	6078      	str	r0, [r7, #4]
     470:	000a      	movs	r2, r1
     472:	1cfb      	adds	r3, r7, #3
     474:	701a      	strb	r2, [r3, #0]
#if USART_CALLBACK_MODE == true
	return usart_write_job(module,(uint16_t)c);
     476:	1cfb      	adds	r3, r7, #3
     478:	781b      	ldrb	r3, [r3, #0]
     47a:	b29a      	uxth	r2, r3
     47c:	687b      	ldr	r3, [r7, #4]
     47e:	0011      	movs	r1, r2
     480:	0018      	movs	r0, r3
     482:	4b03      	ldr	r3, [pc, #12]	; (490 <usart_serial_putchar+0x28>)
     484:	4798      	blx	r3
     486:	0003      	movs	r3, r0
#else	
	return usart_write_wait(module, c);
#endif
}
     488:	0018      	movs	r0, r3
     48a:	46bd      	mov	sp, r7
     48c:	b002      	add	sp, #8
     48e:	bd80      	pop	{r7, pc}
     490:	00003c91 	.word	0x00003c91

00000494 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     494:	b580      	push	{r7, lr}
     496:	b084      	sub	sp, #16
     498:	af00      	add	r7, sp, #0
     49a:	6078      	str	r0, [r7, #4]
     49c:	6039      	str	r1, [r7, #0]
	uint16_t temp;
#if USART_CALLBACK_MODE == true
	usart_read_job(module,&temp);
     49e:	230e      	movs	r3, #14
     4a0:	18fa      	adds	r2, r7, r3
     4a2:	687b      	ldr	r3, [r7, #4]
     4a4:	0011      	movs	r1, r2
     4a6:	0018      	movs	r0, r3
     4a8:	4b05      	ldr	r3, [pc, #20]	; (4c0 <usart_serial_getchar+0x2c>)
     4aa:	4798      	blx	r3
#else
	usart_read_wait(module, &temp);
#endif

	*c = temp;
     4ac:	230e      	movs	r3, #14
     4ae:	18fb      	adds	r3, r7, r3
     4b0:	881b      	ldrh	r3, [r3, #0]
     4b2:	b2da      	uxtb	r2, r3
     4b4:	683b      	ldr	r3, [r7, #0]
     4b6:	701a      	strb	r2, [r3, #0]
}
     4b8:	46c0      	nop			; (mov r8, r8)
     4ba:	46bd      	mov	sp, r7
     4bc:	b004      	add	sp, #16
     4be:	bd80      	pop	{r7, pc}
     4c0:	00003cd9 	.word	0x00003cd9

000004c4 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     4c4:	b580      	push	{r7, lr}
     4c6:	b084      	sub	sp, #16
     4c8:	af00      	add	r7, sp, #0
     4ca:	60f8      	str	r0, [r7, #12]
     4cc:	60b9      	str	r1, [r7, #8]
     4ce:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
     4d0:	4b10      	ldr	r3, [pc, #64]	; (514 <stdio_serial_init+0x50>)
     4d2:	68fa      	ldr	r2, [r7, #12]
     4d4:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     4d6:	4b10      	ldr	r3, [pc, #64]	; (518 <stdio_serial_init+0x54>)
     4d8:	4a10      	ldr	r2, [pc, #64]	; (51c <stdio_serial_init+0x58>)
     4da:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     4dc:	4b10      	ldr	r3, [pc, #64]	; (520 <stdio_serial_init+0x5c>)
     4de:	4a11      	ldr	r2, [pc, #68]	; (524 <stdio_serial_init+0x60>)
     4e0:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
     4e2:	687a      	ldr	r2, [r7, #4]
     4e4:	68b9      	ldr	r1, [r7, #8]
     4e6:	68fb      	ldr	r3, [r7, #12]
     4e8:	0018      	movs	r0, r3
     4ea:	4b0f      	ldr	r3, [pc, #60]	; (528 <stdio_serial_init+0x64>)
     4ec:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     4ee:	4b0f      	ldr	r3, [pc, #60]	; (52c <stdio_serial_init+0x68>)
     4f0:	681b      	ldr	r3, [r3, #0]
     4f2:	689b      	ldr	r3, [r3, #8]
     4f4:	2100      	movs	r1, #0
     4f6:	0018      	movs	r0, r3
     4f8:	4b0d      	ldr	r3, [pc, #52]	; (530 <stdio_serial_init+0x6c>)
     4fa:	4798      	blx	r3
	setbuf(stdin, NULL);
     4fc:	4b0b      	ldr	r3, [pc, #44]	; (52c <stdio_serial_init+0x68>)
     4fe:	681b      	ldr	r3, [r3, #0]
     500:	685b      	ldr	r3, [r3, #4]
     502:	2100      	movs	r1, #0
     504:	0018      	movs	r0, r3
     506:	4b0a      	ldr	r3, [pc, #40]	; (530 <stdio_serial_init+0x6c>)
     508:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
     50a:	46c0      	nop			; (mov r8, r8)
     50c:	46bd      	mov	sp, r7
     50e:	b004      	add	sp, #16
     510:	bd80      	pop	{r7, pc}
     512:	46c0      	nop			; (mov r8, r8)
     514:	20000e40 	.word	0x20000e40
     518:	20000e3c 	.word	0x20000e3c
     51c:	00000469 	.word	0x00000469
     520:	20000e38 	.word	0x20000e38
     524:	00000495 	.word	0x00000495
     528:	00000439 	.word	0x00000439
     52c:	20000438 	.word	0x20000438
     530:	00006ecd 	.word	0x00006ecd

00000534 <usart_tx_complete_handler>:
static uint8_t change_state = 0;
static uint8_t uart_reconfigure = 0;
#define USART_CMD_HDR_LENGTH	sizeof(uart_cmd_hdr)
#define SPI_TRANSFER_SIZE	512
static void usart_tx_complete_handler(const struct usart_module *const module)
{
     534:	b580      	push	{r7, lr}
     536:	b082      	sub	sp, #8
     538:	af00      	add	r7, sp, #0
     53a:	6078      	str	r0, [r7, #4]
	if(schedule_rx) {
     53c:	4b14      	ldr	r3, [pc, #80]	; (590 <usart_tx_complete_handler+0x5c>)
     53e:	781b      	ldrb	r3, [r3, #0]
     540:	2b00      	cmp	r3, #0
     542:	d016      	beq.n	572 <usart_tx_complete_handler+0x3e>
		if(schedule_rx_length == 1) {
     544:	4b13      	ldr	r3, [pc, #76]	; (594 <usart_tx_complete_handler+0x60>)
     546:	881b      	ldrh	r3, [r3, #0]
     548:	2b01      	cmp	r3, #1
     54a:	d107      	bne.n	55c <usart_tx_complete_handler+0x28>
			usart_read_job((struct usart_module *)module, schedule_rx_buffer);
     54c:	4b12      	ldr	r3, [pc, #72]	; (598 <usart_tx_complete_handler+0x64>)
     54e:	681a      	ldr	r2, [r3, #0]
     550:	687b      	ldr	r3, [r7, #4]
     552:	0011      	movs	r1, r2
     554:	0018      	movs	r0, r3
     556:	4b11      	ldr	r3, [pc, #68]	; (59c <usart_tx_complete_handler+0x68>)
     558:	4798      	blx	r3
     55a:	e007      	b.n	56c <usart_tx_complete_handler+0x38>
		}
		else {
			usart_read_buffer_job((struct usart_module *)module, (uint8_t *)schedule_rx_buffer, schedule_rx_length);
     55c:	4b0e      	ldr	r3, [pc, #56]	; (598 <usart_tx_complete_handler+0x64>)
     55e:	6819      	ldr	r1, [r3, #0]
     560:	4b0c      	ldr	r3, [pc, #48]	; (594 <usart_tx_complete_handler+0x60>)
     562:	881a      	ldrh	r2, [r3, #0]
     564:	687b      	ldr	r3, [r7, #4]
     566:	0018      	movs	r0, r3
     568:	4b0d      	ldr	r3, [pc, #52]	; (5a0 <usart_tx_complete_handler+0x6c>)
     56a:	4798      	blx	r3
		}
		schedule_rx = 0;
     56c:	4b08      	ldr	r3, [pc, #32]	; (590 <usart_tx_complete_handler+0x5c>)
     56e:	2200      	movs	r2, #0
     570:	701a      	strb	r2, [r3, #0]
		//schedule_rx_length = 0;
		//schedule_rx_buffer = NULL;
	}
	if(change_state) {
     572:	4b0c      	ldr	r3, [pc, #48]	; (5a4 <usart_tx_complete_handler+0x70>)
     574:	781b      	ldrb	r3, [r3, #0]
     576:	2b00      	cmp	r3, #0
     578:	d006      	beq.n	588 <usart_tx_complete_handler+0x54>
		usart_prot_handler_status = new_state;
     57a:	4b0b      	ldr	r3, [pc, #44]	; (5a8 <usart_tx_complete_handler+0x74>)
     57c:	781a      	ldrb	r2, [r3, #0]
     57e:	4b0b      	ldr	r3, [pc, #44]	; (5ac <usart_tx_complete_handler+0x78>)
     580:	701a      	strb	r2, [r3, #0]
		change_state = 0;
     582:	4b08      	ldr	r3, [pc, #32]	; (5a4 <usart_tx_complete_handler+0x70>)
     584:	2200      	movs	r2, #0
     586:	701a      	strb	r2, [r3, #0]
	}
}
     588:	46c0      	nop			; (mov r8, r8)
     58a:	46bd      	mov	sp, r7
     58c:	b002      	add	sp, #8
     58e:	bd80      	pop	{r7, pc}
     590:	20000d36 	.word	0x20000d36
     594:	20000d34 	.word	0x20000d34
     598:	20000d38 	.word	0x20000d38
     59c:	00003cd9 	.word	0x00003cd9
     5a0:	00003d65 	.word	0x00003d65
     5a4:	20000d42 	.word	0x20000d42
     5a8:	20000d41 	.word	0x20000d41
     5ac:	20000d40 	.word	0x20000d40

000005b0 <usart_rx_complete_handler>:

static void usart_rx_complete_handler(const struct usart_module *const module)
{
     5b0:	b580      	push	{r7, lr}
     5b2:	b082      	sub	sp, #8
     5b4:	af00      	add	r7, sp, #0
     5b6:	6078      	str	r0, [r7, #4]
	usart_pkt_received = 1;
     5b8:	4b0c      	ldr	r3, [pc, #48]	; (5ec <usart_rx_complete_handler+0x3c>)
     5ba:	2201      	movs	r2, #1
     5bc:	701a      	strb	r2, [r3, #0]
	usart_pkt = (uint8_t *)(module->rx_buffer_ptr - schedule_rx_length);
     5be:	687b      	ldr	r3, [r7, #4]
     5c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     5c2:	4b0b      	ldr	r3, [pc, #44]	; (5f0 <usart_rx_complete_handler+0x40>)
     5c4:	881b      	ldrh	r3, [r3, #0]
     5c6:	425b      	negs	r3, r3
     5c8:	18d2      	adds	r2, r2, r3
     5ca:	4b0a      	ldr	r3, [pc, #40]	; (5f4 <usart_rx_complete_handler+0x44>)
     5cc:	601a      	str	r2, [r3, #0]
	if(change_state) {
     5ce:	4b0a      	ldr	r3, [pc, #40]	; (5f8 <usart_rx_complete_handler+0x48>)
     5d0:	781b      	ldrb	r3, [r3, #0]
     5d2:	2b00      	cmp	r3, #0
     5d4:	d006      	beq.n	5e4 <usart_rx_complete_handler+0x34>
		usart_prot_handler_status = new_state;
     5d6:	4b09      	ldr	r3, [pc, #36]	; (5fc <usart_rx_complete_handler+0x4c>)
     5d8:	781a      	ldrb	r2, [r3, #0]
     5da:	4b09      	ldr	r3, [pc, #36]	; (600 <usart_rx_complete_handler+0x50>)
     5dc:	701a      	strb	r2, [r3, #0]
		change_state = 0;
     5de:	4b06      	ldr	r3, [pc, #24]	; (5f8 <usart_rx_complete_handler+0x48>)
     5e0:	2200      	movs	r2, #0
     5e2:	701a      	strb	r2, [r3, #0]
	}
}
     5e4:	46c0      	nop			; (mov r8, r8)
     5e6:	46bd      	mov	sp, r7
     5e8:	b002      	add	sp, #8
     5ea:	bd80      	pop	{r7, pc}
     5ec:	20000d21 	.word	0x20000d21
     5f0:	20000d34 	.word	0x20000d34
     5f4:	20000d3c 	.word	0x20000d3c
     5f8:	20000d42 	.word	0x20000d42
     5fc:	20000d41 	.word	0x20000d41
     600:	20000d40 	.word	0x20000d40

00000604 <nm_usart_send_regval>:
//	usart_err_on_reception = 1;
//	usart_abort_job(module,USART_TRANSCEIVER_RX);
//}

static void nm_usart_send_regval(struct usart_module *module,uint8_t *tx_data,uint16_t length)
{
     604:	b580      	push	{r7, lr}
     606:	b086      	sub	sp, #24
     608:	af00      	add	r7, sp, #0
     60a:	60f8      	str	r0, [r7, #12]
     60c:	60b9      	str	r1, [r7, #8]
     60e:	1dbb      	adds	r3, r7, #6
     610:	801a      	strh	r2, [r3, #0]
	uint8_t temp,i,j;
	for(i=0,j=(length-1);i<j;i++,j--) {
     612:	2317      	movs	r3, #23
     614:	18fb      	adds	r3, r7, r3
     616:	2200      	movs	r2, #0
     618:	701a      	strb	r2, [r3, #0]
     61a:	1dbb      	adds	r3, r7, #6
     61c:	881b      	ldrh	r3, [r3, #0]
     61e:	b2da      	uxtb	r2, r3
     620:	2316      	movs	r3, #22
     622:	18fb      	adds	r3, r7, r3
     624:	3a01      	subs	r2, #1
     626:	701a      	strb	r2, [r3, #0]
     628:	e02b      	b.n	682 <nm_usart_send_regval+0x7e>
		temp = tx_data[i];
     62a:	2317      	movs	r3, #23
     62c:	18fb      	adds	r3, r7, r3
     62e:	781b      	ldrb	r3, [r3, #0]
     630:	68ba      	ldr	r2, [r7, #8]
     632:	18d2      	adds	r2, r2, r3
     634:	2315      	movs	r3, #21
     636:	18fb      	adds	r3, r7, r3
     638:	7812      	ldrb	r2, [r2, #0]
     63a:	701a      	strb	r2, [r3, #0]
		tx_data[i] = tx_data[j];
     63c:	2317      	movs	r3, #23
     63e:	18fb      	adds	r3, r7, r3
     640:	781b      	ldrb	r3, [r3, #0]
     642:	68ba      	ldr	r2, [r7, #8]
     644:	18d3      	adds	r3, r2, r3
     646:	2216      	movs	r2, #22
     648:	18ba      	adds	r2, r7, r2
     64a:	7812      	ldrb	r2, [r2, #0]
     64c:	68b9      	ldr	r1, [r7, #8]
     64e:	188a      	adds	r2, r1, r2
     650:	7812      	ldrb	r2, [r2, #0]
     652:	701a      	strb	r2, [r3, #0]
		tx_data[j] = temp;
     654:	2316      	movs	r3, #22
     656:	18fb      	adds	r3, r7, r3
     658:	781b      	ldrb	r3, [r3, #0]
     65a:	68ba      	ldr	r2, [r7, #8]
     65c:	18d3      	adds	r3, r2, r3
     65e:	2215      	movs	r2, #21
     660:	18ba      	adds	r2, r7, r2
     662:	7812      	ldrb	r2, [r2, #0]
     664:	701a      	strb	r2, [r3, #0]
//}

static void nm_usart_send_regval(struct usart_module *module,uint8_t *tx_data,uint16_t length)
{
	uint8_t temp,i,j;
	for(i=0,j=(length-1);i<j;i++,j--) {
     666:	2317      	movs	r3, #23
     668:	18fb      	adds	r3, r7, r3
     66a:	781a      	ldrb	r2, [r3, #0]
     66c:	2317      	movs	r3, #23
     66e:	18fb      	adds	r3, r7, r3
     670:	3201      	adds	r2, #1
     672:	701a      	strb	r2, [r3, #0]
     674:	2316      	movs	r3, #22
     676:	18fb      	adds	r3, r7, r3
     678:	781a      	ldrb	r2, [r3, #0]
     67a:	2316      	movs	r3, #22
     67c:	18fb      	adds	r3, r7, r3
     67e:	3a01      	subs	r2, #1
     680:	701a      	strb	r2, [r3, #0]
     682:	2317      	movs	r3, #23
     684:	18fa      	adds	r2, r7, r3
     686:	2316      	movs	r3, #22
     688:	18fb      	adds	r3, r7, r3
     68a:	7812      	ldrb	r2, [r2, #0]
     68c:	781b      	ldrb	r3, [r3, #0]
     68e:	429a      	cmp	r2, r3
     690:	d3cb      	bcc.n	62a <nm_usart_send_regval+0x26>
		temp = tx_data[i];
		tx_data[i] = tx_data[j];
		tx_data[j] = temp;
	}
	usart_write_buffer_job(module,tx_data,length);
     692:	1dbb      	adds	r3, r7, #6
     694:	881a      	ldrh	r2, [r3, #0]
     696:	68b9      	ldr	r1, [r7, #8]
     698:	68fb      	ldr	r3, [r7, #12]
     69a:	0018      	movs	r0, r3
     69c:	4b02      	ldr	r3, [pc, #8]	; (6a8 <nm_usart_send_regval+0xa4>)
     69e:	4798      	blx	r3
}
     6a0:	46c0      	nop			; (mov r8, r8)
     6a2:	46bd      	mov	sp, r7
     6a4:	b006      	add	sp, #24
     6a6:	bd80      	pop	{r7, pc}
     6a8:	00003d0d 	.word	0x00003d0d

000006ac <nm_usart_protocol_handler>:

static void nm_usart_protocol_handler(struct usart_module *module,enum nm_usart_event_types event_name)
{
     6ac:	b580      	push	{r7, lr}
     6ae:	b084      	sub	sp, #16
     6b0:	af00      	add	r7, sp, #0
     6b2:	6078      	str	r0, [r7, #4]
     6b4:	000a      	movs	r2, r1
     6b6:	1cfb      	adds	r3, r7, #3
     6b8:	701a      	strb	r2, [r3, #0]
	//uint16_t response;
	static uint16_t payload_length = 0;
	//uint16_t expected_length;
	//static uint32_t target_address = 0;
	uint8 checksum = 0;
     6ba:	230f      	movs	r3, #15
     6bc:	18fb      	adds	r3, r7, r3
     6be:	2200      	movs	r2, #0
     6c0:	701a      	strb	r2, [r3, #0]
	uint8 i;
#if 1
switch(usart_prot_handler_status) {
     6c2:	4bd8      	ldr	r3, [pc, #864]	; (a24 <nm_usart_protocol_handler+0x378>)
     6c4:	781b      	ldrb	r3, [r3, #0]
     6c6:	2b04      	cmp	r3, #4
     6c8:	d900      	bls.n	6cc <nm_usart_protocol_handler+0x20>
     6ca:	e20f      	b.n	aec <nm_usart_protocol_handler+0x440>
     6cc:	009a      	lsls	r2, r3, #2
     6ce:	4bd6      	ldr	r3, [pc, #856]	; (a28 <nm_usart_protocol_handler+0x37c>)
     6d0:	18d3      	adds	r3, r2, r3
     6d2:	681b      	ldr	r3, [r3, #0]
     6d4:	469f      	mov	pc, r3
	case INIT:
		if((event_name == USART_PKT_RECEIVED) && (schedule_rx_length == 1)) {
     6d6:	1cfb      	adds	r3, r7, #3
     6d8:	781b      	ldrb	r3, [r3, #0]
     6da:	2b00      	cmp	r3, #0
     6dc:	d13a      	bne.n	754 <nm_usart_protocol_handler+0xa8>
     6de:	4bd3      	ldr	r3, [pc, #844]	; (a2c <nm_usart_protocol_handler+0x380>)
     6e0:	881b      	ldrh	r3, [r3, #0]
     6e2:	2b01      	cmp	r3, #1
     6e4:	d136      	bne.n	754 <nm_usart_protocol_handler+0xa8>
			if((usart_pkt[0] == 0x12)) {
     6e6:	4bd2      	ldr	r3, [pc, #840]	; (a30 <nm_usart_protocol_handler+0x384>)
     6e8:	681b      	ldr	r3, [r3, #0]
     6ea:	781b      	ldrb	r3, [r3, #0]
     6ec:	2b12      	cmp	r3, #18
     6ee:	d11a      	bne.n	726 <nm_usart_protocol_handler+0x7a>
				usart_prot_handler_status = WAIT_SYNC;
     6f0:	4bcc      	ldr	r3, [pc, #816]	; (a24 <nm_usart_protocol_handler+0x378>)
     6f2:	2201      	movs	r2, #1
     6f4:	701a      	strb	r2, [r3, #0]
				usart_cmd_recv_buffer[0] = 0xFF;
     6f6:	4bcf      	ldr	r3, [pc, #828]	; (a34 <nm_usart_protocol_handler+0x388>)
     6f8:	22ff      	movs	r2, #255	; 0xff
     6fa:	801a      	strh	r2, [r3, #0]
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     6fc:	4bce      	ldr	r3, [pc, #824]	; (a38 <nm_usart_protocol_handler+0x38c>)
     6fe:	4acd      	ldr	r2, [pc, #820]	; (a34 <nm_usart_protocol_handler+0x388>)
     700:	601a      	str	r2, [r3, #0]
				schedule_rx_length = 1;
     702:	4bca      	ldr	r3, [pc, #808]	; (a2c <nm_usart_protocol_handler+0x380>)
     704:	2201      	movs	r2, #1
     706:	801a      	strh	r2, [r3, #0]
				schedule_rx = 1;
     708:	4bcc      	ldr	r3, [pc, #816]	; (a3c <nm_usart_protocol_handler+0x390>)
     70a:	2201      	movs	r2, #1
     70c:	701a      	strb	r2, [r3, #0]
				usart_tx_buffer[0] = 0x5B;
     70e:	4bcc      	ldr	r3, [pc, #816]	; (a40 <nm_usart_protocol_handler+0x394>)
     710:	225b      	movs	r2, #91	; 0x5b
     712:	701a      	strb	r2, [r3, #0]
				usart_write_job(module,usart_tx_buffer[0]);
     714:	4bca      	ldr	r3, [pc, #808]	; (a40 <nm_usart_protocol_handler+0x394>)
     716:	781b      	ldrb	r3, [r3, #0]
     718:	b29a      	uxth	r2, r3
     71a:	687b      	ldr	r3, [r7, #4]
     71c:	0011      	movs	r1, r2
     71e:	0018      	movs	r0, r3
     720:	4bc8      	ldr	r3, [pc, #800]	; (a44 <nm_usart_protocol_handler+0x398>)
     722:	4798      	blx	r3
	uint8 i;
#if 1
switch(usart_prot_handler_status) {
	case INIT:
		if((event_name == USART_PKT_RECEIVED) && (schedule_rx_length == 1)) {
			if((usart_pkt[0] == 0x12)) {
     724:	e02e      	b.n	784 <nm_usart_protocol_handler+0xd8>
				schedule_rx = 1;
				usart_tx_buffer[0] = 0x5B;
				usart_write_job(module,usart_tx_buffer[0]);
			}
			else {
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     726:	4bc4      	ldr	r3, [pc, #784]	; (a38 <nm_usart_protocol_handler+0x38c>)
     728:	4ac2      	ldr	r2, [pc, #776]	; (a34 <nm_usart_protocol_handler+0x388>)
     72a:	601a      	str	r2, [r3, #0]
				schedule_rx_length = 1;
     72c:	4bbf      	ldr	r3, [pc, #764]	; (a2c <nm_usart_protocol_handler+0x380>)
     72e:	2201      	movs	r2, #1
     730:	801a      	strh	r2, [r3, #0]
				schedule_rx = 1;
     732:	4bc2      	ldr	r3, [pc, #776]	; (a3c <nm_usart_protocol_handler+0x390>)
     734:	2201      	movs	r2, #1
     736:	701a      	strb	r2, [r3, #0]
				usart_tx_buffer[0] = usart_pkt[0];
     738:	4bbd      	ldr	r3, [pc, #756]	; (a30 <nm_usart_protocol_handler+0x384>)
     73a:	681b      	ldr	r3, [r3, #0]
     73c:	781a      	ldrb	r2, [r3, #0]
     73e:	4bc0      	ldr	r3, [pc, #768]	; (a40 <nm_usart_protocol_handler+0x394>)
     740:	701a      	strb	r2, [r3, #0]
				usart_write_job(module,usart_tx_buffer[0]);
     742:	4bbf      	ldr	r3, [pc, #764]	; (a40 <nm_usart_protocol_handler+0x394>)
     744:	781b      	ldrb	r3, [r3, #0]
     746:	b29a      	uxth	r2, r3
     748:	687b      	ldr	r3, [r7, #4]
     74a:	0011      	movs	r1, r2
     74c:	0018      	movs	r0, r3
     74e:	4bbd      	ldr	r3, [pc, #756]	; (a44 <nm_usart_protocol_handler+0x398>)
     750:	4798      	blx	r3
	uint8 i;
#if 1
switch(usart_prot_handler_status) {
	case INIT:
		if((event_name == USART_PKT_RECEIVED) && (schedule_rx_length == 1)) {
			if((usart_pkt[0] == 0x12)) {
     752:	e017      	b.n	784 <nm_usart_protocol_handler+0xd8>
				usart_write_job(module,usart_tx_buffer[0]);
				//usart_read_job(module,&usart_cmd_recv_buffer[0]);
			}
		}
		else {
			usart_cmd_recv_buffer[0] = 0xFF;
     754:	4bb7      	ldr	r3, [pc, #732]	; (a34 <nm_usart_protocol_handler+0x388>)
     756:	22ff      	movs	r2, #255	; 0xff
     758:	801a      	strh	r2, [r3, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     75a:	4bb7      	ldr	r3, [pc, #732]	; (a38 <nm_usart_protocol_handler+0x38c>)
     75c:	4ab5      	ldr	r2, [pc, #724]	; (a34 <nm_usart_protocol_handler+0x388>)
     75e:	601a      	str	r2, [r3, #0]
			schedule_rx_length = 1;
     760:	4bb2      	ldr	r3, [pc, #712]	; (a2c <nm_usart_protocol_handler+0x380>)
     762:	2201      	movs	r2, #1
     764:	801a      	strh	r2, [r3, #0]
			schedule_rx = 1;
     766:	4bb5      	ldr	r3, [pc, #724]	; (a3c <nm_usart_protocol_handler+0x390>)
     768:	2201      	movs	r2, #1
     76a:	701a      	strb	r2, [r3, #0]
			usart_tx_buffer[0] = 0xEA;
     76c:	4bb4      	ldr	r3, [pc, #720]	; (a40 <nm_usart_protocol_handler+0x394>)
     76e:	22ea      	movs	r2, #234	; 0xea
     770:	701a      	strb	r2, [r3, #0]
			usart_write_job(module,usart_tx_buffer[0]);
     772:	4bb3      	ldr	r3, [pc, #716]	; (a40 <nm_usart_protocol_handler+0x394>)
     774:	781b      	ldrb	r3, [r3, #0]
     776:	b29a      	uxth	r2, r3
     778:	687b      	ldr	r3, [r7, #4]
     77a:	0011      	movs	r1, r2
     77c:	0018      	movs	r0, r3
     77e:	4bb1      	ldr	r3, [pc, #708]	; (a44 <nm_usart_protocol_handler+0x398>)
     780:	4798      	blx	r3
		}
		break;
     782:	e1ba      	b.n	afa <nm_usart_protocol_handler+0x44e>
     784:	e1b9      	b.n	afa <nm_usart_protocol_handler+0x44e>
	case WAIT_SYNC:
		if(event_name == USART_PKT_RECEIVED) {
     786:	1cfb      	adds	r3, r7, #3
     788:	781b      	ldrb	r3, [r3, #0]
     78a:	2b00      	cmp	r3, #0
     78c:	d000      	beq.n	790 <nm_usart_protocol_handler+0xe4>
     78e:	e1b1      	b.n	af4 <nm_usart_protocol_handler+0x448>
			if(usart_pkt[0] == 0xA5) {
     790:	4ba7      	ldr	r3, [pc, #668]	; (a30 <nm_usart_protocol_handler+0x384>)
     792:	681b      	ldr	r3, [r3, #0]
     794:	781b      	ldrb	r3, [r3, #0]
     796:	2ba5      	cmp	r3, #165	; 0xa5
     798:	d112      	bne.n	7c0 <nm_usart_protocol_handler+0x114>
				uint8 * usart_cmd_recv_buffer_u8 = (uint8*)&usart_cmd_recv_buffer[0];
     79a:	4ba6      	ldr	r3, [pc, #664]	; (a34 <nm_usart_protocol_handler+0x388>)
     79c:	60bb      	str	r3, [r7, #8]
				//module->rx_buffer_ptr = &usart_cmd_recv_buffer_u8[4];
				//module->remaining_rx_buffer_length = 1;
				usart_prot_handler_status = WAITING;
     79e:	4ba1      	ldr	r3, [pc, #644]	; (a24 <nm_usart_protocol_handler+0x378>)
     7a0:	2202      	movs	r2, #2
     7a2:	701a      	strb	r2, [r3, #0]
				usart_cmd_recv_buffer_u8[4] = 0xFF;
     7a4:	68bb      	ldr	r3, [r7, #8]
     7a6:	3304      	adds	r3, #4
     7a8:	22ff      	movs	r2, #255	; 0xff
     7aa:	701a      	strb	r2, [r3, #0]
				schedule_rx_length = 1;
     7ac:	4b9f      	ldr	r3, [pc, #636]	; (a2c <nm_usart_protocol_handler+0x380>)
     7ae:	2201      	movs	r2, #1
     7b0:	801a      	strh	r2, [r3, #0]
				usart_read_job(module, &usart_cmd_recv_buffer[2]);
     7b2:	4aa5      	ldr	r2, [pc, #660]	; (a48 <nm_usart_protocol_handler+0x39c>)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	0011      	movs	r1, r2
     7b8:	0018      	movs	r0, r3
     7ba:	4ba4      	ldr	r3, [pc, #656]	; (a4c <nm_usart_protocol_handler+0x3a0>)
     7bc:	4798      	blx	r3
					schedule_rx_length = 1;
					usart_read_job(module, &usart_cmd_recv_buffer[0]);
				}
			}
		}
			break;
     7be:	e199      	b.n	af4 <nm_usart_protocol_handler+0x448>
				usart_prot_handler_status = WAITING;
				usart_cmd_recv_buffer_u8[4] = 0xFF;
				schedule_rx_length = 1;
				usart_read_job(module, &usart_cmd_recv_buffer[2]);
			}
			else if(usart_pkt[0] == 0x12) {	//uart identification command
     7c0:	4b9b      	ldr	r3, [pc, #620]	; (a30 <nm_usart_protocol_handler+0x384>)
     7c2:	681b      	ldr	r3, [r3, #0]
     7c4:	781b      	ldrb	r3, [r3, #0]
     7c6:	2b12      	cmp	r3, #18
     7c8:	d117      	bne.n	7fa <nm_usart_protocol_handler+0x14e>
				usart_tx_buffer[0] = 0x5B;
     7ca:	4b9d      	ldr	r3, [pc, #628]	; (a40 <nm_usart_protocol_handler+0x394>)
     7cc:	225b      	movs	r2, #91	; 0x5b
     7ce:	701a      	strb	r2, [r3, #0]
				usart_cmd_recv_buffer[0] = 0xFF;
     7d0:	4b98      	ldr	r3, [pc, #608]	; (a34 <nm_usart_protocol_handler+0x388>)
     7d2:	22ff      	movs	r2, #255	; 0xff
     7d4:	801a      	strh	r2, [r3, #0]
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     7d6:	4b98      	ldr	r3, [pc, #608]	; (a38 <nm_usart_protocol_handler+0x38c>)
     7d8:	4a96      	ldr	r2, [pc, #600]	; (a34 <nm_usart_protocol_handler+0x388>)
     7da:	601a      	str	r2, [r3, #0]
				schedule_rx_length = 1;
     7dc:	4b93      	ldr	r3, [pc, #588]	; (a2c <nm_usart_protocol_handler+0x380>)
     7de:	2201      	movs	r2, #1
     7e0:	801a      	strh	r2, [r3, #0]
				schedule_rx = 1;
     7e2:	4b96      	ldr	r3, [pc, #600]	; (a3c <nm_usart_protocol_handler+0x390>)
     7e4:	2201      	movs	r2, #1
     7e6:	701a      	strb	r2, [r3, #0]
				usart_write_job(module,usart_tx_buffer[0]);
     7e8:	4b95      	ldr	r3, [pc, #596]	; (a40 <nm_usart_protocol_handler+0x394>)
     7ea:	781b      	ldrb	r3, [r3, #0]
     7ec:	b29a      	uxth	r2, r3
     7ee:	687b      	ldr	r3, [r7, #4]
     7f0:	0011      	movs	r1, r2
     7f2:	0018      	movs	r0, r3
     7f4:	4b93      	ldr	r3, [pc, #588]	; (a44 <nm_usart_protocol_handler+0x398>)
     7f6:	4798      	blx	r3
					schedule_rx_length = 1;
					usart_read_job(module, &usart_cmd_recv_buffer[0]);
				}
			}
		}
			break;
     7f8:	e17c      	b.n	af4 <nm_usart_protocol_handler+0x448>
				schedule_rx_length = 1;
				schedule_rx = 1;
				usart_write_job(module,usart_tx_buffer[0]);
			}
			else {
				if(!uart_reconfigure) {
     7fa:	4b95      	ldr	r3, [pc, #596]	; (a50 <nm_usart_protocol_handler+0x3a4>)
     7fc:	781b      	ldrb	r3, [r3, #0]
     7fe:	2b00      	cmp	r3, #0
     800:	d117      	bne.n	832 <nm_usart_protocol_handler+0x186>
					usart_tx_buffer[0] = 0x5A;
     802:	4b8f      	ldr	r3, [pc, #572]	; (a40 <nm_usart_protocol_handler+0x394>)
     804:	225a      	movs	r2, #90	; 0x5a
     806:	701a      	strb	r2, [r3, #0]
					usart_cmd_recv_buffer[0] = 0xFF;
     808:	4b8a      	ldr	r3, [pc, #552]	; (a34 <nm_usart_protocol_handler+0x388>)
     80a:	22ff      	movs	r2, #255	; 0xff
     80c:	801a      	strh	r2, [r3, #0]
					schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     80e:	4b8a      	ldr	r3, [pc, #552]	; (a38 <nm_usart_protocol_handler+0x38c>)
     810:	4a88      	ldr	r2, [pc, #544]	; (a34 <nm_usart_protocol_handler+0x388>)
     812:	601a      	str	r2, [r3, #0]
					schedule_rx_length = 1;
     814:	4b85      	ldr	r3, [pc, #532]	; (a2c <nm_usart_protocol_handler+0x380>)
     816:	2201      	movs	r2, #1
     818:	801a      	strh	r2, [r3, #0]
					schedule_rx = 1;
     81a:	4b88      	ldr	r3, [pc, #544]	; (a3c <nm_usart_protocol_handler+0x390>)
     81c:	2201      	movs	r2, #1
     81e:	701a      	strb	r2, [r3, #0]
					usart_write_job(module,usart_tx_buffer[0]);
     820:	4b87      	ldr	r3, [pc, #540]	; (a40 <nm_usart_protocol_handler+0x394>)
     822:	781b      	ldrb	r3, [r3, #0]
     824:	b29a      	uxth	r2, r3
     826:	687b      	ldr	r3, [r7, #4]
     828:	0011      	movs	r1, r2
     82a:	0018      	movs	r0, r3
     82c:	4b85      	ldr	r3, [pc, #532]	; (a44 <nm_usart_protocol_handler+0x398>)
     82e:	4798      	blx	r3
					schedule_rx_length = 1;
					usart_read_job(module, &usart_cmd_recv_buffer[0]);
				}
			}
		}
			break;
     830:	e160      	b.n	af4 <nm_usart_protocol_handler+0x448>
					schedule_rx = 1;
					usart_write_job(module,usart_tx_buffer[0]);
				}
				else {
					//uart_reconfigure = 0;
					schedule_rx_length = 1;
     832:	4b7e      	ldr	r3, [pc, #504]	; (a2c <nm_usart_protocol_handler+0x380>)
     834:	2201      	movs	r2, #1
     836:	801a      	strh	r2, [r3, #0]
					usart_read_job(module, &usart_cmd_recv_buffer[0]);
     838:	4a7e      	ldr	r2, [pc, #504]	; (a34 <nm_usart_protocol_handler+0x388>)
     83a:	687b      	ldr	r3, [r7, #4]
     83c:	0011      	movs	r1, r2
     83e:	0018      	movs	r0, r3
     840:	4b82      	ldr	r3, [pc, #520]	; (a4c <nm_usart_protocol_handler+0x3a0>)
     842:	4798      	blx	r3
				}
			}
		}
			break;
     844:	e156      	b.n	af4 <nm_usart_protocol_handler+0x448>
	case WAITING:
		if(event_name == USART_PKT_RECEIVED) {
     846:	1cfb      	adds	r3, r7, #3
     848:	781b      	ldrb	r3, [r3, #0]
     84a:	2b00      	cmp	r3, #0
     84c:	d111      	bne.n	872 <nm_usart_protocol_handler+0x1c6>
			usart_prot_handler_status = COLLECTING_HDR;
     84e:	4b75      	ldr	r3, [pc, #468]	; (a24 <nm_usart_protocol_handler+0x378>)
     850:	2203      	movs	r2, #3
     852:	701a      	strb	r2, [r3, #0]
			uart_cmd_buf = usart_pkt;
     854:	4b76      	ldr	r3, [pc, #472]	; (a30 <nm_usart_protocol_handler+0x384>)
     856:	681a      	ldr	r2, [r3, #0]
     858:	4b7e      	ldr	r3, [pc, #504]	; (a54 <nm_usart_protocol_handler+0x3a8>)
     85a:	601a      	str	r2, [r3, #0]
			//module->remaining_rx_buffer_length = USART_CMD_HDR_LENGTH - 1;
			schedule_rx_length = (USART_CMD_HDR_LENGTH - 1);
     85c:	4b73      	ldr	r3, [pc, #460]	; (a2c <nm_usart_protocol_handler+0x380>)
     85e:	220b      	movs	r2, #11
     860:	801a      	strh	r2, [r3, #0]
			usart_read_buffer_job(module, (uint8_t *)module->rx_buffer_ptr, (USART_CMD_HDR_LENGTH - 1));
     862:	687b      	ldr	r3, [r7, #4]
     864:	6a59      	ldr	r1, [r3, #36]	; 0x24
     866:	687b      	ldr	r3, [r7, #4]
     868:	220b      	movs	r2, #11
     86a:	0018      	movs	r0, r3
     86c:	4b7a      	ldr	r3, [pc, #488]	; (a58 <nm_usart_protocol_handler+0x3ac>)
     86e:	4798      	blx	r3
			schedule_rx = 1;
			schedule_rx_length = 1;
			usart_tx_buffer[0] = 0xEA;
			usart_write_job(module,usart_tx_buffer[0]);
		}
		break;
     870:	e143      	b.n	afa <nm_usart_protocol_handler+0x44e>
			//module->remaining_rx_buffer_length = USART_CMD_HDR_LENGTH - 1;
			schedule_rx_length = (USART_CMD_HDR_LENGTH - 1);
			usart_read_buffer_job(module, (uint8_t *)module->rx_buffer_ptr, (USART_CMD_HDR_LENGTH - 1));
		}
		else {
			usart_prot_handler_status = WAIT_SYNC;
     872:	4b6c      	ldr	r3, [pc, #432]	; (a24 <nm_usart_protocol_handler+0x378>)
     874:	2201      	movs	r2, #1
     876:	701a      	strb	r2, [r3, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     878:	4b6f      	ldr	r3, [pc, #444]	; (a38 <nm_usart_protocol_handler+0x38c>)
     87a:	4a6e      	ldr	r2, [pc, #440]	; (a34 <nm_usart_protocol_handler+0x388>)
     87c:	601a      	str	r2, [r3, #0]
			schedule_rx = 1;
     87e:	4b6f      	ldr	r3, [pc, #444]	; (a3c <nm_usart_protocol_handler+0x390>)
     880:	2201      	movs	r2, #1
     882:	701a      	strb	r2, [r3, #0]
			schedule_rx_length = 1;
     884:	4b69      	ldr	r3, [pc, #420]	; (a2c <nm_usart_protocol_handler+0x380>)
     886:	2201      	movs	r2, #1
     888:	801a      	strh	r2, [r3, #0]
			usart_tx_buffer[0] = 0xEA;
     88a:	4b6d      	ldr	r3, [pc, #436]	; (a40 <nm_usart_protocol_handler+0x394>)
     88c:	22ea      	movs	r2, #234	; 0xea
     88e:	701a      	strb	r2, [r3, #0]
			usart_write_job(module,usart_tx_buffer[0]);
     890:	4b6b      	ldr	r3, [pc, #428]	; (a40 <nm_usart_protocol_handler+0x394>)
     892:	781b      	ldrb	r3, [r3, #0]
     894:	b29a      	uxth	r2, r3
     896:	687b      	ldr	r3, [r7, #4]
     898:	0011      	movs	r1, r2
     89a:	0018      	movs	r0, r3
     89c:	4b69      	ldr	r3, [pc, #420]	; (a44 <nm_usart_protocol_handler+0x398>)
     89e:	4798      	blx	r3
		}
		break;
     8a0:	e12b      	b.n	afa <nm_usart_protocol_handler+0x44e>
	case COLLECTING_HDR:
		if(event_name == USART_PKT_RECEIVED) {
     8a2:	1cfb      	adds	r3, r7, #3
     8a4:	781b      	ldrb	r3, [r3, #0]
     8a6:	2b00      	cmp	r3, #0
     8a8:	d000      	beq.n	8ac <nm_usart_protocol_handler+0x200>
     8aa:	e08c      	b.n	9c6 <nm_usart_protocol_handler+0x31a>
			//Verify check sum
			for(i=0;i<(USART_CMD_HDR_LENGTH);i++) {
     8ac:	230e      	movs	r3, #14
     8ae:	18fb      	adds	r3, r7, r3
     8b0:	2200      	movs	r2, #0
     8b2:	701a      	strb	r2, [r3, #0]
     8b4:	e014      	b.n	8e0 <nm_usart_protocol_handler+0x234>
				checksum ^= *(((uint8_t *)uart_cmd_buf)+i);
     8b6:	4b67      	ldr	r3, [pc, #412]	; (a54 <nm_usart_protocol_handler+0x3a8>)
     8b8:	681a      	ldr	r2, [r3, #0]
     8ba:	230e      	movs	r3, #14
     8bc:	18fb      	adds	r3, r7, r3
     8be:	781b      	ldrb	r3, [r3, #0]
     8c0:	18d3      	adds	r3, r2, r3
     8c2:	7819      	ldrb	r1, [r3, #0]
     8c4:	230f      	movs	r3, #15
     8c6:	18fb      	adds	r3, r7, r3
     8c8:	220f      	movs	r2, #15
     8ca:	18ba      	adds	r2, r7, r2
     8cc:	7812      	ldrb	r2, [r2, #0]
     8ce:	404a      	eors	r2, r1
     8d0:	701a      	strb	r2, [r3, #0]
		}
		break;
	case COLLECTING_HDR:
		if(event_name == USART_PKT_RECEIVED) {
			//Verify check sum
			for(i=0;i<(USART_CMD_HDR_LENGTH);i++) {
     8d2:	230e      	movs	r3, #14
     8d4:	18fb      	adds	r3, r7, r3
     8d6:	781a      	ldrb	r2, [r3, #0]
     8d8:	230e      	movs	r3, #14
     8da:	18fb      	adds	r3, r7, r3
     8dc:	3201      	adds	r2, #1
     8de:	701a      	strb	r2, [r3, #0]
     8e0:	230e      	movs	r3, #14
     8e2:	18fb      	adds	r3, r7, r3
     8e4:	781b      	ldrb	r3, [r3, #0]
     8e6:	2b0b      	cmp	r3, #11
     8e8:	d9e5      	bls.n	8b6 <nm_usart_protocol_handler+0x20a>
				checksum ^= *(((uint8_t *)uart_cmd_buf)+i);
			}
			if(checksum != 0) {
     8ea:	230f      	movs	r3, #15
     8ec:	18fb      	adds	r3, r7, r3
     8ee:	781b      	ldrb	r3, [r3, #0]
     8f0:	2b00      	cmp	r3, #0
     8f2:	d01a      	beq.n	92a <nm_usart_protocol_handler+0x27e>
				usart_prot_handler_status = WAIT_SYNC;
     8f4:	4b4b      	ldr	r3, [pc, #300]	; (a24 <nm_usart_protocol_handler+0x378>)
     8f6:	2201      	movs	r2, #1
     8f8:	701a      	strb	r2, [r3, #0]
				//module->remaining_rx_buffer_length = 1;
				usart_cmd_recv_buffer[0] = 0xFF;
     8fa:	4b4e      	ldr	r3, [pc, #312]	; (a34 <nm_usart_protocol_handler+0x388>)
     8fc:	22ff      	movs	r2, #255	; 0xff
     8fe:	801a      	strh	r2, [r3, #0]
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     900:	4b4d      	ldr	r3, [pc, #308]	; (a38 <nm_usart_protocol_handler+0x38c>)
     902:	4a4c      	ldr	r2, [pc, #304]	; (a34 <nm_usart_protocol_handler+0x388>)
     904:	601a      	str	r2, [r3, #0]
				schedule_rx_length = 1;
     906:	4b49      	ldr	r3, [pc, #292]	; (a2c <nm_usart_protocol_handler+0x380>)
     908:	2201      	movs	r2, #1
     90a:	801a      	strh	r2, [r3, #0]
				schedule_rx = 1;
     90c:	4b4b      	ldr	r3, [pc, #300]	; (a3c <nm_usart_protocol_handler+0x390>)
     90e:	2201      	movs	r2, #1
     910:	701a      	strb	r2, [r3, #0]
				usart_tx_buffer[0] = 0x5A;
     912:	4b4b      	ldr	r3, [pc, #300]	; (a40 <nm_usart_protocol_handler+0x394>)
     914:	225a      	movs	r2, #90	; 0x5a
     916:	701a      	strb	r2, [r3, #0]
				//ptr_put(module,&response);
				usart_write_job(module,usart_tx_buffer[0]);
     918:	4b49      	ldr	r3, [pc, #292]	; (a40 <nm_usart_protocol_handler+0x394>)
     91a:	781b      	ldrb	r3, [r3, #0]
     91c:	b29a      	uxth	r2, r3
     91e:	687b      	ldr	r3, [r7, #4]
     920:	0011      	movs	r1, r2
     922:	0018      	movs	r0, r3
     924:	4b47      	ldr	r3, [pc, #284]	; (a44 <nm_usart_protocol_handler+0x398>)
     926:	4798      	blx	r3
			schedule_rx = 1;
			schedule_rx_length = 1;
			usart_tx_buffer[0] = 0xEA;
			usart_write_job(module,usart_tx_buffer[0]);
		}
		break;
     928:	e0e6      	b.n	af8 <nm_usart_protocol_handler+0x44c>
				//ptr_put(module,&response);
				usart_write_job(module,usart_tx_buffer[0]);
				//usart_read_job(module,&usart_cmd_recv_buffer[0]);
			}
			else {
				memcpy(&uart_cmd, uart_cmd_buf, sizeof(uart_cmd_hdr));
     92a:	4b4a      	ldr	r3, [pc, #296]	; (a54 <nm_usart_protocol_handler+0x3a8>)
     92c:	6819      	ldr	r1, [r3, #0]
     92e:	4b4b      	ldr	r3, [pc, #300]	; (a5c <nm_usart_protocol_handler+0x3b0>)
     930:	220c      	movs	r2, #12
     932:	0018      	movs	r0, r3
     934:	4b4a      	ldr	r3, [pc, #296]	; (a60 <nm_usart_protocol_handler+0x3b4>)
     936:	4798      	blx	r3
				//Process the Command.
				//uart_cmd = &module->rx_buffer_ptr[4];
				if((uart_cmd.cmd & 0xFF) == WRITE_BUFF) {
     938:	4b48      	ldr	r3, [pc, #288]	; (a5c <nm_usart_protocol_handler+0x3b0>)
     93a:	681b      	ldr	r3, [r3, #0]
     93c:	22ff      	movs	r2, #255	; 0xff
     93e:	4013      	ands	r3, r2
     940:	2b03      	cmp	r3, #3
     942:	d11e      	bne.n	982 <nm_usart_protocol_handler+0x2d6>
					usart_prot_handler_status = COLLECTING_PAYLOAD;
     944:	4b37      	ldr	r3, [pc, #220]	; (a24 <nm_usart_protocol_handler+0x378>)
     946:	2204      	movs	r2, #4
     948:	701a      	strb	r2, [r3, #0]
					payload_length = (uart_cmd.cmd >> 16) & 0xFFFF;
     94a:	4b44      	ldr	r3, [pc, #272]	; (a5c <nm_usart_protocol_handler+0x3b0>)
     94c:	681b      	ldr	r3, [r3, #0]
     94e:	0c1b      	lsrs	r3, r3, #16
     950:	b29a      	uxth	r2, r3
     952:	4b44      	ldr	r3, [pc, #272]	; (a64 <nm_usart_protocol_handler+0x3b8>)
     954:	801a      	strh	r2, [r3, #0]
					//target_address = uart_cmd.addr;
					schedule_rx = 1;
     956:	4b39      	ldr	r3, [pc, #228]	; (a3c <nm_usart_protocol_handler+0x390>)
     958:	2201      	movs	r2, #1
     95a:	701a      	strb	r2, [r3, #0]
					schedule_rx_buffer = &usart_payload_buffer[0];
     95c:	4b36      	ldr	r3, [pc, #216]	; (a38 <nm_usart_protocol_handler+0x38c>)
     95e:	4a42      	ldr	r2, [pc, #264]	; (a68 <nm_usart_protocol_handler+0x3bc>)
     960:	601a      	str	r2, [r3, #0]
					schedule_rx_length = payload_length;
     962:	4b40      	ldr	r3, [pc, #256]	; (a64 <nm_usart_protocol_handler+0x3b8>)
     964:	881a      	ldrh	r2, [r3, #0]
     966:	4b31      	ldr	r3, [pc, #196]	; (a2c <nm_usart_protocol_handler+0x380>)
     968:	801a      	strh	r2, [r3, #0]
					usart_tx_buffer[0] = 0xAC;
     96a:	4b35      	ldr	r3, [pc, #212]	; (a40 <nm_usart_protocol_handler+0x394>)
     96c:	22ac      	movs	r2, #172	; 0xac
     96e:	701a      	strb	r2, [r3, #0]
					usart_write_job(module,usart_tx_buffer[0]);
     970:	4b33      	ldr	r3, [pc, #204]	; (a40 <nm_usart_protocol_handler+0x394>)
     972:	781b      	ldrb	r3, [r3, #0]
     974:	b29a      	uxth	r2, r3
     976:	687b      	ldr	r3, [r7, #4]
     978:	0011      	movs	r1, r2
     97a:	0018      	movs	r0, r3
     97c:	4b31      	ldr	r3, [pc, #196]	; (a44 <nm_usart_protocol_handler+0x398>)
     97e:	4798      	blx	r3
			schedule_rx = 1;
			schedule_rx_length = 1;
			usart_tx_buffer[0] = 0xEA;
			usart_write_job(module,usart_tx_buffer[0]);
		}
		break;
     980:	e0ba      	b.n	af8 <nm_usart_protocol_handler+0x44c>
					schedule_rx_buffer = &usart_payload_buffer[0];
					schedule_rx_length = payload_length;
					usart_tx_buffer[0] = 0xAC;
					usart_write_job(module,usart_tx_buffer[0]);
				} 
				else if((uart_cmd.cmd & 0xFF) == WRITE_REG) {
     982:	4b36      	ldr	r3, [pc, #216]	; (a5c <nm_usart_protocol_handler+0x3b0>)
     984:	681b      	ldr	r3, [r3, #0]
     986:	22ff      	movs	r2, #255	; 0xff
     988:	4013      	ands	r3, r2
     98a:	2b01      	cmp	r3, #1
     98c:	d106      	bne.n	99c <nm_usart_protocol_handler+0x2f0>
					serial_command_pending = 1;
     98e:	4b37      	ldr	r3, [pc, #220]	; (a6c <nm_usart_protocol_handler+0x3c0>)
     990:	2201      	movs	r2, #1
     992:	701a      	strb	r2, [r3, #0]
					usart_prot_handler_status = PROCESSING;
     994:	4b23      	ldr	r3, [pc, #140]	; (a24 <nm_usart_protocol_handler+0x378>)
     996:	2205      	movs	r2, #5
     998:	701a      	strb	r2, [r3, #0]
			schedule_rx = 1;
			schedule_rx_length = 1;
			usart_tx_buffer[0] = 0xEA;
			usart_write_job(module,usart_tx_buffer[0]);
		}
		break;
     99a:	e0ad      	b.n	af8 <nm_usart_protocol_handler+0x44c>
				else if((uart_cmd.cmd & 0xFF) == WRITE_REG) {
					serial_command_pending = 1;
					usart_prot_handler_status = PROCESSING;
				}
				else {
					serial_command_pending = 1;
     99c:	4b33      	ldr	r3, [pc, #204]	; (a6c <nm_usart_protocol_handler+0x3c0>)
     99e:	2201      	movs	r2, #1
     9a0:	701a      	strb	r2, [r3, #0]
					//usart_prot_handler_status = PROCESSING;
					change_state = 1;
     9a2:	4b33      	ldr	r3, [pc, #204]	; (a70 <nm_usart_protocol_handler+0x3c4>)
     9a4:	2201      	movs	r2, #1
     9a6:	701a      	strb	r2, [r3, #0]
					new_state = PROCESSING;
     9a8:	4b32      	ldr	r3, [pc, #200]	; (a74 <nm_usart_protocol_handler+0x3c8>)
     9aa:	2205      	movs	r2, #5
     9ac:	701a      	strb	r2, [r3, #0]
					usart_tx_buffer[0] = 0xAC;
     9ae:	4b24      	ldr	r3, [pc, #144]	; (a40 <nm_usart_protocol_handler+0x394>)
     9b0:	22ac      	movs	r2, #172	; 0xac
     9b2:	701a      	strb	r2, [r3, #0]
					usart_write_job(module,usart_tx_buffer[0]);
     9b4:	4b22      	ldr	r3, [pc, #136]	; (a40 <nm_usart_protocol_handler+0x394>)
     9b6:	781b      	ldrb	r3, [r3, #0]
     9b8:	b29a      	uxth	r2, r3
     9ba:	687b      	ldr	r3, [r7, #4]
     9bc:	0011      	movs	r1, r2
     9be:	0018      	movs	r0, r3
     9c0:	4b20      	ldr	r3, [pc, #128]	; (a44 <nm_usart_protocol_handler+0x398>)
     9c2:	4798      	blx	r3
			schedule_rx = 1;
			schedule_rx_length = 1;
			usart_tx_buffer[0] = 0xEA;
			usart_write_job(module,usart_tx_buffer[0]);
		}
		break;
     9c4:	e098      	b.n	af8 <nm_usart_protocol_handler+0x44c>
					usart_tx_buffer[0] = 0xAC;
					usart_write_job(module,usart_tx_buffer[0]);
				}
			}
		}
		else if(event_name == USART_ERROR_ON_RECEPTION) {
     9c6:	1cfb      	adds	r3, r7, #3
     9c8:	781b      	ldrb	r3, [r3, #0]
     9ca:	2b02      	cmp	r3, #2
     9cc:	d000      	beq.n	9d0 <nm_usart_protocol_handler+0x324>
     9ce:	e093      	b.n	af8 <nm_usart_protocol_handler+0x44c>
			usart_prot_handler_status = WAIT_SYNC;
     9d0:	4b14      	ldr	r3, [pc, #80]	; (a24 <nm_usart_protocol_handler+0x378>)
     9d2:	2201      	movs	r2, #1
     9d4:	701a      	strb	r2, [r3, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     9d6:	4b18      	ldr	r3, [pc, #96]	; (a38 <nm_usart_protocol_handler+0x38c>)
     9d8:	4a16      	ldr	r2, [pc, #88]	; (a34 <nm_usart_protocol_handler+0x388>)
     9da:	601a      	str	r2, [r3, #0]
			schedule_rx = 1;
     9dc:	4b17      	ldr	r3, [pc, #92]	; (a3c <nm_usart_protocol_handler+0x390>)
     9de:	2201      	movs	r2, #1
     9e0:	701a      	strb	r2, [r3, #0]
			schedule_rx_length = 1;
     9e2:	4b12      	ldr	r3, [pc, #72]	; (a2c <nm_usart_protocol_handler+0x380>)
     9e4:	2201      	movs	r2, #1
     9e6:	801a      	strh	r2, [r3, #0]
			usart_tx_buffer[0] = 0xEA;
     9e8:	4b15      	ldr	r3, [pc, #84]	; (a40 <nm_usart_protocol_handler+0x394>)
     9ea:	22ea      	movs	r2, #234	; 0xea
     9ec:	701a      	strb	r2, [r3, #0]
			usart_write_job(module,usart_tx_buffer[0]);
     9ee:	4b14      	ldr	r3, [pc, #80]	; (a40 <nm_usart_protocol_handler+0x394>)
     9f0:	781b      	ldrb	r3, [r3, #0]
     9f2:	b29a      	uxth	r2, r3
     9f4:	687b      	ldr	r3, [r7, #4]
     9f6:	0011      	movs	r1, r2
     9f8:	0018      	movs	r0, r3
     9fa:	4b12      	ldr	r3, [pc, #72]	; (a44 <nm_usart_protocol_handler+0x398>)
     9fc:	4798      	blx	r3
		}
		break;
     9fe:	e07b      	b.n	af8 <nm_usart_protocol_handler+0x44c>
	case COLLECTING_PAYLOAD:
		if((event_name == USART_PKT_RECEIVED) && (schedule_rx_length == payload_length)) {
     a00:	1cfb      	adds	r3, r7, #3
     a02:	781b      	ldrb	r3, [r3, #0]
     a04:	2b00      	cmp	r3, #0
     a06:	d137      	bne.n	a78 <nm_usart_protocol_handler+0x3cc>
     a08:	4b08      	ldr	r3, [pc, #32]	; (a2c <nm_usart_protocol_handler+0x380>)
     a0a:	881a      	ldrh	r2, [r3, #0]
     a0c:	4b15      	ldr	r3, [pc, #84]	; (a64 <nm_usart_protocol_handler+0x3b8>)
     a0e:	881b      	ldrh	r3, [r3, #0]
     a10:	429a      	cmp	r2, r3
     a12:	d131      	bne.n	a78 <nm_usart_protocol_handler+0x3cc>
			serial_command_pending = 1;
     a14:	4b15      	ldr	r3, [pc, #84]	; (a6c <nm_usart_protocol_handler+0x3c0>)
     a16:	2201      	movs	r2, #1
     a18:	701a      	strb	r2, [r3, #0]
			usart_prot_handler_status = PROCESSING;
     a1a:	4b02      	ldr	r3, [pc, #8]	; (a24 <nm_usart_protocol_handler+0x378>)
     a1c:	2205      	movs	r2, #5
     a1e:	701a      	strb	r2, [r3, #0]
			schedule_rx_length = 1;
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
			schedule_rx = 1;
			usart_write_job(module,usart_tx_buffer[0]);
		}
		break;
     a20:	e06b      	b.n	afa <nm_usart_protocol_handler+0x44e>
     a22:	46c0      	nop			; (mov r8, r8)
     a24:	20000d40 	.word	0x20000d40
     a28:	0000d458 	.word	0x0000d458
     a2c:	20000d34 	.word	0x20000d34
     a30:	20000d3c 	.word	0x20000d3c
     a34:	20000900 	.word	0x20000900
     a38:	20000d38 	.word	0x20000d38
     a3c:	20000d36 	.word	0x20000d36
     a40:	20000d10 	.word	0x20000d10
     a44:	00003c91 	.word	0x00003c91
     a48:	20000904 	.word	0x20000904
     a4c:	00003cd9 	.word	0x00003cd9
     a50:	20000d43 	.word	0x20000d43
     a54:	20000d24 	.word	0x20000d24
     a58:	00003d65 	.word	0x00003d65
     a5c:	20000d28 	.word	0x20000d28
     a60:	00006d09 	.word	0x00006d09
     a64:	20000d44 	.word	0x20000d44
     a68:	20000910 	.word	0x20000910
     a6c:	20000d20 	.word	0x20000d20
     a70:	20000d42 	.word	0x20000d42
     a74:	20000d41 	.word	0x20000d41
	case COLLECTING_PAYLOAD:
		if((event_name == USART_PKT_RECEIVED) && (schedule_rx_length == payload_length)) {
			serial_command_pending = 1;
			usart_prot_handler_status = PROCESSING;
		}
		else if(event_name == USART_ERROR_ON_RECEPTION) {
     a78:	1cfb      	adds	r3, r7, #3
     a7a:	781b      	ldrb	r3, [r3, #0]
     a7c:	2b02      	cmp	r3, #2
     a7e:	d11a      	bne.n	ab6 <nm_usart_protocol_handler+0x40a>
			usart_prot_handler_status = WAIT_SYNC;
     a80:	4b20      	ldr	r3, [pc, #128]	; (b04 <nm_usart_protocol_handler+0x458>)
     a82:	2201      	movs	r2, #1
     a84:	701a      	strb	r2, [r3, #0]
			usart_tx_buffer[0] = 0xEA;
     a86:	4b20      	ldr	r3, [pc, #128]	; (b08 <nm_usart_protocol_handler+0x45c>)
     a88:	22ea      	movs	r2, #234	; 0xea
     a8a:	701a      	strb	r2, [r3, #0]
			usart_cmd_recv_buffer[0] = 0xFF;
     a8c:	4b1f      	ldr	r3, [pc, #124]	; (b0c <nm_usart_protocol_handler+0x460>)
     a8e:	22ff      	movs	r2, #255	; 0xff
     a90:	801a      	strh	r2, [r3, #0]
			schedule_rx_length = 1;
     a92:	4b1f      	ldr	r3, [pc, #124]	; (b10 <nm_usart_protocol_handler+0x464>)
     a94:	2201      	movs	r2, #1
     a96:	801a      	strh	r2, [r3, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     a98:	4b1e      	ldr	r3, [pc, #120]	; (b14 <nm_usart_protocol_handler+0x468>)
     a9a:	4a1c      	ldr	r2, [pc, #112]	; (b0c <nm_usart_protocol_handler+0x460>)
     a9c:	601a      	str	r2, [r3, #0]
			schedule_rx = 1;
     a9e:	4b1e      	ldr	r3, [pc, #120]	; (b18 <nm_usart_protocol_handler+0x46c>)
     aa0:	2201      	movs	r2, #1
     aa2:	701a      	strb	r2, [r3, #0]
			usart_write_job(module,usart_tx_buffer[0]);
     aa4:	4b18      	ldr	r3, [pc, #96]	; (b08 <nm_usart_protocol_handler+0x45c>)
     aa6:	781b      	ldrb	r3, [r3, #0]
     aa8:	b29a      	uxth	r2, r3
     aaa:	687b      	ldr	r3, [r7, #4]
     aac:	0011      	movs	r1, r2
     aae:	0018      	movs	r0, r3
     ab0:	4b1a      	ldr	r3, [pc, #104]	; (b1c <nm_usart_protocol_handler+0x470>)
     ab2:	4798      	blx	r3
			schedule_rx_length = 1;
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
			schedule_rx = 1;
			usart_write_job(module,usart_tx_buffer[0]);
		}
		break;
     ab4:	e021      	b.n	afa <nm_usart_protocol_handler+0x44e>
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
			schedule_rx = 1;
			usart_write_job(module,usart_tx_buffer[0]);
		}
		else {
			usart_prot_handler_status = WAIT_SYNC;
     ab6:	4b13      	ldr	r3, [pc, #76]	; (b04 <nm_usart_protocol_handler+0x458>)
     ab8:	2201      	movs	r2, #1
     aba:	701a      	strb	r2, [r3, #0]
			usart_tx_buffer[0] = 0x5A;
     abc:	4b12      	ldr	r3, [pc, #72]	; (b08 <nm_usart_protocol_handler+0x45c>)
     abe:	225a      	movs	r2, #90	; 0x5a
     ac0:	701a      	strb	r2, [r3, #0]
			usart_cmd_recv_buffer[0] = 0xFF;
     ac2:	4b12      	ldr	r3, [pc, #72]	; (b0c <nm_usart_protocol_handler+0x460>)
     ac4:	22ff      	movs	r2, #255	; 0xff
     ac6:	801a      	strh	r2, [r3, #0]
			schedule_rx_length = 1;
     ac8:	4b11      	ldr	r3, [pc, #68]	; (b10 <nm_usart_protocol_handler+0x464>)
     aca:	2201      	movs	r2, #1
     acc:	801a      	strh	r2, [r3, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     ace:	4b11      	ldr	r3, [pc, #68]	; (b14 <nm_usart_protocol_handler+0x468>)
     ad0:	4a0e      	ldr	r2, [pc, #56]	; (b0c <nm_usart_protocol_handler+0x460>)
     ad2:	601a      	str	r2, [r3, #0]
			schedule_rx = 1;
     ad4:	4b10      	ldr	r3, [pc, #64]	; (b18 <nm_usart_protocol_handler+0x46c>)
     ad6:	2201      	movs	r2, #1
     ad8:	701a      	strb	r2, [r3, #0]
			usart_write_job(module,usart_tx_buffer[0]);
     ada:	4b0b      	ldr	r3, [pc, #44]	; (b08 <nm_usart_protocol_handler+0x45c>)
     adc:	781b      	ldrb	r3, [r3, #0]
     ade:	b29a      	uxth	r2, r3
     ae0:	687b      	ldr	r3, [r7, #4]
     ae2:	0011      	movs	r1, r2
     ae4:	0018      	movs	r0, r3
     ae6:	4b0d      	ldr	r3, [pc, #52]	; (b1c <nm_usart_protocol_handler+0x470>)
     ae8:	4798      	blx	r3
		}
		break;
     aea:	e006      	b.n	afa <nm_usart_protocol_handler+0x44e>
	default:
		usart_prot_handler_status = WAIT_SYNC;		
     aec:	4b05      	ldr	r3, [pc, #20]	; (b04 <nm_usart_protocol_handler+0x458>)
     aee:	2201      	movs	r2, #1
     af0:	701a      	strb	r2, [r3, #0]
		break;
     af2:	e002      	b.n	afa <nm_usart_protocol_handler+0x44e>
					schedule_rx_length = 1;
					usart_read_job(module, &usart_cmd_recv_buffer[0]);
				}
			}
		}
			break;
     af4:	46c0      	nop			; (mov r8, r8)
     af6:	e000      	b.n	afa <nm_usart_protocol_handler+0x44e>
			schedule_rx = 1;
			schedule_rx_length = 1;
			usart_tx_buffer[0] = 0xEA;
			usart_write_job(module,usart_tx_buffer[0]);
		}
		break;
     af8:	46c0      	nop			; (mov r8, r8)
		usart_prot_handler_status = WAIT_SYNC;		
		break;
	}
#else
#endif
}
     afa:	46c0      	nop			; (mov r8, r8)
     afc:	46bd      	mov	sp, r7
     afe:	b004      	add	sp, #16
     b00:	bd80      	pop	{r7, pc}
     b02:	46c0      	nop			; (mov r8, r8)
     b04:	20000d40 	.word	0x20000d40
     b08:	20000d10 	.word	0x20000d10
     b0c:	20000900 	.word	0x20000900
     b10:	20000d34 	.word	0x20000d34
     b14:	20000d38 	.word	0x20000d38
     b18:	20000d36 	.word	0x20000d36
     b1c:	00003c91 	.word	0x00003c91

00000b20 <configure_console>:
/**
 *  Configure UART console.
 */
static void configure_console(uint32_t baud)
{
     b20:	b580      	push	{r7, lr}
     b22:	b092      	sub	sp, #72	; 0x48
     b24:	af00      	add	r7, sp, #0
     b26:	6078      	str	r0, [r7, #4]
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
     b28:	2308      	movs	r3, #8
     b2a:	18fb      	adds	r3, r7, r3
     b2c:	0018      	movs	r0, r3
     b2e:	4b25      	ldr	r3, [pc, #148]	; (bc4 <configure_console+0xa4>)
     b30:	4798      	blx	r3
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
     b32:	2308      	movs	r3, #8
     b34:	18fb      	adds	r3, r7, r3
     b36:	22c0      	movs	r2, #192	; 0xc0
     b38:	0392      	lsls	r2, r2, #14
     b3a:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
     b3c:	2308      	movs	r3, #8
     b3e:	18fb      	adds	r3, r7, r3
     b40:	2201      	movs	r2, #1
     b42:	4252      	negs	r2, r2
     b44:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
     b46:	2308      	movs	r3, #8
     b48:	18fb      	adds	r3, r7, r3
     b4a:	2201      	movs	r2, #1
     b4c:	4252      	negs	r2, r2
     b4e:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
     b50:	2308      	movs	r3, #8
     b52:	18fb      	adds	r3, r7, r3
     b54:	4a1c      	ldr	r2, [pc, #112]	; (bc8 <configure_console+0xa8>)
     b56:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
     b58:	2308      	movs	r3, #8
     b5a:	18fb      	adds	r3, r7, r3
     b5c:	4a1b      	ldr	r2, [pc, #108]	; (bcc <configure_console+0xac>)
     b5e:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = baud;
     b60:	2308      	movs	r3, #8
     b62:	18fb      	adds	r3, r7, r3
     b64:	687a      	ldr	r2, [r7, #4]
     b66:	621a      	str	r2, [r3, #32]
	//usart_conf.sample_rate = USART_SAMPLE_RATE_16X_FRACTIONAL;
	stdio_serial_init(&cdc_uart_module, CONF_STDIO_USART_MODULE, &usart_conf);
     b68:	2308      	movs	r3, #8
     b6a:	18fa      	adds	r2, r7, r3
     b6c:	4918      	ldr	r1, [pc, #96]	; (bd0 <configure_console+0xb0>)
     b6e:	4b19      	ldr	r3, [pc, #100]	; (bd4 <configure_console+0xb4>)
     b70:	0018      	movs	r0, r3
     b72:	4b19      	ldr	r3, [pc, #100]	; (bd8 <configure_console+0xb8>)
     b74:	4798      	blx	r3
	usart_register_callback(&cdc_uart_module,usart_rx_complete_handler,USART_CALLBACK_BUFFER_RECEIVED);
     b76:	4919      	ldr	r1, [pc, #100]	; (bdc <configure_console+0xbc>)
     b78:	4b16      	ldr	r3, [pc, #88]	; (bd4 <configure_console+0xb4>)
     b7a:	2201      	movs	r2, #1
     b7c:	0018      	movs	r0, r3
     b7e:	4b18      	ldr	r3, [pc, #96]	; (be0 <configure_console+0xc0>)
     b80:	4798      	blx	r3
	usart_register_callback(&cdc_uart_module,usart_tx_complete_handler,USART_CALLBACK_BUFFER_TRANSMITTED);
     b82:	4918      	ldr	r1, [pc, #96]	; (be4 <configure_console+0xc4>)
     b84:	4b13      	ldr	r3, [pc, #76]	; (bd4 <configure_console+0xb4>)
     b86:	2200      	movs	r2, #0
     b88:	0018      	movs	r0, r3
     b8a:	4b15      	ldr	r3, [pc, #84]	; (be0 <configure_console+0xc0>)
     b8c:	4798      	blx	r3
	usart_enable_callback(&cdc_uart_module,USART_CALLBACK_BUFFER_RECEIVED);
     b8e:	4b11      	ldr	r3, [pc, #68]	; (bd4 <configure_console+0xb4>)
     b90:	2101      	movs	r1, #1
     b92:	0018      	movs	r0, r3
     b94:	4b14      	ldr	r3, [pc, #80]	; (be8 <configure_console+0xc8>)
     b96:	4798      	blx	r3
	usart_enable_callback(&cdc_uart_module,USART_CALLBACK_BUFFER_TRANSMITTED);
     b98:	4b0e      	ldr	r3, [pc, #56]	; (bd4 <configure_console+0xb4>)
     b9a:	2100      	movs	r1, #0
     b9c:	0018      	movs	r0, r3
     b9e:	4b12      	ldr	r3, [pc, #72]	; (be8 <configure_console+0xc8>)
     ba0:	4798      	blx	r3
	//usart_register_callback(&cdc_uart_module,usart_err_handler,USART_CALLBACK_ERROR);
	//usart_enable_callback(&cdc_uart_module,USART_CALLBACK_ERROR);
	usart_enable(&cdc_uart_module);
     ba2:	4b0c      	ldr	r3, [pc, #48]	; (bd4 <configure_console+0xb4>)
     ba4:	0018      	movs	r0, r3
     ba6:	4b11      	ldr	r3, [pc, #68]	; (bec <configure_console+0xcc>)
     ba8:	4798      	blx	r3
	schedule_rx_length = 1;
     baa:	4b11      	ldr	r3, [pc, #68]	; (bf0 <configure_console+0xd0>)
     bac:	2201      	movs	r2, #1
     bae:	801a      	strh	r2, [r3, #0]
	usart_read_job(&cdc_uart_module,&usart_cmd_recv_buffer[0]);
     bb0:	4a10      	ldr	r2, [pc, #64]	; (bf4 <configure_console+0xd4>)
     bb2:	4b08      	ldr	r3, [pc, #32]	; (bd4 <configure_console+0xb4>)
     bb4:	0011      	movs	r1, r2
     bb6:	0018      	movs	r0, r3
     bb8:	4b0f      	ldr	r3, [pc, #60]	; (bf8 <configure_console+0xd8>)
     bba:	4798      	blx	r3
}
     bbc:	46c0      	nop			; (mov r8, r8)
     bbe:	46bd      	mov	sp, r7
     bc0:	b012      	add	sp, #72	; 0x48
     bc2:	bd80      	pop	{r7, pc}
     bc4:	000002ad 	.word	0x000002ad
     bc8:	00160002 	.word	0x00160002
     bcc:	00150003 	.word	0x00150003
     bd0:	42001400 	.word	0x42001400
     bd4:	200008c8 	.word	0x200008c8
     bd8:	000004c5 	.word	0x000004c5
     bdc:	000005b1 	.word	0x000005b1
     be0:	00003c49 	.word	0x00003c49
     be4:	00000535 	.word	0x00000535
     be8:	00000401 	.word	0x00000401
     bec:	0000036d 	.word	0x0000036d
     bf0:	20000d34 	.word	0x20000d34
     bf4:	20000900 	.word	0x20000900
     bf8:	00003cd9 	.word	0x00003cd9

00000bfc <enter_wifi_firmware_download>:

static sint8 enter_wifi_firmware_download(void)
{
     bfc:	b590      	push	{r4, r7, lr}
     bfe:	b083      	sub	sp, #12
     c00:	af00      	add	r7, sp, #0
	sint8 ret;
	//uint32 reg_val;
	static uint8_t done_programming = 0;
	//nm_bsp_start_timer(NULL, 500);
	ret = m2m_wifi_download_mode();
     c02:	1dfc      	adds	r4, r7, #7
     c04:	4b88      	ldr	r3, [pc, #544]	; (e28 <enter_wifi_firmware_download+0x22c>)
     c06:	4798      	blx	r3
     c08:	0003      	movs	r3, r0
     c0a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)
     c0c:	1dfb      	adds	r3, r7, #7
     c0e:	781b      	ldrb	r3, [r3, #0]
     c10:	b25b      	sxtb	r3, r3
     c12:	2b00      	cmp	r3, #0
     c14:	d100      	bne.n	c18 <enter_wifi_firmware_download+0x1c>
     c16:	e0fb      	b.n	e10 <enter_wifi_firmware_download+0x214>
	{
		M2M_ERR("Failed to put the WiFi Chip in download mode\n");
     c18:	23b6      	movs	r3, #182	; 0xb6
     c1a:	005a      	lsls	r2, r3, #1
     c1c:	4983      	ldr	r1, [pc, #524]	; (e2c <enter_wifi_firmware_download+0x230>)
     c1e:	4b84      	ldr	r3, [pc, #528]	; (e30 <enter_wifi_firmware_download+0x234>)
     c20:	0018      	movs	r0, r3
     c22:	4b84      	ldr	r3, [pc, #528]	; (e34 <enter_wifi_firmware_download+0x238>)
     c24:	4798      	blx	r3
     c26:	4b84      	ldr	r3, [pc, #528]	; (e38 <enter_wifi_firmware_download+0x23c>)
     c28:	0018      	movs	r0, r3
     c2a:	4b84      	ldr	r3, [pc, #528]	; (e3c <enter_wifi_firmware_download+0x240>)
     c2c:	4798      	blx	r3
     c2e:	200d      	movs	r0, #13
     c30:	4b83      	ldr	r3, [pc, #524]	; (e40 <enter_wifi_firmware_download+0x244>)
     c32:	4798      	blx	r3
		return M2M_ERR_INIT;
     c34:	2305      	movs	r3, #5
     c36:	425b      	negs	r3, r3
     c38:	e0f2      	b.n	e20 <enter_wifi_firmware_download+0x224>
	}
	//Program the WiFi chip here
	while(!done_programming) {
		if(usart_pkt_received) {
     c3a:	4b82      	ldr	r3, [pc, #520]	; (e44 <enter_wifi_firmware_download+0x248>)
     c3c:	781b      	ldrb	r3, [r3, #0]
     c3e:	2b00      	cmp	r3, #0
     c40:	d007      	beq.n	c52 <enter_wifi_firmware_download+0x56>
			usart_pkt_received = 0;
     c42:	4b80      	ldr	r3, [pc, #512]	; (e44 <enter_wifi_firmware_download+0x248>)
     c44:	2200      	movs	r2, #0
     c46:	701a      	strb	r2, [r3, #0]
			nm_usart_protocol_handler(&cdc_uart_module,USART_PKT_RECEIVED);
     c48:	4b7f      	ldr	r3, [pc, #508]	; (e48 <enter_wifi_firmware_download+0x24c>)
     c4a:	2100      	movs	r1, #0
     c4c:	0018      	movs	r0, r3
     c4e:	4b7f      	ldr	r3, [pc, #508]	; (e4c <enter_wifi_firmware_download+0x250>)
     c50:	4798      	blx	r3
			//usart_write_job(&cdc_uart_module,0xAC);
		}
		if(usart_err_on_reception) {
     c52:	4b7f      	ldr	r3, [pc, #508]	; (e50 <enter_wifi_firmware_download+0x254>)
     c54:	781b      	ldrb	r3, [r3, #0]
     c56:	2b00      	cmp	r3, #0
     c58:	d007      	beq.n	c6a <enter_wifi_firmware_download+0x6e>
			usart_err_on_reception = 0;
     c5a:	4b7d      	ldr	r3, [pc, #500]	; (e50 <enter_wifi_firmware_download+0x254>)
     c5c:	2200      	movs	r2, #0
     c5e:	701a      	strb	r2, [r3, #0]
			nm_usart_protocol_handler(&cdc_uart_module,USART_ERROR_ON_RECEPTION);
     c60:	4b79      	ldr	r3, [pc, #484]	; (e48 <enter_wifi_firmware_download+0x24c>)
     c62:	2102      	movs	r1, #2
     c64:	0018      	movs	r0, r3
     c66:	4b79      	ldr	r3, [pc, #484]	; (e4c <enter_wifi_firmware_download+0x250>)
     c68:	4798      	blx	r3
		}
		if(serial_command_pending && (usart_prot_handler_status == PROCESSING)) {
     c6a:	4b7a      	ldr	r3, [pc, #488]	; (e54 <enter_wifi_firmware_download+0x258>)
     c6c:	781b      	ldrb	r3, [r3, #0]
     c6e:	2b00      	cmp	r3, #0
     c70:	d100      	bne.n	c74 <enter_wifi_firmware_download+0x78>
     c72:	e0cd      	b.n	e10 <enter_wifi_firmware_download+0x214>
     c74:	4b78      	ldr	r3, [pc, #480]	; (e58 <enter_wifi_firmware_download+0x25c>)
     c76:	781b      	ldrb	r3, [r3, #0]
     c78:	2b05      	cmp	r3, #5
     c7a:	d000      	beq.n	c7e <enter_wifi_firmware_download+0x82>
     c7c:	e0c8      	b.n	e10 <enter_wifi_firmware_download+0x214>
			uint32_t temp;
			switch((uart_cmd.cmd) & 0xFF) {
     c7e:	4b77      	ldr	r3, [pc, #476]	; (e5c <enter_wifi_firmware_download+0x260>)
     c80:	681b      	ldr	r3, [r3, #0]
     c82:	22ff      	movs	r2, #255	; 0xff
     c84:	4013      	ands	r3, r2
     c86:	2b0a      	cmp	r3, #10
     c88:	d900      	bls.n	c8c <enter_wifi_firmware_download+0x90>
     c8a:	e0bd      	b.n	e08 <enter_wifi_firmware_download+0x20c>
     c8c:	009a      	lsls	r2, r3, #2
     c8e:	4b74      	ldr	r3, [pc, #464]	; (e60 <enter_wifi_firmware_download+0x264>)
     c90:	18d3      	adds	r3, r2, r3
     c92:	681b      	ldr	r3, [r3, #0]
     c94:	469f      	mov	pc, r3
				//Forward it to SERCOM0 SPI
				case READ_REG:
					//Transalate it to SPI Read register
					temp = nm_read_reg(uart_cmd.addr);
     c96:	4b71      	ldr	r3, [pc, #452]	; (e5c <enter_wifi_firmware_download+0x260>)
     c98:	685b      	ldr	r3, [r3, #4]
     c9a:	0018      	movs	r0, r3
     c9c:	4b71      	ldr	r3, [pc, #452]	; (e64 <enter_wifi_firmware_download+0x268>)
     c9e:	4798      	blx	r3
     ca0:	0003      	movs	r3, r0
     ca2:	603b      	str	r3, [r7, #0]
					usart_tx_buffer[0] = (uint8)(temp >> 0);
     ca4:	683b      	ldr	r3, [r7, #0]
     ca6:	b2da      	uxtb	r2, r3
     ca8:	4b6f      	ldr	r3, [pc, #444]	; (e68 <enter_wifi_firmware_download+0x26c>)
     caa:	701a      	strb	r2, [r3, #0]
					usart_tx_buffer[1] = (uint8)(temp >> 8);
     cac:	683b      	ldr	r3, [r7, #0]
     cae:	0a1b      	lsrs	r3, r3, #8
     cb0:	b2da      	uxtb	r2, r3
     cb2:	4b6d      	ldr	r3, [pc, #436]	; (e68 <enter_wifi_firmware_download+0x26c>)
     cb4:	705a      	strb	r2, [r3, #1]
					usart_tx_buffer[2] = (uint8)(temp >> 16);
     cb6:	683b      	ldr	r3, [r7, #0]
     cb8:	0c1b      	lsrs	r3, r3, #16
     cba:	b2da      	uxtb	r2, r3
     cbc:	4b6a      	ldr	r3, [pc, #424]	; (e68 <enter_wifi_firmware_download+0x26c>)
     cbe:	709a      	strb	r2, [r3, #2]
					usart_tx_buffer[3] = (uint8)(temp >> 24);
     cc0:	683b      	ldr	r3, [r7, #0]
     cc2:	0e1b      	lsrs	r3, r3, #24
     cc4:	b2da      	uxtb	r2, r3
     cc6:	4b68      	ldr	r3, [pc, #416]	; (e68 <enter_wifi_firmware_download+0x26c>)
     cc8:	70da      	strb	r2, [r3, #3]
					//usart_write_buffer_wait(&cdc_uart_module,&reg_val,sizeof(reg_val));
					schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     cca:	4b68      	ldr	r3, [pc, #416]	; (e6c <enter_wifi_firmware_download+0x270>)
     ccc:	4a68      	ldr	r2, [pc, #416]	; (e70 <enter_wifi_firmware_download+0x274>)
     cce:	601a      	str	r2, [r3, #0]
					schedule_rx_length = 1;
     cd0:	4b68      	ldr	r3, [pc, #416]	; (e74 <enter_wifi_firmware_download+0x278>)
     cd2:	2201      	movs	r2, #1
     cd4:	801a      	strh	r2, [r3, #0]
					schedule_rx = 1;
     cd6:	4b68      	ldr	r3, [pc, #416]	; (e78 <enter_wifi_firmware_download+0x27c>)
     cd8:	2201      	movs	r2, #1
     cda:	701a      	strb	r2, [r3, #0]
					//change_state = 1;
					//new_state = WAIT_SYNC;
					usart_prot_handler_status = WAIT_SYNC;
     cdc:	4b5e      	ldr	r3, [pc, #376]	; (e58 <enter_wifi_firmware_download+0x25c>)
     cde:	2201      	movs	r2, #1
     ce0:	701a      	strb	r2, [r3, #0]
					nm_usart_send_regval(&cdc_uart_module,&usart_tx_buffer[0],sizeof(uint32_t));
     ce2:	4961      	ldr	r1, [pc, #388]	; (e68 <enter_wifi_firmware_download+0x26c>)
     ce4:	4b58      	ldr	r3, [pc, #352]	; (e48 <enter_wifi_firmware_download+0x24c>)
     ce6:	2204      	movs	r2, #4
     ce8:	0018      	movs	r0, r3
     cea:	4b64      	ldr	r3, [pc, #400]	; (e7c <enter_wifi_firmware_download+0x280>)
     cec:	4798      	blx	r3
					break;
     cee:	e08c      	b.n	e0a <enter_wifi_firmware_download+0x20e>
				case WRITE_REG:
					//Transalate it to SPI Write register
					nm_write_reg(uart_cmd.addr,uart_cmd.val);
     cf0:	4b5a      	ldr	r3, [pc, #360]	; (e5c <enter_wifi_firmware_download+0x260>)
     cf2:	685a      	ldr	r2, [r3, #4]
     cf4:	4b59      	ldr	r3, [pc, #356]	; (e5c <enter_wifi_firmware_download+0x260>)
     cf6:	689b      	ldr	r3, [r3, #8]
     cf8:	0019      	movs	r1, r3
     cfa:	0010      	movs	r0, r2
     cfc:	4b60      	ldr	r3, [pc, #384]	; (e80 <enter_wifi_firmware_download+0x284>)
     cfe:	4798      	blx	r3
					schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     d00:	4b5a      	ldr	r3, [pc, #360]	; (e6c <enter_wifi_firmware_download+0x270>)
     d02:	4a5b      	ldr	r2, [pc, #364]	; (e70 <enter_wifi_firmware_download+0x274>)
     d04:	601a      	str	r2, [r3, #0]
					schedule_rx_length = 1;
     d06:	4b5b      	ldr	r3, [pc, #364]	; (e74 <enter_wifi_firmware_download+0x278>)
     d08:	2201      	movs	r2, #1
     d0a:	801a      	strh	r2, [r3, #0]
					schedule_rx = 1;
     d0c:	4b5a      	ldr	r3, [pc, #360]	; (e78 <enter_wifi_firmware_download+0x27c>)
     d0e:	2201      	movs	r2, #1
     d10:	701a      	strb	r2, [r3, #0]
					usart_tx_buffer[0] = 0xAC;
     d12:	4b55      	ldr	r3, [pc, #340]	; (e68 <enter_wifi_firmware_download+0x26c>)
     d14:	22ac      	movs	r2, #172	; 0xac
     d16:	701a      	strb	r2, [r3, #0]
					usart_prot_handler_status = WAIT_SYNC;
     d18:	4b4f      	ldr	r3, [pc, #316]	; (e58 <enter_wifi_firmware_download+0x25c>)
     d1a:	2201      	movs	r2, #1
     d1c:	701a      	strb	r2, [r3, #0]
					usart_write_job(&cdc_uart_module,usart_tx_buffer[0]);
     d1e:	4b52      	ldr	r3, [pc, #328]	; (e68 <enter_wifi_firmware_download+0x26c>)
     d20:	781b      	ldrb	r3, [r3, #0]
     d22:	b29a      	uxth	r2, r3
     d24:	4b48      	ldr	r3, [pc, #288]	; (e48 <enter_wifi_firmware_download+0x24c>)
     d26:	0011      	movs	r1, r2
     d28:	0018      	movs	r0, r3
     d2a:	4b56      	ldr	r3, [pc, #344]	; (e84 <enter_wifi_firmware_download+0x288>)
     d2c:	4798      	blx	r3
					break;
     d2e:	e06c      	b.n	e0a <enter_wifi_firmware_download+0x20e>
				case READ_BUFF:
				//Transalate it to SPI Read buffer
					nm_read_block(uart_cmd.addr, (uint8 *)&usart_payload_buffer[0],((uart_cmd.cmd >> 16) & 0xFFFF));
     d30:	4b4a      	ldr	r3, [pc, #296]	; (e5c <enter_wifi_firmware_download+0x260>)
     d32:	6858      	ldr	r0, [r3, #4]
     d34:	4b49      	ldr	r3, [pc, #292]	; (e5c <enter_wifi_firmware_download+0x260>)
     d36:	681b      	ldr	r3, [r3, #0]
     d38:	0c1a      	lsrs	r2, r3, #16
     d3a:	4b53      	ldr	r3, [pc, #332]	; (e88 <enter_wifi_firmware_download+0x28c>)
     d3c:	0019      	movs	r1, r3
     d3e:	4b53      	ldr	r3, [pc, #332]	; (e8c <enter_wifi_firmware_download+0x290>)
     d40:	4798      	blx	r3
					schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     d42:	4b4a      	ldr	r3, [pc, #296]	; (e6c <enter_wifi_firmware_download+0x270>)
     d44:	4a4a      	ldr	r2, [pc, #296]	; (e70 <enter_wifi_firmware_download+0x274>)
     d46:	601a      	str	r2, [r3, #0]
					schedule_rx_length = 1;
     d48:	4b4a      	ldr	r3, [pc, #296]	; (e74 <enter_wifi_firmware_download+0x278>)
     d4a:	2201      	movs	r2, #1
     d4c:	801a      	strh	r2, [r3, #0]
					schedule_rx = 1;
     d4e:	4b4a      	ldr	r3, [pc, #296]	; (e78 <enter_wifi_firmware_download+0x27c>)
     d50:	2201      	movs	r2, #1
     d52:	701a      	strb	r2, [r3, #0]
					usart_prot_handler_status = WAIT_SYNC;
     d54:	4b40      	ldr	r3, [pc, #256]	; (e58 <enter_wifi_firmware_download+0x25c>)
     d56:	2201      	movs	r2, #1
     d58:	701a      	strb	r2, [r3, #0]
					usart_write_buffer_job(&cdc_uart_module, (uint8 *)&usart_payload_buffer[0],((uart_cmd.cmd >> 16) & 0xFFFF));
     d5a:	4b40      	ldr	r3, [pc, #256]	; (e5c <enter_wifi_firmware_download+0x260>)
     d5c:	681b      	ldr	r3, [r3, #0]
     d5e:	0c1b      	lsrs	r3, r3, #16
     d60:	b29a      	uxth	r2, r3
     d62:	4949      	ldr	r1, [pc, #292]	; (e88 <enter_wifi_firmware_download+0x28c>)
     d64:	4b38      	ldr	r3, [pc, #224]	; (e48 <enter_wifi_firmware_download+0x24c>)
     d66:	0018      	movs	r0, r3
     d68:	4b49      	ldr	r3, [pc, #292]	; (e90 <enter_wifi_firmware_download+0x294>)
     d6a:	4798      	blx	r3
					break;
     d6c:	e04d      	b.n	e0a <enter_wifi_firmware_download+0x20e>
				case WRITE_BUFF:
					//Transalate it to SPI Write buffer
					nm_write_block(uart_cmd.addr, (uint8 *)&usart_payload_buffer[0],((uart_cmd.cmd >> 16) & 0xFFFF));
     d6e:	4b3b      	ldr	r3, [pc, #236]	; (e5c <enter_wifi_firmware_download+0x260>)
     d70:	6858      	ldr	r0, [r3, #4]
     d72:	4b3a      	ldr	r3, [pc, #232]	; (e5c <enter_wifi_firmware_download+0x260>)
     d74:	681b      	ldr	r3, [r3, #0]
     d76:	0c1a      	lsrs	r2, r3, #16
     d78:	4b43      	ldr	r3, [pc, #268]	; (e88 <enter_wifi_firmware_download+0x28c>)
     d7a:	0019      	movs	r1, r3
     d7c:	4b45      	ldr	r3, [pc, #276]	; (e94 <enter_wifi_firmware_download+0x298>)
     d7e:	4798      	blx	r3
					schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     d80:	4b3a      	ldr	r3, [pc, #232]	; (e6c <enter_wifi_firmware_download+0x270>)
     d82:	4a3b      	ldr	r2, [pc, #236]	; (e70 <enter_wifi_firmware_download+0x274>)
     d84:	601a      	str	r2, [r3, #0]
					schedule_rx_length = 1;
     d86:	4b3b      	ldr	r3, [pc, #236]	; (e74 <enter_wifi_firmware_download+0x278>)
     d88:	2201      	movs	r2, #1
     d8a:	801a      	strh	r2, [r3, #0]
					schedule_rx = 1;
     d8c:	4b3a      	ldr	r3, [pc, #232]	; (e78 <enter_wifi_firmware_download+0x27c>)
     d8e:	2201      	movs	r2, #1
     d90:	701a      	strb	r2, [r3, #0]
					usart_tx_buffer[0] = 0xAC;
     d92:	4b35      	ldr	r3, [pc, #212]	; (e68 <enter_wifi_firmware_download+0x26c>)
     d94:	22ac      	movs	r2, #172	; 0xac
     d96:	701a      	strb	r2, [r3, #0]
					usart_prot_handler_status = WAIT_SYNC;
     d98:	4b2f      	ldr	r3, [pc, #188]	; (e58 <enter_wifi_firmware_download+0x25c>)
     d9a:	2201      	movs	r2, #1
     d9c:	701a      	strb	r2, [r3, #0]
					usart_write_job(&cdc_uart_module,usart_tx_buffer[0]);
     d9e:	4b32      	ldr	r3, [pc, #200]	; (e68 <enter_wifi_firmware_download+0x26c>)
     da0:	781b      	ldrb	r3, [r3, #0]
     da2:	b29a      	uxth	r2, r3
     da4:	4b28      	ldr	r3, [pc, #160]	; (e48 <enter_wifi_firmware_download+0x24c>)
     da6:	0011      	movs	r1, r2
     da8:	0018      	movs	r0, r3
     daa:	4b36      	ldr	r3, [pc, #216]	; (e84 <enter_wifi_firmware_download+0x288>)
     dac:	4798      	blx	r3
					break;
     dae:	e02c      	b.n	e0a <enter_wifi_firmware_download+0x20e>
				case RECONFIGURE_UART:
					// Send the ack back
					usart_prot_handler_status = WAIT_SYNC;
     db0:	4b29      	ldr	r3, [pc, #164]	; (e58 <enter_wifi_firmware_download+0x25c>)
     db2:	2201      	movs	r2, #1
     db4:	701a      	strb	r2, [r3, #0]
					uart_reconfigure = 1;
     db6:	4b38      	ldr	r3, [pc, #224]	; (e98 <enter_wifi_firmware_download+0x29c>)
     db8:	2201      	movs	r2, #1
     dba:	701a      	strb	r2, [r3, #0]
					usart_disable(&cdc_uart_module);
     dbc:	4b22      	ldr	r3, [pc, #136]	; (e48 <enter_wifi_firmware_download+0x24c>)
     dbe:	0018      	movs	r0, r3
     dc0:	4b36      	ldr	r3, [pc, #216]	; (e9c <enter_wifi_firmware_download+0x2a0>)
     dc2:	4798      	blx	r3
					configure_console(uart_cmd.val);
     dc4:	4b25      	ldr	r3, [pc, #148]	; (e5c <enter_wifi_firmware_download+0x260>)
     dc6:	689b      	ldr	r3, [r3, #8]
     dc8:	0018      	movs	r0, r3
     dca:	4b35      	ldr	r3, [pc, #212]	; (ea0 <enter_wifi_firmware_download+0x2a4>)
     dcc:	4798      	blx	r3
					break;
     dce:	e01c      	b.n	e0a <enter_wifi_firmware_download+0x20e>
				case 10:
				//GPIO read command
					usart_tx_buffer[0] = port_pin_get_input_level(PIN_PB09);
     dd0:	2029      	movs	r0, #41	; 0x29
     dd2:	4b34      	ldr	r3, [pc, #208]	; (ea4 <enter_wifi_firmware_download+0x2a8>)
     dd4:	4798      	blx	r3
     dd6:	0003      	movs	r3, r0
     dd8:	001a      	movs	r2, r3
     dda:	4b23      	ldr	r3, [pc, #140]	; (e68 <enter_wifi_firmware_download+0x26c>)
     ddc:	701a      	strb	r2, [r3, #0]
					//usart_tx_buffer[0]= port_pin_get_output_level(PIN_PB09);
					schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     dde:	4b23      	ldr	r3, [pc, #140]	; (e6c <enter_wifi_firmware_download+0x270>)
     de0:	4a23      	ldr	r2, [pc, #140]	; (e70 <enter_wifi_firmware_download+0x274>)
     de2:	601a      	str	r2, [r3, #0]
					schedule_rx_length = 1;
     de4:	4b23      	ldr	r3, [pc, #140]	; (e74 <enter_wifi_firmware_download+0x278>)
     de6:	2201      	movs	r2, #1
     de8:	801a      	strh	r2, [r3, #0]
					schedule_rx = 1;
     dea:	4b23      	ldr	r3, [pc, #140]	; (e78 <enter_wifi_firmware_download+0x27c>)
     dec:	2201      	movs	r2, #1
     dee:	701a      	strb	r2, [r3, #0]
					usart_prot_handler_status = WAIT_SYNC;
     df0:	4b19      	ldr	r3, [pc, #100]	; (e58 <enter_wifi_firmware_download+0x25c>)
     df2:	2201      	movs	r2, #1
     df4:	701a      	strb	r2, [r3, #0]
					usart_write_job(&cdc_uart_module,usart_tx_buffer[0]);
     df6:	4b1c      	ldr	r3, [pc, #112]	; (e68 <enter_wifi_firmware_download+0x26c>)
     df8:	781b      	ldrb	r3, [r3, #0]
     dfa:	b29a      	uxth	r2, r3
     dfc:	4b12      	ldr	r3, [pc, #72]	; (e48 <enter_wifi_firmware_download+0x24c>)
     dfe:	0011      	movs	r1, r2
     e00:	0018      	movs	r0, r3
     e02:	4b20      	ldr	r3, [pc, #128]	; (e84 <enter_wifi_firmware_download+0x288>)
     e04:	4798      	blx	r3
					break;
     e06:	e000      	b.n	e0a <enter_wifi_firmware_download+0x20e>
				default:
					break;
     e08:	46c0      	nop			; (mov r8, r8)
			}
			serial_command_pending = 0;
     e0a:	4b12      	ldr	r3, [pc, #72]	; (e54 <enter_wifi_firmware_download+0x258>)
     e0c:	2200      	movs	r2, #0
     e0e:	701a      	strb	r2, [r3, #0]
	{
		M2M_ERR("Failed to put the WiFi Chip in download mode\n");
		return M2M_ERR_INIT;
	}
	//Program the WiFi chip here
	while(!done_programming) {
     e10:	4b25      	ldr	r3, [pc, #148]	; (ea8 <enter_wifi_firmware_download+0x2ac>)
     e12:	781b      	ldrb	r3, [r3, #0]
     e14:	2b00      	cmp	r3, #0
     e16:	d100      	bne.n	e1a <enter_wifi_firmware_download+0x21e>
     e18:	e70f      	b.n	c3a <enter_wifi_firmware_download+0x3e>
					break;
			}
			serial_command_pending = 0;
		}
	}
	return ret;
     e1a:	1dfb      	adds	r3, r7, #7
     e1c:	781b      	ldrb	r3, [r3, #0]
     e1e:	b25b      	sxtb	r3, r3
}
     e20:	0018      	movs	r0, r3
     e22:	46bd      	mov	sp, r7
     e24:	b003      	add	sp, #12
     e26:	bd90      	pop	{r4, r7, pc}
     e28:	000017ad 	.word	0x000017ad
     e2c:	0000d4dc 	.word	0x0000d4dc
     e30:	0000d46c 	.word	0x0000d46c
     e34:	00006e11 	.word	0x00006e11
     e38:	0000d480 	.word	0x0000d480
     e3c:	00006eb9 	.word	0x00006eb9
     e40:	00006e35 	.word	0x00006e35
     e44:	20000d21 	.word	0x20000d21
     e48:	200008c8 	.word	0x200008c8
     e4c:	000006ad 	.word	0x000006ad
     e50:	20000d22 	.word	0x20000d22
     e54:	20000d20 	.word	0x20000d20
     e58:	20000d40 	.word	0x20000d40
     e5c:	20000d28 	.word	0x20000d28
     e60:	0000d4b0 	.word	0x0000d4b0
     e64:	000019a9 	.word	0x000019a9
     e68:	20000d10 	.word	0x20000d10
     e6c:	20000d38 	.word	0x20000d38
     e70:	20000900 	.word	0x20000900
     e74:	20000d34 	.word	0x20000d34
     e78:	20000d36 	.word	0x20000d36
     e7c:	00000605 	.word	0x00000605
     e80:	000019ed 	.word	0x000019ed
     e84:	00003c91 	.word	0x00003c91
     e88:	20000910 	.word	0x20000910
     e8c:	00001a3d 	.word	0x00001a3d
     e90:	00003d0d 	.word	0x00003d0d
     e94:	00001b35 	.word	0x00001b35
     e98:	20000d43 	.word	0x20000d43
     e9c:	000003b5 	.word	0x000003b5
     ea0:	00000b21 	.word	0x00000b21
     ea4:	00000225 	.word	0x00000225
     ea8:	20000d46 	.word	0x20000d46

00000eac <main>:


int main (void)
{
     eac:	b590      	push	{r4, r7, lr}
     eae:	b085      	sub	sp, #20
     eb0:	af00      	add	r7, sp, #0

	sint8 ret = 0;
     eb2:	230f      	movs	r3, #15
     eb4:	18fb      	adds	r3, r7, r3
     eb6:	2200      	movs	r2, #0
     eb8:	701a      	strb	r2, [r3, #0]
	system_init();
     eba:	4b12      	ldr	r3, [pc, #72]	; (f04 <main+0x58>)
     ebc:	4798      	blx	r3
	/* Initialize the UART console. */
	configure_console(CONF_STDIO_BAUDRATE);
     ebe:	23e1      	movs	r3, #225	; 0xe1
     ec0:	025b      	lsls	r3, r3, #9
     ec2:	0018      	movs	r0, r3
     ec4:	4b10      	ldr	r3, [pc, #64]	; (f08 <main+0x5c>)
     ec6:	4798      	blx	r3
	/* Output example information */

	
	while(1)
	{
		nm_bsp_init();
     ec8:	4b10      	ldr	r3, [pc, #64]	; (f0c <main+0x60>)
     eca:	4798      	blx	r3
			
			struct extint_chan_conf config_extint_chan;

			//gpfIsr = pfIsr;

			extint_chan_get_config_defaults(&config_extint_chan);
     ecc:	003b      	movs	r3, r7
     ece:	0018      	movs	r0, r3
     ed0:	4b0f      	ldr	r3, [pc, #60]	; (f10 <main+0x64>)
     ed2:	4798      	blx	r3
			config_extint_chan.gpio_pin = CONF_WIFI_M2M_INT_PIN;
     ed4:	003b      	movs	r3, r7
     ed6:	2224      	movs	r2, #36	; 0x24
     ed8:	601a      	str	r2, [r3, #0]
			config_extint_chan.gpio_pin_mux = CONF_WIFI_M2M_INT_MUX;
     eda:	003b      	movs	r3, r7
     edc:	2200      	movs	r2, #0
     ede:	605a      	str	r2, [r3, #4]
			config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     ee0:	003b      	movs	r3, r7
     ee2:	2201      	movs	r2, #1
     ee4:	721a      	strb	r2, [r3, #8]
			config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     ee6:	003b      	movs	r3, r7
     ee8:	2202      	movs	r2, #2
     eea:	72da      	strb	r2, [r3, #11]

			extint_chan_set_config(CONF_WIFI_M2M_INT_EIC, &config_extint_chan);
     eec:	003b      	movs	r3, r7
     eee:	0019      	movs	r1, r3
     ef0:	2004      	movs	r0, #4
     ef2:	4b08      	ldr	r3, [pc, #32]	; (f14 <main+0x68>)
     ef4:	4798      	blx	r3
		}
		//nm_bsp_sleep(500);
		//system_interrupt_enable_global();
		ret = enter_wifi_firmware_download();
     ef6:	230f      	movs	r3, #15
     ef8:	18fc      	adds	r4, r7, r3
     efa:	4b07      	ldr	r3, [pc, #28]	; (f18 <main+0x6c>)
     efc:	4798      	blx	r3
     efe:	0003      	movs	r3, r0
     f00:	7023      	strb	r3, [r4, #0]
	}
     f02:	e7e1      	b.n	ec8 <main+0x1c>
     f04:	00006275 	.word	0x00006275
     f08:	00000b21 	.word	0x00000b21
     f0c:	00001079 	.word	0x00001079
     f10:	000001cd 	.word	0x000001cd
     f14:	000031b1 	.word	0x000031b1
     f18:	00000bfd 	.word	0x00000bfd

00000f1c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     f1c:	b580      	push	{r7, lr}
     f1e:	b084      	sub	sp, #16
     f20:	af00      	add	r7, sp, #0
     f22:	0002      	movs	r2, r0
     f24:	1dfb      	adds	r3, r7, #7
     f26:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     f28:	230f      	movs	r3, #15
     f2a:	18fb      	adds	r3, r7, r3
     f2c:	1dfa      	adds	r2, r7, #7
     f2e:	7812      	ldrb	r2, [r2, #0]
     f30:	09d2      	lsrs	r2, r2, #7
     f32:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     f34:	230e      	movs	r3, #14
     f36:	18fb      	adds	r3, r7, r3
     f38:	1dfa      	adds	r2, r7, #7
     f3a:	7812      	ldrb	r2, [r2, #0]
     f3c:	0952      	lsrs	r2, r2, #5
     f3e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     f40:	4b0d      	ldr	r3, [pc, #52]	; (f78 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     f42:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     f44:	230f      	movs	r3, #15
     f46:	18fb      	adds	r3, r7, r3
     f48:	781b      	ldrb	r3, [r3, #0]
     f4a:	2b00      	cmp	r3, #0
     f4c:	d10f      	bne.n	f6e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     f4e:	230f      	movs	r3, #15
     f50:	18fb      	adds	r3, r7, r3
     f52:	781b      	ldrb	r3, [r3, #0]
     f54:	009b      	lsls	r3, r3, #2
     f56:	2210      	movs	r2, #16
     f58:	4694      	mov	ip, r2
     f5a:	44bc      	add	ip, r7
     f5c:	4463      	add	r3, ip
     f5e:	3b08      	subs	r3, #8
     f60:	681a      	ldr	r2, [r3, #0]
     f62:	230e      	movs	r3, #14
     f64:	18fb      	adds	r3, r7, r3
     f66:	781b      	ldrb	r3, [r3, #0]
     f68:	01db      	lsls	r3, r3, #7
     f6a:	18d3      	adds	r3, r2, r3
     f6c:	e000      	b.n	f70 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     f6e:	2300      	movs	r3, #0
	}
}
     f70:	0018      	movs	r0, r3
     f72:	46bd      	mov	sp, r7
     f74:	b004      	add	sp, #16
     f76:	bd80      	pop	{r7, pc}
     f78:	41004400 	.word	0x41004400

00000f7c <system_interrupt_enable_global>:
 * \brief Enables global interrupts
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     f7c:	b580      	push	{r7, lr}
     f7e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     f80:	4b04      	ldr	r3, [pc, #16]	; (f94 <system_interrupt_enable_global+0x18>)
     f82:	2201      	movs	r2, #1
     f84:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     f86:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     f8a:	b662      	cpsie	i
}
     f8c:	46c0      	nop			; (mov r8, r8)
     f8e:	46bd      	mov	sp, r7
     f90:	bd80      	pop	{r7, pc}
     f92:	46c0      	nop			; (mov r8, r8)
     f94:	2000000c 	.word	0x2000000c

00000f98 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     f98:	b580      	push	{r7, lr}
     f9a:	b082      	sub	sp, #8
     f9c:	af00      	add	r7, sp, #0
     f9e:	0002      	movs	r2, r0
     fa0:	1dfb      	adds	r3, r7, #7
     fa2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     fa4:	1dfb      	adds	r3, r7, #7
     fa6:	781b      	ldrb	r3, [r3, #0]
     fa8:	0018      	movs	r0, r3
     faa:	4b03      	ldr	r3, [pc, #12]	; (fb8 <port_get_group_from_gpio_pin+0x20>)
     fac:	4798      	blx	r3
     fae:	0003      	movs	r3, r0
}
     fb0:	0018      	movs	r0, r3
     fb2:	46bd      	mov	sp, r7
     fb4:	b002      	add	sp, #8
     fb6:	bd80      	pop	{r7, pc}
     fb8:	00000f1d 	.word	0x00000f1d

00000fbc <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     fbc:	b580      	push	{r7, lr}
     fbe:	b082      	sub	sp, #8
     fc0:	af00      	add	r7, sp, #0
     fc2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     fc4:	687b      	ldr	r3, [r7, #4]
     fc6:	2200      	movs	r2, #0
     fc8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     fca:	687b      	ldr	r3, [r7, #4]
     fcc:	2201      	movs	r2, #1
     fce:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     fd0:	687b      	ldr	r3, [r7, #4]
     fd2:	2200      	movs	r2, #0
     fd4:	709a      	strb	r2, [r3, #2]
}
     fd6:	46c0      	nop			; (mov r8, r8)
     fd8:	46bd      	mov	sp, r7
     fda:	b002      	add	sp, #8
     fdc:	bd80      	pop	{r7, pc}
     fde:	46c0      	nop			; (mov r8, r8)

00000fe0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     fe0:	b580      	push	{r7, lr}
     fe2:	b084      	sub	sp, #16
     fe4:	af00      	add	r7, sp, #0
     fe6:	0002      	movs	r2, r0
     fe8:	1dfb      	adds	r3, r7, #7
     fea:	701a      	strb	r2, [r3, #0]
     fec:	1dbb      	adds	r3, r7, #6
     fee:	1c0a      	adds	r2, r1, #0
     ff0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     ff2:	1dfb      	adds	r3, r7, #7
     ff4:	781b      	ldrb	r3, [r3, #0]
     ff6:	0018      	movs	r0, r3
     ff8:	4b0d      	ldr	r3, [pc, #52]	; (1030 <port_pin_set_output_level+0x50>)
     ffa:	4798      	blx	r3
     ffc:	0003      	movs	r3, r0
     ffe:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1000:	1dfb      	adds	r3, r7, #7
    1002:	781b      	ldrb	r3, [r3, #0]
    1004:	221f      	movs	r2, #31
    1006:	4013      	ands	r3, r2
    1008:	2201      	movs	r2, #1
    100a:	409a      	lsls	r2, r3
    100c:	0013      	movs	r3, r2
    100e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1010:	1dbb      	adds	r3, r7, #6
    1012:	781b      	ldrb	r3, [r3, #0]
    1014:	2b00      	cmp	r3, #0
    1016:	d003      	beq.n	1020 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1018:	68fb      	ldr	r3, [r7, #12]
    101a:	68ba      	ldr	r2, [r7, #8]
    101c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    101e:	e002      	b.n	1026 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1020:	68fb      	ldr	r3, [r7, #12]
    1022:	68ba      	ldr	r2, [r7, #8]
    1024:	615a      	str	r2, [r3, #20]
	}
}
    1026:	46c0      	nop			; (mov r8, r8)
    1028:	46bd      	mov	sp, r7
    102a:	b004      	add	sp, #16
    102c:	bd80      	pop	{r7, pc}
    102e:	46c0      	nop			; (mov r8, r8)
    1030:	00000f99 	.word	0x00000f99

00001034 <init_chip_pins>:
 *	@author	M.S.M
 *	@date	11 July 2012
 *	@version	1.0
 */
static void init_chip_pins(void)
{
    1034:	b580      	push	{r7, lr}
    1036:	b082      	sub	sp, #8
    1038:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    103a:	1d3b      	adds	r3, r7, #4
    103c:	0018      	movs	r0, r3
    103e:	4b0c      	ldr	r3, [pc, #48]	; (1070 <init_chip_pins+0x3c>)
    1040:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1042:	1d3b      	adds	r3, r7, #4
    1044:	2201      	movs	r2, #1
    1046:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WIFI_M2M_RESET_PIN, &pin_conf);
    1048:	1d3b      	adds	r3, r7, #4
    104a:	0019      	movs	r1, r3
    104c:	2026      	movs	r0, #38	; 0x26
    104e:	4b09      	ldr	r3, [pc, #36]	; (1074 <init_chip_pins+0x40>)
    1050:	4798      	blx	r3
	port_pin_set_config(CONF_WIFI_M2M_CHIP_ENABLE_PIN, &pin_conf);
    1052:	1d3b      	adds	r3, r7, #4
    1054:	0019      	movs	r1, r3
    1056:	2025      	movs	r0, #37	; 0x25
    1058:	4b06      	ldr	r3, [pc, #24]	; (1074 <init_chip_pins+0x40>)
    105a:	4798      	blx	r3
	port_pin_set_config(CONF_WIFI_M2M_WAKE_PIN, &pin_conf);
    105c:	1d3b      	adds	r3, r7, #4
    105e:	0019      	movs	r1, r3
    1060:	2027      	movs	r0, #39	; 0x27
    1062:	4b04      	ldr	r3, [pc, #16]	; (1074 <init_chip_pins+0x40>)
    1064:	4798      	blx	r3
}
    1066:	46c0      	nop			; (mov r8, r8)
    1068:	46bd      	mov	sp, r7
    106a:	b002      	add	sp, #8
    106c:	bd80      	pop	{r7, pc}
    106e:	46c0      	nop			; (mov r8, r8)
    1070:	00000fbd 	.word	0x00000fbd
    1074:	00005359 	.word	0x00005359

00001078 <nm_bsp_init>:
 *	@author	M.S.M
 *	@date	11 July 2012
 *	@version	1.0
 */
sint8 nm_bsp_init(void)
{
    1078:	b580      	push	{r7, lr}
    107a:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    107c:	4b07      	ldr	r3, [pc, #28]	; (109c <nm_bsp_init+0x24>)
    107e:	2200      	movs	r2, #0
    1080:	601a      	str	r2, [r3, #0]

	init_chip_pins();
    1082:	4b07      	ldr	r3, [pc, #28]	; (10a0 <nm_bsp_init+0x28>)
    1084:	4798      	blx	r3

	/* Initialize the delay driver. */
	delay_init();
    1086:	4b07      	ldr	r3, [pc, #28]	; (10a4 <nm_bsp_init+0x2c>)
    1088:	4798      	blx	r3

	nm_bsp_reset();
    108a:	4b07      	ldr	r3, [pc, #28]	; (10a8 <nm_bsp_init+0x30>)
    108c:	4798      	blx	r3

	system_interrupt_enable_global();
    108e:	4b07      	ldr	r3, [pc, #28]	; (10ac <nm_bsp_init+0x34>)
    1090:	4798      	blx	r3

	return M2M_SUCCESS;
    1092:	2300      	movs	r3, #0
}
    1094:	0018      	movs	r0, r3
    1096:	46bd      	mov	sp, r7
    1098:	bd80      	pop	{r7, pc}
    109a:	46c0      	nop			; (mov r8, r8)
    109c:	20000d48 	.word	0x20000d48
    10a0:	00001035 	.word	0x00001035
    10a4:	00002e89 	.word	0x00002e89
    10a8:	000010b1 	.word	0x000010b1
    10ac:	00000f7d 	.word	0x00000f7d

000010b0 <nm_bsp_reset>:
 *	@author	M. Abdelmawla
 *	@date	11 July 2012
 *	@version	1.0
 */
void nm_bsp_reset(void)
{
    10b0:	b580      	push	{r7, lr}
    10b2:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WIFI_M2M_CHIP_ENABLE_PIN, false);
    10b4:	2100      	movs	r1, #0
    10b6:	2025      	movs	r0, #37	; 0x25
    10b8:	4b0c      	ldr	r3, [pc, #48]	; (10ec <nm_bsp_reset+0x3c>)
    10ba:	4798      	blx	r3
	port_pin_set_output_level(CONF_WIFI_M2M_RESET_PIN, false);
    10bc:	2100      	movs	r1, #0
    10be:	2026      	movs	r0, #38	; 0x26
    10c0:	4b0a      	ldr	r3, [pc, #40]	; (10ec <nm_bsp_reset+0x3c>)
    10c2:	4798      	blx	r3
	nm_bsp_sleep(100);
    10c4:	2064      	movs	r0, #100	; 0x64
    10c6:	4b0a      	ldr	r3, [pc, #40]	; (10f0 <nm_bsp_reset+0x40>)
    10c8:	4798      	blx	r3
	port_pin_set_output_level(CONF_WIFI_M2M_CHIP_ENABLE_PIN, true);
    10ca:	2101      	movs	r1, #1
    10cc:	2025      	movs	r0, #37	; 0x25
    10ce:	4b07      	ldr	r3, [pc, #28]	; (10ec <nm_bsp_reset+0x3c>)
    10d0:	4798      	blx	r3
	nm_bsp_sleep(10);
    10d2:	200a      	movs	r0, #10
    10d4:	4b06      	ldr	r3, [pc, #24]	; (10f0 <nm_bsp_reset+0x40>)
    10d6:	4798      	blx	r3
	port_pin_set_output_level(CONF_WIFI_M2M_RESET_PIN, true);
    10d8:	2101      	movs	r1, #1
    10da:	2026      	movs	r0, #38	; 0x26
    10dc:	4b03      	ldr	r3, [pc, #12]	; (10ec <nm_bsp_reset+0x3c>)
    10de:	4798      	blx	r3
	nm_bsp_sleep(100);
    10e0:	2064      	movs	r0, #100	; 0x64
    10e2:	4b03      	ldr	r3, [pc, #12]	; (10f0 <nm_bsp_reset+0x40>)
    10e4:	4798      	blx	r3
}
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	46bd      	mov	sp, r7
    10ea:	bd80      	pop	{r7, pc}
    10ec:	00000fe1 	.word	0x00000fe1
    10f0:	000010f5 	.word	0x000010f5

000010f4 <nm_bsp_sleep>:
 *	@author	M.S.M
 *	@date	28 OCT 2013
 *	@version	1.0
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    10f4:	b580      	push	{r7, lr}
    10f6:	b082      	sub	sp, #8
    10f8:	af00      	add	r7, sp, #0
    10fa:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
    10fc:	e002      	b.n	1104 <nm_bsp_sleep+0x10>
		delay_ms(1);
    10fe:	2001      	movs	r0, #1
    1100:	4b05      	ldr	r3, [pc, #20]	; (1118 <nm_bsp_sleep+0x24>)
    1102:	4798      	blx	r3
 *	@date	28 OCT 2013
 *	@version	1.0
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
    1104:	687b      	ldr	r3, [r7, #4]
    1106:	1e5a      	subs	r2, r3, #1
    1108:	607a      	str	r2, [r7, #4]
    110a:	2b00      	cmp	r3, #0
    110c:	d1f7      	bne.n	10fe <nm_bsp_sleep+0xa>
		delay_ms(1);
	}
}
    110e:	46c0      	nop			; (mov r8, r8)
    1110:	46bd      	mov	sp, r7
    1112:	b002      	add	sp, #8
    1114:	bd80      	pop	{r7, pc}
    1116:	46c0      	nop			; (mov r8, r8)
    1118:	00002ee1 	.word	0x00002ee1

0000111c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    111c:	b580      	push	{r7, lr}
    111e:	b084      	sub	sp, #16
    1120:	af00      	add	r7, sp, #0
    1122:	0002      	movs	r2, r0
    1124:	1dfb      	adds	r3, r7, #7
    1126:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1128:	230f      	movs	r3, #15
    112a:	18fb      	adds	r3, r7, r3
    112c:	1dfa      	adds	r2, r7, #7
    112e:	7812      	ldrb	r2, [r2, #0]
    1130:	09d2      	lsrs	r2, r2, #7
    1132:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1134:	230e      	movs	r3, #14
    1136:	18fb      	adds	r3, r7, r3
    1138:	1dfa      	adds	r2, r7, #7
    113a:	7812      	ldrb	r2, [r2, #0]
    113c:	0952      	lsrs	r2, r2, #5
    113e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1140:	4b0d      	ldr	r3, [pc, #52]	; (1178 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1142:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1144:	230f      	movs	r3, #15
    1146:	18fb      	adds	r3, r7, r3
    1148:	781b      	ldrb	r3, [r3, #0]
    114a:	2b00      	cmp	r3, #0
    114c:	d10f      	bne.n	116e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    114e:	230f      	movs	r3, #15
    1150:	18fb      	adds	r3, r7, r3
    1152:	781b      	ldrb	r3, [r3, #0]
    1154:	009b      	lsls	r3, r3, #2
    1156:	2210      	movs	r2, #16
    1158:	4694      	mov	ip, r2
    115a:	44bc      	add	ip, r7
    115c:	4463      	add	r3, ip
    115e:	3b08      	subs	r3, #8
    1160:	681a      	ldr	r2, [r3, #0]
    1162:	230e      	movs	r3, #14
    1164:	18fb      	adds	r3, r7, r3
    1166:	781b      	ldrb	r3, [r3, #0]
    1168:	01db      	lsls	r3, r3, #7
    116a:	18d3      	adds	r3, r2, r3
    116c:	e000      	b.n	1170 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    116e:	2300      	movs	r3, #0
	}
}
    1170:	0018      	movs	r0, r3
    1172:	46bd      	mov	sp, r7
    1174:	b004      	add	sp, #16
    1176:	bd80      	pop	{r7, pc}
    1178:	41004400 	.word	0x41004400

0000117c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    117c:	b580      	push	{r7, lr}
    117e:	b082      	sub	sp, #8
    1180:	af00      	add	r7, sp, #0
    1182:	0002      	movs	r2, r0
    1184:	1dfb      	adds	r3, r7, #7
    1186:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1188:	1dfb      	adds	r3, r7, #7
    118a:	781b      	ldrb	r3, [r3, #0]
    118c:	0018      	movs	r0, r3
    118e:	4b03      	ldr	r3, [pc, #12]	; (119c <port_get_group_from_gpio_pin+0x20>)
    1190:	4798      	blx	r3
    1192:	0003      	movs	r3, r0
}
    1194:	0018      	movs	r0, r3
    1196:	46bd      	mov	sp, r7
    1198:	b002      	add	sp, #8
    119a:	bd80      	pop	{r7, pc}
    119c:	0000111d 	.word	0x0000111d

000011a0 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    11a0:	b580      	push	{r7, lr}
    11a2:	b082      	sub	sp, #8
    11a4:	af00      	add	r7, sp, #0
    11a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    11a8:	687b      	ldr	r3, [r7, #4]
    11aa:	2200      	movs	r2, #0
    11ac:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    11ae:	687b      	ldr	r3, [r7, #4]
    11b0:	2201      	movs	r2, #1
    11b2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	2200      	movs	r2, #0
    11b8:	709a      	strb	r2, [r3, #2]
}
    11ba:	46c0      	nop			; (mov r8, r8)
    11bc:	46bd      	mov	sp, r7
    11be:	b002      	add	sp, #8
    11c0:	bd80      	pop	{r7, pc}
    11c2:	46c0      	nop			; (mov r8, r8)

000011c4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    11c4:	b580      	push	{r7, lr}
    11c6:	b084      	sub	sp, #16
    11c8:	af00      	add	r7, sp, #0
    11ca:	0002      	movs	r2, r0
    11cc:	1dfb      	adds	r3, r7, #7
    11ce:	701a      	strb	r2, [r3, #0]
    11d0:	1dbb      	adds	r3, r7, #6
    11d2:	1c0a      	adds	r2, r1, #0
    11d4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    11d6:	1dfb      	adds	r3, r7, #7
    11d8:	781b      	ldrb	r3, [r3, #0]
    11da:	0018      	movs	r0, r3
    11dc:	4b0d      	ldr	r3, [pc, #52]	; (1214 <port_pin_set_output_level+0x50>)
    11de:	4798      	blx	r3
    11e0:	0003      	movs	r3, r0
    11e2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    11e4:	1dfb      	adds	r3, r7, #7
    11e6:	781b      	ldrb	r3, [r3, #0]
    11e8:	221f      	movs	r2, #31
    11ea:	4013      	ands	r3, r2
    11ec:	2201      	movs	r2, #1
    11ee:	409a      	lsls	r2, r3
    11f0:	0013      	movs	r3, r2
    11f2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    11f4:	1dbb      	adds	r3, r7, #6
    11f6:	781b      	ldrb	r3, [r3, #0]
    11f8:	2b00      	cmp	r3, #0
    11fa:	d003      	beq.n	1204 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    11fc:	68fb      	ldr	r3, [r7, #12]
    11fe:	68ba      	ldr	r2, [r7, #8]
    1200:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    1202:	e002      	b.n	120a <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1204:	68fb      	ldr	r3, [r7, #12]
    1206:	68ba      	ldr	r2, [r7, #8]
    1208:	615a      	str	r2, [r3, #20]
	}
}
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	46bd      	mov	sp, r7
    120e:	b004      	add	sp, #16
    1210:	bd80      	pop	{r7, pc}
    1212:	46c0      	nop			; (mov r8, r8)
    1214:	0000117d 	.word	0x0000117d

00001218 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    1218:	b580      	push	{r7, lr}
    121a:	b084      	sub	sp, #16
    121c:	af00      	add	r7, sp, #0
    121e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1220:	687b      	ldr	r3, [r7, #4]
    1222:	681b      	ldr	r3, [r3, #0]
    1224:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    1226:	68fb      	ldr	r3, [r7, #12]
    1228:	69db      	ldr	r3, [r3, #28]
    122a:	1e5a      	subs	r2, r3, #1
    122c:	4193      	sbcs	r3, r2
    122e:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    1230:	0018      	movs	r0, r3
    1232:	46bd      	mov	sp, r7
    1234:	b004      	add	sp, #16
    1236:	bd80      	pop	{r7, pc}

00001238 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    1238:	b580      	push	{r7, lr}
    123a:	b082      	sub	sp, #8
    123c:	af00      	add	r7, sp, #0
    123e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    1240:	687b      	ldr	r3, [r7, #4]
    1242:	2201      	movs	r2, #1
    1244:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	2200      	movs	r2, #0
    124a:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    124c:	687b      	ldr	r3, [r7, #4]
    124e:	2200      	movs	r2, #0
    1250:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    1252:	687b      	ldr	r3, [r7, #4]
    1254:	22c0      	movs	r2, #192	; 0xc0
    1256:	0392      	lsls	r2, r2, #14
    1258:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    125a:	687b      	ldr	r3, [r7, #4]
    125c:	2200      	movs	r2, #0
    125e:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    1260:	687b      	ldr	r3, [r7, #4]
    1262:	2200      	movs	r2, #0
    1264:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    1266:	687b      	ldr	r3, [r7, #4]
    1268:	2201      	movs	r2, #1
    126a:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    126c:	687b      	ldr	r3, [r7, #4]
    126e:	2201      	movs	r2, #1
    1270:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    1272:	687b      	ldr	r3, [r7, #4]
    1274:	2200      	movs	r2, #0
    1276:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    1278:	687b      	ldr	r3, [r7, #4]
    127a:	2224      	movs	r2, #36	; 0x24
    127c:	2100      	movs	r1, #0
    127e:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1280:	687b      	ldr	r3, [r7, #4]
    1282:	3318      	adds	r3, #24
    1284:	220c      	movs	r2, #12
    1286:	2100      	movs	r1, #0
    1288:	0018      	movs	r0, r3
    128a:	4b0a      	ldr	r3, [pc, #40]	; (12b4 <spi_get_config_defaults+0x7c>)
    128c:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    128e:	687b      	ldr	r3, [r7, #4]
    1290:	4a09      	ldr	r2, [pc, #36]	; (12b8 <spi_get_config_defaults+0x80>)
    1292:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    1294:	687b      	ldr	r3, [r7, #4]
    1296:	2200      	movs	r2, #0
    1298:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    129a:	687b      	ldr	r3, [r7, #4]
    129c:	2200      	movs	r2, #0
    129e:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    12a0:	687b      	ldr	r3, [r7, #4]
    12a2:	2200      	movs	r2, #0
    12a4:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    12a6:	687b      	ldr	r3, [r7, #4]
    12a8:	2200      	movs	r2, #0
    12aa:	635a      	str	r2, [r3, #52]	; 0x34

};
    12ac:	46c0      	nop			; (mov r8, r8)
    12ae:	46bd      	mov	sp, r7
    12b0:	b002      	add	sp, #8
    12b2:	bd80      	pop	{r7, pc}
    12b4:	00006d85 	.word	0x00006d85
    12b8:	000186a0 	.word	0x000186a0

000012bc <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    12bc:	b580      	push	{r7, lr}
    12be:	b082      	sub	sp, #8
    12c0:	af00      	add	r7, sp, #0
    12c2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    12c4:	687b      	ldr	r3, [r7, #4]
    12c6:	220a      	movs	r2, #10
    12c8:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    12ca:	687b      	ldr	r3, [r7, #4]
    12cc:	2200      	movs	r2, #0
    12ce:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    12d0:	687b      	ldr	r3, [r7, #4]
    12d2:	2200      	movs	r2, #0
    12d4:	709a      	strb	r2, [r3, #2]
}
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	46bd      	mov	sp, r7
    12da:	b002      	add	sp, #8
    12dc:	bd80      	pop	{r7, pc}
    12de:	46c0      	nop			; (mov r8, r8)

000012e0 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
    12e0:	b580      	push	{r7, lr}
    12e2:	b084      	sub	sp, #16
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
    12e8:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    12ea:	683b      	ldr	r3, [r7, #0]
    12ec:	781a      	ldrb	r2, [r3, #0]
    12ee:	687b      	ldr	r3, [r7, #4]
    12f0:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    12f2:	683b      	ldr	r3, [r7, #0]
    12f4:	785a      	ldrb	r2, [r3, #1]
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    12fa:	683b      	ldr	r3, [r7, #0]
    12fc:	789a      	ldrb	r2, [r3, #2]
    12fe:	687b      	ldr	r3, [r7, #4]
    1300:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    1302:	230c      	movs	r3, #12
    1304:	18fb      	adds	r3, r7, r3
    1306:	0018      	movs	r0, r3
    1308:	4b0b      	ldr	r3, [pc, #44]	; (1338 <spi_attach_slave+0x58>)
    130a:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    130c:	230c      	movs	r3, #12
    130e:	18fb      	adds	r3, r7, r3
    1310:	2201      	movs	r2, #1
    1312:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1314:	687b      	ldr	r3, [r7, #4]
    1316:	781b      	ldrb	r3, [r3, #0]
    1318:	220c      	movs	r2, #12
    131a:	18ba      	adds	r2, r7, r2
    131c:	0011      	movs	r1, r2
    131e:	0018      	movs	r0, r3
    1320:	4b06      	ldr	r3, [pc, #24]	; (133c <spi_attach_slave+0x5c>)
    1322:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1324:	687b      	ldr	r3, [r7, #4]
    1326:	781b      	ldrb	r3, [r3, #0]
    1328:	2101      	movs	r1, #1
    132a:	0018      	movs	r0, r3
    132c:	4b04      	ldr	r3, [pc, #16]	; (1340 <spi_attach_slave+0x60>)
    132e:	4798      	blx	r3
}
    1330:	46c0      	nop			; (mov r8, r8)
    1332:	46bd      	mov	sp, r7
    1334:	b004      	add	sp, #16
    1336:	bd80      	pop	{r7, pc}
    1338:	000011a1 	.word	0x000011a1
    133c:	00005359 	.word	0x00005359
    1340:	000011c5 	.word	0x000011c5

00001344 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    1344:	b580      	push	{r7, lr}
    1346:	b084      	sub	sp, #16
    1348:	af00      	add	r7, sp, #0
    134a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    134c:	687b      	ldr	r3, [r7, #4]
    134e:	681b      	ldr	r3, [r3, #0]
    1350:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    1352:	46c0      	nop			; (mov r8, r8)
    1354:	687b      	ldr	r3, [r7, #4]
    1356:	0018      	movs	r0, r3
    1358:	4b06      	ldr	r3, [pc, #24]	; (1374 <spi_enable+0x30>)
    135a:	4798      	blx	r3
    135c:	1e03      	subs	r3, r0, #0
    135e:	d1f9      	bne.n	1354 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1360:	68fb      	ldr	r3, [r7, #12]
    1362:	681b      	ldr	r3, [r3, #0]
    1364:	2202      	movs	r2, #2
    1366:	431a      	orrs	r2, r3
    1368:	68fb      	ldr	r3, [r7, #12]
    136a:	601a      	str	r2, [r3, #0]
}
    136c:	46c0      	nop			; (mov r8, r8)
    136e:	46bd      	mov	sp, r7
    1370:	b004      	add	sp, #16
    1372:	bd80      	pop	{r7, pc}
    1374:	00001219 	.word	0x00001219

00001378 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    1378:	b580      	push	{r7, lr}
    137a:	b084      	sub	sp, #16
    137c:	af00      	add	r7, sp, #0
    137e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1380:	687b      	ldr	r3, [r7, #4]
    1382:	681b      	ldr	r3, [r3, #0]
    1384:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1386:	68fb      	ldr	r3, [r7, #12]
    1388:	7e1b      	ldrb	r3, [r3, #24]
    138a:	b2db      	uxtb	r3, r3
    138c:	001a      	movs	r2, r3
    138e:	2302      	movs	r3, #2
    1390:	4013      	ands	r3, r2
    1392:	1e5a      	subs	r2, r3, #1
    1394:	4193      	sbcs	r3, r2
    1396:	b2db      	uxtb	r3, r3
}
    1398:	0018      	movs	r0, r3
    139a:	46bd      	mov	sp, r7
    139c:	b004      	add	sp, #16
    139e:	bd80      	pop	{r7, pc}

000013a0 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    13a0:	b580      	push	{r7, lr}
    13a2:	b084      	sub	sp, #16
    13a4:	af00      	add	r7, sp, #0
    13a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    13a8:	687b      	ldr	r3, [r7, #4]
    13aa:	681b      	ldr	r3, [r3, #0]
    13ac:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    13ae:	68fb      	ldr	r3, [r7, #12]
    13b0:	7e1b      	ldrb	r3, [r3, #24]
    13b2:	b2db      	uxtb	r3, r3
    13b4:	001a      	movs	r2, r3
    13b6:	2301      	movs	r3, #1
    13b8:	4013      	ands	r3, r2
    13ba:	1e5a      	subs	r2, r3, #1
    13bc:	4193      	sbcs	r3, r2
    13be:	b2db      	uxtb	r3, r3
}
    13c0:	0018      	movs	r0, r3
    13c2:	46bd      	mov	sp, r7
    13c4:	b004      	add	sp, #16
    13c6:	bd80      	pop	{r7, pc}

000013c8 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    13c8:	b580      	push	{r7, lr}
    13ca:	b084      	sub	sp, #16
    13cc:	af00      	add	r7, sp, #0
    13ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    13d0:	687b      	ldr	r3, [r7, #4]
    13d2:	681b      	ldr	r3, [r3, #0]
    13d4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    13d6:	68fb      	ldr	r3, [r7, #12]
    13d8:	7e1b      	ldrb	r3, [r3, #24]
    13da:	b2db      	uxtb	r3, r3
    13dc:	001a      	movs	r2, r3
    13de:	2304      	movs	r3, #4
    13e0:	4013      	ands	r3, r2
    13e2:	1e5a      	subs	r2, r3, #1
    13e4:	4193      	sbcs	r3, r2
    13e6:	b2db      	uxtb	r3, r3
}
    13e8:	0018      	movs	r0, r3
    13ea:	46bd      	mov	sp, r7
    13ec:	b004      	add	sp, #16
    13ee:	bd80      	pop	{r7, pc}

000013f0 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    13f0:	b580      	push	{r7, lr}
    13f2:	b084      	sub	sp, #16
    13f4:	af00      	add	r7, sp, #0
    13f6:	6078      	str	r0, [r7, #4]
    13f8:	000a      	movs	r2, r1
    13fa:	1cbb      	adds	r3, r7, #2
    13fc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    13fe:	687b      	ldr	r3, [r7, #4]
    1400:	681b      	ldr	r3, [r3, #0]
    1402:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1404:	687b      	ldr	r3, [r7, #4]
    1406:	0018      	movs	r0, r3
    1408:	4b0a      	ldr	r3, [pc, #40]	; (1434 <spi_write+0x44>)
    140a:	4798      	blx	r3
    140c:	0003      	movs	r3, r0
    140e:	001a      	movs	r2, r3
    1410:	2301      	movs	r3, #1
    1412:	4053      	eors	r3, r2
    1414:	b2db      	uxtb	r3, r3
    1416:	2b00      	cmp	r3, #0
    1418:	d001      	beq.n	141e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    141a:	2305      	movs	r3, #5
    141c:	e006      	b.n	142c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    141e:	1cbb      	adds	r3, r7, #2
    1420:	881b      	ldrh	r3, [r3, #0]
    1422:	05db      	lsls	r3, r3, #23
    1424:	0dda      	lsrs	r2, r3, #23
    1426:	68fb      	ldr	r3, [r7, #12]
    1428:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    142a:	2300      	movs	r3, #0
}
    142c:	0018      	movs	r0, r3
    142e:	46bd      	mov	sp, r7
    1430:	b004      	add	sp, #16
    1432:	bd80      	pop	{r7, pc}
    1434:	000013a1 	.word	0x000013a1

00001438 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    1438:	b580      	push	{r7, lr}
    143a:	b084      	sub	sp, #16
    143c:	af00      	add	r7, sp, #0
    143e:	6078      	str	r0, [r7, #4]
    1440:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1442:	687b      	ldr	r3, [r7, #4]
    1444:	681b      	ldr	r3, [r3, #0]
    1446:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1448:	687b      	ldr	r3, [r7, #4]
    144a:	0018      	movs	r0, r3
    144c:	4b1d      	ldr	r3, [pc, #116]	; (14c4 <spi_read+0x8c>)
    144e:	4798      	blx	r3
    1450:	0003      	movs	r3, r0
    1452:	001a      	movs	r2, r3
    1454:	2301      	movs	r3, #1
    1456:	4053      	eors	r3, r2
    1458:	b2db      	uxtb	r3, r3
    145a:	2b00      	cmp	r3, #0
    145c:	d001      	beq.n	1462 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    145e:	2310      	movs	r3, #16
    1460:	e02c      	b.n	14bc <spi_read+0x84>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    1462:	230f      	movs	r3, #15
    1464:	18fb      	adds	r3, r7, r3
    1466:	2200      	movs	r2, #0
    1468:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    146a:	68bb      	ldr	r3, [r7, #8]
    146c:	8b5b      	ldrh	r3, [r3, #26]
    146e:	b29b      	uxth	r3, r3
    1470:	001a      	movs	r2, r3
    1472:	2304      	movs	r3, #4
    1474:	4013      	ands	r3, r2
    1476:	d00b      	beq.n	1490 <spi_read+0x58>
		retval = STATUS_ERR_OVERFLOW;
    1478:	230f      	movs	r3, #15
    147a:	18fb      	adds	r3, r7, r3
    147c:	221e      	movs	r2, #30
    147e:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1480:	68bb      	ldr	r3, [r7, #8]
    1482:	8b5b      	ldrh	r3, [r3, #26]
    1484:	b29b      	uxth	r3, r3
    1486:	2204      	movs	r2, #4
    1488:	4313      	orrs	r3, r2
    148a:	b29a      	uxth	r2, r3
    148c:	68bb      	ldr	r3, [r7, #8]
    148e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1490:	687b      	ldr	r3, [r7, #4]
    1492:	799b      	ldrb	r3, [r3, #6]
    1494:	2b01      	cmp	r3, #1
    1496:	d108      	bne.n	14aa <spi_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1498:	68bb      	ldr	r3, [r7, #8]
    149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    149c:	b29b      	uxth	r3, r3
    149e:	05db      	lsls	r3, r3, #23
    14a0:	0ddb      	lsrs	r3, r3, #23
    14a2:	b29a      	uxth	r2, r3
    14a4:	683b      	ldr	r3, [r7, #0]
    14a6:	801a      	strh	r2, [r3, #0]
    14a8:	e005      	b.n	14b6 <spi_read+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    14aa:	68bb      	ldr	r3, [r7, #8]
    14ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14ae:	b2db      	uxtb	r3, r3
    14b0:	b29a      	uxth	r2, r3
    14b2:	683b      	ldr	r3, [r7, #0]
    14b4:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    14b6:	230f      	movs	r3, #15
    14b8:	18fb      	adds	r3, r7, r3
    14ba:	781b      	ldrb	r3, [r3, #0]
}
    14bc:	0018      	movs	r0, r3
    14be:	46bd      	mov	sp, r7
    14c0:	b004      	add	sp, #16
    14c2:	bd80      	pop	{r7, pc}
    14c4:	000013c9 	.word	0x000013c9

000014c8 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    14c8:	b580      	push	{r7, lr}
    14ca:	b086      	sub	sp, #24
    14cc:	af00      	add	r7, sp, #0
    14ce:	60f8      	str	r0, [r7, #12]
    14d0:	60b9      	str	r1, [r7, #8]
    14d2:	1dbb      	adds	r3, r7, #6
    14d4:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
    14d6:	2313      	movs	r3, #19
    14d8:	18fb      	adds	r3, r7, r3
    14da:	2200      	movs	r2, #0
    14dc:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    14de:	2317      	movs	r3, #23
    14e0:	18fb      	adds	r3, r7, r3
    14e2:	2200      	movs	r2, #0
    14e4:	701a      	strb	r2, [r3, #0]
    14e6:	2316      	movs	r3, #22
    14e8:	18fb      	adds	r3, r7, r3
    14ea:	2200      	movs	r2, #0
    14ec:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
    14ee:	2314      	movs	r3, #20
    14f0:	18fb      	adds	r3, r7, r3
    14f2:	2200      	movs	r2, #0
    14f4:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
    14f6:	2310      	movs	r3, #16
    14f8:	18fb      	adds	r3, r7, r3
    14fa:	2200      	movs	r2, #0
    14fc:	801a      	strh	r2, [r3, #0]

	if (!pu8Mosi) {
    14fe:	68fb      	ldr	r3, [r7, #12]
    1500:	2b00      	cmp	r3, #0
    1502:	d107      	bne.n	1514 <spi_rw+0x4c>
		pu8Mosi = &u8Dummy;
    1504:	2313      	movs	r3, #19
    1506:	18fb      	adds	r3, r7, r3
    1508:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
    150a:	2317      	movs	r3, #23
    150c:	18fb      	adds	r3, r7, r3
    150e:	2201      	movs	r2, #1
    1510:	701a      	strb	r2, [r3, #0]
    1512:	e00d      	b.n	1530 <spi_rw+0x68>
	}
	else if(!pu8Miso) {
    1514:	68bb      	ldr	r3, [r7, #8]
    1516:	2b00      	cmp	r3, #0
    1518:	d107      	bne.n	152a <spi_rw+0x62>
		pu8Miso = &u8Dummy;
    151a:	2313      	movs	r3, #19
    151c:	18fb      	adds	r3, r7, r3
    151e:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
    1520:	2316      	movs	r3, #22
    1522:	18fb      	adds	r3, r7, r3
    1524:	2201      	movs	r2, #1
    1526:	701a      	strb	r2, [r3, #0]
    1528:	e002      	b.n	1530 <spi_rw+0x68>
	}
	else {
		return M2M_ERR_BUS_FAIL;
    152a:	2306      	movs	r3, #6
    152c:	425b      	negs	r3, r3
    152e:	e06a      	b.n	1606 <spi_rw+0x13e>
	}

	spi_select_slave(&master, &slave_inst, true);
    1530:	4937      	ldr	r1, [pc, #220]	; (1610 <spi_rw+0x148>)
    1532:	4b38      	ldr	r3, [pc, #224]	; (1614 <spi_rw+0x14c>)
    1534:	2201      	movs	r2, #1
    1536:	0018      	movs	r0, r3
    1538:	4b37      	ldr	r3, [pc, #220]	; (1618 <spi_rw+0x150>)
    153a:	4798      	blx	r3

	while (u16Sz) {
    153c:	e04c      	b.n	15d8 <spi_rw+0x110>
		txd_data = *pu8Mosi;
    153e:	68fb      	ldr	r3, [r7, #12]
    1540:	781a      	ldrb	r2, [r3, #0]
    1542:	2314      	movs	r3, #20
    1544:	18fb      	adds	r3, r7, r3
    1546:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
    1548:	46c0      	nop			; (mov r8, r8)
    154a:	4b32      	ldr	r3, [pc, #200]	; (1614 <spi_rw+0x14c>)
    154c:	0018      	movs	r0, r3
    154e:	4b33      	ldr	r3, [pc, #204]	; (161c <spi_rw+0x154>)
    1550:	4798      	blx	r3
    1552:	0003      	movs	r3, r0
    1554:	001a      	movs	r2, r3
    1556:	2301      	movs	r3, #1
    1558:	4053      	eors	r3, r2
    155a:	b2db      	uxtb	r3, r3
    155c:	2b00      	cmp	r3, #0
    155e:	d1f4      	bne.n	154a <spi_rw+0x82>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    1560:	46c0      	nop			; (mov r8, r8)
    1562:	2314      	movs	r3, #20
    1564:	18fb      	adds	r3, r7, r3
    1566:	881a      	ldrh	r2, [r3, #0]
    1568:	4b2a      	ldr	r3, [pc, #168]	; (1614 <spi_rw+0x14c>)
    156a:	0011      	movs	r1, r2
    156c:	0018      	movs	r0, r3
    156e:	4b2c      	ldr	r3, [pc, #176]	; (1620 <spi_rw+0x158>)
    1570:	4798      	blx	r3
    1572:	1e03      	subs	r3, r0, #0
    1574:	d1f5      	bne.n	1562 <spi_rw+0x9a>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    1576:	46c0      	nop			; (mov r8, r8)
    1578:	4b26      	ldr	r3, [pc, #152]	; (1614 <spi_rw+0x14c>)
    157a:	0018      	movs	r0, r3
    157c:	4b29      	ldr	r3, [pc, #164]	; (1624 <spi_rw+0x15c>)
    157e:	4798      	blx	r3
    1580:	0003      	movs	r3, r0
    1582:	001a      	movs	r2, r3
    1584:	2301      	movs	r3, #1
    1586:	4053      	eors	r3, r2
    1588:	b2db      	uxtb	r3, r3
    158a:	2b00      	cmp	r3, #0
    158c:	d1f4      	bne.n	1578 <spi_rw+0xb0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    158e:	46c0      	nop			; (mov r8, r8)
    1590:	2310      	movs	r3, #16
    1592:	18fa      	adds	r2, r7, r3
    1594:	4b1f      	ldr	r3, [pc, #124]	; (1614 <spi_rw+0x14c>)
    1596:	0011      	movs	r1, r2
    1598:	0018      	movs	r0, r3
    159a:	4b23      	ldr	r3, [pc, #140]	; (1628 <spi_rw+0x160>)
    159c:	4798      	blx	r3
    159e:	1e03      	subs	r3, r0, #0
    15a0:	d1f6      	bne.n	1590 <spi_rw+0xc8>
			;
		*pu8Miso = rxd_data;
    15a2:	2310      	movs	r3, #16
    15a4:	18fb      	adds	r3, r7, r3
    15a6:	881b      	ldrh	r3, [r3, #0]
    15a8:	b2da      	uxtb	r2, r3
    15aa:	68bb      	ldr	r3, [r7, #8]
    15ac:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
    15ae:	1dbb      	adds	r3, r7, #6
    15b0:	881a      	ldrh	r2, [r3, #0]
    15b2:	1dbb      	adds	r3, r7, #6
    15b4:	3a01      	subs	r2, #1
    15b6:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    15b8:	2316      	movs	r3, #22
    15ba:	18fb      	adds	r3, r7, r3
    15bc:	781b      	ldrb	r3, [r3, #0]
    15be:	2b00      	cmp	r3, #0
    15c0:	d102      	bne.n	15c8 <spi_rw+0x100>
			pu8Miso++;
    15c2:	68bb      	ldr	r3, [r7, #8]
    15c4:	3301      	adds	r3, #1
    15c6:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    15c8:	2317      	movs	r3, #23
    15ca:	18fb      	adds	r3, r7, r3
    15cc:	781b      	ldrb	r3, [r3, #0]
    15ce:	2b00      	cmp	r3, #0
    15d0:	d102      	bne.n	15d8 <spi_rw+0x110>
			pu8Mosi++;
    15d2:	68fb      	ldr	r3, [r7, #12]
    15d4:	3301      	adds	r3, #1
    15d6:	60fb      	str	r3, [r7, #12]
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
    15d8:	1dbb      	adds	r3, r7, #6
    15da:	881b      	ldrh	r3, [r3, #0]
    15dc:	2b00      	cmp	r3, #0
    15de:	d1ae      	bne.n	153e <spi_rw+0x76>
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
    15e0:	46c0      	nop			; (mov r8, r8)
    15e2:	4b0c      	ldr	r3, [pc, #48]	; (1614 <spi_rw+0x14c>)
    15e4:	0018      	movs	r0, r3
    15e6:	4b11      	ldr	r3, [pc, #68]	; (162c <spi_rw+0x164>)
    15e8:	4798      	blx	r3
    15ea:	0003      	movs	r3, r0
    15ec:	001a      	movs	r2, r3
    15ee:	2301      	movs	r3, #1
    15f0:	4053      	eors	r3, r2
    15f2:	b2db      	uxtb	r3, r3
    15f4:	2b00      	cmp	r3, #0
    15f6:	d1f4      	bne.n	15e2 <spi_rw+0x11a>
		;

	spi_select_slave(&master, &slave_inst, false);
    15f8:	4905      	ldr	r1, [pc, #20]	; (1610 <spi_rw+0x148>)
    15fa:	4b06      	ldr	r3, [pc, #24]	; (1614 <spi_rw+0x14c>)
    15fc:	2200      	movs	r2, #0
    15fe:	0018      	movs	r0, r3
    1600:	4b05      	ldr	r3, [pc, #20]	; (1618 <spi_rw+0x150>)
    1602:	4798      	blx	r3

	return M2M_SUCCESS;
    1604:	2300      	movs	r3, #0
}
    1606:	0018      	movs	r0, r3
    1608:	46bd      	mov	sp, r7
    160a:	b006      	add	sp, #24
    160c:	bd80      	pop	{r7, pc}
    160e:	46c0      	nop			; (mov r8, r8)
    1610:	20000dc8 	.word	0x20000dc8
    1614:	20000dcc 	.word	0x20000dcc
    1618:	00003a81 	.word	0x00003a81
    161c:	000013a1 	.word	0x000013a1
    1620:	000013f1 	.word	0x000013f1
    1624:	000013c9 	.word	0x000013c9
    1628:	00001439 	.word	0x00001439
    162c:	00001379 	.word	0x00001379

00001630 <nm_bus_init>:
*	@author	M.S.M
*	@date	28 oct 2013
*	@version	1.0
*/
sint8 nm_bus_init(void *pvInitValue)
{
    1630:	b580      	push	{r7, lr}
    1632:	b092      	sub	sp, #72	; 0x48
    1634:	af00      	add	r7, sp, #0
    1636:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
    1638:	2347      	movs	r3, #71	; 0x47
    163a:	18fb      	adds	r3, r7, r3
    163c:	2200      	movs	r2, #0
    163e:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
    1640:	2308      	movs	r3, #8
    1642:	18fb      	adds	r3, r7, r3
    1644:	0018      	movs	r0, r3
    1646:	4b26      	ldr	r3, [pc, #152]	; (16e0 <nm_bus_init+0xb0>)
    1648:	4798      	blx	r3
	slave_config.ss_pin = CONF_WIFI_M2M_SPI_CS_PIN;
    164a:	2308      	movs	r3, #8
    164c:	18fb      	adds	r3, r7, r3
    164e:	2205      	movs	r2, #5
    1650:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
    1652:	2308      	movs	r3, #8
    1654:	18fa      	adds	r2, r7, r3
    1656:	4b23      	ldr	r3, [pc, #140]	; (16e4 <nm_bus_init+0xb4>)
    1658:	0011      	movs	r1, r2
    165a:	0018      	movs	r0, r3
    165c:	4b22      	ldr	r3, [pc, #136]	; (16e8 <nm_bus_init+0xb8>)
    165e:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
    1660:	230c      	movs	r3, #12
    1662:	18fb      	adds	r3, r7, r3
    1664:	0018      	movs	r0, r3
    1666:	4b21      	ldr	r3, [pc, #132]	; (16ec <nm_bus_init+0xbc>)
    1668:	4798      	blx	r3
	config.mux_setting = CONF_WIFI_M2M_SPI_SERCOM_MUX;
    166a:	230c      	movs	r3, #12
    166c:	18fb      	adds	r3, r7, r3
    166e:	2280      	movs	r2, #128	; 0x80
    1670:	0252      	lsls	r2, r2, #9
    1672:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WIFI_M2M_SPI_PINMUX_PAD0;
    1674:	230c      	movs	r3, #12
    1676:	18fb      	adds	r3, r7, r3
    1678:	4a1d      	ldr	r2, [pc, #116]	; (16f0 <nm_bus_init+0xc0>)
    167a:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WIFI_M2M_SPI_PINMUX_PAD1;
    167c:	230c      	movs	r3, #12
    167e:	18fb      	adds	r3, r7, r3
    1680:	2201      	movs	r2, #1
    1682:	4252      	negs	r2, r2
    1684:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WIFI_M2M_SPI_PINMUX_PAD2;
    1686:	230c      	movs	r3, #12
    1688:	18fb      	adds	r3, r7, r3
    168a:	4a1a      	ldr	r2, [pc, #104]	; (16f4 <nm_bus_init+0xc4>)
    168c:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WIFI_M2M_SPI_PINMUX_PAD3;
    168e:	230c      	movs	r3, #12
    1690:	18fb      	adds	r3, r7, r3
    1692:	4a19      	ldr	r2, [pc, #100]	; (16f8 <nm_bus_init+0xc8>)
    1694:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
    1696:	230c      	movs	r3, #12
    1698:	18fb      	adds	r3, r7, r3
    169a:	2200      	movs	r2, #0
    169c:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WIFI_M2M_SPI_BAUDRATE;
    169e:	230c      	movs	r3, #12
    16a0:	18fb      	adds	r3, r7, r3
    16a2:	4a16      	ldr	r2, [pc, #88]	; (16fc <nm_bus_init+0xcc>)
    16a4:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WIFI_M2M_SPI_MODULE, &config) != STATUS_OK) {
    16a6:	230c      	movs	r3, #12
    16a8:	18fa      	adds	r2, r7, r3
    16aa:	4915      	ldr	r1, [pc, #84]	; (1700 <nm_bus_init+0xd0>)
    16ac:	4b15      	ldr	r3, [pc, #84]	; (1704 <nm_bus_init+0xd4>)
    16ae:	0018      	movs	r0, r3
    16b0:	4b15      	ldr	r3, [pc, #84]	; (1708 <nm_bus_init+0xd8>)
    16b2:	4798      	blx	r3
    16b4:	1e03      	subs	r3, r0, #0
    16b6:	d002      	beq.n	16be <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
    16b8:	2306      	movs	r3, #6
    16ba:	425b      	negs	r3, r3
    16bc:	e00c      	b.n	16d8 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
    16be:	4b11      	ldr	r3, [pc, #68]	; (1704 <nm_bus_init+0xd4>)
    16c0:	0018      	movs	r0, r3
    16c2:	4b12      	ldr	r3, [pc, #72]	; (170c <nm_bus_init+0xdc>)
    16c4:	4798      	blx	r3

	nm_bsp_reset();
    16c6:	4b12      	ldr	r3, [pc, #72]	; (1710 <nm_bus_init+0xe0>)
    16c8:	4798      	blx	r3
	nm_bsp_sleep(1);
    16ca:	2001      	movs	r0, #1
    16cc:	4b11      	ldr	r3, [pc, #68]	; (1714 <nm_bus_init+0xe4>)
    16ce:	4798      	blx	r3
#endif
	return result;
    16d0:	2347      	movs	r3, #71	; 0x47
    16d2:	18fb      	adds	r3, r7, r3
    16d4:	781b      	ldrb	r3, [r3, #0]
    16d6:	b25b      	sxtb	r3, r3
}
    16d8:	0018      	movs	r0, r3
    16da:	46bd      	mov	sp, r7
    16dc:	b012      	add	sp, #72	; 0x48
    16de:	bd80      	pop	{r7, pc}
    16e0:	000012bd 	.word	0x000012bd
    16e4:	20000dc8 	.word	0x20000dc8
    16e8:	000012e1 	.word	0x000012e1
    16ec:	00001239 	.word	0x00001239
    16f0:	00040003 	.word	0x00040003
    16f4:	00060003 	.word	0x00060003
    16f8:	00070003 	.word	0x00070003
    16fc:	00989680 	.word	0x00989680
    1700:	42000800 	.word	0x42000800
    1704:	20000dcc 	.word	0x20000dcc
    1708:	0000398d 	.word	0x0000398d
    170c:	00001345 	.word	0x00001345
    1710:	000010b1 	.word	0x000010b1
    1714:	000010f5 	.word	0x000010f5

00001718 <nm_bus_ioctl>:
*	@date	28 oct 2013
*	@note	For SPI only, it's important to be able to send/receive at the same time
*	@version	1.0
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    1718:	b590      	push	{r4, r7, lr}
    171a:	b085      	sub	sp, #20
    171c:	af00      	add	r7, sp, #0
    171e:	0002      	movs	r2, r0
    1720:	6039      	str	r1, [r7, #0]
    1722:	1dfb      	adds	r3, r7, #7
    1724:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    1726:	230f      	movs	r3, #15
    1728:	18fb      	adds	r3, r7, r3
    172a:	2200      	movs	r2, #0
    172c:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    172e:	1dfb      	adds	r3, r7, #7
    1730:	781b      	ldrb	r3, [r3, #0]
    1732:	2b03      	cmp	r3, #3
    1734:	d10f      	bne.n	1756 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    1736:	683b      	ldr	r3, [r7, #0]
    1738:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    173a:	68bb      	ldr	r3, [r7, #8]
    173c:	6818      	ldr	r0, [r3, #0]
    173e:	68bb      	ldr	r3, [r7, #8]
    1740:	6859      	ldr	r1, [r3, #4]
    1742:	68bb      	ldr	r3, [r7, #8]
    1744:	891b      	ldrh	r3, [r3, #8]
    1746:	220f      	movs	r2, #15
    1748:	18bc      	adds	r4, r7, r2
    174a:	001a      	movs	r2, r3
    174c:	4b10      	ldr	r3, [pc, #64]	; (1790 <nm_bus_ioctl+0x78>)
    174e:	4798      	blx	r3
    1750:	0003      	movs	r3, r0
    1752:	7023      	strb	r3, [r4, #0]
		}
		break;
    1754:	e013      	b.n	177e <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
    1756:	230f      	movs	r3, #15
    1758:	18fb      	adds	r3, r7, r3
    175a:	22ff      	movs	r2, #255	; 0xff
    175c:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
    175e:	2314      	movs	r3, #20
    1760:	33ff      	adds	r3, #255	; 0xff
    1762:	001a      	movs	r2, r3
    1764:	490b      	ldr	r1, [pc, #44]	; (1794 <nm_bus_ioctl+0x7c>)
    1766:	4b0c      	ldr	r3, [pc, #48]	; (1798 <nm_bus_ioctl+0x80>)
    1768:	0018      	movs	r0, r3
    176a:	4b0c      	ldr	r3, [pc, #48]	; (179c <nm_bus_ioctl+0x84>)
    176c:	4798      	blx	r3
    176e:	4b0c      	ldr	r3, [pc, #48]	; (17a0 <nm_bus_ioctl+0x88>)
    1770:	0018      	movs	r0, r3
    1772:	4b0c      	ldr	r3, [pc, #48]	; (17a4 <nm_bus_ioctl+0x8c>)
    1774:	4798      	blx	r3
    1776:	200d      	movs	r0, #13
    1778:	4b0b      	ldr	r3, [pc, #44]	; (17a8 <nm_bus_ioctl+0x90>)
    177a:	4798      	blx	r3
			break;
    177c:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    177e:	230f      	movs	r3, #15
    1780:	18fb      	adds	r3, r7, r3
    1782:	781b      	ldrb	r3, [r3, #0]
    1784:	b25b      	sxtb	r3, r3
}
    1786:	0018      	movs	r0, r3
    1788:	46bd      	mov	sp, r7
    178a:	b005      	add	sp, #20
    178c:	bd90      	pop	{r4, r7, pc}
    178e:	46c0      	nop			; (mov r8, r8)
    1790:	000014c9 	.word	0x000014c9
    1794:	0000d524 	.word	0x0000d524
    1798:	0000d4fc 	.word	0x0000d4fc
    179c:	00006e11 	.word	0x00006e11
    17a0:	0000d510 	.word	0x0000d510
    17a4:	00006eb9 	.word	0x00006eb9
    17a8:	00006e35 	.word	0x00006e35

000017ac <m2m_wifi_download_mode>:
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}

sint8 m2m_wifi_download_mode()
{
    17ac:	b590      	push	{r4, r7, lr}
    17ae:	b083      	sub	sp, #12
    17b0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    17b2:	1dfb      	adds	r3, r7, #7
    17b4:	2200      	movs	r2, #0
    17b6:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init_download_mode();
    17b8:	1dfc      	adds	r4, r7, #7
    17ba:	4b0a      	ldr	r3, [pc, #40]	; (17e4 <m2m_wifi_download_mode+0x38>)
    17bc:	4798      	blx	r3
    17be:	0003      	movs	r3, r0
    17c0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    17c2:	1dfb      	adds	r3, r7, #7
    17c4:	781b      	ldrb	r3, [r3, #0]
    17c6:	b25b      	sxtb	r3, r3
    17c8:	2b00      	cmp	r3, #0
    17ca:	d102      	bne.n	17d2 <m2m_wifi_download_mode+0x26>
	

	
	enable_interrupts();
    17cc:	4b06      	ldr	r3, [pc, #24]	; (17e8 <m2m_wifi_download_mode+0x3c>)
    17ce:	4798      	blx	r3
    17d0:	e000      	b.n	17d4 <m2m_wifi_download_mode+0x28>
sint8 m2m_wifi_download_mode()
{
	sint8 ret = M2M_SUCCESS;
	/* Apply device specific initialization. */
	ret = nm_drv_init_download_mode();
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    17d2:	46c0      	nop			; (mov r8, r8)

	
	enable_interrupts();

_EXIT0:
	return ret;
    17d4:	1dfb      	adds	r3, r7, #7
    17d6:	781b      	ldrb	r3, [r3, #0]
    17d8:	b25b      	sxtb	r3, r3
}
    17da:	0018      	movs	r0, r3
    17dc:	46bd      	mov	sp, r7
    17de:	b003      	add	sp, #12
    17e0:	bd90      	pop	{r4, r7, pc}
    17e2:	46c0      	nop			; (mov r8, r8)
    17e4:	00001c01 	.word	0x00001c01
    17e8:	000017ed 	.word	0x000017ed

000017ec <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void) 
{
    17ec:	b590      	push	{r4, r7, lr}
    17ee:	b083      	sub	sp, #12
    17f0:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    17f2:	1dfc      	adds	r4, r7, #7
    17f4:	003b      	movs	r3, r7
    17f6:	4a29      	ldr	r2, [pc, #164]	; (189c <enable_interrupts+0xb0>)
    17f8:	0019      	movs	r1, r3
    17fa:	0010      	movs	r0, r2
    17fc:	4b28      	ldr	r3, [pc, #160]	; (18a0 <enable_interrupts+0xb4>)
    17fe:	4798      	blx	r3
    1800:	0003      	movs	r3, r0
    1802:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    1804:	1dfb      	adds	r3, r7, #7
    1806:	781b      	ldrb	r3, [r3, #0]
    1808:	b25b      	sxtb	r3, r3
    180a:	2b00      	cmp	r3, #0
    180c:	d002      	beq.n	1814 <enable_interrupts+0x28>
		return M2M_ERR_BUS_FAIL;
    180e:	2306      	movs	r3, #6
    1810:	425b      	negs	r3, r3
    1812:	e03f      	b.n	1894 <enable_interrupts+0xa8>
	}
	reg |= ((uint32) 1 << 8);
    1814:	683b      	ldr	r3, [r7, #0]
    1816:	2280      	movs	r2, #128	; 0x80
    1818:	0052      	lsls	r2, r2, #1
    181a:	4313      	orrs	r3, r2
    181c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    181e:	683b      	ldr	r3, [r7, #0]
    1820:	1dfc      	adds	r4, r7, #7
    1822:	4a1e      	ldr	r2, [pc, #120]	; (189c <enable_interrupts+0xb0>)
    1824:	0019      	movs	r1, r3
    1826:	0010      	movs	r0, r2
    1828:	4b1e      	ldr	r3, [pc, #120]	; (18a4 <enable_interrupts+0xb8>)
    182a:	4798      	blx	r3
    182c:	0003      	movs	r3, r0
    182e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    1830:	1dfb      	adds	r3, r7, #7
    1832:	781b      	ldrb	r3, [r3, #0]
    1834:	b25b      	sxtb	r3, r3
    1836:	2b00      	cmp	r3, #0
    1838:	d002      	beq.n	1840 <enable_interrupts+0x54>
		return M2M_ERR_BUS_FAIL;
    183a:	2306      	movs	r3, #6
    183c:	425b      	negs	r3, r3
    183e:	e029      	b.n	1894 <enable_interrupts+0xa8>
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    1840:	1dfc      	adds	r4, r7, #7
    1842:	003a      	movs	r2, r7
    1844:	23d0      	movs	r3, #208	; 0xd0
    1846:	015b      	lsls	r3, r3, #5
    1848:	0011      	movs	r1, r2
    184a:	0018      	movs	r0, r3
    184c:	4b14      	ldr	r3, [pc, #80]	; (18a0 <enable_interrupts+0xb4>)
    184e:	4798      	blx	r3
    1850:	0003      	movs	r3, r0
    1852:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    1854:	1dfb      	adds	r3, r7, #7
    1856:	781b      	ldrb	r3, [r3, #0]
    1858:	b25b      	sxtb	r3, r3
    185a:	2b00      	cmp	r3, #0
    185c:	d002      	beq.n	1864 <enable_interrupts+0x78>
		return M2M_ERR_BUS_FAIL;
    185e:	2306      	movs	r3, #6
    1860:	425b      	negs	r3, r3
    1862:	e017      	b.n	1894 <enable_interrupts+0xa8>
	}
	reg |= ((uint32) 1 << 16);
    1864:	683b      	ldr	r3, [r7, #0]
    1866:	2280      	movs	r2, #128	; 0x80
    1868:	0252      	lsls	r2, r2, #9
    186a:	4313      	orrs	r3, r2
    186c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    186e:	683a      	ldr	r2, [r7, #0]
    1870:	1dfc      	adds	r4, r7, #7
    1872:	23d0      	movs	r3, #208	; 0xd0
    1874:	015b      	lsls	r3, r3, #5
    1876:	0011      	movs	r1, r2
    1878:	0018      	movs	r0, r3
    187a:	4b0a      	ldr	r3, [pc, #40]	; (18a4 <enable_interrupts+0xb8>)
    187c:	4798      	blx	r3
    187e:	0003      	movs	r3, r0
    1880:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    1882:	1dfb      	adds	r3, r7, #7
    1884:	781b      	ldrb	r3, [r3, #0]
    1886:	b25b      	sxtb	r3, r3
    1888:	2b00      	cmp	r3, #0
    188a:	d002      	beq.n	1892 <enable_interrupts+0xa6>
		return M2M_ERR_BUS_FAIL;
    188c:	2306      	movs	r3, #6
    188e:	425b      	negs	r3, r3
    1890:	e000      	b.n	1894 <enable_interrupts+0xa8>
	}
	return M2M_SUCCESS;
    1892:	2300      	movs	r3, #0
}
    1894:	0018      	movs	r0, r3
    1896:	46bd      	mov	sp, r7
    1898:	b003      	add	sp, #12
    189a:	bd90      	pop	{r4, r7, pc}
    189c:	00001408 	.word	0x00001408
    18a0:	000019c9 	.word	0x000019c9
    18a4:	000019ed 	.word	0x000019ed

000018a8 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
    18a8:	b580      	push	{r7, lr}
    18aa:	b082      	sub	sp, #8
    18ac:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    18ae:	4b28      	ldr	r3, [pc, #160]	; (1950 <nmi_get_chipid+0xa8>)
    18b0:	681b      	ldr	r3, [r3, #0]
    18b2:	2b00      	cmp	r3, #0
    18b4:	d145      	bne.n	1942 <nmi_get_chipid+0x9a>
		//uint32 revid;
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    18b6:	4a26      	ldr	r2, [pc, #152]	; (1950 <nmi_get_chipid+0xa8>)
    18b8:	2380      	movs	r3, #128	; 0x80
    18ba:	015b      	lsls	r3, r3, #5
    18bc:	0011      	movs	r1, r2
    18be:	0018      	movs	r0, r3
    18c0:	4b24      	ldr	r3, [pc, #144]	; (1954 <nmi_get_chipid+0xac>)
    18c2:	4798      	blx	r3
    18c4:	1e03      	subs	r3, r0, #0
    18c6:	d004      	beq.n	18d2 <nmi_get_chipid+0x2a>
			chipid = 0;
    18c8:	4b21      	ldr	r3, [pc, #132]	; (1950 <nmi_get_chipid+0xa8>)
    18ca:	2200      	movs	r2, #0
    18cc:	601a      	str	r2, [r3, #0]
			return 0;
    18ce:	2300      	movs	r3, #0
    18d0:	e039      	b.n	1946 <nmi_get_chipid+0x9e>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    18d2:	1d3b      	adds	r3, r7, #4
    18d4:	4a20      	ldr	r2, [pc, #128]	; (1958 <nmi_get_chipid+0xb0>)
    18d6:	0019      	movs	r1, r3
    18d8:	0010      	movs	r0, r2
    18da:	4b1e      	ldr	r3, [pc, #120]	; (1954 <nmi_get_chipid+0xac>)
    18dc:	4798      	blx	r3
    18de:	1e03      	subs	r3, r0, #0
    18e0:	d004      	beq.n	18ec <nmi_get_chipid+0x44>
			chipid = 0;
    18e2:	4b1b      	ldr	r3, [pc, #108]	; (1950 <nmi_get_chipid+0xa8>)
    18e4:	2200      	movs	r2, #0
    18e6:	601a      	str	r2, [r3, #0]
			return 0;
    18e8:	2300      	movs	r3, #0
    18ea:	e02c      	b.n	1946 <nmi_get_chipid+0x9e>
		}

		if (chipid == 0x1002a0)  {
    18ec:	4b18      	ldr	r3, [pc, #96]	; (1950 <nmi_get_chipid+0xa8>)
    18ee:	681b      	ldr	r3, [r3, #0]
    18f0:	4a1a      	ldr	r2, [pc, #104]	; (195c <nmi_get_chipid+0xb4>)
    18f2:	4293      	cmp	r3, r2
    18f4:	d106      	bne.n	1904 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    18f6:	687b      	ldr	r3, [r7, #4]
    18f8:	2b01      	cmp	r3, #1
    18fa:	d015      	beq.n	1928 <nmi_get_chipid+0x80>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    18fc:	4b14      	ldr	r3, [pc, #80]	; (1950 <nmi_get_chipid+0xa8>)
    18fe:	4a18      	ldr	r2, [pc, #96]	; (1960 <nmi_get_chipid+0xb8>)
    1900:	601a      	str	r2, [r3, #0]
    1902:	e011      	b.n	1928 <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1002b0) {
    1904:	4b12      	ldr	r3, [pc, #72]	; (1950 <nmi_get_chipid+0xa8>)
    1906:	681b      	ldr	r3, [r3, #0]
    1908:	4a16      	ldr	r2, [pc, #88]	; (1964 <nmi_get_chipid+0xbc>)
    190a:	4293      	cmp	r3, r2
    190c:	d10c      	bne.n	1928 <nmi_get_chipid+0x80>
			if(rfrevid == 3) { /* 1002B0 */
    190e:	687b      	ldr	r3, [r7, #4]
    1910:	2b03      	cmp	r3, #3
    1912:	d009      	beq.n	1928 <nmi_get_chipid+0x80>
			} else if(rfrevid == 4) { /* 1002B1 */
    1914:	687b      	ldr	r3, [r7, #4]
    1916:	2b04      	cmp	r3, #4
    1918:	d103      	bne.n	1922 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    191a:	4b0d      	ldr	r3, [pc, #52]	; (1950 <nmi_get_chipid+0xa8>)
    191c:	4a12      	ldr	r2, [pc, #72]	; (1968 <nmi_get_chipid+0xc0>)
    191e:	601a      	str	r2, [r3, #0]
    1920:	e002      	b.n	1928 <nmi_get_chipid+0x80>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    1922:	4b0b      	ldr	r3, [pc, #44]	; (1950 <nmi_get_chipid+0xa8>)
    1924:	4a11      	ldr	r2, [pc, #68]	; (196c <nmi_get_chipid+0xc4>)
    1926:	601a      	str	r2, [r3, #0]
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    1928:	4b09      	ldr	r3, [pc, #36]	; (1950 <nmi_get_chipid+0xa8>)
    192a:	681b      	ldr	r3, [r3, #0]
    192c:	4a10      	ldr	r2, [pc, #64]	; (1970 <nmi_get_chipid+0xc8>)
    192e:	401a      	ands	r2, r3
    1930:	4b07      	ldr	r3, [pc, #28]	; (1950 <nmi_get_chipid+0xa8>)
    1932:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    1934:	4b06      	ldr	r3, [pc, #24]	; (1950 <nmi_get_chipid+0xa8>)
    1936:	681b      	ldr	r3, [r3, #0]
    1938:	22a0      	movs	r2, #160	; 0xa0
    193a:	02d2      	lsls	r2, r2, #11
    193c:	431a      	orrs	r2, r3
    193e:	4b04      	ldr	r3, [pc, #16]	; (1950 <nmi_get_chipid+0xa8>)
    1940:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    1942:	4b03      	ldr	r3, [pc, #12]	; (1950 <nmi_get_chipid+0xa8>)
    1944:	681b      	ldr	r3, [r3, #0]
}
    1946:	0018      	movs	r0, r3
    1948:	46bd      	mov	sp, r7
    194a:	b002      	add	sp, #8
    194c:	bd80      	pop	{r7, pc}
    194e:	46c0      	nop			; (mov r8, r8)
    1950:	20000d4c 	.word	0x20000d4c
    1954:	000019c9 	.word	0x000019c9
    1958:	000013f4 	.word	0x000013f4
    195c:	001002a0 	.word	0x001002a0
    1960:	001002a1 	.word	0x001002a1
    1964:	001002b0 	.word	0x001002b0
    1968:	001002b1 	.word	0x001002b1
    196c:	001002b2 	.word	0x001002b2
    1970:	fff0ffff 	.word	0xfff0ffff

00001974 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_bus_iface_init(void *pvInitVal)
{
    1974:	b590      	push	{r4, r7, lr}
    1976:	b085      	sub	sp, #20
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    197c:	230f      	movs	r3, #15
    197e:	18fb      	adds	r3, r7, r3
    1980:	2200      	movs	r2, #0
    1982:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    1984:	230f      	movs	r3, #15
    1986:	18fc      	adds	r4, r7, r3
    1988:	687b      	ldr	r3, [r7, #4]
    198a:	0018      	movs	r0, r3
    198c:	4b05      	ldr	r3, [pc, #20]	; (19a4 <nm_bus_iface_init+0x30>)
    198e:	4798      	blx	r3
    1990:	0003      	movs	r3, r0
    1992:	7023      	strb	r3, [r4, #0]
	
	return ret;
    1994:	230f      	movs	r3, #15
    1996:	18fb      	adds	r3, r7, r3
    1998:	781b      	ldrb	r3, [r3, #0]
    199a:	b25b      	sxtb	r3, r3
}
    199c:	0018      	movs	r0, r3
    199e:	46bd      	mov	sp, r7
    19a0:	b005      	add	sp, #20
    19a2:	bd90      	pop	{r4, r7, pc}
    19a4:	00001631 	.word	0x00001631

000019a8 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
uint32 nm_read_reg(uint32 u32Addr)
{
    19a8:	b580      	push	{r7, lr}
    19aa:	b082      	sub	sp, #8
    19ac:	af00      	add	r7, sp, #0
    19ae:	6078      	str	r0, [r7, #4]
#ifdef USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (USE_SPI)
	return nm_spi_read_reg(u32Addr);
    19b0:	687b      	ldr	r3, [r7, #4]
    19b2:	0018      	movs	r0, r3
    19b4:	4b03      	ldr	r3, [pc, #12]	; (19c4 <nm_read_reg+0x1c>)
    19b6:	4798      	blx	r3
    19b8:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    19ba:	0018      	movs	r0, r3
    19bc:	46bd      	mov	sp, r7
    19be:	b002      	add	sp, #8
    19c0:	bd80      	pop	{r7, pc}
    19c2:	46c0      	nop			; (mov r8, r8)
    19c4:	00002ce1 	.word	0x00002ce1

000019c8 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    19c8:	b580      	push	{r7, lr}
    19ca:	b082      	sub	sp, #8
    19cc:	af00      	add	r7, sp, #0
    19ce:	6078      	str	r0, [r7, #4]
    19d0:	6039      	str	r1, [r7, #0]
#ifdef USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    19d2:	683a      	ldr	r2, [r7, #0]
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	0011      	movs	r1, r2
    19d8:	0018      	movs	r0, r3
    19da:	4b03      	ldr	r3, [pc, #12]	; (19e8 <nm_read_reg_with_ret+0x20>)
    19dc:	4798      	blx	r3
    19de:	0003      	movs	r3, r0
#elif defined (USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    19e0:	0018      	movs	r0, r3
    19e2:	46bd      	mov	sp, r7
    19e4:	b002      	add	sp, #8
    19e6:	bd80      	pop	{r7, pc}
    19e8:	00002d05 	.word	0x00002d05

000019ec <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    19ec:	b580      	push	{r7, lr}
    19ee:	b082      	sub	sp, #8
    19f0:	af00      	add	r7, sp, #0
    19f2:	6078      	str	r0, [r7, #4]
    19f4:	6039      	str	r1, [r7, #0]
#ifdef USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    19f6:	683a      	ldr	r2, [r7, #0]
    19f8:	687b      	ldr	r3, [r7, #4]
    19fa:	0011      	movs	r1, r2
    19fc:	0018      	movs	r0, r3
    19fe:	4b03      	ldr	r3, [pc, #12]	; (1a0c <nm_write_reg+0x20>)
    1a00:	4798      	blx	r3
    1a02:	0003      	movs	r3, r0
#elif defined (USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    1a04:	0018      	movs	r0, r3
    1a06:	46bd      	mov	sp, r7
    1a08:	b002      	add	sp, #8
    1a0a:	bd80      	pop	{r7, pc}
    1a0c:	00002d55 	.word	0x00002d55

00001a10 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    1a10:	b580      	push	{r7, lr}
    1a12:	b084      	sub	sp, #16
    1a14:	af00      	add	r7, sp, #0
    1a16:	60f8      	str	r0, [r7, #12]
    1a18:	60b9      	str	r1, [r7, #8]
    1a1a:	1dbb      	adds	r3, r7, #6
    1a1c:	801a      	strh	r2, [r3, #0]
#ifdef USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1a1e:	1dbb      	adds	r3, r7, #6
    1a20:	881a      	ldrh	r2, [r3, #0]
    1a22:	68b9      	ldr	r1, [r7, #8]
    1a24:	68fb      	ldr	r3, [r7, #12]
    1a26:	0018      	movs	r0, r3
    1a28:	4b03      	ldr	r3, [pc, #12]	; (1a38 <p_nm_read_block+0x28>)
    1a2a:	4798      	blx	r3
    1a2c:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    1a2e:	0018      	movs	r0, r3
    1a30:	46bd      	mov	sp, r7
    1a32:	b004      	add	sp, #16
    1a34:	bd80      	pop	{r7, pc}
    1a36:	46c0      	nop			; (mov r8, r8)
    1a38:	00002da5 	.word	0x00002da5

00001a3c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1a3c:	b580      	push	{r7, lr}
    1a3e:	b086      	sub	sp, #24
    1a40:	af00      	add	r7, sp, #0
    1a42:	60f8      	str	r0, [r7, #12]
    1a44:	60b9      	str	r1, [r7, #8]
    1a46:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1a48:	4b2d      	ldr	r3, [pc, #180]	; (1b00 <nm_read_block+0xc4>)
    1a4a:	881a      	ldrh	r2, [r3, #0]
    1a4c:	2310      	movs	r3, #16
    1a4e:	18fb      	adds	r3, r7, r3
    1a50:	3a08      	subs	r2, #8
    1a52:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    1a54:	2300      	movs	r3, #0
    1a56:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    1a58:	2313      	movs	r3, #19
    1a5a:	18fb      	adds	r3, r7, r3
    1a5c:	2200      	movs	r2, #0
    1a5e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1a60:	2310      	movs	r3, #16
    1a62:	18fb      	adds	r3, r7, r3
    1a64:	881a      	ldrh	r2, [r3, #0]
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	429a      	cmp	r2, r3
    1a6a:	d313      	bcc.n	1a94 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    1a6c:	68ba      	ldr	r2, [r7, #8]
    1a6e:	697b      	ldr	r3, [r7, #20]
    1a70:	18d1      	adds	r1, r2, r3
    1a72:	687b      	ldr	r3, [r7, #4]
    1a74:	b29a      	uxth	r2, r3
    1a76:	68fb      	ldr	r3, [r7, #12]
    1a78:	0018      	movs	r0, r3
    1a7a:	4b22      	ldr	r3, [pc, #136]	; (1b04 <nm_read_block+0xc8>)
    1a7c:	4798      	blx	r3
    1a7e:	0003      	movs	r3, r0
    1a80:	b2da      	uxtb	r2, r3
    1a82:	2313      	movs	r3, #19
    1a84:	18fb      	adds	r3, r7, r3
    1a86:	781b      	ldrb	r3, [r3, #0]
    1a88:	18d3      	adds	r3, r2, r3
    1a8a:	b2da      	uxtb	r2, r3
    1a8c:	2313      	movs	r3, #19
    1a8e:	18fb      	adds	r3, r7, r3
    1a90:	701a      	strb	r2, [r3, #0]
			break;
    1a92:	e02d      	b.n	1af0 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    1a94:	68ba      	ldr	r2, [r7, #8]
    1a96:	697b      	ldr	r3, [r7, #20]
    1a98:	18d1      	adds	r1, r2, r3
    1a9a:	2310      	movs	r3, #16
    1a9c:	18fb      	adds	r3, r7, r3
    1a9e:	881a      	ldrh	r2, [r3, #0]
    1aa0:	68fb      	ldr	r3, [r7, #12]
    1aa2:	0018      	movs	r0, r3
    1aa4:	4b17      	ldr	r3, [pc, #92]	; (1b04 <nm_read_block+0xc8>)
    1aa6:	4798      	blx	r3
    1aa8:	0003      	movs	r3, r0
    1aaa:	b2da      	uxtb	r2, r3
    1aac:	2313      	movs	r3, #19
    1aae:	18fb      	adds	r3, r7, r3
    1ab0:	781b      	ldrb	r3, [r3, #0]
    1ab2:	18d3      	adds	r3, r2, r3
    1ab4:	b2da      	uxtb	r2, r3
    1ab6:	2313      	movs	r3, #19
    1ab8:	18fb      	adds	r3, r7, r3
    1aba:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    1abc:	2313      	movs	r3, #19
    1abe:	18fb      	adds	r3, r7, r3
    1ac0:	781b      	ldrb	r3, [r3, #0]
    1ac2:	b25b      	sxtb	r3, r3
    1ac4:	2b00      	cmp	r3, #0
    1ac6:	d112      	bne.n	1aee <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    1ac8:	2310      	movs	r3, #16
    1aca:	18fb      	adds	r3, r7, r3
    1acc:	881b      	ldrh	r3, [r3, #0]
    1ace:	687a      	ldr	r2, [r7, #4]
    1ad0:	1ad3      	subs	r3, r2, r3
    1ad2:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    1ad4:	2310      	movs	r3, #16
    1ad6:	18fb      	adds	r3, r7, r3
    1ad8:	881b      	ldrh	r3, [r3, #0]
    1ada:	697a      	ldr	r2, [r7, #20]
    1adc:	18d3      	adds	r3, r2, r3
    1ade:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    1ae0:	2310      	movs	r3, #16
    1ae2:	18fb      	adds	r3, r7, r3
    1ae4:	881b      	ldrh	r3, [r3, #0]
    1ae6:	68fa      	ldr	r2, [r7, #12]
    1ae8:	18d3      	adds	r3, r2, r3
    1aea:	60fb      	str	r3, [r7, #12]
		}
	}
    1aec:	e7b8      	b.n	1a60 <nm_read_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1aee:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    1af0:	2313      	movs	r3, #19
    1af2:	18fb      	adds	r3, r7, r3
    1af4:	781b      	ldrb	r3, [r3, #0]
    1af6:	b25b      	sxtb	r3, r3
}
    1af8:	0018      	movs	r0, r3
    1afa:	46bd      	mov	sp, r7
    1afc:	b006      	add	sp, #24
    1afe:	bd80      	pop	{r7, pc}
    1b00:	20000000 	.word	0x20000000
    1b04:	00001a11 	.word	0x00001a11

00001b08 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    1b08:	b580      	push	{r7, lr}
    1b0a:	b084      	sub	sp, #16
    1b0c:	af00      	add	r7, sp, #0
    1b0e:	60f8      	str	r0, [r7, #12]
    1b10:	60b9      	str	r1, [r7, #8]
    1b12:	1dbb      	adds	r3, r7, #6
    1b14:	801a      	strh	r2, [r3, #0]
#ifdef USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1b16:	1dbb      	adds	r3, r7, #6
    1b18:	881a      	ldrh	r2, [r3, #0]
    1b1a:	68b9      	ldr	r1, [r7, #8]
    1b1c:	68fb      	ldr	r3, [r7, #12]
    1b1e:	0018      	movs	r0, r3
    1b20:	4b03      	ldr	r3, [pc, #12]	; (1b30 <p_nm_write_block+0x28>)
    1b22:	4798      	blx	r3
    1b24:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    1b26:	0018      	movs	r0, r3
    1b28:	46bd      	mov	sp, r7
    1b2a:	b004      	add	sp, #16
    1b2c:	bd80      	pop	{r7, pc}
    1b2e:	46c0      	nop			; (mov r8, r8)
    1b30:	00002dfd 	.word	0x00002dfd

00001b34 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1b34:	b580      	push	{r7, lr}
    1b36:	b086      	sub	sp, #24
    1b38:	af00      	add	r7, sp, #0
    1b3a:	60f8      	str	r0, [r7, #12]
    1b3c:	60b9      	str	r1, [r7, #8]
    1b3e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1b40:	4b2d      	ldr	r3, [pc, #180]	; (1bf8 <nm_write_block+0xc4>)
    1b42:	881a      	ldrh	r2, [r3, #0]
    1b44:	2310      	movs	r3, #16
    1b46:	18fb      	adds	r3, r7, r3
    1b48:	3a08      	subs	r2, #8
    1b4a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    1b4c:	2300      	movs	r3, #0
    1b4e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    1b50:	2313      	movs	r3, #19
    1b52:	18fb      	adds	r3, r7, r3
    1b54:	2200      	movs	r2, #0
    1b56:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1b58:	2310      	movs	r3, #16
    1b5a:	18fb      	adds	r3, r7, r3
    1b5c:	881a      	ldrh	r2, [r3, #0]
    1b5e:	687b      	ldr	r3, [r7, #4]
    1b60:	429a      	cmp	r2, r3
    1b62:	d313      	bcc.n	1b8c <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    1b64:	68ba      	ldr	r2, [r7, #8]
    1b66:	697b      	ldr	r3, [r7, #20]
    1b68:	18d1      	adds	r1, r2, r3
    1b6a:	687b      	ldr	r3, [r7, #4]
    1b6c:	b29a      	uxth	r2, r3
    1b6e:	68fb      	ldr	r3, [r7, #12]
    1b70:	0018      	movs	r0, r3
    1b72:	4b22      	ldr	r3, [pc, #136]	; (1bfc <nm_write_block+0xc8>)
    1b74:	4798      	blx	r3
    1b76:	0003      	movs	r3, r0
    1b78:	b2da      	uxtb	r2, r3
    1b7a:	2313      	movs	r3, #19
    1b7c:	18fb      	adds	r3, r7, r3
    1b7e:	781b      	ldrb	r3, [r3, #0]
    1b80:	18d3      	adds	r3, r2, r3
    1b82:	b2da      	uxtb	r2, r3
    1b84:	2313      	movs	r3, #19
    1b86:	18fb      	adds	r3, r7, r3
    1b88:	701a      	strb	r2, [r3, #0]
			break;
    1b8a:	e02d      	b.n	1be8 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    1b8c:	68ba      	ldr	r2, [r7, #8]
    1b8e:	697b      	ldr	r3, [r7, #20]
    1b90:	18d1      	adds	r1, r2, r3
    1b92:	2310      	movs	r3, #16
    1b94:	18fb      	adds	r3, r7, r3
    1b96:	881a      	ldrh	r2, [r3, #0]
    1b98:	68fb      	ldr	r3, [r7, #12]
    1b9a:	0018      	movs	r0, r3
    1b9c:	4b17      	ldr	r3, [pc, #92]	; (1bfc <nm_write_block+0xc8>)
    1b9e:	4798      	blx	r3
    1ba0:	0003      	movs	r3, r0
    1ba2:	b2da      	uxtb	r2, r3
    1ba4:	2313      	movs	r3, #19
    1ba6:	18fb      	adds	r3, r7, r3
    1ba8:	781b      	ldrb	r3, [r3, #0]
    1baa:	18d3      	adds	r3, r2, r3
    1bac:	b2da      	uxtb	r2, r3
    1bae:	2313      	movs	r3, #19
    1bb0:	18fb      	adds	r3, r7, r3
    1bb2:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    1bb4:	2313      	movs	r3, #19
    1bb6:	18fb      	adds	r3, r7, r3
    1bb8:	781b      	ldrb	r3, [r3, #0]
    1bba:	b25b      	sxtb	r3, r3
    1bbc:	2b00      	cmp	r3, #0
    1bbe:	d112      	bne.n	1be6 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    1bc0:	2310      	movs	r3, #16
    1bc2:	18fb      	adds	r3, r7, r3
    1bc4:	881b      	ldrh	r3, [r3, #0]
    1bc6:	687a      	ldr	r2, [r7, #4]
    1bc8:	1ad3      	subs	r3, r2, r3
    1bca:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    1bcc:	2310      	movs	r3, #16
    1bce:	18fb      	adds	r3, r7, r3
    1bd0:	881b      	ldrh	r3, [r3, #0]
    1bd2:	697a      	ldr	r2, [r7, #20]
    1bd4:	18d3      	adds	r3, r2, r3
    1bd6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    1bd8:	2310      	movs	r3, #16
    1bda:	18fb      	adds	r3, r7, r3
    1bdc:	881b      	ldrh	r3, [r3, #0]
    1bde:	68fa      	ldr	r2, [r7, #12]
    1be0:	18d3      	adds	r3, r2, r3
    1be2:	60fb      	str	r3, [r7, #12]
		}
	}
    1be4:	e7b8      	b.n	1b58 <nm_write_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1be6:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    1be8:	2313      	movs	r3, #19
    1bea:	18fb      	adds	r3, r7, r3
    1bec:	781b      	ldrb	r3, [r3, #0]
    1bee:	b25b      	sxtb	r3, r3
}
    1bf0:	0018      	movs	r0, r3
    1bf2:	46bd      	mov	sp, r7
    1bf4:	b006      	add	sp, #24
    1bf6:	bd80      	pop	{r7, pc}
    1bf8:	20000000 	.word	0x20000000
    1bfc:	00001b09 	.word	0x00001b09

00001c00 <nm_drv_init_download_mode>:
*	@author	Viswanathan Murugesan
*	@date	10 Oct 2014
*	@version	1.0
*/
sint8 nm_drv_init_download_mode()
{
    1c00:	b590      	push	{r4, r7, lr}
    1c02:	b083      	sub	sp, #12
    1c04:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    1c06:	1dfb      	adds	r3, r7, #7
    1c08:	2200      	movs	r2, #0
    1c0a:	701a      	strb	r2, [r3, #0]
	
	ret = nm_bus_iface_init(NULL);
    1c0c:	1dfc      	adds	r4, r7, #7
    1c0e:	2000      	movs	r0, #0
    1c10:	4b19      	ldr	r3, [pc, #100]	; (1c78 <nm_drv_init_download_mode+0x78>)
    1c12:	4798      	blx	r3
    1c14:	0003      	movs	r3, r0
    1c16:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    1c18:	1dfb      	adds	r3, r7, #7
    1c1a:	781b      	ldrb	r3, [r3, #0]
    1c1c:	b25b      	sxtb	r3, r3
    1c1e:	2b00      	cmp	r3, #0
    1c20:	d00d      	beq.n	1c3e <nm_drv_init_download_mode+0x3e>
		M2M_ERR("[nmi start]: fail init bus\n");
    1c22:	4916      	ldr	r1, [pc, #88]	; (1c7c <nm_drv_init_download_mode+0x7c>)
    1c24:	4b16      	ldr	r3, [pc, #88]	; (1c80 <nm_drv_init_download_mode+0x80>)
    1c26:	2278      	movs	r2, #120	; 0x78
    1c28:	0018      	movs	r0, r3
    1c2a:	4b16      	ldr	r3, [pc, #88]	; (1c84 <nm_drv_init_download_mode+0x84>)
    1c2c:	4798      	blx	r3
    1c2e:	4b16      	ldr	r3, [pc, #88]	; (1c88 <nm_drv_init_download_mode+0x88>)
    1c30:	0018      	movs	r0, r3
    1c32:	4b16      	ldr	r3, [pc, #88]	; (1c8c <nm_drv_init_download_mode+0x8c>)
    1c34:	4798      	blx	r3
    1c36:	200d      	movs	r0, #13
    1c38:	4b15      	ldr	r3, [pc, #84]	; (1c90 <nm_drv_init_download_mode+0x90>)
    1c3a:	4798      	blx	r3
		goto ERR1;
    1c3c:	e015      	b.n	1c6a <nm_drv_init_download_mode+0x6a>
	}


#ifdef USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    1c3e:	4b15      	ldr	r3, [pc, #84]	; (1c94 <nm_drv_init_download_mode+0x94>)
    1c40:	4798      	blx	r3
#endif

	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    1c42:	4b15      	ldr	r3, [pc, #84]	; (1c98 <nm_drv_init_download_mode+0x98>)
    1c44:	0018      	movs	r0, r3
    1c46:	4b0f      	ldr	r3, [pc, #60]	; (1c84 <nm_drv_init_download_mode+0x84>)
    1c48:	4798      	blx	r3
    1c4a:	4b14      	ldr	r3, [pc, #80]	; (1c9c <nm_drv_init_download_mode+0x9c>)
    1c4c:	4798      	blx	r3
    1c4e:	0002      	movs	r2, r0
    1c50:	4b13      	ldr	r3, [pc, #76]	; (1ca0 <nm_drv_init_download_mode+0xa0>)
    1c52:	0011      	movs	r1, r2
    1c54:	0018      	movs	r0, r3
    1c56:	4b0b      	ldr	r3, [pc, #44]	; (1c84 <nm_drv_init_download_mode+0x84>)
    1c58:	4798      	blx	r3
    1c5a:	200d      	movs	r0, #13
    1c5c:	4b0c      	ldr	r3, [pc, #48]	; (1c90 <nm_drv_init_download_mode+0x90>)
    1c5e:	4798      	blx	r3
	
	/*disable all interrupt in ROM (to disable uart) in 2b0 chip*/
	nm_write_reg(0x20300,0);
    1c60:	4b10      	ldr	r3, [pc, #64]	; (1ca4 <nm_drv_init_download_mode+0xa4>)
    1c62:	2100      	movs	r1, #0
    1c64:	0018      	movs	r0, r3
    1c66:	4b10      	ldr	r3, [pc, #64]	; (1ca8 <nm_drv_init_download_mode+0xa8>)
    1c68:	4798      	blx	r3

ERR1:
	return ret;
    1c6a:	1dfb      	adds	r3, r7, #7
    1c6c:	781b      	ldrb	r3, [r3, #0]
    1c6e:	b25b      	sxtb	r3, r3
}
    1c70:	0018      	movs	r0, r3
    1c72:	46bd      	mov	sp, r7
    1c74:	b003      	add	sp, #12
    1c76:	bd90      	pop	{r4, r7, pc}
    1c78:	00001975 	.word	0x00001975
    1c7c:	0000d66c 	.word	0x0000d66c
    1c80:	0000d534 	.word	0x0000d534
    1c84:	00006e11 	.word	0x00006e11
    1c88:	0000d548 	.word	0x0000d548
    1c8c:	00006eb9 	.word	0x00006eb9
    1c90:	00006e35 	.word	0x00006e35
    1c94:	00002b99 	.word	0x00002b99
    1c98:	0000d564 	.word	0x0000d564
    1c9c:	000018a9 	.word	0x000018a9
    1ca0:	0000d570 	.word	0x0000d570
    1ca4:	00020300 	.word	0x00020300
    1ca8:	000019ed 	.word	0x000019ed

00001cac <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)                                 
{
    1cac:	b580      	push	{r7, lr}
    1cae:	b086      	sub	sp, #24
    1cb0:	af00      	add	r7, sp, #0
    1cb2:	6078      	str	r0, [r7, #4]
    1cb4:	000a      	movs	r2, r1
    1cb6:	1cbb      	adds	r3, r7, #2
    1cb8:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    1cba:	230c      	movs	r3, #12
    1cbc:	18fb      	adds	r3, r7, r3
    1cbe:	2200      	movs	r2, #0
    1cc0:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    1cc2:	230c      	movs	r3, #12
    1cc4:	18fb      	adds	r3, r7, r3
    1cc6:	687a      	ldr	r2, [r7, #4]
    1cc8:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    1cca:	230c      	movs	r3, #12
    1ccc:	18fb      	adds	r3, r7, r3
    1cce:	1cba      	adds	r2, r7, #2
    1cd0:	8812      	ldrh	r2, [r2, #0]
    1cd2:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1cd4:	230c      	movs	r3, #12
    1cd6:	18fb      	adds	r3, r7, r3
    1cd8:	0019      	movs	r1, r3
    1cda:	2003      	movs	r0, #3
    1cdc:	4b03      	ldr	r3, [pc, #12]	; (1cec <nmi_spi_read+0x40>)
    1cde:	4798      	blx	r3
    1ce0:	0003      	movs	r3, r0
}
    1ce2:	0018      	movs	r0, r3
    1ce4:	46bd      	mov	sp, r7
    1ce6:	b006      	add	sp, #24
    1ce8:	bd80      	pop	{r7, pc}
    1cea:	46c0      	nop			; (mov r8, r8)
    1cec:	00001719 	.word	0x00001719

00001cf0 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    1cf0:	b580      	push	{r7, lr}
    1cf2:	b086      	sub	sp, #24
    1cf4:	af00      	add	r7, sp, #0
    1cf6:	6078      	str	r0, [r7, #4]
    1cf8:	000a      	movs	r2, r1
    1cfa:	1cbb      	adds	r3, r7, #2
    1cfc:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    1cfe:	230c      	movs	r3, #12
    1d00:	18fb      	adds	r3, r7, r3
    1d02:	687a      	ldr	r2, [r7, #4]
    1d04:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    1d06:	230c      	movs	r3, #12
    1d08:	18fb      	adds	r3, r7, r3
    1d0a:	2200      	movs	r2, #0
    1d0c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    1d0e:	230c      	movs	r3, #12
    1d10:	18fb      	adds	r3, r7, r3
    1d12:	1cba      	adds	r2, r7, #2
    1d14:	8812      	ldrh	r2, [r2, #0]
    1d16:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1d18:	230c      	movs	r3, #12
    1d1a:	18fb      	adds	r3, r7, r3
    1d1c:	0019      	movs	r1, r3
    1d1e:	2003      	movs	r0, #3
    1d20:	4b03      	ldr	r3, [pc, #12]	; (1d30 <nmi_spi_write+0x40>)
    1d22:	4798      	blx	r3
    1d24:	0003      	movs	r3, r0
}
    1d26:	0018      	movs	r0, r3
    1d28:	46bd      	mov	sp, r7
    1d2a:	b006      	add	sp, #24
    1d2c:	bd80      	pop	{r7, pc}
    1d2e:	46c0      	nop			; (mov r8, r8)
    1d30:	00001719 	.word	0x00001719

00001d34 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    1d34:	b580      	push	{r7, lr}
    1d36:	b082      	sub	sp, #8
    1d38:	af00      	add	r7, sp, #0
    1d3a:	0002      	movs	r2, r0
    1d3c:	1dfb      	adds	r3, r7, #7
    1d3e:	701a      	strb	r2, [r3, #0]
    1d40:	1dbb      	adds	r3, r7, #6
    1d42:	1c0a      	adds	r2, r1, #0
    1d44:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    1d46:	1dfb      	adds	r3, r7, #7
    1d48:	781b      	ldrb	r3, [r3, #0]
    1d4a:	005a      	lsls	r2, r3, #1
    1d4c:	1dbb      	adds	r3, r7, #6
    1d4e:	781b      	ldrb	r3, [r3, #0]
    1d50:	4053      	eors	r3, r2
    1d52:	4a03      	ldr	r2, [pc, #12]	; (1d60 <crc7_byte+0x2c>)
    1d54:	5cd3      	ldrb	r3, [r2, r3]
}
    1d56:	0018      	movs	r0, r3
    1d58:	46bd      	mov	sp, r7
    1d5a:	b002      	add	sp, #8
    1d5c:	bd80      	pop	{r7, pc}
    1d5e:	46c0      	nop			; (mov r8, r8)
    1d60:	0000d688 	.word	0x0000d688

00001d64 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    1d64:	b590      	push	{r4, r7, lr}
    1d66:	b085      	sub	sp, #20
    1d68:	af00      	add	r7, sp, #0
    1d6a:	60b9      	str	r1, [r7, #8]
    1d6c:	607a      	str	r2, [r7, #4]
    1d6e:	230f      	movs	r3, #15
    1d70:	18fb      	adds	r3, r7, r3
    1d72:	1c02      	adds	r2, r0, #0
    1d74:	701a      	strb	r2, [r3, #0]
	while (len--)
    1d76:	e00e      	b.n	1d96 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    1d78:	68bb      	ldr	r3, [r7, #8]
    1d7a:	1c5a      	adds	r2, r3, #1
    1d7c:	60ba      	str	r2, [r7, #8]
    1d7e:	781a      	ldrb	r2, [r3, #0]
    1d80:	230f      	movs	r3, #15
    1d82:	18fc      	adds	r4, r7, r3
    1d84:	230f      	movs	r3, #15
    1d86:	18fb      	adds	r3, r7, r3
    1d88:	781b      	ldrb	r3, [r3, #0]
    1d8a:	0011      	movs	r1, r2
    1d8c:	0018      	movs	r0, r3
    1d8e:	4b08      	ldr	r3, [pc, #32]	; (1db0 <crc7+0x4c>)
    1d90:	4798      	blx	r3
    1d92:	0003      	movs	r3, r0
    1d94:	7023      	strb	r3, [r4, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    1d96:	687b      	ldr	r3, [r7, #4]
    1d98:	1e5a      	subs	r2, r3, #1
    1d9a:	607a      	str	r2, [r7, #4]
    1d9c:	2b00      	cmp	r3, #0
    1d9e:	d1eb      	bne.n	1d78 <crc7+0x14>
		crc = crc7_byte(crc, *buffer++);
	return crc;
    1da0:	230f      	movs	r3, #15
    1da2:	18fb      	adds	r3, r7, r3
    1da4:	781b      	ldrb	r3, [r3, #0]
}
    1da6:	0018      	movs	r0, r3
    1da8:	46bd      	mov	sp, r7
    1daa:	b005      	add	sp, #20
    1dac:	bd90      	pop	{r4, r7, pc}
    1dae:	46c0      	nop			; (mov r8, r8)
    1db0:	00001d35 	.word	0x00001d35

00001db4 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    1db4:	b590      	push	{r4, r7, lr}
    1db6:	b089      	sub	sp, #36	; 0x24
    1db8:	af00      	add	r7, sp, #0
    1dba:	60b9      	str	r1, [r7, #8]
    1dbc:	607a      	str	r2, [r7, #4]
    1dbe:	603b      	str	r3, [r7, #0]
    1dc0:	230f      	movs	r3, #15
    1dc2:	18fb      	adds	r3, r7, r3
    1dc4:	1c02      	adds	r2, r0, #0
    1dc6:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    1dc8:	231f      	movs	r3, #31
    1dca:	18fb      	adds	r3, r7, r3
    1dcc:	2205      	movs	r2, #5
    1dce:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    1dd0:	231e      	movs	r3, #30
    1dd2:	18fb      	adds	r3, r7, r3
    1dd4:	2201      	movs	r2, #1
    1dd6:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    1dd8:	2314      	movs	r3, #20
    1dda:	18fb      	adds	r3, r7, r3
    1ddc:	220f      	movs	r2, #15
    1dde:	18ba      	adds	r2, r7, r2
    1de0:	7812      	ldrb	r2, [r2, #0]
    1de2:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    1de4:	230f      	movs	r3, #15
    1de6:	18fb      	adds	r3, r7, r3
    1de8:	781b      	ldrb	r3, [r3, #0]
    1dea:	3bc1      	subs	r3, #193	; 0xc1
    1dec:	2b0e      	cmp	r3, #14
    1dee:	d900      	bls.n	1df2 <spi_cmd+0x3e>
    1df0:	e11b      	b.n	202a <STACK_SIZE+0x2a>
    1df2:	009a      	lsls	r2, r3, #2
    1df4:	4bb6      	ldr	r3, [pc, #728]	; (20d0 <STACK_SIZE+0xd0>)
    1df6:	18d3      	adds	r3, r2, r3
    1df8:	681b      	ldr	r3, [r3, #0]
    1dfa:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    1dfc:	68bb      	ldr	r3, [r7, #8]
    1dfe:	0c1b      	lsrs	r3, r3, #16
    1e00:	b2da      	uxtb	r2, r3
    1e02:	2314      	movs	r3, #20
    1e04:	18fb      	adds	r3, r7, r3
    1e06:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1e08:	68bb      	ldr	r3, [r7, #8]
    1e0a:	0a1b      	lsrs	r3, r3, #8
    1e0c:	b2da      	uxtb	r2, r3
    1e0e:	2314      	movs	r3, #20
    1e10:	18fb      	adds	r3, r7, r3
    1e12:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    1e14:	68bb      	ldr	r3, [r7, #8]
    1e16:	b2da      	uxtb	r2, r3
    1e18:	2314      	movs	r3, #20
    1e1a:	18fb      	adds	r3, r7, r3
    1e1c:	70da      	strb	r2, [r3, #3]
		len = 5;
    1e1e:	231f      	movs	r3, #31
    1e20:	18fb      	adds	r3, r7, r3
    1e22:	2205      	movs	r2, #5
    1e24:	701a      	strb	r2, [r3, #0]
		break; 
    1e26:	e105      	b.n	2034 <STACK_SIZE+0x34>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		bc[1] = (uint8)(adr >> 8);
    1e28:	68bb      	ldr	r3, [r7, #8]
    1e2a:	0a1b      	lsrs	r3, r3, #8
    1e2c:	b2da      	uxtb	r2, r3
    1e2e:	2314      	movs	r3, #20
    1e30:	18fb      	adds	r3, r7, r3
    1e32:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    1e34:	2330      	movs	r3, #48	; 0x30
    1e36:	18fb      	adds	r3, r7, r3
    1e38:	781b      	ldrb	r3, [r3, #0]
    1e3a:	2b00      	cmp	r3, #0
    1e3c:	d009      	beq.n	1e52 <spi_cmd+0x9e>
    1e3e:	2314      	movs	r3, #20
    1e40:	18fb      	adds	r3, r7, r3
    1e42:	785b      	ldrb	r3, [r3, #1]
    1e44:	2280      	movs	r2, #128	; 0x80
    1e46:	4252      	negs	r2, r2
    1e48:	4313      	orrs	r3, r2
    1e4a:	b2da      	uxtb	r2, r3
    1e4c:	2314      	movs	r3, #20
    1e4e:	18fb      	adds	r3, r7, r3
    1e50:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    1e52:	68bb      	ldr	r3, [r7, #8]
    1e54:	b2da      	uxtb	r2, r3
    1e56:	2314      	movs	r3, #20
    1e58:	18fb      	adds	r3, r7, r3
    1e5a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1e5c:	2314      	movs	r3, #20
    1e5e:	18fb      	adds	r3, r7, r3
    1e60:	2200      	movs	r2, #0
    1e62:	70da      	strb	r2, [r3, #3]
		len = 5;
    1e64:	231f      	movs	r3, #31
    1e66:	18fb      	adds	r3, r7, r3
    1e68:	2205      	movs	r2, #5
    1e6a:	701a      	strb	r2, [r3, #0]
		break;
    1e6c:	e0e2      	b.n	2034 <STACK_SIZE+0x34>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    1e6e:	2314      	movs	r3, #20
    1e70:	18fb      	adds	r3, r7, r3
    1e72:	2200      	movs	r2, #0
    1e74:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    1e76:	2314      	movs	r3, #20
    1e78:	18fb      	adds	r3, r7, r3
    1e7a:	2200      	movs	r2, #0
    1e7c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1e7e:	2314      	movs	r3, #20
    1e80:	18fb      	adds	r3, r7, r3
    1e82:	2200      	movs	r2, #0
    1e84:	70da      	strb	r2, [r3, #3]
		len = 5;
    1e86:	231f      	movs	r3, #31
    1e88:	18fb      	adds	r3, r7, r3
    1e8a:	2205      	movs	r2, #5
    1e8c:	701a      	strb	r2, [r3, #0]
		break;
    1e8e:	e0d1      	b.n	2034 <STACK_SIZE+0x34>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    1e90:	2314      	movs	r3, #20
    1e92:	18fb      	adds	r3, r7, r3
    1e94:	2200      	movs	r2, #0
    1e96:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    1e98:	2314      	movs	r3, #20
    1e9a:	18fb      	adds	r3, r7, r3
    1e9c:	2200      	movs	r2, #0
    1e9e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1ea0:	2314      	movs	r3, #20
    1ea2:	18fb      	adds	r3, r7, r3
    1ea4:	2200      	movs	r2, #0
    1ea6:	70da      	strb	r2, [r3, #3]
		len = 5;
    1ea8:	231f      	movs	r3, #31
    1eaa:	18fb      	adds	r3, r7, r3
    1eac:	2205      	movs	r2, #5
    1eae:	701a      	strb	r2, [r3, #0]
		break;
    1eb0:	e0c0      	b.n	2034 <STACK_SIZE+0x34>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    1eb2:	2314      	movs	r3, #20
    1eb4:	18fb      	adds	r3, r7, r3
    1eb6:	22ff      	movs	r2, #255	; 0xff
    1eb8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    1eba:	2314      	movs	r3, #20
    1ebc:	18fb      	adds	r3, r7, r3
    1ebe:	22ff      	movs	r2, #255	; 0xff
    1ec0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    1ec2:	2314      	movs	r3, #20
    1ec4:	18fb      	adds	r3, r7, r3
    1ec6:	22ff      	movs	r2, #255	; 0xff
    1ec8:	70da      	strb	r2, [r3, #3]
		len = 5;
    1eca:	231f      	movs	r3, #31
    1ecc:	18fb      	adds	r3, r7, r3
    1ece:	2205      	movs	r2, #5
    1ed0:	701a      	strb	r2, [r3, #0]
		break;
    1ed2:	e0af      	b.n	2034 <STACK_SIZE+0x34>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    1ed4:	68bb      	ldr	r3, [r7, #8]
    1ed6:	0c1b      	lsrs	r3, r3, #16
    1ed8:	b2da      	uxtb	r2, r3
    1eda:	2314      	movs	r3, #20
    1edc:	18fb      	adds	r3, r7, r3
    1ede:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1ee0:	68bb      	ldr	r3, [r7, #8]
    1ee2:	0a1b      	lsrs	r3, r3, #8
    1ee4:	b2da      	uxtb	r2, r3
    1ee6:	2314      	movs	r3, #20
    1ee8:	18fb      	adds	r3, r7, r3
    1eea:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    1eec:	68bb      	ldr	r3, [r7, #8]
    1eee:	b2da      	uxtb	r2, r3
    1ef0:	2314      	movs	r3, #20
    1ef2:	18fb      	adds	r3, r7, r3
    1ef4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    1ef6:	683b      	ldr	r3, [r7, #0]
    1ef8:	0a1b      	lsrs	r3, r3, #8
    1efa:	b2da      	uxtb	r2, r3
    1efc:	2314      	movs	r3, #20
    1efe:	18fb      	adds	r3, r7, r3
    1f00:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    1f02:	683b      	ldr	r3, [r7, #0]
    1f04:	b2da      	uxtb	r2, r3
    1f06:	2314      	movs	r3, #20
    1f08:	18fb      	adds	r3, r7, r3
    1f0a:	715a      	strb	r2, [r3, #5]
		len = 7;
    1f0c:	231f      	movs	r3, #31
    1f0e:	18fb      	adds	r3, r7, r3
    1f10:	2207      	movs	r2, #7
    1f12:	701a      	strb	r2, [r3, #0]
		break;
    1f14:	e08e      	b.n	2034 <STACK_SIZE+0x34>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    1f16:	68bb      	ldr	r3, [r7, #8]
    1f18:	0c1b      	lsrs	r3, r3, #16
    1f1a:	b2da      	uxtb	r2, r3
    1f1c:	2314      	movs	r3, #20
    1f1e:	18fb      	adds	r3, r7, r3
    1f20:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1f22:	68bb      	ldr	r3, [r7, #8]
    1f24:	0a1b      	lsrs	r3, r3, #8
    1f26:	b2da      	uxtb	r2, r3
    1f28:	2314      	movs	r3, #20
    1f2a:	18fb      	adds	r3, r7, r3
    1f2c:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    1f2e:	68bb      	ldr	r3, [r7, #8]
    1f30:	b2da      	uxtb	r2, r3
    1f32:	2314      	movs	r3, #20
    1f34:	18fb      	adds	r3, r7, r3
    1f36:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    1f38:	683b      	ldr	r3, [r7, #0]
    1f3a:	0c1b      	lsrs	r3, r3, #16
    1f3c:	b2da      	uxtb	r2, r3
    1f3e:	2314      	movs	r3, #20
    1f40:	18fb      	adds	r3, r7, r3
    1f42:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    1f44:	683b      	ldr	r3, [r7, #0]
    1f46:	0a1b      	lsrs	r3, r3, #8
    1f48:	b2da      	uxtb	r2, r3
    1f4a:	2314      	movs	r3, #20
    1f4c:	18fb      	adds	r3, r7, r3
    1f4e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    1f50:	683b      	ldr	r3, [r7, #0]
    1f52:	b2da      	uxtb	r2, r3
    1f54:	2314      	movs	r3, #20
    1f56:	18fb      	adds	r3, r7, r3
    1f58:	719a      	strb	r2, [r3, #6]
		len = 8;
    1f5a:	231f      	movs	r3, #31
    1f5c:	18fb      	adds	r3, r7, r3
    1f5e:	2208      	movs	r2, #8
    1f60:	701a      	strb	r2, [r3, #0]
		break;
    1f62:	e067      	b.n	2034 <STACK_SIZE+0x34>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    1f64:	68bb      	ldr	r3, [r7, #8]
    1f66:	0a1b      	lsrs	r3, r3, #8
    1f68:	b2da      	uxtb	r2, r3
    1f6a:	2314      	movs	r3, #20
    1f6c:	18fb      	adds	r3, r7, r3
    1f6e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    1f70:	2330      	movs	r3, #48	; 0x30
    1f72:	18fb      	adds	r3, r7, r3
    1f74:	781b      	ldrb	r3, [r3, #0]
    1f76:	2b00      	cmp	r3, #0
    1f78:	d009      	beq.n	1f8e <spi_cmd+0x1da>
    1f7a:	2314      	movs	r3, #20
    1f7c:	18fb      	adds	r3, r7, r3
    1f7e:	785b      	ldrb	r3, [r3, #1]
    1f80:	2280      	movs	r2, #128	; 0x80
    1f82:	4252      	negs	r2, r2
    1f84:	4313      	orrs	r3, r2
    1f86:	b2da      	uxtb	r2, r3
    1f88:	2314      	movs	r3, #20
    1f8a:	18fb      	adds	r3, r7, r3
    1f8c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    1f8e:	68bb      	ldr	r3, [r7, #8]
    1f90:	b2da      	uxtb	r2, r3
    1f92:	2314      	movs	r3, #20
    1f94:	18fb      	adds	r3, r7, r3
    1f96:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    1f98:	687b      	ldr	r3, [r7, #4]
    1f9a:	0e1b      	lsrs	r3, r3, #24
    1f9c:	b2da      	uxtb	r2, r3
    1f9e:	2314      	movs	r3, #20
    1fa0:	18fb      	adds	r3, r7, r3
    1fa2:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    1fa4:	687b      	ldr	r3, [r7, #4]
    1fa6:	0c1b      	lsrs	r3, r3, #16
    1fa8:	b2da      	uxtb	r2, r3
    1faa:	2314      	movs	r3, #20
    1fac:	18fb      	adds	r3, r7, r3
    1fae:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    1fb0:	687b      	ldr	r3, [r7, #4]
    1fb2:	0a1b      	lsrs	r3, r3, #8
    1fb4:	b2da      	uxtb	r2, r3
    1fb6:	2314      	movs	r3, #20
    1fb8:	18fb      	adds	r3, r7, r3
    1fba:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    1fbc:	687b      	ldr	r3, [r7, #4]
    1fbe:	b2da      	uxtb	r2, r3
    1fc0:	2314      	movs	r3, #20
    1fc2:	18fb      	adds	r3, r7, r3
    1fc4:	719a      	strb	r2, [r3, #6]
		len = 8;
    1fc6:	231f      	movs	r3, #31
    1fc8:	18fb      	adds	r3, r7, r3
    1fca:	2208      	movs	r2, #8
    1fcc:	701a      	strb	r2, [r3, #0]
		break;
    1fce:	e031      	b.n	2034 <STACK_SIZE+0x34>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    1fd0:	68bb      	ldr	r3, [r7, #8]
    1fd2:	0c1b      	lsrs	r3, r3, #16
    1fd4:	b2da      	uxtb	r2, r3
    1fd6:	2314      	movs	r3, #20
    1fd8:	18fb      	adds	r3, r7, r3
    1fda:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1fdc:	68bb      	ldr	r3, [r7, #8]
    1fde:	0a1b      	lsrs	r3, r3, #8
    1fe0:	b2da      	uxtb	r2, r3
    1fe2:	2314      	movs	r3, #20
    1fe4:	18fb      	adds	r3, r7, r3
    1fe6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    1fe8:	68bb      	ldr	r3, [r7, #8]
    1fea:	b2da      	uxtb	r2, r3
    1fec:	2314      	movs	r3, #20
    1fee:	18fb      	adds	r3, r7, r3
    1ff0:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	0e1b      	lsrs	r3, r3, #24
    1ff6:	b2da      	uxtb	r2, r3
    1ff8:	2314      	movs	r3, #20
    1ffa:	18fb      	adds	r3, r7, r3
    1ffc:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    1ffe:	687b      	ldr	r3, [r7, #4]
    2000:	0c1b      	lsrs	r3, r3, #16
    2002:	b2da      	uxtb	r2, r3
    2004:	2314      	movs	r3, #20
    2006:	18fb      	adds	r3, r7, r3
    2008:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    200a:	687b      	ldr	r3, [r7, #4]
    200c:	0a1b      	lsrs	r3, r3, #8
    200e:	b2da      	uxtb	r2, r3
    2010:	2314      	movs	r3, #20
    2012:	18fb      	adds	r3, r7, r3
    2014:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    2016:	687b      	ldr	r3, [r7, #4]
    2018:	b2da      	uxtb	r2, r3
    201a:	2314      	movs	r3, #20
    201c:	18fb      	adds	r3, r7, r3
    201e:	71da      	strb	r2, [r3, #7]
		len = 9;
    2020:	231f      	movs	r3, #31
    2022:	18fb      	adds	r3, r7, r3
    2024:	2209      	movs	r2, #9
    2026:	701a      	strb	r2, [r3, #0]
		break;
    2028:	e004      	b.n	2034 <STACK_SIZE+0x34>
	default:
		result = N_FAIL;
    202a:	231e      	movs	r3, #30
    202c:	18fb      	adds	r3, r7, r3
    202e:	2200      	movs	r2, #0
    2030:	701a      	strb	r2, [r3, #0]
		break;
    2032:	46c0      	nop			; (mov r8, r8)
	}
	
	if (result) {
    2034:	231e      	movs	r3, #30
    2036:	18fb      	adds	r3, r7, r3
    2038:	781b      	ldrb	r3, [r3, #0]
    203a:	b25b      	sxtb	r3, r3
    203c:	2b00      	cmp	r3, #0
    203e:	d03f      	beq.n	20c0 <STACK_SIZE+0xc0>
		if (!gu8Crc_off)
    2040:	4b24      	ldr	r3, [pc, #144]	; (20d4 <STACK_SIZE+0xd4>)
    2042:	781b      	ldrb	r3, [r3, #0]
    2044:	2b00      	cmp	r3, #0
    2046:	d115      	bne.n	2074 <STACK_SIZE+0x74>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2048:	231f      	movs	r3, #31
    204a:	18fb      	adds	r3, r7, r3
    204c:	781b      	ldrb	r3, [r3, #0]
    204e:	1e5c      	subs	r4, r3, #1
    2050:	231f      	movs	r3, #31
    2052:	18fb      	adds	r3, r7, r3
    2054:	781b      	ldrb	r3, [r3, #0]
    2056:	3b01      	subs	r3, #1
    2058:	001a      	movs	r2, r3
    205a:	2314      	movs	r3, #20
    205c:	18fb      	adds	r3, r7, r3
    205e:	0019      	movs	r1, r3
    2060:	207f      	movs	r0, #127	; 0x7f
    2062:	4b1d      	ldr	r3, [pc, #116]	; (20d8 <STACK_SIZE+0xd8>)
    2064:	4798      	blx	r3
    2066:	0003      	movs	r3, r0
    2068:	18db      	adds	r3, r3, r3
    206a:	b2da      	uxtb	r2, r3
    206c:	2314      	movs	r3, #20
    206e:	18fb      	adds	r3, r7, r3
    2070:	551a      	strb	r2, [r3, r4]
    2072:	e006      	b.n	2082 <STACK_SIZE+0x82>
		else
			len-=1;
    2074:	231f      	movs	r3, #31
    2076:	18fb      	adds	r3, r7, r3
    2078:	221f      	movs	r2, #31
    207a:	18ba      	adds	r2, r7, r2
    207c:	7812      	ldrb	r2, [r2, #0]
    207e:	3a01      	subs	r2, #1
    2080:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    2082:	231f      	movs	r3, #31
    2084:	18fb      	adds	r3, r7, r3
    2086:	781b      	ldrb	r3, [r3, #0]
    2088:	b29a      	uxth	r2, r3
    208a:	2314      	movs	r3, #20
    208c:	18fb      	adds	r3, r7, r3
    208e:	0011      	movs	r1, r2
    2090:	0018      	movs	r0, r3
    2092:	4b12      	ldr	r3, [pc, #72]	; (20dc <STACK_SIZE+0xdc>)
    2094:	4798      	blx	r3
    2096:	1e03      	subs	r3, r0, #0
    2098:	d012      	beq.n	20c0 <STACK_SIZE+0xc0>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    209a:	2320      	movs	r3, #32
    209c:	33ff      	adds	r3, #255	; 0xff
    209e:	001a      	movs	r2, r3
    20a0:	490f      	ldr	r1, [pc, #60]	; (20e0 <STACK_SIZE+0xe0>)
    20a2:	4b10      	ldr	r3, [pc, #64]	; (20e4 <STACK_SIZE+0xe4>)
    20a4:	0018      	movs	r0, r3
    20a6:	4b10      	ldr	r3, [pc, #64]	; (20e8 <STACK_SIZE+0xe8>)
    20a8:	4798      	blx	r3
    20aa:	4b10      	ldr	r3, [pc, #64]	; (20ec <STACK_SIZE+0xec>)
    20ac:	0018      	movs	r0, r3
    20ae:	4b10      	ldr	r3, [pc, #64]	; (20f0 <STACK_SIZE+0xf0>)
    20b0:	4798      	blx	r3
    20b2:	200d      	movs	r0, #13
    20b4:	4b0f      	ldr	r3, [pc, #60]	; (20f4 <STACK_SIZE+0xf4>)
    20b6:	4798      	blx	r3
			result = N_FAIL;
    20b8:	231e      	movs	r3, #30
    20ba:	18fb      	adds	r3, r7, r3
    20bc:	2200      	movs	r2, #0
    20be:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    20c0:	231e      	movs	r3, #30
    20c2:	18fb      	adds	r3, r7, r3
    20c4:	781b      	ldrb	r3, [r3, #0]
    20c6:	b25b      	sxtb	r3, r3
}
    20c8:	0018      	movs	r0, r3
    20ca:	46bd      	mov	sp, r7
    20cc:	b009      	add	sp, #36	; 0x24
    20ce:	bd90      	pop	{r4, r7, pc}
    20d0:	0000dc40 	.word	0x0000dc40
    20d4:	20000d50 	.word	0x20000d50
    20d8:	00001d65 	.word	0x00001d65
    20dc:	00001cf1 	.word	0x00001cf1
    20e0:	0000dc7c 	.word	0x0000dc7c
    20e4:	0000d788 	.word	0x0000d788
    20e8:	00006e11 	.word	0x00006e11
    20ec:	0000d79c 	.word	0x0000d79c
    20f0:	00006eb9 	.word	0x00006eb9
    20f4:	00006e35 	.word	0x00006e35

000020f8 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    20f8:	b580      	push	{r7, lr}
    20fa:	b084      	sub	sp, #16
    20fc:	af00      	add	r7, sp, #0
    20fe:	0002      	movs	r2, r0
    2100:	1dfb      	adds	r3, r7, #7
    2102:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    2104:	230f      	movs	r3, #15
    2106:	18fb      	adds	r3, r7, r3
    2108:	2201      	movs	r2, #1
    210a:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    210c:	1dfb      	adds	r3, r7, #7
    210e:	781b      	ldrb	r3, [r3, #0]
    2110:	2bcf      	cmp	r3, #207	; 0xcf
    2112:	d007      	beq.n	2124 <spi_cmd_rsp+0x2c>
    2114:	1dfb      	adds	r3, r7, #7
    2116:	781b      	ldrb	r3, [r3, #0]
    2118:	2bc5      	cmp	r3, #197	; 0xc5
    211a:	d003      	beq.n	2124 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    211c:	1dfb      	adds	r3, r7, #7
    211e:	781b      	ldrb	r3, [r3, #0]
    2120:	2bc6      	cmp	r3, #198	; 0xc6
    2122:	d10c      	bne.n	213e <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2124:	230d      	movs	r3, #13
    2126:	18fb      	adds	r3, r7, r3
    2128:	2101      	movs	r1, #1
    212a:	0018      	movs	r0, r3
    212c:	4b39      	ldr	r3, [pc, #228]	; (2214 <spi_cmd_rsp+0x11c>)
    212e:	4798      	blx	r3
    2130:	1e03      	subs	r3, r0, #0
    2132:	d004      	beq.n	213e <spi_cmd_rsp+0x46>
			result = N_FAIL;
    2134:	230f      	movs	r3, #15
    2136:	18fb      	adds	r3, r7, r3
    2138:	2200      	movs	r2, #0
    213a:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    213c:	e061      	b.n	2202 <spi_cmd_rsp+0x10a>
		}
	}	

	/* wait for response */
	s8RetryCnt = 10;
    213e:	230e      	movs	r3, #14
    2140:	18fb      	adds	r3, r7, r3
    2142:	220a      	movs	r2, #10
    2144:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2146:	230d      	movs	r3, #13
    2148:	18fb      	adds	r3, r7, r3
    214a:	2101      	movs	r1, #1
    214c:	0018      	movs	r0, r3
    214e:	4b31      	ldr	r3, [pc, #196]	; (2214 <spi_cmd_rsp+0x11c>)
    2150:	4798      	blx	r3
    2152:	1e03      	subs	r3, r0, #0
    2154:	d012      	beq.n	217c <spi_cmd_rsp+0x84>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    2156:	239f      	movs	r3, #159	; 0x9f
    2158:	005a      	lsls	r2, r3, #1
    215a:	492f      	ldr	r1, [pc, #188]	; (2218 <spi_cmd_rsp+0x120>)
    215c:	4b2f      	ldr	r3, [pc, #188]	; (221c <spi_cmd_rsp+0x124>)
    215e:	0018      	movs	r0, r3
    2160:	4b2f      	ldr	r3, [pc, #188]	; (2220 <spi_cmd_rsp+0x128>)
    2162:	4798      	blx	r3
    2164:	4b2f      	ldr	r3, [pc, #188]	; (2224 <spi_cmd_rsp+0x12c>)
    2166:	0018      	movs	r0, r3
    2168:	4b2f      	ldr	r3, [pc, #188]	; (2228 <spi_cmd_rsp+0x130>)
    216a:	4798      	blx	r3
    216c:	200d      	movs	r0, #13
    216e:	4b2f      	ldr	r3, [pc, #188]	; (222c <spi_cmd_rsp+0x134>)
    2170:	4798      	blx	r3
			result = N_FAIL;
    2172:	230f      	movs	r3, #15
    2174:	18fb      	adds	r3, r7, r3
    2176:	2200      	movs	r2, #0
    2178:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    217a:	e042      	b.n	2202 <spi_cmd_rsp+0x10a>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    217c:	230d      	movs	r3, #13
    217e:	18fb      	adds	r3, r7, r3
    2180:	781b      	ldrb	r3, [r3, #0]
    2182:	1dfa      	adds	r2, r7, #7
    2184:	7812      	ldrb	r2, [r2, #0]
    2186:	429a      	cmp	r2, r3
    2188:	d00b      	beq.n	21a2 <spi_cmd_rsp+0xaa>
    218a:	230e      	movs	r3, #14
    218c:	18fb      	adds	r3, r7, r3
    218e:	781b      	ldrb	r3, [r3, #0]
    2190:	b25b      	sxtb	r3, r3
    2192:	b2da      	uxtb	r2, r3
    2194:	3a01      	subs	r2, #1
    2196:	b2d1      	uxtb	r1, r2
    2198:	220e      	movs	r2, #14
    219a:	18ba      	adds	r2, r7, r2
    219c:	7011      	strb	r1, [r2, #0]
    219e:	2b00      	cmp	r3, #0
    21a0:	dcd1      	bgt.n	2146 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = 10;
    21a2:	230e      	movs	r3, #14
    21a4:	18fb      	adds	r3, r7, r3
    21a6:	220a      	movs	r2, #10
    21a8:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    21aa:	230d      	movs	r3, #13
    21ac:	18fb      	adds	r3, r7, r3
    21ae:	2101      	movs	r1, #1
    21b0:	0018      	movs	r0, r3
    21b2:	4b18      	ldr	r3, [pc, #96]	; (2214 <spi_cmd_rsp+0x11c>)
    21b4:	4798      	blx	r3
    21b6:	1e03      	subs	r3, r0, #0
    21b8:	d012      	beq.n	21e0 <spi_cmd_rsp+0xe8>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    21ba:	23a6      	movs	r3, #166	; 0xa6
    21bc:	005a      	lsls	r2, r3, #1
    21be:	4916      	ldr	r1, [pc, #88]	; (2218 <spi_cmd_rsp+0x120>)
    21c0:	4b16      	ldr	r3, [pc, #88]	; (221c <spi_cmd_rsp+0x124>)
    21c2:	0018      	movs	r0, r3
    21c4:	4b16      	ldr	r3, [pc, #88]	; (2220 <spi_cmd_rsp+0x128>)
    21c6:	4798      	blx	r3
    21c8:	4b16      	ldr	r3, [pc, #88]	; (2224 <spi_cmd_rsp+0x12c>)
    21ca:	0018      	movs	r0, r3
    21cc:	4b16      	ldr	r3, [pc, #88]	; (2228 <spi_cmd_rsp+0x130>)
    21ce:	4798      	blx	r3
    21d0:	200d      	movs	r0, #13
    21d2:	4b16      	ldr	r3, [pc, #88]	; (222c <spi_cmd_rsp+0x134>)
    21d4:	4798      	blx	r3
			result = N_FAIL;
    21d6:	230f      	movs	r3, #15
    21d8:	18fb      	adds	r3, r7, r3
    21da:	2200      	movs	r2, #0
    21dc:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    21de:	e010      	b.n	2202 <spi_cmd_rsp+0x10a>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    21e0:	230d      	movs	r3, #13
    21e2:	18fb      	adds	r3, r7, r3
    21e4:	781b      	ldrb	r3, [r3, #0]
    21e6:	2b00      	cmp	r3, #0
    21e8:	d00b      	beq.n	2202 <spi_cmd_rsp+0x10a>
    21ea:	230e      	movs	r3, #14
    21ec:	18fb      	adds	r3, r7, r3
    21ee:	781b      	ldrb	r3, [r3, #0]
    21f0:	b25b      	sxtb	r3, r3
    21f2:	b2da      	uxtb	r2, r3
    21f4:	3a01      	subs	r2, #1
    21f6:	b2d1      	uxtb	r1, r2
    21f8:	220e      	movs	r2, #14
    21fa:	18ba      	adds	r2, r7, r2
    21fc:	7011      	strb	r1, [r2, #0]
    21fe:	2b00      	cmp	r3, #0
    2200:	dcd3      	bgt.n	21aa <spi_cmd_rsp+0xb2>

_fail_:

	return result;
    2202:	230f      	movs	r3, #15
    2204:	18fb      	adds	r3, r7, r3
    2206:	781b      	ldrb	r3, [r3, #0]
    2208:	b25b      	sxtb	r3, r3
}
    220a:	0018      	movs	r0, r3
    220c:	46bd      	mov	sp, r7
    220e:	b004      	add	sp, #16
    2210:	bd80      	pop	{r7, pc}
    2212:	46c0      	nop			; (mov r8, r8)
    2214:	00001cad 	.word	0x00001cad
    2218:	0000dc84 	.word	0x0000dc84
    221c:	0000d788 	.word	0x0000d788
    2220:	00006e11 	.word	0x00006e11
    2224:	0000d7c8 	.word	0x0000d7c8
    2228:	00006eb9 	.word	0x00006eb9
    222c:	00006e35 	.word	0x00006e35

00002230 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    2230:	b580      	push	{r7, lr}
    2232:	b086      	sub	sp, #24
    2234:	af00      	add	r7, sp, #0
    2236:	6078      	str	r0, [r7, #4]
    2238:	0008      	movs	r0, r1
    223a:	0011      	movs	r1, r2
    223c:	1cbb      	adds	r3, r7, #2
    223e:	1c02      	adds	r2, r0, #0
    2240:	801a      	strh	r2, [r3, #0]
    2242:	1c7b      	adds	r3, r7, #1
    2244:	1c0a      	adds	r2, r1, #0
    2246:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    2248:	2311      	movs	r3, #17
    224a:	18fb      	adds	r3, r7, r3
    224c:	2201      	movs	r2, #1
    224e:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    2250:	2314      	movs	r3, #20
    2252:	18fb      	adds	r3, r7, r3
    2254:	2200      	movs	r2, #0
    2256:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    2258:	1cbb      	adds	r3, r7, #2
    225a:	881a      	ldrh	r2, [r3, #0]
    225c:	2380      	movs	r3, #128	; 0x80
    225e:	019b      	lsls	r3, r3, #6
    2260:	429a      	cmp	r2, r3
    2262:	d805      	bhi.n	2270 <spi_data_read+0x40>
			nbytes = sz;
    2264:	2312      	movs	r3, #18
    2266:	18fb      	adds	r3, r7, r3
    2268:	1cba      	adds	r2, r7, #2
    226a:	8812      	ldrh	r2, [r2, #0]
    226c:	801a      	strh	r2, [r3, #0]
    226e:	e004      	b.n	227a <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    2270:	2312      	movs	r3, #18
    2272:	18fb      	adds	r3, r7, r3
    2274:	2280      	movs	r2, #128	; 0x80
    2276:	0192      	lsls	r2, r2, #6
    2278:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = 10;
    227a:	2316      	movs	r3, #22
    227c:	18fb      	adds	r3, r7, r3
    227e:	220a      	movs	r2, #10
    2280:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2282:	230b      	movs	r3, #11
    2284:	18fb      	adds	r3, r7, r3
    2286:	2101      	movs	r1, #1
    2288:	0018      	movs	r0, r3
    228a:	4b5e      	ldr	r3, [pc, #376]	; (2404 <spi_data_read+0x1d4>)
    228c:	4798      	blx	r3
    228e:	1e03      	subs	r3, r0, #0
    2290:	d012      	beq.n	22b8 <spi_data_read+0x88>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    2292:	23b7      	movs	r3, #183	; 0xb7
    2294:	005a      	lsls	r2, r3, #1
    2296:	495c      	ldr	r1, [pc, #368]	; (2408 <spi_data_read+0x1d8>)
    2298:	4b5c      	ldr	r3, [pc, #368]	; (240c <spi_data_read+0x1dc>)
    229a:	0018      	movs	r0, r3
    229c:	4b5c      	ldr	r3, [pc, #368]	; (2410 <spi_data_read+0x1e0>)
    229e:	4798      	blx	r3
    22a0:	4b5c      	ldr	r3, [pc, #368]	; (2414 <spi_data_read+0x1e4>)
    22a2:	0018      	movs	r0, r3
    22a4:	4b5c      	ldr	r3, [pc, #368]	; (2418 <spi_data_read+0x1e8>)
    22a6:	4798      	blx	r3
    22a8:	200d      	movs	r0, #13
    22aa:	4b5c      	ldr	r3, [pc, #368]	; (241c <spi_data_read+0x1ec>)
    22ac:	4798      	blx	r3
				result = N_FAIL;
    22ae:	2311      	movs	r3, #17
    22b0:	18fb      	adds	r3, r7, r3
    22b2:	2200      	movs	r2, #0
    22b4:	701a      	strb	r2, [r3, #0]
				break;
    22b6:	e017      	b.n	22e8 <spi_data_read+0xb8>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    22b8:	230b      	movs	r3, #11
    22ba:	18fb      	adds	r3, r7, r3
    22bc:	781b      	ldrb	r3, [r3, #0]
    22be:	091b      	lsrs	r3, r3, #4
    22c0:	b2db      	uxtb	r3, r3
    22c2:	001a      	movs	r2, r3
    22c4:	230f      	movs	r3, #15
    22c6:	4013      	ands	r3, r2
    22c8:	2b0f      	cmp	r3, #15
    22ca:	d00c      	beq.n	22e6 <spi_data_read+0xb6>
				break;
		} while (retry--);
    22cc:	2316      	movs	r3, #22
    22ce:	18fb      	adds	r3, r7, r3
    22d0:	2200      	movs	r2, #0
    22d2:	5e9b      	ldrsh	r3, [r3, r2]
    22d4:	b29a      	uxth	r2, r3
    22d6:	3a01      	subs	r2, #1
    22d8:	b291      	uxth	r1, r2
    22da:	2216      	movs	r2, #22
    22dc:	18ba      	adds	r2, r7, r2
    22de:	8011      	strh	r1, [r2, #0]
    22e0:	2b00      	cmp	r3, #0
    22e2:	d1ce      	bne.n	2282 <spi_data_read+0x52>
    22e4:	e000      	b.n	22e8 <spi_data_read+0xb8>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
    22e6:	46c0      	nop			; (mov r8, r8)
		} while (retry--);
		
		if (result == N_FAIL)
    22e8:	2311      	movs	r3, #17
    22ea:	18fb      	adds	r3, r7, r3
    22ec:	781b      	ldrb	r3, [r3, #0]
    22ee:	b25b      	sxtb	r3, r3
    22f0:	2b00      	cmp	r3, #0
    22f2:	d100      	bne.n	22f6 <spi_data_read+0xc6>
    22f4:	e07c      	b.n	23f0 <spi_data_read+0x1c0>
			break;

		if (retry <= 0) {
    22f6:	2316      	movs	r3, #22
    22f8:	18fb      	adds	r3, r7, r3
    22fa:	2200      	movs	r2, #0
    22fc:	5e9b      	ldrsh	r3, [r3, r2]
    22fe:	2b00      	cmp	r3, #0
    2300:	dc17      	bgt.n	2332 <spi_data_read+0x102>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    2302:	23bd      	movs	r3, #189	; 0xbd
    2304:	005a      	lsls	r2, r3, #1
    2306:	4940      	ldr	r1, [pc, #256]	; (2408 <spi_data_read+0x1d8>)
    2308:	4b40      	ldr	r3, [pc, #256]	; (240c <spi_data_read+0x1dc>)
    230a:	0018      	movs	r0, r3
    230c:	4b40      	ldr	r3, [pc, #256]	; (2410 <spi_data_read+0x1e0>)
    230e:	4798      	blx	r3
    2310:	230b      	movs	r3, #11
    2312:	18fb      	adds	r3, r7, r3
    2314:	781b      	ldrb	r3, [r3, #0]
    2316:	001a      	movs	r2, r3
    2318:	4b41      	ldr	r3, [pc, #260]	; (2420 <spi_data_read+0x1f0>)
    231a:	0011      	movs	r1, r2
    231c:	0018      	movs	r0, r3
    231e:	4b3c      	ldr	r3, [pc, #240]	; (2410 <spi_data_read+0x1e0>)
    2320:	4798      	blx	r3
    2322:	200d      	movs	r0, #13
    2324:	4b3d      	ldr	r3, [pc, #244]	; (241c <spi_data_read+0x1ec>)
    2326:	4798      	blx	r3
			result = N_FAIL;
    2328:	2311      	movs	r3, #17
    232a:	18fb      	adds	r3, r7, r3
    232c:	2200      	movs	r2, #0
    232e:	701a      	strb	r2, [r3, #0]
			break;
    2330:	e05f      	b.n	23f2 <spi_data_read+0x1c2>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    2332:	2314      	movs	r3, #20
    2334:	18fb      	adds	r3, r7, r3
    2336:	2200      	movs	r2, #0
    2338:	5e9b      	ldrsh	r3, [r3, r2]
    233a:	687a      	ldr	r2, [r7, #4]
    233c:	18d2      	adds	r2, r2, r3
    233e:	2312      	movs	r3, #18
    2340:	18fb      	adds	r3, r7, r3
    2342:	881b      	ldrh	r3, [r3, #0]
    2344:	0019      	movs	r1, r3
    2346:	0010      	movs	r0, r2
    2348:	4b2e      	ldr	r3, [pc, #184]	; (2404 <spi_data_read+0x1d4>)
    234a:	4798      	blx	r3
    234c:	1e03      	subs	r3, r0, #0
    234e:	d013      	beq.n	2378 <spi_data_read+0x148>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    2350:	2384      	movs	r3, #132	; 0x84
    2352:	33ff      	adds	r3, #255	; 0xff
    2354:	001a      	movs	r2, r3
    2356:	492c      	ldr	r1, [pc, #176]	; (2408 <spi_data_read+0x1d8>)
    2358:	4b2c      	ldr	r3, [pc, #176]	; (240c <spi_data_read+0x1dc>)
    235a:	0018      	movs	r0, r3
    235c:	4b2c      	ldr	r3, [pc, #176]	; (2410 <spi_data_read+0x1e0>)
    235e:	4798      	blx	r3
    2360:	4b30      	ldr	r3, [pc, #192]	; (2424 <spi_data_read+0x1f4>)
    2362:	0018      	movs	r0, r3
    2364:	4b2c      	ldr	r3, [pc, #176]	; (2418 <spi_data_read+0x1e8>)
    2366:	4798      	blx	r3
    2368:	200d      	movs	r0, #13
    236a:	4b2c      	ldr	r3, [pc, #176]	; (241c <spi_data_read+0x1ec>)
    236c:	4798      	blx	r3
			result = N_FAIL;
    236e:	2311      	movs	r3, #17
    2370:	18fb      	adds	r3, r7, r3
    2372:	2200      	movs	r2, #0
    2374:	701a      	strb	r2, [r3, #0]
			break;
    2376:	e03c      	b.n	23f2 <spi_data_read+0x1c2>
		}
		if(!clockless)
    2378:	1c7b      	adds	r3, r7, #1
    237a:	781b      	ldrb	r3, [r3, #0]
    237c:	2b00      	cmp	r3, #0
    237e:	d11e      	bne.n	23be <spi_data_read+0x18e>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    2380:	4b29      	ldr	r3, [pc, #164]	; (2428 <spi_data_read+0x1f8>)
    2382:	781b      	ldrb	r3, [r3, #0]
    2384:	2b00      	cmp	r3, #0
    2386:	d11a      	bne.n	23be <spi_data_read+0x18e>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    2388:	230c      	movs	r3, #12
    238a:	18fb      	adds	r3, r7, r3
    238c:	2102      	movs	r1, #2
    238e:	0018      	movs	r0, r3
    2390:	4b1c      	ldr	r3, [pc, #112]	; (2404 <spi_data_read+0x1d4>)
    2392:	4798      	blx	r3
    2394:	1e03      	subs	r3, r0, #0
    2396:	d012      	beq.n	23be <spi_data_read+0x18e>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    2398:	23c7      	movs	r3, #199	; 0xc7
    239a:	005a      	lsls	r2, r3, #1
    239c:	491a      	ldr	r1, [pc, #104]	; (2408 <spi_data_read+0x1d8>)
    239e:	4b1b      	ldr	r3, [pc, #108]	; (240c <spi_data_read+0x1dc>)
    23a0:	0018      	movs	r0, r3
    23a2:	4b1b      	ldr	r3, [pc, #108]	; (2410 <spi_data_read+0x1e0>)
    23a4:	4798      	blx	r3
    23a6:	4b21      	ldr	r3, [pc, #132]	; (242c <spi_data_read+0x1fc>)
    23a8:	0018      	movs	r0, r3
    23aa:	4b1b      	ldr	r3, [pc, #108]	; (2418 <spi_data_read+0x1e8>)
    23ac:	4798      	blx	r3
    23ae:	200d      	movs	r0, #13
    23b0:	4b1a      	ldr	r3, [pc, #104]	; (241c <spi_data_read+0x1ec>)
    23b2:	4798      	blx	r3
					result = N_FAIL;
    23b4:	2311      	movs	r3, #17
    23b6:	18fb      	adds	r3, r7, r3
    23b8:	2200      	movs	r2, #0
    23ba:	701a      	strb	r2, [r3, #0]
					break;
    23bc:	e019      	b.n	23f2 <spi_data_read+0x1c2>
				}
			}
		}
		ix += nbytes;
    23be:	2314      	movs	r3, #20
    23c0:	18fb      	adds	r3, r7, r3
    23c2:	881a      	ldrh	r2, [r3, #0]
    23c4:	2312      	movs	r3, #18
    23c6:	18fb      	adds	r3, r7, r3
    23c8:	881b      	ldrh	r3, [r3, #0]
    23ca:	18d3      	adds	r3, r2, r3
    23cc:	b29a      	uxth	r2, r3
    23ce:	2314      	movs	r3, #20
    23d0:	18fb      	adds	r3, r7, r3
    23d2:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    23d4:	2312      	movs	r3, #18
    23d6:	18fb      	adds	r3, r7, r3
    23d8:	881a      	ldrh	r2, [r3, #0]
    23da:	1cbb      	adds	r3, r7, #2
    23dc:	1cb9      	adds	r1, r7, #2
    23de:	8809      	ldrh	r1, [r1, #0]
    23e0:	1a8a      	subs	r2, r1, r2
    23e2:	801a      	strh	r2, [r3, #0]

	} while (sz);
    23e4:	1cbb      	adds	r3, r7, #2
    23e6:	881b      	ldrh	r3, [r3, #0]
    23e8:	2b00      	cmp	r3, #0
    23ea:	d000      	beq.n	23ee <spi_data_read+0x1be>
    23ec:	e734      	b.n	2258 <spi_data_read+0x28>
    23ee:	e000      	b.n	23f2 <spi_data_read+0x1c2>
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);
		
		if (result == N_FAIL)
			break;
    23f0:	46c0      	nop			; (mov r8, r8)
		ix += nbytes;
		sz -= nbytes;

	} while (sz);

	return result;
    23f2:	2311      	movs	r3, #17
    23f4:	18fb      	adds	r3, r7, r3
    23f6:	781b      	ldrb	r3, [r3, #0]
    23f8:	b25b      	sxtb	r3, r3
}
    23fa:	0018      	movs	r0, r3
    23fc:	46bd      	mov	sp, r7
    23fe:	b006      	add	sp, #24
    2400:	bd80      	pop	{r7, pc}
    2402:	46c0      	nop			; (mov r8, r8)
    2404:	00001cad 	.word	0x00001cad
    2408:	0000dc90 	.word	0x0000dc90
    240c:	0000d788 	.word	0x0000d788
    2410:	00006e11 	.word	0x00006e11
    2414:	0000d7fc 	.word	0x0000d7fc
    2418:	00006eb9 	.word	0x00006eb9
    241c:	00006e35 	.word	0x00006e35
    2420:	0000d830 	.word	0x0000d830
    2424:	0000d860 	.word	0x0000d860
    2428:	20000d50 	.word	0x20000d50
    242c:	0000d890 	.word	0x0000d890

00002430 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    2430:	b580      	push	{r7, lr}
    2432:	b086      	sub	sp, #24
    2434:	af00      	add	r7, sp, #0
    2436:	6078      	str	r0, [r7, #4]
    2438:	000a      	movs	r2, r1
    243a:	1cbb      	adds	r3, r7, #2
    243c:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    243e:	2313      	movs	r3, #19
    2440:	18fb      	adds	r3, r7, r3
    2442:	2201      	movs	r2, #1
    2444:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    2446:	230c      	movs	r3, #12
    2448:	18fb      	adds	r3, r7, r3
    244a:	2200      	movs	r2, #0
    244c:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    244e:	2316      	movs	r3, #22
    2450:	18fb      	adds	r3, r7, r3
    2452:	2200      	movs	r2, #0
    2454:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    2456:	1cbb      	adds	r3, r7, #2
    2458:	881a      	ldrh	r2, [r3, #0]
    245a:	2380      	movs	r3, #128	; 0x80
    245c:	019b      	lsls	r3, r3, #6
    245e:	429a      	cmp	r2, r3
    2460:	d805      	bhi.n	246e <spi_data_write+0x3e>
			nbytes = sz;
    2462:	2314      	movs	r3, #20
    2464:	18fb      	adds	r3, r7, r3
    2466:	1cba      	adds	r2, r7, #2
    2468:	8812      	ldrh	r2, [r2, #0]
    246a:	801a      	strh	r2, [r3, #0]
    246c:	e004      	b.n	2478 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    246e:	2314      	movs	r3, #20
    2470:	18fb      	adds	r3, r7, r3
    2472:	2280      	movs	r2, #128	; 0x80
    2474:	0192      	lsls	r2, r2, #6
    2476:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    2478:	2311      	movs	r3, #17
    247a:	18fb      	adds	r3, r7, r3
    247c:	22f0      	movs	r2, #240	; 0xf0
    247e:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    2480:	2316      	movs	r3, #22
    2482:	18fb      	adds	r3, r7, r3
    2484:	2200      	movs	r2, #0
    2486:	5e9b      	ldrsh	r3, [r3, r2]
    2488:	2b00      	cmp	r3, #0
    248a:	d10f      	bne.n	24ac <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    248c:	1cbb      	adds	r3, r7, #2
    248e:	881a      	ldrh	r2, [r3, #0]
    2490:	2380      	movs	r3, #128	; 0x80
    2492:	019b      	lsls	r3, r3, #6
    2494:	429a      	cmp	r2, r3
    2496:	d804      	bhi.n	24a2 <spi_data_write+0x72>
				order = 0x3;
    2498:	2312      	movs	r3, #18
    249a:	18fb      	adds	r3, r7, r3
    249c:	2203      	movs	r2, #3
    249e:	701a      	strb	r2, [r3, #0]
    24a0:	e013      	b.n	24ca <spi_data_write+0x9a>
			else
				order = 0x1;
    24a2:	2312      	movs	r3, #18
    24a4:	18fb      	adds	r3, r7, r3
    24a6:	2201      	movs	r2, #1
    24a8:	701a      	strb	r2, [r3, #0]
    24aa:	e00e      	b.n	24ca <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    24ac:	1cbb      	adds	r3, r7, #2
    24ae:	881a      	ldrh	r2, [r3, #0]
    24b0:	2380      	movs	r3, #128	; 0x80
    24b2:	019b      	lsls	r3, r3, #6
    24b4:	429a      	cmp	r2, r3
    24b6:	d804      	bhi.n	24c2 <spi_data_write+0x92>
				order = 0x3;
    24b8:	2312      	movs	r3, #18
    24ba:	18fb      	adds	r3, r7, r3
    24bc:	2203      	movs	r2, #3
    24be:	701a      	strb	r2, [r3, #0]
    24c0:	e003      	b.n	24ca <spi_data_write+0x9a>
			else
				order = 0x2;
    24c2:	2312      	movs	r3, #18
    24c4:	18fb      	adds	r3, r7, r3
    24c6:	2202      	movs	r2, #2
    24c8:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;	
    24ca:	2311      	movs	r3, #17
    24cc:	18fb      	adds	r3, r7, r3
    24ce:	781a      	ldrb	r2, [r3, #0]
    24d0:	2312      	movs	r3, #18
    24d2:	18fb      	adds	r3, r7, r3
    24d4:	781b      	ldrb	r3, [r3, #0]
    24d6:	4313      	orrs	r3, r2
    24d8:	b2da      	uxtb	r2, r3
    24da:	2311      	movs	r3, #17
    24dc:	18fb      	adds	r3, r7, r3
    24de:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    24e0:	2311      	movs	r3, #17
    24e2:	18fb      	adds	r3, r7, r3
    24e4:	2101      	movs	r1, #1
    24e6:	0018      	movs	r0, r3
    24e8:	4b3c      	ldr	r3, [pc, #240]	; (25dc <spi_data_write+0x1ac>)
    24ea:	4798      	blx	r3
    24ec:	1e03      	subs	r3, r0, #0
    24ee:	d013      	beq.n	2518 <spi_data_write+0xe8>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    24f0:	23c0      	movs	r3, #192	; 0xc0
    24f2:	33ff      	adds	r3, #255	; 0xff
    24f4:	001a      	movs	r2, r3
    24f6:	493a      	ldr	r1, [pc, #232]	; (25e0 <spi_data_write+0x1b0>)
    24f8:	4b3a      	ldr	r3, [pc, #232]	; (25e4 <spi_data_write+0x1b4>)
    24fa:	0018      	movs	r0, r3
    24fc:	4b3a      	ldr	r3, [pc, #232]	; (25e8 <spi_data_write+0x1b8>)
    24fe:	4798      	blx	r3
    2500:	4b3a      	ldr	r3, [pc, #232]	; (25ec <spi_data_write+0x1bc>)
    2502:	0018      	movs	r0, r3
    2504:	4b3a      	ldr	r3, [pc, #232]	; (25f0 <spi_data_write+0x1c0>)
    2506:	4798      	blx	r3
    2508:	200d      	movs	r0, #13
    250a:	4b3a      	ldr	r3, [pc, #232]	; (25f4 <spi_data_write+0x1c4>)
    250c:	4798      	blx	r3
			result = N_FAIL;
    250e:	2313      	movs	r3, #19
    2510:	18fb      	adds	r3, r7, r3
    2512:	2200      	movs	r2, #0
    2514:	701a      	strb	r2, [r3, #0]
			break;
    2516:	e058      	b.n	25ca <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    2518:	2316      	movs	r3, #22
    251a:	18fb      	adds	r3, r7, r3
    251c:	2200      	movs	r2, #0
    251e:	5e9b      	ldrsh	r3, [r3, r2]
    2520:	687a      	ldr	r2, [r7, #4]
    2522:	18d2      	adds	r2, r2, r3
    2524:	2314      	movs	r3, #20
    2526:	18fb      	adds	r3, r7, r3
    2528:	881b      	ldrh	r3, [r3, #0]
    252a:	0019      	movs	r1, r3
    252c:	0010      	movs	r0, r2
    252e:	4b2b      	ldr	r3, [pc, #172]	; (25dc <spi_data_write+0x1ac>)
    2530:	4798      	blx	r3
    2532:	1e03      	subs	r3, r0, #0
    2534:	d012      	beq.n	255c <spi_data_write+0x12c>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    2536:	23e4      	movs	r3, #228	; 0xe4
    2538:	005a      	lsls	r2, r3, #1
    253a:	4929      	ldr	r1, [pc, #164]	; (25e0 <spi_data_write+0x1b0>)
    253c:	4b29      	ldr	r3, [pc, #164]	; (25e4 <spi_data_write+0x1b4>)
    253e:	0018      	movs	r0, r3
    2540:	4b29      	ldr	r3, [pc, #164]	; (25e8 <spi_data_write+0x1b8>)
    2542:	4798      	blx	r3
    2544:	4b2c      	ldr	r3, [pc, #176]	; (25f8 <spi_data_write+0x1c8>)
    2546:	0018      	movs	r0, r3
    2548:	4b29      	ldr	r3, [pc, #164]	; (25f0 <spi_data_write+0x1c0>)
    254a:	4798      	blx	r3
    254c:	200d      	movs	r0, #13
    254e:	4b29      	ldr	r3, [pc, #164]	; (25f4 <spi_data_write+0x1c4>)
    2550:	4798      	blx	r3
			result = N_FAIL;
    2552:	2313      	movs	r3, #19
    2554:	18fb      	adds	r3, r7, r3
    2556:	2200      	movs	r2, #0
    2558:	701a      	strb	r2, [r3, #0]
			break;
    255a:	e036      	b.n	25ca <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    255c:	4b27      	ldr	r3, [pc, #156]	; (25fc <spi_data_write+0x1cc>)
    255e:	781b      	ldrb	r3, [r3, #0]
    2560:	2b00      	cmp	r3, #0
    2562:	d11a      	bne.n	259a <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    2564:	230c      	movs	r3, #12
    2566:	18fb      	adds	r3, r7, r3
    2568:	2102      	movs	r1, #2
    256a:	0018      	movs	r0, r3
    256c:	4b1b      	ldr	r3, [pc, #108]	; (25dc <spi_data_write+0x1ac>)
    256e:	4798      	blx	r3
    2570:	1e03      	subs	r3, r0, #0
    2572:	d012      	beq.n	259a <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    2574:	23e9      	movs	r3, #233	; 0xe9
    2576:	005a      	lsls	r2, r3, #1
    2578:	4919      	ldr	r1, [pc, #100]	; (25e0 <spi_data_write+0x1b0>)
    257a:	4b1a      	ldr	r3, [pc, #104]	; (25e4 <spi_data_write+0x1b4>)
    257c:	0018      	movs	r0, r3
    257e:	4b1a      	ldr	r3, [pc, #104]	; (25e8 <spi_data_write+0x1b8>)
    2580:	4798      	blx	r3
    2582:	4b1f      	ldr	r3, [pc, #124]	; (2600 <spi_data_write+0x1d0>)
    2584:	0018      	movs	r0, r3
    2586:	4b1a      	ldr	r3, [pc, #104]	; (25f0 <spi_data_write+0x1c0>)
    2588:	4798      	blx	r3
    258a:	200d      	movs	r0, #13
    258c:	4b19      	ldr	r3, [pc, #100]	; (25f4 <spi_data_write+0x1c4>)
    258e:	4798      	blx	r3
				result = N_FAIL;
    2590:	2313      	movs	r3, #19
    2592:	18fb      	adds	r3, r7, r3
    2594:	2200      	movs	r2, #0
    2596:	701a      	strb	r2, [r3, #0]
				break;
    2598:	e017      	b.n	25ca <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
    259a:	2316      	movs	r3, #22
    259c:	18fb      	adds	r3, r7, r3
    259e:	881a      	ldrh	r2, [r3, #0]
    25a0:	2314      	movs	r3, #20
    25a2:	18fb      	adds	r3, r7, r3
    25a4:	881b      	ldrh	r3, [r3, #0]
    25a6:	18d3      	adds	r3, r2, r3
    25a8:	b29a      	uxth	r2, r3
    25aa:	2316      	movs	r3, #22
    25ac:	18fb      	adds	r3, r7, r3
    25ae:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    25b0:	1cbb      	adds	r3, r7, #2
    25b2:	1cb9      	adds	r1, r7, #2
    25b4:	2214      	movs	r2, #20
    25b6:	18ba      	adds	r2, r7, r2
    25b8:	8809      	ldrh	r1, [r1, #0]
    25ba:	8812      	ldrh	r2, [r2, #0]
    25bc:	1a8a      	subs	r2, r1, r2
    25be:	801a      	strh	r2, [r3, #0]
	} while (sz);
    25c0:	1cbb      	adds	r3, r7, #2
    25c2:	881b      	ldrh	r3, [r3, #0]
    25c4:	2b00      	cmp	r3, #0
    25c6:	d000      	beq.n	25ca <spi_data_write+0x19a>
    25c8:	e745      	b.n	2456 <spi_data_write+0x26>


	return result;
    25ca:	2313      	movs	r3, #19
    25cc:	18fb      	adds	r3, r7, r3
    25ce:	781b      	ldrb	r3, [r3, #0]
    25d0:	b25b      	sxtb	r3, r3
}
    25d2:	0018      	movs	r0, r3
    25d4:	46bd      	mov	sp, r7
    25d6:	b006      	add	sp, #24
    25d8:	bd80      	pop	{r7, pc}
    25da:	46c0      	nop			; (mov r8, r8)
    25dc:	00001cf1 	.word	0x00001cf1
    25e0:	0000dca0 	.word	0x0000dca0
    25e4:	0000d788 	.word	0x0000d788
    25e8:	00006e11 	.word	0x00006e11
    25ec:	0000d8c4 	.word	0x0000d8c4
    25f0:	00006eb9 	.word	0x00006eb9
    25f4:	00006e35 	.word	0x00006e35
    25f8:	0000d8fc 	.word	0x0000d8fc
    25fc:	20000d50 	.word	0x20000d50
    2600:	0000d930 	.word	0x0000d930

00002604 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    2604:	b5b0      	push	{r4, r5, r7, lr}
    2606:	b086      	sub	sp, #24
    2608:	af02      	add	r7, sp, #8
    260a:	6078      	str	r0, [r7, #4]
    260c:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    260e:	230d      	movs	r3, #13
    2610:	18fb      	adds	r3, r7, r3
    2612:	2201      	movs	r2, #1
    2614:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    2616:	230f      	movs	r3, #15
    2618:	18fb      	adds	r3, r7, r3
    261a:	22c9      	movs	r2, #201	; 0xc9
    261c:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    261e:	230e      	movs	r3, #14
    2620:	18fb      	adds	r3, r7, r3
    2622:	2200      	movs	r2, #0
    2624:	701a      	strb	r2, [r3, #0]
	if (addr <= 0x30) 
    2626:	687b      	ldr	r3, [r7, #4]
    2628:	2b30      	cmp	r3, #48	; 0x30
    262a:	d808      	bhi.n	263e <spi_write_reg+0x3a>
	{	
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    262c:	230f      	movs	r3, #15
    262e:	18fb      	adds	r3, r7, r3
    2630:	22c3      	movs	r2, #195	; 0xc3
    2632:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    2634:	230e      	movs	r3, #14
    2636:	18fb      	adds	r3, r7, r3
    2638:	2201      	movs	r2, #1
    263a:	701a      	strb	r2, [r3, #0]
    263c:	e007      	b.n	264e <spi_write_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    263e:	230f      	movs	r3, #15
    2640:	18fb      	adds	r3, r7, r3
    2642:	22c9      	movs	r2, #201	; 0xc9
    2644:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    2646:	230e      	movs	r3, #14
    2648:	18fb      	adds	r3, r7, r3
    264a:	2200      	movs	r2, #0
    264c:	701a      	strb	r2, [r3, #0]
	}
	
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    264e:	230d      	movs	r3, #13
    2650:	18fc      	adds	r4, r7, r3
    2652:	683a      	ldr	r2, [r7, #0]
    2654:	6879      	ldr	r1, [r7, #4]
    2656:	230f      	movs	r3, #15
    2658:	18fb      	adds	r3, r7, r3
    265a:	7818      	ldrb	r0, [r3, #0]
    265c:	230e      	movs	r3, #14
    265e:	18fb      	adds	r3, r7, r3
    2660:	781b      	ldrb	r3, [r3, #0]
    2662:	9300      	str	r3, [sp, #0]
    2664:	2304      	movs	r3, #4
    2666:	4d25      	ldr	r5, [pc, #148]	; (26fc <spi_write_reg+0xf8>)
    2668:	47a8      	blx	r5
    266a:	0003      	movs	r3, r0
    266c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    266e:	230d      	movs	r3, #13
    2670:	18fb      	adds	r3, r7, r3
    2672:	781b      	ldrb	r3, [r3, #0]
    2674:	b25b      	sxtb	r3, r3
    2676:	2b01      	cmp	r3, #1
    2678:	d010      	beq.n	269c <spi_write_reg+0x98>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);		
    267a:	4a21      	ldr	r2, [pc, #132]	; (2700 <spi_write_reg+0xfc>)
    267c:	4921      	ldr	r1, [pc, #132]	; (2704 <spi_write_reg+0x100>)
    267e:	4b22      	ldr	r3, [pc, #136]	; (2708 <spi_write_reg+0x104>)
    2680:	0018      	movs	r0, r3
    2682:	4b22      	ldr	r3, [pc, #136]	; (270c <spi_write_reg+0x108>)
    2684:	4798      	blx	r3
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	4b21      	ldr	r3, [pc, #132]	; (2710 <spi_write_reg+0x10c>)
    268a:	0011      	movs	r1, r2
    268c:	0018      	movs	r0, r3
    268e:	4b1f      	ldr	r3, [pc, #124]	; (270c <spi_write_reg+0x108>)
    2690:	4798      	blx	r3
    2692:	200d      	movs	r0, #13
    2694:	4b1f      	ldr	r3, [pc, #124]	; (2714 <spi_write_reg+0x110>)
    2696:	4798      	blx	r3
		return N_FAIL;
    2698:	2300      	movs	r3, #0
    269a:	e02a      	b.n	26f2 <spi_write_reg+0xee>
	}
	 
	result = spi_cmd_rsp(cmd);
    269c:	230d      	movs	r3, #13
    269e:	18fc      	adds	r4, r7, r3
    26a0:	230f      	movs	r3, #15
    26a2:	18fb      	adds	r3, r7, r3
    26a4:	781b      	ldrb	r3, [r3, #0]
    26a6:	0018      	movs	r0, r3
    26a8:	4b1b      	ldr	r3, [pc, #108]	; (2718 <spi_write_reg+0x114>)
    26aa:	4798      	blx	r3
    26ac:	0003      	movs	r3, r0
    26ae:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    26b0:	230d      	movs	r3, #13
    26b2:	18fb      	adds	r3, r7, r3
    26b4:	781b      	ldrb	r3, [r3, #0]
    26b6:	b25b      	sxtb	r3, r3
    26b8:	2b01      	cmp	r3, #1
    26ba:	d019      	beq.n	26f0 <spi_write_reg+0xec>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);		
    26bc:	2382      	movs	r3, #130	; 0x82
    26be:	009a      	lsls	r2, r3, #2
    26c0:	4910      	ldr	r1, [pc, #64]	; (2704 <spi_write_reg+0x100>)
    26c2:	4b11      	ldr	r3, [pc, #68]	; (2708 <spi_write_reg+0x104>)
    26c4:	0018      	movs	r0, r3
    26c6:	4b11      	ldr	r3, [pc, #68]	; (270c <spi_write_reg+0x108>)
    26c8:	4798      	blx	r3
    26ca:	687a      	ldr	r2, [r7, #4]
    26cc:	4b13      	ldr	r3, [pc, #76]	; (271c <spi_write_reg+0x118>)
    26ce:	0011      	movs	r1, r2
    26d0:	0018      	movs	r0, r3
    26d2:	4b0e      	ldr	r3, [pc, #56]	; (270c <spi_write_reg+0x108>)
    26d4:	4798      	blx	r3
    26d6:	200d      	movs	r0, #13
    26d8:	4b0e      	ldr	r3, [pc, #56]	; (2714 <spi_write_reg+0x110>)
    26da:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    26dc:	2300      	movs	r3, #0
    26de:	9300      	str	r3, [sp, #0]
    26e0:	2300      	movs	r3, #0
    26e2:	2200      	movs	r2, #0
    26e4:	2100      	movs	r1, #0
    26e6:	20cf      	movs	r0, #207	; 0xcf
    26e8:	4c04      	ldr	r4, [pc, #16]	; (26fc <spi_write_reg+0xf8>)
    26ea:	47a0      	blx	r4
		return N_FAIL;
    26ec:	2300      	movs	r3, #0
    26ee:	e000      	b.n	26f2 <spi_write_reg+0xee>
	}

	return N_OK;
    26f0:	2301      	movs	r3, #1
	}

	return result;
	
#endif
}
    26f2:	0018      	movs	r0, r3
    26f4:	46bd      	mov	sp, r7
    26f6:	b004      	add	sp, #16
    26f8:	bdb0      	pop	{r4, r5, r7, pc}
    26fa:	46c0      	nop			; (mov r8, r8)
    26fc:	00001db5 	.word	0x00001db5
    2700:	00000202 	.word	0x00000202
    2704:	0000dcb0 	.word	0x0000dcb0
    2708:	0000d788 	.word	0x0000d788
    270c:	00006e11 	.word	0x00006e11
    2710:	0000d968 	.word	0x0000d968
    2714:	00006e35 	.word	0x00006e35
    2718:	000020f9 	.word	0x000020f9
    271c:	0000d994 	.word	0x0000d994

00002720 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    2720:	b5b0      	push	{r4, r5, r7, lr}
    2722:	b088      	sub	sp, #32
    2724:	af02      	add	r7, sp, #8
    2726:	60f8      	str	r0, [r7, #12]
    2728:	60b9      	str	r1, [r7, #8]
    272a:	1dbb      	adds	r3, r7, #6
    272c:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 cmd = CMD_DMA_EXT_WRITE;
    272e:	2317      	movs	r3, #23
    2730:	18fb      	adds	r3, r7, r3
    2732:	22c7      	movs	r2, #199	; 0xc7
    2734:	701a      	strb	r2, [r3, #0]
	
	/**
		Command 
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    2736:	1dbb      	adds	r3, r7, #6
    2738:	881a      	ldrh	r2, [r3, #0]
    273a:	2316      	movs	r3, #22
    273c:	18fc      	adds	r4, r7, r3
    273e:	68f9      	ldr	r1, [r7, #12]
    2740:	2317      	movs	r3, #23
    2742:	18fb      	adds	r3, r7, r3
    2744:	7818      	ldrb	r0, [r3, #0]
    2746:	2300      	movs	r3, #0
    2748:	9300      	str	r3, [sp, #0]
    274a:	0013      	movs	r3, r2
    274c:	2200      	movs	r2, #0
    274e:	4d38      	ldr	r5, [pc, #224]	; (2830 <nm_spi_write+0x110>)
    2750:	47a8      	blx	r5
    2752:	0003      	movs	r3, r0
    2754:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2756:	2316      	movs	r3, #22
    2758:	18fb      	adds	r3, r7, r3
    275a:	781b      	ldrb	r3, [r3, #0]
    275c:	b25b      	sxtb	r3, r3
    275e:	2b01      	cmp	r3, #1
    2760:	d010      	beq.n	2784 <nm_spi_write+0x64>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);		
    2762:	4a34      	ldr	r2, [pc, #208]	; (2834 <nm_spi_write+0x114>)
    2764:	4934      	ldr	r1, [pc, #208]	; (2838 <nm_spi_write+0x118>)
    2766:	4b35      	ldr	r3, [pc, #212]	; (283c <nm_spi_write+0x11c>)
    2768:	0018      	movs	r0, r3
    276a:	4b35      	ldr	r3, [pc, #212]	; (2840 <nm_spi_write+0x120>)
    276c:	4798      	blx	r3
    276e:	68fa      	ldr	r2, [r7, #12]
    2770:	4b34      	ldr	r3, [pc, #208]	; (2844 <nm_spi_write+0x124>)
    2772:	0011      	movs	r1, r2
    2774:	0018      	movs	r0, r3
    2776:	4b32      	ldr	r3, [pc, #200]	; (2840 <nm_spi_write+0x120>)
    2778:	4798      	blx	r3
    277a:	200d      	movs	r0, #13
    277c:	4b32      	ldr	r3, [pc, #200]	; (2848 <nm_spi_write+0x128>)
    277e:	4798      	blx	r3
		return N_FAIL;
    2780:	2300      	movs	r3, #0
    2782:	e050      	b.n	2826 <nm_spi_write+0x106>
	}
 
	result = spi_cmd_rsp(cmd);
    2784:	2316      	movs	r3, #22
    2786:	18fc      	adds	r4, r7, r3
    2788:	2317      	movs	r3, #23
    278a:	18fb      	adds	r3, r7, r3
    278c:	781b      	ldrb	r3, [r3, #0]
    278e:	0018      	movs	r0, r3
    2790:	4b2e      	ldr	r3, [pc, #184]	; (284c <nm_spi_write+0x12c>)
    2792:	4798      	blx	r3
    2794:	0003      	movs	r3, r0
    2796:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2798:	2316      	movs	r3, #22
    279a:	18fb      	adds	r3, r7, r3
    279c:	781b      	ldrb	r3, [r3, #0]
    279e:	b25b      	sxtb	r3, r3
    27a0:	2b01      	cmp	r3, #1
    27a2:	d019      	beq.n	27d8 <nm_spi_write+0xb8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    27a4:	238b      	movs	r3, #139	; 0x8b
    27a6:	009a      	lsls	r2, r3, #2
    27a8:	4923      	ldr	r1, [pc, #140]	; (2838 <nm_spi_write+0x118>)
    27aa:	4b24      	ldr	r3, [pc, #144]	; (283c <nm_spi_write+0x11c>)
    27ac:	0018      	movs	r0, r3
    27ae:	4b24      	ldr	r3, [pc, #144]	; (2840 <nm_spi_write+0x120>)
    27b0:	4798      	blx	r3
    27b2:	68fa      	ldr	r2, [r7, #12]
    27b4:	4b26      	ldr	r3, [pc, #152]	; (2850 <nm_spi_write+0x130>)
    27b6:	0011      	movs	r1, r2
    27b8:	0018      	movs	r0, r3
    27ba:	4b21      	ldr	r3, [pc, #132]	; (2840 <nm_spi_write+0x120>)
    27bc:	4798      	blx	r3
    27be:	200d      	movs	r0, #13
    27c0:	4b21      	ldr	r3, [pc, #132]	; (2848 <nm_spi_write+0x128>)
    27c2:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    27c4:	2300      	movs	r3, #0
    27c6:	9300      	str	r3, [sp, #0]
    27c8:	2300      	movs	r3, #0
    27ca:	2200      	movs	r2, #0
    27cc:	2100      	movs	r1, #0
    27ce:	20cf      	movs	r0, #207	; 0xcf
    27d0:	4c17      	ldr	r4, [pc, #92]	; (2830 <nm_spi_write+0x110>)
    27d2:	47a0      	blx	r4
		return N_FAIL;		
    27d4:	2300      	movs	r3, #0
    27d6:	e026      	b.n	2826 <nm_spi_write+0x106>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    27d8:	2316      	movs	r3, #22
    27da:	18fc      	adds	r4, r7, r3
    27dc:	1dbb      	adds	r3, r7, #6
    27de:	881a      	ldrh	r2, [r3, #0]
    27e0:	68bb      	ldr	r3, [r7, #8]
    27e2:	0011      	movs	r1, r2
    27e4:	0018      	movs	r0, r3
    27e6:	4b1b      	ldr	r3, [pc, #108]	; (2854 <nm_spi_write+0x134>)
    27e8:	4798      	blx	r3
    27ea:	0003      	movs	r3, r0
    27ec:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    27ee:	2316      	movs	r3, #22
    27f0:	18fb      	adds	r3, r7, r3
    27f2:	781b      	ldrb	r3, [r3, #0]
    27f4:	b25b      	sxtb	r3, r3
    27f6:	2b01      	cmp	r3, #1
    27f8:	d014      	beq.n	2824 <nm_spi_write+0x104>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    27fa:	4a17      	ldr	r2, [pc, #92]	; (2858 <nm_spi_write+0x138>)
    27fc:	490e      	ldr	r1, [pc, #56]	; (2838 <nm_spi_write+0x118>)
    27fe:	4b0f      	ldr	r3, [pc, #60]	; (283c <nm_spi_write+0x11c>)
    2800:	0018      	movs	r0, r3
    2802:	4b0f      	ldr	r3, [pc, #60]	; (2840 <nm_spi_write+0x120>)
    2804:	4798      	blx	r3
    2806:	4b15      	ldr	r3, [pc, #84]	; (285c <nm_spi_write+0x13c>)
    2808:	0018      	movs	r0, r3
    280a:	4b15      	ldr	r3, [pc, #84]	; (2860 <nm_spi_write+0x140>)
    280c:	4798      	blx	r3
    280e:	200d      	movs	r0, #13
    2810:	4b0d      	ldr	r3, [pc, #52]	; (2848 <nm_spi_write+0x128>)
    2812:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2814:	2300      	movs	r3, #0
    2816:	9300      	str	r3, [sp, #0]
    2818:	2300      	movs	r3, #0
    281a:	2200      	movs	r2, #0
    281c:	2100      	movs	r1, #0
    281e:	20cf      	movs	r0, #207	; 0xcf
    2820:	4c03      	ldr	r4, [pc, #12]	; (2830 <nm_spi_write+0x110>)
    2822:	47a0      	blx	r4
	}
		
	return N_OK;
    2824:	2301      	movs	r3, #1
}
    2826:	0018      	movs	r0, r3
    2828:	46bd      	mov	sp, r7
    282a:	b006      	add	sp, #24
    282c:	bdb0      	pop	{r4, r5, r7, pc}
    282e:	46c0      	nop			; (mov r8, r8)
    2830:	00001db5 	.word	0x00001db5
    2834:	00000226 	.word	0x00000226
    2838:	0000dcc0 	.word	0x0000dcc0
    283c:	0000d788 	.word	0x0000d788
    2840:	00006e11 	.word	0x00006e11
    2844:	0000d9cc 	.word	0x0000d9cc
    2848:	00006e35 	.word	0x00006e35
    284c:	000020f9 	.word	0x000020f9
    2850:	0000d9fc 	.word	0x0000d9fc
    2854:	00002431 	.word	0x00002431
    2858:	0000023d 	.word	0x0000023d
    285c:	0000da34 	.word	0x0000da34
    2860:	00006eb9 	.word	0x00006eb9

00002864 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    2864:	b5b0      	push	{r4, r5, r7, lr}
    2866:	b086      	sub	sp, #24
    2868:	af02      	add	r7, sp, #8
    286a:	6078      	str	r0, [r7, #4]
    286c:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    286e:	230d      	movs	r3, #13
    2870:	18fb      	adds	r3, r7, r3
    2872:	2201      	movs	r2, #1
    2874:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    2876:	230f      	movs	r3, #15
    2878:	18fb      	adds	r3, r7, r3
    287a:	22ca      	movs	r2, #202	; 0xca
    287c:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    287e:	230e      	movs	r3, #14
    2880:	18fb      	adds	r3, r7, r3
    2882:	2200      	movs	r2, #0
    2884:	701a      	strb	r2, [r3, #0]

	if (addr <= 0xff) 
    2886:	687b      	ldr	r3, [r7, #4]
    2888:	2bff      	cmp	r3, #255	; 0xff
    288a:	d808      	bhi.n	289e <spi_read_reg+0x3a>
	{	
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    288c:	230f      	movs	r3, #15
    288e:	18fb      	adds	r3, r7, r3
    2890:	22c4      	movs	r2, #196	; 0xc4
    2892:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    2894:	230e      	movs	r3, #14
    2896:	18fb      	adds	r3, r7, r3
    2898:	2201      	movs	r2, #1
    289a:	701a      	strb	r2, [r3, #0]
    289c:	e007      	b.n	28ae <spi_read_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    289e:	230f      	movs	r3, #15
    28a0:	18fb      	adds	r3, r7, r3
    28a2:	22ca      	movs	r2, #202	; 0xca
    28a4:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    28a6:	230e      	movs	r3, #14
    28a8:	18fb      	adds	r3, r7, r3
    28aa:	2200      	movs	r2, #0
    28ac:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    28ae:	230d      	movs	r3, #13
    28b0:	18fc      	adds	r4, r7, r3
    28b2:	6879      	ldr	r1, [r7, #4]
    28b4:	230f      	movs	r3, #15
    28b6:	18fb      	adds	r3, r7, r3
    28b8:	7818      	ldrb	r0, [r3, #0]
    28ba:	230e      	movs	r3, #14
    28bc:	18fb      	adds	r3, r7, r3
    28be:	781b      	ldrb	r3, [r3, #0]
    28c0:	9300      	str	r3, [sp, #0]
    28c2:	2304      	movs	r3, #4
    28c4:	2200      	movs	r2, #0
    28c6:	4d44      	ldr	r5, [pc, #272]	; (29d8 <spi_read_reg+0x174>)
    28c8:	47a8      	blx	r5
    28ca:	0003      	movs	r3, r0
    28cc:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    28ce:	230d      	movs	r3, #13
    28d0:	18fb      	adds	r3, r7, r3
    28d2:	781b      	ldrb	r3, [r3, #0]
    28d4:	b25b      	sxtb	r3, r3
    28d6:	2b01      	cmp	r3, #1
    28d8:	d011      	beq.n	28fe <spi_read_reg+0x9a>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    28da:	2397      	movs	r3, #151	; 0x97
    28dc:	009a      	lsls	r2, r3, #2
    28de:	493f      	ldr	r1, [pc, #252]	; (29dc <spi_read_reg+0x178>)
    28e0:	4b3f      	ldr	r3, [pc, #252]	; (29e0 <spi_read_reg+0x17c>)
    28e2:	0018      	movs	r0, r3
    28e4:	4b3f      	ldr	r3, [pc, #252]	; (29e4 <spi_read_reg+0x180>)
    28e6:	4798      	blx	r3
    28e8:	687a      	ldr	r2, [r7, #4]
    28ea:	4b3f      	ldr	r3, [pc, #252]	; (29e8 <spi_read_reg+0x184>)
    28ec:	0011      	movs	r1, r2
    28ee:	0018      	movs	r0, r3
    28f0:	4b3c      	ldr	r3, [pc, #240]	; (29e4 <spi_read_reg+0x180>)
    28f2:	4798      	blx	r3
    28f4:	200d      	movs	r0, #13
    28f6:	4b3d      	ldr	r3, [pc, #244]	; (29ec <spi_read_reg+0x188>)
    28f8:	4798      	blx	r3
		return N_FAIL;
    28fa:	2300      	movs	r3, #0
    28fc:	e068      	b.n	29d0 <spi_read_reg+0x16c>
	} 
	
	result = spi_cmd_rsp(cmd);
    28fe:	230d      	movs	r3, #13
    2900:	18fc      	adds	r4, r7, r3
    2902:	230f      	movs	r3, #15
    2904:	18fb      	adds	r3, r7, r3
    2906:	781b      	ldrb	r3, [r3, #0]
    2908:	0018      	movs	r0, r3
    290a:	4b39      	ldr	r3, [pc, #228]	; (29f0 <spi_read_reg+0x18c>)
    290c:	4798      	blx	r3
    290e:	0003      	movs	r3, r0
    2910:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2912:	230d      	movs	r3, #13
    2914:	18fb      	adds	r3, r7, r3
    2916:	781b      	ldrb	r3, [r3, #0]
    2918:	b25b      	sxtb	r3, r3
    291a:	2b01      	cmp	r3, #1
    291c:	d018      	beq.n	2950 <spi_read_reg+0xec>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    291e:	4a35      	ldr	r2, [pc, #212]	; (29f4 <spi_read_reg+0x190>)
    2920:	492e      	ldr	r1, [pc, #184]	; (29dc <spi_read_reg+0x178>)
    2922:	4b2f      	ldr	r3, [pc, #188]	; (29e0 <spi_read_reg+0x17c>)
    2924:	0018      	movs	r0, r3
    2926:	4b2f      	ldr	r3, [pc, #188]	; (29e4 <spi_read_reg+0x180>)
    2928:	4798      	blx	r3
    292a:	687a      	ldr	r2, [r7, #4]
    292c:	4b32      	ldr	r3, [pc, #200]	; (29f8 <spi_read_reg+0x194>)
    292e:	0011      	movs	r1, r2
    2930:	0018      	movs	r0, r3
    2932:	4b2c      	ldr	r3, [pc, #176]	; (29e4 <spi_read_reg+0x180>)
    2934:	4798      	blx	r3
    2936:	200d      	movs	r0, #13
    2938:	4b2c      	ldr	r3, [pc, #176]	; (29ec <spi_read_reg+0x188>)
    293a:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    293c:	2300      	movs	r3, #0
    293e:	9300      	str	r3, [sp, #0]
    2940:	2300      	movs	r3, #0
    2942:	2200      	movs	r2, #0
    2944:	2100      	movs	r1, #0
    2946:	20cf      	movs	r0, #207	; 0xcf
    2948:	4c23      	ldr	r4, [pc, #140]	; (29d8 <spi_read_reg+0x174>)
    294a:	47a0      	blx	r4
		return N_FAIL;
    294c:	2300      	movs	r3, #0
    294e:	e03f      	b.n	29d0 <spi_read_reg+0x16c>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    2950:	230d      	movs	r3, #13
    2952:	18fc      	adds	r4, r7, r3
    2954:	230e      	movs	r3, #14
    2956:	18fb      	adds	r3, r7, r3
    2958:	781a      	ldrb	r2, [r3, #0]
    295a:	2308      	movs	r3, #8
    295c:	18fb      	adds	r3, r7, r3
    295e:	2104      	movs	r1, #4
    2960:	0018      	movs	r0, r3
    2962:	4b26      	ldr	r3, [pc, #152]	; (29fc <spi_read_reg+0x198>)
    2964:	4798      	blx	r3
    2966:	0003      	movs	r3, r0
    2968:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    296a:	230d      	movs	r3, #13
    296c:	18fb      	adds	r3, r7, r3
    296e:	781b      	ldrb	r3, [r3, #0]
    2970:	b25b      	sxtb	r3, r3
    2972:	2b01      	cmp	r3, #1
    2974:	d016      	beq.n	29a4 <spi_read_reg+0x140>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    2976:	4a22      	ldr	r2, [pc, #136]	; (2a00 <spi_read_reg+0x19c>)
    2978:	4918      	ldr	r1, [pc, #96]	; (29dc <spi_read_reg+0x178>)
    297a:	4b19      	ldr	r3, [pc, #100]	; (29e0 <spi_read_reg+0x17c>)
    297c:	0018      	movs	r0, r3
    297e:	4b19      	ldr	r3, [pc, #100]	; (29e4 <spi_read_reg+0x180>)
    2980:	4798      	blx	r3
    2982:	4b20      	ldr	r3, [pc, #128]	; (2a04 <spi_read_reg+0x1a0>)
    2984:	0018      	movs	r0, r3
    2986:	4b20      	ldr	r3, [pc, #128]	; (2a08 <spi_read_reg+0x1a4>)
    2988:	4798      	blx	r3
    298a:	200d      	movs	r0, #13
    298c:	4b17      	ldr	r3, [pc, #92]	; (29ec <spi_read_reg+0x188>)
    298e:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2990:	2300      	movs	r3, #0
    2992:	9300      	str	r3, [sp, #0]
    2994:	2300      	movs	r3, #0
    2996:	2200      	movs	r2, #0
    2998:	2100      	movs	r1, #0
    299a:	20cf      	movs	r0, #207	; 0xcf
    299c:	4c0e      	ldr	r4, [pc, #56]	; (29d8 <spi_read_reg+0x174>)
    299e:	47a0      	blx	r4
		return N_FAIL;
    29a0:	2300      	movs	r3, #0
    29a2:	e015      	b.n	29d0 <spi_read_reg+0x16c>
		return N_FAIL;
	}  
	
#endif

	*u32data = tmp[0] | 
    29a4:	2308      	movs	r3, #8
    29a6:	18fb      	adds	r3, r7, r3
    29a8:	781b      	ldrb	r3, [r3, #0]
    29aa:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    29ac:	2308      	movs	r3, #8
    29ae:	18fb      	adds	r3, r7, r3
    29b0:	785b      	ldrb	r3, [r3, #1]
    29b2:	021b      	lsls	r3, r3, #8
		return N_FAIL;
	}  
	
#endif

	*u32data = tmp[0] | 
    29b4:	431a      	orrs	r2, r3
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    29b6:	2308      	movs	r3, #8
    29b8:	18fb      	adds	r3, r7, r3
    29ba:	789b      	ldrb	r3, [r3, #2]
    29bc:	041b      	lsls	r3, r3, #16
	}  
	
#endif

	*u32data = tmp[0] | 
		((uint32)tmp[1] << 8) |
    29be:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    29c0:	2308      	movs	r3, #8
    29c2:	18fb      	adds	r3, r7, r3
    29c4:	78db      	ldrb	r3, [r3, #3]
    29c6:	061b      	lsls	r3, r3, #24
	
#endif

	*u32data = tmp[0] | 
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    29c8:	431a      	orrs	r2, r3
		return N_FAIL;
	}  
	
#endif

	*u32data = tmp[0] | 
    29ca:	683b      	ldr	r3, [r7, #0]
    29cc:	601a      	str	r2, [r3, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
	
	return N_OK;
    29ce:	2301      	movs	r3, #1
}
    29d0:	0018      	movs	r0, r3
    29d2:	46bd      	mov	sp, r7
    29d4:	b004      	add	sp, #16
    29d6:	bdb0      	pop	{r4, r5, r7, pc}
    29d8:	00001db5 	.word	0x00001db5
    29dc:	0000dcd0 	.word	0x0000dcd0
    29e0:	0000d788 	.word	0x0000d788
    29e4:	00006e11 	.word	0x00006e11
    29e8:	0000da5c 	.word	0x0000da5c
    29ec:	00006e35 	.word	0x00006e35
    29f0:	000020f9 	.word	0x000020f9
    29f4:	00000262 	.word	0x00000262
    29f8:	0000da88 	.word	0x0000da88
    29fc:	00002231 	.word	0x00002231
    2a00:	0000026a 	.word	0x0000026a
    2a04:	0000dabc 	.word	0x0000dabc
    2a08:	00006eb9 	.word	0x00006eb9

00002a0c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    2a0c:	b5b0      	push	{r4, r5, r7, lr}
    2a0e:	b088      	sub	sp, #32
    2a10:	af02      	add	r7, sp, #8
    2a12:	60f8      	str	r0, [r7, #12]
    2a14:	60b9      	str	r1, [r7, #8]
    2a16:	1dbb      	adds	r3, r7, #6
    2a18:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    2a1a:	2317      	movs	r3, #23
    2a1c:	18fb      	adds	r3, r7, r3
    2a1e:	22c8      	movs	r2, #200	; 0xc8
    2a20:	701a      	strb	r2, [r3, #0]

	/**
		Command 
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    2a22:	1dbb      	adds	r3, r7, #6
    2a24:	881a      	ldrh	r2, [r3, #0]
    2a26:	2316      	movs	r3, #22
    2a28:	18fc      	adds	r4, r7, r3
    2a2a:	68f9      	ldr	r1, [r7, #12]
    2a2c:	2317      	movs	r3, #23
    2a2e:	18fb      	adds	r3, r7, r3
    2a30:	7818      	ldrb	r0, [r3, #0]
    2a32:	2300      	movs	r3, #0
    2a34:	9300      	str	r3, [sp, #0]
    2a36:	0013      	movs	r3, r2
    2a38:	2200      	movs	r2, #0
    2a3a:	4d38      	ldr	r5, [pc, #224]	; (2b1c <nm_spi_read+0x110>)
    2a3c:	47a8      	blx	r5
    2a3e:	0003      	movs	r3, r0
    2a40:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2a42:	2316      	movs	r3, #22
    2a44:	18fb      	adds	r3, r7, r3
    2a46:	781b      	ldrb	r3, [r3, #0]
    2a48:	b25b      	sxtb	r3, r3
    2a4a:	2b01      	cmp	r3, #1
    2a4c:	d010      	beq.n	2a70 <nm_spi_read+0x64>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    2a4e:	4a34      	ldr	r2, [pc, #208]	; (2b20 <nm_spi_read+0x114>)
    2a50:	4934      	ldr	r1, [pc, #208]	; (2b24 <nm_spi_read+0x118>)
    2a52:	4b35      	ldr	r3, [pc, #212]	; (2b28 <nm_spi_read+0x11c>)
    2a54:	0018      	movs	r0, r3
    2a56:	4b35      	ldr	r3, [pc, #212]	; (2b2c <nm_spi_read+0x120>)
    2a58:	4798      	blx	r3
    2a5a:	68fa      	ldr	r2, [r7, #12]
    2a5c:	4b34      	ldr	r3, [pc, #208]	; (2b30 <nm_spi_read+0x124>)
    2a5e:	0011      	movs	r1, r2
    2a60:	0018      	movs	r0, r3
    2a62:	4b32      	ldr	r3, [pc, #200]	; (2b2c <nm_spi_read+0x120>)
    2a64:	4798      	blx	r3
    2a66:	200d      	movs	r0, #13
    2a68:	4b32      	ldr	r3, [pc, #200]	; (2b34 <nm_spi_read+0x128>)
    2a6a:	4798      	blx	r3
		return N_FAIL;
    2a6c:	2300      	movs	r3, #0
    2a6e:	e051      	b.n	2b14 <nm_spi_read+0x108>
	}  
 
	result = spi_cmd_rsp(cmd);
    2a70:	2316      	movs	r3, #22
    2a72:	18fc      	adds	r4, r7, r3
    2a74:	2317      	movs	r3, #23
    2a76:	18fb      	adds	r3, r7, r3
    2a78:	781b      	ldrb	r3, [r3, #0]
    2a7a:	0018      	movs	r0, r3
    2a7c:	4b2e      	ldr	r3, [pc, #184]	; (2b38 <nm_spi_read+0x12c>)
    2a7e:	4798      	blx	r3
    2a80:	0003      	movs	r3, r0
    2a82:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2a84:	2316      	movs	r3, #22
    2a86:	18fb      	adds	r3, r7, r3
    2a88:	781b      	ldrb	r3, [r3, #0]
    2a8a:	b25b      	sxtb	r3, r3
    2a8c:	2b01      	cmp	r3, #1
    2a8e:	d018      	beq.n	2ac2 <nm_spi_read+0xb6>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    2a90:	4a2a      	ldr	r2, [pc, #168]	; (2b3c <nm_spi_read+0x130>)
    2a92:	4924      	ldr	r1, [pc, #144]	; (2b24 <nm_spi_read+0x118>)
    2a94:	4b24      	ldr	r3, [pc, #144]	; (2b28 <nm_spi_read+0x11c>)
    2a96:	0018      	movs	r0, r3
    2a98:	4b24      	ldr	r3, [pc, #144]	; (2b2c <nm_spi_read+0x120>)
    2a9a:	4798      	blx	r3
    2a9c:	68fa      	ldr	r2, [r7, #12]
    2a9e:	4b28      	ldr	r3, [pc, #160]	; (2b40 <nm_spi_read+0x134>)
    2aa0:	0011      	movs	r1, r2
    2aa2:	0018      	movs	r0, r3
    2aa4:	4b21      	ldr	r3, [pc, #132]	; (2b2c <nm_spi_read+0x120>)
    2aa6:	4798      	blx	r3
    2aa8:	200d      	movs	r0, #13
    2aaa:	4b22      	ldr	r3, [pc, #136]	; (2b34 <nm_spi_read+0x128>)
    2aac:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2aae:	2300      	movs	r3, #0
    2ab0:	9300      	str	r3, [sp, #0]
    2ab2:	2300      	movs	r3, #0
    2ab4:	2200      	movs	r2, #0
    2ab6:	2100      	movs	r1, #0
    2ab8:	20cf      	movs	r0, #207	; 0xcf
    2aba:	4c18      	ldr	r4, [pc, #96]	; (2b1c <nm_spi_read+0x110>)
    2abc:	47a0      	blx	r4
		return N_FAIL;
    2abe:	2300      	movs	r3, #0
    2ac0:	e028      	b.n	2b14 <nm_spi_read+0x108>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
    2ac2:	2316      	movs	r3, #22
    2ac4:	18fc      	adds	r4, r7, r3
    2ac6:	1dbb      	adds	r3, r7, #6
    2ac8:	8819      	ldrh	r1, [r3, #0]
    2aca:	68bb      	ldr	r3, [r7, #8]
    2acc:	2200      	movs	r2, #0
    2ace:	0018      	movs	r0, r3
    2ad0:	4b1c      	ldr	r3, [pc, #112]	; (2b44 <nm_spi_read+0x138>)
    2ad2:	4798      	blx	r3
    2ad4:	0003      	movs	r3, r0
    2ad6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2ad8:	2316      	movs	r3, #22
    2ada:	18fb      	adds	r3, r7, r3
    2adc:	781b      	ldrb	r3, [r3, #0]
    2ade:	b25b      	sxtb	r3, r3
    2ae0:	2b01      	cmp	r3, #1
    2ae2:	d016      	beq.n	2b12 <nm_spi_read+0x106>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    2ae4:	4a18      	ldr	r2, [pc, #96]	; (2b48 <nm_spi_read+0x13c>)
    2ae6:	490f      	ldr	r1, [pc, #60]	; (2b24 <nm_spi_read+0x118>)
    2ae8:	4b0f      	ldr	r3, [pc, #60]	; (2b28 <nm_spi_read+0x11c>)
    2aea:	0018      	movs	r0, r3
    2aec:	4b0f      	ldr	r3, [pc, #60]	; (2b2c <nm_spi_read+0x120>)
    2aee:	4798      	blx	r3
    2af0:	4b16      	ldr	r3, [pc, #88]	; (2b4c <nm_spi_read+0x140>)
    2af2:	0018      	movs	r0, r3
    2af4:	4b16      	ldr	r3, [pc, #88]	; (2b50 <nm_spi_read+0x144>)
    2af6:	4798      	blx	r3
    2af8:	200d      	movs	r0, #13
    2afa:	4b0e      	ldr	r3, [pc, #56]	; (2b34 <nm_spi_read+0x128>)
    2afc:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2afe:	2300      	movs	r3, #0
    2b00:	9300      	str	r3, [sp, #0]
    2b02:	2300      	movs	r3, #0
    2b04:	2200      	movs	r2, #0
    2b06:	2100      	movs	r1, #0
    2b08:	20cf      	movs	r0, #207	; 0xcf
    2b0a:	4c04      	ldr	r4, [pc, #16]	; (2b1c <nm_spi_read+0x110>)
    2b0c:	47a0      	blx	r4
		return N_FAIL;
    2b0e:	2300      	movs	r3, #0
    2b10:	e000      	b.n	2b14 <nm_spi_read+0x108>
			M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
			return N_FAIL;
		}  
#endif
		
	return N_OK;
    2b12:	2301      	movs	r3, #1
}
    2b14:	0018      	movs	r0, r3
    2b16:	46bd      	mov	sp, r7
    2b18:	b006      	add	sp, #24
    2b1a:	bdb0      	pop	{r4, r5, r7, pc}
    2b1c:	00001db5 	.word	0x00001db5
    2b20:	0000028b 	.word	0x0000028b
    2b24:	0000dce0 	.word	0x0000dce0
    2b28:	0000d788 	.word	0x0000d788
    2b2c:	00006e11 	.word	0x00006e11
    2b30:	0000dadc 	.word	0x0000dadc
    2b34:	00006e35 	.word	0x00006e35
    2b38:	000020f9 	.word	0x000020f9
    2b3c:	00000291 	.word	0x00000291
    2b40:	0000db0c 	.word	0x0000db0c
    2b44:	00002231 	.word	0x00002231
    2b48:	0000029b 	.word	0x0000029b
    2b4c:	0000db44 	.word	0x0000db44
    2b50:	00006eb9 	.word	0x00006eb9

00002b54 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    2b54:	b580      	push	{r7, lr}
    2b56:	b082      	sub	sp, #8
    2b58:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    2b5a:	4b0c      	ldr	r3, [pc, #48]	; (2b8c <spi_init_pkt_sz+0x38>)
    2b5c:	0018      	movs	r0, r3
    2b5e:	4b0c      	ldr	r3, [pc, #48]	; (2b90 <spi_init_pkt_sz+0x3c>)
    2b60:	4798      	blx	r3
    2b62:	0003      	movs	r3, r0
    2b64:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    2b66:	687b      	ldr	r3, [r7, #4]
    2b68:	2270      	movs	r2, #112	; 0x70
    2b6a:	4393      	bics	r3, r2
    2b6c:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    2b6e:	687b      	ldr	r3, [r7, #4]
    2b70:	2250      	movs	r2, #80	; 0x50
    2b72:	4313      	orrs	r3, r2
    2b74:	607b      	str	r3, [r7, #4]
    2b76:	46c0      	nop			; (mov r8, r8)
	
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    2b78:	687b      	ldr	r3, [r7, #4]
    2b7a:	4a04      	ldr	r2, [pc, #16]	; (2b8c <spi_init_pkt_sz+0x38>)
    2b7c:	0019      	movs	r1, r3
    2b7e:	0010      	movs	r0, r2
    2b80:	4b04      	ldr	r3, [pc, #16]	; (2b94 <spi_init_pkt_sz+0x40>)
    2b82:	4798      	blx	r3
}
    2b84:	46c0      	nop			; (mov r8, r8)
    2b86:	46bd      	mov	sp, r7
    2b88:	b002      	add	sp, #8
    2b8a:	bd80      	pop	{r7, pc}
    2b8c:	0000e824 	.word	0x0000e824
    2b90:	00002ce1 	.word	0x00002ce1
    2b94:	00002d55 	.word	0x00002d55

00002b98 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_spi_init(void)
{
    2b98:	b580      	push	{r7, lr}
    2b9a:	b082      	sub	sp, #8
    2b9c:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg =0;
    2b9e:	2300      	movs	r3, #0
    2ba0:	603b      	str	r3, [r7, #0]
	
	/**
		configure protocol 
	**/
	gu8Crc_off = 0;
    2ba2:	4b3e      	ldr	r3, [pc, #248]	; (2c9c <nm_spi_init+0x104>)
    2ba4:	2200      	movs	r2, #0
    2ba6:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset 
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    2ba8:	003b      	movs	r3, r7
    2baa:	4a3d      	ldr	r2, [pc, #244]	; (2ca0 <nm_spi_init+0x108>)
    2bac:	0019      	movs	r1, r3
    2bae:	0010      	movs	r0, r2
    2bb0:	4b3c      	ldr	r3, [pc, #240]	; (2ca4 <nm_spi_init+0x10c>)
    2bb2:	4798      	blx	r3
    2bb4:	1e03      	subs	r3, r0, #0
    2bb6:	d127      	bne.n	2c08 <nm_spi_init+0x70>
		/* Read failed. Try with CRC off. This might happen when module 
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    2bb8:	4b38      	ldr	r3, [pc, #224]	; (2c9c <nm_spi_init+0x104>)
    2bba:	2201      	movs	r2, #1
    2bbc:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    2bbe:	23b7      	movs	r3, #183	; 0xb7
    2bc0:	009a      	lsls	r2, r3, #2
    2bc2:	4939      	ldr	r1, [pc, #228]	; (2ca8 <nm_spi_init+0x110>)
    2bc4:	4b39      	ldr	r3, [pc, #228]	; (2cac <nm_spi_init+0x114>)
    2bc6:	0018      	movs	r0, r3
    2bc8:	4b39      	ldr	r3, [pc, #228]	; (2cb0 <nm_spi_init+0x118>)
    2bca:	4798      	blx	r3
    2bcc:	4b39      	ldr	r3, [pc, #228]	; (2cb4 <nm_spi_init+0x11c>)
    2bce:	0018      	movs	r0, r3
    2bd0:	4b39      	ldr	r3, [pc, #228]	; (2cb8 <nm_spi_init+0x120>)
    2bd2:	4798      	blx	r3
    2bd4:	200d      	movs	r0, #13
    2bd6:	4b39      	ldr	r3, [pc, #228]	; (2cbc <nm_spi_init+0x124>)
    2bd8:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    2bda:	003b      	movs	r3, r7
    2bdc:	4a30      	ldr	r2, [pc, #192]	; (2ca0 <nm_spi_init+0x108>)
    2bde:	0019      	movs	r1, r3
    2be0:	0010      	movs	r0, r2
    2be2:	4b30      	ldr	r3, [pc, #192]	; (2ca4 <nm_spi_init+0x10c>)
    2be4:	4798      	blx	r3
    2be6:	1e03      	subs	r3, r0, #0
    2be8:	d10e      	bne.n	2c08 <nm_spi_init+0x70>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    2bea:	4a35      	ldr	r2, [pc, #212]	; (2cc0 <nm_spi_init+0x128>)
    2bec:	492e      	ldr	r1, [pc, #184]	; (2ca8 <nm_spi_init+0x110>)
    2bee:	4b2f      	ldr	r3, [pc, #188]	; (2cac <nm_spi_init+0x114>)
    2bf0:	0018      	movs	r0, r3
    2bf2:	4b2f      	ldr	r3, [pc, #188]	; (2cb0 <nm_spi_init+0x118>)
    2bf4:	4798      	blx	r3
    2bf6:	4b33      	ldr	r3, [pc, #204]	; (2cc4 <nm_spi_init+0x12c>)
    2bf8:	0018      	movs	r0, r3
    2bfa:	4b2f      	ldr	r3, [pc, #188]	; (2cb8 <nm_spi_init+0x120>)
    2bfc:	4798      	blx	r3
    2bfe:	200d      	movs	r0, #13
    2c00:	4b2e      	ldr	r3, [pc, #184]	; (2cbc <nm_spi_init+0x124>)
    2c02:	4798      	blx	r3
			return 0;
    2c04:	2300      	movs	r3, #0
    2c06:	e045      	b.n	2c94 <nm_spi_init+0xfc>
		}
	}
	if(gu8Crc_off == 0)
    2c08:	4b24      	ldr	r3, [pc, #144]	; (2c9c <nm_spi_init+0x104>)
    2c0a:	781b      	ldrb	r3, [r3, #0]
    2c0c:	2b00      	cmp	r3, #0
    2c0e:	d125      	bne.n	2c5c <nm_spi_init+0xc4>
	{
		reg &= ~0xc;	/* disable crc checking */
    2c10:	683b      	ldr	r3, [r7, #0]
    2c12:	220c      	movs	r2, #12
    2c14:	4393      	bics	r3, r2
    2c16:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    2c18:	683b      	ldr	r3, [r7, #0]
    2c1a:	2270      	movs	r2, #112	; 0x70
    2c1c:	4393      	bics	r3, r2
    2c1e:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    2c20:	683b      	ldr	r3, [r7, #0]
    2c22:	2250      	movs	r2, #80	; 0x50
    2c24:	4313      	orrs	r3, r2
    2c26:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    2c28:	683b      	ldr	r3, [r7, #0]
    2c2a:	4a1d      	ldr	r2, [pc, #116]	; (2ca0 <nm_spi_init+0x108>)
    2c2c:	0019      	movs	r1, r3
    2c2e:	0010      	movs	r0, r2
    2c30:	4b25      	ldr	r3, [pc, #148]	; (2cc8 <nm_spi_init+0x130>)
    2c32:	4798      	blx	r3
    2c34:	1e03      	subs	r3, r0, #0
    2c36:	d10e      	bne.n	2c56 <nm_spi_init+0xbe>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    2c38:	4a24      	ldr	r2, [pc, #144]	; (2ccc <nm_spi_init+0x134>)
    2c3a:	491b      	ldr	r1, [pc, #108]	; (2ca8 <nm_spi_init+0x110>)
    2c3c:	4b1b      	ldr	r3, [pc, #108]	; (2cac <nm_spi_init+0x114>)
    2c3e:	0018      	movs	r0, r3
    2c40:	4b1b      	ldr	r3, [pc, #108]	; (2cb0 <nm_spi_init+0x118>)
    2c42:	4798      	blx	r3
    2c44:	4b22      	ldr	r3, [pc, #136]	; (2cd0 <nm_spi_init+0x138>)
    2c46:	0018      	movs	r0, r3
    2c48:	4b1b      	ldr	r3, [pc, #108]	; (2cb8 <nm_spi_init+0x120>)
    2c4a:	4798      	blx	r3
    2c4c:	200d      	movs	r0, #13
    2c4e:	4b1b      	ldr	r3, [pc, #108]	; (2cbc <nm_spi_init+0x124>)
    2c50:	4798      	blx	r3
			return 0;
    2c52:	2300      	movs	r3, #0
    2c54:	e01e      	b.n	2c94 <nm_spi_init+0xfc>
		}
		gu8Crc_off = 1;
    2c56:	4b11      	ldr	r3, [pc, #68]	; (2c9c <nm_spi_init+0x104>)
    2c58:	2201      	movs	r2, #1
    2c5a:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    2c5c:	1d3a      	adds	r2, r7, #4
    2c5e:	2380      	movs	r3, #128	; 0x80
    2c60:	015b      	lsls	r3, r3, #5
    2c62:	0011      	movs	r1, r2
    2c64:	0018      	movs	r0, r3
    2c66:	4b0f      	ldr	r3, [pc, #60]	; (2ca4 <nm_spi_init+0x10c>)
    2c68:	4798      	blx	r3
    2c6a:	1e03      	subs	r3, r0, #0
    2c6c:	d10f      	bne.n	2c8e <nm_spi_init+0xf6>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    2c6e:	4a19      	ldr	r2, [pc, #100]	; (2cd4 <nm_spi_init+0x13c>)
    2c70:	490d      	ldr	r1, [pc, #52]	; (2ca8 <nm_spi_init+0x110>)
    2c72:	4b0e      	ldr	r3, [pc, #56]	; (2cac <nm_spi_init+0x114>)
    2c74:	0018      	movs	r0, r3
    2c76:	4b0e      	ldr	r3, [pc, #56]	; (2cb0 <nm_spi_init+0x118>)
    2c78:	4798      	blx	r3
    2c7a:	4b17      	ldr	r3, [pc, #92]	; (2cd8 <nm_spi_init+0x140>)
    2c7c:	0018      	movs	r0, r3
    2c7e:	4b0e      	ldr	r3, [pc, #56]	; (2cb8 <nm_spi_init+0x120>)
    2c80:	4798      	blx	r3
    2c82:	200d      	movs	r0, #13
    2c84:	4b0d      	ldr	r3, [pc, #52]	; (2cbc <nm_spi_init+0x124>)
    2c86:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    2c88:	2306      	movs	r3, #6
    2c8a:	425b      	negs	r3, r3
    2c8c:	e002      	b.n	2c94 <nm_spi_init+0xfc>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    2c8e:	4b13      	ldr	r3, [pc, #76]	; (2cdc <nm_spi_init+0x144>)
    2c90:	4798      	blx	r3


	return M2M_SUCCESS;
    2c92:	2300      	movs	r3, #0
}
    2c94:	0018      	movs	r0, r3
    2c96:	46bd      	mov	sp, r7
    2c98:	b002      	add	sp, #8
    2c9a:	bd80      	pop	{r7, pc}
    2c9c:	20000d50 	.word	0x20000d50
    2ca0:	0000e824 	.word	0x0000e824
    2ca4:	00002865 	.word	0x00002865
    2ca8:	0000dcec 	.word	0x0000dcec
    2cac:	0000d788 	.word	0x0000d788
    2cb0:	00006e11 	.word	0x00006e11
    2cb4:	0000db6c 	.word	0x0000db6c
    2cb8:	00006eb9 	.word	0x00006eb9
    2cbc:	00006e35 	.word	0x00006e35
    2cc0:	000002df 	.word	0x000002df
    2cc4:	0000dbbc 	.word	0x0000dbbc
    2cc8:	00002605 	.word	0x00002605
    2ccc:	000002e9 	.word	0x000002e9
    2cd0:	0000dbe8 	.word	0x0000dbe8
    2cd4:	000002f3 	.word	0x000002f3
    2cd8:	0000dc1c 	.word	0x0000dc1c
    2cdc:	00002b55 	.word	0x00002b55

00002ce0 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    2ce0:	b580      	push	{r7, lr}
    2ce2:	b084      	sub	sp, #16
    2ce4:	af00      	add	r7, sp, #0
    2ce6:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    2ce8:	230c      	movs	r3, #12
    2cea:	18fa      	adds	r2, r7, r3
    2cec:	687b      	ldr	r3, [r7, #4]
    2cee:	0011      	movs	r1, r2
    2cf0:	0018      	movs	r0, r3
    2cf2:	4b03      	ldr	r3, [pc, #12]	; (2d00 <nm_spi_read_reg+0x20>)
    2cf4:	4798      	blx	r3

	return u32Val;
    2cf6:	68fb      	ldr	r3, [r7, #12]
}
    2cf8:	0018      	movs	r0, r3
    2cfa:	46bd      	mov	sp, r7
    2cfc:	b004      	add	sp, #16
    2cfe:	bd80      	pop	{r7, pc}
    2d00:	00002865 	.word	0x00002865

00002d04 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2d04:	b590      	push	{r4, r7, lr}
    2d06:	b085      	sub	sp, #20
    2d08:	af00      	add	r7, sp, #0
    2d0a:	6078      	str	r0, [r7, #4]
    2d0c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    2d0e:	230f      	movs	r3, #15
    2d10:	18fc      	adds	r4, r7, r3
    2d12:	683a      	ldr	r2, [r7, #0]
    2d14:	687b      	ldr	r3, [r7, #4]
    2d16:	0011      	movs	r1, r2
    2d18:	0018      	movs	r0, r3
    2d1a:	4b0d      	ldr	r3, [pc, #52]	; (2d50 <nm_spi_read_reg_with_ret+0x4c>)
    2d1c:	4798      	blx	r3
    2d1e:	0003      	movs	r3, r0
    2d20:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2d22:	230f      	movs	r3, #15
    2d24:	18fb      	adds	r3, r7, r3
    2d26:	781b      	ldrb	r3, [r3, #0]
    2d28:	b25b      	sxtb	r3, r3
    2d2a:	2b01      	cmp	r3, #1
    2d2c:	d104      	bne.n	2d38 <nm_spi_read_reg_with_ret+0x34>
    2d2e:	230f      	movs	r3, #15
    2d30:	18fb      	adds	r3, r7, r3
    2d32:	2200      	movs	r2, #0
    2d34:	701a      	strb	r2, [r3, #0]
    2d36:	e003      	b.n	2d40 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2d38:	230f      	movs	r3, #15
    2d3a:	18fb      	adds	r3, r7, r3
    2d3c:	22fa      	movs	r2, #250	; 0xfa
    2d3e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    2d40:	230f      	movs	r3, #15
    2d42:	18fb      	adds	r3, r7, r3
    2d44:	781b      	ldrb	r3, [r3, #0]
    2d46:	b25b      	sxtb	r3, r3
}
    2d48:	0018      	movs	r0, r3
    2d4a:	46bd      	mov	sp, r7
    2d4c:	b005      	add	sp, #20
    2d4e:	bd90      	pop	{r4, r7, pc}
    2d50:	00002865 	.word	0x00002865

00002d54 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2d54:	b590      	push	{r4, r7, lr}
    2d56:	b085      	sub	sp, #20
    2d58:	af00      	add	r7, sp, #0
    2d5a:	6078      	str	r0, [r7, #4]
    2d5c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    2d5e:	230f      	movs	r3, #15
    2d60:	18fc      	adds	r4, r7, r3
    2d62:	683a      	ldr	r2, [r7, #0]
    2d64:	687b      	ldr	r3, [r7, #4]
    2d66:	0011      	movs	r1, r2
    2d68:	0018      	movs	r0, r3
    2d6a:	4b0d      	ldr	r3, [pc, #52]	; (2da0 <nm_spi_write_reg+0x4c>)
    2d6c:	4798      	blx	r3
    2d6e:	0003      	movs	r3, r0
    2d70:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2d72:	230f      	movs	r3, #15
    2d74:	18fb      	adds	r3, r7, r3
    2d76:	781b      	ldrb	r3, [r3, #0]
    2d78:	b25b      	sxtb	r3, r3
    2d7a:	2b01      	cmp	r3, #1
    2d7c:	d104      	bne.n	2d88 <nm_spi_write_reg+0x34>
    2d7e:	230f      	movs	r3, #15
    2d80:	18fb      	adds	r3, r7, r3
    2d82:	2200      	movs	r2, #0
    2d84:	701a      	strb	r2, [r3, #0]
    2d86:	e003      	b.n	2d90 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2d88:	230f      	movs	r3, #15
    2d8a:	18fb      	adds	r3, r7, r3
    2d8c:	22fa      	movs	r2, #250	; 0xfa
    2d8e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    2d90:	230f      	movs	r3, #15
    2d92:	18fb      	adds	r3, r7, r3
    2d94:	781b      	ldrb	r3, [r3, #0]
    2d96:	b25b      	sxtb	r3, r3
}
    2d98:	0018      	movs	r0, r3
    2d9a:	46bd      	mov	sp, r7
    2d9c:	b005      	add	sp, #20
    2d9e:	bd90      	pop	{r4, r7, pc}
    2da0:	00002605 	.word	0x00002605

00002da4 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2da4:	b590      	push	{r4, r7, lr}
    2da6:	b087      	sub	sp, #28
    2da8:	af00      	add	r7, sp, #0
    2daa:	60f8      	str	r0, [r7, #12]
    2dac:	60b9      	str	r1, [r7, #8]
    2dae:	1dbb      	adds	r3, r7, #6
    2db0:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    2db2:	2317      	movs	r3, #23
    2db4:	18fc      	adds	r4, r7, r3
    2db6:	1dbb      	adds	r3, r7, #6
    2db8:	881a      	ldrh	r2, [r3, #0]
    2dba:	68b9      	ldr	r1, [r7, #8]
    2dbc:	68fb      	ldr	r3, [r7, #12]
    2dbe:	0018      	movs	r0, r3
    2dc0:	4b0d      	ldr	r3, [pc, #52]	; (2df8 <nm_spi_read_block+0x54>)
    2dc2:	4798      	blx	r3
    2dc4:	0003      	movs	r3, r0
    2dc6:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2dc8:	2317      	movs	r3, #23
    2dca:	18fb      	adds	r3, r7, r3
    2dcc:	781b      	ldrb	r3, [r3, #0]
    2dce:	b25b      	sxtb	r3, r3
    2dd0:	2b01      	cmp	r3, #1
    2dd2:	d104      	bne.n	2dde <nm_spi_read_block+0x3a>
    2dd4:	2317      	movs	r3, #23
    2dd6:	18fb      	adds	r3, r7, r3
    2dd8:	2200      	movs	r2, #0
    2dda:	701a      	strb	r2, [r3, #0]
    2ddc:	e003      	b.n	2de6 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2dde:	2317      	movs	r3, #23
    2de0:	18fb      	adds	r3, r7, r3
    2de2:	22fa      	movs	r2, #250	; 0xfa
    2de4:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    2de6:	2317      	movs	r3, #23
    2de8:	18fb      	adds	r3, r7, r3
    2dea:	781b      	ldrb	r3, [r3, #0]
    2dec:	b25b      	sxtb	r3, r3
}
    2dee:	0018      	movs	r0, r3
    2df0:	46bd      	mov	sp, r7
    2df2:	b007      	add	sp, #28
    2df4:	bd90      	pop	{r4, r7, pc}
    2df6:	46c0      	nop			; (mov r8, r8)
    2df8:	00002a0d 	.word	0x00002a0d

00002dfc <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2dfc:	b590      	push	{r4, r7, lr}
    2dfe:	b087      	sub	sp, #28
    2e00:	af00      	add	r7, sp, #0
    2e02:	60f8      	str	r0, [r7, #12]
    2e04:	60b9      	str	r1, [r7, #8]
    2e06:	1dbb      	adds	r3, r7, #6
    2e08:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    2e0a:	2317      	movs	r3, #23
    2e0c:	18fc      	adds	r4, r7, r3
    2e0e:	1dbb      	adds	r3, r7, #6
    2e10:	881a      	ldrh	r2, [r3, #0]
    2e12:	68b9      	ldr	r1, [r7, #8]
    2e14:	68fb      	ldr	r3, [r7, #12]
    2e16:	0018      	movs	r0, r3
    2e18:	4b0d      	ldr	r3, [pc, #52]	; (2e50 <nm_spi_write_block+0x54>)
    2e1a:	4798      	blx	r3
    2e1c:	0003      	movs	r3, r0
    2e1e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2e20:	2317      	movs	r3, #23
    2e22:	18fb      	adds	r3, r7, r3
    2e24:	781b      	ldrb	r3, [r3, #0]
    2e26:	b25b      	sxtb	r3, r3
    2e28:	2b01      	cmp	r3, #1
    2e2a:	d104      	bne.n	2e36 <nm_spi_write_block+0x3a>
    2e2c:	2317      	movs	r3, #23
    2e2e:	18fb      	adds	r3, r7, r3
    2e30:	2200      	movs	r2, #0
    2e32:	701a      	strb	r2, [r3, #0]
    2e34:	e003      	b.n	2e3e <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2e36:	2317      	movs	r3, #23
    2e38:	18fb      	adds	r3, r7, r3
    2e3a:	22fa      	movs	r2, #250	; 0xfa
    2e3c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    2e3e:	2317      	movs	r3, #23
    2e40:	18fb      	adds	r3, r7, r3
    2e42:	781b      	ldrb	r3, [r3, #0]
    2e44:	b25b      	sxtb	r3, r3
}
    2e46:	0018      	movs	r0, r3
    2e48:	46bd      	mov	sp, r7
    2e4a:	b007      	add	sp, #28
    2e4c:	bd90      	pop	{r4, r7, pc}
    2e4e:	46c0      	nop			; (mov r8, r8)
    2e50:	00002721 	.word	0x00002721

00002e54 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    2e54:	b580      	push	{r7, lr}
    2e56:	b082      	sub	sp, #8
    2e58:	af00      	add	r7, sp, #0
    2e5a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    2e5c:	687b      	ldr	r3, [r7, #4]
    2e5e:	2b00      	cmp	r3, #0
    2e60:	d00c      	beq.n	2e7c <delay_cycles+0x28>
		SysTick->LOAD = n;
    2e62:	4b08      	ldr	r3, [pc, #32]	; (2e84 <delay_cycles+0x30>)
    2e64:	687a      	ldr	r2, [r7, #4]
    2e66:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    2e68:	4b06      	ldr	r3, [pc, #24]	; (2e84 <delay_cycles+0x30>)
    2e6a:	2200      	movs	r2, #0
    2e6c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    2e6e:	46c0      	nop			; (mov r8, r8)
    2e70:	4b04      	ldr	r3, [pc, #16]	; (2e84 <delay_cycles+0x30>)
    2e72:	681a      	ldr	r2, [r3, #0]
    2e74:	2380      	movs	r3, #128	; 0x80
    2e76:	025b      	lsls	r3, r3, #9
    2e78:	4013      	ands	r3, r2
    2e7a:	d0f9      	beq.n	2e70 <delay_cycles+0x1c>
		};
	}
}
    2e7c:	46c0      	nop			; (mov r8, r8)
    2e7e:	46bd      	mov	sp, r7
    2e80:	b002      	add	sp, #8
    2e82:	bd80      	pop	{r7, pc}
    2e84:	e000e010 	.word	0xe000e010

00002e88 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    2e88:	b580      	push	{r7, lr}
    2e8a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    2e8c:	2000      	movs	r0, #0
    2e8e:	4b0f      	ldr	r3, [pc, #60]	; (2ecc <delay_init+0x44>)
    2e90:	4798      	blx	r3
    2e92:	0002      	movs	r2, r0
    2e94:	4b0e      	ldr	r3, [pc, #56]	; (2ed0 <delay_init+0x48>)
    2e96:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    2e98:	4b0d      	ldr	r3, [pc, #52]	; (2ed0 <delay_init+0x48>)
    2e9a:	6818      	ldr	r0, [r3, #0]
    2e9c:	4b0d      	ldr	r3, [pc, #52]	; (2ed4 <delay_init+0x4c>)
    2e9e:	22fa      	movs	r2, #250	; 0xfa
    2ea0:	0091      	lsls	r1, r2, #2
    2ea2:	4798      	blx	r3
    2ea4:	0003      	movs	r3, r0
    2ea6:	001a      	movs	r2, r3
    2ea8:	4b09      	ldr	r3, [pc, #36]	; (2ed0 <delay_init+0x48>)
    2eaa:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    2eac:	4b08      	ldr	r3, [pc, #32]	; (2ed0 <delay_init+0x48>)
    2eae:	6818      	ldr	r0, [r3, #0]
    2eb0:	4b08      	ldr	r3, [pc, #32]	; (2ed4 <delay_init+0x4c>)
    2eb2:	22fa      	movs	r2, #250	; 0xfa
    2eb4:	0091      	lsls	r1, r2, #2
    2eb6:	4798      	blx	r3
    2eb8:	0003      	movs	r3, r0
    2eba:	001a      	movs	r2, r3
    2ebc:	4b06      	ldr	r3, [pc, #24]	; (2ed8 <delay_init+0x50>)
    2ebe:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    2ec0:	4b06      	ldr	r3, [pc, #24]	; (2edc <delay_init+0x54>)
    2ec2:	2205      	movs	r2, #5
    2ec4:	601a      	str	r2, [r3, #0]
}
    2ec6:	46c0      	nop			; (mov r8, r8)
    2ec8:	46bd      	mov	sp, r7
    2eca:	bd80      	pop	{r7, pc}
    2ecc:	00005e5d 	.word	0x00005e5d
    2ed0:	20000004 	.word	0x20000004
    2ed4:	000063c5 	.word	0x000063c5
    2ed8:	20000008 	.word	0x20000008
    2edc:	e000e010 	.word	0xe000e010

00002ee0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    2ee0:	b580      	push	{r7, lr}
    2ee2:	b082      	sub	sp, #8
    2ee4:	af00      	add	r7, sp, #0
    2ee6:	6078      	str	r0, [r7, #4]
	while (n--) {
    2ee8:	e004      	b.n	2ef4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    2eea:	4b07      	ldr	r3, [pc, #28]	; (2f08 <delay_cycles_ms+0x28>)
    2eec:	681b      	ldr	r3, [r3, #0]
    2eee:	0018      	movs	r0, r3
    2ef0:	4b06      	ldr	r3, [pc, #24]	; (2f0c <delay_cycles_ms+0x2c>)
    2ef2:	4798      	blx	r3
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
    2ef4:	687b      	ldr	r3, [r7, #4]
    2ef6:	1e5a      	subs	r2, r3, #1
    2ef8:	607a      	str	r2, [r7, #4]
    2efa:	2b00      	cmp	r3, #0
    2efc:	d1f5      	bne.n	2eea <delay_cycles_ms+0xa>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
    2efe:	46c0      	nop			; (mov r8, r8)
    2f00:	46bd      	mov	sp, r7
    2f02:	b002      	add	sp, #8
    2f04:	bd80      	pop	{r7, pc}
    2f06:	46c0      	nop			; (mov r8, r8)
    2f08:	20000004 	.word	0x20000004
    2f0c:	00002e55 	.word	0x00002e55

00002f10 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    2f10:	b580      	push	{r7, lr}
    2f12:	b082      	sub	sp, #8
    2f14:	af00      	add	r7, sp, #0
    2f16:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2f18:	687b      	ldr	r3, [r7, #4]
    2f1a:	2280      	movs	r2, #128	; 0x80
    2f1c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2f1e:	687b      	ldr	r3, [r7, #4]
    2f20:	2200      	movs	r2, #0
    2f22:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2f24:	687b      	ldr	r3, [r7, #4]
    2f26:	2201      	movs	r2, #1
    2f28:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2f2a:	687b      	ldr	r3, [r7, #4]
    2f2c:	2200      	movs	r2, #0
    2f2e:	70da      	strb	r2, [r3, #3]
}
    2f30:	46c0      	nop			; (mov r8, r8)
    2f32:	46bd      	mov	sp, r7
    2f34:	b002      	add	sp, #8
    2f36:	bd80      	pop	{r7, pc}

00002f38 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    2f38:	b580      	push	{r7, lr}
    2f3a:	b084      	sub	sp, #16
    2f3c:	af00      	add	r7, sp, #0
    2f3e:	0002      	movs	r2, r0
    2f40:	1dfb      	adds	r3, r7, #7
    2f42:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    2f44:	230f      	movs	r3, #15
    2f46:	18fb      	adds	r3, r7, r3
    2f48:	1dfa      	adds	r2, r7, #7
    2f4a:	7812      	ldrb	r2, [r2, #0]
    2f4c:	0952      	lsrs	r2, r2, #5
    2f4e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    2f50:	230f      	movs	r3, #15
    2f52:	18fb      	adds	r3, r7, r3
    2f54:	781b      	ldrb	r3, [r3, #0]
    2f56:	2b00      	cmp	r3, #0
    2f58:	d10c      	bne.n	2f74 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    2f5a:	4b09      	ldr	r3, [pc, #36]	; (2f80 <_extint_get_eic_from_channel+0x48>)
    2f5c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    2f5e:	230f      	movs	r3, #15
    2f60:	18fb      	adds	r3, r7, r3
    2f62:	781b      	ldrb	r3, [r3, #0]
    2f64:	009b      	lsls	r3, r3, #2
    2f66:	2210      	movs	r2, #16
    2f68:	4694      	mov	ip, r2
    2f6a:	44bc      	add	ip, r7
    2f6c:	4463      	add	r3, ip
    2f6e:	3b08      	subs	r3, #8
    2f70:	681b      	ldr	r3, [r3, #0]
    2f72:	e000      	b.n	2f76 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    2f74:	2300      	movs	r3, #0
	}
}
    2f76:	0018      	movs	r0, r3
    2f78:	46bd      	mov	sp, r7
    2f7a:	b004      	add	sp, #16
    2f7c:	bd80      	pop	{r7, pc}
    2f7e:	46c0      	nop			; (mov r8, r8)
    2f80:	40001800 	.word	0x40001800

00002f84 <extint_is_syncing>:
 *
 * \retval true  If the module has completed synchronization
 * \retval false If the module synchronization is ongoing
 */
static inline bool extint_is_syncing(void)
{
    2f84:	b580      	push	{r7, lr}
    2f86:	b082      	sub	sp, #8
    2f88:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    2f8a:	4b0f      	ldr	r3, [pc, #60]	; (2fc8 <extint_is_syncing+0x44>)
    2f8c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    2f8e:	2300      	movs	r3, #0
    2f90:	607b      	str	r3, [r7, #4]
    2f92:	e011      	b.n	2fb8 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    2f94:	687b      	ldr	r3, [r7, #4]
    2f96:	009b      	lsls	r3, r3, #2
    2f98:	2208      	movs	r2, #8
    2f9a:	4694      	mov	ip, r2
    2f9c:	44bc      	add	ip, r7
    2f9e:	4463      	add	r3, ip
    2fa0:	3b08      	subs	r3, #8
    2fa2:	681b      	ldr	r3, [r3, #0]
    2fa4:	785b      	ldrb	r3, [r3, #1]
    2fa6:	b2db      	uxtb	r3, r3
    2fa8:	b25b      	sxtb	r3, r3
    2faa:	2b00      	cmp	r3, #0
    2fac:	da01      	bge.n	2fb2 <extint_is_syncing+0x2e>
			return true;
    2fae:	2301      	movs	r3, #1
    2fb0:	e006      	b.n	2fc0 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    2fb2:	687b      	ldr	r3, [r7, #4]
    2fb4:	3301      	adds	r3, #1
    2fb6:	607b      	str	r3, [r7, #4]
    2fb8:	687b      	ldr	r3, [r7, #4]
    2fba:	2b00      	cmp	r3, #0
    2fbc:	d0ea      	beq.n	2f94 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}

	return false;
    2fbe:	2300      	movs	r3, #0
}
    2fc0:	0018      	movs	r0, r3
    2fc2:	46bd      	mov	sp, r7
    2fc4:	b002      	add	sp, #8
    2fc6:	bd80      	pop	{r7, pc}
    2fc8:	40001800 	.word	0x40001800

00002fcc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2fcc:	b580      	push	{r7, lr}
    2fce:	b082      	sub	sp, #8
    2fd0:	af00      	add	r7, sp, #0
    2fd2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2fd4:	687b      	ldr	r3, [r7, #4]
    2fd6:	2200      	movs	r2, #0
    2fd8:	701a      	strb	r2, [r3, #0]
}
    2fda:	46c0      	nop			; (mov r8, r8)
    2fdc:	46bd      	mov	sp, r7
    2fde:	b002      	add	sp, #8
    2fe0:	bd80      	pop	{r7, pc}
    2fe2:	46c0      	nop			; (mov r8, r8)

00002fe4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    2fe4:	b580      	push	{r7, lr}
    2fe6:	b082      	sub	sp, #8
    2fe8:	af00      	add	r7, sp, #0
    2fea:	0002      	movs	r2, r0
    2fec:	6039      	str	r1, [r7, #0]
    2fee:	1dfb      	adds	r3, r7, #7
    2ff0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2ff2:	1dfb      	adds	r3, r7, #7
    2ff4:	781b      	ldrb	r3, [r3, #0]
    2ff6:	2b01      	cmp	r3, #1
    2ff8:	d00a      	beq.n	3010 <system_apb_clock_set_mask+0x2c>
    2ffa:	2b02      	cmp	r3, #2
    2ffc:	d00f      	beq.n	301e <system_apb_clock_set_mask+0x3a>
    2ffe:	2b00      	cmp	r3, #0
    3000:	d114      	bne.n	302c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3002:	4b0e      	ldr	r3, [pc, #56]	; (303c <system_apb_clock_set_mask+0x58>)
    3004:	4a0d      	ldr	r2, [pc, #52]	; (303c <system_apb_clock_set_mask+0x58>)
    3006:	6991      	ldr	r1, [r2, #24]
    3008:	683a      	ldr	r2, [r7, #0]
    300a:	430a      	orrs	r2, r1
    300c:	619a      	str	r2, [r3, #24]
			break;
    300e:	e00f      	b.n	3030 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3010:	4b0a      	ldr	r3, [pc, #40]	; (303c <system_apb_clock_set_mask+0x58>)
    3012:	4a0a      	ldr	r2, [pc, #40]	; (303c <system_apb_clock_set_mask+0x58>)
    3014:	69d1      	ldr	r1, [r2, #28]
    3016:	683a      	ldr	r2, [r7, #0]
    3018:	430a      	orrs	r2, r1
    301a:	61da      	str	r2, [r3, #28]
			break;
    301c:	e008      	b.n	3030 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    301e:	4b07      	ldr	r3, [pc, #28]	; (303c <system_apb_clock_set_mask+0x58>)
    3020:	4a06      	ldr	r2, [pc, #24]	; (303c <system_apb_clock_set_mask+0x58>)
    3022:	6a11      	ldr	r1, [r2, #32]
    3024:	683a      	ldr	r2, [r7, #0]
    3026:	430a      	orrs	r2, r1
    3028:	621a      	str	r2, [r3, #32]
			break;
    302a:	e001      	b.n	3030 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    302c:	2317      	movs	r3, #23
    302e:	e000      	b.n	3032 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3030:	2300      	movs	r3, #0
}
    3032:	0018      	movs	r0, r3
    3034:	46bd      	mov	sp, r7
    3036:	b002      	add	sp, #8
    3038:	bd80      	pop	{r7, pc}
    303a:	46c0      	nop			; (mov r8, r8)
    303c:	40000400 	.word	0x40000400

00003040 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    3040:	b580      	push	{r7, lr}
    3042:	b082      	sub	sp, #8
    3044:	af00      	add	r7, sp, #0
    3046:	0002      	movs	r2, r0
    3048:	1dfb      	adds	r3, r7, #7
    304a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    304c:	4b06      	ldr	r3, [pc, #24]	; (3068 <system_interrupt_enable+0x28>)
    304e:	1dfa      	adds	r2, r7, #7
    3050:	7812      	ldrb	r2, [r2, #0]
    3052:	0011      	movs	r1, r2
    3054:	221f      	movs	r2, #31
    3056:	400a      	ands	r2, r1
    3058:	2101      	movs	r1, #1
    305a:	4091      	lsls	r1, r2
    305c:	000a      	movs	r2, r1
    305e:	601a      	str	r2, [r3, #0]
}
    3060:	46c0      	nop			; (mov r8, r8)
    3062:	46bd      	mov	sp, r7
    3064:	b002      	add	sp, #8
    3066:	bd80      	pop	{r7, pc}
    3068:	e000e100 	.word	0xe000e100

0000306c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    306c:	b580      	push	{r7, lr}
    306e:	b084      	sub	sp, #16
    3070:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3072:	4b2d      	ldr	r3, [pc, #180]	; (3128 <_system_extint_init+0xbc>)
    3074:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    3076:	2140      	movs	r1, #64	; 0x40
    3078:	2000      	movs	r0, #0
    307a:	4b2c      	ldr	r3, [pc, #176]	; (312c <_system_extint_init+0xc0>)
    307c:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    307e:	003b      	movs	r3, r7
    3080:	0018      	movs	r0, r3
    3082:	4b2b      	ldr	r3, [pc, #172]	; (3130 <_system_extint_init+0xc4>)
    3084:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    3086:	003b      	movs	r3, r7
    3088:	2200      	movs	r2, #0
    308a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    308c:	003b      	movs	r3, r7
    308e:	0019      	movs	r1, r3
    3090:	2005      	movs	r0, #5
    3092:	4b28      	ldr	r3, [pc, #160]	; (3134 <_system_extint_init+0xc8>)
    3094:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    3096:	2005      	movs	r0, #5
    3098:	4b27      	ldr	r3, [pc, #156]	; (3138 <_system_extint_init+0xcc>)
    309a:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    309c:	2300      	movs	r3, #0
    309e:	60fb      	str	r3, [r7, #12]
    30a0:	e018      	b.n	30d4 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    30a2:	68fb      	ldr	r3, [r7, #12]
    30a4:	009b      	lsls	r3, r3, #2
    30a6:	2210      	movs	r2, #16
    30a8:	4694      	mov	ip, r2
    30aa:	44bc      	add	ip, r7
    30ac:	4463      	add	r3, ip
    30ae:	3b0c      	subs	r3, #12
    30b0:	681a      	ldr	r2, [r3, #0]
    30b2:	68fb      	ldr	r3, [r7, #12]
    30b4:	009b      	lsls	r3, r3, #2
    30b6:	2110      	movs	r1, #16
    30b8:	468c      	mov	ip, r1
    30ba:	44bc      	add	ip, r7
    30bc:	4463      	add	r3, ip
    30be:	3b0c      	subs	r3, #12
    30c0:	681b      	ldr	r3, [r3, #0]
    30c2:	781b      	ldrb	r3, [r3, #0]
    30c4:	b2db      	uxtb	r3, r3
    30c6:	2101      	movs	r1, #1
    30c8:	430b      	orrs	r3, r1
    30ca:	b2db      	uxtb	r3, r3
    30cc:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    30ce:	68fb      	ldr	r3, [r7, #12]
    30d0:	3301      	adds	r3, #1
    30d2:	60fb      	str	r3, [r7, #12]
    30d4:	68fb      	ldr	r3, [r7, #12]
    30d6:	2b00      	cmp	r3, #0
    30d8:	d0e3      	beq.n	30a2 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    30da:	46c0      	nop			; (mov r8, r8)
    30dc:	4b17      	ldr	r3, [pc, #92]	; (313c <_system_extint_init+0xd0>)
    30de:	4798      	blx	r3
    30e0:	1e03      	subs	r3, r0, #0
    30e2:	d1fb      	bne.n	30dc <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    30e4:	230b      	movs	r3, #11
    30e6:	18fb      	adds	r3, r7, r3
    30e8:	2200      	movs	r2, #0
    30ea:	701a      	strb	r2, [r3, #0]
    30ec:	e00d      	b.n	310a <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    30ee:	230b      	movs	r3, #11
    30f0:	18fb      	adds	r3, r7, r3
    30f2:	781a      	ldrb	r2, [r3, #0]
    30f4:	4b12      	ldr	r3, [pc, #72]	; (3140 <_system_extint_init+0xd4>)
    30f6:	0092      	lsls	r2, r2, #2
    30f8:	2100      	movs	r1, #0
    30fa:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    30fc:	230b      	movs	r3, #11
    30fe:	18fb      	adds	r3, r7, r3
    3100:	781a      	ldrb	r2, [r3, #0]
    3102:	230b      	movs	r3, #11
    3104:	18fb      	adds	r3, r7, r3
    3106:	3201      	adds	r2, #1
    3108:	701a      	strb	r2, [r3, #0]
    310a:	230b      	movs	r3, #11
    310c:	18fb      	adds	r3, r7, r3
    310e:	781b      	ldrb	r3, [r3, #0]
    3110:	2b0f      	cmp	r3, #15
    3112:	d9ec      	bls.n	30ee <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    3114:	2004      	movs	r0, #4
    3116:	4b0b      	ldr	r3, [pc, #44]	; (3144 <_system_extint_init+0xd8>)
    3118:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    311a:	4b0b      	ldr	r3, [pc, #44]	; (3148 <_system_extint_init+0xdc>)
    311c:	4798      	blx	r3
}
    311e:	46c0      	nop			; (mov r8, r8)
    3120:	46bd      	mov	sp, r7
    3122:	b004      	add	sp, #16
    3124:	bd80      	pop	{r7, pc}
    3126:	46c0      	nop			; (mov r8, r8)
    3128:	40001800 	.word	0x40001800
    312c:	00002fe5 	.word	0x00002fe5
    3130:	00002fcd 	.word	0x00002fcd
    3134:	00005f35 	.word	0x00005f35
    3138:	00005f79 	.word	0x00005f79
    313c:	00002f85 	.word	0x00002f85
    3140:	20000dd8 	.word	0x20000dd8
    3144:	00003041 	.word	0x00003041
    3148:	0000314d 	.word	0x0000314d

0000314c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    314c:	b580      	push	{r7, lr}
    314e:	b082      	sub	sp, #8
    3150:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3152:	4b15      	ldr	r3, [pc, #84]	; (31a8 <_extint_enable+0x5c>)
    3154:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3156:	2300      	movs	r3, #0
    3158:	607b      	str	r3, [r7, #4]
    315a:	e018      	b.n	318e <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    315c:	687b      	ldr	r3, [r7, #4]
    315e:	009b      	lsls	r3, r3, #2
    3160:	2208      	movs	r2, #8
    3162:	4694      	mov	ip, r2
    3164:	44bc      	add	ip, r7
    3166:	4463      	add	r3, ip
    3168:	3b08      	subs	r3, #8
    316a:	681a      	ldr	r2, [r3, #0]
    316c:	687b      	ldr	r3, [r7, #4]
    316e:	009b      	lsls	r3, r3, #2
    3170:	2108      	movs	r1, #8
    3172:	468c      	mov	ip, r1
    3174:	44bc      	add	ip, r7
    3176:	4463      	add	r3, ip
    3178:	3b08      	subs	r3, #8
    317a:	681b      	ldr	r3, [r3, #0]
    317c:	781b      	ldrb	r3, [r3, #0]
    317e:	b2db      	uxtb	r3, r3
    3180:	2102      	movs	r1, #2
    3182:	430b      	orrs	r3, r1
    3184:	b2db      	uxtb	r3, r3
    3186:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3188:	687b      	ldr	r3, [r7, #4]
    318a:	3301      	adds	r3, #1
    318c:	607b      	str	r3, [r7, #4]
    318e:	687b      	ldr	r3, [r7, #4]
    3190:	2b00      	cmp	r3, #0
    3192:	d0e3      	beq.n	315c <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    3194:	46c0      	nop			; (mov r8, r8)
    3196:	4b05      	ldr	r3, [pc, #20]	; (31ac <_extint_enable+0x60>)
    3198:	4798      	blx	r3
    319a:	1e03      	subs	r3, r0, #0
    319c:	d1fb      	bne.n	3196 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    319e:	46c0      	nop			; (mov r8, r8)
    31a0:	46bd      	mov	sp, r7
    31a2:	b002      	add	sp, #8
    31a4:	bd80      	pop	{r7, pc}
    31a6:	46c0      	nop			; (mov r8, r8)
    31a8:	40001800 	.word	0x40001800
    31ac:	00002f85 	.word	0x00002f85

000031b0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    31b0:	b580      	push	{r7, lr}
    31b2:	b086      	sub	sp, #24
    31b4:	af00      	add	r7, sp, #0
    31b6:	0002      	movs	r2, r0
    31b8:	6039      	str	r1, [r7, #0]
    31ba:	1dfb      	adds	r3, r7, #7
    31bc:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    31be:	2308      	movs	r3, #8
    31c0:	18fb      	adds	r3, r7, r3
    31c2:	0018      	movs	r0, r3
    31c4:	4b36      	ldr	r3, [pc, #216]	; (32a0 <extint_chan_set_config+0xf0>)
    31c6:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    31c8:	683b      	ldr	r3, [r7, #0]
    31ca:	685b      	ldr	r3, [r3, #4]
    31cc:	b2da      	uxtb	r2, r3
    31ce:	2308      	movs	r3, #8
    31d0:	18fb      	adds	r3, r7, r3
    31d2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    31d4:	2308      	movs	r3, #8
    31d6:	18fb      	adds	r3, r7, r3
    31d8:	2200      	movs	r2, #0
    31da:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    31dc:	683b      	ldr	r3, [r7, #0]
    31de:	7a1a      	ldrb	r2, [r3, #8]
    31e0:	2308      	movs	r3, #8
    31e2:	18fb      	adds	r3, r7, r3
    31e4:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    31e6:	683b      	ldr	r3, [r7, #0]
    31e8:	681b      	ldr	r3, [r3, #0]
    31ea:	b2db      	uxtb	r3, r3
    31ec:	2208      	movs	r2, #8
    31ee:	18ba      	adds	r2, r7, r2
    31f0:	0011      	movs	r1, r2
    31f2:	0018      	movs	r0, r3
    31f4:	4b2b      	ldr	r3, [pc, #172]	; (32a4 <extint_chan_set_config+0xf4>)
    31f6:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    31f8:	1dfb      	adds	r3, r7, #7
    31fa:	781b      	ldrb	r3, [r3, #0]
    31fc:	0018      	movs	r0, r3
    31fe:	4b2a      	ldr	r3, [pc, #168]	; (32a8 <extint_chan_set_config+0xf8>)
    3200:	4798      	blx	r3
    3202:	0003      	movs	r3, r0
    3204:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    3206:	1dfb      	adds	r3, r7, #7
    3208:	781b      	ldrb	r3, [r3, #0]
    320a:	2207      	movs	r2, #7
    320c:	4013      	ands	r3, r2
    320e:	009b      	lsls	r3, r3, #2
    3210:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    3212:	683b      	ldr	r3, [r7, #0]
    3214:	7adb      	ldrb	r3, [r3, #11]
    3216:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    3218:	683b      	ldr	r3, [r7, #0]
    321a:	7a9b      	ldrb	r3, [r3, #10]
    321c:	2b00      	cmp	r3, #0
    321e:	d003      	beq.n	3228 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    3220:	697b      	ldr	r3, [r7, #20]
    3222:	2208      	movs	r2, #8
    3224:	4313      	orrs	r3, r2
    3226:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    3228:	1dfb      	adds	r3, r7, #7
    322a:	781b      	ldrb	r3, [r3, #0]
    322c:	08db      	lsrs	r3, r3, #3
    322e:	b2db      	uxtb	r3, r3
    3230:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    3232:	1dfb      	adds	r3, r7, #7
    3234:	781b      	ldrb	r3, [r3, #0]
    3236:	08db      	lsrs	r3, r3, #3
    3238:	b2db      	uxtb	r3, r3
    323a:	001a      	movs	r2, r3
    323c:	693b      	ldr	r3, [r7, #16]
    323e:	3206      	adds	r2, #6
    3240:	0092      	lsls	r2, r2, #2
    3242:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    3244:	210f      	movs	r1, #15
    3246:	68fa      	ldr	r2, [r7, #12]
    3248:	4091      	lsls	r1, r2
    324a:	000a      	movs	r2, r1
    324c:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    324e:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    3250:	6979      	ldr	r1, [r7, #20]
    3252:	68fb      	ldr	r3, [r7, #12]
    3254:	4099      	lsls	r1, r3
    3256:	000b      	movs	r3, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    3258:	431a      	orrs	r2, r3
    325a:	0011      	movs	r1, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    325c:	693b      	ldr	r3, [r7, #16]
    325e:	1d82      	adds	r2, r0, #6
    3260:	0092      	lsls	r2, r2, #2
    3262:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    3264:	683b      	ldr	r3, [r7, #0]
    3266:	7a5b      	ldrb	r3, [r3, #9]
    3268:	2b00      	cmp	r3, #0
    326a:	d00a      	beq.n	3282 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    326c:	693b      	ldr	r3, [r7, #16]
    326e:	695a      	ldr	r2, [r3, #20]
    3270:	1dfb      	adds	r3, r7, #7
    3272:	781b      	ldrb	r3, [r3, #0]
    3274:	2101      	movs	r1, #1
    3276:	4099      	lsls	r1, r3
    3278:	000b      	movs	r3, r1
    327a:	431a      	orrs	r2, r3
    327c:	693b      	ldr	r3, [r7, #16]
    327e:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    3280:	e00a      	b.n	3298 <extint_chan_set_config+0xe8>

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    3282:	693b      	ldr	r3, [r7, #16]
    3284:	695b      	ldr	r3, [r3, #20]
    3286:	1dfa      	adds	r2, r7, #7
    3288:	7812      	ldrb	r2, [r2, #0]
    328a:	2101      	movs	r1, #1
    328c:	4091      	lsls	r1, r2
    328e:	000a      	movs	r2, r1
    3290:	43d2      	mvns	r2, r2
    3292:	401a      	ands	r2, r3
    3294:	693b      	ldr	r3, [r7, #16]
    3296:	615a      	str	r2, [r3, #20]
	}
}
    3298:	46c0      	nop			; (mov r8, r8)
    329a:	46bd      	mov	sp, r7
    329c:	b006      	add	sp, #24
    329e:	bd80      	pop	{r7, pc}
    32a0:	00002f11 	.word	0x00002f11
    32a4:	00006219 	.word	0x00006219
    32a8:	00002f39 	.word	0x00002f39

000032ac <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    32ac:	b580      	push	{r7, lr}
    32ae:	b082      	sub	sp, #8
    32b0:	af00      	add	r7, sp, #0
    32b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    32b4:	687b      	ldr	r3, [r7, #4]
    32b6:	2280      	movs	r2, #128	; 0x80
    32b8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    32ba:	687b      	ldr	r3, [r7, #4]
    32bc:	2200      	movs	r2, #0
    32be:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    32c0:	687b      	ldr	r3, [r7, #4]
    32c2:	2201      	movs	r2, #1
    32c4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    32c6:	687b      	ldr	r3, [r7, #4]
    32c8:	2200      	movs	r2, #0
    32ca:	70da      	strb	r2, [r3, #3]
}
    32cc:	46c0      	nop			; (mov r8, r8)
    32ce:	46bd      	mov	sp, r7
    32d0:	b002      	add	sp, #8
    32d2:	bd80      	pop	{r7, pc}

000032d4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    32d4:	b580      	push	{r7, lr}
    32d6:	b084      	sub	sp, #16
    32d8:	af00      	add	r7, sp, #0
    32da:	0002      	movs	r2, r0
    32dc:	1dfb      	adds	r3, r7, #7
    32de:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    32e0:	230f      	movs	r3, #15
    32e2:	18fb      	adds	r3, r7, r3
    32e4:	1dfa      	adds	r2, r7, #7
    32e6:	7812      	ldrb	r2, [r2, #0]
    32e8:	09d2      	lsrs	r2, r2, #7
    32ea:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    32ec:	230e      	movs	r3, #14
    32ee:	18fb      	adds	r3, r7, r3
    32f0:	1dfa      	adds	r2, r7, #7
    32f2:	7812      	ldrb	r2, [r2, #0]
    32f4:	0952      	lsrs	r2, r2, #5
    32f6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    32f8:	4b0d      	ldr	r3, [pc, #52]	; (3330 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    32fa:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    32fc:	230f      	movs	r3, #15
    32fe:	18fb      	adds	r3, r7, r3
    3300:	781b      	ldrb	r3, [r3, #0]
    3302:	2b00      	cmp	r3, #0
    3304:	d10f      	bne.n	3326 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3306:	230f      	movs	r3, #15
    3308:	18fb      	adds	r3, r7, r3
    330a:	781b      	ldrb	r3, [r3, #0]
    330c:	009b      	lsls	r3, r3, #2
    330e:	2210      	movs	r2, #16
    3310:	4694      	mov	ip, r2
    3312:	44bc      	add	ip, r7
    3314:	4463      	add	r3, ip
    3316:	3b08      	subs	r3, #8
    3318:	681a      	ldr	r2, [r3, #0]
    331a:	230e      	movs	r3, #14
    331c:	18fb      	adds	r3, r7, r3
    331e:	781b      	ldrb	r3, [r3, #0]
    3320:	01db      	lsls	r3, r3, #7
    3322:	18d3      	adds	r3, r2, r3
    3324:	e000      	b.n	3328 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3326:	2300      	movs	r3, #0
	}
}
    3328:	0018      	movs	r0, r3
    332a:	46bd      	mov	sp, r7
    332c:	b004      	add	sp, #16
    332e:	bd80      	pop	{r7, pc}
    3330:	41004400 	.word	0x41004400

00003334 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
    3334:	b580      	push	{r7, lr}
    3336:	b086      	sub	sp, #24
    3338:	af00      	add	r7, sp, #0
    333a:	0002      	movs	r2, r0
    333c:	1dfb      	adds	r3, r7, #7
    333e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3340:	1dfb      	adds	r3, r7, #7
    3342:	781b      	ldrb	r3, [r3, #0]
    3344:	0018      	movs	r0, r3
    3346:	4b19      	ldr	r3, [pc, #100]	; (33ac <system_pinmux_pin_get_mux_position+0x78>)
    3348:	4798      	blx	r3
    334a:	0003      	movs	r3, r0
    334c:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
    334e:	1dfb      	adds	r3, r7, #7
    3350:	781b      	ldrb	r3, [r3, #0]
    3352:	221f      	movs	r2, #31
    3354:	4013      	ands	r3, r2
    3356:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    3358:	697a      	ldr	r2, [r7, #20]
    335a:	2140      	movs	r1, #64	; 0x40
    335c:	693b      	ldr	r3, [r7, #16]
    335e:	18d3      	adds	r3, r2, r3
    3360:	185b      	adds	r3, r3, r1
    3362:	781b      	ldrb	r3, [r3, #0]
    3364:	b2db      	uxtb	r3, r3
    3366:	001a      	movs	r2, r3
    3368:	2301      	movs	r3, #1
    336a:	4013      	ands	r3, r2
    336c:	d101      	bne.n	3372 <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
    336e:	2380      	movs	r3, #128	; 0x80
    3370:	e018      	b.n	33a4 <system_pinmux_pin_get_mux_position+0x70>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    3372:	693b      	ldr	r3, [r7, #16]
    3374:	085b      	lsrs	r3, r3, #1
    3376:	697a      	ldr	r2, [r7, #20]
    3378:	2130      	movs	r1, #48	; 0x30
    337a:	18d3      	adds	r3, r2, r3
    337c:	185b      	adds	r3, r3, r1
    337e:	781b      	ldrb	r3, [r3, #0]
    3380:	b2db      	uxtb	r3, r3
    3382:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
    3384:	693b      	ldr	r3, [r7, #16]
    3386:	2201      	movs	r2, #1
    3388:	4013      	ands	r3, r2
    338a:	d006      	beq.n	339a <system_pinmux_pin_get_mux_position+0x66>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    338c:	68fb      	ldr	r3, [r7, #12]
    338e:	091b      	lsrs	r3, r3, #4
    3390:	b2db      	uxtb	r3, r3
    3392:	220f      	movs	r2, #15
    3394:	4013      	ands	r3, r2
    3396:	b2db      	uxtb	r3, r3
    3398:	e004      	b.n	33a4 <system_pinmux_pin_get_mux_position+0x70>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    339a:	68fb      	ldr	r3, [r7, #12]
    339c:	b2db      	uxtb	r3, r3
    339e:	220f      	movs	r2, #15
    33a0:	4013      	ands	r3, r2
    33a2:	b2db      	uxtb	r3, r3
	}
}
    33a4:	0018      	movs	r0, r3
    33a6:	46bd      	mov	sp, r7
    33a8:	b006      	add	sp, #24
    33aa:	bd80      	pop	{r7, pc}
    33ac:	000032d5 	.word	0x000032d5

000033b0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    33b0:	b580      	push	{r7, lr}
    33b2:	b082      	sub	sp, #8
    33b4:	af00      	add	r7, sp, #0
    33b6:	0002      	movs	r2, r0
    33b8:	1dfb      	adds	r3, r7, #7
    33ba:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    33bc:	1dfb      	adds	r3, r7, #7
    33be:	781b      	ldrb	r3, [r3, #0]
    33c0:	0018      	movs	r0, r3
    33c2:	4b03      	ldr	r3, [pc, #12]	; (33d0 <port_get_group_from_gpio_pin+0x20>)
    33c4:	4798      	blx	r3
    33c6:	0003      	movs	r3, r0
}
    33c8:	0018      	movs	r0, r3
    33ca:	46bd      	mov	sp, r7
    33cc:	b002      	add	sp, #8
    33ce:	bd80      	pop	{r7, pc}
    33d0:	000032d5 	.word	0x000032d5

000033d4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    33d4:	b580      	push	{r7, lr}
    33d6:	b084      	sub	sp, #16
    33d8:	af00      	add	r7, sp, #0
    33da:	0002      	movs	r2, r0
    33dc:	1dfb      	adds	r3, r7, #7
    33de:	701a      	strb	r2, [r3, #0]
    33e0:	1dbb      	adds	r3, r7, #6
    33e2:	1c0a      	adds	r2, r1, #0
    33e4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    33e6:	1dfb      	adds	r3, r7, #7
    33e8:	781b      	ldrb	r3, [r3, #0]
    33ea:	0018      	movs	r0, r3
    33ec:	4b0d      	ldr	r3, [pc, #52]	; (3424 <port_pin_set_output_level+0x50>)
    33ee:	4798      	blx	r3
    33f0:	0003      	movs	r3, r0
    33f2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    33f4:	1dfb      	adds	r3, r7, #7
    33f6:	781b      	ldrb	r3, [r3, #0]
    33f8:	221f      	movs	r2, #31
    33fa:	4013      	ands	r3, r2
    33fc:	2201      	movs	r2, #1
    33fe:	409a      	lsls	r2, r3
    3400:	0013      	movs	r3, r2
    3402:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3404:	1dbb      	adds	r3, r7, #6
    3406:	781b      	ldrb	r3, [r3, #0]
    3408:	2b00      	cmp	r3, #0
    340a:	d003      	beq.n	3414 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    340c:	68fb      	ldr	r3, [r7, #12]
    340e:	68ba      	ldr	r2, [r7, #8]
    3410:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    3412:	e002      	b.n	341a <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3414:	68fb      	ldr	r3, [r7, #12]
    3416:	68ba      	ldr	r2, [r7, #8]
    3418:	615a      	str	r2, [r3, #20]
	}
}
    341a:	46c0      	nop			; (mov r8, r8)
    341c:	46bd      	mov	sp, r7
    341e:	b004      	add	sp, #16
    3420:	bd80      	pop	{r7, pc}
    3422:	46c0      	nop			; (mov r8, r8)
    3424:	000033b1 	.word	0x000033b1

00003428 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3428:	b580      	push	{r7, lr}
    342a:	b082      	sub	sp, #8
    342c:	af00      	add	r7, sp, #0
    342e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3430:	687b      	ldr	r3, [r7, #4]
    3432:	2200      	movs	r2, #0
    3434:	701a      	strb	r2, [r3, #0]
}
    3436:	46c0      	nop			; (mov r8, r8)
    3438:	46bd      	mov	sp, r7
    343a:	b002      	add	sp, #8
    343c:	bd80      	pop	{r7, pc}
    343e:	46c0      	nop			; (mov r8, r8)

00003440 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3440:	b580      	push	{r7, lr}
    3442:	b082      	sub	sp, #8
    3444:	af00      	add	r7, sp, #0
    3446:	0002      	movs	r2, r0
    3448:	6039      	str	r1, [r7, #0]
    344a:	1dfb      	adds	r3, r7, #7
    344c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    344e:	1dfb      	adds	r3, r7, #7
    3450:	781b      	ldrb	r3, [r3, #0]
    3452:	2b01      	cmp	r3, #1
    3454:	d00a      	beq.n	346c <system_apb_clock_set_mask+0x2c>
    3456:	2b02      	cmp	r3, #2
    3458:	d00f      	beq.n	347a <system_apb_clock_set_mask+0x3a>
    345a:	2b00      	cmp	r3, #0
    345c:	d114      	bne.n	3488 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    345e:	4b0e      	ldr	r3, [pc, #56]	; (3498 <system_apb_clock_set_mask+0x58>)
    3460:	4a0d      	ldr	r2, [pc, #52]	; (3498 <system_apb_clock_set_mask+0x58>)
    3462:	6991      	ldr	r1, [r2, #24]
    3464:	683a      	ldr	r2, [r7, #0]
    3466:	430a      	orrs	r2, r1
    3468:	619a      	str	r2, [r3, #24]
			break;
    346a:	e00f      	b.n	348c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    346c:	4b0a      	ldr	r3, [pc, #40]	; (3498 <system_apb_clock_set_mask+0x58>)
    346e:	4a0a      	ldr	r2, [pc, #40]	; (3498 <system_apb_clock_set_mask+0x58>)
    3470:	69d1      	ldr	r1, [r2, #28]
    3472:	683a      	ldr	r2, [r7, #0]
    3474:	430a      	orrs	r2, r1
    3476:	61da      	str	r2, [r3, #28]
			break;
    3478:	e008      	b.n	348c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    347a:	4b07      	ldr	r3, [pc, #28]	; (3498 <system_apb_clock_set_mask+0x58>)
    347c:	4a06      	ldr	r2, [pc, #24]	; (3498 <system_apb_clock_set_mask+0x58>)
    347e:	6a11      	ldr	r1, [r2, #32]
    3480:	683a      	ldr	r2, [r7, #0]
    3482:	430a      	orrs	r2, r1
    3484:	621a      	str	r2, [r3, #32]
			break;
    3486:	e001      	b.n	348c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3488:	2317      	movs	r3, #23
    348a:	e000      	b.n	348e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    348c:	2300      	movs	r3, #0
}
    348e:	0018      	movs	r0, r3
    3490:	46bd      	mov	sp, r7
    3492:	b002      	add	sp, #8
    3494:	bd80      	pop	{r7, pc}
    3496:	46c0      	nop			; (mov r8, r8)
    3498:	40000400 	.word	0x40000400

0000349c <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    349c:	b580      	push	{r7, lr}
    349e:	b084      	sub	sp, #16
    34a0:	af00      	add	r7, sp, #0
    34a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    34a4:	687b      	ldr	r3, [r7, #4]
    34a6:	681b      	ldr	r3, [r3, #0]
    34a8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    34aa:	68fb      	ldr	r3, [r7, #12]
    34ac:	7e1b      	ldrb	r3, [r3, #24]
    34ae:	b2db      	uxtb	r3, r3
    34b0:	001a      	movs	r2, r3
    34b2:	2301      	movs	r3, #1
    34b4:	4013      	ands	r3, r2
    34b6:	1e5a      	subs	r2, r3, #1
    34b8:	4193      	sbcs	r3, r2
    34ba:	b2db      	uxtb	r3, r3
}
    34bc:	0018      	movs	r0, r3
    34be:	46bd      	mov	sp, r7
    34c0:	b004      	add	sp, #16
    34c2:	bd80      	pop	{r7, pc}

000034c4 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    34c4:	b580      	push	{r7, lr}
    34c6:	b084      	sub	sp, #16
    34c8:	af00      	add	r7, sp, #0
    34ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    34cc:	687b      	ldr	r3, [r7, #4]
    34ce:	681b      	ldr	r3, [r3, #0]
    34d0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    34d2:	68fb      	ldr	r3, [r7, #12]
    34d4:	7e1b      	ldrb	r3, [r3, #24]
    34d6:	b2db      	uxtb	r3, r3
    34d8:	001a      	movs	r2, r3
    34da:	2304      	movs	r3, #4
    34dc:	4013      	ands	r3, r2
    34de:	1e5a      	subs	r2, r3, #1
    34e0:	4193      	sbcs	r3, r2
    34e2:	b2db      	uxtb	r3, r3
}
    34e4:	0018      	movs	r0, r3
    34e6:	46bd      	mov	sp, r7
    34e8:	b004      	add	sp, #16
    34ea:	bd80      	pop	{r7, pc}

000034ec <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    34ec:	b580      	push	{r7, lr}
    34ee:	b084      	sub	sp, #16
    34f0:	af00      	add	r7, sp, #0
    34f2:	6078      	str	r0, [r7, #4]
    34f4:	000a      	movs	r2, r1
    34f6:	1cbb      	adds	r3, r7, #2
    34f8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    34fa:	687b      	ldr	r3, [r7, #4]
    34fc:	681b      	ldr	r3, [r3, #0]
    34fe:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3500:	687b      	ldr	r3, [r7, #4]
    3502:	0018      	movs	r0, r3
    3504:	4b0a      	ldr	r3, [pc, #40]	; (3530 <spi_write+0x44>)
    3506:	4798      	blx	r3
    3508:	0003      	movs	r3, r0
    350a:	001a      	movs	r2, r3
    350c:	2301      	movs	r3, #1
    350e:	4053      	eors	r3, r2
    3510:	b2db      	uxtb	r3, r3
    3512:	2b00      	cmp	r3, #0
    3514:	d001      	beq.n	351a <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    3516:	2305      	movs	r3, #5
    3518:	e006      	b.n	3528 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    351a:	1cbb      	adds	r3, r7, #2
    351c:	881b      	ldrh	r3, [r3, #0]
    351e:	05db      	lsls	r3, r3, #23
    3520:	0dda      	lsrs	r2, r3, #23
    3522:	68fb      	ldr	r3, [r7, #12]
    3524:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    3526:	2300      	movs	r3, #0
}
    3528:	0018      	movs	r0, r3
    352a:	46bd      	mov	sp, r7
    352c:	b004      	add	sp, #16
    352e:	bd80      	pop	{r7, pc}
    3530:	0000349d 	.word	0x0000349d

00003534 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    3534:	b580      	push	{r7, lr}
    3536:	b084      	sub	sp, #16
    3538:	af00      	add	r7, sp, #0
    353a:	6078      	str	r0, [r7, #4]
    353c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    353e:	687b      	ldr	r3, [r7, #4]
    3540:	681b      	ldr	r3, [r3, #0]
    3542:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3544:	687b      	ldr	r3, [r7, #4]
    3546:	0018      	movs	r0, r3
    3548:	4b1d      	ldr	r3, [pc, #116]	; (35c0 <spi_read+0x8c>)
    354a:	4798      	blx	r3
    354c:	0003      	movs	r3, r0
    354e:	001a      	movs	r2, r3
    3550:	2301      	movs	r3, #1
    3552:	4053      	eors	r3, r2
    3554:	b2db      	uxtb	r3, r3
    3556:	2b00      	cmp	r3, #0
    3558:	d001      	beq.n	355e <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    355a:	2310      	movs	r3, #16
    355c:	e02c      	b.n	35b8 <spi_read+0x84>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    355e:	230f      	movs	r3, #15
    3560:	18fb      	adds	r3, r7, r3
    3562:	2200      	movs	r2, #0
    3564:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3566:	68bb      	ldr	r3, [r7, #8]
    3568:	8b5b      	ldrh	r3, [r3, #26]
    356a:	b29b      	uxth	r3, r3
    356c:	001a      	movs	r2, r3
    356e:	2304      	movs	r3, #4
    3570:	4013      	ands	r3, r2
    3572:	d00b      	beq.n	358c <spi_read+0x58>
		retval = STATUS_ERR_OVERFLOW;
    3574:	230f      	movs	r3, #15
    3576:	18fb      	adds	r3, r7, r3
    3578:	221e      	movs	r2, #30
    357a:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    357c:	68bb      	ldr	r3, [r7, #8]
    357e:	8b5b      	ldrh	r3, [r3, #26]
    3580:	b29b      	uxth	r3, r3
    3582:	2204      	movs	r2, #4
    3584:	4313      	orrs	r3, r2
    3586:	b29a      	uxth	r2, r3
    3588:	68bb      	ldr	r3, [r7, #8]
    358a:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    358c:	687b      	ldr	r3, [r7, #4]
    358e:	799b      	ldrb	r3, [r3, #6]
    3590:	2b01      	cmp	r3, #1
    3592:	d108      	bne.n	35a6 <spi_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3594:	68bb      	ldr	r3, [r7, #8]
    3596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3598:	b29b      	uxth	r3, r3
    359a:	05db      	lsls	r3, r3, #23
    359c:	0ddb      	lsrs	r3, r3, #23
    359e:	b29a      	uxth	r2, r3
    35a0:	683b      	ldr	r3, [r7, #0]
    35a2:	801a      	strh	r2, [r3, #0]
    35a4:	e005      	b.n	35b2 <spi_read+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    35a6:	68bb      	ldr	r3, [r7, #8]
    35a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    35aa:	b2db      	uxtb	r3, r3
    35ac:	b29a      	uxth	r2, r3
    35ae:	683b      	ldr	r3, [r7, #0]
    35b0:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    35b2:	230f      	movs	r3, #15
    35b4:	18fb      	adds	r3, r7, r3
    35b6:	781b      	ldrb	r3, [r3, #0]
}
    35b8:	0018      	movs	r0, r3
    35ba:	46bd      	mov	sp, r7
    35bc:	b004      	add	sp, #16
    35be:	bd80      	pop	{r7, pc}
    35c0:	000034c5 	.word	0x000034c5

000035c4 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    35c4:	b590      	push	{r4, r7, lr}
    35c6:	b093      	sub	sp, #76	; 0x4c
    35c8:	af00      	add	r7, sp, #0
    35ca:	6078      	str	r0, [r7, #4]
    35cc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    35ce:	687b      	ldr	r3, [r7, #4]
    35d0:	681b      	ldr	r3, [r3, #0]
    35d2:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    35d4:	687b      	ldr	r3, [r7, #4]
    35d6:	681b      	ldr	r3, [r3, #0]
    35d8:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    35da:	231c      	movs	r3, #28
    35dc:	18fb      	adds	r3, r7, r3
    35de:	0018      	movs	r0, r3
    35e0:	4b6f      	ldr	r3, [pc, #444]	; (37a0 <_spi_set_config+0x1dc>)
    35e2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    35e4:	231c      	movs	r3, #28
    35e6:	18fb      	adds	r3, r7, r3
    35e8:	2200      	movs	r2, #0
    35ea:	705a      	strb	r2, [r3, #1]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    35ec:	683b      	ldr	r3, [r7, #0]
    35ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
    35f0:	230c      	movs	r3, #12
    35f2:	18fb      	adds	r3, r7, r3
    35f4:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    35f6:	683b      	ldr	r3, [r7, #0]
    35f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
    35fa:	230c      	movs	r3, #12
    35fc:	18fb      	adds	r3, r7, r3
    35fe:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    3600:	683b      	ldr	r3, [r7, #0]
    3602:	6b1a      	ldr	r2, [r3, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
    3604:	230c      	movs	r3, #12
    3606:	18fb      	adds	r3, r7, r3
    3608:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    360a:	683b      	ldr	r3, [r7, #0]
    360c:	6b5a      	ldr	r2, [r3, #52]	; 0x34

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
    360e:	230c      	movs	r3, #12
    3610:	18fb      	adds	r3, r7, r3
    3612:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    3614:	2347      	movs	r3, #71	; 0x47
    3616:	18fb      	adds	r3, r7, r3
    3618:	2200      	movs	r2, #0
    361a:	701a      	strb	r2, [r3, #0]
    361c:	e02c      	b.n	3678 <_spi_set_config+0xb4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    361e:	2347      	movs	r3, #71	; 0x47
    3620:	18fb      	adds	r3, r7, r3
    3622:	781a      	ldrb	r2, [r3, #0]
    3624:	230c      	movs	r3, #12
    3626:	18fb      	adds	r3, r7, r3
    3628:	0092      	lsls	r2, r2, #2
    362a:	58d3      	ldr	r3, [r2, r3]
    362c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    362e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3630:	2b00      	cmp	r3, #0
    3632:	d109      	bne.n	3648 <_spi_set_config+0x84>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3634:	2347      	movs	r3, #71	; 0x47
    3636:	18fb      	adds	r3, r7, r3
    3638:	781a      	ldrb	r2, [r3, #0]
    363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    363c:	0011      	movs	r1, r2
    363e:	0018      	movs	r0, r3
    3640:	4b58      	ldr	r3, [pc, #352]	; (37a4 <_spi_set_config+0x1e0>)
    3642:	4798      	blx	r3
    3644:	0003      	movs	r3, r0
    3646:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    3648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    364a:	3301      	adds	r3, #1
    364c:	d00d      	beq.n	366a <_spi_set_config+0xa6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    364e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3650:	b2da      	uxtb	r2, r3
    3652:	231c      	movs	r3, #28
    3654:	18fb      	adds	r3, r7, r3
    3656:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    365a:	0c1b      	lsrs	r3, r3, #16
    365c:	b2db      	uxtb	r3, r3
    365e:	221c      	movs	r2, #28
    3660:	18ba      	adds	r2, r7, r2
    3662:	0011      	movs	r1, r2
    3664:	0018      	movs	r0, r3
    3666:	4b50      	ldr	r3, [pc, #320]	; (37a8 <_spi_set_config+0x1e4>)
    3668:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    366a:	2347      	movs	r3, #71	; 0x47
    366c:	18fb      	adds	r3, r7, r3
    366e:	781a      	ldrb	r2, [r3, #0]
    3670:	2347      	movs	r3, #71	; 0x47
    3672:	18fb      	adds	r3, r7, r3
    3674:	3201      	adds	r2, #1
    3676:	701a      	strb	r2, [r3, #0]
    3678:	2347      	movs	r3, #71	; 0x47
    367a:	18fb      	adds	r3, r7, r3
    367c:	781b      	ldrb	r3, [r3, #0]
    367e:	2b03      	cmp	r3, #3
    3680:	d9cd      	bls.n	361e <_spi_set_config+0x5a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    3682:	683b      	ldr	r3, [r7, #0]
    3684:	781a      	ldrb	r2, [r3, #0]
    3686:	687b      	ldr	r3, [r7, #4]
    3688:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    368a:	683b      	ldr	r3, [r7, #0]
    368c:	7c1a      	ldrb	r2, [r3, #16]
    368e:	687b      	ldr	r3, [r7, #4]
    3690:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    3692:	683b      	ldr	r3, [r7, #0]
    3694:	7c9a      	ldrb	r2, [r3, #18]
    3696:	687b      	ldr	r3, [r7, #4]
    3698:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    369a:	683b      	ldr	r3, [r7, #0]
    369c:	7d1a      	ldrb	r2, [r3, #20]
    369e:	687b      	ldr	r3, [r7, #4]
    36a0:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    36a2:	230a      	movs	r3, #10
    36a4:	18fb      	adds	r3, r7, r3
    36a6:	2200      	movs	r2, #0
    36a8:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    36aa:	2300      	movs	r3, #0
    36ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    36ae:	2300      	movs	r3, #0
    36b0:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    36b2:	683b      	ldr	r3, [r7, #0]
    36b4:	781b      	ldrb	r3, [r3, #0]
    36b6:	2b01      	cmp	r3, #1
    36b8:	d129      	bne.n	370e <_spi_set_config+0x14a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    36ba:	687b      	ldr	r3, [r7, #4]
    36bc:	681b      	ldr	r3, [r3, #0]
    36be:	0018      	movs	r0, r3
    36c0:	4b3a      	ldr	r3, [pc, #232]	; (37ac <_spi_set_config+0x1e8>)
    36c2:	4798      	blx	r3
    36c4:	0003      	movs	r3, r0
    36c6:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    36c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    36ca:	3314      	adds	r3, #20
    36cc:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    36ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    36d0:	b2db      	uxtb	r3, r3
    36d2:	0018      	movs	r0, r3
    36d4:	4b36      	ldr	r3, [pc, #216]	; (37b0 <_spi_set_config+0x1ec>)
    36d6:	4798      	blx	r3
    36d8:	0003      	movs	r3, r0
    36da:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    36dc:	683b      	ldr	r3, [r7, #0]
    36de:	699b      	ldr	r3, [r3, #24]
    36e0:	2223      	movs	r2, #35	; 0x23
    36e2:	18bc      	adds	r4, r7, r2
    36e4:	220a      	movs	r2, #10
    36e6:	18ba      	adds	r2, r7, r2
    36e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    36ea:	0018      	movs	r0, r3
    36ec:	4b31      	ldr	r3, [pc, #196]	; (37b4 <_spi_set_config+0x1f0>)
    36ee:	4798      	blx	r3
    36f0:	0003      	movs	r3, r0
    36f2:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    36f4:	2323      	movs	r3, #35	; 0x23
    36f6:	18fb      	adds	r3, r7, r3
    36f8:	781b      	ldrb	r3, [r3, #0]
    36fa:	2b00      	cmp	r3, #0
    36fc:	d001      	beq.n	3702 <_spi_set_config+0x13e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    36fe:	2317      	movs	r3, #23
    3700:	e04a      	b.n	3798 <_spi_set_config+0x1d4>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    3702:	230a      	movs	r3, #10
    3704:	18fb      	adds	r3, r7, r3
    3706:	881b      	ldrh	r3, [r3, #0]
    3708:	b2da      	uxtb	r2, r3
    370a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    370c:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    370e:	683b      	ldr	r3, [r7, #0]
    3710:	685b      	ldr	r3, [r3, #4]
    3712:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3714:	4313      	orrs	r3, r2
    3716:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    3718:	683b      	ldr	r3, [r7, #0]
    371a:	689b      	ldr	r3, [r3, #8]
    371c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    371e:	4313      	orrs	r3, r2
    3720:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set mux setting */
	ctrla |= config->mux_setting;
    3722:	683b      	ldr	r3, [r7, #0]
    3724:	68db      	ldr	r3, [r3, #12]
    3726:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3728:	4313      	orrs	r3, r2
    372a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    372c:	683b      	ldr	r3, [r7, #0]
    372e:	7c1b      	ldrb	r3, [r3, #16]
    3730:	001a      	movs	r2, r3
    3732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3734:	4313      	orrs	r3, r2
    3736:	63bb      	str	r3, [r7, #56]	; 0x38

	if (config->run_in_standby) {
    3738:	683b      	ldr	r3, [r7, #0]
    373a:	7c5b      	ldrb	r3, [r3, #17]
    373c:	2b00      	cmp	r3, #0
    373e:	d003      	beq.n	3748 <_spi_set_config+0x184>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    3740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3742:	2280      	movs	r2, #128	; 0x80
    3744:	4313      	orrs	r3, r2
    3746:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    3748:	683b      	ldr	r3, [r7, #0]
    374a:	7c9b      	ldrb	r3, [r3, #18]
    374c:	2b00      	cmp	r3, #0
    374e:	d004      	beq.n	375a <_spi_set_config+0x196>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    3750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3752:	2280      	movs	r2, #128	; 0x80
    3754:	0292      	lsls	r2, r2, #10
    3756:	4313      	orrs	r3, r2
    3758:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    375a:	683b      	ldr	r3, [r7, #0]
    375c:	7cdb      	ldrb	r3, [r3, #19]
    375e:	2b00      	cmp	r3, #0
    3760:	d004      	beq.n	376c <_spi_set_config+0x1a8>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    3762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3764:	2280      	movs	r2, #128	; 0x80
    3766:	0092      	lsls	r2, r2, #2
    3768:	4313      	orrs	r3, r2
    376a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    376c:	683b      	ldr	r3, [r7, #0]
    376e:	7d1b      	ldrb	r3, [r3, #20]
    3770:	2b00      	cmp	r3, #0
    3772:	d004      	beq.n	377e <_spi_set_config+0x1ba>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    3774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3776:	2280      	movs	r2, #128	; 0x80
    3778:	0192      	lsls	r2, r2, #6
    377a:	4313      	orrs	r3, r2
    377c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    377e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3780:	681a      	ldr	r2, [r3, #0]
    3782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3784:	431a      	orrs	r2, r3
    3786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3788:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    378a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    378c:	685a      	ldr	r2, [r3, #4]
    378e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3790:	431a      	orrs	r2, r3
    3792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3794:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    3796:	2300      	movs	r3, #0
}
    3798:	0018      	movs	r0, r3
    379a:	46bd      	mov	sp, r7
    379c:	b013      	add	sp, #76	; 0x4c
    379e:	bd90      	pop	{r4, r7, pc}
    37a0:	000032ad 	.word	0x000032ad
    37a4:	00004cb5 	.word	0x00004cb5
    37a8:	00006219 	.word	0x00006219
    37ac:	00004e85 	.word	0x00004e85
    37b0:	00006059 	.word	0x00006059
    37b4:	000049e9 	.word	0x000049e9

000037b8 <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    37b8:	b590      	push	{r4, r7, lr}
    37ba:	b091      	sub	sp, #68	; 0x44
    37bc:	af00      	add	r7, sp, #0
    37be:	6078      	str	r0, [r7, #4]
    37c0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    37c2:	687b      	ldr	r3, [r7, #4]
    37c4:	681b      	ldr	r3, [r3, #0]
    37c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
    37c8:	687b      	ldr	r3, [r7, #4]
    37ca:	681b      	ldr	r3, [r3, #0]
    37cc:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
    37ce:	683b      	ldr	r3, [r7, #0]
    37d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    37d2:	2310      	movs	r3, #16
    37d4:	18fb      	adds	r3, r7, r3
    37d6:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
    37d8:	683b      	ldr	r3, [r7, #0]
    37da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    37dc:	2310      	movs	r3, #16
    37de:	18fb      	adds	r3, r7, r3
    37e0:	605a      	str	r2, [r3, #4]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
    37e2:	683b      	ldr	r3, [r7, #0]
    37e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    37e6:	2310      	movs	r3, #16
    37e8:	18fb      	adds	r3, r7, r3
    37ea:	609a      	str	r2, [r3, #8]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
    37ec:	683b      	ldr	r3, [r7, #0]
    37ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    37f0:	2310      	movs	r3, #16
    37f2:	18fb      	adds	r3, r7, r3
    37f4:	60da      	str	r2, [r3, #12]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    37f6:	233f      	movs	r3, #63	; 0x3f
    37f8:	18fb      	adds	r3, r7, r3
    37fa:	2200      	movs	r2, #0
    37fc:	701a      	strb	r2, [r3, #0]
    37fe:	e030      	b.n	3862 <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3800:	233f      	movs	r3, #63	; 0x3f
    3802:	18fb      	adds	r3, r7, r3
    3804:	781a      	ldrb	r2, [r3, #0]
    3806:	2310      	movs	r3, #16
    3808:	18fb      	adds	r3, r7, r3
    380a:	0092      	lsls	r2, r2, #2
    380c:	58d3      	ldr	r3, [r2, r3]
    380e:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
    3810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3812:	2b00      	cmp	r3, #0
    3814:	d109      	bne.n	382a <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3816:	233f      	movs	r3, #63	; 0x3f
    3818:	18fb      	adds	r3, r7, r3
    381a:	781a      	ldrb	r2, [r3, #0]
    381c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    381e:	0011      	movs	r1, r2
    3820:	0018      	movs	r0, r3
    3822:	4b56      	ldr	r3, [pc, #344]	; (397c <_spi_check_config+0x1c4>)
    3824:	4798      	blx	r3
    3826:	0003      	movs	r3, r0
    3828:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
    382a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    382c:	3301      	adds	r3, #1
    382e:	d010      	beq.n	3852 <_spi_check_config+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    3830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3832:	041b      	lsls	r3, r3, #16
    3834:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    3836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3838:	0c1b      	lsrs	r3, r3, #16
    383a:	b2db      	uxtb	r3, r3
    383c:	0018      	movs	r0, r3
    383e:	4b50      	ldr	r3, [pc, #320]	; (3980 <_spi_check_config+0x1c8>)
    3840:	4798      	blx	r3
    3842:	0003      	movs	r3, r0

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    3844:	429c      	cmp	r4, r3
    3846:	d005      	beq.n	3854 <_spi_check_config+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
    3848:	687b      	ldr	r3, [r7, #4]
    384a:	2200      	movs	r2, #0
    384c:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
    384e:	231c      	movs	r3, #28
    3850:	e08f      	b.n	3972 <_spi_check_config+0x1ba>
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
    3852:	46c0      	nop			; (mov r8, r8)
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    3854:	233f      	movs	r3, #63	; 0x3f
    3856:	18fb      	adds	r3, r7, r3
    3858:	781a      	ldrb	r2, [r3, #0]
    385a:	233f      	movs	r3, #63	; 0x3f
    385c:	18fb      	adds	r3, r7, r3
    385e:	3201      	adds	r2, #1
    3860:	701a      	strb	r2, [r3, #0]
    3862:	233f      	movs	r3, #63	; 0x3f
    3864:	18fb      	adds	r3, r7, r3
    3866:	781b      	ldrb	r3, [r3, #0]
    3868:	2b03      	cmp	r3, #3
    386a:	d9c9      	bls.n	3800 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    386c:	2013      	movs	r0, #19
    386e:	4b45      	ldr	r3, [pc, #276]	; (3984 <_spi_check_config+0x1cc>)
    3870:	4798      	blx	r3
    3872:	0003      	movs	r3, r0
    3874:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    3876:	2300      	movs	r3, #0
    3878:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
    387a:	2300      	movs	r3, #0
    387c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    387e:	683b      	ldr	r3, [r7, #0]
    3880:	781b      	ldrb	r3, [r3, #0]
    3882:	2b01      	cmp	r3, #1
    3884:	d121      	bne.n	38ca <_spi_check_config+0x112>
		enum status_code error_code = _sercom_get_sync_baud_val(
    3886:	683b      	ldr	r3, [r7, #0]
    3888:	699b      	ldr	r3, [r3, #24]
    388a:	2223      	movs	r2, #35	; 0x23
    388c:	18bc      	adds	r4, r7, r2
    388e:	220e      	movs	r2, #14
    3890:	18ba      	adds	r2, r7, r2
    3892:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3894:	0018      	movs	r0, r3
    3896:	4b3c      	ldr	r3, [pc, #240]	; (3988 <_spi_check_config+0x1d0>)
    3898:	4798      	blx	r3
    389a:	0003      	movs	r3, r0
    389c:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    389e:	2323      	movs	r3, #35	; 0x23
    38a0:	18fb      	adds	r3, r7, r3
    38a2:	781b      	ldrb	r3, [r3, #0]
    38a4:	2b00      	cmp	r3, #0
    38a6:	d001      	beq.n	38ac <_spi_check_config+0xf4>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    38a8:	2317      	movs	r3, #23
    38aa:	e062      	b.n	3972 <_spi_check_config+0x1ba>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    38ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38ae:	7b1b      	ldrb	r3, [r3, #12]
    38b0:	b2da      	uxtb	r2, r3
    38b2:	230e      	movs	r3, #14
    38b4:	18fb      	adds	r3, r7, r3
    38b6:	881b      	ldrh	r3, [r3, #0]
    38b8:	b2db      	uxtb	r3, r3
    38ba:	429a      	cmp	r2, r3
    38bc:	d001      	beq.n	38c2 <_spi_check_config+0x10a>
			return STATUS_ERR_DENIED;
    38be:	231c      	movs	r3, #28
    38c0:	e057      	b.n	3972 <_spi_check_config+0x1ba>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
    38c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38c4:	220c      	movs	r2, #12
    38c6:	4313      	orrs	r3, r2
    38c8:	637b      	str	r3, [r7, #52]	; 0x34
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE_SPI_SLAVE;
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
    38ca:	683b      	ldr	r3, [r7, #0]
    38cc:	685b      	ldr	r3, [r3, #4]
    38ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    38d0:	4313      	orrs	r3, r2
    38d2:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    38d4:	683b      	ldr	r3, [r7, #0]
    38d6:	689b      	ldr	r3, [r3, #8]
    38d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    38da:	4313      	orrs	r3, r2
    38dc:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set mux setting */
	ctrla |= config->mux_setting;
    38de:	683b      	ldr	r3, [r7, #0]
    38e0:	68db      	ldr	r3, [r3, #12]
    38e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    38e4:	4313      	orrs	r3, r2
    38e6:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
    38e8:	683b      	ldr	r3, [r7, #0]
    38ea:	7c1b      	ldrb	r3, [r3, #16]
    38ec:	001a      	movs	r2, r3
    38ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    38f0:	4313      	orrs	r3, r2
    38f2:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
    38f4:	683b      	ldr	r3, [r7, #0]
    38f6:	7c5b      	ldrb	r3, [r3, #17]
    38f8:	2b00      	cmp	r3, #0
    38fa:	d003      	beq.n	3904 <_spi_check_config+0x14c>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    38fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38fe:	2280      	movs	r2, #128	; 0x80
    3900:	4313      	orrs	r3, r2
    3902:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
    3904:	683b      	ldr	r3, [r7, #0]
    3906:	7c9b      	ldrb	r3, [r3, #18]
    3908:	2b00      	cmp	r3, #0
    390a:	d004      	beq.n	3916 <_spi_check_config+0x15e>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    390e:	2280      	movs	r2, #128	; 0x80
    3910:	0292      	lsls	r2, r2, #10
    3912:	4313      	orrs	r3, r2
    3914:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    3916:	683b      	ldr	r3, [r7, #0]
    3918:	7cdb      	ldrb	r3, [r3, #19]
    391a:	2b00      	cmp	r3, #0
    391c:	d004      	beq.n	3928 <_spi_check_config+0x170>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3920:	2280      	movs	r2, #128	; 0x80
    3922:	0092      	lsls	r2, r2, #2
    3924:	4313      	orrs	r3, r2
    3926:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    3928:	683b      	ldr	r3, [r7, #0]
    392a:	7d1b      	ldrb	r3, [r3, #20]
    392c:	2b00      	cmp	r3, #0
    392e:	d004      	beq.n	393a <_spi_check_config+0x182>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    3930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3932:	2280      	movs	r2, #128	; 0x80
    3934:	0192      	lsls	r2, r2, #6
    3936:	4313      	orrs	r3, r2
    3938:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    393a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    393c:	2202      	movs	r2, #2
    393e:	4313      	orrs	r3, r2
    3940:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    3942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3944:	681a      	ldr	r2, [r3, #0]
    3946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3948:	429a      	cmp	r2, r3
    394a:	d10e      	bne.n	396a <_spi_check_config+0x1b2>
			spi_module->CTRLB.reg == ctrlb) {
    394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    394e:	685a      	ldr	r2, [r3, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    3950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3952:	429a      	cmp	r2, r3
    3954:	d109      	bne.n	396a <_spi_check_config+0x1b2>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    3956:	683b      	ldr	r3, [r7, #0]
    3958:	781a      	ldrb	r2, [r3, #0]
    395a:	687b      	ldr	r3, [r7, #4]
    395c:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
    395e:	683b      	ldr	r3, [r7, #0]
    3960:	7c1a      	ldrb	r2, [r3, #16]
    3962:	687b      	ldr	r3, [r7, #4]
    3964:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
    3966:	2300      	movs	r3, #0
    3968:	e003      	b.n	3972 <_spi_check_config+0x1ba>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    396a:	687b      	ldr	r3, [r7, #4]
    396c:	2200      	movs	r2, #0
    396e:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
    3970:	231c      	movs	r3, #28
}
    3972:	0018      	movs	r0, r3
    3974:	46bd      	mov	sp, r7
    3976:	b011      	add	sp, #68	; 0x44
    3978:	bd90      	pop	{r4, r7, pc}
    397a:	46c0      	nop			; (mov r8, r8)
    397c:	00004cb5 	.word	0x00004cb5
    3980:	00003335 	.word	0x00003335
    3984:	00006059 	.word	0x00006059
    3988:	000049e9 	.word	0x000049e9

0000398c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    398c:	b580      	push	{r7, lr}
    398e:	b08a      	sub	sp, #40	; 0x28
    3990:	af00      	add	r7, sp, #0
    3992:	60f8      	str	r0, [r7, #12]
    3994:	60b9      	str	r1, [r7, #8]
    3996:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3998:	68fb      	ldr	r3, [r7, #12]
    399a:	68ba      	ldr	r2, [r7, #8]
    399c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    399e:	68fb      	ldr	r3, [r7, #12]
    39a0:	681b      	ldr	r3, [r3, #0]
    39a2:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    39a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    39a6:	681b      	ldr	r3, [r3, #0]
    39a8:	2202      	movs	r2, #2
    39aa:	4013      	ands	r3, r2
    39ac:	d007      	beq.n	39be <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
    39ae:	687a      	ldr	r2, [r7, #4]
    39b0:	68fb      	ldr	r3, [r7, #12]
    39b2:	0011      	movs	r1, r2
    39b4:	0018      	movs	r0, r3
    39b6:	4b2a      	ldr	r3, [pc, #168]	; (3a60 <spi_init+0xd4>)
    39b8:	4798      	blx	r3
    39ba:	0003      	movs	r3, r0
    39bc:	e04b      	b.n	3a56 <spi_init+0xca>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    39be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    39c0:	681b      	ldr	r3, [r3, #0]
    39c2:	2201      	movs	r2, #1
    39c4:	4013      	ands	r3, r2
    39c6:	d001      	beq.n	39cc <spi_init+0x40>
		return STATUS_BUSY;
    39c8:	2305      	movs	r3, #5
    39ca:	e044      	b.n	3a56 <spi_init+0xca>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    39cc:	68fb      	ldr	r3, [r7, #12]
    39ce:	681b      	ldr	r3, [r3, #0]
    39d0:	0018      	movs	r0, r3
    39d2:	4b24      	ldr	r3, [pc, #144]	; (3a64 <spi_init+0xd8>)
    39d4:	4798      	blx	r3
    39d6:	0003      	movs	r3, r0
    39d8:	623b      	str	r3, [r7, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    39da:	6a3b      	ldr	r3, [r7, #32]
    39dc:	3302      	adds	r3, #2
    39de:	61fb      	str	r3, [r7, #28]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    39e0:	6a3b      	ldr	r3, [r7, #32]
    39e2:	3314      	adds	r3, #20
    39e4:	61bb      	str	r3, [r7, #24]

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    39e6:	2201      	movs	r2, #1
    39e8:	69fb      	ldr	r3, [r7, #28]
    39ea:	409a      	lsls	r2, r3
    39ec:	0013      	movs	r3, r2
    39ee:	0019      	movs	r1, r3
    39f0:	2002      	movs	r0, #2
    39f2:	4b1d      	ldr	r3, [pc, #116]	; (3a68 <spi_init+0xdc>)
    39f4:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    39f6:	2314      	movs	r3, #20
    39f8:	18fb      	adds	r3, r7, r3
    39fa:	0018      	movs	r0, r3
    39fc:	4b1b      	ldr	r3, [pc, #108]	; (3a6c <spi_init+0xe0>)
    39fe:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    3a00:	687b      	ldr	r3, [r7, #4]
    3a02:	2224      	movs	r2, #36	; 0x24
    3a04:	5c9a      	ldrb	r2, [r3, r2]
    3a06:	2314      	movs	r3, #20
    3a08:	18fb      	adds	r3, r7, r3
    3a0a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3a0c:	69bb      	ldr	r3, [r7, #24]
    3a0e:	b2db      	uxtb	r3, r3
    3a10:	2214      	movs	r2, #20
    3a12:	18ba      	adds	r2, r7, r2
    3a14:	0011      	movs	r1, r2
    3a16:	0018      	movs	r0, r3
    3a18:	4b15      	ldr	r3, [pc, #84]	; (3a70 <spi_init+0xe4>)
    3a1a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3a1c:	69bb      	ldr	r3, [r7, #24]
    3a1e:	b2db      	uxtb	r3, r3
    3a20:	0018      	movs	r0, r3
    3a22:	4b14      	ldr	r3, [pc, #80]	; (3a74 <spi_init+0xe8>)
    3a24:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3a26:	687b      	ldr	r3, [r7, #4]
    3a28:	2224      	movs	r2, #36	; 0x24
    3a2a:	5c9b      	ldrb	r3, [r3, r2]
    3a2c:	2100      	movs	r1, #0
    3a2e:	0018      	movs	r0, r3
    3a30:	4b11      	ldr	r3, [pc, #68]	; (3a78 <spi_init+0xec>)
    3a32:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    3a34:	687b      	ldr	r3, [r7, #4]
    3a36:	781b      	ldrb	r3, [r3, #0]
    3a38:	2b01      	cmp	r3, #1
    3a3a:	d105      	bne.n	3a48 <spi_init+0xbc>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
    3a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a3e:	681b      	ldr	r3, [r3, #0]
    3a40:	220c      	movs	r2, #12
    3a42:	431a      	orrs	r2, r3
    3a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a46:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    3a48:	687a      	ldr	r2, [r7, #4]
    3a4a:	68fb      	ldr	r3, [r7, #12]
    3a4c:	0011      	movs	r1, r2
    3a4e:	0018      	movs	r0, r3
    3a50:	4b0a      	ldr	r3, [pc, #40]	; (3a7c <spi_init+0xf0>)
    3a52:	4798      	blx	r3
    3a54:	0003      	movs	r3, r0
}
    3a56:	0018      	movs	r0, r3
    3a58:	46bd      	mov	sp, r7
    3a5a:	b00a      	add	sp, #40	; 0x28
    3a5c:	bd80      	pop	{r7, pc}
    3a5e:	46c0      	nop			; (mov r8, r8)
    3a60:	000037b9 	.word	0x000037b9
    3a64:	00004e85 	.word	0x00004e85
    3a68:	00003441 	.word	0x00003441
    3a6c:	00003429 	.word	0x00003429
    3a70:	00005f35 	.word	0x00005f35
    3a74:	00005f79 	.word	0x00005f79
    3a78:	00004c29 	.word	0x00004c29
    3a7c:	000035c5 	.word	0x000035c5

00003a80 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    3a80:	b580      	push	{r7, lr}
    3a82:	b086      	sub	sp, #24
    3a84:	af00      	add	r7, sp, #0
    3a86:	60f8      	str	r0, [r7, #12]
    3a88:	60b9      	str	r1, [r7, #8]
    3a8a:	1dfb      	adds	r3, r7, #7
    3a8c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    3a8e:	68fb      	ldr	r3, [r7, #12]
    3a90:	795b      	ldrb	r3, [r3, #5]
    3a92:	2b01      	cmp	r3, #1
    3a94:	d001      	beq.n	3a9a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    3a96:	2315      	movs	r3, #21
    3a98:	e05c      	b.n	3b54 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    3a9a:	68fb      	ldr	r3, [r7, #12]
    3a9c:	7a1b      	ldrb	r3, [r3, #8]
    3a9e:	2201      	movs	r2, #1
    3aa0:	4053      	eors	r3, r2
    3aa2:	b2db      	uxtb	r3, r3
    3aa4:	2b00      	cmp	r3, #0
    3aa6:	d054      	beq.n	3b52 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    3aa8:	1dfb      	adds	r3, r7, #7
    3aaa:	781b      	ldrb	r3, [r3, #0]
    3aac:	2b00      	cmp	r3, #0
    3aae:	d04a      	beq.n	3b46 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    3ab0:	68bb      	ldr	r3, [r7, #8]
    3ab2:	785b      	ldrb	r3, [r3, #1]
    3ab4:	2b00      	cmp	r3, #0
    3ab6:	d03f      	beq.n	3b38 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    3ab8:	68fb      	ldr	r3, [r7, #12]
    3aba:	0018      	movs	r0, r3
    3abc:	4b27      	ldr	r3, [pc, #156]	; (3b5c <spi_select_slave+0xdc>)
    3abe:	4798      	blx	r3
    3ac0:	0003      	movs	r3, r0
    3ac2:	001a      	movs	r2, r3
    3ac4:	2301      	movs	r3, #1
    3ac6:	4053      	eors	r3, r2
    3ac8:	b2db      	uxtb	r3, r3
    3aca:	2b00      	cmp	r3, #0
    3acc:	d007      	beq.n	3ade <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    3ace:	68bb      	ldr	r3, [r7, #8]
    3ad0:	781b      	ldrb	r3, [r3, #0]
    3ad2:	2101      	movs	r1, #1
    3ad4:	0018      	movs	r0, r3
    3ad6:	4b22      	ldr	r3, [pc, #136]	; (3b60 <spi_select_slave+0xe0>)
    3ad8:	4798      	blx	r3
					return STATUS_BUSY;
    3ada:	2305      	movs	r3, #5
    3adc:	e03a      	b.n	3b54 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    3ade:	68bb      	ldr	r3, [r7, #8]
    3ae0:	781b      	ldrb	r3, [r3, #0]
    3ae2:	2100      	movs	r1, #0
    3ae4:	0018      	movs	r0, r3
    3ae6:	4b1e      	ldr	r3, [pc, #120]	; (3b60 <spi_select_slave+0xe0>)
    3ae8:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    3aea:	68bb      	ldr	r3, [r7, #8]
    3aec:	789b      	ldrb	r3, [r3, #2]
    3aee:	b29a      	uxth	r2, r3
    3af0:	68fb      	ldr	r3, [r7, #12]
    3af2:	0011      	movs	r1, r2
    3af4:	0018      	movs	r0, r3
    3af6:	4b1b      	ldr	r3, [pc, #108]	; (3b64 <spi_select_slave+0xe4>)
    3af8:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    3afa:	68fb      	ldr	r3, [r7, #12]
    3afc:	79db      	ldrb	r3, [r3, #7]
    3afe:	2201      	movs	r2, #1
    3b00:	4053      	eors	r3, r2
    3b02:	b2db      	uxtb	r3, r3
    3b04:	2b00      	cmp	r3, #0
    3b06:	d024      	beq.n	3b52 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    3b08:	46c0      	nop			; (mov r8, r8)
    3b0a:	68fb      	ldr	r3, [r7, #12]
    3b0c:	0018      	movs	r0, r3
    3b0e:	4b16      	ldr	r3, [pc, #88]	; (3b68 <spi_select_slave+0xe8>)
    3b10:	4798      	blx	r3
    3b12:	0003      	movs	r3, r0
    3b14:	001a      	movs	r2, r3
    3b16:	2301      	movs	r3, #1
    3b18:	4053      	eors	r3, r2
    3b1a:	b2db      	uxtb	r3, r3
    3b1c:	2b00      	cmp	r3, #0
    3b1e:	d1f4      	bne.n	3b0a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    3b20:	2316      	movs	r3, #22
    3b22:	18fb      	adds	r3, r7, r3
    3b24:	2200      	movs	r2, #0
    3b26:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    3b28:	2316      	movs	r3, #22
    3b2a:	18fa      	adds	r2, r7, r3
    3b2c:	68fb      	ldr	r3, [r7, #12]
    3b2e:	0011      	movs	r1, r2
    3b30:	0018      	movs	r0, r3
    3b32:	4b0e      	ldr	r3, [pc, #56]	; (3b6c <spi_select_slave+0xec>)
    3b34:	4798      	blx	r3
    3b36:	e00c      	b.n	3b52 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    3b38:	68bb      	ldr	r3, [r7, #8]
    3b3a:	781b      	ldrb	r3, [r3, #0]
    3b3c:	2100      	movs	r1, #0
    3b3e:	0018      	movs	r0, r3
    3b40:	4b07      	ldr	r3, [pc, #28]	; (3b60 <spi_select_slave+0xe0>)
    3b42:	4798      	blx	r3
    3b44:	e005      	b.n	3b52 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    3b46:	68bb      	ldr	r3, [r7, #8]
    3b48:	781b      	ldrb	r3, [r3, #0]
    3b4a:	2101      	movs	r1, #1
    3b4c:	0018      	movs	r0, r3
    3b4e:	4b04      	ldr	r3, [pc, #16]	; (3b60 <spi_select_slave+0xe0>)
    3b50:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    3b52:	2300      	movs	r3, #0
}
    3b54:	0018      	movs	r0, r3
    3b56:	46bd      	mov	sp, r7
    3b58:	b006      	add	sp, #24
    3b5a:	bd80      	pop	{r7, pc}
    3b5c:	0000349d 	.word	0x0000349d
    3b60:	000033d5 	.word	0x000033d5
    3b64:	000034ed 	.word	0x000034ed
    3b68:	000034c5 	.word	0x000034c5
    3b6c:	00003535 	.word	0x00003535

00003b70 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    3b70:	b580      	push	{r7, lr}
    3b72:	b084      	sub	sp, #16
    3b74:	af00      	add	r7, sp, #0
    3b76:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3b78:	687b      	ldr	r3, [r7, #4]
    3b7a:	681b      	ldr	r3, [r3, #0]
    3b7c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3b7e:	68fb      	ldr	r3, [r7, #12]
    3b80:	69db      	ldr	r3, [r3, #28]
    3b82:	1e5a      	subs	r2, r3, #1
    3b84:	4193      	sbcs	r3, r2
    3b86:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    3b88:	0018      	movs	r0, r3
    3b8a:	46bd      	mov	sp, r7
    3b8c:	b004      	add	sp, #16
    3b8e:	bd80      	pop	{r7, pc}

00003b90 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    3b90:	b580      	push	{r7, lr}
    3b92:	b082      	sub	sp, #8
    3b94:	af00      	add	r7, sp, #0
    3b96:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    3b98:	46c0      	nop			; (mov r8, r8)
    3b9a:	687b      	ldr	r3, [r7, #4]
    3b9c:	0018      	movs	r0, r3
    3b9e:	4b04      	ldr	r3, [pc, #16]	; (3bb0 <_usart_wait_for_sync+0x20>)
    3ba0:	4798      	blx	r3
    3ba2:	1e03      	subs	r3, r0, #0
    3ba4:	d1f9      	bne.n	3b9a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    3ba6:	46c0      	nop			; (mov r8, r8)
    3ba8:	46bd      	mov	sp, r7
    3baa:	b002      	add	sp, #8
    3bac:	bd80      	pop	{r7, pc}
    3bae:	46c0      	nop			; (mov r8, r8)
    3bb0:	00003b71 	.word	0x00003b71

00003bb4 <_usart_write_buffer>:
 */
void _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    3bb4:	b580      	push	{r7, lr}
    3bb6:	b086      	sub	sp, #24
    3bb8:	af00      	add	r7, sp, #0
    3bba:	60f8      	str	r0, [r7, #12]
    3bbc:	60b9      	str	r1, [r7, #8]
    3bbe:	1dbb      	adds	r3, r7, #6
    3bc0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3bc2:	68fb      	ldr	r3, [r7, #12]
    3bc4:	681b      	ldr	r3, [r3, #0]
    3bc6:	617b      	str	r3, [r7, #20]

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    3bc8:	68fb      	ldr	r3, [r7, #12]
    3bca:	1dba      	adds	r2, r7, #6
    3bcc:	8812      	ldrh	r2, [r2, #0]
    3bce:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->tx_buffer_ptr              = tx_data;
    3bd0:	68fb      	ldr	r3, [r7, #12]
    3bd2:	68ba      	ldr	r2, [r7, #8]
    3bd4:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    3bd6:	68fb      	ldr	r3, [r7, #12]
    3bd8:	2233      	movs	r2, #51	; 0x33
    3bda:	2105      	movs	r1, #5
    3bdc:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    3bde:	697b      	ldr	r3, [r7, #20]
    3be0:	2201      	movs	r2, #1
    3be2:	759a      	strb	r2, [r3, #22]
}
    3be4:	46c0      	nop			; (mov r8, r8)
    3be6:	46bd      	mov	sp, r7
    3be8:	b006      	add	sp, #24
    3bea:	bd80      	pop	{r7, pc}

00003bec <_usart_read_buffer>:
 */
void _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    3bec:	b580      	push	{r7, lr}
    3bee:	b086      	sub	sp, #24
    3bf0:	af00      	add	r7, sp, #0
    3bf2:	60f8      	str	r0, [r7, #12]
    3bf4:	60b9      	str	r1, [r7, #8]
    3bf6:	1dbb      	adds	r3, r7, #6
    3bf8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3bfa:	68fb      	ldr	r3, [r7, #12]
    3bfc:	681b      	ldr	r3, [r3, #0]
    3bfe:	617b      	str	r3, [r7, #20]

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->received_length = 0;
    3c00:	68fb      	ldr	r3, [r7, #12]
    3c02:	2200      	movs	r2, #0
    3c04:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = length;
    3c06:	68fb      	ldr	r3, [r7, #12]
    3c08:	1dba      	adds	r2, r7, #6
    3c0a:	8812      	ldrh	r2, [r2, #0]
    3c0c:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = rx_data;
    3c0e:	68fb      	ldr	r3, [r7, #12]
    3c10:	68ba      	ldr	r2, [r7, #8]
    3c12:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    3c14:	68fb      	ldr	r3, [r7, #12]
    3c16:	2232      	movs	r2, #50	; 0x32
    3c18:	2105      	movs	r1, #5
    3c1a:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    3c1c:	697b      	ldr	r3, [r7, #20]
    3c1e:	2204      	movs	r2, #4
    3c20:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    3c22:	68fb      	ldr	r3, [r7, #12]
    3c24:	7a1b      	ldrb	r3, [r3, #8]
    3c26:	2b00      	cmp	r3, #0
    3c28:	d002      	beq.n	3c30 <_usart_read_buffer+0x44>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    3c2a:	697b      	ldr	r3, [r7, #20]
    3c2c:	2220      	movs	r2, #32
    3c2e:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    3c30:	68fb      	ldr	r3, [r7, #12]
    3c32:	7a5b      	ldrb	r3, [r3, #9]
    3c34:	2b00      	cmp	r3, #0
    3c36:	d002      	beq.n	3c3e <_usart_read_buffer+0x52>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    3c38:	697b      	ldr	r3, [r7, #20]
    3c3a:	2208      	movs	r2, #8
    3c3c:	759a      	strb	r2, [r3, #22]
	}
#endif
}
    3c3e:	46c0      	nop			; (mov r8, r8)
    3c40:	46bd      	mov	sp, r7
    3c42:	b006      	add	sp, #24
    3c44:	bd80      	pop	{r7, pc}
    3c46:	46c0      	nop			; (mov r8, r8)

00003c48 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    3c48:	b580      	push	{r7, lr}
    3c4a:	b084      	sub	sp, #16
    3c4c:	af00      	add	r7, sp, #0
    3c4e:	60f8      	str	r0, [r7, #12]
    3c50:	60b9      	str	r1, [r7, #8]
    3c52:	1dfb      	adds	r3, r7, #7
    3c54:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    3c56:	1dfb      	adds	r3, r7, #7
    3c58:	781b      	ldrb	r3, [r3, #0]
    3c5a:	68fa      	ldr	r2, [r7, #12]
    3c5c:	3302      	adds	r3, #2
    3c5e:	009b      	lsls	r3, r3, #2
    3c60:	18d3      	adds	r3, r2, r3
    3c62:	3304      	adds	r3, #4
    3c64:	68ba      	ldr	r2, [r7, #8]
    3c66:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    3c68:	68fb      	ldr	r3, [r7, #12]
    3c6a:	2230      	movs	r2, #48	; 0x30
    3c6c:	5c9b      	ldrb	r3, [r3, r2]
    3c6e:	b25a      	sxtb	r2, r3
    3c70:	1dfb      	adds	r3, r7, #7
    3c72:	781b      	ldrb	r3, [r3, #0]
    3c74:	2101      	movs	r1, #1
    3c76:	4099      	lsls	r1, r3
    3c78:	000b      	movs	r3, r1
    3c7a:	b25b      	sxtb	r3, r3
    3c7c:	4313      	orrs	r3, r2
    3c7e:	b25b      	sxtb	r3, r3
    3c80:	b2d9      	uxtb	r1, r3
    3c82:	68fb      	ldr	r3, [r7, #12]
    3c84:	2230      	movs	r2, #48	; 0x30
    3c86:	5499      	strb	r1, [r3, r2]
}
    3c88:	46c0      	nop			; (mov r8, r8)
    3c8a:	46bd      	mov	sp, r7
    3c8c:	b004      	add	sp, #16
    3c8e:	bd80      	pop	{r7, pc}

00003c90 <usart_write_job>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_job(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    3c90:	b580      	push	{r7, lr}
    3c92:	b082      	sub	sp, #8
    3c94:	af00      	add	r7, sp, #0
    3c96:	6078      	str	r0, [r7, #4]
    3c98:	000a      	movs	r2, r1
    3c9a:	1cbb      	adds	r3, r7, #2
    3c9c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    3c9e:	687b      	ldr	r3, [r7, #4]
    3ca0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    3ca2:	b29b      	uxth	r3, r3
    3ca4:	2b00      	cmp	r3, #0
    3ca6:	d001      	beq.n	3cac <usart_write_job+0x1c>
		return STATUS_BUSY;
    3ca8:	2305      	movs	r3, #5
    3caa:	e00f      	b.n	3ccc <usart_write_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    3cac:	687b      	ldr	r3, [r7, #4]
    3cae:	79db      	ldrb	r3, [r3, #7]
    3cb0:	2201      	movs	r2, #1
    3cb2:	4053      	eors	r3, r2
    3cb4:	b2db      	uxtb	r3, r3
    3cb6:	2b00      	cmp	r3, #0
    3cb8:	d001      	beq.n	3cbe <usart_write_job+0x2e>
		return STATUS_ERR_DENIED;
    3cba:	231c      	movs	r3, #28
    3cbc:	e006      	b.n	3ccc <usart_write_job+0x3c>
	}

	/* Call internal write buffer function with length 1 */
	_usart_write_buffer(module, (uint8_t *)&tx_data, 1);
    3cbe:	1cb9      	adds	r1, r7, #2
    3cc0:	687b      	ldr	r3, [r7, #4]
    3cc2:	2201      	movs	r2, #1
    3cc4:	0018      	movs	r0, r3
    3cc6:	4b03      	ldr	r3, [pc, #12]	; (3cd4 <usart_write_job+0x44>)
    3cc8:	4798      	blx	r3

	return STATUS_OK;
    3cca:	2300      	movs	r3, #0
}
    3ccc:	0018      	movs	r0, r3
    3cce:	46bd      	mov	sp, r7
    3cd0:	b002      	add	sp, #8
    3cd2:	bd80      	pop	{r7, pc}
    3cd4:	00003bb5 	.word	0x00003bb5

00003cd8 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed,
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    3cd8:	b580      	push	{r7, lr}
    3cda:	b082      	sub	sp, #8
    3cdc:	af00      	add	r7, sp, #0
    3cde:	6078      	str	r0, [r7, #4]
    3ce0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    3ce2:	687b      	ldr	r3, [r7, #4]
    3ce4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    3ce6:	b29b      	uxth	r3, r3
    3ce8:	2b00      	cmp	r3, #0
    3cea:	d001      	beq.n	3cf0 <usart_read_job+0x18>
		return STATUS_BUSY;
    3cec:	2305      	movs	r3, #5
    3cee:	e006      	b.n	3cfe <usart_read_job+0x26>
	}

	/* Call internal read buffer function with length 1 */
	_usart_read_buffer(module, (uint8_t *)rx_data, 1);
    3cf0:	6839      	ldr	r1, [r7, #0]
    3cf2:	687b      	ldr	r3, [r7, #4]
    3cf4:	2201      	movs	r2, #1
    3cf6:	0018      	movs	r0, r3
    3cf8:	4b03      	ldr	r3, [pc, #12]	; (3d08 <usart_read_job+0x30>)
    3cfa:	4798      	blx	r3

	return STATUS_OK;
    3cfc:	2300      	movs	r3, #0
}
    3cfe:	0018      	movs	r0, r3
    3d00:	46bd      	mov	sp, r7
    3d02:	b002      	add	sp, #8
    3d04:	bd80      	pop	{r7, pc}
    3d06:	46c0      	nop			; (mov r8, r8)
    3d08:	00003bed 	.word	0x00003bed

00003d0c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    3d0c:	b580      	push	{r7, lr}
    3d0e:	b084      	sub	sp, #16
    3d10:	af00      	add	r7, sp, #0
    3d12:	60f8      	str	r0, [r7, #12]
    3d14:	60b9      	str	r1, [r7, #8]
    3d16:	1dbb      	adds	r3, r7, #6
    3d18:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	if (length == 0) {
    3d1a:	1dbb      	adds	r3, r7, #6
    3d1c:	881b      	ldrh	r3, [r3, #0]
    3d1e:	2b00      	cmp	r3, #0
    3d20:	d101      	bne.n	3d26 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    3d22:	2317      	movs	r3, #23
    3d24:	e017      	b.n	3d56 <usart_write_buffer_job+0x4a>
	}

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    3d26:	68fb      	ldr	r3, [r7, #12]
    3d28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    3d2a:	b29b      	uxth	r3, r3
    3d2c:	2b00      	cmp	r3, #0
    3d2e:	d001      	beq.n	3d34 <usart_write_buffer_job+0x28>
		return STATUS_BUSY;
    3d30:	2305      	movs	r3, #5
    3d32:	e010      	b.n	3d56 <usart_write_buffer_job+0x4a>
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    3d34:	68fb      	ldr	r3, [r7, #12]
    3d36:	79db      	ldrb	r3, [r3, #7]
    3d38:	2201      	movs	r2, #1
    3d3a:	4053      	eors	r3, r2
    3d3c:	b2db      	uxtb	r3, r3
    3d3e:	2b00      	cmp	r3, #0
    3d40:	d001      	beq.n	3d46 <usart_write_buffer_job+0x3a>
		return STATUS_ERR_DENIED;
    3d42:	231c      	movs	r3, #28
    3d44:	e007      	b.n	3d56 <usart_write_buffer_job+0x4a>
	}

	/* Issue internal asynchronous write */
	_usart_write_buffer(module, tx_data, length);
    3d46:	1dbb      	adds	r3, r7, #6
    3d48:	881a      	ldrh	r2, [r3, #0]
    3d4a:	68b9      	ldr	r1, [r7, #8]
    3d4c:	68fb      	ldr	r3, [r7, #12]
    3d4e:	0018      	movs	r0, r3
    3d50:	4b03      	ldr	r3, [pc, #12]	; (3d60 <usart_write_buffer_job+0x54>)
    3d52:	4798      	blx	r3

	return STATUS_OK;
    3d54:	2300      	movs	r3, #0
}
    3d56:	0018      	movs	r0, r3
    3d58:	46bd      	mov	sp, r7
    3d5a:	b004      	add	sp, #16
    3d5c:	bd80      	pop	{r7, pc}
    3d5e:	46c0      	nop			; (mov r8, r8)
    3d60:	00003bb5 	.word	0x00003bb5

00003d64 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    3d64:	b580      	push	{r7, lr}
    3d66:	b084      	sub	sp, #16
    3d68:	af00      	add	r7, sp, #0
    3d6a:	60f8      	str	r0, [r7, #12]
    3d6c:	60b9      	str	r1, [r7, #8]
    3d6e:	1dbb      	adds	r3, r7, #6
    3d70:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    3d72:	1dbb      	adds	r3, r7, #6
    3d74:	881b      	ldrh	r3, [r3, #0]
    3d76:	2b00      	cmp	r3, #0
    3d78:	d101      	bne.n	3d7e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    3d7a:	2317      	movs	r3, #23
    3d7c:	e017      	b.n	3dae <usart_read_buffer_job+0x4a>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    3d7e:	68fb      	ldr	r3, [r7, #12]
    3d80:	799b      	ldrb	r3, [r3, #6]
    3d82:	2201      	movs	r2, #1
    3d84:	4053      	eors	r3, r2
    3d86:	b2db      	uxtb	r3, r3
    3d88:	2b00      	cmp	r3, #0
    3d8a:	d001      	beq.n	3d90 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    3d8c:	231c      	movs	r3, #28
    3d8e:	e00e      	b.n	3dae <usart_read_buffer_job+0x4a>
	}

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    3d90:	68fb      	ldr	r3, [r7, #12]
    3d92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    3d94:	b29b      	uxth	r3, r3
    3d96:	2b00      	cmp	r3, #0
    3d98:	d001      	beq.n	3d9e <usart_read_buffer_job+0x3a>
		return STATUS_BUSY;
    3d9a:	2305      	movs	r3, #5
    3d9c:	e007      	b.n	3dae <usart_read_buffer_job+0x4a>
	}

	/* Issue internal asynchronous read */
	_usart_read_buffer(module, rx_data, length);
    3d9e:	1dbb      	adds	r3, r7, #6
    3da0:	881a      	ldrh	r2, [r3, #0]
    3da2:	68b9      	ldr	r1, [r7, #8]
    3da4:	68fb      	ldr	r3, [r7, #12]
    3da6:	0018      	movs	r0, r3
    3da8:	4b03      	ldr	r3, [pc, #12]	; (3db8 <usart_read_buffer_job+0x54>)
    3daa:	4798      	blx	r3

	return STATUS_OK;
    3dac:	2300      	movs	r3, #0
}
    3dae:	0018      	movs	r0, r3
    3db0:	46bd      	mov	sp, r7
    3db2:	b004      	add	sp, #16
    3db4:	bd80      	pop	{r7, pc}
    3db6:	46c0      	nop			; (mov r8, r8)
    3db8:	00003bed 	.word	0x00003bed

00003dbc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    3dbc:	b580      	push	{r7, lr}
    3dbe:	b088      	sub	sp, #32
    3dc0:	af00      	add	r7, sp, #0
    3dc2:	0002      	movs	r2, r0
    3dc4:	1dfb      	adds	r3, r7, #7
    3dc6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    3dc8:	1dfb      	adds	r3, r7, #7
    3dca:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    3dcc:	4bad      	ldr	r3, [pc, #692]	; (4084 <_usart_interrupt_handler+0x2c8>)
    3dce:	0092      	lsls	r2, r2, #2
    3dd0:	58d3      	ldr	r3, [r2, r3]
    3dd2:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    3dd4:	69bb      	ldr	r3, [r7, #24]
    3dd6:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    3dd8:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    3dda:	69bb      	ldr	r3, [r7, #24]
    3ddc:	0018      	movs	r0, r3
    3dde:	4baa      	ldr	r3, [pc, #680]	; (4088 <_usart_interrupt_handler+0x2cc>)
    3de0:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    3de2:	697b      	ldr	r3, [r7, #20]
    3de4:	7e1b      	ldrb	r3, [r3, #24]
    3de6:	b2da      	uxtb	r2, r3
    3de8:	2312      	movs	r3, #18
    3dea:	18fb      	adds	r3, r7, r3
    3dec:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    3dee:	697b      	ldr	r3, [r7, #20]
    3df0:	7d9b      	ldrb	r3, [r3, #22]
    3df2:	b2db      	uxtb	r3, r3
    3df4:	b29a      	uxth	r2, r3
    3df6:	2312      	movs	r3, #18
    3df8:	18fb      	adds	r3, r7, r3
    3dfa:	2112      	movs	r1, #18
    3dfc:	1879      	adds	r1, r7, r1
    3dfe:	8809      	ldrh	r1, [r1, #0]
    3e00:	400a      	ands	r2, r1
    3e02:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    3e04:	69bb      	ldr	r3, [r7, #24]
    3e06:	2230      	movs	r2, #48	; 0x30
    3e08:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    3e0a:	69ba      	ldr	r2, [r7, #24]
    3e0c:	2131      	movs	r1, #49	; 0x31
    3e0e:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    3e10:	4013      	ands	r3, r2
    3e12:	b2da      	uxtb	r2, r3
    3e14:	2310      	movs	r3, #16
    3e16:	18fb      	adds	r3, r7, r3
    3e18:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    3e1a:	2312      	movs	r3, #18
    3e1c:	18fb      	adds	r3, r7, r3
    3e1e:	881b      	ldrh	r3, [r3, #0]
    3e20:	2201      	movs	r2, #1
    3e22:	4013      	ands	r3, r2
    3e24:	d03e      	beq.n	3ea4 <_usart_interrupt_handler+0xe8>
		if (module->remaining_tx_buffer_length) {
    3e26:	69bb      	ldr	r3, [r7, #24]
    3e28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    3e2a:	b29b      	uxth	r3, r3
    3e2c:	2b00      	cmp	r3, #0
    3e2e:	d036      	beq.n	3e9e <_usart_interrupt_handler+0xe2>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    3e30:	69bb      	ldr	r3, [r7, #24]
    3e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e34:	781b      	ldrb	r3, [r3, #0]
    3e36:	b2da      	uxtb	r2, r3
    3e38:	231e      	movs	r3, #30
    3e3a:	18fb      	adds	r3, r7, r3
    3e3c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    3e3e:	69bb      	ldr	r3, [r7, #24]
    3e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e42:	1c5a      	adds	r2, r3, #1
    3e44:	69bb      	ldr	r3, [r7, #24]
    3e46:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3e48:	69bb      	ldr	r3, [r7, #24]
    3e4a:	795b      	ldrb	r3, [r3, #5]
    3e4c:	2b01      	cmp	r3, #1
    3e4e:	d10d      	bne.n	3e6c <_usart_interrupt_handler+0xb0>
				data_to_send = (*(module->tx_buffer_ptr) << 8);
    3e50:	69bb      	ldr	r3, [r7, #24]
    3e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e54:	781b      	ldrb	r3, [r3, #0]
    3e56:	b2db      	uxtb	r3, r3
    3e58:	b29a      	uxth	r2, r3
    3e5a:	231e      	movs	r3, #30
    3e5c:	18fb      	adds	r3, r7, r3
    3e5e:	0212      	lsls	r2, r2, #8
    3e60:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    3e62:	69bb      	ldr	r3, [r7, #24]
    3e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e66:	1c5a      	adds	r2, r3, #1
    3e68:	69bb      	ldr	r3, [r7, #24]
    3e6a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    3e6c:	231e      	movs	r3, #30
    3e6e:	18fb      	adds	r3, r7, r3
    3e70:	881b      	ldrh	r3, [r3, #0]
    3e72:	05db      	lsls	r3, r3, #23
    3e74:	0ddb      	lsrs	r3, r3, #23
    3e76:	b29a      	uxth	r2, r3
    3e78:	697b      	ldr	r3, [r7, #20]
    3e7a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    3e7c:	69bb      	ldr	r3, [r7, #24]
    3e7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    3e80:	b29b      	uxth	r3, r3
    3e82:	3b01      	subs	r3, #1
    3e84:	b29b      	uxth	r3, r3
    3e86:	69ba      	ldr	r2, [r7, #24]
    3e88:	1c19      	adds	r1, r3, #0
    3e8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    3e8c:	2b00      	cmp	r3, #0
    3e8e:	d109      	bne.n	3ea4 <_usart_interrupt_handler+0xe8>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    3e90:	697b      	ldr	r3, [r7, #20]
    3e92:	2201      	movs	r2, #1
    3e94:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    3e96:	697b      	ldr	r3, [r7, #20]
    3e98:	2202      	movs	r2, #2
    3e9a:	759a      	strb	r2, [r3, #22]
    3e9c:	e002      	b.n	3ea4 <_usart_interrupt_handler+0xe8>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    3e9e:	697b      	ldr	r3, [r7, #20]
    3ea0:	2201      	movs	r2, #1
    3ea2:	751a      	strb	r2, [r3, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    3ea4:	2312      	movs	r3, #18
    3ea6:	18fb      	adds	r3, r7, r3
    3ea8:	881b      	ldrh	r3, [r3, #0]
    3eaa:	2202      	movs	r2, #2
    3eac:	4013      	ands	r3, r2
    3eae:	d011      	beq.n	3ed4 <_usart_interrupt_handler+0x118>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    3eb0:	697b      	ldr	r3, [r7, #20]
    3eb2:	2202      	movs	r2, #2
    3eb4:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    3eb6:	69bb      	ldr	r3, [r7, #24]
    3eb8:	2233      	movs	r2, #51	; 0x33
    3eba:	2100      	movs	r1, #0
    3ebc:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    3ebe:	2310      	movs	r3, #16
    3ec0:	18fb      	adds	r3, r7, r3
    3ec2:	881b      	ldrh	r3, [r3, #0]
    3ec4:	2201      	movs	r2, #1
    3ec6:	4013      	ands	r3, r2
    3ec8:	d004      	beq.n	3ed4 <_usart_interrupt_handler+0x118>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    3eca:	69bb      	ldr	r3, [r7, #24]
    3ecc:	68db      	ldr	r3, [r3, #12]
    3ece:	69ba      	ldr	r2, [r7, #24]
    3ed0:	0010      	movs	r0, r2
    3ed2:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    3ed4:	2312      	movs	r3, #18
    3ed6:	18fb      	adds	r3, r7, r3
    3ed8:	881b      	ldrh	r3, [r3, #0]
    3eda:	2204      	movs	r2, #4
    3edc:	4013      	ands	r3, r2
    3ede:	d100      	bne.n	3ee2 <_usart_interrupt_handler+0x126>
    3ee0:	e0d7      	b.n	4092 <_usart_interrupt_handler+0x2d6>

		if (module->remaining_rx_buffer_length) {
    3ee2:	69bb      	ldr	r3, [r7, #24]
    3ee4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    3ee6:	b29b      	uxth	r3, r3
    3ee8:	2b00      	cmp	r3, #0
    3eea:	d100      	bne.n	3eee <_usart_interrupt_handler+0x132>
    3eec:	e0ce      	b.n	408c <_usart_interrupt_handler+0x2d0>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3eee:	697b      	ldr	r3, [r7, #20]
    3ef0:	8b5b      	ldrh	r3, [r3, #26]
    3ef2:	b29b      	uxth	r3, r3
    3ef4:	b2da      	uxtb	r2, r3
    3ef6:	230f      	movs	r3, #15
    3ef8:	18fb      	adds	r3, r7, r3
    3efa:	213f      	movs	r1, #63	; 0x3f
    3efc:	400a      	ands	r2, r1
    3efe:	701a      	strb	r2, [r3, #0]

			/* Check if an error has occurred during the receiving */
			if (error_code) {
    3f00:	230f      	movs	r3, #15
    3f02:	18fb      	adds	r3, r7, r3
    3f04:	781b      	ldrb	r3, [r3, #0]
    3f06:	2b00      	cmp	r3, #0
    3f08:	d100      	bne.n	3f0c <_usart_interrupt_handler+0x150>
    3f0a:	e069      	b.n	3fe0 <_usart_interrupt_handler+0x224>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    3f0c:	230f      	movs	r3, #15
    3f0e:	18fb      	adds	r3, r7, r3
    3f10:	781b      	ldrb	r3, [r3, #0]
    3f12:	2202      	movs	r2, #2
    3f14:	4013      	ands	r3, r2
    3f16:	d00c      	beq.n	3f32 <_usart_interrupt_handler+0x176>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    3f18:	69bb      	ldr	r3, [r7, #24]
    3f1a:	2232      	movs	r2, #50	; 0x32
    3f1c:	211a      	movs	r1, #26
    3f1e:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    3f20:	697b      	ldr	r3, [r7, #20]
    3f22:	8b5b      	ldrh	r3, [r3, #26]
    3f24:	b29b      	uxth	r3, r3
    3f26:	2202      	movs	r2, #2
    3f28:	4313      	orrs	r3, r2
    3f2a:	b29a      	uxth	r2, r3
    3f2c:	697b      	ldr	r3, [r7, #20]
    3f2e:	835a      	strh	r2, [r3, #26]
    3f30:	e04a      	b.n	3fc8 <_usart_interrupt_handler+0x20c>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    3f32:	230f      	movs	r3, #15
    3f34:	18fb      	adds	r3, r7, r3
    3f36:	781b      	ldrb	r3, [r3, #0]
    3f38:	2204      	movs	r2, #4
    3f3a:	4013      	ands	r3, r2
    3f3c:	d00c      	beq.n	3f58 <_usart_interrupt_handler+0x19c>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    3f3e:	69bb      	ldr	r3, [r7, #24]
    3f40:	2232      	movs	r2, #50	; 0x32
    3f42:	211e      	movs	r1, #30
    3f44:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    3f46:	697b      	ldr	r3, [r7, #20]
    3f48:	8b5b      	ldrh	r3, [r3, #26]
    3f4a:	b29b      	uxth	r3, r3
    3f4c:	2204      	movs	r2, #4
    3f4e:	4313      	orrs	r3, r2
    3f50:	b29a      	uxth	r2, r3
    3f52:	697b      	ldr	r3, [r7, #20]
    3f54:	835a      	strh	r2, [r3, #26]
    3f56:	e037      	b.n	3fc8 <_usart_interrupt_handler+0x20c>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    3f58:	230f      	movs	r3, #15
    3f5a:	18fb      	adds	r3, r7, r3
    3f5c:	781b      	ldrb	r3, [r3, #0]
    3f5e:	2201      	movs	r2, #1
    3f60:	4013      	ands	r3, r2
    3f62:	d00c      	beq.n	3f7e <_usart_interrupt_handler+0x1c2>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    3f64:	69bb      	ldr	r3, [r7, #24]
    3f66:	2232      	movs	r2, #50	; 0x32
    3f68:	2113      	movs	r1, #19
    3f6a:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    3f6c:	697b      	ldr	r3, [r7, #20]
    3f6e:	8b5b      	ldrh	r3, [r3, #26]
    3f70:	b29b      	uxth	r3, r3
    3f72:	2201      	movs	r2, #1
    3f74:	4313      	orrs	r3, r2
    3f76:	b29a      	uxth	r2, r3
    3f78:	697b      	ldr	r3, [r7, #20]
    3f7a:	835a      	strh	r2, [r3, #26]
    3f7c:	e024      	b.n	3fc8 <_usart_interrupt_handler+0x20c>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    3f7e:	230f      	movs	r3, #15
    3f80:	18fb      	adds	r3, r7, r3
    3f82:	781b      	ldrb	r3, [r3, #0]
    3f84:	2210      	movs	r2, #16
    3f86:	4013      	ands	r3, r2
    3f88:	d00c      	beq.n	3fa4 <_usart_interrupt_handler+0x1e8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    3f8a:	69bb      	ldr	r3, [r7, #24]
    3f8c:	2232      	movs	r2, #50	; 0x32
    3f8e:	2142      	movs	r1, #66	; 0x42
    3f90:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    3f92:	697b      	ldr	r3, [r7, #20]
    3f94:	8b5b      	ldrh	r3, [r3, #26]
    3f96:	b29b      	uxth	r3, r3
    3f98:	2210      	movs	r2, #16
    3f9a:	4313      	orrs	r3, r2
    3f9c:	b29a      	uxth	r2, r3
    3f9e:	697b      	ldr	r3, [r7, #20]
    3fa0:	835a      	strh	r2, [r3, #26]
    3fa2:	e011      	b.n	3fc8 <_usart_interrupt_handler+0x20c>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    3fa4:	230f      	movs	r3, #15
    3fa6:	18fb      	adds	r3, r7, r3
    3fa8:	781b      	ldrb	r3, [r3, #0]
    3faa:	2220      	movs	r2, #32
    3fac:	4013      	ands	r3, r2
    3fae:	d00b      	beq.n	3fc8 <_usart_interrupt_handler+0x20c>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    3fb0:	69bb      	ldr	r3, [r7, #24]
    3fb2:	2232      	movs	r2, #50	; 0x32
    3fb4:	2141      	movs	r1, #65	; 0x41
    3fb6:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    3fb8:	697b      	ldr	r3, [r7, #20]
    3fba:	8b5b      	ldrh	r3, [r3, #26]
    3fbc:	b29b      	uxth	r3, r3
    3fbe:	2220      	movs	r2, #32
    3fc0:	4313      	orrs	r3, r2
    3fc2:	b29a      	uxth	r2, r3
    3fc4:	697b      	ldr	r3, [r7, #20]
    3fc6:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    3fc8:	2310      	movs	r3, #16
    3fca:	18fb      	adds	r3, r7, r3
    3fcc:	881b      	ldrh	r3, [r3, #0]
    3fce:	2204      	movs	r2, #4
    3fd0:	4013      	ands	r3, r2
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    3fd2:	d05e      	beq.n	4092 <_usart_interrupt_handler+0x2d6>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    3fd4:	69bb      	ldr	r3, [r7, #24]
    3fd6:	695b      	ldr	r3, [r3, #20]
    3fd8:	69ba      	ldr	r2, [r7, #24]
    3fda:	0010      	movs	r0, r2
    3fdc:	4798      	blx	r3
    3fde:	e058      	b.n	4092 <_usart_interrupt_handler+0x2d6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    3fe0:	697b      	ldr	r3, [r7, #20]
    3fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3fe4:	b29a      	uxth	r2, r3
    3fe6:	230c      	movs	r3, #12
    3fe8:	18fb      	adds	r3, r7, r3
    3fea:	05d2      	lsls	r2, r2, #23
    3fec:	0dd2      	lsrs	r2, r2, #23
    3fee:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    3ff0:	69bb      	ldr	r3, [r7, #24]
    3ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3ff4:	220c      	movs	r2, #12
    3ff6:	18ba      	adds	r2, r7, r2
    3ff8:	8812      	ldrh	r2, [r2, #0]
    3ffa:	b2d2      	uxtb	r2, r2
    3ffc:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    3ffe:	69bb      	ldr	r3, [r7, #24]
    4000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4002:	1c5a      	adds	r2, r3, #1
    4004:	69bb      	ldr	r3, [r7, #24]
    4006:	625a      	str	r2, [r3, #36]	; 0x24
				module->received_length += 1;
    4008:	69bb      	ldr	r3, [r7, #24]
    400a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    400c:	b29b      	uxth	r3, r3
    400e:	3301      	adds	r3, #1
    4010:	b29a      	uxth	r2, r3
    4012:	69bb      	ldr	r3, [r7, #24]
    4014:	869a      	strh	r2, [r3, #52]	; 0x34

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4016:	69bb      	ldr	r3, [r7, #24]
    4018:	795b      	ldrb	r3, [r3, #5]
    401a:	2b01      	cmp	r3, #1
    401c:	d114      	bne.n	4048 <_usart_interrupt_handler+0x28c>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    401e:	69bb      	ldr	r3, [r7, #24]
    4020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4022:	220c      	movs	r2, #12
    4024:	18ba      	adds	r2, r7, r2
    4026:	8812      	ldrh	r2, [r2, #0]
    4028:	0a12      	lsrs	r2, r2, #8
    402a:	b292      	uxth	r2, r2
    402c:	b2d2      	uxtb	r2, r2
    402e:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    4030:	69bb      	ldr	r3, [r7, #24]
    4032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4034:	1c5a      	adds	r2, r3, #1
    4036:	69bb      	ldr	r3, [r7, #24]
    4038:	625a      	str	r2, [r3, #36]	; 0x24
					module->received_length += 1;
    403a:	69bb      	ldr	r3, [r7, #24]
    403c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    403e:	b29b      	uxth	r3, r3
    4040:	3301      	adds	r3, #1
    4042:	b29a      	uxth	r2, r3
    4044:	69bb      	ldr	r3, [r7, #24]
    4046:	869a      	strh	r2, [r3, #52]	; 0x34
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    4048:	69bb      	ldr	r3, [r7, #24]
    404a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    404c:	b29b      	uxth	r3, r3
    404e:	3b01      	subs	r3, #1
    4050:	b29b      	uxth	r3, r3
    4052:	69ba      	ldr	r2, [r7, #24]
    4054:	1c19      	adds	r1, r3, #0
    4056:	8591      	strh	r1, [r2, #44]	; 0x2c
    4058:	2b00      	cmp	r3, #0
    405a:	d11a      	bne.n	4092 <_usart_interrupt_handler+0x2d6>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    405c:	697b      	ldr	r3, [r7, #20]
    405e:	2204      	movs	r2, #4
    4060:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    4062:	69bb      	ldr	r3, [r7, #24]
    4064:	2232      	movs	r2, #50	; 0x32
    4066:	2100      	movs	r1, #0
    4068:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    406a:	2310      	movs	r3, #16
    406c:	18fb      	adds	r3, r7, r3
    406e:	881b      	ldrh	r3, [r3, #0]
    4070:	2202      	movs	r2, #2
    4072:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    4074:	d00d      	beq.n	4092 <_usart_interrupt_handler+0x2d6>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    4076:	69bb      	ldr	r3, [r7, #24]
    4078:	691b      	ldr	r3, [r3, #16]
    407a:	69ba      	ldr	r2, [r7, #24]
    407c:	0010      	movs	r0, r2
    407e:	4798      	blx	r3
    4080:	e007      	b.n	4092 <_usart_interrupt_handler+0x2d6>
    4082:	46c0      	nop			; (mov r8, r8)
    4084:	20000e44 	.word	0x20000e44
    4088:	00003b91 	.word	0x00003b91
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    408c:	697b      	ldr	r3, [r7, #20]
    408e:	2204      	movs	r2, #4
    4090:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    4092:	2312      	movs	r3, #18
    4094:	18fb      	adds	r3, r7, r3
    4096:	881b      	ldrh	r3, [r3, #0]
    4098:	2210      	movs	r2, #16
    409a:	4013      	ands	r3, r2
    409c:	d010      	beq.n	40c0 <_usart_interrupt_handler+0x304>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    409e:	697b      	ldr	r3, [r7, #20]
    40a0:	2210      	movs	r2, #16
    40a2:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    40a4:	697b      	ldr	r3, [r7, #20]
    40a6:	2210      	movs	r2, #16
    40a8:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    40aa:	2310      	movs	r3, #16
    40ac:	18fb      	adds	r3, r7, r3
    40ae:	881b      	ldrh	r3, [r3, #0]
    40b0:	2210      	movs	r2, #16
    40b2:	4013      	ands	r3, r2
    40b4:	d004      	beq.n	40c0 <_usart_interrupt_handler+0x304>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    40b6:	69bb      	ldr	r3, [r7, #24]
    40b8:	69db      	ldr	r3, [r3, #28]
    40ba:	69ba      	ldr	r2, [r7, #24]
    40bc:	0010      	movs	r0, r2
    40be:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    40c0:	2312      	movs	r3, #18
    40c2:	18fb      	adds	r3, r7, r3
    40c4:	881b      	ldrh	r3, [r3, #0]
    40c6:	2220      	movs	r2, #32
    40c8:	4013      	ands	r3, r2
    40ca:	d010      	beq.n	40ee <_usart_interrupt_handler+0x332>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    40cc:	697b      	ldr	r3, [r7, #20]
    40ce:	2220      	movs	r2, #32
    40d0:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    40d2:	697b      	ldr	r3, [r7, #20]
    40d4:	2220      	movs	r2, #32
    40d6:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    40d8:	2310      	movs	r3, #16
    40da:	18fb      	adds	r3, r7, r3
    40dc:	881b      	ldrh	r3, [r3, #0]
    40de:	2208      	movs	r2, #8
    40e0:	4013      	ands	r3, r2
    40e2:	d004      	beq.n	40ee <_usart_interrupt_handler+0x332>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    40e4:	69bb      	ldr	r3, [r7, #24]
    40e6:	699b      	ldr	r3, [r3, #24]
    40e8:	69ba      	ldr	r2, [r7, #24]
    40ea:	0010      	movs	r0, r2
    40ec:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    40ee:	2312      	movs	r3, #18
    40f0:	18fb      	adds	r3, r7, r3
    40f2:	881b      	ldrh	r3, [r3, #0]
    40f4:	2208      	movs	r2, #8
    40f6:	4013      	ands	r3, r2
    40f8:	d010      	beq.n	411c <_usart_interrupt_handler+0x360>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    40fa:	697b      	ldr	r3, [r7, #20]
    40fc:	2208      	movs	r2, #8
    40fe:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    4100:	697b      	ldr	r3, [r7, #20]
    4102:	2208      	movs	r2, #8
    4104:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    4106:	2310      	movs	r3, #16
    4108:	18fb      	adds	r3, r7, r3
    410a:	881b      	ldrh	r3, [r3, #0]
    410c:	2220      	movs	r2, #32
    410e:	4013      	ands	r3, r2
    4110:	d004      	beq.n	411c <_usart_interrupt_handler+0x360>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    4112:	69bb      	ldr	r3, [r7, #24]
    4114:	6a1b      	ldr	r3, [r3, #32]
    4116:	69ba      	ldr	r2, [r7, #24]
    4118:	0010      	movs	r0, r2
    411a:	4798      	blx	r3
		}
	}
#endif
}
    411c:	46c0      	nop			; (mov r8, r8)
    411e:	46bd      	mov	sp, r7
    4120:	b008      	add	sp, #32
    4122:	bd80      	pop	{r7, pc}

00004124 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    4124:	b580      	push	{r7, lr}
    4126:	af00      	add	r7, sp, #0
    4128:	2000      	movs	r0, #0
    412a:	4b02      	ldr	r3, [pc, #8]	; (4134 <TCC0_Handler+0x10>)
    412c:	4798      	blx	r3
    412e:	46c0      	nop			; (mov r8, r8)
    4130:	46bd      	mov	sp, r7
    4132:	bd80      	pop	{r7, pc}
    4134:	00004161 	.word	0x00004161

00004138 <TCC1_Handler>:
    4138:	b580      	push	{r7, lr}
    413a:	af00      	add	r7, sp, #0
    413c:	2001      	movs	r0, #1
    413e:	4b02      	ldr	r3, [pc, #8]	; (4148 <TCC1_Handler+0x10>)
    4140:	4798      	blx	r3
    4142:	46c0      	nop			; (mov r8, r8)
    4144:	46bd      	mov	sp, r7
    4146:	bd80      	pop	{r7, pc}
    4148:	00004161 	.word	0x00004161

0000414c <TCC2_Handler>:
    414c:	b580      	push	{r7, lr}
    414e:	af00      	add	r7, sp, #0
    4150:	2002      	movs	r0, #2
    4152:	4b02      	ldr	r3, [pc, #8]	; (415c <TCC2_Handler+0x10>)
    4154:	4798      	blx	r3
    4156:	46c0      	nop			; (mov r8, r8)
    4158:	46bd      	mov	sp, r7
    415a:	bd80      	pop	{r7, pc}
    415c:	00004161 	.word	0x00004161

00004160 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler.
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    4160:	b580      	push	{r7, lr}
    4162:	b086      	sub	sp, #24
    4164:	af00      	add	r7, sp, #0
    4166:	0002      	movs	r2, r0
    4168:	1dfb      	adds	r3, r7, #7
    416a:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    416c:	1dfb      	adds	r3, r7, #7
    416e:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    4170:	4b18      	ldr	r3, [pc, #96]	; (41d4 <_tcc_interrupt_handler+0x74>)
    4172:	0092      	lsls	r2, r2, #2
    4174:	58d3      	ldr	r3, [r2, r3]
    4176:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    4178:	693b      	ldr	r3, [r7, #16]
    417a:	681b      	ldr	r3, [r3, #0]
    417c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    417e:	693b      	ldr	r3, [r7, #16]
    4180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    4182:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
    4184:	693b      	ldr	r3, [r7, #16]
    4186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    4188:	4013      	ands	r3, r2
    418a:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    418c:	2300      	movs	r3, #0
    418e:	617b      	str	r3, [r7, #20]
    4190:	e019      	b.n	41c6 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    4192:	4b11      	ldr	r3, [pc, #68]	; (41d8 <_tcc_interrupt_handler+0x78>)
    4194:	697a      	ldr	r2, [r7, #20]
    4196:	0092      	lsls	r2, r2, #2
    4198:	58d3      	ldr	r3, [r2, r3]
    419a:	68fa      	ldr	r2, [r7, #12]
    419c:	4013      	ands	r3, r2
    419e:	d00f      	beq.n	41c0 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    41a0:	693a      	ldr	r2, [r7, #16]
    41a2:	697b      	ldr	r3, [r7, #20]
    41a4:	009b      	lsls	r3, r3, #2
    41a6:	18d3      	adds	r3, r2, r3
    41a8:	3304      	adds	r3, #4
    41aa:	681b      	ldr	r3, [r3, #0]
    41ac:	693a      	ldr	r2, [r7, #16]
    41ae:	0010      	movs	r0, r2
    41b0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    41b2:	693b      	ldr	r3, [r7, #16]
    41b4:	681b      	ldr	r3, [r3, #0]
    41b6:	4a08      	ldr	r2, [pc, #32]	; (41d8 <_tcc_interrupt_handler+0x78>)
    41b8:	6979      	ldr	r1, [r7, #20]
    41ba:	0089      	lsls	r1, r1, #2
    41bc:	588a      	ldr	r2, [r1, r2]
    41be:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    41c0:	697b      	ldr	r3, [r7, #20]
    41c2:	3301      	adds	r3, #1
    41c4:	617b      	str	r3, [r7, #20]
    41c6:	697b      	ldr	r3, [r7, #20]
    41c8:	2b0b      	cmp	r3, #11
    41ca:	dde2      	ble.n	4192 <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    41cc:	46c0      	nop			; (mov r8, r8)
    41ce:	46bd      	mov	sp, r7
    41d0:	b006      	add	sp, #24
    41d2:	bd80      	pop	{r7, pc}
    41d4:	20000e18 	.word	0x20000e18
    41d8:	0000dcf8 	.word	0x0000dcf8

000041dc <TC3_Handler>:
		void TC##n##_Handler(void) \
		{ \
			_tc_interrupt_handler(m); \
		}

MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    41dc:	b580      	push	{r7, lr}
    41de:	af00      	add	r7, sp, #0
    41e0:	2000      	movs	r0, #0
    41e2:	4b02      	ldr	r3, [pc, #8]	; (41ec <TC3_Handler+0x10>)
    41e4:	4798      	blx	r3
    41e6:	46c0      	nop			; (mov r8, r8)
    41e8:	46bd      	mov	sp, r7
    41ea:	bd80      	pop	{r7, pc}
    41ec:	00004241 	.word	0x00004241

000041f0 <TC4_Handler>:
    41f0:	b580      	push	{r7, lr}
    41f2:	af00      	add	r7, sp, #0
    41f4:	2001      	movs	r0, #1
    41f6:	4b02      	ldr	r3, [pc, #8]	; (4200 <TC4_Handler+0x10>)
    41f8:	4798      	blx	r3
    41fa:	46c0      	nop			; (mov r8, r8)
    41fc:	46bd      	mov	sp, r7
    41fe:	bd80      	pop	{r7, pc}
    4200:	00004241 	.word	0x00004241

00004204 <TC5_Handler>:
    4204:	b580      	push	{r7, lr}
    4206:	af00      	add	r7, sp, #0
    4208:	2002      	movs	r0, #2
    420a:	4b02      	ldr	r3, [pc, #8]	; (4214 <TC5_Handler+0x10>)
    420c:	4798      	blx	r3
    420e:	46c0      	nop			; (mov r8, r8)
    4210:	46bd      	mov	sp, r7
    4212:	bd80      	pop	{r7, pc}
    4214:	00004241 	.word	0x00004241

00004218 <TC6_Handler>:
    4218:	b580      	push	{r7, lr}
    421a:	af00      	add	r7, sp, #0
    421c:	2003      	movs	r0, #3
    421e:	4b02      	ldr	r3, [pc, #8]	; (4228 <TC6_Handler+0x10>)
    4220:	4798      	blx	r3
    4222:	46c0      	nop			; (mov r8, r8)
    4224:	46bd      	mov	sp, r7
    4226:	bd80      	pop	{r7, pc}
    4228:	00004241 	.word	0x00004241

0000422c <TC7_Handler>:
    422c:	b580      	push	{r7, lr}
    422e:	af00      	add	r7, sp, #0
    4230:	2004      	movs	r0, #4
    4232:	4b02      	ldr	r3, [pc, #8]	; (423c <TC7_Handler+0x10>)
    4234:	4798      	blx	r3
    4236:	46c0      	nop			; (mov r8, r8)
    4238:	46bd      	mov	sp, r7
    423a:	bd80      	pop	{r7, pc}
    423c:	00004241 	.word	0x00004241

00004240 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    4240:	b580      	push	{r7, lr}
    4242:	b084      	sub	sp, #16
    4244:	af00      	add	r7, sp, #0
    4246:	0002      	movs	r2, r0
    4248:	1dfb      	adds	r3, r7, #7
    424a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    424c:	1dfb      	adds	r3, r7, #7
    424e:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    4250:	4b28      	ldr	r3, [pc, #160]	; (42f4 <_tc_interrupt_handler+0xb4>)
    4252:	0092      	lsls	r2, r2, #2
    4254:	58d3      	ldr	r3, [r2, r3]
    4256:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    4258:	68fb      	ldr	r3, [r7, #12]
    425a:	681b      	ldr	r3, [r3, #0]
    425c:	7b9b      	ldrb	r3, [r3, #14]
    425e:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    4260:	68fa      	ldr	r2, [r7, #12]
    4262:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    4264:	4013      	ands	r3, r2
    4266:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
    4268:	68fb      	ldr	r3, [r7, #12]
    426a:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    426c:	230b      	movs	r3, #11
    426e:	18fb      	adds	r3, r7, r3
    4270:	400a      	ands	r2, r1
    4272:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    4274:	230b      	movs	r3, #11
    4276:	18fb      	adds	r3, r7, r3
    4278:	781b      	ldrb	r3, [r3, #0]
    427a:	2201      	movs	r2, #1
    427c:	4013      	ands	r3, r2
    427e:	d008      	beq.n	4292 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    4280:	68fb      	ldr	r3, [r7, #12]
    4282:	689b      	ldr	r3, [r3, #8]
    4284:	68fa      	ldr	r2, [r7, #12]
    4286:	0010      	movs	r0, r2
    4288:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    428a:	68fb      	ldr	r3, [r7, #12]
    428c:	681b      	ldr	r3, [r3, #0]
    428e:	2201      	movs	r2, #1
    4290:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    4292:	230b      	movs	r3, #11
    4294:	18fb      	adds	r3, r7, r3
    4296:	781b      	ldrb	r3, [r3, #0]
    4298:	2202      	movs	r2, #2
    429a:	4013      	ands	r3, r2
    429c:	d008      	beq.n	42b0 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    429e:	68fb      	ldr	r3, [r7, #12]
    42a0:	68db      	ldr	r3, [r3, #12]
    42a2:	68fa      	ldr	r2, [r7, #12]
    42a4:	0010      	movs	r0, r2
    42a6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    42a8:	68fb      	ldr	r3, [r7, #12]
    42aa:	681b      	ldr	r3, [r3, #0]
    42ac:	2202      	movs	r2, #2
    42ae:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    42b0:	230b      	movs	r3, #11
    42b2:	18fb      	adds	r3, r7, r3
    42b4:	781b      	ldrb	r3, [r3, #0]
    42b6:	2210      	movs	r2, #16
    42b8:	4013      	ands	r3, r2
    42ba:	d008      	beq.n	42ce <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    42bc:	68fb      	ldr	r3, [r7, #12]
    42be:	691b      	ldr	r3, [r3, #16]
    42c0:	68fa      	ldr	r2, [r7, #12]
    42c2:	0010      	movs	r0, r2
    42c4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    42c6:	68fb      	ldr	r3, [r7, #12]
    42c8:	681b      	ldr	r3, [r3, #0]
    42ca:	2210      	movs	r2, #16
    42cc:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    42ce:	230b      	movs	r3, #11
    42d0:	18fb      	adds	r3, r7, r3
    42d2:	781b      	ldrb	r3, [r3, #0]
    42d4:	2220      	movs	r2, #32
    42d6:	4013      	ands	r3, r2
    42d8:	d008      	beq.n	42ec <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    42da:	68fb      	ldr	r3, [r7, #12]
    42dc:	695b      	ldr	r3, [r3, #20]
    42de:	68fa      	ldr	r2, [r7, #12]
    42e0:	0010      	movs	r0, r2
    42e2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    42e4:	68fb      	ldr	r3, [r7, #12]
    42e6:	681b      	ldr	r3, [r3, #0]
    42e8:	2220      	movs	r2, #32
    42ea:	739a      	strb	r2, [r3, #14]
	}
}
    42ec:	46c0      	nop			; (mov r8, r8)
    42ee:	46bd      	mov	sp, r7
    42f0:	b004      	add	sp, #16
    42f2:	bd80      	pop	{r7, pc}
    42f4:	20000e24 	.word	0x20000e24

000042f8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    42f8:	b580      	push	{r7, lr}
    42fa:	b086      	sub	sp, #24
    42fc:	af00      	add	r7, sp, #0
    42fe:	60f8      	str	r0, [r7, #12]
    4300:	60b9      	str	r1, [r7, #8]
    4302:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    4304:	2300      	movs	r3, #0
    4306:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    4308:	68fb      	ldr	r3, [r7, #12]
    430a:	2b00      	cmp	r3, #0
    430c:	d012      	beq.n	4334 <_read+0x3c>
		return -1;
    430e:	2301      	movs	r3, #1
    4310:	425b      	negs	r3, r3
    4312:	e013      	b.n	433c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    4314:	4b0b      	ldr	r3, [pc, #44]	; (4344 <_read+0x4c>)
    4316:	681a      	ldr	r2, [r3, #0]
    4318:	4b0b      	ldr	r3, [pc, #44]	; (4348 <_read+0x50>)
    431a:	681b      	ldr	r3, [r3, #0]
    431c:	68b9      	ldr	r1, [r7, #8]
    431e:	0018      	movs	r0, r3
    4320:	4790      	blx	r2
		ptr++;
    4322:	68bb      	ldr	r3, [r7, #8]
    4324:	3301      	adds	r3, #1
    4326:	60bb      	str	r3, [r7, #8]
		nChars++;
    4328:	697b      	ldr	r3, [r7, #20]
    432a:	3301      	adds	r3, #1
    432c:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    432e:	687b      	ldr	r3, [r7, #4]
    4330:	3b01      	subs	r3, #1
    4332:	607b      	str	r3, [r7, #4]
    4334:	687b      	ldr	r3, [r7, #4]
    4336:	2b00      	cmp	r3, #0
    4338:	dcec      	bgt.n	4314 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    433a:	697b      	ldr	r3, [r7, #20]
}
    433c:	0018      	movs	r0, r3
    433e:	46bd      	mov	sp, r7
    4340:	b006      	add	sp, #24
    4342:	bd80      	pop	{r7, pc}
    4344:	20000e38 	.word	0x20000e38
    4348:	20000e40 	.word	0x20000e40

0000434c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    434c:	b580      	push	{r7, lr}
    434e:	b086      	sub	sp, #24
    4350:	af00      	add	r7, sp, #0
    4352:	60f8      	str	r0, [r7, #12]
    4354:	60b9      	str	r1, [r7, #8]
    4356:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    4358:	2300      	movs	r3, #0
    435a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    435c:	68fb      	ldr	r3, [r7, #12]
    435e:	2b01      	cmp	r3, #1
    4360:	d01d      	beq.n	439e <_write+0x52>
    4362:	68fb      	ldr	r3, [r7, #12]
    4364:	2b02      	cmp	r3, #2
    4366:	d01a      	beq.n	439e <_write+0x52>
    4368:	68fb      	ldr	r3, [r7, #12]
    436a:	2b03      	cmp	r3, #3
    436c:	d017      	beq.n	439e <_write+0x52>
		return -1;
    436e:	2301      	movs	r3, #1
    4370:	425b      	negs	r3, r3
    4372:	e018      	b.n	43a6 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    4374:	4b0e      	ldr	r3, [pc, #56]	; (43b0 <_write+0x64>)
    4376:	681a      	ldr	r2, [r3, #0]
    4378:	4b0e      	ldr	r3, [pc, #56]	; (43b4 <_write+0x68>)
    437a:	6818      	ldr	r0, [r3, #0]
    437c:	68bb      	ldr	r3, [r7, #8]
    437e:	1c59      	adds	r1, r3, #1
    4380:	60b9      	str	r1, [r7, #8]
    4382:	781b      	ldrb	r3, [r3, #0]
    4384:	0019      	movs	r1, r3
    4386:	4790      	blx	r2
    4388:	1e03      	subs	r3, r0, #0
    438a:	da02      	bge.n	4392 <_write+0x46>
			return -1;
    438c:	2301      	movs	r3, #1
    438e:	425b      	negs	r3, r3
    4390:	e009      	b.n	43a6 <_write+0x5a>
		}
		++nChars;
    4392:	697b      	ldr	r3, [r7, #20]
    4394:	3301      	adds	r3, #1
    4396:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    4398:	687b      	ldr	r3, [r7, #4]
    439a:	3b01      	subs	r3, #1
    439c:	607b      	str	r3, [r7, #4]
    439e:	687b      	ldr	r3, [r7, #4]
    43a0:	2b00      	cmp	r3, #0
    43a2:	d1e7      	bne.n	4374 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    43a4:	697b      	ldr	r3, [r7, #20]
}
    43a6:	0018      	movs	r0, r3
    43a8:	46bd      	mov	sp, r7
    43aa:	b006      	add	sp, #24
    43ac:	bd80      	pop	{r7, pc}
    43ae:	46c0      	nop			; (mov r8, r8)
    43b0:	20000e3c 	.word	0x20000e3c
    43b4:	20000e40 	.word	0x20000e40

000043b8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    43b8:	b580      	push	{r7, lr}
    43ba:	b082      	sub	sp, #8
    43bc:	af00      	add	r7, sp, #0
    43be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    43c0:	687b      	ldr	r3, [r7, #4]
    43c2:	2200      	movs	r2, #0
    43c4:	701a      	strb	r2, [r3, #0]
}
    43c6:	46c0      	nop			; (mov r8, r8)
    43c8:	46bd      	mov	sp, r7
    43ca:	b002      	add	sp, #8
    43cc:	bd80      	pop	{r7, pc}
    43ce:	46c0      	nop			; (mov r8, r8)

000043d0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    43d0:	b580      	push	{r7, lr}
    43d2:	b082      	sub	sp, #8
    43d4:	af00      	add	r7, sp, #0
    43d6:	0002      	movs	r2, r0
    43d8:	6039      	str	r1, [r7, #0]
    43da:	1dfb      	adds	r3, r7, #7
    43dc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    43de:	1dfb      	adds	r3, r7, #7
    43e0:	781b      	ldrb	r3, [r3, #0]
    43e2:	2b01      	cmp	r3, #1
    43e4:	d00a      	beq.n	43fc <system_apb_clock_set_mask+0x2c>
    43e6:	2b02      	cmp	r3, #2
    43e8:	d00f      	beq.n	440a <system_apb_clock_set_mask+0x3a>
    43ea:	2b00      	cmp	r3, #0
    43ec:	d114      	bne.n	4418 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    43ee:	4b0e      	ldr	r3, [pc, #56]	; (4428 <system_apb_clock_set_mask+0x58>)
    43f0:	4a0d      	ldr	r2, [pc, #52]	; (4428 <system_apb_clock_set_mask+0x58>)
    43f2:	6991      	ldr	r1, [r2, #24]
    43f4:	683a      	ldr	r2, [r7, #0]
    43f6:	430a      	orrs	r2, r1
    43f8:	619a      	str	r2, [r3, #24]
			break;
    43fa:	e00f      	b.n	441c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    43fc:	4b0a      	ldr	r3, [pc, #40]	; (4428 <system_apb_clock_set_mask+0x58>)
    43fe:	4a0a      	ldr	r2, [pc, #40]	; (4428 <system_apb_clock_set_mask+0x58>)
    4400:	69d1      	ldr	r1, [r2, #28]
    4402:	683a      	ldr	r2, [r7, #0]
    4404:	430a      	orrs	r2, r1
    4406:	61da      	str	r2, [r3, #28]
			break;
    4408:	e008      	b.n	441c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    440a:	4b07      	ldr	r3, [pc, #28]	; (4428 <system_apb_clock_set_mask+0x58>)
    440c:	4a06      	ldr	r2, [pc, #24]	; (4428 <system_apb_clock_set_mask+0x58>)
    440e:	6a11      	ldr	r1, [r2, #32]
    4410:	683a      	ldr	r2, [r7, #0]
    4412:	430a      	orrs	r2, r1
    4414:	621a      	str	r2, [r3, #32]
			break;
    4416:	e001      	b.n	441c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4418:	2317      	movs	r3, #23
    441a:	e000      	b.n	441e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    441c:	2300      	movs	r3, #0
}
    441e:	0018      	movs	r0, r3
    4420:	46bd      	mov	sp, r7
    4422:	b002      	add	sp, #8
    4424:	bd80      	pop	{r7, pc}
    4426:	46c0      	nop			; (mov r8, r8)
    4428:	40000400 	.word	0x40000400

0000442c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    442c:	b580      	push	{r7, lr}
    442e:	b082      	sub	sp, #8
    4430:	af00      	add	r7, sp, #0
    4432:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4434:	687b      	ldr	r3, [r7, #4]
    4436:	2280      	movs	r2, #128	; 0x80
    4438:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    443a:	687b      	ldr	r3, [r7, #4]
    443c:	2200      	movs	r2, #0
    443e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4440:	687b      	ldr	r3, [r7, #4]
    4442:	2201      	movs	r2, #1
    4444:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4446:	687b      	ldr	r3, [r7, #4]
    4448:	2200      	movs	r2, #0
    444a:	70da      	strb	r2, [r3, #3]
}
    444c:	46c0      	nop			; (mov r8, r8)
    444e:	46bd      	mov	sp, r7
    4450:	b002      	add	sp, #8
    4452:	bd80      	pop	{r7, pc}

00004454 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    4454:	b580      	push	{r7, lr}
    4456:	b084      	sub	sp, #16
    4458:	af00      	add	r7, sp, #0
    445a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    445c:	687b      	ldr	r3, [r7, #4]
    445e:	681b      	ldr	r3, [r3, #0]
    4460:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4462:	68fb      	ldr	r3, [r7, #12]
    4464:	69db      	ldr	r3, [r3, #28]
    4466:	1e5a      	subs	r2, r3, #1
    4468:	4193      	sbcs	r3, r2
    446a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    446c:	0018      	movs	r0, r3
    446e:	46bd      	mov	sp, r7
    4470:	b004      	add	sp, #16
    4472:	bd80      	pop	{r7, pc}

00004474 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    4474:	b580      	push	{r7, lr}
    4476:	b082      	sub	sp, #8
    4478:	af00      	add	r7, sp, #0
    447a:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    447c:	46c0      	nop			; (mov r8, r8)
    447e:	687b      	ldr	r3, [r7, #4]
    4480:	0018      	movs	r0, r3
    4482:	4b04      	ldr	r3, [pc, #16]	; (4494 <_usart_wait_for_sync+0x20>)
    4484:	4798      	blx	r3
    4486:	1e03      	subs	r3, r0, #0
    4488:	d1f9      	bne.n	447e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    448a:	46c0      	nop			; (mov r8, r8)
    448c:	46bd      	mov	sp, r7
    448e:	b002      	add	sp, #8
    4490:	bd80      	pop	{r7, pc}
    4492:	46c0      	nop			; (mov r8, r8)
    4494:	00004455 	.word	0x00004455

00004498 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    4498:	b5b0      	push	{r4, r5, r7, lr}
    449a:	b08c      	sub	sp, #48	; 0x30
    449c:	af02      	add	r7, sp, #8
    449e:	6078      	str	r0, [r7, #4]
    44a0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    44a2:	687b      	ldr	r3, [r7, #4]
    44a4:	681b      	ldr	r3, [r3, #0]
    44a6:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    44a8:	687b      	ldr	r3, [r7, #4]
    44aa:	681b      	ldr	r3, [r3, #0]
    44ac:	0018      	movs	r0, r3
    44ae:	4ba8      	ldr	r3, [pc, #672]	; (4750 <_usart_set_config+0x2b8>)
    44b0:	4798      	blx	r3
    44b2:	0003      	movs	r3, r0
    44b4:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    44b6:	697b      	ldr	r3, [r7, #20]
    44b8:	3314      	adds	r3, #20
    44ba:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    44bc:	2300      	movs	r3, #0
    44be:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    44c0:	2300      	movs	r3, #0
    44c2:	623b      	str	r3, [r7, #32]
	uint16_t baud  = 0;
    44c4:	230e      	movs	r3, #14
    44c6:	18fb      	adds	r3, r7, r3
    44c8:	2200      	movs	r2, #0
    44ca:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    44cc:	231f      	movs	r3, #31
    44ce:	18fb      	adds	r3, r7, r3
    44d0:	2200      	movs	r2, #0
    44d2:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    44d4:	231e      	movs	r3, #30
    44d6:	18fb      	adds	r3, r7, r3
    44d8:	2210      	movs	r2, #16
    44da:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    44dc:	683b      	ldr	r3, [r7, #0]
    44de:	8a1b      	ldrh	r3, [r3, #16]
    44e0:	2280      	movs	r2, #128	; 0x80
    44e2:	01d2      	lsls	r2, r2, #7
    44e4:	4293      	cmp	r3, r2
    44e6:	d01c      	beq.n	4522 <_usart_set_config+0x8a>
    44e8:	2280      	movs	r2, #128	; 0x80
    44ea:	01d2      	lsls	r2, r2, #7
    44ec:	4293      	cmp	r3, r2
    44ee:	dc06      	bgt.n	44fe <_usart_set_config+0x66>
    44f0:	2b00      	cmp	r3, #0
    44f2:	d00d      	beq.n	4510 <_usart_set_config+0x78>
    44f4:	2280      	movs	r2, #128	; 0x80
    44f6:	0192      	lsls	r2, r2, #6
    44f8:	4293      	cmp	r3, r2
    44fa:	d024      	beq.n	4546 <_usart_set_config+0xae>
    44fc:	e035      	b.n	456a <_usart_set_config+0xd2>
    44fe:	22c0      	movs	r2, #192	; 0xc0
    4500:	01d2      	lsls	r2, r2, #7
    4502:	4293      	cmp	r3, r2
    4504:	d028      	beq.n	4558 <_usart_set_config+0xc0>
    4506:	2280      	movs	r2, #128	; 0x80
    4508:	0212      	lsls	r2, r2, #8
    450a:	4293      	cmp	r3, r2
    450c:	d012      	beq.n	4534 <_usart_set_config+0x9c>
    450e:	e02c      	b.n	456a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4510:	231f      	movs	r3, #31
    4512:	18fb      	adds	r3, r7, r3
    4514:	2200      	movs	r2, #0
    4516:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4518:	231e      	movs	r3, #30
    451a:	18fb      	adds	r3, r7, r3
    451c:	2210      	movs	r2, #16
    451e:	701a      	strb	r2, [r3, #0]
			break;
    4520:	e023      	b.n	456a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4522:	231f      	movs	r3, #31
    4524:	18fb      	adds	r3, r7, r3
    4526:	2200      	movs	r2, #0
    4528:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    452a:	231e      	movs	r3, #30
    452c:	18fb      	adds	r3, r7, r3
    452e:	2208      	movs	r2, #8
    4530:	701a      	strb	r2, [r3, #0]
			break;
    4532:	e01a      	b.n	456a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4534:	231f      	movs	r3, #31
    4536:	18fb      	adds	r3, r7, r3
    4538:	2200      	movs	r2, #0
    453a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    453c:	231e      	movs	r3, #30
    453e:	18fb      	adds	r3, r7, r3
    4540:	2203      	movs	r2, #3
    4542:	701a      	strb	r2, [r3, #0]
			break;
    4544:	e011      	b.n	456a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4546:	231f      	movs	r3, #31
    4548:	18fb      	adds	r3, r7, r3
    454a:	2201      	movs	r2, #1
    454c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    454e:	231e      	movs	r3, #30
    4550:	18fb      	adds	r3, r7, r3
    4552:	2210      	movs	r2, #16
    4554:	701a      	strb	r2, [r3, #0]
			break;
    4556:	e008      	b.n	456a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4558:	231f      	movs	r3, #31
    455a:	18fb      	adds	r3, r7, r3
    455c:	2201      	movs	r2, #1
    455e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4560:	231e      	movs	r3, #30
    4562:	18fb      	adds	r3, r7, r3
    4564:	2208      	movs	r2, #8
    4566:	701a      	strb	r2, [r3, #0]
			break;
    4568:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    456a:	683b      	ldr	r3, [r7, #0]
    456c:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    456e:	683b      	ldr	r3, [r7, #0]
    4570:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    4572:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    4574:	683b      	ldr	r3, [r7, #0]
    4576:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    4578:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    457a:	683a      	ldr	r2, [r7, #0]
    457c:	8a12      	ldrh	r2, [r2, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    457e:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4580:	683a      	ldr	r2, [r7, #0]
    4582:	7e12      	ldrb	r2, [r2, #24]
    4584:	0212      	lsls	r2, r2, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    4586:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4588:	683a      	ldr	r2, [r7, #0]
    458a:	2126      	movs	r1, #38	; 0x26
    458c:	5c52      	ldrb	r2, [r2, r1]
    458e:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    4590:	4313      	orrs	r3, r2
    4592:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    4594:	231d      	movs	r3, #29
    4596:	18fb      	adds	r3, r7, r3
    4598:	2200      	movs	r2, #0
    459a:	701a      	strb	r2, [r3, #0]

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    459c:	683b      	ldr	r3, [r7, #0]
    459e:	685b      	ldr	r3, [r3, #4]
    45a0:	2b00      	cmp	r3, #0
    45a2:	d01e      	beq.n	45e2 <_usart_set_config+0x14a>
    45a4:	2280      	movs	r2, #128	; 0x80
    45a6:	0552      	lsls	r2, r2, #21
    45a8:	4293      	cmp	r3, r2
    45aa:	d14f      	bne.n	464c <_usart_set_config+0x1b4>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    45ac:	683b      	ldr	r3, [r7, #0]
    45ae:	2227      	movs	r2, #39	; 0x27
    45b0:	5c9b      	ldrb	r3, [r3, r2]
    45b2:	2201      	movs	r2, #1
    45b4:	4053      	eors	r3, r2
    45b6:	b2db      	uxtb	r3, r3
    45b8:	2b00      	cmp	r3, #0
    45ba:	d046      	beq.n	464a <_usart_set_config+0x1b2>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    45bc:	683b      	ldr	r3, [r7, #0]
    45be:	6a1d      	ldr	r5, [r3, #32]
    45c0:	693b      	ldr	r3, [r7, #16]
    45c2:	b2db      	uxtb	r3, r3
    45c4:	0018      	movs	r0, r3
    45c6:	4b63      	ldr	r3, [pc, #396]	; (4754 <_usart_set_config+0x2bc>)
    45c8:	4798      	blx	r3
    45ca:	0001      	movs	r1, r0
    45cc:	231d      	movs	r3, #29
    45ce:	18fc      	adds	r4, r7, r3
    45d0:	230e      	movs	r3, #14
    45d2:	18fb      	adds	r3, r7, r3
    45d4:	001a      	movs	r2, r3
    45d6:	0028      	movs	r0, r5
    45d8:	4b5f      	ldr	r3, [pc, #380]	; (4758 <_usart_set_config+0x2c0>)
    45da:	4798      	blx	r3
    45dc:	0003      	movs	r3, r0
    45de:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    45e0:	e033      	b.n	464a <_usart_set_config+0x1b2>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    45e2:	683b      	ldr	r3, [r7, #0]
    45e4:	2227      	movs	r2, #39	; 0x27
    45e6:	5c9b      	ldrb	r3, [r3, r2]
    45e8:	2b00      	cmp	r3, #0
    45ea:	d014      	beq.n	4616 <_usart_set_config+0x17e>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    45ec:	683b      	ldr	r3, [r7, #0]
    45ee:	6a18      	ldr	r0, [r3, #32]
    45f0:	683b      	ldr	r3, [r7, #0]
    45f2:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    45f4:	231d      	movs	r3, #29
    45f6:	18fc      	adds	r4, r7, r3
    45f8:	231f      	movs	r3, #31
    45fa:	18fb      	adds	r3, r7, r3
    45fc:	781d      	ldrb	r5, [r3, #0]
    45fe:	230e      	movs	r3, #14
    4600:	18fa      	adds	r2, r7, r3
    4602:	231e      	movs	r3, #30
    4604:	18fb      	adds	r3, r7, r3
    4606:	781b      	ldrb	r3, [r3, #0]
    4608:	9300      	str	r3, [sp, #0]
    460a:	002b      	movs	r3, r5
    460c:	4d53      	ldr	r5, [pc, #332]	; (475c <_usart_set_config+0x2c4>)
    460e:	47a8      	blx	r5
    4610:	0003      	movs	r3, r0
    4612:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    4614:	e01a      	b.n	464c <_usart_set_config+0x1b4>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    4616:	683b      	ldr	r3, [r7, #0]
    4618:	6a1d      	ldr	r5, [r3, #32]
    461a:	693b      	ldr	r3, [r7, #16]
    461c:	b2db      	uxtb	r3, r3
    461e:	0018      	movs	r0, r3
    4620:	4b4c      	ldr	r3, [pc, #304]	; (4754 <_usart_set_config+0x2bc>)
    4622:	4798      	blx	r3
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    4624:	231d      	movs	r3, #29
    4626:	18fc      	adds	r4, r7, r3
    4628:	231f      	movs	r3, #31
    462a:	18fb      	adds	r3, r7, r3
    462c:	7819      	ldrb	r1, [r3, #0]
    462e:	230e      	movs	r3, #14
    4630:	18fa      	adds	r2, r7, r3
    4632:	231e      	movs	r3, #30
    4634:	18fb      	adds	r3, r7, r3
    4636:	781b      	ldrb	r3, [r3, #0]
    4638:	9300      	str	r3, [sp, #0]
    463a:	000b      	movs	r3, r1
    463c:	0001      	movs	r1, r0
    463e:	0028      	movs	r0, r5
    4640:	4d46      	ldr	r5, [pc, #280]	; (475c <_usart_set_config+0x2c4>)
    4642:	47a8      	blx	r5
    4644:	0003      	movs	r3, r0
    4646:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    4648:	e000      	b.n	464c <_usart_set_config+0x1b4>
			if (!config->use_external_clock) {
				status_code = _sercom_get_sync_baud_val(config->baudrate,
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    464a:	46c0      	nop			; (mov r8, r8)

			break;
	}

	/* Check if calculating the baud rate failed */
	if (status_code != STATUS_OK) {
    464c:	231d      	movs	r3, #29
    464e:	18fb      	adds	r3, r7, r3
    4650:	781b      	ldrb	r3, [r3, #0]
    4652:	2b00      	cmp	r3, #0
    4654:	d003      	beq.n	465e <_usart_set_config+0x1c6>
		/* Abort */
		return status_code;
    4656:	231d      	movs	r3, #29
    4658:	18fb      	adds	r3, r7, r3
    465a:	781b      	ldrb	r3, [r3, #0]
    465c:	e074      	b.n	4748 <_usart_set_config+0x2b0>
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    465e:	683b      	ldr	r3, [r7, #0]
    4660:	7e5b      	ldrb	r3, [r3, #25]
    4662:	2b00      	cmp	r3, #0
    4664:	d003      	beq.n	466e <_usart_set_config+0x1d6>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    4666:	683b      	ldr	r3, [r7, #0]
    4668:	7e9a      	ldrb	r2, [r3, #26]
    466a:	69bb      	ldr	r3, [r7, #24]
    466c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    466e:	687b      	ldr	r3, [r7, #4]
    4670:	0018      	movs	r0, r3
    4672:	4b3b      	ldr	r3, [pc, #236]	; (4760 <_usart_set_config+0x2c8>)
    4674:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    4676:	230e      	movs	r3, #14
    4678:	18fb      	adds	r3, r7, r3
    467a:	881a      	ldrh	r2, [r3, #0]
    467c:	69bb      	ldr	r3, [r7, #24]
    467e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    4680:	683b      	ldr	r3, [r7, #0]
    4682:	685b      	ldr	r3, [r3, #4]
    4684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4686:	4313      	orrs	r3, r2
    4688:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    468a:	683b      	ldr	r3, [r7, #0]
    468c:	2227      	movs	r2, #39	; 0x27
    468e:	5c9b      	ldrb	r3, [r3, r2]
    4690:	2201      	movs	r2, #1
    4692:	4053      	eors	r3, r2
    4694:	b2db      	uxtb	r3, r3
    4696:	2b00      	cmp	r3, #0
    4698:	d003      	beq.n	46a2 <_usart_set_config+0x20a>
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    469c:	2204      	movs	r2, #4
    469e:	4313      	orrs	r3, r2
    46a0:	627b      	str	r3, [r7, #36]	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    46a2:	683b      	ldr	r3, [r7, #0]
    46a4:	7a9a      	ldrb	r2, [r3, #10]
    46a6:	683b      	ldr	r3, [r7, #0]
    46a8:	7adb      	ldrb	r3, [r3, #11]
    46aa:	4313      	orrs	r3, r2
    46ac:	b2db      	uxtb	r3, r3
    46ae:	001a      	movs	r2, r3
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    46b0:	683b      	ldr	r3, [r7, #0]
    46b2:	7e5b      	ldrb	r3, [r3, #25]
    46b4:	029b      	lsls	r3, r3, #10
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    46b6:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    46b8:	683a      	ldr	r2, [r7, #0]
    46ba:	7f12      	ldrb	r2, [r2, #28]
    46bc:	0252      	lsls	r2, r2, #9
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    46be:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    46c0:	683a      	ldr	r2, [r7, #0]
    46c2:	7f52      	ldrb	r2, [r2, #29]
    46c4:	0212      	lsls	r2, r2, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    46c6:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    46c8:	683a      	ldr	r2, [r7, #0]
    46ca:	2124      	movs	r1, #36	; 0x24
    46cc:	5c52      	ldrb	r2, [r2, r1]
    46ce:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    46d0:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    46d2:	683a      	ldr	r2, [r7, #0]
    46d4:	2125      	movs	r1, #37	; 0x25
    46d6:	5c52      	ldrb	r2, [r2, r1]
    46d8:	0412      	lsls	r2, r2, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    46da:	4313      	orrs	r3, r2
    46dc:	623b      	str	r3, [r7, #32]
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    46de:	683b      	ldr	r3, [r7, #0]
    46e0:	891b      	ldrh	r3, [r3, #8]
    46e2:	2bff      	cmp	r3, #255	; 0xff
    46e4:	d00f      	beq.n	4706 <_usart_set_config+0x26e>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    46e6:	683b      	ldr	r3, [r7, #0]
    46e8:	7edb      	ldrb	r3, [r3, #27]
    46ea:	2b00      	cmp	r3, #0
    46ec:	d004      	beq.n	46f8 <_usart_set_config+0x260>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    46ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46f0:	22a0      	movs	r2, #160	; 0xa0
    46f2:	04d2      	lsls	r2, r2, #19
    46f4:	4313      	orrs	r3, r2
    46f6:	627b      	str	r3, [r7, #36]	; 0x24
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    46f8:	683b      	ldr	r3, [r7, #0]
    46fa:	891b      	ldrh	r3, [r3, #8]
    46fc:	001a      	movs	r2, r3
    46fe:	6a3b      	ldr	r3, [r7, #32]
    4700:	4313      	orrs	r3, r2
    4702:	623b      	str	r3, [r7, #32]
    4704:	e008      	b.n	4718 <_usart_set_config+0x280>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    4706:	683b      	ldr	r3, [r7, #0]
    4708:	7edb      	ldrb	r3, [r3, #27]
    470a:	2b00      	cmp	r3, #0
    470c:	d004      	beq.n	4718 <_usart_set_config+0x280>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4710:	2280      	movs	r2, #128	; 0x80
    4712:	04d2      	lsls	r2, r2, #19
    4714:	4313      	orrs	r3, r2
    4716:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set run mode during device sleep */
	if (config->run_in_standby) {
    4718:	683b      	ldr	r3, [r7, #0]
    471a:	222c      	movs	r2, #44	; 0x2c
    471c:	5c9b      	ldrb	r3, [r3, r2]
    471e:	2b00      	cmp	r3, #0
    4720:	d003      	beq.n	472a <_usart_set_config+0x292>
		/* Enable in sleep mode */
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    4722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4724:	2280      	movs	r2, #128	; 0x80
    4726:	4313      	orrs	r3, r2
    4728:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    472a:	687b      	ldr	r3, [r7, #4]
    472c:	0018      	movs	r0, r3
    472e:	4b0c      	ldr	r3, [pc, #48]	; (4760 <_usart_set_config+0x2c8>)
    4730:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    4732:	69bb      	ldr	r3, [r7, #24]
    4734:	6a3a      	ldr	r2, [r7, #32]
    4736:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4738:	687b      	ldr	r3, [r7, #4]
    473a:	0018      	movs	r0, r3
    473c:	4b08      	ldr	r3, [pc, #32]	; (4760 <_usart_set_config+0x2c8>)
    473e:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    4740:	69bb      	ldr	r3, [r7, #24]
    4742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4744:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    4746:	2300      	movs	r3, #0
}
    4748:	0018      	movs	r0, r3
    474a:	46bd      	mov	sp, r7
    474c:	b00a      	add	sp, #40	; 0x28
    474e:	bdb0      	pop	{r4, r5, r7, pc}
    4750:	00004e85 	.word	0x00004e85
    4754:	00006059 	.word	0x00006059
    4758:	000049e9 	.word	0x000049e9
    475c:	00004a49 	.word	0x00004a49
    4760:	00004475 	.word	0x00004475

00004764 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    4764:	b590      	push	{r4, r7, lr}
    4766:	b093      	sub	sp, #76	; 0x4c
    4768:	af00      	add	r7, sp, #0
    476a:	60f8      	str	r0, [r7, #12]
    476c:	60b9      	str	r1, [r7, #8]
    476e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    4770:	233b      	movs	r3, #59	; 0x3b
    4772:	18fb      	adds	r3, r7, r3
    4774:	2200      	movs	r2, #0
    4776:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4778:	68fb      	ldr	r3, [r7, #12]
    477a:	68ba      	ldr	r2, [r7, #8]
    477c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    477e:	68fb      	ldr	r3, [r7, #12]
    4780:	681b      	ldr	r3, [r3, #0]
    4782:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4784:	68fb      	ldr	r3, [r7, #12]
    4786:	681b      	ldr	r3, [r3, #0]
    4788:	0018      	movs	r0, r3
    478a:	4b84      	ldr	r3, [pc, #528]	; (499c <usart_init+0x238>)
    478c:	4798      	blx	r3
    478e:	0003      	movs	r3, r0
    4790:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4794:	3302      	adds	r3, #2
    4796:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    479a:	3314      	adds	r3, #20
    479c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    479e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    47a0:	681b      	ldr	r3, [r3, #0]
    47a2:	2201      	movs	r2, #1
    47a4:	4013      	ands	r3, r2
    47a6:	d001      	beq.n	47ac <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    47a8:	2305      	movs	r3, #5
    47aa:	e0f2      	b.n	4992 <usart_init+0x22e>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    47ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    47ae:	681b      	ldr	r3, [r3, #0]
    47b0:	2202      	movs	r2, #2
    47b2:	4013      	ands	r3, r2
    47b4:	d001      	beq.n	47ba <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    47b6:	231c      	movs	r3, #28
    47b8:	e0eb      	b.n	4992 <usart_init+0x22e>
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    47ba:	2201      	movs	r2, #1
    47bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    47be:	409a      	lsls	r2, r3
    47c0:	0013      	movs	r3, r2
    47c2:	0019      	movs	r1, r3
    47c4:	2002      	movs	r0, #2
    47c6:	4b76      	ldr	r3, [pc, #472]	; (49a0 <usart_init+0x23c>)
    47c8:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    47ca:	2324      	movs	r3, #36	; 0x24
    47cc:	18fb      	adds	r3, r7, r3
    47ce:	0018      	movs	r0, r3
    47d0:	4b74      	ldr	r3, [pc, #464]	; (49a4 <usart_init+0x240>)
    47d2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    47d4:	687b      	ldr	r3, [r7, #4]
    47d6:	222d      	movs	r2, #45	; 0x2d
    47d8:	5c9a      	ldrb	r2, [r3, r2]
    47da:	2324      	movs	r3, #36	; 0x24
    47dc:	18fb      	adds	r3, r7, r3
    47de:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    47e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    47e2:	b2db      	uxtb	r3, r3
    47e4:	2224      	movs	r2, #36	; 0x24
    47e6:	18ba      	adds	r2, r7, r2
    47e8:	0011      	movs	r1, r2
    47ea:	0018      	movs	r0, r3
    47ec:	4b6e      	ldr	r3, [pc, #440]	; (49a8 <usart_init+0x244>)
    47ee:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    47f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    47f2:	b2db      	uxtb	r3, r3
    47f4:	0018      	movs	r0, r3
    47f6:	4b6d      	ldr	r3, [pc, #436]	; (49ac <usart_init+0x248>)
    47f8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    47fa:	687b      	ldr	r3, [r7, #4]
    47fc:	222d      	movs	r2, #45	; 0x2d
    47fe:	5c9b      	ldrb	r3, [r3, r2]
    4800:	2100      	movs	r1, #0
    4802:	0018      	movs	r0, r3
    4804:	4b6a      	ldr	r3, [pc, #424]	; (49b0 <usart_init+0x24c>)
    4806:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    4808:	687b      	ldr	r3, [r7, #4]
    480a:	7ada      	ldrb	r2, [r3, #11]
    480c:	68fb      	ldr	r3, [r7, #12]
    480e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    4810:	687b      	ldr	r3, [r7, #4]
    4812:	2224      	movs	r2, #36	; 0x24
    4814:	5c9a      	ldrb	r2, [r3, r2]
    4816:	68fb      	ldr	r3, [r7, #12]
    4818:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    481a:	687b      	ldr	r3, [r7, #4]
    481c:	2225      	movs	r2, #37	; 0x25
    481e:	5c9a      	ldrb	r2, [r3, r2]
    4820:	68fb      	ldr	r3, [r7, #12]
    4822:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    4824:	687b      	ldr	r3, [r7, #4]
    4826:	7eda      	ldrb	r2, [r3, #27]
    4828:	68fb      	ldr	r3, [r7, #12]
    482a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    482c:	687b      	ldr	r3, [r7, #4]
    482e:	7f1a      	ldrb	r2, [r3, #28]
    4830:	68fb      	ldr	r3, [r7, #12]
    4832:	725a      	strb	r2, [r3, #9]
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    4834:	233b      	movs	r3, #59	; 0x3b
    4836:	18fc      	adds	r4, r7, r3
    4838:	687a      	ldr	r2, [r7, #4]
    483a:	68fb      	ldr	r3, [r7, #12]
    483c:	0011      	movs	r1, r2
    483e:	0018      	movs	r0, r3
    4840:	4b5c      	ldr	r3, [pc, #368]	; (49b4 <usart_init+0x250>)
    4842:	4798      	blx	r3
    4844:	0003      	movs	r3, r0
    4846:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    4848:	233b      	movs	r3, #59	; 0x3b
    484a:	18fb      	adds	r3, r7, r3
    484c:	781b      	ldrb	r3, [r3, #0]
    484e:	2b00      	cmp	r3, #0
    4850:	d003      	beq.n	485a <usart_init+0xf6>
		return status_code;
    4852:	233b      	movs	r3, #59	; 0x3b
    4854:	18fb      	adds	r3, r7, r3
    4856:	781b      	ldrb	r3, [r3, #0]
    4858:	e09b      	b.n	4992 <usart_init+0x22e>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    485a:	2320      	movs	r3, #32
    485c:	18fb      	adds	r3, r7, r3
    485e:	0018      	movs	r0, r3
    4860:	4b55      	ldr	r3, [pc, #340]	; (49b8 <usart_init+0x254>)
    4862:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4864:	2320      	movs	r3, #32
    4866:	18fb      	adds	r3, r7, r3
    4868:	2200      	movs	r2, #0
    486a:	705a      	strb	r2, [r3, #1]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    486c:	687b      	ldr	r3, [r7, #4]
    486e:	6b1a      	ldr	r2, [r3, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
    4870:	2310      	movs	r3, #16
    4872:	18fb      	adds	r3, r7, r3
    4874:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    4876:	687b      	ldr	r3, [r7, #4]
    4878:	6b5a      	ldr	r2, [r3, #52]	; 0x34

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
    487a:	2310      	movs	r3, #16
    487c:	18fb      	adds	r3, r7, r3
    487e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    4880:	687b      	ldr	r3, [r7, #4]
    4882:	6b9a      	ldr	r2, [r3, #56]	; 0x38

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
    4884:	2310      	movs	r3, #16
    4886:	18fb      	adds	r3, r7, r3
    4888:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    488a:	687b      	ldr	r3, [r7, #4]
    488c:	6bda      	ldr	r2, [r3, #60]	; 0x3c

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
    488e:	2310      	movs	r3, #16
    4890:	18fb      	adds	r3, r7, r3
    4892:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4894:	2347      	movs	r3, #71	; 0x47
    4896:	18fb      	adds	r3, r7, r3
    4898:	2200      	movs	r2, #0
    489a:	701a      	strb	r2, [r3, #0]
    489c:	e02c      	b.n	48f8 <usart_init+0x194>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    489e:	2347      	movs	r3, #71	; 0x47
    48a0:	18fb      	adds	r3, r7, r3
    48a2:	781a      	ldrb	r2, [r3, #0]
    48a4:	2310      	movs	r3, #16
    48a6:	18fb      	adds	r3, r7, r3
    48a8:	0092      	lsls	r2, r2, #2
    48aa:	58d3      	ldr	r3, [r2, r3]
    48ac:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    48ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    48b0:	2b00      	cmp	r3, #0
    48b2:	d109      	bne.n	48c8 <usart_init+0x164>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    48b4:	2347      	movs	r3, #71	; 0x47
    48b6:	18fb      	adds	r3, r7, r3
    48b8:	781a      	ldrb	r2, [r3, #0]
    48ba:	68bb      	ldr	r3, [r7, #8]
    48bc:	0011      	movs	r1, r2
    48be:	0018      	movs	r0, r3
    48c0:	4b3e      	ldr	r3, [pc, #248]	; (49bc <usart_init+0x258>)
    48c2:	4798      	blx	r3
    48c4:	0003      	movs	r3, r0
    48c6:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    48c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    48ca:	3301      	adds	r3, #1
    48cc:	d00d      	beq.n	48ea <usart_init+0x186>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    48ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    48d0:	b2da      	uxtb	r2, r3
    48d2:	2320      	movs	r3, #32
    48d4:	18fb      	adds	r3, r7, r3
    48d6:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    48d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    48da:	0c1b      	lsrs	r3, r3, #16
    48dc:	b2db      	uxtb	r3, r3
    48de:	2220      	movs	r2, #32
    48e0:	18ba      	adds	r2, r7, r2
    48e2:	0011      	movs	r1, r2
    48e4:	0018      	movs	r0, r3
    48e6:	4b36      	ldr	r3, [pc, #216]	; (49c0 <usart_init+0x25c>)
    48e8:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    48ea:	2347      	movs	r3, #71	; 0x47
    48ec:	18fb      	adds	r3, r7, r3
    48ee:	781a      	ldrb	r2, [r3, #0]
    48f0:	2347      	movs	r3, #71	; 0x47
    48f2:	18fb      	adds	r3, r7, r3
    48f4:	3201      	adds	r2, #1
    48f6:	701a      	strb	r2, [r3, #0]
    48f8:	2347      	movs	r3, #71	; 0x47
    48fa:	18fb      	adds	r3, r7, r3
    48fc:	781b      	ldrb	r3, [r3, #0]
    48fe:	2b03      	cmp	r3, #3
    4900:	d9cd      	bls.n	489e <usart_init+0x13a>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    4902:	2300      	movs	r3, #0
    4904:	63fb      	str	r3, [r7, #60]	; 0x3c
    4906:	e00a      	b.n	491e <usart_init+0x1ba>
		module->callback[i]            = NULL;
    4908:	68fa      	ldr	r2, [r7, #12]
    490a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    490c:	3302      	adds	r3, #2
    490e:	009b      	lsls	r3, r3, #2
    4910:	18d3      	adds	r3, r2, r3
    4912:	3304      	adds	r3, #4
    4914:	2200      	movs	r2, #0
    4916:	601a      	str	r2, [r3, #0]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    4918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    491a:	3301      	adds	r3, #1
    491c:	63fb      	str	r3, [r7, #60]	; 0x3c
    491e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4920:	2b05      	cmp	r3, #5
    4922:	d9f1      	bls.n	4908 <usart_init+0x1a4>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    4924:	68fb      	ldr	r3, [r7, #12]
    4926:	2200      	movs	r2, #0
    4928:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    492a:	68fb      	ldr	r3, [r7, #12]
    492c:	2200      	movs	r2, #0
    492e:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    4930:	68fb      	ldr	r3, [r7, #12]
    4932:	2200      	movs	r2, #0
    4934:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    4936:	68fb      	ldr	r3, [r7, #12]
    4938:	2200      	movs	r2, #0
    493a:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    493c:	68fb      	ldr	r3, [r7, #12]
    493e:	2230      	movs	r2, #48	; 0x30
    4940:	2100      	movs	r1, #0
    4942:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    4944:	68fb      	ldr	r3, [r7, #12]
    4946:	2231      	movs	r2, #49	; 0x31
    4948:	2100      	movs	r1, #0
    494a:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    494c:	68fb      	ldr	r3, [r7, #12]
    494e:	2232      	movs	r2, #50	; 0x32
    4950:	2100      	movs	r1, #0
    4952:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    4954:	68fb      	ldr	r3, [r7, #12]
    4956:	2233      	movs	r2, #51	; 0x33
    4958:	2100      	movs	r1, #0
    495a:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    495c:	68fb      	ldr	r3, [r7, #12]
    495e:	681b      	ldr	r3, [r3, #0]
    4960:	2227      	movs	r2, #39	; 0x27
    4962:	18bc      	adds	r4, r7, r2
    4964:	0018      	movs	r0, r3
    4966:	4b0d      	ldr	r3, [pc, #52]	; (499c <usart_init+0x238>)
    4968:	4798      	blx	r3
    496a:	0003      	movs	r3, r0
    496c:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    496e:	4a15      	ldr	r2, [pc, #84]	; (49c4 <usart_init+0x260>)
    4970:	2327      	movs	r3, #39	; 0x27
    4972:	18fb      	adds	r3, r7, r3
    4974:	781b      	ldrb	r3, [r3, #0]
    4976:	0011      	movs	r1, r2
    4978:	0018      	movs	r0, r3
    497a:	4b13      	ldr	r3, [pc, #76]	; (49c8 <usart_init+0x264>)
    497c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    497e:	2327      	movs	r3, #39	; 0x27
    4980:	18fb      	adds	r3, r7, r3
    4982:	781a      	ldrb	r2, [r3, #0]
    4984:	4b11      	ldr	r3, [pc, #68]	; (49cc <usart_init+0x268>)
    4986:	0092      	lsls	r2, r2, #2
    4988:	68f9      	ldr	r1, [r7, #12]
    498a:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    498c:	233b      	movs	r3, #59	; 0x3b
    498e:	18fb      	adds	r3, r7, r3
    4990:	781b      	ldrb	r3, [r3, #0]
}
    4992:	0018      	movs	r0, r3
    4994:	46bd      	mov	sp, r7
    4996:	b013      	add	sp, #76	; 0x4c
    4998:	bd90      	pop	{r4, r7, pc}
    499a:	46c0      	nop			; (mov r8, r8)
    499c:	00004e85 	.word	0x00004e85
    49a0:	000043d1 	.word	0x000043d1
    49a4:	000043b9 	.word	0x000043b9
    49a8:	00005f35 	.word	0x00005f35
    49ac:	00005f79 	.word	0x00005f79
    49b0:	00004c29 	.word	0x00004c29
    49b4:	00004499 	.word	0x00004499
    49b8:	0000442d 	.word	0x0000442d
    49bc:	00004cb5 	.word	0x00004cb5
    49c0:	00006219 	.word	0x00006219
    49c4:	00003dbd 	.word	0x00003dbd
    49c8:	00004ed5 	.word	0x00004ed5
    49cc:	20000e44 	.word	0x20000e44

000049d0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    49d0:	b580      	push	{r7, lr}
    49d2:	b082      	sub	sp, #8
    49d4:	af00      	add	r7, sp, #0
    49d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    49d8:	687b      	ldr	r3, [r7, #4]
    49da:	2200      	movs	r2, #0
    49dc:	701a      	strb	r2, [r3, #0]
}
    49de:	46c0      	nop			; (mov r8, r8)
    49e0:	46bd      	mov	sp, r7
    49e2:	b002      	add	sp, #8
    49e4:	bd80      	pop	{r7, pc}
    49e6:	46c0      	nop			; (mov r8, r8)

000049e8 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    49e8:	b580      	push	{r7, lr}
    49ea:	b086      	sub	sp, #24
    49ec:	af00      	add	r7, sp, #0
    49ee:	60f8      	str	r0, [r7, #12]
    49f0:	60b9      	str	r1, [r7, #8]
    49f2:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    49f4:	2316      	movs	r3, #22
    49f6:	18fb      	adds	r3, r7, r3
    49f8:	2200      	movs	r2, #0
    49fa:	801a      	strh	r2, [r3, #0]

	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
    49fc:	68bb      	ldr	r3, [r7, #8]
    49fe:	085a      	lsrs	r2, r3, #1
    4a00:	68fb      	ldr	r3, [r7, #12]
    4a02:	429a      	cmp	r2, r3
    4a04:	d201      	bcs.n	4a0a <_sercom_get_sync_baud_val+0x22>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4a06:	2340      	movs	r3, #64	; 0x40
    4a08:	e018      	b.n	4a3c <_sercom_get_sync_baud_val+0x54>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	baud_calculated = (external_clock / (2 * baudrate)) - 1;
    4a0a:	68fb      	ldr	r3, [r7, #12]
    4a0c:	005a      	lsls	r2, r3, #1
    4a0e:	4b0d      	ldr	r3, [pc, #52]	; (4a44 <_sercom_get_sync_baud_val+0x5c>)
    4a10:	0011      	movs	r1, r2
    4a12:	68b8      	ldr	r0, [r7, #8]
    4a14:	4798      	blx	r3
    4a16:	0003      	movs	r3, r0
    4a18:	b29a      	uxth	r2, r3
    4a1a:	2316      	movs	r3, #22
    4a1c:	18fb      	adds	r3, r7, r3
    4a1e:	3a01      	subs	r2, #1
    4a20:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    4a22:	2316      	movs	r3, #22
    4a24:	18fb      	adds	r3, r7, r3
    4a26:	881b      	ldrh	r3, [r3, #0]
    4a28:	2bff      	cmp	r3, #255	; 0xff
    4a2a:	d901      	bls.n	4a30 <_sercom_get_sync_baud_val+0x48>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4a2c:	2340      	movs	r3, #64	; 0x40
    4a2e:	e005      	b.n	4a3c <_sercom_get_sync_baud_val+0x54>
	} else {
		*baudvalue = baud_calculated;
    4a30:	687b      	ldr	r3, [r7, #4]
    4a32:	2216      	movs	r2, #22
    4a34:	18ba      	adds	r2, r7, r2
    4a36:	8812      	ldrh	r2, [r2, #0]
    4a38:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    4a3a:	2300      	movs	r3, #0
	}
}
    4a3c:	0018      	movs	r0, r3
    4a3e:	46bd      	mov	sp, r7
    4a40:	b006      	add	sp, #24
    4a42:	bd80      	pop	{r7, pc}
    4a44:	000063c5 	.word	0x000063c5

00004a48 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    4a48:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a4a:	b09d      	sub	sp, #116	; 0x74
    4a4c:	af00      	add	r7, sp, #0
    4a4e:	64f8      	str	r0, [r7, #76]	; 0x4c
    4a50:	64b9      	str	r1, [r7, #72]	; 0x48
    4a52:	647a      	str	r2, [r7, #68]	; 0x44
    4a54:	2243      	movs	r2, #67	; 0x43
    4a56:	18ba      	adds	r2, r7, r2
    4a58:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    4a5a:	2300      	movs	r3, #0
    4a5c:	2400      	movs	r4, #0
    4a5e:	65bb      	str	r3, [r7, #88]	; 0x58
    4a60:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
    4a62:	2300      	movs	r3, #0
    4a64:	2400      	movs	r4, #0
    4a66:	653b      	str	r3, [r7, #80]	; 0x50
    4a68:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
    4a6a:	2300      	movs	r3, #0
    4a6c:	2400      	movs	r4, #0
    4a6e:	66bb      	str	r3, [r7, #104]	; 0x68
    4a70:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) >= peripheral_clock) {
    4a72:	2348      	movs	r3, #72	; 0x48
    4a74:	2240      	movs	r2, #64	; 0x40
    4a76:	4694      	mov	ip, r2
    4a78:	44bc      	add	ip, r7
    4a7a:	4463      	add	r3, ip
    4a7c:	781a      	ldrb	r2, [r3, #0]
    4a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4a80:	435a      	muls	r2, r3
    4a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4a84:	429a      	cmp	r2, r3
    4a86:	d301      	bcc.n	4a8c <_sercom_get_async_baud_val+0x44>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4a88:	2340      	movs	r3, #64	; 0x40
    4a8a:	e0c3      	b.n	4c14 <_sercom_get_async_baud_val+0x1cc>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    4a8c:	2343      	movs	r3, #67	; 0x43
    4a8e:	18fb      	adds	r3, r7, r3
    4a90:	781b      	ldrb	r3, [r3, #0]
    4a92:	2b00      	cmp	r3, #0
    4a94:	d13d      	bne.n	4b12 <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
    4a96:	2348      	movs	r3, #72	; 0x48
    4a98:	2240      	movs	r2, #64	; 0x40
    4a9a:	4694      	mov	ip, r2
    4a9c:	44bc      	add	ip, r7
    4a9e:	4463      	add	r3, ip
    4aa0:	781b      	ldrb	r3, [r3, #0]
    4aa2:	b2db      	uxtb	r3, r3
    4aa4:	61bb      	str	r3, [r7, #24]
    4aa6:	2300      	movs	r3, #0
    4aa8:	61fb      	str	r3, [r7, #28]
    4aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4aac:	613b      	str	r3, [r7, #16]
    4aae:	2300      	movs	r3, #0
    4ab0:	617b      	str	r3, [r7, #20]
    4ab2:	4c5a      	ldr	r4, [pc, #360]	; (4c1c <_sercom_get_async_baud_val+0x1d4>)
    4ab4:	693a      	ldr	r2, [r7, #16]
    4ab6:	697b      	ldr	r3, [r7, #20]
    4ab8:	69b8      	ldr	r0, [r7, #24]
    4aba:	69f9      	ldr	r1, [r7, #28]
    4abc:	47a0      	blx	r4
    4abe:	0003      	movs	r3, r0
    4ac0:	000c      	movs	r4, r1
    4ac2:	001b      	movs	r3, r3
    4ac4:	60fb      	str	r3, [r7, #12]
    4ac6:	2300      	movs	r3, #0
    4ac8:	60bb      	str	r3, [r7, #8]
    4aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4acc:	603b      	str	r3, [r7, #0]
    4ace:	2300      	movs	r3, #0
    4ad0:	607b      	str	r3, [r7, #4]
    4ad2:	4c53      	ldr	r4, [pc, #332]	; (4c20 <_sercom_get_async_baud_val+0x1d8>)
    4ad4:	683a      	ldr	r2, [r7, #0]
    4ad6:	687b      	ldr	r3, [r7, #4]
    4ad8:	68b8      	ldr	r0, [r7, #8]
    4ada:	68f9      	ldr	r1, [r7, #12]
    4adc:	47a0      	blx	r4
    4ade:	0003      	movs	r3, r0
    4ae0:	000c      	movs	r4, r1
    4ae2:	65bb      	str	r3, [r7, #88]	; 0x58
    4ae4:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
    4ae6:	2100      	movs	r1, #0
    4ae8:	2201      	movs	r2, #1
    4aea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4aec:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    4aee:	1ac9      	subs	r1, r1, r3
    4af0:	41a2      	sbcs	r2, r4
    4af2:	000b      	movs	r3, r1
    4af4:	0014      	movs	r4, r2
    4af6:	653b      	str	r3, [r7, #80]	; 0x50
    4af8:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
    4afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4afc:	0c1b      	lsrs	r3, r3, #16
    4afe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    4b00:	0416      	lsls	r6, r2, #16
    4b02:	431e      	orrs	r6, r3
    4b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4b06:	041d      	lsls	r5, r3, #16
    4b08:	0033      	movs	r3, r6
    4b0a:	66bb      	str	r3, [r7, #104]	; 0x68
    4b0c:	2300      	movs	r3, #0
    4b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    4b10:	e07a      	b.n	4c08 <_sercom_get_async_baud_val+0x1c0>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    4b12:	2343      	movs	r3, #67	; 0x43
    4b14:	18fb      	adds	r3, r7, r3
    4b16:	781b      	ldrb	r3, [r3, #0]
    4b18:	2b01      	cmp	r3, #1
    4b1a:	d000      	beq.n	4b1e <_sercom_get_async_baud_val+0xd6>
    4b1c:	e074      	b.n	4c08 <_sercom_get_async_baud_val+0x1c0>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    4b1e:	2327      	movs	r3, #39	; 0x27
    4b20:	2240      	movs	r2, #64	; 0x40
    4b22:	4694      	mov	ip, r2
    4b24:	44bc      	add	ip, r7
    4b26:	4463      	add	r3, ip
    4b28:	2200      	movs	r2, #0
    4b2a:	701a      	strb	r2, [r3, #0]
    4b2c:	e04b      	b.n	4bc6 <_sercom_get_async_baud_val+0x17e>
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
    4b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4b30:	633b      	str	r3, [r7, #48]	; 0x30
    4b32:	2300      	movs	r3, #0
    4b34:	637b      	str	r3, [r7, #52]	; 0x34
    4b36:	6b39      	ldr	r1, [r7, #48]	; 0x30
    4b38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4b3a:	000b      	movs	r3, r1
    4b3c:	0f5b      	lsrs	r3, r3, #29
    4b3e:	0010      	movs	r0, r2
    4b40:	00c0      	lsls	r0, r0, #3
    4b42:	63f8      	str	r0, [r7, #60]	; 0x3c
    4b44:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    4b46:	4318      	orrs	r0, r3
    4b48:	63f8      	str	r0, [r7, #60]	; 0x3c
    4b4a:	000b      	movs	r3, r1
    4b4c:	00db      	lsls	r3, r3, #3
    4b4e:	63bb      	str	r3, [r7, #56]	; 0x38
    4b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4b52:	62bb      	str	r3, [r7, #40]	; 0x28
    4b54:	2300      	movs	r3, #0
    4b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    4b58:	2348      	movs	r3, #72	; 0x48
    4b5a:	2240      	movs	r2, #64	; 0x40
    4b5c:	4694      	mov	ip, r2
    4b5e:	44bc      	add	ip, r7
    4b60:	4463      	add	r3, ip
    4b62:	781b      	ldrb	r3, [r3, #0]
    4b64:	b2db      	uxtb	r3, r3
    4b66:	623b      	str	r3, [r7, #32]
    4b68:	2300      	movs	r3, #0
    4b6a:	627b      	str	r3, [r7, #36]	; 0x24
    4b6c:	4c2b      	ldr	r4, [pc, #172]	; (4c1c <_sercom_get_async_baud_val+0x1d4>)
    4b6e:	6a3a      	ldr	r2, [r7, #32]
    4b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4b72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    4b74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    4b76:	47a0      	blx	r4
    4b78:	0003      	movs	r3, r0
    4b7a:	000c      	movs	r4, r1
    4b7c:	001a      	movs	r2, r3
    4b7e:	0023      	movs	r3, r4
    4b80:	4c27      	ldr	r4, [pc, #156]	; (4c20 <_sercom_get_async_baud_val+0x1d8>)
    4b82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    4b84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    4b86:	47a0      	blx	r4
    4b88:	0003      	movs	r3, r0
    4b8a:	000c      	movs	r4, r1
    4b8c:	001a      	movs	r2, r3
    4b8e:	2327      	movs	r3, #39	; 0x27
    4b90:	2140      	movs	r1, #64	; 0x40
    4b92:	468c      	mov	ip, r1
    4b94:	44bc      	add	ip, r7
    4b96:	4463      	add	r3, ip
    4b98:	781b      	ldrb	r3, [r3, #0]
    4b9a:	1ad3      	subs	r3, r2, r3
    4b9c:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
    4b9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4ba0:	08db      	lsrs	r3, r3, #3
    4ba2:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
    4ba4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4ba6:	4a1f      	ldr	r2, [pc, #124]	; (4c24 <_sercom_get_async_baud_val+0x1dc>)
    4ba8:	4293      	cmp	r3, r2
    4baa:	d915      	bls.n	4bd8 <_sercom_get_async_baud_val+0x190>
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    4bac:	2327      	movs	r3, #39	; 0x27
    4bae:	2240      	movs	r2, #64	; 0x40
    4bb0:	4694      	mov	ip, r2
    4bb2:	44bc      	add	ip, r7
    4bb4:	4463      	add	r3, ip
    4bb6:	781a      	ldrb	r2, [r3, #0]
    4bb8:	2327      	movs	r3, #39	; 0x27
    4bba:	2140      	movs	r1, #64	; 0x40
    4bbc:	468c      	mov	ip, r1
    4bbe:	44bc      	add	ip, r7
    4bc0:	4463      	add	r3, ip
    4bc2:	3201      	adds	r2, #1
    4bc4:	701a      	strb	r2, [r3, #0]
    4bc6:	2327      	movs	r3, #39	; 0x27
    4bc8:	2240      	movs	r2, #64	; 0x40
    4bca:	4694      	mov	ip, r2
    4bcc:	44bc      	add	ip, r7
    4bce:	4463      	add	r3, ip
    4bd0:	781b      	ldrb	r3, [r3, #0]
    4bd2:	2b07      	cmp	r3, #7
    4bd4:	d9ab      	bls.n	4b2e <_sercom_get_async_baud_val+0xe6>
    4bd6:	e000      	b.n	4bda <_sercom_get_async_baud_val+0x192>
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
    4bd8:	46c0      	nop			; (mov r8, r8)
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    4bda:	2327      	movs	r3, #39	; 0x27
    4bdc:	2240      	movs	r2, #64	; 0x40
    4bde:	4694      	mov	ip, r2
    4be0:	44bc      	add	ip, r7
    4be2:	4463      	add	r3, ip
    4be4:	781b      	ldrb	r3, [r3, #0]
    4be6:	2b08      	cmp	r3, #8
    4be8:	d101      	bne.n	4bee <_sercom_get_async_baud_val+0x1a6>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4bea:	2340      	movs	r3, #64	; 0x40
    4bec:	e012      	b.n	4c14 <_sercom_get_async_baud_val+0x1cc>
		}
		baud_calculated = baud_int | (baud_fp << 13);
    4bee:	2327      	movs	r3, #39	; 0x27
    4bf0:	2240      	movs	r2, #64	; 0x40
    4bf2:	4694      	mov	ip, r2
    4bf4:	44bc      	add	ip, r7
    4bf6:	4463      	add	r3, ip
    4bf8:	781b      	ldrb	r3, [r3, #0]
    4bfa:	035b      	lsls	r3, r3, #13
    4bfc:	001a      	movs	r2, r3
    4bfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4c00:	4313      	orrs	r3, r2
    4c02:	66bb      	str	r3, [r7, #104]	; 0x68
    4c04:	2300      	movs	r3, #0
    4c06:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
    4c08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4c0a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    4c0c:	b29a      	uxth	r2, r3
    4c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4c10:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    4c12:	2300      	movs	r3, #0
}
    4c14:	0018      	movs	r0, r3
    4c16:	46bd      	mov	sp, r7
    4c18:	b01d      	add	sp, #116	; 0x74
    4c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c1c:	0000651d 	.word	0x0000651d
    4c20:	000064dd 	.word	0x000064dd
    4c24:	00001fff 	.word	0x00001fff

00004c28 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4c28:	b580      	push	{r7, lr}
    4c2a:	b084      	sub	sp, #16
    4c2c:	af00      	add	r7, sp, #0
    4c2e:	0002      	movs	r2, r0
    4c30:	1dfb      	adds	r3, r7, #7
    4c32:	701a      	strb	r2, [r3, #0]
    4c34:	1dbb      	adds	r3, r7, #6
    4c36:	1c0a      	adds	r2, r1, #0
    4c38:	701a      	strb	r2, [r3, #0]
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
    4c3a:	4b1a      	ldr	r3, [pc, #104]	; (4ca4 <sercom_set_gclk_generator+0x7c>)
    4c3c:	781b      	ldrb	r3, [r3, #0]
    4c3e:	2201      	movs	r2, #1
    4c40:	4053      	eors	r3, r2
    4c42:	b2db      	uxtb	r3, r3
    4c44:	2b00      	cmp	r3, #0
    4c46:	d103      	bne.n	4c50 <sercom_set_gclk_generator+0x28>
    4c48:	1dbb      	adds	r3, r7, #6
    4c4a:	781b      	ldrb	r3, [r3, #0]
    4c4c:	2b00      	cmp	r3, #0
    4c4e:	d01b      	beq.n	4c88 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4c50:	230c      	movs	r3, #12
    4c52:	18fb      	adds	r3, r7, r3
    4c54:	0018      	movs	r0, r3
    4c56:	4b14      	ldr	r3, [pc, #80]	; (4ca8 <sercom_set_gclk_generator+0x80>)
    4c58:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    4c5a:	230c      	movs	r3, #12
    4c5c:	18fb      	adds	r3, r7, r3
    4c5e:	1dfa      	adds	r2, r7, #7
    4c60:	7812      	ldrb	r2, [r2, #0]
    4c62:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4c64:	230c      	movs	r3, #12
    4c66:	18fb      	adds	r3, r7, r3
    4c68:	0019      	movs	r1, r3
    4c6a:	2013      	movs	r0, #19
    4c6c:	4b0f      	ldr	r3, [pc, #60]	; (4cac <sercom_set_gclk_generator+0x84>)
    4c6e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4c70:	2013      	movs	r0, #19
    4c72:	4b0f      	ldr	r3, [pc, #60]	; (4cb0 <sercom_set_gclk_generator+0x88>)
    4c74:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
    4c76:	4b0b      	ldr	r3, [pc, #44]	; (4ca4 <sercom_set_gclk_generator+0x7c>)
    4c78:	1dfa      	adds	r2, r7, #7
    4c7a:	7812      	ldrb	r2, [r2, #0]
    4c7c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    4c7e:	4b09      	ldr	r3, [pc, #36]	; (4ca4 <sercom_set_gclk_generator+0x7c>)
    4c80:	2201      	movs	r2, #1
    4c82:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    4c84:	2300      	movs	r3, #0
    4c86:	e008      	b.n	4c9a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    4c88:	4b06      	ldr	r3, [pc, #24]	; (4ca4 <sercom_set_gclk_generator+0x7c>)
    4c8a:	785b      	ldrb	r3, [r3, #1]
    4c8c:	1dfa      	adds	r2, r7, #7
    4c8e:	7812      	ldrb	r2, [r2, #0]
    4c90:	429a      	cmp	r2, r3
    4c92:	d101      	bne.n	4c98 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config. */
		return STATUS_OK;
    4c94:	2300      	movs	r3, #0
    4c96:	e000      	b.n	4c9a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
    4c98:	231d      	movs	r3, #29
}
    4c9a:	0018      	movs	r0, r3
    4c9c:	46bd      	mov	sp, r7
    4c9e:	b004      	add	sp, #16
    4ca0:	bd80      	pop	{r7, pc}
    4ca2:	46c0      	nop			; (mov r8, r8)
    4ca4:	20000d54 	.word	0x20000d54
    4ca8:	000049d1 	.word	0x000049d1
    4cac:	00005f35 	.word	0x00005f35
    4cb0:	00005f79 	.word	0x00005f79

00004cb4 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    4cb4:	b580      	push	{r7, lr}
    4cb6:	b082      	sub	sp, #8
    4cb8:	af00      	add	r7, sp, #0
    4cba:	6078      	str	r0, [r7, #4]
    4cbc:	000a      	movs	r2, r1
    4cbe:	1cfb      	adds	r3, r7, #3
    4cc0:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    4cc2:	687b      	ldr	r3, [r7, #4]
    4cc4:	4a4d      	ldr	r2, [pc, #308]	; (4dfc <_sercom_get_default_pad+0x148>)
    4cc6:	4293      	cmp	r3, r2
    4cc8:	d03f      	beq.n	4d4a <_sercom_get_default_pad+0x96>
    4cca:	4a4c      	ldr	r2, [pc, #304]	; (4dfc <_sercom_get_default_pad+0x148>)
    4ccc:	4293      	cmp	r3, r2
    4cce:	d806      	bhi.n	4cde <_sercom_get_default_pad+0x2a>
    4cd0:	4a4b      	ldr	r2, [pc, #300]	; (4e00 <_sercom_get_default_pad+0x14c>)
    4cd2:	4293      	cmp	r3, r2
    4cd4:	d00f      	beq.n	4cf6 <_sercom_get_default_pad+0x42>
    4cd6:	4a4b      	ldr	r2, [pc, #300]	; (4e04 <_sercom_get_default_pad+0x150>)
    4cd8:	4293      	cmp	r3, r2
    4cda:	d021      	beq.n	4d20 <_sercom_get_default_pad+0x6c>
    4cdc:	e089      	b.n	4df2 <_sercom_get_default_pad+0x13e>
    4cde:	4a4a      	ldr	r2, [pc, #296]	; (4e08 <_sercom_get_default_pad+0x154>)
    4ce0:	4293      	cmp	r3, r2
    4ce2:	d100      	bne.n	4ce6 <_sercom_get_default_pad+0x32>
    4ce4:	e05b      	b.n	4d9e <_sercom_get_default_pad+0xea>
    4ce6:	4a49      	ldr	r2, [pc, #292]	; (4e0c <_sercom_get_default_pad+0x158>)
    4ce8:	4293      	cmp	r3, r2
    4cea:	d100      	bne.n	4cee <_sercom_get_default_pad+0x3a>
    4cec:	e06c      	b.n	4dc8 <_sercom_get_default_pad+0x114>
    4cee:	4a48      	ldr	r2, [pc, #288]	; (4e10 <_sercom_get_default_pad+0x15c>)
    4cf0:	4293      	cmp	r3, r2
    4cf2:	d03f      	beq.n	4d74 <_sercom_get_default_pad+0xc0>
    4cf4:	e07d      	b.n	4df2 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4cf6:	1cfb      	adds	r3, r7, #3
    4cf8:	781b      	ldrb	r3, [r3, #0]
    4cfa:	2b01      	cmp	r3, #1
    4cfc:	d00a      	beq.n	4d14 <_sercom_get_default_pad+0x60>
    4cfe:	dc02      	bgt.n	4d06 <_sercom_get_default_pad+0x52>
    4d00:	2b00      	cmp	r3, #0
    4d02:	d005      	beq.n	4d10 <_sercom_get_default_pad+0x5c>
    4d04:	e075      	b.n	4df2 <_sercom_get_default_pad+0x13e>
    4d06:	2b02      	cmp	r3, #2
    4d08:	d006      	beq.n	4d18 <_sercom_get_default_pad+0x64>
    4d0a:	2b03      	cmp	r3, #3
    4d0c:	d006      	beq.n	4d1c <_sercom_get_default_pad+0x68>
    4d0e:	e070      	b.n	4df2 <_sercom_get_default_pad+0x13e>
    4d10:	4b40      	ldr	r3, [pc, #256]	; (4e14 <_sercom_get_default_pad+0x160>)
    4d12:	e06f      	b.n	4df4 <_sercom_get_default_pad+0x140>
    4d14:	4b40      	ldr	r3, [pc, #256]	; (4e18 <_sercom_get_default_pad+0x164>)
    4d16:	e06d      	b.n	4df4 <_sercom_get_default_pad+0x140>
    4d18:	4b40      	ldr	r3, [pc, #256]	; (4e1c <_sercom_get_default_pad+0x168>)
    4d1a:	e06b      	b.n	4df4 <_sercom_get_default_pad+0x140>
    4d1c:	4b40      	ldr	r3, [pc, #256]	; (4e20 <_sercom_get_default_pad+0x16c>)
    4d1e:	e069      	b.n	4df4 <_sercom_get_default_pad+0x140>
    4d20:	1cfb      	adds	r3, r7, #3
    4d22:	781b      	ldrb	r3, [r3, #0]
    4d24:	2b01      	cmp	r3, #1
    4d26:	d00a      	beq.n	4d3e <_sercom_get_default_pad+0x8a>
    4d28:	dc02      	bgt.n	4d30 <_sercom_get_default_pad+0x7c>
    4d2a:	2b00      	cmp	r3, #0
    4d2c:	d005      	beq.n	4d3a <_sercom_get_default_pad+0x86>
    4d2e:	e060      	b.n	4df2 <_sercom_get_default_pad+0x13e>
    4d30:	2b02      	cmp	r3, #2
    4d32:	d006      	beq.n	4d42 <_sercom_get_default_pad+0x8e>
    4d34:	2b03      	cmp	r3, #3
    4d36:	d006      	beq.n	4d46 <_sercom_get_default_pad+0x92>
    4d38:	e05b      	b.n	4df2 <_sercom_get_default_pad+0x13e>
    4d3a:	2303      	movs	r3, #3
    4d3c:	e05a      	b.n	4df4 <_sercom_get_default_pad+0x140>
    4d3e:	4b39      	ldr	r3, [pc, #228]	; (4e24 <_sercom_get_default_pad+0x170>)
    4d40:	e058      	b.n	4df4 <_sercom_get_default_pad+0x140>
    4d42:	4b39      	ldr	r3, [pc, #228]	; (4e28 <_sercom_get_default_pad+0x174>)
    4d44:	e056      	b.n	4df4 <_sercom_get_default_pad+0x140>
    4d46:	4b39      	ldr	r3, [pc, #228]	; (4e2c <_sercom_get_default_pad+0x178>)
    4d48:	e054      	b.n	4df4 <_sercom_get_default_pad+0x140>
    4d4a:	1cfb      	adds	r3, r7, #3
    4d4c:	781b      	ldrb	r3, [r3, #0]
    4d4e:	2b01      	cmp	r3, #1
    4d50:	d00a      	beq.n	4d68 <_sercom_get_default_pad+0xb4>
    4d52:	dc02      	bgt.n	4d5a <_sercom_get_default_pad+0xa6>
    4d54:	2b00      	cmp	r3, #0
    4d56:	d005      	beq.n	4d64 <_sercom_get_default_pad+0xb0>
    4d58:	e04b      	b.n	4df2 <_sercom_get_default_pad+0x13e>
    4d5a:	2b02      	cmp	r3, #2
    4d5c:	d006      	beq.n	4d6c <_sercom_get_default_pad+0xb8>
    4d5e:	2b03      	cmp	r3, #3
    4d60:	d006      	beq.n	4d70 <_sercom_get_default_pad+0xbc>
    4d62:	e046      	b.n	4df2 <_sercom_get_default_pad+0x13e>
    4d64:	4b32      	ldr	r3, [pc, #200]	; (4e30 <_sercom_get_default_pad+0x17c>)
    4d66:	e045      	b.n	4df4 <_sercom_get_default_pad+0x140>
    4d68:	4b32      	ldr	r3, [pc, #200]	; (4e34 <_sercom_get_default_pad+0x180>)
    4d6a:	e043      	b.n	4df4 <_sercom_get_default_pad+0x140>
    4d6c:	4b32      	ldr	r3, [pc, #200]	; (4e38 <_sercom_get_default_pad+0x184>)
    4d6e:	e041      	b.n	4df4 <_sercom_get_default_pad+0x140>
    4d70:	4b32      	ldr	r3, [pc, #200]	; (4e3c <_sercom_get_default_pad+0x188>)
    4d72:	e03f      	b.n	4df4 <_sercom_get_default_pad+0x140>
    4d74:	1cfb      	adds	r3, r7, #3
    4d76:	781b      	ldrb	r3, [r3, #0]
    4d78:	2b01      	cmp	r3, #1
    4d7a:	d00a      	beq.n	4d92 <_sercom_get_default_pad+0xde>
    4d7c:	dc02      	bgt.n	4d84 <_sercom_get_default_pad+0xd0>
    4d7e:	2b00      	cmp	r3, #0
    4d80:	d005      	beq.n	4d8e <_sercom_get_default_pad+0xda>
    4d82:	e036      	b.n	4df2 <_sercom_get_default_pad+0x13e>
    4d84:	2b02      	cmp	r3, #2
    4d86:	d006      	beq.n	4d96 <_sercom_get_default_pad+0xe2>
    4d88:	2b03      	cmp	r3, #3
    4d8a:	d006      	beq.n	4d9a <_sercom_get_default_pad+0xe6>
    4d8c:	e031      	b.n	4df2 <_sercom_get_default_pad+0x13e>
    4d8e:	4b2c      	ldr	r3, [pc, #176]	; (4e40 <_sercom_get_default_pad+0x18c>)
    4d90:	e030      	b.n	4df4 <_sercom_get_default_pad+0x140>
    4d92:	4b2c      	ldr	r3, [pc, #176]	; (4e44 <_sercom_get_default_pad+0x190>)
    4d94:	e02e      	b.n	4df4 <_sercom_get_default_pad+0x140>
    4d96:	4b2c      	ldr	r3, [pc, #176]	; (4e48 <_sercom_get_default_pad+0x194>)
    4d98:	e02c      	b.n	4df4 <_sercom_get_default_pad+0x140>
    4d9a:	4b2c      	ldr	r3, [pc, #176]	; (4e4c <_sercom_get_default_pad+0x198>)
    4d9c:	e02a      	b.n	4df4 <_sercom_get_default_pad+0x140>
    4d9e:	1cfb      	adds	r3, r7, #3
    4da0:	781b      	ldrb	r3, [r3, #0]
    4da2:	2b01      	cmp	r3, #1
    4da4:	d00a      	beq.n	4dbc <_sercom_get_default_pad+0x108>
    4da6:	dc02      	bgt.n	4dae <_sercom_get_default_pad+0xfa>
    4da8:	2b00      	cmp	r3, #0
    4daa:	d005      	beq.n	4db8 <_sercom_get_default_pad+0x104>
    4dac:	e021      	b.n	4df2 <_sercom_get_default_pad+0x13e>
    4dae:	2b02      	cmp	r3, #2
    4db0:	d006      	beq.n	4dc0 <_sercom_get_default_pad+0x10c>
    4db2:	2b03      	cmp	r3, #3
    4db4:	d006      	beq.n	4dc4 <_sercom_get_default_pad+0x110>
    4db6:	e01c      	b.n	4df2 <_sercom_get_default_pad+0x13e>
    4db8:	4b25      	ldr	r3, [pc, #148]	; (4e50 <_sercom_get_default_pad+0x19c>)
    4dba:	e01b      	b.n	4df4 <_sercom_get_default_pad+0x140>
    4dbc:	4b25      	ldr	r3, [pc, #148]	; (4e54 <_sercom_get_default_pad+0x1a0>)
    4dbe:	e019      	b.n	4df4 <_sercom_get_default_pad+0x140>
    4dc0:	4b25      	ldr	r3, [pc, #148]	; (4e58 <_sercom_get_default_pad+0x1a4>)
    4dc2:	e017      	b.n	4df4 <_sercom_get_default_pad+0x140>
    4dc4:	4b25      	ldr	r3, [pc, #148]	; (4e5c <_sercom_get_default_pad+0x1a8>)
    4dc6:	e015      	b.n	4df4 <_sercom_get_default_pad+0x140>
    4dc8:	1cfb      	adds	r3, r7, #3
    4dca:	781b      	ldrb	r3, [r3, #0]
    4dcc:	2b01      	cmp	r3, #1
    4dce:	d00a      	beq.n	4de6 <_sercom_get_default_pad+0x132>
    4dd0:	dc02      	bgt.n	4dd8 <_sercom_get_default_pad+0x124>
    4dd2:	2b00      	cmp	r3, #0
    4dd4:	d005      	beq.n	4de2 <_sercom_get_default_pad+0x12e>
    4dd6:	e00c      	b.n	4df2 <_sercom_get_default_pad+0x13e>
    4dd8:	2b02      	cmp	r3, #2
    4dda:	d006      	beq.n	4dea <_sercom_get_default_pad+0x136>
    4ddc:	2b03      	cmp	r3, #3
    4dde:	d006      	beq.n	4dee <_sercom_get_default_pad+0x13a>
    4de0:	e007      	b.n	4df2 <_sercom_get_default_pad+0x13e>
    4de2:	4b1f      	ldr	r3, [pc, #124]	; (4e60 <_sercom_get_default_pad+0x1ac>)
    4de4:	e006      	b.n	4df4 <_sercom_get_default_pad+0x140>
    4de6:	4b1f      	ldr	r3, [pc, #124]	; (4e64 <_sercom_get_default_pad+0x1b0>)
    4de8:	e004      	b.n	4df4 <_sercom_get_default_pad+0x140>
    4dea:	4b1f      	ldr	r3, [pc, #124]	; (4e68 <_sercom_get_default_pad+0x1b4>)
    4dec:	e002      	b.n	4df4 <_sercom_get_default_pad+0x140>
    4dee:	4b1f      	ldr	r3, [pc, #124]	; (4e6c <_sercom_get_default_pad+0x1b8>)
    4df0:	e000      	b.n	4df4 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    4df2:	2300      	movs	r3, #0
}
    4df4:	0018      	movs	r0, r3
    4df6:	46bd      	mov	sp, r7
    4df8:	b002      	add	sp, #8
    4dfa:	bd80      	pop	{r7, pc}
    4dfc:	42001000 	.word	0x42001000
    4e00:	42000800 	.word	0x42000800
    4e04:	42000c00 	.word	0x42000c00
    4e08:	42001800 	.word	0x42001800
    4e0c:	42001c00 	.word	0x42001c00
    4e10:	42001400 	.word	0x42001400
    4e14:	00040003 	.word	0x00040003
    4e18:	00050003 	.word	0x00050003
    4e1c:	00060003 	.word	0x00060003
    4e20:	00070003 	.word	0x00070003
    4e24:	00010003 	.word	0x00010003
    4e28:	001e0003 	.word	0x001e0003
    4e2c:	001f0003 	.word	0x001f0003
    4e30:	00080003 	.word	0x00080003
    4e34:	00090003 	.word	0x00090003
    4e38:	000a0003 	.word	0x000a0003
    4e3c:	000b0003 	.word	0x000b0003
    4e40:	00100003 	.word	0x00100003
    4e44:	00110003 	.word	0x00110003
    4e48:	00120003 	.word	0x00120003
    4e4c:	00130003 	.word	0x00130003
    4e50:	000c0003 	.word	0x000c0003
    4e54:	000d0003 	.word	0x000d0003
    4e58:	000e0003 	.word	0x000e0003
    4e5c:	000f0003 	.word	0x000f0003
    4e60:	00160003 	.word	0x00160003
    4e64:	00170003 	.word	0x00170003
    4e68:	00180003 	.word	0x00180003
    4e6c:	00190003 	.word	0x00190003

00004e70 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    4e70:	b580      	push	{r7, lr}
    4e72:	b082      	sub	sp, #8
    4e74:	af00      	add	r7, sp, #0
    4e76:	0002      	movs	r2, r0
    4e78:	1dfb      	adds	r3, r7, #7
    4e7a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    4e7c:	46c0      	nop			; (mov r8, r8)
    4e7e:	46bd      	mov	sp, r7
    4e80:	b002      	add	sp, #8
    4e82:	bd80      	pop	{r7, pc}

00004e84 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4e84:	b590      	push	{r4, r7, lr}
    4e86:	b08b      	sub	sp, #44	; 0x2c
    4e88:	af00      	add	r7, sp, #0
    4e8a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4e8c:	230c      	movs	r3, #12
    4e8e:	18fb      	adds	r3, r7, r3
    4e90:	4a0f      	ldr	r2, [pc, #60]	; (4ed0 <_sercom_get_sercom_inst_index+0x4c>)
    4e92:	ca13      	ldmia	r2!, {r0, r1, r4}
    4e94:	c313      	stmia	r3!, {r0, r1, r4}
    4e96:	ca13      	ldmia	r2!, {r0, r1, r4}
    4e98:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4e9a:	2300      	movs	r3, #0
    4e9c:	627b      	str	r3, [r7, #36]	; 0x24
    4e9e:	e00e      	b.n	4ebe <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4ea0:	230c      	movs	r3, #12
    4ea2:	18fb      	adds	r3, r7, r3
    4ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4ea6:	0092      	lsls	r2, r2, #2
    4ea8:	58d3      	ldr	r3, [r2, r3]
    4eaa:	1e1a      	subs	r2, r3, #0
    4eac:	687b      	ldr	r3, [r7, #4]
    4eae:	429a      	cmp	r2, r3
    4eb0:	d102      	bne.n	4eb8 <_sercom_get_sercom_inst_index+0x34>
			return i;
    4eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4eb4:	b2db      	uxtb	r3, r3
    4eb6:	e006      	b.n	4ec6 <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4eba:	3301      	adds	r3, #1
    4ebc:	627b      	str	r3, [r7, #36]	; 0x24
    4ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4ec0:	2b05      	cmp	r3, #5
    4ec2:	d9ed      	bls.n	4ea0 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    4ec4:	2300      	movs	r3, #0
}
    4ec6:	0018      	movs	r0, r3
    4ec8:	46bd      	mov	sp, r7
    4eca:	b00b      	add	sp, #44	; 0x2c
    4ecc:	bd90      	pop	{r4, r7, pc}
    4ece:	46c0      	nop			; (mov r8, r8)
    4ed0:	0000dd28 	.word	0x0000dd28

00004ed4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4ed4:	b580      	push	{r7, lr}
    4ed6:	b084      	sub	sp, #16
    4ed8:	af00      	add	r7, sp, #0
    4eda:	0002      	movs	r2, r0
    4edc:	6039      	str	r1, [r7, #0]
    4ede:	1dfb      	adds	r3, r7, #7
    4ee0:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    4ee2:	4b13      	ldr	r3, [pc, #76]	; (4f30 <_sercom_set_handler+0x5c>)
    4ee4:	781b      	ldrb	r3, [r3, #0]
    4ee6:	2201      	movs	r2, #1
    4ee8:	4053      	eors	r3, r2
    4eea:	b2db      	uxtb	r3, r3
    4eec:	2b00      	cmp	r3, #0
    4eee:	d015      	beq.n	4f1c <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4ef0:	2300      	movs	r3, #0
    4ef2:	60fb      	str	r3, [r7, #12]
    4ef4:	e00c      	b.n	4f10 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4ef6:	4b0f      	ldr	r3, [pc, #60]	; (4f34 <_sercom_set_handler+0x60>)
    4ef8:	68fa      	ldr	r2, [r7, #12]
    4efa:	0092      	lsls	r2, r2, #2
    4efc:	490e      	ldr	r1, [pc, #56]	; (4f38 <_sercom_set_handler+0x64>)
    4efe:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    4f00:	4b0e      	ldr	r3, [pc, #56]	; (4f3c <_sercom_set_handler+0x68>)
    4f02:	68fa      	ldr	r2, [r7, #12]
    4f04:	0092      	lsls	r2, r2, #2
    4f06:	2100      	movs	r1, #0
    4f08:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4f0a:	68fb      	ldr	r3, [r7, #12]
    4f0c:	3301      	adds	r3, #1
    4f0e:	60fb      	str	r3, [r7, #12]
    4f10:	68fb      	ldr	r3, [r7, #12]
    4f12:	2b05      	cmp	r3, #5
    4f14:	d9ef      	bls.n	4ef6 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    4f16:	4b06      	ldr	r3, [pc, #24]	; (4f30 <_sercom_set_handler+0x5c>)
    4f18:	2201      	movs	r2, #1
    4f1a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4f1c:	1dfb      	adds	r3, r7, #7
    4f1e:	781a      	ldrb	r2, [r3, #0]
    4f20:	4b04      	ldr	r3, [pc, #16]	; (4f34 <_sercom_set_handler+0x60>)
    4f22:	0092      	lsls	r2, r2, #2
    4f24:	6839      	ldr	r1, [r7, #0]
    4f26:	50d1      	str	r1, [r2, r3]
}
    4f28:	46c0      	nop			; (mov r8, r8)
    4f2a:	46bd      	mov	sp, r7
    4f2c:	b004      	add	sp, #16
    4f2e:	bd80      	pop	{r7, pc}
    4f30:	20000d56 	.word	0x20000d56
    4f34:	20000d58 	.word	0x20000d58
    4f38:	00004e71 	.word	0x00004e71
    4f3c:	20000e44 	.word	0x20000e44

00004f40 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    4f40:	b590      	push	{r4, r7, lr}
    4f42:	b085      	sub	sp, #20
    4f44:	af00      	add	r7, sp, #0
    4f46:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4f48:	2308      	movs	r3, #8
    4f4a:	18fa      	adds	r2, r7, r3
    4f4c:	4b0c      	ldr	r3, [pc, #48]	; (4f80 <_sercom_get_interrupt_vector+0x40>)
    4f4e:	0010      	movs	r0, r2
    4f50:	0019      	movs	r1, r3
    4f52:	2306      	movs	r3, #6
    4f54:	001a      	movs	r2, r3
    4f56:	4b0b      	ldr	r3, [pc, #44]	; (4f84 <_sercom_get_interrupt_vector+0x44>)
    4f58:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    4f5a:	230f      	movs	r3, #15
    4f5c:	18fc      	adds	r4, r7, r3
    4f5e:	687b      	ldr	r3, [r7, #4]
    4f60:	0018      	movs	r0, r3
    4f62:	4b09      	ldr	r3, [pc, #36]	; (4f88 <_sercom_get_interrupt_vector+0x48>)
    4f64:	4798      	blx	r3
    4f66:	0003      	movs	r3, r0
    4f68:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    4f6a:	230f      	movs	r3, #15
    4f6c:	18fb      	adds	r3, r7, r3
    4f6e:	781b      	ldrb	r3, [r3, #0]
    4f70:	2208      	movs	r2, #8
    4f72:	18ba      	adds	r2, r7, r2
    4f74:	5cd3      	ldrb	r3, [r2, r3]
    4f76:	b25b      	sxtb	r3, r3
}
    4f78:	0018      	movs	r0, r3
    4f7a:	46bd      	mov	sp, r7
    4f7c:	b005      	add	sp, #20
    4f7e:	bd90      	pop	{r4, r7, pc}
    4f80:	0000dd40 	.word	0x0000dd40
    4f84:	00006d09 	.word	0x00006d09
    4f88:	00004e85 	.word	0x00004e85

00004f8c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4f8c:	b580      	push	{r7, lr}
    4f8e:	af00      	add	r7, sp, #0
    4f90:	4b03      	ldr	r3, [pc, #12]	; (4fa0 <SERCOM0_Handler+0x14>)
    4f92:	681b      	ldr	r3, [r3, #0]
    4f94:	2000      	movs	r0, #0
    4f96:	4798      	blx	r3
    4f98:	46c0      	nop			; (mov r8, r8)
    4f9a:	46bd      	mov	sp, r7
    4f9c:	bd80      	pop	{r7, pc}
    4f9e:	46c0      	nop			; (mov r8, r8)
    4fa0:	20000d58 	.word	0x20000d58

00004fa4 <SERCOM1_Handler>:
    4fa4:	b580      	push	{r7, lr}
    4fa6:	af00      	add	r7, sp, #0
    4fa8:	4b03      	ldr	r3, [pc, #12]	; (4fb8 <SERCOM1_Handler+0x14>)
    4faa:	685b      	ldr	r3, [r3, #4]
    4fac:	2001      	movs	r0, #1
    4fae:	4798      	blx	r3
    4fb0:	46c0      	nop			; (mov r8, r8)
    4fb2:	46bd      	mov	sp, r7
    4fb4:	bd80      	pop	{r7, pc}
    4fb6:	46c0      	nop			; (mov r8, r8)
    4fb8:	20000d58 	.word	0x20000d58

00004fbc <SERCOM2_Handler>:
    4fbc:	b580      	push	{r7, lr}
    4fbe:	af00      	add	r7, sp, #0
    4fc0:	4b03      	ldr	r3, [pc, #12]	; (4fd0 <SERCOM2_Handler+0x14>)
    4fc2:	689b      	ldr	r3, [r3, #8]
    4fc4:	2002      	movs	r0, #2
    4fc6:	4798      	blx	r3
    4fc8:	46c0      	nop			; (mov r8, r8)
    4fca:	46bd      	mov	sp, r7
    4fcc:	bd80      	pop	{r7, pc}
    4fce:	46c0      	nop			; (mov r8, r8)
    4fd0:	20000d58 	.word	0x20000d58

00004fd4 <SERCOM3_Handler>:
    4fd4:	b580      	push	{r7, lr}
    4fd6:	af00      	add	r7, sp, #0
    4fd8:	4b03      	ldr	r3, [pc, #12]	; (4fe8 <SERCOM3_Handler+0x14>)
    4fda:	68db      	ldr	r3, [r3, #12]
    4fdc:	2003      	movs	r0, #3
    4fde:	4798      	blx	r3
    4fe0:	46c0      	nop			; (mov r8, r8)
    4fe2:	46bd      	mov	sp, r7
    4fe4:	bd80      	pop	{r7, pc}
    4fe6:	46c0      	nop			; (mov r8, r8)
    4fe8:	20000d58 	.word	0x20000d58

00004fec <SERCOM4_Handler>:
    4fec:	b580      	push	{r7, lr}
    4fee:	af00      	add	r7, sp, #0
    4ff0:	4b03      	ldr	r3, [pc, #12]	; (5000 <SERCOM4_Handler+0x14>)
    4ff2:	691b      	ldr	r3, [r3, #16]
    4ff4:	2004      	movs	r0, #4
    4ff6:	4798      	blx	r3
    4ff8:	46c0      	nop			; (mov r8, r8)
    4ffa:	46bd      	mov	sp, r7
    4ffc:	bd80      	pop	{r7, pc}
    4ffe:	46c0      	nop			; (mov r8, r8)
    5000:	20000d58 	.word	0x20000d58

00005004 <SERCOM5_Handler>:
    5004:	b580      	push	{r7, lr}
    5006:	af00      	add	r7, sp, #0
    5008:	4b03      	ldr	r3, [pc, #12]	; (5018 <SERCOM5_Handler+0x14>)
    500a:	695b      	ldr	r3, [r3, #20]
    500c:	2005      	movs	r0, #5
    500e:	4798      	blx	r3
    5010:	46c0      	nop			; (mov r8, r8)
    5012:	46bd      	mov	sp, r7
    5014:	bd80      	pop	{r7, pc}
    5016:	46c0      	nop			; (mov r8, r8)
    5018:	20000d58 	.word	0x20000d58

0000501c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    501c:	b580      	push	{r7, lr}
    501e:	b084      	sub	sp, #16
    5020:	af00      	add	r7, sp, #0
    5022:	0002      	movs	r2, r0
    5024:	1dfb      	adds	r3, r7, #7
    5026:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    5028:	230f      	movs	r3, #15
    502a:	18fb      	adds	r3, r7, r3
    502c:	1dfa      	adds	r2, r7, #7
    502e:	7812      	ldrb	r2, [r2, #0]
    5030:	0952      	lsrs	r2, r2, #5
    5032:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    5034:	230f      	movs	r3, #15
    5036:	18fb      	adds	r3, r7, r3
    5038:	781b      	ldrb	r3, [r3, #0]
    503a:	2b00      	cmp	r3, #0
    503c:	d10c      	bne.n	5058 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    503e:	4b09      	ldr	r3, [pc, #36]	; (5064 <_extint_get_eic_from_channel+0x48>)
    5040:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    5042:	230f      	movs	r3, #15
    5044:	18fb      	adds	r3, r7, r3
    5046:	781b      	ldrb	r3, [r3, #0]
    5048:	009b      	lsls	r3, r3, #2
    504a:	2210      	movs	r2, #16
    504c:	4694      	mov	ip, r2
    504e:	44bc      	add	ip, r7
    5050:	4463      	add	r3, ip
    5052:	3b08      	subs	r3, #8
    5054:	681b      	ldr	r3, [r3, #0]
    5056:	e000      	b.n	505a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    5058:	2300      	movs	r3, #0
	}
}
    505a:	0018      	movs	r0, r3
    505c:	46bd      	mov	sp, r7
    505e:	b004      	add	sp, #16
    5060:	bd80      	pop	{r7, pc}
    5062:	46c0      	nop			; (mov r8, r8)
    5064:	40001800 	.word	0x40001800

00005068 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    5068:	b580      	push	{r7, lr}
    506a:	b084      	sub	sp, #16
    506c:	af00      	add	r7, sp, #0
    506e:	0002      	movs	r2, r0
    5070:	1dfb      	adds	r3, r7, #7
    5072:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    5074:	1dfb      	adds	r3, r7, #7
    5076:	781b      	ldrb	r3, [r3, #0]
    5078:	0018      	movs	r0, r3
    507a:	4b0b      	ldr	r3, [pc, #44]	; (50a8 <extint_chan_is_detected+0x40>)
    507c:	4798      	blx	r3
    507e:	0003      	movs	r3, r0
    5080:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    5082:	1dfb      	adds	r3, r7, #7
    5084:	781b      	ldrb	r3, [r3, #0]
    5086:	221f      	movs	r2, #31
    5088:	4013      	ands	r3, r2
    508a:	2201      	movs	r2, #1
    508c:	409a      	lsls	r2, r3
    508e:	0013      	movs	r3, r2
    5090:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    5092:	68fb      	ldr	r3, [r7, #12]
    5094:	691b      	ldr	r3, [r3, #16]
    5096:	68ba      	ldr	r2, [r7, #8]
    5098:	4013      	ands	r3, r2
    509a:	1e5a      	subs	r2, r3, #1
    509c:	4193      	sbcs	r3, r2
    509e:	b2db      	uxtb	r3, r3
}
    50a0:	0018      	movs	r0, r3
    50a2:	46bd      	mov	sp, r7
    50a4:	b004      	add	sp, #16
    50a6:	bd80      	pop	{r7, pc}
    50a8:	0000501d 	.word	0x0000501d

000050ac <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check.
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    50ac:	b580      	push	{r7, lr}
    50ae:	b084      	sub	sp, #16
    50b0:	af00      	add	r7, sp, #0
    50b2:	0002      	movs	r2, r0
    50b4:	1dfb      	adds	r3, r7, #7
    50b6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    50b8:	1dfb      	adds	r3, r7, #7
    50ba:	781b      	ldrb	r3, [r3, #0]
    50bc:	0018      	movs	r0, r3
    50be:	4b09      	ldr	r3, [pc, #36]	; (50e4 <extint_chan_clear_detected+0x38>)
    50c0:	4798      	blx	r3
    50c2:	0003      	movs	r3, r0
    50c4:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    50c6:	1dfb      	adds	r3, r7, #7
    50c8:	781b      	ldrb	r3, [r3, #0]
    50ca:	221f      	movs	r2, #31
    50cc:	4013      	ands	r3, r2
    50ce:	2201      	movs	r2, #1
    50d0:	409a      	lsls	r2, r3
    50d2:	0013      	movs	r3, r2
    50d4:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    50d6:	68fb      	ldr	r3, [r7, #12]
    50d8:	68ba      	ldr	r2, [r7, #8]
    50da:	611a      	str	r2, [r3, #16]
}
    50dc:	46c0      	nop			; (mov r8, r8)
    50de:	46bd      	mov	sp, r7
    50e0:	b004      	add	sp, #16
    50e2:	bd80      	pop	{r7, pc}
    50e4:	0000501d 	.word	0x0000501d

000050e8 <EIC_Handler>:
	return STATUS_OK;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    50e8:	b580      	push	{r7, lr}
    50ea:	b082      	sub	sp, #8
    50ec:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (uint8_t i = 0; i < EIC_NUMBER_OF_INTERRUPTS ; i++) {
    50ee:	1dfb      	adds	r3, r7, #7
    50f0:	2200      	movs	r2, #0
    50f2:	701a      	strb	r2, [r3, #0]
    50f4:	e01d      	b.n	5132 <EIC_Handler+0x4a>
		if (extint_chan_is_detected(i)) {
    50f6:	1dfb      	adds	r3, r7, #7
    50f8:	781b      	ldrb	r3, [r3, #0]
    50fa:	0018      	movs	r0, r3
    50fc:	4b11      	ldr	r3, [pc, #68]	; (5144 <EIC_Handler+0x5c>)
    50fe:	4798      	blx	r3
    5100:	1e03      	subs	r3, r0, #0
    5102:	d011      	beq.n	5128 <EIC_Handler+0x40>
			/* Clear flag */
			extint_chan_clear_detected(i);
    5104:	1dfb      	adds	r3, r7, #7
    5106:	781b      	ldrb	r3, [r3, #0]
    5108:	0018      	movs	r0, r3
    510a:	4b0f      	ldr	r3, [pc, #60]	; (5148 <EIC_Handler+0x60>)
    510c:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[i] != NULL) {
    510e:	1dfb      	adds	r3, r7, #7
    5110:	781a      	ldrb	r2, [r3, #0]
    5112:	4b0e      	ldr	r3, [pc, #56]	; (514c <EIC_Handler+0x64>)
    5114:	0092      	lsls	r2, r2, #2
    5116:	58d3      	ldr	r3, [r2, r3]
    5118:	2b00      	cmp	r3, #0
    511a:	d005      	beq.n	5128 <EIC_Handler+0x40>
				/* Run the registered callback */
				_extint_dev.callbacks[i]();
    511c:	1dfb      	adds	r3, r7, #7
    511e:	781a      	ldrb	r2, [r3, #0]
    5120:	4b0a      	ldr	r3, [pc, #40]	; (514c <EIC_Handler+0x64>)
    5122:	0092      	lsls	r2, r2, #2
    5124:	58d3      	ldr	r3, [r2, r3]
    5126:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (uint8_t i = 0; i < EIC_NUMBER_OF_INTERRUPTS ; i++) {
    5128:	1dfb      	adds	r3, r7, #7
    512a:	781a      	ldrb	r2, [r3, #0]
    512c:	1dfb      	adds	r3, r7, #7
    512e:	3201      	adds	r2, #1
    5130:	701a      	strb	r2, [r3, #0]
    5132:	1dfb      	adds	r3, r7, #7
    5134:	781b      	ldrb	r3, [r3, #0]
    5136:	2b0f      	cmp	r3, #15
    5138:	d9dd      	bls.n	50f6 <EIC_Handler+0xe>
				/* Run the registered callback */
				_extint_dev.callbacks[i]();
			}
		}
	}
}
    513a:	46c0      	nop			; (mov r8, r8)
    513c:	46bd      	mov	sp, r7
    513e:	b002      	add	sp, #8
    5140:	bd80      	pop	{r7, pc}
    5142:	46c0      	nop			; (mov r8, r8)
    5144:	00005069 	.word	0x00005069
    5148:	000050ad 	.word	0x000050ad
    514c:	20000dd8 	.word	0x20000dd8

00005150 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    5150:	b580      	push	{r7, lr}
    5152:	b082      	sub	sp, #8
    5154:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    5156:	4b10      	ldr	r3, [pc, #64]	; (5198 <cpu_irq_enter_critical+0x48>)
    5158:	681b      	ldr	r3, [r3, #0]
    515a:	2b00      	cmp	r3, #0
    515c:	d112      	bne.n	5184 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    515e:	f3ef 8310 	mrs	r3, PRIMASK
    5162:	607b      	str	r3, [r7, #4]
  return(result);
    5164:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    5166:	2b00      	cmp	r3, #0
    5168:	d109      	bne.n	517e <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    516a:	b672      	cpsid	i
    516c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    5170:	4b0a      	ldr	r3, [pc, #40]	; (519c <cpu_irq_enter_critical+0x4c>)
    5172:	2200      	movs	r2, #0
    5174:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    5176:	4b0a      	ldr	r3, [pc, #40]	; (51a0 <cpu_irq_enter_critical+0x50>)
    5178:	2201      	movs	r2, #1
    517a:	701a      	strb	r2, [r3, #0]
    517c:	e002      	b.n	5184 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    517e:	4b08      	ldr	r3, [pc, #32]	; (51a0 <cpu_irq_enter_critical+0x50>)
    5180:	2200      	movs	r2, #0
    5182:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    5184:	4b04      	ldr	r3, [pc, #16]	; (5198 <cpu_irq_enter_critical+0x48>)
    5186:	681b      	ldr	r3, [r3, #0]
    5188:	1c5a      	adds	r2, r3, #1
    518a:	4b03      	ldr	r3, [pc, #12]	; (5198 <cpu_irq_enter_critical+0x48>)
    518c:	601a      	str	r2, [r3, #0]
}
    518e:	46c0      	nop			; (mov r8, r8)
    5190:	46bd      	mov	sp, r7
    5192:	b002      	add	sp, #8
    5194:	bd80      	pop	{r7, pc}
    5196:	46c0      	nop			; (mov r8, r8)
    5198:	20000d70 	.word	0x20000d70
    519c:	2000000c 	.word	0x2000000c
    51a0:	20000d74 	.word	0x20000d74

000051a4 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    51a4:	b580      	push	{r7, lr}
    51a6:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    51a8:	4b0b      	ldr	r3, [pc, #44]	; (51d8 <cpu_irq_leave_critical+0x34>)
    51aa:	681b      	ldr	r3, [r3, #0]
    51ac:	1e5a      	subs	r2, r3, #1
    51ae:	4b0a      	ldr	r3, [pc, #40]	; (51d8 <cpu_irq_leave_critical+0x34>)
    51b0:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    51b2:	4b09      	ldr	r3, [pc, #36]	; (51d8 <cpu_irq_leave_critical+0x34>)
    51b4:	681b      	ldr	r3, [r3, #0]
    51b6:	2b00      	cmp	r3, #0
    51b8:	d10a      	bne.n	51d0 <cpu_irq_leave_critical+0x2c>
    51ba:	4b08      	ldr	r3, [pc, #32]	; (51dc <cpu_irq_leave_critical+0x38>)
    51bc:	781b      	ldrb	r3, [r3, #0]
    51be:	b2db      	uxtb	r3, r3
    51c0:	2b00      	cmp	r3, #0
    51c2:	d005      	beq.n	51d0 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    51c4:	4b06      	ldr	r3, [pc, #24]	; (51e0 <cpu_irq_leave_critical+0x3c>)
    51c6:	2201      	movs	r2, #1
    51c8:	701a      	strb	r2, [r3, #0]
    51ca:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    51ce:	b662      	cpsie	i
	}
}
    51d0:	46c0      	nop			; (mov r8, r8)
    51d2:	46bd      	mov	sp, r7
    51d4:	bd80      	pop	{r7, pc}
    51d6:	46c0      	nop			; (mov r8, r8)
    51d8:	20000d70 	.word	0x20000d70
    51dc:	20000d74 	.word	0x20000d74
    51e0:	2000000c 	.word	0x2000000c

000051e4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    51e4:	b580      	push	{r7, lr}
    51e6:	b084      	sub	sp, #16
    51e8:	af00      	add	r7, sp, #0
    51ea:	0002      	movs	r2, r0
    51ec:	1dfb      	adds	r3, r7, #7
    51ee:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    51f0:	230f      	movs	r3, #15
    51f2:	18fb      	adds	r3, r7, r3
    51f4:	1dfa      	adds	r2, r7, #7
    51f6:	7812      	ldrb	r2, [r2, #0]
    51f8:	09d2      	lsrs	r2, r2, #7
    51fa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    51fc:	230e      	movs	r3, #14
    51fe:	18fb      	adds	r3, r7, r3
    5200:	1dfa      	adds	r2, r7, #7
    5202:	7812      	ldrb	r2, [r2, #0]
    5204:	0952      	lsrs	r2, r2, #5
    5206:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5208:	4b0d      	ldr	r3, [pc, #52]	; (5240 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    520a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    520c:	230f      	movs	r3, #15
    520e:	18fb      	adds	r3, r7, r3
    5210:	781b      	ldrb	r3, [r3, #0]
    5212:	2b00      	cmp	r3, #0
    5214:	d10f      	bne.n	5236 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    5216:	230f      	movs	r3, #15
    5218:	18fb      	adds	r3, r7, r3
    521a:	781b      	ldrb	r3, [r3, #0]
    521c:	009b      	lsls	r3, r3, #2
    521e:	2210      	movs	r2, #16
    5220:	4694      	mov	ip, r2
    5222:	44bc      	add	ip, r7
    5224:	4463      	add	r3, ip
    5226:	3b08      	subs	r3, #8
    5228:	681a      	ldr	r2, [r3, #0]
    522a:	230e      	movs	r3, #14
    522c:	18fb      	adds	r3, r7, r3
    522e:	781b      	ldrb	r3, [r3, #0]
    5230:	01db      	lsls	r3, r3, #7
    5232:	18d3      	adds	r3, r2, r3
    5234:	e000      	b.n	5238 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    5236:	2300      	movs	r3, #0
	}
}
    5238:	0018      	movs	r0, r3
    523a:	46bd      	mov	sp, r7
    523c:	b004      	add	sp, #16
    523e:	bd80      	pop	{r7, pc}
    5240:	41004400 	.word	0x41004400

00005244 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    5244:	b580      	push	{r7, lr}
    5246:	b082      	sub	sp, #8
    5248:	af00      	add	r7, sp, #0
    524a:	0002      	movs	r2, r0
    524c:	1dfb      	adds	r3, r7, #7
    524e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    5250:	1dfb      	adds	r3, r7, #7
    5252:	781b      	ldrb	r3, [r3, #0]
    5254:	0018      	movs	r0, r3
    5256:	4b03      	ldr	r3, [pc, #12]	; (5264 <port_get_group_from_gpio_pin+0x20>)
    5258:	4798      	blx	r3
    525a:	0003      	movs	r3, r0
}
    525c:	0018      	movs	r0, r3
    525e:	46bd      	mov	sp, r7
    5260:	b002      	add	sp, #8
    5262:	bd80      	pop	{r7, pc}
    5264:	000051e5 	.word	0x000051e5

00005268 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    5268:	b580      	push	{r7, lr}
    526a:	b082      	sub	sp, #8
    526c:	af00      	add	r7, sp, #0
    526e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    5270:	687b      	ldr	r3, [r7, #4]
    5272:	2200      	movs	r2, #0
    5274:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    5276:	687b      	ldr	r3, [r7, #4]
    5278:	2201      	movs	r2, #1
    527a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    527c:	687b      	ldr	r3, [r7, #4]
    527e:	2200      	movs	r2, #0
    5280:	709a      	strb	r2, [r3, #2]
}
    5282:	46c0      	nop			; (mov r8, r8)
    5284:	46bd      	mov	sp, r7
    5286:	b002      	add	sp, #8
    5288:	bd80      	pop	{r7, pc}
    528a:	46c0      	nop			; (mov r8, r8)

0000528c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    528c:	b580      	push	{r7, lr}
    528e:	b084      	sub	sp, #16
    5290:	af00      	add	r7, sp, #0
    5292:	0002      	movs	r2, r0
    5294:	1dfb      	adds	r3, r7, #7
    5296:	701a      	strb	r2, [r3, #0]
    5298:	1dbb      	adds	r3, r7, #6
    529a:	1c0a      	adds	r2, r1, #0
    529c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    529e:	1dfb      	adds	r3, r7, #7
    52a0:	781b      	ldrb	r3, [r3, #0]
    52a2:	0018      	movs	r0, r3
    52a4:	4b0d      	ldr	r3, [pc, #52]	; (52dc <port_pin_set_output_level+0x50>)
    52a6:	4798      	blx	r3
    52a8:	0003      	movs	r3, r0
    52aa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    52ac:	1dfb      	adds	r3, r7, #7
    52ae:	781b      	ldrb	r3, [r3, #0]
    52b0:	221f      	movs	r2, #31
    52b2:	4013      	ands	r3, r2
    52b4:	2201      	movs	r2, #1
    52b6:	409a      	lsls	r2, r3
    52b8:	0013      	movs	r3, r2
    52ba:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    52bc:	1dbb      	adds	r3, r7, #6
    52be:	781b      	ldrb	r3, [r3, #0]
    52c0:	2b00      	cmp	r3, #0
    52c2:	d003      	beq.n	52cc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    52c4:	68fb      	ldr	r3, [r7, #12]
    52c6:	68ba      	ldr	r2, [r7, #8]
    52c8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    52ca:	e002      	b.n	52d2 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    52cc:	68fb      	ldr	r3, [r7, #12]
    52ce:	68ba      	ldr	r2, [r7, #8]
    52d0:	615a      	str	r2, [r3, #20]
	}
}
    52d2:	46c0      	nop			; (mov r8, r8)
    52d4:	46bd      	mov	sp, r7
    52d6:	b004      	add	sp, #16
    52d8:	bd80      	pop	{r7, pc}
    52da:	46c0      	nop			; (mov r8, r8)
    52dc:	00005245 	.word	0x00005245

000052e0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    52e0:	b580      	push	{r7, lr}
    52e2:	b082      	sub	sp, #8
    52e4:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    52e6:	1d3b      	adds	r3, r7, #4
    52e8:	0018      	movs	r0, r3
    52ea:	4b0e      	ldr	r3, [pc, #56]	; (5324 <system_board_init+0x44>)
    52ec:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    52ee:	1d3b      	adds	r3, r7, #4
    52f0:	2201      	movs	r2, #1
    52f2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    52f4:	1d3b      	adds	r3, r7, #4
    52f6:	0019      	movs	r1, r3
    52f8:	203e      	movs	r0, #62	; 0x3e
    52fa:	4b0b      	ldr	r3, [pc, #44]	; (5328 <system_board_init+0x48>)
    52fc:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    52fe:	2101      	movs	r1, #1
    5300:	203e      	movs	r0, #62	; 0x3e
    5302:	4b0a      	ldr	r3, [pc, #40]	; (532c <system_board_init+0x4c>)
    5304:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    5306:	1d3b      	adds	r3, r7, #4
    5308:	2200      	movs	r2, #0
    530a:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    530c:	1d3b      	adds	r3, r7, #4
    530e:	2201      	movs	r2, #1
    5310:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    5312:	1d3b      	adds	r3, r7, #4
    5314:	0019      	movs	r1, r3
    5316:	200f      	movs	r0, #15
    5318:	4b03      	ldr	r3, [pc, #12]	; (5328 <system_board_init+0x48>)
    531a:	4798      	blx	r3
}
    531c:	46c0      	nop			; (mov r8, r8)
    531e:	46bd      	mov	sp, r7
    5320:	b002      	add	sp, #8
    5322:	bd80      	pop	{r7, pc}
    5324:	00005269 	.word	0x00005269
    5328:	00005359 	.word	0x00005359
    532c:	0000528d 	.word	0x0000528d

00005330 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    5330:	b580      	push	{r7, lr}
    5332:	b082      	sub	sp, #8
    5334:	af00      	add	r7, sp, #0
    5336:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5338:	687b      	ldr	r3, [r7, #4]
    533a:	2280      	movs	r2, #128	; 0x80
    533c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    533e:	687b      	ldr	r3, [r7, #4]
    5340:	2200      	movs	r2, #0
    5342:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5344:	687b      	ldr	r3, [r7, #4]
    5346:	2201      	movs	r2, #1
    5348:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    534a:	687b      	ldr	r3, [r7, #4]
    534c:	2200      	movs	r2, #0
    534e:	70da      	strb	r2, [r3, #3]
}
    5350:	46c0      	nop			; (mov r8, r8)
    5352:	46bd      	mov	sp, r7
    5354:	b002      	add	sp, #8
    5356:	bd80      	pop	{r7, pc}

00005358 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    5358:	b580      	push	{r7, lr}
    535a:	b084      	sub	sp, #16
    535c:	af00      	add	r7, sp, #0
    535e:	0002      	movs	r2, r0
    5360:	6039      	str	r1, [r7, #0]
    5362:	1dfb      	adds	r3, r7, #7
    5364:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    5366:	230c      	movs	r3, #12
    5368:	18fb      	adds	r3, r7, r3
    536a:	0018      	movs	r0, r3
    536c:	4b10      	ldr	r3, [pc, #64]	; (53b0 <port_pin_set_config+0x58>)
    536e:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    5370:	230c      	movs	r3, #12
    5372:	18fb      	adds	r3, r7, r3
    5374:	2280      	movs	r2, #128	; 0x80
    5376:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    5378:	683b      	ldr	r3, [r7, #0]
    537a:	781a      	ldrb	r2, [r3, #0]
    537c:	230c      	movs	r3, #12
    537e:	18fb      	adds	r3, r7, r3
    5380:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    5382:	683b      	ldr	r3, [r7, #0]
    5384:	785a      	ldrb	r2, [r3, #1]
    5386:	230c      	movs	r3, #12
    5388:	18fb      	adds	r3, r7, r3
    538a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    538c:	683b      	ldr	r3, [r7, #0]
    538e:	789a      	ldrb	r2, [r3, #2]
    5390:	230c      	movs	r3, #12
    5392:	18fb      	adds	r3, r7, r3
    5394:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    5396:	230c      	movs	r3, #12
    5398:	18fa      	adds	r2, r7, r3
    539a:	1dfb      	adds	r3, r7, #7
    539c:	781b      	ldrb	r3, [r3, #0]
    539e:	0011      	movs	r1, r2
    53a0:	0018      	movs	r0, r3
    53a2:	4b04      	ldr	r3, [pc, #16]	; (53b4 <port_pin_set_config+0x5c>)
    53a4:	4798      	blx	r3
}
    53a6:	46c0      	nop			; (mov r8, r8)
    53a8:	46bd      	mov	sp, r7
    53aa:	b004      	add	sp, #16
    53ac:	bd80      	pop	{r7, pc}
    53ae:	46c0      	nop			; (mov r8, r8)
    53b0:	00005331 	.word	0x00005331
    53b4:	00006219 	.word	0x00006219

000053b8 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    53b8:	b580      	push	{r7, lr}
    53ba:	b082      	sub	sp, #8
    53bc:	af00      	add	r7, sp, #0
    53be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    53c0:	687b      	ldr	r3, [r7, #4]
    53c2:	2201      	movs	r2, #1
    53c4:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    53c6:	687b      	ldr	r3, [r7, #4]
    53c8:	2200      	movs	r2, #0
    53ca:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    53cc:	687b      	ldr	r3, [r7, #4]
    53ce:	2206      	movs	r2, #6
    53d0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    53d2:	687b      	ldr	r3, [r7, #4]
    53d4:	2200      	movs	r2, #0
    53d6:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    53d8:	687b      	ldr	r3, [r7, #4]
    53da:	2200      	movs	r2, #0
    53dc:	725a      	strb	r2, [r3, #9]
}
    53de:	46c0      	nop			; (mov r8, r8)
    53e0:	46bd      	mov	sp, r7
    53e2:	b002      	add	sp, #8
    53e4:	bd80      	pop	{r7, pc}
    53e6:	46c0      	nop			; (mov r8, r8)

000053e8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    53e8:	b580      	push	{r7, lr}
    53ea:	b082      	sub	sp, #8
    53ec:	af00      	add	r7, sp, #0
    53ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    53f0:	687b      	ldr	r3, [r7, #4]
    53f2:	2200      	movs	r2, #0
    53f4:	701a      	strb	r2, [r3, #0]
}
    53f6:	46c0      	nop			; (mov r8, r8)
    53f8:	46bd      	mov	sp, r7
    53fa:	b002      	add	sp, #8
    53fc:	bd80      	pop	{r7, pc}
    53fe:	46c0      	nop			; (mov r8, r8)

00005400 <system_clock_source_osc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
    5400:	b580      	push	{r7, lr}
    5402:	b082      	sub	sp, #8
    5404:	af00      	add	r7, sp, #0
    5406:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->enable_1khz_output  = true;
    5408:	687b      	ldr	r3, [r7, #4]
    540a:	2201      	movs	r2, #1
    540c:	705a      	strb	r2, [r3, #1]
	config->enable_32khz_output = true;
    540e:	687b      	ldr	r3, [r7, #4]
    5410:	2201      	movs	r2, #1
    5412:	709a      	strb	r2, [r3, #2]
	config->run_in_standby      = false;
    5414:	687b      	ldr	r3, [r7, #4]
    5416:	2200      	movs	r2, #0
    5418:	70da      	strb	r2, [r3, #3]
	config->on_demand           = true;
    541a:	687b      	ldr	r3, [r7, #4]
    541c:	2201      	movs	r2, #1
    541e:	711a      	strb	r2, [r3, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    5420:	687b      	ldr	r3, [r7, #4]
    5422:	2207      	movs	r2, #7
    5424:	701a      	strb	r2, [r3, #0]
	config->write_once          = false;
    5426:	687b      	ldr	r3, [r7, #4]
    5428:	2200      	movs	r2, #0
    542a:	715a      	strb	r2, [r3, #5]
}
    542c:	46c0      	nop			; (mov r8, r8)
    542e:	46bd      	mov	sp, r7
    5430:	b002      	add	sp, #8
    5432:	bd80      	pop	{r7, pc}

00005434 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    5434:	b580      	push	{r7, lr}
    5436:	b082      	sub	sp, #8
    5438:	af00      	add	r7, sp, #0
    543a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    543c:	687b      	ldr	r3, [r7, #4]
    543e:	2203      	movs	r2, #3
    5440:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    5442:	687b      	ldr	r3, [r7, #4]
    5444:	2200      	movs	r2, #0
    5446:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    5448:	687b      	ldr	r3, [r7, #4]
    544a:	2201      	movs	r2, #1
    544c:	709a      	strb	r2, [r3, #2]
}
    544e:	46c0      	nop			; (mov r8, r8)
    5450:	46bd      	mov	sp, r7
    5452:	b002      	add	sp, #8
    5454:	bd80      	pop	{r7, pc}
    5456:	46c0      	nop			; (mov r8, r8)

00005458 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    5458:	b580      	push	{r7, lr}
    545a:	b082      	sub	sp, #8
    545c:	af00      	add	r7, sp, #0
    545e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    5460:	687b      	ldr	r3, [r7, #4]
    5462:	2200      	movs	r2, #0
    5464:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5466:	687b      	ldr	r3, [r7, #4]
    5468:	2200      	movs	r2, #0
    546a:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    546c:	687b      	ldr	r3, [r7, #4]
    546e:	2200      	movs	r2, #0
    5470:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5472:	687b      	ldr	r3, [r7, #4]
    5474:	2200      	movs	r2, #0
    5476:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5478:	687b      	ldr	r3, [r7, #4]
    547a:	2200      	movs	r2, #0
    547c:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    547e:	687b      	ldr	r3, [r7, #4]
    5480:	2201      	movs	r2, #1
    5482:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    5484:	687b      	ldr	r3, [r7, #4]
    5486:	2207      	movs	r2, #7
    5488:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    548a:	687b      	ldr	r3, [r7, #4]
    548c:	223f      	movs	r2, #63	; 0x3f
    548e:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    5490:	687b      	ldr	r3, [r7, #4]
    5492:	2201      	movs	r2, #1
    5494:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    5496:	687b      	ldr	r3, [r7, #4]
    5498:	2201      	movs	r2, #1
    549a:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    549c:	687b      	ldr	r3, [r7, #4]
    549e:	2206      	movs	r2, #6
    54a0:	821a      	strh	r2, [r3, #16]
}
    54a2:	46c0      	nop			; (mov r8, r8)
    54a4:	46bd      	mov	sp, r7
    54a6:	b002      	add	sp, #8
    54a8:	bd80      	pop	{r7, pc}
    54aa:	46c0      	nop			; (mov r8, r8)

000054ac <system_main_clock_set_failure_detect>:
 *
 * \param[in] enable  Boolean \c true to enable, \c false to disable detection
 */
static inline void system_main_clock_set_failure_detect(
		const bool enable)
{
    54ac:	b580      	push	{r7, lr}
    54ae:	b082      	sub	sp, #8
    54b0:	af00      	add	r7, sp, #0
    54b2:	0002      	movs	r2, r0
    54b4:	1dfb      	adds	r3, r7, #7
    54b6:	701a      	strb	r2, [r3, #0]
	if (enable) {
    54b8:	1dfb      	adds	r3, r7, #7
    54ba:	781b      	ldrb	r3, [r3, #0]
    54bc:	2b00      	cmp	r3, #0
    54be:	d008      	beq.n	54d2 <system_main_clock_set_failure_detect+0x26>
		PM->CTRL.reg |=  PM_CTRL_CFDEN;
    54c0:	4a0a      	ldr	r2, [pc, #40]	; (54ec <system_main_clock_set_failure_detect+0x40>)
    54c2:	4b0a      	ldr	r3, [pc, #40]	; (54ec <system_main_clock_set_failure_detect+0x40>)
    54c4:	781b      	ldrb	r3, [r3, #0]
    54c6:	b2db      	uxtb	r3, r3
    54c8:	2104      	movs	r1, #4
    54ca:	430b      	orrs	r3, r1
    54cc:	b2db      	uxtb	r3, r3
    54ce:	7013      	strb	r3, [r2, #0]
	} else {
		PM->CTRL.reg &= ~PM_CTRL_CFDEN;
	}
}
    54d0:	e007      	b.n	54e2 <system_main_clock_set_failure_detect+0x36>
		const bool enable)
{
	if (enable) {
		PM->CTRL.reg |=  PM_CTRL_CFDEN;
	} else {
		PM->CTRL.reg &= ~PM_CTRL_CFDEN;
    54d2:	4a06      	ldr	r2, [pc, #24]	; (54ec <system_main_clock_set_failure_detect+0x40>)
    54d4:	4b05      	ldr	r3, [pc, #20]	; (54ec <system_main_clock_set_failure_detect+0x40>)
    54d6:	781b      	ldrb	r3, [r3, #0]
    54d8:	b2db      	uxtb	r3, r3
    54da:	2104      	movs	r1, #4
    54dc:	438b      	bics	r3, r1
    54de:	b2db      	uxtb	r3, r3
    54e0:	7013      	strb	r3, [r2, #0]
	}
}
    54e2:	46c0      	nop			; (mov r8, r8)
    54e4:	46bd      	mov	sp, r7
    54e6:	b002      	add	sp, #8
    54e8:	bd80      	pop	{r7, pc}
    54ea:	46c0      	nop			; (mov r8, r8)
    54ec:	40000400 	.word	0x40000400

000054f0 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    54f0:	b580      	push	{r7, lr}
    54f2:	b082      	sub	sp, #8
    54f4:	af00      	add	r7, sp, #0
    54f6:	0002      	movs	r2, r0
    54f8:	1dfb      	adds	r3, r7, #7
    54fa:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    54fc:	4a03      	ldr	r2, [pc, #12]	; (550c <system_cpu_clock_set_divider+0x1c>)
    54fe:	1dfb      	adds	r3, r7, #7
    5500:	781b      	ldrb	r3, [r3, #0]
    5502:	7213      	strb	r3, [r2, #8]
}
    5504:	46c0      	nop			; (mov r8, r8)
    5506:	46bd      	mov	sp, r7
    5508:	b002      	add	sp, #8
    550a:	bd80      	pop	{r7, pc}
    550c:	40000400 	.word	0x40000400

00005510 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    5510:	b580      	push	{r7, lr}
    5512:	b082      	sub	sp, #8
    5514:	af00      	add	r7, sp, #0
    5516:	0002      	movs	r2, r0
    5518:	1dfb      	adds	r3, r7, #7
    551a:	701a      	strb	r2, [r3, #0]
    551c:	1dbb      	adds	r3, r7, #6
    551e:	1c0a      	adds	r2, r1, #0
    5520:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5522:	1dfb      	adds	r3, r7, #7
    5524:	781b      	ldrb	r3, [r3, #0]
    5526:	2b01      	cmp	r3, #1
    5528:	d008      	beq.n	553c <system_apb_clock_set_divider+0x2c>
    552a:	2b02      	cmp	r3, #2
    552c:	d00b      	beq.n	5546 <system_apb_clock_set_divider+0x36>
    552e:	2b00      	cmp	r3, #0
    5530:	d10e      	bne.n	5550 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    5532:	4a0b      	ldr	r2, [pc, #44]	; (5560 <system_apb_clock_set_divider+0x50>)
    5534:	1dbb      	adds	r3, r7, #6
    5536:	781b      	ldrb	r3, [r3, #0]
    5538:	7253      	strb	r3, [r2, #9]
			break;
    553a:	e00b      	b.n	5554 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    553c:	4a08      	ldr	r2, [pc, #32]	; (5560 <system_apb_clock_set_divider+0x50>)
    553e:	1dbb      	adds	r3, r7, #6
    5540:	781b      	ldrb	r3, [r3, #0]
    5542:	7293      	strb	r3, [r2, #10]
			break;
    5544:	e006      	b.n	5554 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    5546:	4a06      	ldr	r2, [pc, #24]	; (5560 <system_apb_clock_set_divider+0x50>)
    5548:	1dbb      	adds	r3, r7, #6
    554a:	781b      	ldrb	r3, [r3, #0]
    554c:	72d3      	strb	r3, [r2, #11]
			break;
    554e:	e001      	b.n	5554 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5550:	2317      	movs	r3, #23
    5552:	e000      	b.n	5556 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    5554:	2300      	movs	r3, #0
}
    5556:	0018      	movs	r0, r3
    5558:	46bd      	mov	sp, r7
    555a:	b002      	add	sp, #8
    555c:	bd80      	pop	{r7, pc}
    555e:	46c0      	nop			; (mov r8, r8)
    5560:	40000400 	.word	0x40000400

00005564 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    5564:	b580      	push	{r7, lr}
    5566:	b082      	sub	sp, #8
    5568:	af00      	add	r7, sp, #0
    556a:	0002      	movs	r2, r0
    556c:	1dfb      	adds	r3, r7, #7
    556e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5570:	4a08      	ldr	r2, [pc, #32]	; (5594 <system_flash_set_waitstates+0x30>)
    5572:	1dfb      	adds	r3, r7, #7
    5574:	781b      	ldrb	r3, [r3, #0]
    5576:	210f      	movs	r1, #15
    5578:	400b      	ands	r3, r1
    557a:	b2d9      	uxtb	r1, r3
    557c:	6853      	ldr	r3, [r2, #4]
    557e:	200f      	movs	r0, #15
    5580:	4001      	ands	r1, r0
    5582:	0049      	lsls	r1, r1, #1
    5584:	201e      	movs	r0, #30
    5586:	4383      	bics	r3, r0
    5588:	430b      	orrs	r3, r1
    558a:	6053      	str	r3, [r2, #4]
}
    558c:	46c0      	nop			; (mov r8, r8)
    558e:	46bd      	mov	sp, r7
    5590:	b002      	add	sp, #8
    5592:	bd80      	pop	{r7, pc}
    5594:	41004000 	.word	0x41004000

00005598 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
    5598:	b580      	push	{r7, lr}
    559a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    559c:	46c0      	nop			; (mov r8, r8)
    559e:	4b04      	ldr	r3, [pc, #16]	; (55b0 <_system_dfll_wait_for_sync+0x18>)
    55a0:	68db      	ldr	r3, [r3, #12]
    55a2:	2210      	movs	r2, #16
    55a4:	4013      	ands	r3, r2
    55a6:	d0fa      	beq.n	559e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    55a8:	46c0      	nop			; (mov r8, r8)
    55aa:	46bd      	mov	sp, r7
    55ac:	bd80      	pop	{r7, pc}
    55ae:	46c0      	nop			; (mov r8, r8)
    55b0:	40000800 	.word	0x40000800

000055b4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    55b4:	b580      	push	{r7, lr}
    55b6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    55b8:	4a0c      	ldr	r2, [pc, #48]	; (55ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    55ba:	4b0d      	ldr	r3, [pc, #52]	; (55f0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    55bc:	681b      	ldr	r3, [r3, #0]
    55be:	b29b      	uxth	r3, r3
    55c0:	2180      	movs	r1, #128	; 0x80
    55c2:	438b      	bics	r3, r1
    55c4:	b29b      	uxth	r3, r3
    55c6:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
    55c8:	4b0a      	ldr	r3, [pc, #40]	; (55f4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    55ca:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    55cc:	4a07      	ldr	r2, [pc, #28]	; (55ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    55ce:	4b08      	ldr	r3, [pc, #32]	; (55f0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    55d0:	689b      	ldr	r3, [r3, #8]
    55d2:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    55d4:	4a05      	ldr	r2, [pc, #20]	; (55ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    55d6:	4b06      	ldr	r3, [pc, #24]	; (55f0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    55d8:	685b      	ldr	r3, [r3, #4]
    55da:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    55dc:	4a03      	ldr	r2, [pc, #12]	; (55ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    55de:	4b04      	ldr	r3, [pc, #16]	; (55f0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    55e0:	681b      	ldr	r3, [r3, #0]
    55e2:	b29b      	uxth	r3, r3
    55e4:	8493      	strh	r3, [r2, #36]	; 0x24
}
    55e6:	46c0      	nop			; (mov r8, r8)
    55e8:	46bd      	mov	sp, r7
    55ea:	bd80      	pop	{r7, pc}
    55ec:	40000800 	.word	0x40000800
    55f0:	20000d78 	.word	0x20000d78
    55f4:	00005599 	.word	0x00005599

000055f8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    55f8:	b580      	push	{r7, lr}
    55fa:	b082      	sub	sp, #8
    55fc:	af00      	add	r7, sp, #0
    55fe:	0002      	movs	r2, r0
    5600:	1dfb      	adds	r3, r7, #7
    5602:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    5604:	1dfb      	adds	r3, r7, #7
    5606:	781b      	ldrb	r3, [r3, #0]
    5608:	2b08      	cmp	r3, #8
    560a:	d840      	bhi.n	568e <system_clock_source_get_hz+0x96>
    560c:	009a      	lsls	r2, r3, #2
    560e:	4b22      	ldr	r3, [pc, #136]	; (5698 <system_clock_source_get_hz+0xa0>)
    5610:	18d3      	adds	r3, r2, r3
    5612:	681b      	ldr	r3, [r3, #0]
    5614:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    5616:	4b21      	ldr	r3, [pc, #132]	; (569c <system_clock_source_get_hz+0xa4>)
    5618:	691b      	ldr	r3, [r3, #16]
    561a:	e039      	b.n	5690 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    561c:	4b20      	ldr	r3, [pc, #128]	; (56a0 <system_clock_source_get_hz+0xa8>)
    561e:	6a1b      	ldr	r3, [r3, #32]
    5620:	059b      	lsls	r3, r3, #22
    5622:	0f9b      	lsrs	r3, r3, #30
    5624:	b2db      	uxtb	r3, r3
    5626:	001a      	movs	r2, r3
    5628:	4b1e      	ldr	r3, [pc, #120]	; (56a4 <system_clock_source_get_hz+0xac>)
    562a:	40d3      	lsrs	r3, r2
    562c:	e030      	b.n	5690 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    562e:	2380      	movs	r3, #128	; 0x80
    5630:	021b      	lsls	r3, r3, #8
    5632:	e02d      	b.n	5690 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    5634:	2380      	movs	r3, #128	; 0x80
    5636:	021b      	lsls	r3, r3, #8
    5638:	e02a      	b.n	5690 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    563a:	4b18      	ldr	r3, [pc, #96]	; (569c <system_clock_source_get_hz+0xa4>)
    563c:	695b      	ldr	r3, [r3, #20]
    563e:	e027      	b.n	5690 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5640:	4b16      	ldr	r3, [pc, #88]	; (569c <system_clock_source_get_hz+0xa4>)
    5642:	681b      	ldr	r3, [r3, #0]
    5644:	2202      	movs	r2, #2
    5646:	4013      	ands	r3, r2
    5648:	d101      	bne.n	564e <system_clock_source_get_hz+0x56>
			return 0;
    564a:	2300      	movs	r3, #0
    564c:	e020      	b.n	5690 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    564e:	4b16      	ldr	r3, [pc, #88]	; (56a8 <system_clock_source_get_hz+0xb0>)
    5650:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    5652:	4b12      	ldr	r3, [pc, #72]	; (569c <system_clock_source_get_hz+0xa4>)
    5654:	681b      	ldr	r3, [r3, #0]
    5656:	2204      	movs	r2, #4
    5658:	4013      	ands	r3, r2
    565a:	d009      	beq.n	5670 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    565c:	2000      	movs	r0, #0
    565e:	4b13      	ldr	r3, [pc, #76]	; (56ac <system_clock_source_get_hz+0xb4>)
    5660:	4798      	blx	r3
    5662:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    5664:	4b0d      	ldr	r3, [pc, #52]	; (569c <system_clock_source_get_hz+0xa4>)
    5666:	689b      	ldr	r3, [r3, #8]
    5668:	041b      	lsls	r3, r3, #16
    566a:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    566c:	4353      	muls	r3, r2
    566e:	e00f      	b.n	5690 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    5670:	4b0f      	ldr	r3, [pc, #60]	; (56b0 <system_clock_source_get_hz+0xb8>)
    5672:	e00d      	b.n	5690 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5674:	4a0a      	ldr	r2, [pc, #40]	; (56a0 <system_clock_source_get_hz+0xa8>)
    5676:	2350      	movs	r3, #80	; 0x50
    5678:	5cd3      	ldrb	r3, [r2, r3]
    567a:	b2db      	uxtb	r3, r3
    567c:	001a      	movs	r2, r3
    567e:	2304      	movs	r3, #4
    5680:	4013      	ands	r3, r2
    5682:	d101      	bne.n	5688 <system_clock_source_get_hz+0x90>
			return 0;
    5684:	2300      	movs	r3, #0
    5686:	e003      	b.n	5690 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    5688:	4b04      	ldr	r3, [pc, #16]	; (569c <system_clock_source_get_hz+0xa4>)
    568a:	68db      	ldr	r3, [r3, #12]
    568c:	e000      	b.n	5690 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    568e:	2300      	movs	r3, #0
	}
}
    5690:	0018      	movs	r0, r3
    5692:	46bd      	mov	sp, r7
    5694:	b002      	add	sp, #8
    5696:	bd80      	pop	{r7, pc}
    5698:	0000dd48 	.word	0x0000dd48
    569c:	20000d78 	.word	0x20000d78
    56a0:	40000800 	.word	0x40000800
    56a4:	007a1200 	.word	0x007a1200
    56a8:	00005599 	.word	0x00005599
    56ac:	00006059 	.word	0x00006059
    56b0:	02dc6c00 	.word	0x02dc6c00

000056b4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    56b4:	b580      	push	{r7, lr}
    56b6:	b084      	sub	sp, #16
    56b8:	af00      	add	r7, sp, #0
    56ba:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    56bc:	4b1a      	ldr	r3, [pc, #104]	; (5728 <system_clock_source_osc8m_set_config+0x74>)
    56be:	6a1b      	ldr	r3, [r3, #32]
    56c0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    56c2:	687b      	ldr	r3, [r7, #4]
    56c4:	781b      	ldrb	r3, [r3, #0]
    56c6:	1c1a      	adds	r2, r3, #0
    56c8:	2303      	movs	r3, #3
    56ca:	4013      	ands	r3, r2
    56cc:	b2da      	uxtb	r2, r3
    56ce:	230d      	movs	r3, #13
    56d0:	18fb      	adds	r3, r7, r3
    56d2:	2103      	movs	r1, #3
    56d4:	400a      	ands	r2, r1
    56d6:	0010      	movs	r0, r2
    56d8:	781a      	ldrb	r2, [r3, #0]
    56da:	2103      	movs	r1, #3
    56dc:	438a      	bics	r2, r1
    56de:	1c11      	adds	r1, r2, #0
    56e0:	1c02      	adds	r2, r0, #0
    56e2:	430a      	orrs	r2, r1
    56e4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    56e6:	687b      	ldr	r3, [r7, #4]
    56e8:	789a      	ldrb	r2, [r3, #2]
    56ea:	230c      	movs	r3, #12
    56ec:	18fb      	adds	r3, r7, r3
    56ee:	01d0      	lsls	r0, r2, #7
    56f0:	781a      	ldrb	r2, [r3, #0]
    56f2:	217f      	movs	r1, #127	; 0x7f
    56f4:	400a      	ands	r2, r1
    56f6:	1c11      	adds	r1, r2, #0
    56f8:	1c02      	adds	r2, r0, #0
    56fa:	430a      	orrs	r2, r1
    56fc:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    56fe:	687b      	ldr	r3, [r7, #4]
    5700:	785a      	ldrb	r2, [r3, #1]
    5702:	230c      	movs	r3, #12
    5704:	18fb      	adds	r3, r7, r3
    5706:	2101      	movs	r1, #1
    5708:	400a      	ands	r2, r1
    570a:	0190      	lsls	r0, r2, #6
    570c:	781a      	ldrb	r2, [r3, #0]
    570e:	2140      	movs	r1, #64	; 0x40
    5710:	438a      	bics	r2, r1
    5712:	1c11      	adds	r1, r2, #0
    5714:	1c02      	adds	r2, r0, #0
    5716:	430a      	orrs	r2, r1
    5718:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    571a:	4b03      	ldr	r3, [pc, #12]	; (5728 <system_clock_source_osc8m_set_config+0x74>)
    571c:	68fa      	ldr	r2, [r7, #12]
    571e:	621a      	str	r2, [r3, #32]
}
    5720:	46c0      	nop			; (mov r8, r8)
    5722:	46bd      	mov	sp, r7
    5724:	b004      	add	sp, #16
    5726:	bd80      	pop	{r7, pc}
    5728:	40000800 	.word	0x40000800

0000572c <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    572c:	b580      	push	{r7, lr}
    572e:	b084      	sub	sp, #16
    5730:	af00      	add	r7, sp, #0
    5732:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    5734:	4b2f      	ldr	r3, [pc, #188]	; (57f4 <system_clock_source_osc32k_set_config+0xc8>)
    5736:	699b      	ldr	r3, [r3, #24]
    5738:	60fb      	str	r3, [r7, #12]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    573a:	687b      	ldr	r3, [r7, #4]
    573c:	785a      	ldrb	r2, [r3, #1]
    573e:	230c      	movs	r3, #12
    5740:	18fb      	adds	r3, r7, r3
    5742:	2101      	movs	r1, #1
    5744:	400a      	ands	r2, r1
    5746:	00d0      	lsls	r0, r2, #3
    5748:	781a      	ldrb	r2, [r3, #0]
    574a:	2108      	movs	r1, #8
    574c:	438a      	bics	r2, r1
    574e:	1c11      	adds	r1, r2, #0
    5750:	1c02      	adds	r2, r0, #0
    5752:	430a      	orrs	r2, r1
    5754:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K    = config->enable_32khz_output;
    5756:	687b      	ldr	r3, [r7, #4]
    5758:	789a      	ldrb	r2, [r3, #2]
    575a:	230c      	movs	r3, #12
    575c:	18fb      	adds	r3, r7, r3
    575e:	2101      	movs	r1, #1
    5760:	400a      	ands	r2, r1
    5762:	0090      	lsls	r0, r2, #2
    5764:	781a      	ldrb	r2, [r3, #0]
    5766:	2104      	movs	r1, #4
    5768:	438a      	bics	r2, r1
    576a:	1c11      	adds	r1, r2, #0
    576c:	1c02      	adds	r2, r0, #0
    576e:	430a      	orrs	r2, r1
    5770:	701a      	strb	r2, [r3, #0]
	temp.bit.STARTUP  = config->startup_time;
    5772:	687b      	ldr	r3, [r7, #4]
    5774:	781b      	ldrb	r3, [r3, #0]
    5776:	1c1a      	adds	r2, r3, #0
    5778:	2307      	movs	r3, #7
    577a:	4013      	ands	r3, r2
    577c:	b2da      	uxtb	r2, r3
    577e:	230d      	movs	r3, #13
    5780:	18fb      	adds	r3, r7, r3
    5782:	2107      	movs	r1, #7
    5784:	400a      	ands	r2, r1
    5786:	0010      	movs	r0, r2
    5788:	781a      	ldrb	r2, [r3, #0]
    578a:	2107      	movs	r1, #7
    578c:	438a      	bics	r2, r1
    578e:	1c11      	adds	r1, r2, #0
    5790:	1c02      	adds	r2, r0, #0
    5792:	430a      	orrs	r2, r1
    5794:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5796:	687b      	ldr	r3, [r7, #4]
    5798:	791a      	ldrb	r2, [r3, #4]
    579a:	230c      	movs	r3, #12
    579c:	18fb      	adds	r3, r7, r3
    579e:	01d0      	lsls	r0, r2, #7
    57a0:	781a      	ldrb	r2, [r3, #0]
    57a2:	217f      	movs	r1, #127	; 0x7f
    57a4:	400a      	ands	r2, r1
    57a6:	1c11      	adds	r1, r2, #0
    57a8:	1c02      	adds	r2, r0, #0
    57aa:	430a      	orrs	r2, r1
    57ac:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    57ae:	687b      	ldr	r3, [r7, #4]
    57b0:	78da      	ldrb	r2, [r3, #3]
    57b2:	230c      	movs	r3, #12
    57b4:	18fb      	adds	r3, r7, r3
    57b6:	2101      	movs	r1, #1
    57b8:	400a      	ands	r2, r1
    57ba:	0190      	lsls	r0, r2, #6
    57bc:	781a      	ldrb	r2, [r3, #0]
    57be:	2140      	movs	r1, #64	; 0x40
    57c0:	438a      	bics	r2, r1
    57c2:	1c11      	adds	r1, r2, #0
    57c4:	1c02      	adds	r2, r0, #0
    57c6:	430a      	orrs	r2, r1
    57c8:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    57ca:	687b      	ldr	r3, [r7, #4]
    57cc:	795a      	ldrb	r2, [r3, #5]
    57ce:	230d      	movs	r3, #13
    57d0:	18fb      	adds	r3, r7, r3
    57d2:	2101      	movs	r1, #1
    57d4:	400a      	ands	r2, r1
    57d6:	0110      	lsls	r0, r2, #4
    57d8:	781a      	ldrb	r2, [r3, #0]
    57da:	2110      	movs	r1, #16
    57dc:	438a      	bics	r2, r1
    57de:	1c11      	adds	r1, r2, #0
    57e0:	1c02      	adds	r2, r0, #0
    57e2:	430a      	orrs	r2, r1
    57e4:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC32K  = temp;
    57e6:	4b03      	ldr	r3, [pc, #12]	; (57f4 <system_clock_source_osc32k_set_config+0xc8>)
    57e8:	68fa      	ldr	r2, [r7, #12]
    57ea:	619a      	str	r2, [r3, #24]
}
    57ec:	46c0      	nop			; (mov r8, r8)
    57ee:	46bd      	mov	sp, r7
    57f0:	b004      	add	sp, #16
    57f2:	bd80      	pop	{r7, pc}
    57f4:	40000800 	.word	0x40000800

000057f8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    57f8:	b580      	push	{r7, lr}
    57fa:	b082      	sub	sp, #8
    57fc:	af00      	add	r7, sp, #0
    57fe:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5800:	687b      	ldr	r3, [r7, #4]
    5802:	7a1b      	ldrb	r3, [r3, #8]
    5804:	029b      	lsls	r3, r3, #10
    5806:	041b      	lsls	r3, r3, #16
    5808:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    580a:	687b      	ldr	r3, [r7, #4]
    580c:	895b      	ldrh	r3, [r3, #10]
    580e:	059b      	lsls	r3, r3, #22
    5810:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5812:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    5814:	4b23      	ldr	r3, [pc, #140]	; (58a4 <system_clock_source_dfll_set_config+0xac>)
    5816:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5818:	687b      	ldr	r3, [r7, #4]
    581a:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    581c:	687b      	ldr	r3, [r7, #4]
    581e:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5820:	4313      	orrs	r3, r2
    5822:	b2db      	uxtb	r3, r3
    5824:	001a      	movs	r2, r3
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    5826:	687b      	ldr	r3, [r7, #4]
    5828:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    582a:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    582c:	687a      	ldr	r2, [r7, #4]
    582e:	8892      	ldrh	r2, [r2, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    5830:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    5832:	687b      	ldr	r3, [r7, #4]
    5834:	785b      	ldrb	r3, [r3, #1]
    5836:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    5838:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    583a:	4b1a      	ldr	r3, [pc, #104]	; (58a4 <system_clock_source_dfll_set_config+0xac>)
    583c:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    583e:	687b      	ldr	r3, [r7, #4]
    5840:	781b      	ldrb	r3, [r3, #0]
    5842:	2b04      	cmp	r3, #4
    5844:	d116      	bne.n	5874 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5846:	687b      	ldr	r3, [r7, #4]
    5848:	7b1b      	ldrb	r3, [r3, #12]
    584a:	069b      	lsls	r3, r3, #26
    584c:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    584e:	687b      	ldr	r3, [r7, #4]
    5850:	89db      	ldrh	r3, [r3, #14]
    5852:	041b      	lsls	r3, r3, #16
    5854:	0019      	movs	r1, r3
    5856:	4b14      	ldr	r3, [pc, #80]	; (58a8 <system_clock_source_dfll_set_config+0xb0>)
    5858:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    585a:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    585c:	687a      	ldr	r2, [r7, #4]
    585e:	8a12      	ldrh	r2, [r2, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5860:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    5862:	4b10      	ldr	r3, [pc, #64]	; (58a4 <system_clock_source_dfll_set_config+0xac>)
    5864:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    5866:	4b0f      	ldr	r3, [pc, #60]	; (58a4 <system_clock_source_dfll_set_config+0xac>)
    5868:	681b      	ldr	r3, [r3, #0]
    586a:	687a      	ldr	r2, [r7, #4]
    586c:	7812      	ldrb	r2, [r2, #0]
    586e:	431a      	orrs	r2, r3
    5870:	4b0c      	ldr	r3, [pc, #48]	; (58a4 <system_clock_source_dfll_set_config+0xac>)
    5872:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    5874:	687b      	ldr	r3, [r7, #4]
    5876:	781b      	ldrb	r3, [r3, #0]
    5878:	2b20      	cmp	r3, #32
    587a:	d10e      	bne.n	589a <system_clock_source_dfll_set_config+0xa2>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    587c:	687b      	ldr	r3, [r7, #4]
    587e:	8a1b      	ldrh	r3, [r3, #16]
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    5880:	001a      	movs	r2, r3
    5882:	4b08      	ldr	r3, [pc, #32]	; (58a4 <system_clock_source_dfll_set_config+0xac>)
    5884:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    5886:	4b07      	ldr	r3, [pc, #28]	; (58a4 <system_clock_source_dfll_set_config+0xac>)
    5888:	681b      	ldr	r3, [r3, #0]
    588a:	687a      	ldr	r2, [r7, #4]
    588c:	7812      	ldrb	r2, [r2, #0]
    588e:	4313      	orrs	r3, r2
    5890:	2280      	movs	r2, #128	; 0x80
    5892:	00d2      	lsls	r2, r2, #3
    5894:	431a      	orrs	r2, r3
    5896:	4b03      	ldr	r3, [pc, #12]	; (58a4 <system_clock_source_dfll_set_config+0xac>)
    5898:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    589a:	46c0      	nop			; (mov r8, r8)
    589c:	46bd      	mov	sp, r7
    589e:	b002      	add	sp, #8
    58a0:	bd80      	pop	{r7, pc}
    58a2:	46c0      	nop			; (mov r8, r8)
    58a4:	20000d78 	.word	0x20000d78
    58a8:	03ff0000 	.word	0x03ff0000

000058ac <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    58ac:	b580      	push	{r7, lr}
    58ae:	b082      	sub	sp, #8
    58b0:	af00      	add	r7, sp, #0
    58b2:	0002      	movs	r2, r0
    58b4:	1dfb      	adds	r3, r7, #7
    58b6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    58b8:	1dfb      	adds	r3, r7, #7
    58ba:	781b      	ldrb	r3, [r3, #0]
    58bc:	2b08      	cmp	r3, #8
    58be:	d83b      	bhi.n	5938 <system_clock_source_enable+0x8c>
    58c0:	009a      	lsls	r2, r3, #2
    58c2:	4b21      	ldr	r3, [pc, #132]	; (5948 <system_clock_source_enable+0x9c>)
    58c4:	18d3      	adds	r3, r2, r3
    58c6:	681b      	ldr	r3, [r3, #0]
    58c8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    58ca:	4b20      	ldr	r3, [pc, #128]	; (594c <system_clock_source_enable+0xa0>)
    58cc:	4a1f      	ldr	r2, [pc, #124]	; (594c <system_clock_source_enable+0xa0>)
    58ce:	6a12      	ldr	r2, [r2, #32]
    58d0:	2102      	movs	r1, #2
    58d2:	430a      	orrs	r2, r1
    58d4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    58d6:	2300      	movs	r3, #0
    58d8:	e031      	b.n	593e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    58da:	4b1c      	ldr	r3, [pc, #112]	; (594c <system_clock_source_enable+0xa0>)
    58dc:	4a1b      	ldr	r2, [pc, #108]	; (594c <system_clock_source_enable+0xa0>)
    58de:	6992      	ldr	r2, [r2, #24]
    58e0:	2102      	movs	r1, #2
    58e2:	430a      	orrs	r2, r1
    58e4:	619a      	str	r2, [r3, #24]
		break;
    58e6:	e029      	b.n	593c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    58e8:	4a18      	ldr	r2, [pc, #96]	; (594c <system_clock_source_enable+0xa0>)
    58ea:	4b18      	ldr	r3, [pc, #96]	; (594c <system_clock_source_enable+0xa0>)
    58ec:	8a1b      	ldrh	r3, [r3, #16]
    58ee:	b29b      	uxth	r3, r3
    58f0:	2102      	movs	r1, #2
    58f2:	430b      	orrs	r3, r1
    58f4:	b29b      	uxth	r3, r3
    58f6:	8213      	strh	r3, [r2, #16]
		break;
    58f8:	e020      	b.n	593c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    58fa:	4a14      	ldr	r2, [pc, #80]	; (594c <system_clock_source_enable+0xa0>)
    58fc:	4b13      	ldr	r3, [pc, #76]	; (594c <system_clock_source_enable+0xa0>)
    58fe:	8a9b      	ldrh	r3, [r3, #20]
    5900:	b29b      	uxth	r3, r3
    5902:	2102      	movs	r1, #2
    5904:	430b      	orrs	r3, r1
    5906:	b29b      	uxth	r3, r3
    5908:	8293      	strh	r3, [r2, #20]
		break;
    590a:	e017      	b.n	593c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    590c:	4b10      	ldr	r3, [pc, #64]	; (5950 <system_clock_source_enable+0xa4>)
    590e:	681b      	ldr	r3, [r3, #0]
    5910:	2202      	movs	r2, #2
    5912:	431a      	orrs	r2, r3
    5914:	4b0e      	ldr	r3, [pc, #56]	; (5950 <system_clock_source_enable+0xa4>)
    5916:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    5918:	4b0e      	ldr	r3, [pc, #56]	; (5954 <system_clock_source_enable+0xa8>)
    591a:	4798      	blx	r3
		break;
    591c:	e00e      	b.n	593c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    591e:	4a0b      	ldr	r2, [pc, #44]	; (594c <system_clock_source_enable+0xa0>)
    5920:	490a      	ldr	r1, [pc, #40]	; (594c <system_clock_source_enable+0xa0>)
    5922:	2344      	movs	r3, #68	; 0x44
    5924:	5ccb      	ldrb	r3, [r1, r3]
    5926:	b2db      	uxtb	r3, r3
    5928:	2102      	movs	r1, #2
    592a:	430b      	orrs	r3, r1
    592c:	b2d9      	uxtb	r1, r3
    592e:	2344      	movs	r3, #68	; 0x44
    5930:	54d1      	strb	r1, [r2, r3]
		break;
    5932:	e003      	b.n	593c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    5934:	2300      	movs	r3, #0
    5936:	e002      	b.n	593e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5938:	2317      	movs	r3, #23
    593a:	e000      	b.n	593e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    593c:	2300      	movs	r3, #0
}
    593e:	0018      	movs	r0, r3
    5940:	46bd      	mov	sp, r7
    5942:	b002      	add	sp, #8
    5944:	bd80      	pop	{r7, pc}
    5946:	46c0      	nop			; (mov r8, r8)
    5948:	0000dd6c 	.word	0x0000dd6c
    594c:	40000800 	.word	0x40000800
    5950:	20000d78 	.word	0x20000d78
    5954:	000055b5 	.word	0x000055b5

00005958 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    5958:	b580      	push	{r7, lr}
    595a:	b084      	sub	sp, #16
    595c:	af00      	add	r7, sp, #0
    595e:	0002      	movs	r2, r0
    5960:	1dfb      	adds	r3, r7, #7
    5962:	701a      	strb	r2, [r3, #0]
	uint32_t mask;

	switch (clock_source) {
    5964:	1dfb      	adds	r3, r7, #7
    5966:	781b      	ldrb	r3, [r3, #0]
    5968:	2b08      	cmp	r3, #8
    596a:	d821      	bhi.n	59b0 <system_clock_source_is_ready+0x58>
    596c:	009a      	lsls	r2, r3, #2
    596e:	4b17      	ldr	r3, [pc, #92]	; (59cc <system_clock_source_is_ready+0x74>)
    5970:	18d3      	adds	r3, r2, r3
    5972:	681b      	ldr	r3, [r3, #0]
    5974:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    5976:	2308      	movs	r3, #8
    5978:	60fb      	str	r3, [r7, #12]
		break;
    597a:	e01b      	b.n	59b4 <system_clock_source_is_ready+0x5c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    597c:	2304      	movs	r3, #4
    597e:	60fb      	str	r3, [r7, #12]
		break;
    5980:	e018      	b.n	59b4 <system_clock_source_is_ready+0x5c>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    5982:	2301      	movs	r3, #1
    5984:	60fb      	str	r3, [r7, #12]
		break;
    5986:	e015      	b.n	59b4 <system_clock_source_is_ready+0x5c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    5988:	2302      	movs	r3, #2
    598a:	60fb      	str	r3, [r7, #12]
		break;
    598c:	e012      	b.n	59b4 <system_clock_source_is_ready+0x5c>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		mask = SYSCTRL_PCLKSR_DFLLRDY;
    598e:	2310      	movs	r3, #16
    5990:	60fb      	str	r3, [r7, #12]
		break;
    5992:	e00f      	b.n	59b4 <system_clock_source_is_ready+0x5c>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    5994:	4a0e      	ldr	r2, [pc, #56]	; (59d0 <system_clock_source_is_ready+0x78>)
    5996:	2350      	movs	r3, #80	; 0x50
    5998:	5cd3      	ldrb	r3, [r2, r3]
    599a:	b2db      	uxtb	r3, r3
    599c:	001a      	movs	r2, r3
    599e:	2303      	movs	r3, #3
    59a0:	4013      	ands	r3, r2
    59a2:	3b03      	subs	r3, #3
    59a4:	425a      	negs	r2, r3
    59a6:	4153      	adcs	r3, r2
    59a8:	b2db      	uxtb	r3, r3
    59aa:	e00a      	b.n	59c2 <system_clock_source_is_ready+0x6a>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    59ac:	2301      	movs	r3, #1
    59ae:	e008      	b.n	59c2 <system_clock_source_is_ready+0x6a>

	default:
		return false;
    59b0:	2300      	movs	r3, #0
    59b2:	e006      	b.n	59c2 <system_clock_source_is_ready+0x6a>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) != 0);
    59b4:	4b06      	ldr	r3, [pc, #24]	; (59d0 <system_clock_source_is_ready+0x78>)
    59b6:	68db      	ldr	r3, [r3, #12]
    59b8:	68fa      	ldr	r2, [r7, #12]
    59ba:	4013      	ands	r3, r2
    59bc:	1e5a      	subs	r2, r3, #1
    59be:	4193      	sbcs	r3, r2
    59c0:	b2db      	uxtb	r3, r3
}
    59c2:	0018      	movs	r0, r3
    59c4:	46bd      	mov	sp, r7
    59c6:	b004      	add	sp, #16
    59c8:	bd80      	pop	{r7, pc}
    59ca:	46c0      	nop			; (mov r8, r8)
    59cc:	0000dd90 	.word	0x0000dd90
    59d0:	40000800 	.word	0x40000800

000059d4 <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
    59d4:	b580      	push	{r7, lr}
    59d6:	b0a4      	sub	sp, #144	; 0x90
    59d8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    59da:	4b75      	ldr	r3, [pc, #468]	; (5bb0 <system_clock_init+0x1dc>)
    59dc:	22c2      	movs	r2, #194	; 0xc2
    59de:	00d2      	lsls	r2, r2, #3
    59e0:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    59e2:	2002      	movs	r0, #2
    59e4:	4b73      	ldr	r3, [pc, #460]	; (5bb4 <system_clock_init+0x1e0>)
    59e6:	4798      	blx	r3
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    59e8:	4a71      	ldr	r2, [pc, #452]	; (5bb0 <system_clock_init+0x1dc>)
			(*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> SYSCTRL_FUSES_OSC32K_Pos);
    59ea:	4b73      	ldr	r3, [pc, #460]	; (5bb8 <system_clock_init+0x1e4>)
    59ec:	681b      	ldr	r3, [r3, #0]
    59ee:	099b      	lsrs	r3, r3, #6
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    59f0:	b2db      	uxtb	r3, r3
    59f2:	1c19      	adds	r1, r3, #0
    59f4:	237f      	movs	r3, #127	; 0x7f
    59f6:	400b      	ands	r3, r1
    59f8:	b2d9      	uxtb	r1, r3
    59fa:	6993      	ldr	r3, [r2, #24]
    59fc:	207f      	movs	r0, #127	; 0x7f
    59fe:	4001      	ands	r1, r0
    5a00:	0409      	lsls	r1, r1, #16
    5a02:	486e      	ldr	r0, [pc, #440]	; (5bbc <system_clock_init+0x1e8>)
    5a04:	4003      	ands	r3, r0
    5a06:	430b      	orrs	r3, r1
    5a08:	6193      	str	r3, [r2, #24]
			(*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> SYSCTRL_FUSES_OSC32K_Pos);

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);
    5a0a:	2388      	movs	r3, #136	; 0x88
    5a0c:	18fb      	adds	r3, r7, r3
    5a0e:	0018      	movs	r0, r3
    5a10:	4b6b      	ldr	r3, [pc, #428]	; (5bc0 <system_clock_init+0x1ec>)
    5a12:	4798      	blx	r3

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
    5a14:	2388      	movs	r3, #136	; 0x88
    5a16:	18fb      	adds	r3, r7, r3
    5a18:	2207      	movs	r2, #7
    5a1a:	701a      	strb	r2, [r3, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    5a1c:	2388      	movs	r3, #136	; 0x88
    5a1e:	18fb      	adds	r3, r7, r3
    5a20:	2201      	movs	r2, #1
    5a22:	705a      	strb	r2, [r3, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
    5a24:	2388      	movs	r3, #136	; 0x88
    5a26:	18fb      	adds	r3, r7, r3
    5a28:	2201      	movs	r2, #1
    5a2a:	709a      	strb	r2, [r3, #2]
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    5a2c:	2388      	movs	r3, #136	; 0x88
    5a2e:	18fb      	adds	r3, r7, r3
    5a30:	2201      	movs	r2, #1
    5a32:	711a      	strb	r2, [r3, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    5a34:	2388      	movs	r3, #136	; 0x88
    5a36:	18fb      	adds	r3, r7, r3
    5a38:	2200      	movs	r2, #0
    5a3a:	70da      	strb	r2, [r3, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    5a3c:	2388      	movs	r3, #136	; 0x88
    5a3e:	18fb      	adds	r3, r7, r3
    5a40:	0018      	movs	r0, r3
    5a42:	4b60      	ldr	r3, [pc, #384]	; (5bc4 <system_clock_init+0x1f0>)
    5a44:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    5a46:	2004      	movs	r0, #4
    5a48:	4b5f      	ldr	r3, [pc, #380]	; (5bc8 <system_clock_init+0x1f4>)
    5a4a:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    5a4c:	2374      	movs	r3, #116	; 0x74
    5a4e:	18fb      	adds	r3, r7, r3
    5a50:	0018      	movs	r0, r3
    5a52:	4b5e      	ldr	r3, [pc, #376]	; (5bcc <system_clock_init+0x1f8>)
    5a54:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    5a56:	2374      	movs	r3, #116	; 0x74
    5a58:	18fb      	adds	r3, r7, r3
    5a5a:	2204      	movs	r2, #4
    5a5c:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    5a5e:	2374      	movs	r3, #116	; 0x74
    5a60:	18fb      	adds	r3, r7, r3
    5a62:	2200      	movs	r2, #0
    5a64:	705a      	strb	r2, [r3, #1]
		dfll_conf.coarse_value = CONF_CLOCK_DFLL_COARSE_VALUE;
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5a66:	2374      	movs	r3, #116	; 0x74
    5a68:	18fb      	adds	r3, r7, r3
    5a6a:	2200      	movs	r2, #0
    5a6c:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5a6e:	2374      	movs	r3, #116	; 0x74
    5a70:	18fb      	adds	r3, r7, r3
    5a72:	2200      	movs	r2, #0
    5a74:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5a76:	2374      	movs	r3, #116	; 0x74
    5a78:	18fb      	adds	r3, r7, r3
    5a7a:	2200      	movs	r2, #0
    5a7c:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5a7e:	2374      	movs	r3, #116	; 0x74
    5a80:	18fb      	adds	r3, r7, r3
    5a82:	2200      	movs	r2, #0
    5a84:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    5a86:	2374      	movs	r3, #116	; 0x74
    5a88:	18fb      	adds	r3, r7, r3
    5a8a:	22b7      	movs	r2, #183	; 0xb7
    5a8c:	00d2      	lsls	r2, r2, #3
    5a8e:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    5a90:	2374      	movs	r3, #116	; 0x74
    5a92:	18fb      	adds	r3, r7, r3
    5a94:	2207      	movs	r2, #7
    5a96:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    5a98:	2374      	movs	r3, #116	; 0x74
    5a9a:	18fb      	adds	r3, r7, r3
    5a9c:	223f      	movs	r2, #63	; 0x3f
    5a9e:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    5aa0:	2374      	movs	r3, #116	; 0x74
    5aa2:	18fb      	adds	r3, r7, r3
    5aa4:	0018      	movs	r0, r3
    5aa6:	4b4a      	ldr	r3, [pc, #296]	; (5bd0 <system_clock_init+0x1fc>)
    5aa8:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    5aaa:	2370      	movs	r3, #112	; 0x70
    5aac:	18fb      	adds	r3, r7, r3
    5aae:	0018      	movs	r0, r3
    5ab0:	4b48      	ldr	r3, [pc, #288]	; (5bd4 <system_clock_init+0x200>)
    5ab2:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    5ab4:	2370      	movs	r3, #112	; 0x70
    5ab6:	18fb      	adds	r3, r7, r3
    5ab8:	2200      	movs	r2, #0
    5aba:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    5abc:	2370      	movs	r3, #112	; 0x70
    5abe:	18fb      	adds	r3, r7, r3
    5ac0:	2201      	movs	r2, #1
    5ac2:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    5ac4:	2370      	movs	r3, #112	; 0x70
    5ac6:	18fb      	adds	r3, r7, r3
    5ac8:	2201      	movs	r2, #1
    5aca:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    5acc:	2370      	movs	r3, #112	; 0x70
    5ace:	18fb      	adds	r3, r7, r3
    5ad0:	0018      	movs	r0, r3
    5ad2:	4b41      	ldr	r3, [pc, #260]	; (5bd8 <system_clock_init+0x204>)
    5ad4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    5ad6:	2006      	movs	r0, #6
    5ad8:	4b3b      	ldr	r3, [pc, #236]	; (5bc8 <system_clock_init+0x1f4>)
    5ada:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    5adc:	4b3f      	ldr	r3, [pc, #252]	; (5bdc <system_clock_init+0x208>)
    5ade:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(8, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    5ae0:	2358      	movs	r3, #88	; 0x58
    5ae2:	18fb      	adds	r3, r7, r3
    5ae4:	0018      	movs	r0, r3
    5ae6:	4b3e      	ldr	r3, [pc, #248]	; (5be0 <system_clock_init+0x20c>)
    5ae8:	4798      	blx	r3
    5aea:	2358      	movs	r3, #88	; 0x58
    5aec:	18fb      	adds	r3, r7, r3
    5aee:	2204      	movs	r2, #4
    5af0:	701a      	strb	r2, [r3, #0]
    5af2:	2358      	movs	r3, #88	; 0x58
    5af4:	18fb      	adds	r3, r7, r3
    5af6:	2201      	movs	r2, #1
    5af8:	605a      	str	r2, [r3, #4]
    5afa:	2358      	movs	r3, #88	; 0x58
    5afc:	18fb      	adds	r3, r7, r3
    5afe:	2200      	movs	r2, #0
    5b00:	721a      	strb	r2, [r3, #8]
    5b02:	2358      	movs	r3, #88	; 0x58
    5b04:	18fb      	adds	r3, r7, r3
    5b06:	2200      	movs	r2, #0
    5b08:	725a      	strb	r2, [r3, #9]
    5b0a:	2358      	movs	r3, #88	; 0x58
    5b0c:	18fb      	adds	r3, r7, r3
    5b0e:	0019      	movs	r1, r3
    5b10:	2001      	movs	r0, #1
    5b12:	4b34      	ldr	r3, [pc, #208]	; (5be4 <system_clock_init+0x210>)
    5b14:	4798      	blx	r3
    5b16:	2001      	movs	r0, #1
    5b18:	4b33      	ldr	r3, [pc, #204]	; (5be8 <system_clock_init+0x214>)
    5b1a:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    5b1c:	230c      	movs	r3, #12
    5b1e:	18fb      	adds	r3, r7, r3
    5b20:	0018      	movs	r0, r3
    5b22:	4b32      	ldr	r3, [pc, #200]	; (5bec <system_clock_init+0x218>)
    5b24:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    5b26:	230c      	movs	r3, #12
    5b28:	18fb      	adds	r3, r7, r3
    5b2a:	2201      	movs	r2, #1
    5b2c:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    5b2e:	230c      	movs	r3, #12
    5b30:	18fb      	adds	r3, r7, r3
    5b32:	0019      	movs	r1, r3
    5b34:	2000      	movs	r0, #0
    5b36:	4b2e      	ldr	r3, [pc, #184]	; (5bf0 <system_clock_init+0x21c>)
    5b38:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    5b3a:	2000      	movs	r0, #0
    5b3c:	4b2d      	ldr	r3, [pc, #180]	; (5bf4 <system_clock_init+0x220>)
    5b3e:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    5b40:	2007      	movs	r0, #7
    5b42:	4b21      	ldr	r3, [pc, #132]	; (5bc8 <system_clock_init+0x1f4>)
    5b44:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    5b46:	46c0      	nop			; (mov r8, r8)
    5b48:	2007      	movs	r0, #7
    5b4a:	4b2b      	ldr	r3, [pc, #172]	; (5bf8 <system_clock_init+0x224>)
    5b4c:	4798      	blx	r3
    5b4e:	0003      	movs	r3, r0
    5b50:	001a      	movs	r2, r3
    5b52:	2301      	movs	r3, #1
    5b54:	4053      	eors	r3, r2
    5b56:	b2db      	uxtb	r3, r3
    5b58:	2b00      	cmp	r3, #0
    5b5a:	d1f5      	bne.n	5b48 <system_clock_init+0x174>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    5b5c:	2000      	movs	r0, #0
    5b5e:	4b27      	ldr	r3, [pc, #156]	; (5bfc <system_clock_init+0x228>)
    5b60:	4798      	blx	r3
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
    5b62:	2000      	movs	r0, #0
    5b64:	4b26      	ldr	r3, [pc, #152]	; (5c00 <system_clock_init+0x22c>)
    5b66:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    5b68:	2100      	movs	r1, #0
    5b6a:	2000      	movs	r0, #0
    5b6c:	4b25      	ldr	r3, [pc, #148]	; (5c04 <system_clock_init+0x230>)
    5b6e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    5b70:	2100      	movs	r1, #0
    5b72:	2001      	movs	r0, #1
    5b74:	4b23      	ldr	r3, [pc, #140]	; (5c04 <system_clock_init+0x230>)
    5b76:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5b78:	003b      	movs	r3, r7
    5b7a:	0018      	movs	r0, r3
    5b7c:	4b18      	ldr	r3, [pc, #96]	; (5be0 <system_clock_init+0x20c>)
    5b7e:	4798      	blx	r3
    5b80:	003b      	movs	r3, r7
    5b82:	2207      	movs	r2, #7
    5b84:	701a      	strb	r2, [r3, #0]
    5b86:	003b      	movs	r3, r7
    5b88:	2201      	movs	r2, #1
    5b8a:	605a      	str	r2, [r3, #4]
    5b8c:	003b      	movs	r3, r7
    5b8e:	2200      	movs	r2, #0
    5b90:	721a      	strb	r2, [r3, #8]
    5b92:	003b      	movs	r3, r7
    5b94:	2200      	movs	r2, #0
    5b96:	725a      	strb	r2, [r3, #9]
    5b98:	003b      	movs	r3, r7
    5b9a:	0019      	movs	r1, r3
    5b9c:	2000      	movs	r0, #0
    5b9e:	4b11      	ldr	r3, [pc, #68]	; (5be4 <system_clock_init+0x210>)
    5ba0:	4798      	blx	r3
    5ba2:	2000      	movs	r0, #0
    5ba4:	4b10      	ldr	r3, [pc, #64]	; (5be8 <system_clock_init+0x214>)
    5ba6:	4798      	blx	r3
#endif
}
    5ba8:	46c0      	nop			; (mov r8, r8)
    5baa:	46bd      	mov	sp, r7
    5bac:	b024      	add	sp, #144	; 0x90
    5bae:	bd80      	pop	{r7, pc}
    5bb0:	40000800 	.word	0x40000800
    5bb4:	00005565 	.word	0x00005565
    5bb8:	00806024 	.word	0x00806024
    5bbc:	ff80ffff 	.word	0xff80ffff
    5bc0:	00005401 	.word	0x00005401
    5bc4:	0000572d 	.word	0x0000572d
    5bc8:	000058ad 	.word	0x000058ad
    5bcc:	00005459 	.word	0x00005459
    5bd0:	000057f9 	.word	0x000057f9
    5bd4:	00005435 	.word	0x00005435
    5bd8:	000056b5 	.word	0x000056b5
    5bdc:	00005cad 	.word	0x00005cad
    5be0:	000053b9 	.word	0x000053b9
    5be4:	00005cdd 	.word	0x00005cdd
    5be8:	00005e01 	.word	0x00005e01
    5bec:	000053e9 	.word	0x000053e9
    5bf0:	00005f35 	.word	0x00005f35
    5bf4:	00005f79 	.word	0x00005f79
    5bf8:	00005959 	.word	0x00005959
    5bfc:	000054f1 	.word	0x000054f1
    5c00:	000054ad 	.word	0x000054ad
    5c04:	00005511 	.word	0x00005511

00005c08 <system_gclk_is_syncing>:
 *
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    5c08:	b580      	push	{r7, lr}
    5c0a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
    5c0c:	4b05      	ldr	r3, [pc, #20]	; (5c24 <system_gclk_is_syncing+0x1c>)
    5c0e:	785b      	ldrb	r3, [r3, #1]
    5c10:	b2db      	uxtb	r3, r3
    5c12:	b25b      	sxtb	r3, r3
    5c14:	2b00      	cmp	r3, #0
    5c16:	da01      	bge.n	5c1c <system_gclk_is_syncing+0x14>
		return true;
    5c18:	2301      	movs	r3, #1
    5c1a:	e000      	b.n	5c1e <system_gclk_is_syncing+0x16>
	}

	return false;
    5c1c:	2300      	movs	r3, #0
}
    5c1e:	0018      	movs	r0, r3
    5c20:	46bd      	mov	sp, r7
    5c22:	bd80      	pop	{r7, pc}
    5c24:	40000c00 	.word	0x40000c00

00005c28 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    5c28:	b580      	push	{r7, lr}
    5c2a:	b082      	sub	sp, #8
    5c2c:	af00      	add	r7, sp, #0
    5c2e:	0002      	movs	r2, r0
    5c30:	6039      	str	r1, [r7, #0]
    5c32:	1dfb      	adds	r3, r7, #7
    5c34:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5c36:	1dfb      	adds	r3, r7, #7
    5c38:	781b      	ldrb	r3, [r3, #0]
    5c3a:	2b01      	cmp	r3, #1
    5c3c:	d00a      	beq.n	5c54 <system_apb_clock_set_mask+0x2c>
    5c3e:	2b02      	cmp	r3, #2
    5c40:	d00f      	beq.n	5c62 <system_apb_clock_set_mask+0x3a>
    5c42:	2b00      	cmp	r3, #0
    5c44:	d114      	bne.n	5c70 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    5c46:	4b0e      	ldr	r3, [pc, #56]	; (5c80 <system_apb_clock_set_mask+0x58>)
    5c48:	4a0d      	ldr	r2, [pc, #52]	; (5c80 <system_apb_clock_set_mask+0x58>)
    5c4a:	6991      	ldr	r1, [r2, #24]
    5c4c:	683a      	ldr	r2, [r7, #0]
    5c4e:	430a      	orrs	r2, r1
    5c50:	619a      	str	r2, [r3, #24]
			break;
    5c52:	e00f      	b.n	5c74 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    5c54:	4b0a      	ldr	r3, [pc, #40]	; (5c80 <system_apb_clock_set_mask+0x58>)
    5c56:	4a0a      	ldr	r2, [pc, #40]	; (5c80 <system_apb_clock_set_mask+0x58>)
    5c58:	69d1      	ldr	r1, [r2, #28]
    5c5a:	683a      	ldr	r2, [r7, #0]
    5c5c:	430a      	orrs	r2, r1
    5c5e:	61da      	str	r2, [r3, #28]
			break;
    5c60:	e008      	b.n	5c74 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    5c62:	4b07      	ldr	r3, [pc, #28]	; (5c80 <system_apb_clock_set_mask+0x58>)
    5c64:	4a06      	ldr	r2, [pc, #24]	; (5c80 <system_apb_clock_set_mask+0x58>)
    5c66:	6a11      	ldr	r1, [r2, #32]
    5c68:	683a      	ldr	r2, [r7, #0]
    5c6a:	430a      	orrs	r2, r1
    5c6c:	621a      	str	r2, [r3, #32]
			break;
    5c6e:	e001      	b.n	5c74 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5c70:	2317      	movs	r3, #23
    5c72:	e000      	b.n	5c76 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5c74:	2300      	movs	r3, #0
}
    5c76:	0018      	movs	r0, r3
    5c78:	46bd      	mov	sp, r7
    5c7a:	b002      	add	sp, #8
    5c7c:	bd80      	pop	{r7, pc}
    5c7e:	46c0      	nop			; (mov r8, r8)
    5c80:	40000400 	.word	0x40000400

00005c84 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    5c84:	b580      	push	{r7, lr}
    5c86:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    5c88:	4b02      	ldr	r3, [pc, #8]	; (5c94 <system_interrupt_enter_critical_section+0x10>)
    5c8a:	4798      	blx	r3
}
    5c8c:	46c0      	nop			; (mov r8, r8)
    5c8e:	46bd      	mov	sp, r7
    5c90:	bd80      	pop	{r7, pc}
    5c92:	46c0      	nop			; (mov r8, r8)
    5c94:	00005151 	.word	0x00005151

00005c98 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    5c98:	b580      	push	{r7, lr}
    5c9a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    5c9c:	4b02      	ldr	r3, [pc, #8]	; (5ca8 <system_interrupt_leave_critical_section+0x10>)
    5c9e:	4798      	blx	r3
}
    5ca0:	46c0      	nop			; (mov r8, r8)
    5ca2:	46bd      	mov	sp, r7
    5ca4:	bd80      	pop	{r7, pc}
    5ca6:	46c0      	nop			; (mov r8, r8)
    5ca8:	000051a5 	.word	0x000051a5

00005cac <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    5cac:	b580      	push	{r7, lr}
    5cae:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    5cb0:	2108      	movs	r1, #8
    5cb2:	2000      	movs	r0, #0
    5cb4:	4b07      	ldr	r3, [pc, #28]	; (5cd4 <system_gclk_init+0x28>)
    5cb6:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    5cb8:	4b07      	ldr	r3, [pc, #28]	; (5cd8 <system_gclk_init+0x2c>)
    5cba:	2201      	movs	r2, #1
    5cbc:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    5cbe:	46c0      	nop			; (mov r8, r8)
    5cc0:	4b05      	ldr	r3, [pc, #20]	; (5cd8 <system_gclk_init+0x2c>)
    5cc2:	781b      	ldrb	r3, [r3, #0]
    5cc4:	b2db      	uxtb	r3, r3
    5cc6:	001a      	movs	r2, r3
    5cc8:	2301      	movs	r3, #1
    5cca:	4013      	ands	r3, r2
    5ccc:	d1f8      	bne.n	5cc0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    5cce:	46c0      	nop			; (mov r8, r8)
    5cd0:	46bd      	mov	sp, r7
    5cd2:	bd80      	pop	{r7, pc}
    5cd4:	00005c29 	.word	0x00005c29
    5cd8:	40000c00 	.word	0x40000c00

00005cdc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5cdc:	b580      	push	{r7, lr}
    5cde:	b086      	sub	sp, #24
    5ce0:	af00      	add	r7, sp, #0
    5ce2:	0002      	movs	r2, r0
    5ce4:	6039      	str	r1, [r7, #0]
    5ce6:	1dfb      	adds	r3, r7, #7
    5ce8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    5cea:	1dfb      	adds	r3, r7, #7
    5cec:	781b      	ldrb	r3, [r3, #0]
    5cee:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    5cf0:	1dfb      	adds	r3, r7, #7
    5cf2:	781b      	ldrb	r3, [r3, #0]
    5cf4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    5cf6:	683b      	ldr	r3, [r7, #0]
    5cf8:	781b      	ldrb	r3, [r3, #0]
    5cfa:	021b      	lsls	r3, r3, #8
    5cfc:	001a      	movs	r2, r3
    5cfe:	697b      	ldr	r3, [r7, #20]
    5d00:	4313      	orrs	r3, r2
    5d02:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5d04:	683b      	ldr	r3, [r7, #0]
    5d06:	785b      	ldrb	r3, [r3, #1]
    5d08:	2b00      	cmp	r3, #0
    5d0a:	d004      	beq.n	5d16 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    5d0c:	697b      	ldr	r3, [r7, #20]
    5d0e:	2280      	movs	r2, #128	; 0x80
    5d10:	02d2      	lsls	r2, r2, #11
    5d12:	4313      	orrs	r3, r2
    5d14:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5d16:	683b      	ldr	r3, [r7, #0]
    5d18:	7a5b      	ldrb	r3, [r3, #9]
    5d1a:	2b00      	cmp	r3, #0
    5d1c:	d004      	beq.n	5d28 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    5d1e:	697b      	ldr	r3, [r7, #20]
    5d20:	2280      	movs	r2, #128	; 0x80
    5d22:	0312      	lsls	r2, r2, #12
    5d24:	4313      	orrs	r3, r2
    5d26:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    5d28:	683b      	ldr	r3, [r7, #0]
    5d2a:	685b      	ldr	r3, [r3, #4]
    5d2c:	2b01      	cmp	r3, #1
    5d2e:	d92c      	bls.n	5d8a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5d30:	683b      	ldr	r3, [r7, #0]
    5d32:	685a      	ldr	r2, [r3, #4]
    5d34:	683b      	ldr	r3, [r7, #0]
    5d36:	685b      	ldr	r3, [r3, #4]
    5d38:	3b01      	subs	r3, #1
    5d3a:	4013      	ands	r3, r2
    5d3c:	d11a      	bne.n	5d74 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    5d3e:	2300      	movs	r3, #0
    5d40:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5d42:	2302      	movs	r3, #2
    5d44:	60bb      	str	r3, [r7, #8]
    5d46:	e005      	b.n	5d54 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    5d48:	68fb      	ldr	r3, [r7, #12]
    5d4a:	3301      	adds	r3, #1
    5d4c:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    5d4e:	68bb      	ldr	r3, [r7, #8]
    5d50:	005b      	lsls	r3, r3, #1
    5d52:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5d54:	683b      	ldr	r3, [r7, #0]
    5d56:	685a      	ldr	r2, [r3, #4]
    5d58:	68bb      	ldr	r3, [r7, #8]
    5d5a:	429a      	cmp	r2, r3
    5d5c:	d8f4      	bhi.n	5d48 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    5d5e:	68fb      	ldr	r3, [r7, #12]
    5d60:	021b      	lsls	r3, r3, #8
    5d62:	693a      	ldr	r2, [r7, #16]
    5d64:	4313      	orrs	r3, r2
    5d66:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    5d68:	697b      	ldr	r3, [r7, #20]
    5d6a:	2280      	movs	r2, #128	; 0x80
    5d6c:	0352      	lsls	r2, r2, #13
    5d6e:	4313      	orrs	r3, r2
    5d70:	617b      	str	r3, [r7, #20]
    5d72:	e00a      	b.n	5d8a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    5d74:	683b      	ldr	r3, [r7, #0]
    5d76:	685b      	ldr	r3, [r3, #4]
    5d78:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    5d7a:	693a      	ldr	r2, [r7, #16]
    5d7c:	4313      	orrs	r3, r2
    5d7e:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    5d80:	697b      	ldr	r3, [r7, #20]
    5d82:	2280      	movs	r2, #128	; 0x80
    5d84:	0292      	lsls	r2, r2, #10
    5d86:	4313      	orrs	r3, r2
    5d88:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    5d8a:	683b      	ldr	r3, [r7, #0]
    5d8c:	7a1b      	ldrb	r3, [r3, #8]
    5d8e:	2b00      	cmp	r3, #0
    5d90:	d004      	beq.n	5d9c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    5d92:	697b      	ldr	r3, [r7, #20]
    5d94:	2280      	movs	r2, #128	; 0x80
    5d96:	0392      	lsls	r2, r2, #14
    5d98:	4313      	orrs	r3, r2
    5d9a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    5d9c:	46c0      	nop			; (mov r8, r8)
    5d9e:	4b13      	ldr	r3, [pc, #76]	; (5dec <system_gclk_gen_set_config+0x110>)
    5da0:	4798      	blx	r3
    5da2:	1e03      	subs	r3, r0, #0
    5da4:	d1fb      	bne.n	5d9e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5da6:	4b12      	ldr	r3, [pc, #72]	; (5df0 <system_gclk_gen_set_config+0x114>)
    5da8:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5daa:	4a12      	ldr	r2, [pc, #72]	; (5df4 <system_gclk_gen_set_config+0x118>)
    5dac:	1dfb      	adds	r3, r7, #7
    5dae:	781b      	ldrb	r3, [r3, #0]
    5db0:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    5db2:	46c0      	nop			; (mov r8, r8)
    5db4:	4b0d      	ldr	r3, [pc, #52]	; (5dec <system_gclk_gen_set_config+0x110>)
    5db6:	4798      	blx	r3
    5db8:	1e03      	subs	r3, r0, #0
    5dba:	d1fb      	bne.n	5db4 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    5dbc:	4b0e      	ldr	r3, [pc, #56]	; (5df8 <system_gclk_gen_set_config+0x11c>)
    5dbe:	693a      	ldr	r2, [r7, #16]
    5dc0:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    5dc2:	46c0      	nop			; (mov r8, r8)
    5dc4:	4b09      	ldr	r3, [pc, #36]	; (5dec <system_gclk_gen_set_config+0x110>)
    5dc6:	4798      	blx	r3
    5dc8:	1e03      	subs	r3, r0, #0
    5dca:	d1fb      	bne.n	5dc4 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    5dcc:	4b0a      	ldr	r3, [pc, #40]	; (5df8 <system_gclk_gen_set_config+0x11c>)
    5dce:	4a0a      	ldr	r2, [pc, #40]	; (5df8 <system_gclk_gen_set_config+0x11c>)
    5dd0:	6851      	ldr	r1, [r2, #4]
    5dd2:	2280      	movs	r2, #128	; 0x80
    5dd4:	0252      	lsls	r2, r2, #9
    5dd6:	4011      	ands	r1, r2
    5dd8:	697a      	ldr	r2, [r7, #20]
    5dda:	430a      	orrs	r2, r1
    5ddc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    5dde:	4b07      	ldr	r3, [pc, #28]	; (5dfc <system_gclk_gen_set_config+0x120>)
    5de0:	4798      	blx	r3
}
    5de2:	46c0      	nop			; (mov r8, r8)
    5de4:	46bd      	mov	sp, r7
    5de6:	b006      	add	sp, #24
    5de8:	bd80      	pop	{r7, pc}
    5dea:	46c0      	nop			; (mov r8, r8)
    5dec:	00005c09 	.word	0x00005c09
    5df0:	00005c85 	.word	0x00005c85
    5df4:	40000c08 	.word	0x40000c08
    5df8:	40000c00 	.word	0x40000c00
    5dfc:	00005c99 	.word	0x00005c99

00005e00 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    5e00:	b580      	push	{r7, lr}
    5e02:	b082      	sub	sp, #8
    5e04:	af00      	add	r7, sp, #0
    5e06:	0002      	movs	r2, r0
    5e08:	1dfb      	adds	r3, r7, #7
    5e0a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    5e0c:	46c0      	nop			; (mov r8, r8)
    5e0e:	4b0e      	ldr	r3, [pc, #56]	; (5e48 <system_gclk_gen_enable+0x48>)
    5e10:	4798      	blx	r3
    5e12:	1e03      	subs	r3, r0, #0
    5e14:	d1fb      	bne.n	5e0e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5e16:	4b0d      	ldr	r3, [pc, #52]	; (5e4c <system_gclk_gen_enable+0x4c>)
    5e18:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5e1a:	4a0d      	ldr	r2, [pc, #52]	; (5e50 <system_gclk_gen_enable+0x50>)
    5e1c:	1dfb      	adds	r3, r7, #7
    5e1e:	781b      	ldrb	r3, [r3, #0]
    5e20:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    5e22:	46c0      	nop			; (mov r8, r8)
    5e24:	4b08      	ldr	r3, [pc, #32]	; (5e48 <system_gclk_gen_enable+0x48>)
    5e26:	4798      	blx	r3
    5e28:	1e03      	subs	r3, r0, #0
    5e2a:	d1fb      	bne.n	5e24 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    5e2c:	4b09      	ldr	r3, [pc, #36]	; (5e54 <system_gclk_gen_enable+0x54>)
    5e2e:	4a09      	ldr	r2, [pc, #36]	; (5e54 <system_gclk_gen_enable+0x54>)
    5e30:	6852      	ldr	r2, [r2, #4]
    5e32:	2180      	movs	r1, #128	; 0x80
    5e34:	0249      	lsls	r1, r1, #9
    5e36:	430a      	orrs	r2, r1
    5e38:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    5e3a:	4b07      	ldr	r3, [pc, #28]	; (5e58 <system_gclk_gen_enable+0x58>)
    5e3c:	4798      	blx	r3
}
    5e3e:	46c0      	nop			; (mov r8, r8)
    5e40:	46bd      	mov	sp, r7
    5e42:	b002      	add	sp, #8
    5e44:	bd80      	pop	{r7, pc}
    5e46:	46c0      	nop			; (mov r8, r8)
    5e48:	00005c09 	.word	0x00005c09
    5e4c:	00005c85 	.word	0x00005c85
    5e50:	40000c04 	.word	0x40000c04
    5e54:	40000c00 	.word	0x40000c00
    5e58:	00005c99 	.word	0x00005c99

00005e5c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    5e5c:	b580      	push	{r7, lr}
    5e5e:	b086      	sub	sp, #24
    5e60:	af00      	add	r7, sp, #0
    5e62:	0002      	movs	r2, r0
    5e64:	1dfb      	adds	r3, r7, #7
    5e66:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    5e68:	46c0      	nop			; (mov r8, r8)
    5e6a:	4b2a      	ldr	r3, [pc, #168]	; (5f14 <system_gclk_gen_get_hz+0xb8>)
    5e6c:	4798      	blx	r3
    5e6e:	1e03      	subs	r3, r0, #0
    5e70:	d1fb      	bne.n	5e6a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5e72:	4b29      	ldr	r3, [pc, #164]	; (5f18 <system_gclk_gen_get_hz+0xbc>)
    5e74:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5e76:	4a29      	ldr	r2, [pc, #164]	; (5f1c <system_gclk_gen_get_hz+0xc0>)
    5e78:	1dfb      	adds	r3, r7, #7
    5e7a:	781b      	ldrb	r3, [r3, #0]
    5e7c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    5e7e:	46c0      	nop			; (mov r8, r8)
    5e80:	4b24      	ldr	r3, [pc, #144]	; (5f14 <system_gclk_gen_get_hz+0xb8>)
    5e82:	4798      	blx	r3
    5e84:	1e03      	subs	r3, r0, #0
    5e86:	d1fb      	bne.n	5e80 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    5e88:	4b25      	ldr	r3, [pc, #148]	; (5f20 <system_gclk_gen_get_hz+0xc4>)
    5e8a:	685b      	ldr	r3, [r3, #4]
    5e8c:	04db      	lsls	r3, r3, #19
    5e8e:	0edb      	lsrs	r3, r3, #27
    5e90:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    5e92:	0018      	movs	r0, r3
    5e94:	4b23      	ldr	r3, [pc, #140]	; (5f24 <system_gclk_gen_get_hz+0xc8>)
    5e96:	4798      	blx	r3
    5e98:	0003      	movs	r3, r0
    5e9a:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5e9c:	4a1f      	ldr	r2, [pc, #124]	; (5f1c <system_gclk_gen_get_hz+0xc0>)
    5e9e:	1dfb      	adds	r3, r7, #7
    5ea0:	781b      	ldrb	r3, [r3, #0]
    5ea2:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    5ea4:	4b1e      	ldr	r3, [pc, #120]	; (5f20 <system_gclk_gen_get_hz+0xc4>)
    5ea6:	685b      	ldr	r3, [r3, #4]
    5ea8:	02db      	lsls	r3, r3, #11
    5eaa:	0fdb      	lsrs	r3, r3, #31
    5eac:	b2da      	uxtb	r2, r3
    5eae:	2313      	movs	r3, #19
    5eb0:	18fb      	adds	r3, r7, r3
    5eb2:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5eb4:	4a1c      	ldr	r2, [pc, #112]	; (5f28 <system_gclk_gen_get_hz+0xcc>)
    5eb6:	1dfb      	adds	r3, r7, #7
    5eb8:	781b      	ldrb	r3, [r3, #0]
    5eba:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    5ebc:	46c0      	nop			; (mov r8, r8)
    5ebe:	4b15      	ldr	r3, [pc, #84]	; (5f14 <system_gclk_gen_get_hz+0xb8>)
    5ec0:	4798      	blx	r3
    5ec2:	1e03      	subs	r3, r0, #0
    5ec4:	d1fb      	bne.n	5ebe <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    5ec6:	4b16      	ldr	r3, [pc, #88]	; (5f20 <system_gclk_gen_get_hz+0xc4>)
    5ec8:	689b      	ldr	r3, [r3, #8]
    5eca:	021b      	lsls	r3, r3, #8
    5ecc:	0c1b      	lsrs	r3, r3, #16
    5ece:	b29b      	uxth	r3, r3
    5ed0:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    5ed2:	4b16      	ldr	r3, [pc, #88]	; (5f2c <system_gclk_gen_get_hz+0xd0>)
    5ed4:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    5ed6:	2313      	movs	r3, #19
    5ed8:	18fb      	adds	r3, r7, r3
    5eda:	781b      	ldrb	r3, [r3, #0]
    5edc:	2b00      	cmp	r3, #0
    5ede:	d109      	bne.n	5ef4 <system_gclk_gen_get_hz+0x98>
    5ee0:	68fb      	ldr	r3, [r7, #12]
    5ee2:	2b01      	cmp	r3, #1
    5ee4:	d906      	bls.n	5ef4 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    5ee6:	4b12      	ldr	r3, [pc, #72]	; (5f30 <system_gclk_gen_get_hz+0xd4>)
    5ee8:	68f9      	ldr	r1, [r7, #12]
    5eea:	6978      	ldr	r0, [r7, #20]
    5eec:	4798      	blx	r3
    5eee:	0003      	movs	r3, r0
    5ef0:	617b      	str	r3, [r7, #20]
    5ef2:	e00a      	b.n	5f0a <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    5ef4:	2313      	movs	r3, #19
    5ef6:	18fb      	adds	r3, r7, r3
    5ef8:	781b      	ldrb	r3, [r3, #0]
    5efa:	2b00      	cmp	r3, #0
    5efc:	d005      	beq.n	5f0a <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    5efe:	68fb      	ldr	r3, [r7, #12]
    5f00:	3301      	adds	r3, #1
    5f02:	697a      	ldr	r2, [r7, #20]
    5f04:	40da      	lsrs	r2, r3
    5f06:	0013      	movs	r3, r2
    5f08:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    5f0a:	697b      	ldr	r3, [r7, #20]
}
    5f0c:	0018      	movs	r0, r3
    5f0e:	46bd      	mov	sp, r7
    5f10:	b006      	add	sp, #24
    5f12:	bd80      	pop	{r7, pc}
    5f14:	00005c09 	.word	0x00005c09
    5f18:	00005c85 	.word	0x00005c85
    5f1c:	40000c04 	.word	0x40000c04
    5f20:	40000c00 	.word	0x40000c00
    5f24:	000055f9 	.word	0x000055f9
    5f28:	40000c08 	.word	0x40000c08
    5f2c:	00005c99 	.word	0x00005c99
    5f30:	000063c5 	.word	0x000063c5

00005f34 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    5f34:	b580      	push	{r7, lr}
    5f36:	b084      	sub	sp, #16
    5f38:	af00      	add	r7, sp, #0
    5f3a:	0002      	movs	r2, r0
    5f3c:	6039      	str	r1, [r7, #0]
    5f3e:	1dfb      	adds	r3, r7, #7
    5f40:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    5f42:	1dfb      	adds	r3, r7, #7
    5f44:	781b      	ldrb	r3, [r3, #0]
    5f46:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    5f48:	683b      	ldr	r3, [r7, #0]
    5f4a:	781b      	ldrb	r3, [r3, #0]
    5f4c:	021b      	lsls	r3, r3, #8
    5f4e:	001a      	movs	r2, r3
    5f50:	68fb      	ldr	r3, [r7, #12]
    5f52:	4313      	orrs	r3, r2
    5f54:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    5f56:	1dfb      	adds	r3, r7, #7
    5f58:	781b      	ldrb	r3, [r3, #0]
    5f5a:	0018      	movs	r0, r3
    5f5c:	4b04      	ldr	r3, [pc, #16]	; (5f70 <system_gclk_chan_set_config+0x3c>)
    5f5e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    5f60:	4b04      	ldr	r3, [pc, #16]	; (5f74 <system_gclk_chan_set_config+0x40>)
    5f62:	68fa      	ldr	r2, [r7, #12]
    5f64:	b292      	uxth	r2, r2
    5f66:	805a      	strh	r2, [r3, #2]
}
    5f68:	46c0      	nop			; (mov r8, r8)
    5f6a:	46bd      	mov	sp, r7
    5f6c:	b004      	add	sp, #16
    5f6e:	bd80      	pop	{r7, pc}
    5f70:	00005fc1 	.word	0x00005fc1
    5f74:	40000c00 	.word	0x40000c00

00005f78 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5f78:	b580      	push	{r7, lr}
    5f7a:	b082      	sub	sp, #8
    5f7c:	af00      	add	r7, sp, #0
    5f7e:	0002      	movs	r2, r0
    5f80:	1dfb      	adds	r3, r7, #7
    5f82:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    5f84:	4b0a      	ldr	r3, [pc, #40]	; (5fb0 <system_gclk_chan_enable+0x38>)
    5f86:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5f88:	4a0a      	ldr	r2, [pc, #40]	; (5fb4 <system_gclk_chan_enable+0x3c>)
    5f8a:	1dfb      	adds	r3, r7, #7
    5f8c:	781b      	ldrb	r3, [r3, #0]
    5f8e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    5f90:	4909      	ldr	r1, [pc, #36]	; (5fb8 <system_gclk_chan_enable+0x40>)
    5f92:	4b09      	ldr	r3, [pc, #36]	; (5fb8 <system_gclk_chan_enable+0x40>)
    5f94:	885b      	ldrh	r3, [r3, #2]
    5f96:	b29b      	uxth	r3, r3
    5f98:	2280      	movs	r2, #128	; 0x80
    5f9a:	01d2      	lsls	r2, r2, #7
    5f9c:	4313      	orrs	r3, r2
    5f9e:	b29b      	uxth	r3, r3
    5fa0:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    5fa2:	4b06      	ldr	r3, [pc, #24]	; (5fbc <system_gclk_chan_enable+0x44>)
    5fa4:	4798      	blx	r3
}
    5fa6:	46c0      	nop			; (mov r8, r8)
    5fa8:	46bd      	mov	sp, r7
    5faa:	b002      	add	sp, #8
    5fac:	bd80      	pop	{r7, pc}
    5fae:	46c0      	nop			; (mov r8, r8)
    5fb0:	00005c85 	.word	0x00005c85
    5fb4:	40000c02 	.word	0x40000c02
    5fb8:	40000c00 	.word	0x40000c00
    5fbc:	00005c99 	.word	0x00005c99

00005fc0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    5fc0:	b580      	push	{r7, lr}
    5fc2:	b084      	sub	sp, #16
    5fc4:	af00      	add	r7, sp, #0
    5fc6:	0002      	movs	r2, r0
    5fc8:	1dfb      	adds	r3, r7, #7
    5fca:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    5fcc:	4b1c      	ldr	r3, [pc, #112]	; (6040 <system_gclk_chan_disable+0x80>)
    5fce:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5fd0:	4a1c      	ldr	r2, [pc, #112]	; (6044 <system_gclk_chan_disable+0x84>)
    5fd2:	1dfb      	adds	r3, r7, #7
    5fd4:	781b      	ldrb	r3, [r3, #0]
    5fd6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    5fd8:	4b1b      	ldr	r3, [pc, #108]	; (6048 <system_gclk_chan_disable+0x88>)
    5fda:	885b      	ldrh	r3, [r3, #2]
    5fdc:	051b      	lsls	r3, r3, #20
    5fde:	0f1b      	lsrs	r3, r3, #28
    5fe0:	b2db      	uxtb	r3, r3
    5fe2:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    5fe4:	4a18      	ldr	r2, [pc, #96]	; (6048 <system_gclk_chan_disable+0x88>)
    5fe6:	8853      	ldrh	r3, [r2, #2]
    5fe8:	4918      	ldr	r1, [pc, #96]	; (604c <system_gclk_chan_disable+0x8c>)
    5fea:	400b      	ands	r3, r1
    5fec:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    5fee:	4a16      	ldr	r2, [pc, #88]	; (6048 <system_gclk_chan_disable+0x88>)
    5ff0:	4b15      	ldr	r3, [pc, #84]	; (6048 <system_gclk_chan_disable+0x88>)
    5ff2:	885b      	ldrh	r3, [r3, #2]
    5ff4:	b29b      	uxth	r3, r3
    5ff6:	4916      	ldr	r1, [pc, #88]	; (6050 <system_gclk_chan_disable+0x90>)
    5ff8:	400b      	ands	r3, r1
    5ffa:	b29b      	uxth	r3, r3
    5ffc:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    5ffe:	46c0      	nop			; (mov r8, r8)
    6000:	4b11      	ldr	r3, [pc, #68]	; (6048 <system_gclk_chan_disable+0x88>)
    6002:	885b      	ldrh	r3, [r3, #2]
    6004:	b29b      	uxth	r3, r3
    6006:	001a      	movs	r2, r3
    6008:	2380      	movs	r3, #128	; 0x80
    600a:	01db      	lsls	r3, r3, #7
    600c:	4013      	ands	r3, r2
    600e:	d1f7      	bne.n	6000 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    6010:	4a0d      	ldr	r2, [pc, #52]	; (6048 <system_gclk_chan_disable+0x88>)
    6012:	68fb      	ldr	r3, [r7, #12]
    6014:	b2db      	uxtb	r3, r3
    6016:	1c19      	adds	r1, r3, #0
    6018:	230f      	movs	r3, #15
    601a:	400b      	ands	r3, r1
    601c:	b2d9      	uxtb	r1, r3
    601e:	8853      	ldrh	r3, [r2, #2]
    6020:	1c08      	adds	r0, r1, #0
    6022:	210f      	movs	r1, #15
    6024:	4001      	ands	r1, r0
    6026:	0208      	lsls	r0, r1, #8
    6028:	4908      	ldr	r1, [pc, #32]	; (604c <system_gclk_chan_disable+0x8c>)
    602a:	400b      	ands	r3, r1
    602c:	1c19      	adds	r1, r3, #0
    602e:	1c03      	adds	r3, r0, #0
    6030:	430b      	orrs	r3, r1
    6032:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    6034:	4b07      	ldr	r3, [pc, #28]	; (6054 <system_gclk_chan_disable+0x94>)
    6036:	4798      	blx	r3
}
    6038:	46c0      	nop			; (mov r8, r8)
    603a:	46bd      	mov	sp, r7
    603c:	b004      	add	sp, #16
    603e:	bd80      	pop	{r7, pc}
    6040:	00005c85 	.word	0x00005c85
    6044:	40000c02 	.word	0x40000c02
    6048:	40000c00 	.word	0x40000c00
    604c:	fffff0ff 	.word	0xfffff0ff
    6050:	ffffbfff 	.word	0xffffbfff
    6054:	00005c99 	.word	0x00005c99

00006058 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6058:	b580      	push	{r7, lr}
    605a:	b084      	sub	sp, #16
    605c:	af00      	add	r7, sp, #0
    605e:	0002      	movs	r2, r0
    6060:	1dfb      	adds	r3, r7, #7
    6062:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    6064:	4b0d      	ldr	r3, [pc, #52]	; (609c <system_gclk_chan_get_hz+0x44>)
    6066:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6068:	4a0d      	ldr	r2, [pc, #52]	; (60a0 <system_gclk_chan_get_hz+0x48>)
    606a:	1dfb      	adds	r3, r7, #7
    606c:	781b      	ldrb	r3, [r3, #0]
    606e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6070:	4b0c      	ldr	r3, [pc, #48]	; (60a4 <system_gclk_chan_get_hz+0x4c>)
    6072:	885b      	ldrh	r3, [r3, #2]
    6074:	051b      	lsls	r3, r3, #20
    6076:	0f1b      	lsrs	r3, r3, #28
    6078:	b2da      	uxtb	r2, r3
    607a:	230f      	movs	r3, #15
    607c:	18fb      	adds	r3, r7, r3
    607e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    6080:	4b09      	ldr	r3, [pc, #36]	; (60a8 <system_gclk_chan_get_hz+0x50>)
    6082:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6084:	230f      	movs	r3, #15
    6086:	18fb      	adds	r3, r7, r3
    6088:	781b      	ldrb	r3, [r3, #0]
    608a:	0018      	movs	r0, r3
    608c:	4b07      	ldr	r3, [pc, #28]	; (60ac <system_gclk_chan_get_hz+0x54>)
    608e:	4798      	blx	r3
    6090:	0003      	movs	r3, r0
}
    6092:	0018      	movs	r0, r3
    6094:	46bd      	mov	sp, r7
    6096:	b004      	add	sp, #16
    6098:	bd80      	pop	{r7, pc}
    609a:	46c0      	nop			; (mov r8, r8)
    609c:	00005c85 	.word	0x00005c85
    60a0:	40000c02 	.word	0x40000c02
    60a4:	40000c00 	.word	0x40000c00
    60a8:	00005c99 	.word	0x00005c99
    60ac:	00005e5d 	.word	0x00005e5d

000060b0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    60b0:	b580      	push	{r7, lr}
    60b2:	b084      	sub	sp, #16
    60b4:	af00      	add	r7, sp, #0
    60b6:	0002      	movs	r2, r0
    60b8:	1dfb      	adds	r3, r7, #7
    60ba:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    60bc:	230f      	movs	r3, #15
    60be:	18fb      	adds	r3, r7, r3
    60c0:	1dfa      	adds	r2, r7, #7
    60c2:	7812      	ldrb	r2, [r2, #0]
    60c4:	09d2      	lsrs	r2, r2, #7
    60c6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    60c8:	230e      	movs	r3, #14
    60ca:	18fb      	adds	r3, r7, r3
    60cc:	1dfa      	adds	r2, r7, #7
    60ce:	7812      	ldrb	r2, [r2, #0]
    60d0:	0952      	lsrs	r2, r2, #5
    60d2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    60d4:	4b0d      	ldr	r3, [pc, #52]	; (610c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    60d6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    60d8:	230f      	movs	r3, #15
    60da:	18fb      	adds	r3, r7, r3
    60dc:	781b      	ldrb	r3, [r3, #0]
    60de:	2b00      	cmp	r3, #0
    60e0:	d10f      	bne.n	6102 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    60e2:	230f      	movs	r3, #15
    60e4:	18fb      	adds	r3, r7, r3
    60e6:	781b      	ldrb	r3, [r3, #0]
    60e8:	009b      	lsls	r3, r3, #2
    60ea:	2210      	movs	r2, #16
    60ec:	4694      	mov	ip, r2
    60ee:	44bc      	add	ip, r7
    60f0:	4463      	add	r3, ip
    60f2:	3b08      	subs	r3, #8
    60f4:	681a      	ldr	r2, [r3, #0]
    60f6:	230e      	movs	r3, #14
    60f8:	18fb      	adds	r3, r7, r3
    60fa:	781b      	ldrb	r3, [r3, #0]
    60fc:	01db      	lsls	r3, r3, #7
    60fe:	18d3      	adds	r3, r2, r3
    6100:	e000      	b.n	6104 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    6102:	2300      	movs	r3, #0
	}
}
    6104:	0018      	movs	r0, r3
    6106:	46bd      	mov	sp, r7
    6108:	b004      	add	sp, #16
    610a:	bd80      	pop	{r7, pc}
    610c:	41004400 	.word	0x41004400

00006110 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6110:	b580      	push	{r7, lr}
    6112:	b088      	sub	sp, #32
    6114:	af00      	add	r7, sp, #0
    6116:	60f8      	str	r0, [r7, #12]
    6118:	60b9      	str	r1, [r7, #8]
    611a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    611c:	2300      	movs	r3, #0
    611e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6120:	687b      	ldr	r3, [r7, #4]
    6122:	78db      	ldrb	r3, [r3, #3]
    6124:	2201      	movs	r2, #1
    6126:	4053      	eors	r3, r2
    6128:	b2db      	uxtb	r3, r3
    612a:	2b00      	cmp	r3, #0
    612c:	d034      	beq.n	6198 <_system_pinmux_config+0x88>
		/* Enable the pin peripheral mux flag if non-GPIO selected (pin mux will
		 * be written later) and store the new mux mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    612e:	687b      	ldr	r3, [r7, #4]
    6130:	781b      	ldrb	r3, [r3, #0]
    6132:	2b80      	cmp	r3, #128	; 0x80
    6134:	d00b      	beq.n	614e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    6136:	69fb      	ldr	r3, [r7, #28]
    6138:	2280      	movs	r2, #128	; 0x80
    613a:	0252      	lsls	r2, r2, #9
    613c:	4313      	orrs	r3, r2
    613e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6140:	687b      	ldr	r3, [r7, #4]
    6142:	781b      	ldrb	r3, [r3, #0]
    6144:	061b      	lsls	r3, r3, #24
    6146:	001a      	movs	r2, r3
    6148:	69fb      	ldr	r3, [r7, #28]
    614a:	4313      	orrs	r3, r2
    614c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    614e:	687b      	ldr	r3, [r7, #4]
    6150:	785b      	ldrb	r3, [r3, #1]
    6152:	2b00      	cmp	r3, #0
    6154:	d003      	beq.n	615e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6156:	687b      	ldr	r3, [r7, #4]
    6158:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    615a:	2b02      	cmp	r3, #2
    615c:	d110      	bne.n	6180 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    615e:	69fb      	ldr	r3, [r7, #28]
    6160:	2280      	movs	r2, #128	; 0x80
    6162:	0292      	lsls	r2, r2, #10
    6164:	4313      	orrs	r3, r2
    6166:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6168:	687b      	ldr	r3, [r7, #4]
    616a:	789b      	ldrb	r3, [r3, #2]
    616c:	2b00      	cmp	r3, #0
    616e:	d004      	beq.n	617a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6170:	69fb      	ldr	r3, [r7, #28]
    6172:	2280      	movs	r2, #128	; 0x80
    6174:	02d2      	lsls	r2, r2, #11
    6176:	4313      	orrs	r3, r2
    6178:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    617a:	68fb      	ldr	r3, [r7, #12]
    617c:	68ba      	ldr	r2, [r7, #8]
    617e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6180:	687b      	ldr	r3, [r7, #4]
    6182:	785b      	ldrb	r3, [r3, #1]
    6184:	2b01      	cmp	r3, #1
    6186:	d003      	beq.n	6190 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6188:	687b      	ldr	r3, [r7, #4]
    618a:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    618c:	2b02      	cmp	r3, #2
    618e:	d103      	bne.n	6198 <_system_pinmux_config+0x88>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6190:	69fb      	ldr	r3, [r7, #28]
    6192:	4a20      	ldr	r2, [pc, #128]	; (6214 <_system_pinmux_config+0x104>)
    6194:	4013      	ands	r3, r2
    6196:	61fb      	str	r3, [r7, #28]
		}
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6198:	68bb      	ldr	r3, [r7, #8]
    619a:	041b      	lsls	r3, r3, #16
    619c:	0c1b      	lsrs	r3, r3, #16
    619e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    61a0:	68bb      	ldr	r3, [r7, #8]
    61a2:	0c1b      	lsrs	r3, r3, #16
    61a4:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    61a6:	69ba      	ldr	r2, [r7, #24]
    61a8:	69fb      	ldr	r3, [r7, #28]
    61aa:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    61ac:	22a0      	movs	r2, #160	; 0xa0
    61ae:	05d2      	lsls	r2, r2, #23
    61b0:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    61b2:	68fb      	ldr	r3, [r7, #12]
    61b4:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    61b6:	697a      	ldr	r2, [r7, #20]
    61b8:	69fb      	ldr	r3, [r7, #28]
    61ba:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    61bc:	22d0      	movs	r2, #208	; 0xd0
    61be:	0612      	lsls	r2, r2, #24
    61c0:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    61c2:	68fb      	ldr	r3, [r7, #12]
    61c4:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    61c6:	687b      	ldr	r3, [r7, #4]
    61c8:	78db      	ldrb	r3, [r3, #3]
    61ca:	2201      	movs	r2, #1
    61cc:	4053      	eors	r3, r2
    61ce:	b2db      	uxtb	r3, r3
    61d0:	2b00      	cmp	r3, #0
    61d2:	d01a      	beq.n	620a <_system_pinmux_config+0xfa>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    61d4:	69fa      	ldr	r2, [r7, #28]
    61d6:	2380      	movs	r3, #128	; 0x80
    61d8:	02db      	lsls	r3, r3, #11
    61da:	4013      	ands	r3, r2
    61dc:	d00a      	beq.n	61f4 <_system_pinmux_config+0xe4>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    61de:	687b      	ldr	r3, [r7, #4]
    61e0:	789b      	ldrb	r3, [r3, #2]
    61e2:	2b01      	cmp	r3, #1
    61e4:	d103      	bne.n	61ee <_system_pinmux_config+0xde>
				port->OUTSET.reg = pin_mask;
    61e6:	68fb      	ldr	r3, [r7, #12]
    61e8:	68ba      	ldr	r2, [r7, #8]
    61ea:	619a      	str	r2, [r3, #24]
    61ec:	e002      	b.n	61f4 <_system_pinmux_config+0xe4>
			} else {
				port->OUTCLR.reg = pin_mask;
    61ee:	68fb      	ldr	r3, [r7, #12]
    61f0:	68ba      	ldr	r2, [r7, #8]
    61f2:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    61f4:	687b      	ldr	r3, [r7, #4]
    61f6:	785b      	ldrb	r3, [r3, #1]
    61f8:	2b01      	cmp	r3, #1
    61fa:	d003      	beq.n	6204 <_system_pinmux_config+0xf4>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    61fc:	687b      	ldr	r3, [r7, #4]
    61fe:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6200:	2b02      	cmp	r3, #2
    6202:	d102      	bne.n	620a <_system_pinmux_config+0xfa>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    6204:	68fb      	ldr	r3, [r7, #12]
    6206:	68ba      	ldr	r2, [r7, #8]
    6208:	609a      	str	r2, [r3, #8]
		}
	}
}
    620a:	46c0      	nop			; (mov r8, r8)
    620c:	46bd      	mov	sp, r7
    620e:	b008      	add	sp, #32
    6210:	bd80      	pop	{r7, pc}
    6212:	46c0      	nop			; (mov r8, r8)
    6214:	fffbffff 	.word	0xfffbffff

00006218 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6218:	b580      	push	{r7, lr}
    621a:	b084      	sub	sp, #16
    621c:	af00      	add	r7, sp, #0
    621e:	0002      	movs	r2, r0
    6220:	6039      	str	r1, [r7, #0]
    6222:	1dfb      	adds	r3, r7, #7
    6224:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6226:	1dfb      	adds	r3, r7, #7
    6228:	781b      	ldrb	r3, [r3, #0]
    622a:	0018      	movs	r0, r3
    622c:	4b0a      	ldr	r3, [pc, #40]	; (6258 <system_pinmux_pin_set_config+0x40>)
    622e:	4798      	blx	r3
    6230:	0003      	movs	r3, r0
    6232:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6234:	1dfb      	adds	r3, r7, #7
    6236:	781b      	ldrb	r3, [r3, #0]
    6238:	221f      	movs	r2, #31
    623a:	4013      	ands	r3, r2
    623c:	2201      	movs	r2, #1
    623e:	409a      	lsls	r2, r3
    6240:	0013      	movs	r3, r2
    6242:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    6244:	683a      	ldr	r2, [r7, #0]
    6246:	68b9      	ldr	r1, [r7, #8]
    6248:	68fb      	ldr	r3, [r7, #12]
    624a:	0018      	movs	r0, r3
    624c:	4b03      	ldr	r3, [pc, #12]	; (625c <system_pinmux_pin_set_config+0x44>)
    624e:	4798      	blx	r3
}
    6250:	46c0      	nop			; (mov r8, r8)
    6252:	46bd      	mov	sp, r7
    6254:	b004      	add	sp, #16
    6256:	bd80      	pop	{r7, pc}
    6258:	000060b1 	.word	0x000060b1
    625c:	00006111 	.word	0x00006111

00006260 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    6260:	b580      	push	{r7, lr}
    6262:	af00      	add	r7, sp, #0
	return;
    6264:	46c0      	nop			; (mov r8, r8)
}
    6266:	46bd      	mov	sp, r7
    6268:	bd80      	pop	{r7, pc}
    626a:	46c0      	nop			; (mov r8, r8)

0000626c <HardFault_Handler>:
/**
 * Handler for the CPU Hard Fault interrupt, fired if an illegal access was
 * attempted to a memory address.
 */
void HardFault_Handler(void)
{
    626c:	b580      	push	{r7, lr}
    626e:	af00      	add	r7, sp, #0
	while (1) {
		/* Infinite loop if CPU exception is detected */
		Assert(false);
	}
    6270:	e7fe      	b.n	6270 <HardFault_Handler+0x4>
    6272:	46c0      	nop			; (mov r8, r8)

00006274 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6274:	b580      	push	{r7, lr}
    6276:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6278:	4b05      	ldr	r3, [pc, #20]	; (6290 <system_init+0x1c>)
    627a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    627c:	4b05      	ldr	r3, [pc, #20]	; (6294 <system_init+0x20>)
    627e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6280:	4b05      	ldr	r3, [pc, #20]	; (6298 <system_init+0x24>)
    6282:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6284:	4b05      	ldr	r3, [pc, #20]	; (629c <system_init+0x28>)
    6286:	4798      	blx	r3
}
    6288:	46c0      	nop			; (mov r8, r8)
    628a:	46bd      	mov	sp, r7
    628c:	bd80      	pop	{r7, pc}
    628e:	46c0      	nop			; (mov r8, r8)
    6290:	000059d5 	.word	0x000059d5
    6294:	000052e1 	.word	0x000052e1
    6298:	00006261 	.word	0x00006261
    629c:	0000306d 	.word	0x0000306d

000062a0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    62a0:	b580      	push	{r7, lr}
    62a2:	b082      	sub	sp, #8
    62a4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    62a6:	4b16      	ldr	r3, [pc, #88]	; (6300 <Reset_Handler+0x60>)
    62a8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    62aa:	4b16      	ldr	r3, [pc, #88]	; (6304 <Reset_Handler+0x64>)
    62ac:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    62ae:	687a      	ldr	r2, [r7, #4]
    62b0:	683b      	ldr	r3, [r7, #0]
    62b2:	429a      	cmp	r2, r3
    62b4:	d00c      	beq.n	62d0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    62b6:	e007      	b.n	62c8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    62b8:	683b      	ldr	r3, [r7, #0]
    62ba:	1d1a      	adds	r2, r3, #4
    62bc:	603a      	str	r2, [r7, #0]
    62be:	687a      	ldr	r2, [r7, #4]
    62c0:	1d11      	adds	r1, r2, #4
    62c2:	6079      	str	r1, [r7, #4]
    62c4:	6812      	ldr	r2, [r2, #0]
    62c6:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    62c8:	683a      	ldr	r2, [r7, #0]
    62ca:	4b0f      	ldr	r3, [pc, #60]	; (6308 <Reset_Handler+0x68>)
    62cc:	429a      	cmp	r2, r3
    62ce:	d3f3      	bcc.n	62b8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    62d0:	4b0e      	ldr	r3, [pc, #56]	; (630c <Reset_Handler+0x6c>)
    62d2:	603b      	str	r3, [r7, #0]
    62d4:	e004      	b.n	62e0 <Reset_Handler+0x40>
                *pDest++ = 0;
    62d6:	683b      	ldr	r3, [r7, #0]
    62d8:	1d1a      	adds	r2, r3, #4
    62da:	603a      	str	r2, [r7, #0]
    62dc:	2200      	movs	r2, #0
    62de:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    62e0:	683a      	ldr	r2, [r7, #0]
    62e2:	4b0b      	ldr	r3, [pc, #44]	; (6310 <Reset_Handler+0x70>)
    62e4:	429a      	cmp	r2, r3
    62e6:	d3f6      	bcc.n	62d6 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    62e8:	4b0a      	ldr	r3, [pc, #40]	; (6314 <Reset_Handler+0x74>)
    62ea:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    62ec:	4b0a      	ldr	r3, [pc, #40]	; (6318 <Reset_Handler+0x78>)
    62ee:	687a      	ldr	r2, [r7, #4]
    62f0:	217f      	movs	r1, #127	; 0x7f
    62f2:	438a      	bics	r2, r1
    62f4:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    62f6:	4b09      	ldr	r3, [pc, #36]	; (631c <Reset_Handler+0x7c>)
    62f8:	4798      	blx	r3

        /* Branch to main function */
        main();
    62fa:	4b09      	ldr	r3, [pc, #36]	; (6320 <Reset_Handler+0x80>)
    62fc:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    62fe:	e7fe      	b.n	62fe <Reset_Handler+0x5e>
    6300:	0000e150 	.word	0x0000e150
    6304:	20000000 	.word	0x20000000
    6308:	200008ac 	.word	0x200008ac
    630c:	200008ac 	.word	0x200008ac
    6310:	20000e60 	.word	0x20000e60
    6314:	00000000 	.word	0x00000000
    6318:	e000ed00 	.word	0xe000ed00
    631c:	00006cc1 	.word	0x00006cc1
    6320:	00000ead 	.word	0x00000ead

00006324 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6324:	b580      	push	{r7, lr}
    6326:	af00      	add	r7, sp, #0
        while (1) {
        }
    6328:	e7fe      	b.n	6328 <Dummy_Handler+0x4>
    632a:	46c0      	nop			; (mov r8, r8)

0000632c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    632c:	b580      	push	{r7, lr}
    632e:	b084      	sub	sp, #16
    6330:	af00      	add	r7, sp, #0
    6332:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6334:	4b0a      	ldr	r3, [pc, #40]	; (6360 <_sbrk+0x34>)
    6336:	681b      	ldr	r3, [r3, #0]
    6338:	2b00      	cmp	r3, #0
    633a:	d102      	bne.n	6342 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    633c:	4b08      	ldr	r3, [pc, #32]	; (6360 <_sbrk+0x34>)
    633e:	4a09      	ldr	r2, [pc, #36]	; (6364 <_sbrk+0x38>)
    6340:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    6342:	4b07      	ldr	r3, [pc, #28]	; (6360 <_sbrk+0x34>)
    6344:	681b      	ldr	r3, [r3, #0]
    6346:	60fb      	str	r3, [r7, #12]

	heap += incr;
    6348:	4b05      	ldr	r3, [pc, #20]	; (6360 <_sbrk+0x34>)
    634a:	681a      	ldr	r2, [r3, #0]
    634c:	687b      	ldr	r3, [r7, #4]
    634e:	18d2      	adds	r2, r2, r3
    6350:	4b03      	ldr	r3, [pc, #12]	; (6360 <_sbrk+0x34>)
    6352:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    6354:	68fb      	ldr	r3, [r7, #12]
}
    6356:	0018      	movs	r0, r3
    6358:	46bd      	mov	sp, r7
    635a:	b004      	add	sp, #16
    635c:	bd80      	pop	{r7, pc}
    635e:	46c0      	nop			; (mov r8, r8)
    6360:	20000d90 	.word	0x20000d90
    6364:	20002e60 	.word	0x20002e60

00006368 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    6368:	b580      	push	{r7, lr}
    636a:	b082      	sub	sp, #8
    636c:	af00      	add	r7, sp, #0
    636e:	6078      	str	r0, [r7, #4]
	return -1;
    6370:	2301      	movs	r3, #1
    6372:	425b      	negs	r3, r3
}
    6374:	0018      	movs	r0, r3
    6376:	46bd      	mov	sp, r7
    6378:	b002      	add	sp, #8
    637a:	bd80      	pop	{r7, pc}

0000637c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    637c:	b580      	push	{r7, lr}
    637e:	b082      	sub	sp, #8
    6380:	af00      	add	r7, sp, #0
    6382:	6078      	str	r0, [r7, #4]
    6384:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    6386:	683b      	ldr	r3, [r7, #0]
    6388:	2280      	movs	r2, #128	; 0x80
    638a:	0192      	lsls	r2, r2, #6
    638c:	605a      	str	r2, [r3, #4]

	return 0;
    638e:	2300      	movs	r3, #0
}
    6390:	0018      	movs	r0, r3
    6392:	46bd      	mov	sp, r7
    6394:	b002      	add	sp, #8
    6396:	bd80      	pop	{r7, pc}

00006398 <_isatty>:

extern int _isatty(int file)
{
    6398:	b580      	push	{r7, lr}
    639a:	b082      	sub	sp, #8
    639c:	af00      	add	r7, sp, #0
    639e:	6078      	str	r0, [r7, #4]
	return 1;
    63a0:	2301      	movs	r3, #1
}
    63a2:	0018      	movs	r0, r3
    63a4:	46bd      	mov	sp, r7
    63a6:	b002      	add	sp, #8
    63a8:	bd80      	pop	{r7, pc}
    63aa:	46c0      	nop			; (mov r8, r8)

000063ac <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    63ac:	b580      	push	{r7, lr}
    63ae:	b084      	sub	sp, #16
    63b0:	af00      	add	r7, sp, #0
    63b2:	60f8      	str	r0, [r7, #12]
    63b4:	60b9      	str	r1, [r7, #8]
    63b6:	607a      	str	r2, [r7, #4]
	return 0;
    63b8:	2300      	movs	r3, #0
}
    63ba:	0018      	movs	r0, r3
    63bc:	46bd      	mov	sp, r7
    63be:	b004      	add	sp, #16
    63c0:	bd80      	pop	{r7, pc}
    63c2:	46c0      	nop			; (mov r8, r8)

000063c4 <__aeabi_uidiv>:
    63c4:	2200      	movs	r2, #0
    63c6:	0843      	lsrs	r3, r0, #1
    63c8:	428b      	cmp	r3, r1
    63ca:	d374      	bcc.n	64b6 <__aeabi_uidiv+0xf2>
    63cc:	0903      	lsrs	r3, r0, #4
    63ce:	428b      	cmp	r3, r1
    63d0:	d35f      	bcc.n	6492 <__aeabi_uidiv+0xce>
    63d2:	0a03      	lsrs	r3, r0, #8
    63d4:	428b      	cmp	r3, r1
    63d6:	d344      	bcc.n	6462 <__aeabi_uidiv+0x9e>
    63d8:	0b03      	lsrs	r3, r0, #12
    63da:	428b      	cmp	r3, r1
    63dc:	d328      	bcc.n	6430 <__aeabi_uidiv+0x6c>
    63de:	0c03      	lsrs	r3, r0, #16
    63e0:	428b      	cmp	r3, r1
    63e2:	d30d      	bcc.n	6400 <__aeabi_uidiv+0x3c>
    63e4:	22ff      	movs	r2, #255	; 0xff
    63e6:	0209      	lsls	r1, r1, #8
    63e8:	ba12      	rev	r2, r2
    63ea:	0c03      	lsrs	r3, r0, #16
    63ec:	428b      	cmp	r3, r1
    63ee:	d302      	bcc.n	63f6 <__aeabi_uidiv+0x32>
    63f0:	1212      	asrs	r2, r2, #8
    63f2:	0209      	lsls	r1, r1, #8
    63f4:	d065      	beq.n	64c2 <__aeabi_uidiv+0xfe>
    63f6:	0b03      	lsrs	r3, r0, #12
    63f8:	428b      	cmp	r3, r1
    63fa:	d319      	bcc.n	6430 <__aeabi_uidiv+0x6c>
    63fc:	e000      	b.n	6400 <__aeabi_uidiv+0x3c>
    63fe:	0a09      	lsrs	r1, r1, #8
    6400:	0bc3      	lsrs	r3, r0, #15
    6402:	428b      	cmp	r3, r1
    6404:	d301      	bcc.n	640a <__aeabi_uidiv+0x46>
    6406:	03cb      	lsls	r3, r1, #15
    6408:	1ac0      	subs	r0, r0, r3
    640a:	4152      	adcs	r2, r2
    640c:	0b83      	lsrs	r3, r0, #14
    640e:	428b      	cmp	r3, r1
    6410:	d301      	bcc.n	6416 <__aeabi_uidiv+0x52>
    6412:	038b      	lsls	r3, r1, #14
    6414:	1ac0      	subs	r0, r0, r3
    6416:	4152      	adcs	r2, r2
    6418:	0b43      	lsrs	r3, r0, #13
    641a:	428b      	cmp	r3, r1
    641c:	d301      	bcc.n	6422 <__aeabi_uidiv+0x5e>
    641e:	034b      	lsls	r3, r1, #13
    6420:	1ac0      	subs	r0, r0, r3
    6422:	4152      	adcs	r2, r2
    6424:	0b03      	lsrs	r3, r0, #12
    6426:	428b      	cmp	r3, r1
    6428:	d301      	bcc.n	642e <__aeabi_uidiv+0x6a>
    642a:	030b      	lsls	r3, r1, #12
    642c:	1ac0      	subs	r0, r0, r3
    642e:	4152      	adcs	r2, r2
    6430:	0ac3      	lsrs	r3, r0, #11
    6432:	428b      	cmp	r3, r1
    6434:	d301      	bcc.n	643a <__aeabi_uidiv+0x76>
    6436:	02cb      	lsls	r3, r1, #11
    6438:	1ac0      	subs	r0, r0, r3
    643a:	4152      	adcs	r2, r2
    643c:	0a83      	lsrs	r3, r0, #10
    643e:	428b      	cmp	r3, r1
    6440:	d301      	bcc.n	6446 <__aeabi_uidiv+0x82>
    6442:	028b      	lsls	r3, r1, #10
    6444:	1ac0      	subs	r0, r0, r3
    6446:	4152      	adcs	r2, r2
    6448:	0a43      	lsrs	r3, r0, #9
    644a:	428b      	cmp	r3, r1
    644c:	d301      	bcc.n	6452 <__aeabi_uidiv+0x8e>
    644e:	024b      	lsls	r3, r1, #9
    6450:	1ac0      	subs	r0, r0, r3
    6452:	4152      	adcs	r2, r2
    6454:	0a03      	lsrs	r3, r0, #8
    6456:	428b      	cmp	r3, r1
    6458:	d301      	bcc.n	645e <__aeabi_uidiv+0x9a>
    645a:	020b      	lsls	r3, r1, #8
    645c:	1ac0      	subs	r0, r0, r3
    645e:	4152      	adcs	r2, r2
    6460:	d2cd      	bcs.n	63fe <__aeabi_uidiv+0x3a>
    6462:	09c3      	lsrs	r3, r0, #7
    6464:	428b      	cmp	r3, r1
    6466:	d301      	bcc.n	646c <__aeabi_uidiv+0xa8>
    6468:	01cb      	lsls	r3, r1, #7
    646a:	1ac0      	subs	r0, r0, r3
    646c:	4152      	adcs	r2, r2
    646e:	0983      	lsrs	r3, r0, #6
    6470:	428b      	cmp	r3, r1
    6472:	d301      	bcc.n	6478 <__aeabi_uidiv+0xb4>
    6474:	018b      	lsls	r3, r1, #6
    6476:	1ac0      	subs	r0, r0, r3
    6478:	4152      	adcs	r2, r2
    647a:	0943      	lsrs	r3, r0, #5
    647c:	428b      	cmp	r3, r1
    647e:	d301      	bcc.n	6484 <__aeabi_uidiv+0xc0>
    6480:	014b      	lsls	r3, r1, #5
    6482:	1ac0      	subs	r0, r0, r3
    6484:	4152      	adcs	r2, r2
    6486:	0903      	lsrs	r3, r0, #4
    6488:	428b      	cmp	r3, r1
    648a:	d301      	bcc.n	6490 <__aeabi_uidiv+0xcc>
    648c:	010b      	lsls	r3, r1, #4
    648e:	1ac0      	subs	r0, r0, r3
    6490:	4152      	adcs	r2, r2
    6492:	08c3      	lsrs	r3, r0, #3
    6494:	428b      	cmp	r3, r1
    6496:	d301      	bcc.n	649c <__aeabi_uidiv+0xd8>
    6498:	00cb      	lsls	r3, r1, #3
    649a:	1ac0      	subs	r0, r0, r3
    649c:	4152      	adcs	r2, r2
    649e:	0883      	lsrs	r3, r0, #2
    64a0:	428b      	cmp	r3, r1
    64a2:	d301      	bcc.n	64a8 <__aeabi_uidiv+0xe4>
    64a4:	008b      	lsls	r3, r1, #2
    64a6:	1ac0      	subs	r0, r0, r3
    64a8:	4152      	adcs	r2, r2
    64aa:	0843      	lsrs	r3, r0, #1
    64ac:	428b      	cmp	r3, r1
    64ae:	d301      	bcc.n	64b4 <__aeabi_uidiv+0xf0>
    64b0:	004b      	lsls	r3, r1, #1
    64b2:	1ac0      	subs	r0, r0, r3
    64b4:	4152      	adcs	r2, r2
    64b6:	1a41      	subs	r1, r0, r1
    64b8:	d200      	bcs.n	64bc <__aeabi_uidiv+0xf8>
    64ba:	4601      	mov	r1, r0
    64bc:	4152      	adcs	r2, r2
    64be:	4610      	mov	r0, r2
    64c0:	4770      	bx	lr
    64c2:	e7ff      	b.n	64c4 <__aeabi_uidiv+0x100>
    64c4:	b501      	push	{r0, lr}
    64c6:	2000      	movs	r0, #0
    64c8:	f000 f806 	bl	64d8 <__aeabi_idiv0>
    64cc:	bd02      	pop	{r1, pc}
    64ce:	46c0      	nop			; (mov r8, r8)

000064d0 <__aeabi_uidivmod>:
    64d0:	2900      	cmp	r1, #0
    64d2:	d0f7      	beq.n	64c4 <__aeabi_uidiv+0x100>
    64d4:	e776      	b.n	63c4 <__aeabi_uidiv>
    64d6:	4770      	bx	lr

000064d8 <__aeabi_idiv0>:
    64d8:	4770      	bx	lr
    64da:	46c0      	nop			; (mov r8, r8)

000064dc <__aeabi_uldivmod>:
    64dc:	2b00      	cmp	r3, #0
    64de:	d111      	bne.n	6504 <__aeabi_uldivmod+0x28>
    64e0:	2a00      	cmp	r2, #0
    64e2:	d10f      	bne.n	6504 <__aeabi_uldivmod+0x28>
    64e4:	2900      	cmp	r1, #0
    64e6:	d100      	bne.n	64ea <__aeabi_uldivmod+0xe>
    64e8:	2800      	cmp	r0, #0
    64ea:	d002      	beq.n	64f2 <__aeabi_uldivmod+0x16>
    64ec:	2100      	movs	r1, #0
    64ee:	43c9      	mvns	r1, r1
    64f0:	1c08      	adds	r0, r1, #0
    64f2:	b407      	push	{r0, r1, r2}
    64f4:	4802      	ldr	r0, [pc, #8]	; (6500 <__aeabi_uldivmod+0x24>)
    64f6:	a102      	add	r1, pc, #8	; (adr r1, 6500 <__aeabi_uldivmod+0x24>)
    64f8:	1840      	adds	r0, r0, r1
    64fa:	9002      	str	r0, [sp, #8]
    64fc:	bd03      	pop	{r0, r1, pc}
    64fe:	46c0      	nop			; (mov r8, r8)
    6500:	ffffffd9 	.word	0xffffffd9
    6504:	b403      	push	{r0, r1}
    6506:	4668      	mov	r0, sp
    6508:	b501      	push	{r0, lr}
    650a:	9802      	ldr	r0, [sp, #8]
    650c:	f000 f832 	bl	6574 <__udivmoddi4>
    6510:	9b01      	ldr	r3, [sp, #4]
    6512:	469e      	mov	lr, r3
    6514:	b002      	add	sp, #8
    6516:	bc0c      	pop	{r2, r3}
    6518:	4770      	bx	lr
    651a:	46c0      	nop			; (mov r8, r8)

0000651c <__aeabi_lmul>:
    651c:	b5f0      	push	{r4, r5, r6, r7, lr}
    651e:	464f      	mov	r7, r9
    6520:	4646      	mov	r6, r8
    6522:	b4c0      	push	{r6, r7}
    6524:	0416      	lsls	r6, r2, #16
    6526:	0c36      	lsrs	r6, r6, #16
    6528:	4699      	mov	r9, r3
    652a:	0033      	movs	r3, r6
    652c:	0405      	lsls	r5, r0, #16
    652e:	0c2c      	lsrs	r4, r5, #16
    6530:	0c07      	lsrs	r7, r0, #16
    6532:	0c15      	lsrs	r5, r2, #16
    6534:	4363      	muls	r3, r4
    6536:	437e      	muls	r6, r7
    6538:	436f      	muls	r7, r5
    653a:	4365      	muls	r5, r4
    653c:	0c1c      	lsrs	r4, r3, #16
    653e:	19ad      	adds	r5, r5, r6
    6540:	1964      	adds	r4, r4, r5
    6542:	469c      	mov	ip, r3
    6544:	42a6      	cmp	r6, r4
    6546:	d903      	bls.n	6550 <__aeabi_lmul+0x34>
    6548:	2380      	movs	r3, #128	; 0x80
    654a:	025b      	lsls	r3, r3, #9
    654c:	4698      	mov	r8, r3
    654e:	4447      	add	r7, r8
    6550:	4663      	mov	r3, ip
    6552:	0c25      	lsrs	r5, r4, #16
    6554:	19ef      	adds	r7, r5, r7
    6556:	041d      	lsls	r5, r3, #16
    6558:	464b      	mov	r3, r9
    655a:	434a      	muls	r2, r1
    655c:	4343      	muls	r3, r0
    655e:	0c2d      	lsrs	r5, r5, #16
    6560:	0424      	lsls	r4, r4, #16
    6562:	1964      	adds	r4, r4, r5
    6564:	1899      	adds	r1, r3, r2
    6566:	19c9      	adds	r1, r1, r7
    6568:	0020      	movs	r0, r4
    656a:	bc0c      	pop	{r2, r3}
    656c:	4690      	mov	r8, r2
    656e:	4699      	mov	r9, r3
    6570:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6572:	46c0      	nop			; (mov r8, r8)

00006574 <__udivmoddi4>:
    6574:	b5f0      	push	{r4, r5, r6, r7, lr}
    6576:	464d      	mov	r5, r9
    6578:	4656      	mov	r6, sl
    657a:	4644      	mov	r4, r8
    657c:	465f      	mov	r7, fp
    657e:	b4f0      	push	{r4, r5, r6, r7}
    6580:	4692      	mov	sl, r2
    6582:	b083      	sub	sp, #12
    6584:	0004      	movs	r4, r0
    6586:	000d      	movs	r5, r1
    6588:	4699      	mov	r9, r3
    658a:	428b      	cmp	r3, r1
    658c:	d82f      	bhi.n	65ee <__udivmoddi4+0x7a>
    658e:	d02c      	beq.n	65ea <__udivmoddi4+0x76>
    6590:	4649      	mov	r1, r9
    6592:	4650      	mov	r0, sl
    6594:	f000 fb88 	bl	6ca8 <__clzdi2>
    6598:	0029      	movs	r1, r5
    659a:	0006      	movs	r6, r0
    659c:	0020      	movs	r0, r4
    659e:	f000 fb83 	bl	6ca8 <__clzdi2>
    65a2:	1a33      	subs	r3, r6, r0
    65a4:	4698      	mov	r8, r3
    65a6:	3b20      	subs	r3, #32
    65a8:	469b      	mov	fp, r3
    65aa:	d500      	bpl.n	65ae <__udivmoddi4+0x3a>
    65ac:	e074      	b.n	6698 <__udivmoddi4+0x124>
    65ae:	4653      	mov	r3, sl
    65b0:	465a      	mov	r2, fp
    65b2:	4093      	lsls	r3, r2
    65b4:	001f      	movs	r7, r3
    65b6:	4653      	mov	r3, sl
    65b8:	4642      	mov	r2, r8
    65ba:	4093      	lsls	r3, r2
    65bc:	001e      	movs	r6, r3
    65be:	42af      	cmp	r7, r5
    65c0:	d829      	bhi.n	6616 <__udivmoddi4+0xa2>
    65c2:	d026      	beq.n	6612 <__udivmoddi4+0x9e>
    65c4:	465b      	mov	r3, fp
    65c6:	1ba4      	subs	r4, r4, r6
    65c8:	41bd      	sbcs	r5, r7
    65ca:	2b00      	cmp	r3, #0
    65cc:	da00      	bge.n	65d0 <__udivmoddi4+0x5c>
    65ce:	e079      	b.n	66c4 <__udivmoddi4+0x150>
    65d0:	2200      	movs	r2, #0
    65d2:	2300      	movs	r3, #0
    65d4:	9200      	str	r2, [sp, #0]
    65d6:	9301      	str	r3, [sp, #4]
    65d8:	2301      	movs	r3, #1
    65da:	465a      	mov	r2, fp
    65dc:	4093      	lsls	r3, r2
    65de:	9301      	str	r3, [sp, #4]
    65e0:	2301      	movs	r3, #1
    65e2:	4642      	mov	r2, r8
    65e4:	4093      	lsls	r3, r2
    65e6:	9300      	str	r3, [sp, #0]
    65e8:	e019      	b.n	661e <__udivmoddi4+0xaa>
    65ea:	4282      	cmp	r2, r0
    65ec:	d9d0      	bls.n	6590 <__udivmoddi4+0x1c>
    65ee:	2200      	movs	r2, #0
    65f0:	2300      	movs	r3, #0
    65f2:	9200      	str	r2, [sp, #0]
    65f4:	9301      	str	r3, [sp, #4]
    65f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    65f8:	2b00      	cmp	r3, #0
    65fa:	d001      	beq.n	6600 <__udivmoddi4+0x8c>
    65fc:	601c      	str	r4, [r3, #0]
    65fe:	605d      	str	r5, [r3, #4]
    6600:	9800      	ldr	r0, [sp, #0]
    6602:	9901      	ldr	r1, [sp, #4]
    6604:	b003      	add	sp, #12
    6606:	bc3c      	pop	{r2, r3, r4, r5}
    6608:	4690      	mov	r8, r2
    660a:	4699      	mov	r9, r3
    660c:	46a2      	mov	sl, r4
    660e:	46ab      	mov	fp, r5
    6610:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6612:	42a3      	cmp	r3, r4
    6614:	d9d6      	bls.n	65c4 <__udivmoddi4+0x50>
    6616:	2200      	movs	r2, #0
    6618:	2300      	movs	r3, #0
    661a:	9200      	str	r2, [sp, #0]
    661c:	9301      	str	r3, [sp, #4]
    661e:	4643      	mov	r3, r8
    6620:	2b00      	cmp	r3, #0
    6622:	d0e8      	beq.n	65f6 <__udivmoddi4+0x82>
    6624:	07fb      	lsls	r3, r7, #31
    6626:	0872      	lsrs	r2, r6, #1
    6628:	431a      	orrs	r2, r3
    662a:	4646      	mov	r6, r8
    662c:	087b      	lsrs	r3, r7, #1
    662e:	e00e      	b.n	664e <__udivmoddi4+0xda>
    6630:	42ab      	cmp	r3, r5
    6632:	d101      	bne.n	6638 <__udivmoddi4+0xc4>
    6634:	42a2      	cmp	r2, r4
    6636:	d80c      	bhi.n	6652 <__udivmoddi4+0xde>
    6638:	1aa4      	subs	r4, r4, r2
    663a:	419d      	sbcs	r5, r3
    663c:	2001      	movs	r0, #1
    663e:	1924      	adds	r4, r4, r4
    6640:	416d      	adcs	r5, r5
    6642:	2100      	movs	r1, #0
    6644:	3e01      	subs	r6, #1
    6646:	1824      	adds	r4, r4, r0
    6648:	414d      	adcs	r5, r1
    664a:	2e00      	cmp	r6, #0
    664c:	d006      	beq.n	665c <__udivmoddi4+0xe8>
    664e:	42ab      	cmp	r3, r5
    6650:	d9ee      	bls.n	6630 <__udivmoddi4+0xbc>
    6652:	3e01      	subs	r6, #1
    6654:	1924      	adds	r4, r4, r4
    6656:	416d      	adcs	r5, r5
    6658:	2e00      	cmp	r6, #0
    665a:	d1f8      	bne.n	664e <__udivmoddi4+0xda>
    665c:	465b      	mov	r3, fp
    665e:	9800      	ldr	r0, [sp, #0]
    6660:	9901      	ldr	r1, [sp, #4]
    6662:	1900      	adds	r0, r0, r4
    6664:	4169      	adcs	r1, r5
    6666:	2b00      	cmp	r3, #0
    6668:	db22      	blt.n	66b0 <__udivmoddi4+0x13c>
    666a:	002b      	movs	r3, r5
    666c:	465a      	mov	r2, fp
    666e:	40d3      	lsrs	r3, r2
    6670:	002a      	movs	r2, r5
    6672:	4644      	mov	r4, r8
    6674:	40e2      	lsrs	r2, r4
    6676:	001c      	movs	r4, r3
    6678:	465b      	mov	r3, fp
    667a:	0015      	movs	r5, r2
    667c:	2b00      	cmp	r3, #0
    667e:	db2c      	blt.n	66da <__udivmoddi4+0x166>
    6680:	0026      	movs	r6, r4
    6682:	409e      	lsls	r6, r3
    6684:	0033      	movs	r3, r6
    6686:	0026      	movs	r6, r4
    6688:	4647      	mov	r7, r8
    668a:	40be      	lsls	r6, r7
    668c:	0032      	movs	r2, r6
    668e:	1a80      	subs	r0, r0, r2
    6690:	4199      	sbcs	r1, r3
    6692:	9000      	str	r0, [sp, #0]
    6694:	9101      	str	r1, [sp, #4]
    6696:	e7ae      	b.n	65f6 <__udivmoddi4+0x82>
    6698:	4642      	mov	r2, r8
    669a:	2320      	movs	r3, #32
    669c:	1a9b      	subs	r3, r3, r2
    669e:	4652      	mov	r2, sl
    66a0:	40da      	lsrs	r2, r3
    66a2:	4641      	mov	r1, r8
    66a4:	0013      	movs	r3, r2
    66a6:	464a      	mov	r2, r9
    66a8:	408a      	lsls	r2, r1
    66aa:	0017      	movs	r7, r2
    66ac:	431f      	orrs	r7, r3
    66ae:	e782      	b.n	65b6 <__udivmoddi4+0x42>
    66b0:	4642      	mov	r2, r8
    66b2:	2320      	movs	r3, #32
    66b4:	1a9b      	subs	r3, r3, r2
    66b6:	002a      	movs	r2, r5
    66b8:	4646      	mov	r6, r8
    66ba:	409a      	lsls	r2, r3
    66bc:	0023      	movs	r3, r4
    66be:	40f3      	lsrs	r3, r6
    66c0:	4313      	orrs	r3, r2
    66c2:	e7d5      	b.n	6670 <__udivmoddi4+0xfc>
    66c4:	4642      	mov	r2, r8
    66c6:	2320      	movs	r3, #32
    66c8:	2100      	movs	r1, #0
    66ca:	1a9b      	subs	r3, r3, r2
    66cc:	2200      	movs	r2, #0
    66ce:	9100      	str	r1, [sp, #0]
    66d0:	9201      	str	r2, [sp, #4]
    66d2:	2201      	movs	r2, #1
    66d4:	40da      	lsrs	r2, r3
    66d6:	9201      	str	r2, [sp, #4]
    66d8:	e782      	b.n	65e0 <__udivmoddi4+0x6c>
    66da:	4642      	mov	r2, r8
    66dc:	2320      	movs	r3, #32
    66de:	0026      	movs	r6, r4
    66e0:	1a9b      	subs	r3, r3, r2
    66e2:	40de      	lsrs	r6, r3
    66e4:	002f      	movs	r7, r5
    66e6:	46b4      	mov	ip, r6
    66e8:	4097      	lsls	r7, r2
    66ea:	4666      	mov	r6, ip
    66ec:	003b      	movs	r3, r7
    66ee:	4333      	orrs	r3, r6
    66f0:	e7c9      	b.n	6686 <__udivmoddi4+0x112>
    66f2:	46c0      	nop			; (mov r8, r8)

000066f4 <__aeabi_dmul>:
    66f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    66f6:	465f      	mov	r7, fp
    66f8:	4656      	mov	r6, sl
    66fa:	464d      	mov	r5, r9
    66fc:	4644      	mov	r4, r8
    66fe:	b4f0      	push	{r4, r5, r6, r7}
    6700:	030d      	lsls	r5, r1, #12
    6702:	4699      	mov	r9, r3
    6704:	004e      	lsls	r6, r1, #1
    6706:	0b2b      	lsrs	r3, r5, #12
    6708:	b087      	sub	sp, #28
    670a:	0007      	movs	r7, r0
    670c:	4692      	mov	sl, r2
    670e:	4680      	mov	r8, r0
    6710:	469b      	mov	fp, r3
    6712:	0d76      	lsrs	r6, r6, #21
    6714:	0fcc      	lsrs	r4, r1, #31
    6716:	2e00      	cmp	r6, #0
    6718:	d069      	beq.n	67ee <__aeabi_dmul+0xfa>
    671a:	4b6d      	ldr	r3, [pc, #436]	; (68d0 <__aeabi_dmul+0x1dc>)
    671c:	429e      	cmp	r6, r3
    671e:	d035      	beq.n	678c <__aeabi_dmul+0x98>
    6720:	465b      	mov	r3, fp
    6722:	2280      	movs	r2, #128	; 0x80
    6724:	00dd      	lsls	r5, r3, #3
    6726:	0412      	lsls	r2, r2, #16
    6728:	0f43      	lsrs	r3, r0, #29
    672a:	4313      	orrs	r3, r2
    672c:	432b      	orrs	r3, r5
    672e:	469b      	mov	fp, r3
    6730:	00c3      	lsls	r3, r0, #3
    6732:	4698      	mov	r8, r3
    6734:	4b67      	ldr	r3, [pc, #412]	; (68d4 <__aeabi_dmul+0x1e0>)
    6736:	2700      	movs	r7, #0
    6738:	469c      	mov	ip, r3
    673a:	2300      	movs	r3, #0
    673c:	4466      	add	r6, ip
    673e:	9301      	str	r3, [sp, #4]
    6740:	464a      	mov	r2, r9
    6742:	0315      	lsls	r5, r2, #12
    6744:	0050      	lsls	r0, r2, #1
    6746:	0fd2      	lsrs	r2, r2, #31
    6748:	4653      	mov	r3, sl
    674a:	0b2d      	lsrs	r5, r5, #12
    674c:	0d40      	lsrs	r0, r0, #21
    674e:	4691      	mov	r9, r2
    6750:	d100      	bne.n	6754 <__aeabi_dmul+0x60>
    6752:	e076      	b.n	6842 <__aeabi_dmul+0x14e>
    6754:	4a5e      	ldr	r2, [pc, #376]	; (68d0 <__aeabi_dmul+0x1dc>)
    6756:	4290      	cmp	r0, r2
    6758:	d06c      	beq.n	6834 <__aeabi_dmul+0x140>
    675a:	2280      	movs	r2, #128	; 0x80
    675c:	0f5b      	lsrs	r3, r3, #29
    675e:	0412      	lsls	r2, r2, #16
    6760:	4313      	orrs	r3, r2
    6762:	4a5c      	ldr	r2, [pc, #368]	; (68d4 <__aeabi_dmul+0x1e0>)
    6764:	00ed      	lsls	r5, r5, #3
    6766:	4694      	mov	ip, r2
    6768:	431d      	orrs	r5, r3
    676a:	4653      	mov	r3, sl
    676c:	2200      	movs	r2, #0
    676e:	00db      	lsls	r3, r3, #3
    6770:	4460      	add	r0, ip
    6772:	4649      	mov	r1, r9
    6774:	1836      	adds	r6, r6, r0
    6776:	1c70      	adds	r0, r6, #1
    6778:	4061      	eors	r1, r4
    677a:	9002      	str	r0, [sp, #8]
    677c:	4317      	orrs	r7, r2
    677e:	2f0f      	cmp	r7, #15
    6780:	d900      	bls.n	6784 <__aeabi_dmul+0x90>
    6782:	e0af      	b.n	68e4 <__aeabi_dmul+0x1f0>
    6784:	4854      	ldr	r0, [pc, #336]	; (68d8 <__aeabi_dmul+0x1e4>)
    6786:	00bf      	lsls	r7, r7, #2
    6788:	59c7      	ldr	r7, [r0, r7]
    678a:	46bf      	mov	pc, r7
    678c:	465b      	mov	r3, fp
    678e:	431f      	orrs	r7, r3
    6790:	d000      	beq.n	6794 <__aeabi_dmul+0xa0>
    6792:	e088      	b.n	68a6 <__aeabi_dmul+0x1b2>
    6794:	2300      	movs	r3, #0
    6796:	469b      	mov	fp, r3
    6798:	4698      	mov	r8, r3
    679a:	3302      	adds	r3, #2
    679c:	2708      	movs	r7, #8
    679e:	9301      	str	r3, [sp, #4]
    67a0:	e7ce      	b.n	6740 <__aeabi_dmul+0x4c>
    67a2:	4649      	mov	r1, r9
    67a4:	2a02      	cmp	r2, #2
    67a6:	d06a      	beq.n	687e <__aeabi_dmul+0x18a>
    67a8:	2a03      	cmp	r2, #3
    67aa:	d100      	bne.n	67ae <__aeabi_dmul+0xba>
    67ac:	e209      	b.n	6bc2 <__aeabi_dmul+0x4ce>
    67ae:	2a01      	cmp	r2, #1
    67b0:	d000      	beq.n	67b4 <__aeabi_dmul+0xc0>
    67b2:	e1bb      	b.n	6b2c <__aeabi_dmul+0x438>
    67b4:	4011      	ands	r1, r2
    67b6:	2200      	movs	r2, #0
    67b8:	2300      	movs	r3, #0
    67ba:	2500      	movs	r5, #0
    67bc:	4690      	mov	r8, r2
    67be:	b2cc      	uxtb	r4, r1
    67c0:	2100      	movs	r1, #0
    67c2:	032d      	lsls	r5, r5, #12
    67c4:	0d0a      	lsrs	r2, r1, #20
    67c6:	0512      	lsls	r2, r2, #20
    67c8:	0b2d      	lsrs	r5, r5, #12
    67ca:	4315      	orrs	r5, r2
    67cc:	4a43      	ldr	r2, [pc, #268]	; (68dc <__aeabi_dmul+0x1e8>)
    67ce:	051b      	lsls	r3, r3, #20
    67d0:	4015      	ands	r5, r2
    67d2:	431d      	orrs	r5, r3
    67d4:	006d      	lsls	r5, r5, #1
    67d6:	07e4      	lsls	r4, r4, #31
    67d8:	086d      	lsrs	r5, r5, #1
    67da:	4325      	orrs	r5, r4
    67dc:	4640      	mov	r0, r8
    67de:	0029      	movs	r1, r5
    67e0:	b007      	add	sp, #28
    67e2:	bc3c      	pop	{r2, r3, r4, r5}
    67e4:	4690      	mov	r8, r2
    67e6:	4699      	mov	r9, r3
    67e8:	46a2      	mov	sl, r4
    67ea:	46ab      	mov	fp, r5
    67ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67ee:	4303      	orrs	r3, r0
    67f0:	d052      	beq.n	6898 <__aeabi_dmul+0x1a4>
    67f2:	465b      	mov	r3, fp
    67f4:	2b00      	cmp	r3, #0
    67f6:	d100      	bne.n	67fa <__aeabi_dmul+0x106>
    67f8:	e18a      	b.n	6b10 <__aeabi_dmul+0x41c>
    67fa:	4658      	mov	r0, fp
    67fc:	f000 fa36 	bl	6c6c <__clzsi2>
    6800:	0003      	movs	r3, r0
    6802:	3b0b      	subs	r3, #11
    6804:	2b1c      	cmp	r3, #28
    6806:	dd00      	ble.n	680a <__aeabi_dmul+0x116>
    6808:	e17b      	b.n	6b02 <__aeabi_dmul+0x40e>
    680a:	221d      	movs	r2, #29
    680c:	1ad3      	subs	r3, r2, r3
    680e:	003a      	movs	r2, r7
    6810:	0001      	movs	r1, r0
    6812:	465d      	mov	r5, fp
    6814:	40da      	lsrs	r2, r3
    6816:	3908      	subs	r1, #8
    6818:	408d      	lsls	r5, r1
    681a:	0013      	movs	r3, r2
    681c:	408f      	lsls	r7, r1
    681e:	432b      	orrs	r3, r5
    6820:	469b      	mov	fp, r3
    6822:	46b8      	mov	r8, r7
    6824:	4b2e      	ldr	r3, [pc, #184]	; (68e0 <__aeabi_dmul+0x1ec>)
    6826:	2700      	movs	r7, #0
    6828:	469c      	mov	ip, r3
    682a:	2300      	movs	r3, #0
    682c:	4460      	add	r0, ip
    682e:	4246      	negs	r6, r0
    6830:	9301      	str	r3, [sp, #4]
    6832:	e785      	b.n	6740 <__aeabi_dmul+0x4c>
    6834:	4652      	mov	r2, sl
    6836:	432a      	orrs	r2, r5
    6838:	d12c      	bne.n	6894 <__aeabi_dmul+0x1a0>
    683a:	2500      	movs	r5, #0
    683c:	2300      	movs	r3, #0
    683e:	2202      	movs	r2, #2
    6840:	e797      	b.n	6772 <__aeabi_dmul+0x7e>
    6842:	4652      	mov	r2, sl
    6844:	432a      	orrs	r2, r5
    6846:	d021      	beq.n	688c <__aeabi_dmul+0x198>
    6848:	2d00      	cmp	r5, #0
    684a:	d100      	bne.n	684e <__aeabi_dmul+0x15a>
    684c:	e154      	b.n	6af8 <__aeabi_dmul+0x404>
    684e:	0028      	movs	r0, r5
    6850:	f000 fa0c 	bl	6c6c <__clzsi2>
    6854:	0003      	movs	r3, r0
    6856:	3b0b      	subs	r3, #11
    6858:	2b1c      	cmp	r3, #28
    685a:	dd00      	ble.n	685e <__aeabi_dmul+0x16a>
    685c:	e146      	b.n	6aec <__aeabi_dmul+0x3f8>
    685e:	211d      	movs	r1, #29
    6860:	1acb      	subs	r3, r1, r3
    6862:	4651      	mov	r1, sl
    6864:	0002      	movs	r2, r0
    6866:	40d9      	lsrs	r1, r3
    6868:	4653      	mov	r3, sl
    686a:	3a08      	subs	r2, #8
    686c:	4095      	lsls	r5, r2
    686e:	4093      	lsls	r3, r2
    6870:	430d      	orrs	r5, r1
    6872:	4a1b      	ldr	r2, [pc, #108]	; (68e0 <__aeabi_dmul+0x1ec>)
    6874:	4694      	mov	ip, r2
    6876:	4460      	add	r0, ip
    6878:	4240      	negs	r0, r0
    687a:	2200      	movs	r2, #0
    687c:	e779      	b.n	6772 <__aeabi_dmul+0x7e>
    687e:	2401      	movs	r4, #1
    6880:	2200      	movs	r2, #0
    6882:	400c      	ands	r4, r1
    6884:	4b12      	ldr	r3, [pc, #72]	; (68d0 <__aeabi_dmul+0x1dc>)
    6886:	2500      	movs	r5, #0
    6888:	4690      	mov	r8, r2
    688a:	e799      	b.n	67c0 <__aeabi_dmul+0xcc>
    688c:	2500      	movs	r5, #0
    688e:	2300      	movs	r3, #0
    6890:	2201      	movs	r2, #1
    6892:	e76e      	b.n	6772 <__aeabi_dmul+0x7e>
    6894:	2203      	movs	r2, #3
    6896:	e76c      	b.n	6772 <__aeabi_dmul+0x7e>
    6898:	2300      	movs	r3, #0
    689a:	469b      	mov	fp, r3
    689c:	4698      	mov	r8, r3
    689e:	3301      	adds	r3, #1
    68a0:	2704      	movs	r7, #4
    68a2:	9301      	str	r3, [sp, #4]
    68a4:	e74c      	b.n	6740 <__aeabi_dmul+0x4c>
    68a6:	2303      	movs	r3, #3
    68a8:	270c      	movs	r7, #12
    68aa:	9301      	str	r3, [sp, #4]
    68ac:	e748      	b.n	6740 <__aeabi_dmul+0x4c>
    68ae:	2300      	movs	r3, #0
    68b0:	2580      	movs	r5, #128	; 0x80
    68b2:	4698      	mov	r8, r3
    68b4:	2400      	movs	r4, #0
    68b6:	032d      	lsls	r5, r5, #12
    68b8:	4b05      	ldr	r3, [pc, #20]	; (68d0 <__aeabi_dmul+0x1dc>)
    68ba:	e781      	b.n	67c0 <__aeabi_dmul+0xcc>
    68bc:	465d      	mov	r5, fp
    68be:	4643      	mov	r3, r8
    68c0:	9a01      	ldr	r2, [sp, #4]
    68c2:	e76f      	b.n	67a4 <__aeabi_dmul+0xb0>
    68c4:	465d      	mov	r5, fp
    68c6:	4643      	mov	r3, r8
    68c8:	0021      	movs	r1, r4
    68ca:	9a01      	ldr	r2, [sp, #4]
    68cc:	e76a      	b.n	67a4 <__aeabi_dmul+0xb0>
    68ce:	46c0      	nop			; (mov r8, r8)
    68d0:	000007ff 	.word	0x000007ff
    68d4:	fffffc01 	.word	0xfffffc01
    68d8:	0000ddb4 	.word	0x0000ddb4
    68dc:	800fffff 	.word	0x800fffff
    68e0:	000003f3 	.word	0x000003f3
    68e4:	4642      	mov	r2, r8
    68e6:	0c12      	lsrs	r2, r2, #16
    68e8:	4691      	mov	r9, r2
    68ea:	0c1a      	lsrs	r2, r3, #16
    68ec:	4694      	mov	ip, r2
    68ee:	4642      	mov	r2, r8
    68f0:	0417      	lsls	r7, r2, #16
    68f2:	464a      	mov	r2, r9
    68f4:	041b      	lsls	r3, r3, #16
    68f6:	0c1b      	lsrs	r3, r3, #16
    68f8:	435a      	muls	r2, r3
    68fa:	4660      	mov	r0, ip
    68fc:	4690      	mov	r8, r2
    68fe:	464a      	mov	r2, r9
    6900:	4342      	muls	r2, r0
    6902:	0010      	movs	r0, r2
    6904:	9203      	str	r2, [sp, #12]
    6906:	4662      	mov	r2, ip
    6908:	001c      	movs	r4, r3
    690a:	0c3f      	lsrs	r7, r7, #16
    690c:	437a      	muls	r2, r7
    690e:	437c      	muls	r4, r7
    6910:	4442      	add	r2, r8
    6912:	9201      	str	r2, [sp, #4]
    6914:	0c22      	lsrs	r2, r4, #16
    6916:	4692      	mov	sl, r2
    6918:	9a01      	ldr	r2, [sp, #4]
    691a:	4452      	add	r2, sl
    691c:	4590      	cmp	r8, r2
    691e:	d906      	bls.n	692e <__aeabi_dmul+0x23a>
    6920:	4682      	mov	sl, r0
    6922:	2080      	movs	r0, #128	; 0x80
    6924:	0240      	lsls	r0, r0, #9
    6926:	4680      	mov	r8, r0
    6928:	44c2      	add	sl, r8
    692a:	4650      	mov	r0, sl
    692c:	9003      	str	r0, [sp, #12]
    692e:	0c10      	lsrs	r0, r2, #16
    6930:	9004      	str	r0, [sp, #16]
    6932:	4648      	mov	r0, r9
    6934:	0424      	lsls	r4, r4, #16
    6936:	0c24      	lsrs	r4, r4, #16
    6938:	0412      	lsls	r2, r2, #16
    693a:	1912      	adds	r2, r2, r4
    693c:	9205      	str	r2, [sp, #20]
    693e:	0c2a      	lsrs	r2, r5, #16
    6940:	042d      	lsls	r5, r5, #16
    6942:	0c2d      	lsrs	r5, r5, #16
    6944:	4368      	muls	r0, r5
    6946:	002c      	movs	r4, r5
    6948:	4682      	mov	sl, r0
    694a:	4648      	mov	r0, r9
    694c:	437c      	muls	r4, r7
    694e:	4350      	muls	r0, r2
    6950:	4681      	mov	r9, r0
    6952:	0c20      	lsrs	r0, r4, #16
    6954:	4680      	mov	r8, r0
    6956:	4357      	muls	r7, r2
    6958:	4457      	add	r7, sl
    695a:	4447      	add	r7, r8
    695c:	45ba      	cmp	sl, r7
    695e:	d903      	bls.n	6968 <__aeabi_dmul+0x274>
    6960:	2080      	movs	r0, #128	; 0x80
    6962:	0240      	lsls	r0, r0, #9
    6964:	4680      	mov	r8, r0
    6966:	44c1      	add	r9, r8
    6968:	0c38      	lsrs	r0, r7, #16
    696a:	043f      	lsls	r7, r7, #16
    696c:	46b8      	mov	r8, r7
    696e:	4448      	add	r0, r9
    6970:	0424      	lsls	r4, r4, #16
    6972:	0c24      	lsrs	r4, r4, #16
    6974:	9001      	str	r0, [sp, #4]
    6976:	9804      	ldr	r0, [sp, #16]
    6978:	44a0      	add	r8, r4
    697a:	4440      	add	r0, r8
    697c:	9004      	str	r0, [sp, #16]
    697e:	4658      	mov	r0, fp
    6980:	0c00      	lsrs	r0, r0, #16
    6982:	4681      	mov	r9, r0
    6984:	4658      	mov	r0, fp
    6986:	0404      	lsls	r4, r0, #16
    6988:	0c20      	lsrs	r0, r4, #16
    698a:	4682      	mov	sl, r0
    698c:	0007      	movs	r7, r0
    698e:	4648      	mov	r0, r9
    6990:	435f      	muls	r7, r3
    6992:	464c      	mov	r4, r9
    6994:	4343      	muls	r3, r0
    6996:	4660      	mov	r0, ip
    6998:	4360      	muls	r0, r4
    699a:	4664      	mov	r4, ip
    699c:	4683      	mov	fp, r0
    699e:	4650      	mov	r0, sl
    69a0:	4344      	muls	r4, r0
    69a2:	0c38      	lsrs	r0, r7, #16
    69a4:	4684      	mov	ip, r0
    69a6:	18e4      	adds	r4, r4, r3
    69a8:	4464      	add	r4, ip
    69aa:	42a3      	cmp	r3, r4
    69ac:	d903      	bls.n	69b6 <__aeabi_dmul+0x2c2>
    69ae:	2380      	movs	r3, #128	; 0x80
    69b0:	025b      	lsls	r3, r3, #9
    69b2:	469c      	mov	ip, r3
    69b4:	44e3      	add	fp, ip
    69b6:	4648      	mov	r0, r9
    69b8:	043f      	lsls	r7, r7, #16
    69ba:	0c23      	lsrs	r3, r4, #16
    69bc:	0c3f      	lsrs	r7, r7, #16
    69be:	0424      	lsls	r4, r4, #16
    69c0:	19e4      	adds	r4, r4, r7
    69c2:	4657      	mov	r7, sl
    69c4:	4368      	muls	r0, r5
    69c6:	436f      	muls	r7, r5
    69c8:	4684      	mov	ip, r0
    69ca:	464d      	mov	r5, r9
    69cc:	4650      	mov	r0, sl
    69ce:	4355      	muls	r5, r2
    69d0:	4342      	muls	r2, r0
    69d2:	0c38      	lsrs	r0, r7, #16
    69d4:	4681      	mov	r9, r0
    69d6:	4462      	add	r2, ip
    69d8:	444a      	add	r2, r9
    69da:	445b      	add	r3, fp
    69dc:	4594      	cmp	ip, r2
    69de:	d903      	bls.n	69e8 <__aeabi_dmul+0x2f4>
    69e0:	2080      	movs	r0, #128	; 0x80
    69e2:	0240      	lsls	r0, r0, #9
    69e4:	4684      	mov	ip, r0
    69e6:	4465      	add	r5, ip
    69e8:	9803      	ldr	r0, [sp, #12]
    69ea:	043f      	lsls	r7, r7, #16
    69ec:	4683      	mov	fp, r0
    69ee:	9804      	ldr	r0, [sp, #16]
    69f0:	0c3f      	lsrs	r7, r7, #16
    69f2:	4684      	mov	ip, r0
    69f4:	44e3      	add	fp, ip
    69f6:	45c3      	cmp	fp, r8
    69f8:	4180      	sbcs	r0, r0
    69fa:	4240      	negs	r0, r0
    69fc:	4682      	mov	sl, r0
    69fe:	0410      	lsls	r0, r2, #16
    6a00:	4684      	mov	ip, r0
    6a02:	9801      	ldr	r0, [sp, #4]
    6a04:	4467      	add	r7, ip
    6a06:	4684      	mov	ip, r0
    6a08:	4467      	add	r7, ip
    6a0a:	44a3      	add	fp, r4
    6a0c:	46bc      	mov	ip, r7
    6a0e:	45a3      	cmp	fp, r4
    6a10:	41a4      	sbcs	r4, r4
    6a12:	4699      	mov	r9, r3
    6a14:	44d4      	add	ip, sl
    6a16:	4264      	negs	r4, r4
    6a18:	4287      	cmp	r7, r0
    6a1a:	41bf      	sbcs	r7, r7
    6a1c:	45d4      	cmp	ip, sl
    6a1e:	4180      	sbcs	r0, r0
    6a20:	44e1      	add	r9, ip
    6a22:	46a0      	mov	r8, r4
    6a24:	4599      	cmp	r9, r3
    6a26:	419b      	sbcs	r3, r3
    6a28:	427f      	negs	r7, r7
    6a2a:	4240      	negs	r0, r0
    6a2c:	44c8      	add	r8, r9
    6a2e:	4307      	orrs	r7, r0
    6a30:	0c12      	lsrs	r2, r2, #16
    6a32:	18ba      	adds	r2, r7, r2
    6a34:	45a0      	cmp	r8, r4
    6a36:	41a4      	sbcs	r4, r4
    6a38:	425f      	negs	r7, r3
    6a3a:	003b      	movs	r3, r7
    6a3c:	4264      	negs	r4, r4
    6a3e:	4323      	orrs	r3, r4
    6a40:	18d7      	adds	r7, r2, r3
    6a42:	4643      	mov	r3, r8
    6a44:	197d      	adds	r5, r7, r5
    6a46:	0ddb      	lsrs	r3, r3, #23
    6a48:	026d      	lsls	r5, r5, #9
    6a4a:	431d      	orrs	r5, r3
    6a4c:	465b      	mov	r3, fp
    6a4e:	025a      	lsls	r2, r3, #9
    6a50:	9b05      	ldr	r3, [sp, #20]
    6a52:	431a      	orrs	r2, r3
    6a54:	1e53      	subs	r3, r2, #1
    6a56:	419a      	sbcs	r2, r3
    6a58:	465b      	mov	r3, fp
    6a5a:	0ddb      	lsrs	r3, r3, #23
    6a5c:	431a      	orrs	r2, r3
    6a5e:	4643      	mov	r3, r8
    6a60:	025b      	lsls	r3, r3, #9
    6a62:	4313      	orrs	r3, r2
    6a64:	01ea      	lsls	r2, r5, #7
    6a66:	d507      	bpl.n	6a78 <__aeabi_dmul+0x384>
    6a68:	2201      	movs	r2, #1
    6a6a:	085c      	lsrs	r4, r3, #1
    6a6c:	4013      	ands	r3, r2
    6a6e:	4323      	orrs	r3, r4
    6a70:	07ea      	lsls	r2, r5, #31
    6a72:	9e02      	ldr	r6, [sp, #8]
    6a74:	4313      	orrs	r3, r2
    6a76:	086d      	lsrs	r5, r5, #1
    6a78:	4a57      	ldr	r2, [pc, #348]	; (6bd8 <__aeabi_dmul+0x4e4>)
    6a7a:	18b2      	adds	r2, r6, r2
    6a7c:	2a00      	cmp	r2, #0
    6a7e:	dd4b      	ble.n	6b18 <__aeabi_dmul+0x424>
    6a80:	0758      	lsls	r0, r3, #29
    6a82:	d009      	beq.n	6a98 <__aeabi_dmul+0x3a4>
    6a84:	200f      	movs	r0, #15
    6a86:	4018      	ands	r0, r3
    6a88:	2804      	cmp	r0, #4
    6a8a:	d005      	beq.n	6a98 <__aeabi_dmul+0x3a4>
    6a8c:	1d18      	adds	r0, r3, #4
    6a8e:	4298      	cmp	r0, r3
    6a90:	419b      	sbcs	r3, r3
    6a92:	425b      	negs	r3, r3
    6a94:	18ed      	adds	r5, r5, r3
    6a96:	0003      	movs	r3, r0
    6a98:	01e8      	lsls	r0, r5, #7
    6a9a:	d504      	bpl.n	6aa6 <__aeabi_dmul+0x3b2>
    6a9c:	4a4f      	ldr	r2, [pc, #316]	; (6bdc <__aeabi_dmul+0x4e8>)
    6a9e:	4015      	ands	r5, r2
    6aa0:	2280      	movs	r2, #128	; 0x80
    6aa2:	00d2      	lsls	r2, r2, #3
    6aa4:	18b2      	adds	r2, r6, r2
    6aa6:	484e      	ldr	r0, [pc, #312]	; (6be0 <__aeabi_dmul+0x4ec>)
    6aa8:	4282      	cmp	r2, r0
    6aaa:	dd00      	ble.n	6aae <__aeabi_dmul+0x3ba>
    6aac:	e6e7      	b.n	687e <__aeabi_dmul+0x18a>
    6aae:	2401      	movs	r4, #1
    6ab0:	08db      	lsrs	r3, r3, #3
    6ab2:	0768      	lsls	r0, r5, #29
    6ab4:	4318      	orrs	r0, r3
    6ab6:	026d      	lsls	r5, r5, #9
    6ab8:	0553      	lsls	r3, r2, #21
    6aba:	4680      	mov	r8, r0
    6abc:	0b2d      	lsrs	r5, r5, #12
    6abe:	0d5b      	lsrs	r3, r3, #21
    6ac0:	400c      	ands	r4, r1
    6ac2:	e67d      	b.n	67c0 <__aeabi_dmul+0xcc>
    6ac4:	2280      	movs	r2, #128	; 0x80
    6ac6:	4659      	mov	r1, fp
    6ac8:	0312      	lsls	r2, r2, #12
    6aca:	4211      	tst	r1, r2
    6acc:	d008      	beq.n	6ae0 <__aeabi_dmul+0x3ec>
    6ace:	4215      	tst	r5, r2
    6ad0:	d106      	bne.n	6ae0 <__aeabi_dmul+0x3ec>
    6ad2:	4315      	orrs	r5, r2
    6ad4:	032d      	lsls	r5, r5, #12
    6ad6:	4698      	mov	r8, r3
    6ad8:	0b2d      	lsrs	r5, r5, #12
    6ada:	464c      	mov	r4, r9
    6adc:	4b41      	ldr	r3, [pc, #260]	; (6be4 <__aeabi_dmul+0x4f0>)
    6ade:	e66f      	b.n	67c0 <__aeabi_dmul+0xcc>
    6ae0:	465d      	mov	r5, fp
    6ae2:	4315      	orrs	r5, r2
    6ae4:	032d      	lsls	r5, r5, #12
    6ae6:	0b2d      	lsrs	r5, r5, #12
    6ae8:	4b3e      	ldr	r3, [pc, #248]	; (6be4 <__aeabi_dmul+0x4f0>)
    6aea:	e669      	b.n	67c0 <__aeabi_dmul+0xcc>
    6aec:	0003      	movs	r3, r0
    6aee:	4655      	mov	r5, sl
    6af0:	3b28      	subs	r3, #40	; 0x28
    6af2:	409d      	lsls	r5, r3
    6af4:	2300      	movs	r3, #0
    6af6:	e6bc      	b.n	6872 <__aeabi_dmul+0x17e>
    6af8:	4650      	mov	r0, sl
    6afa:	f000 f8b7 	bl	6c6c <__clzsi2>
    6afe:	3020      	adds	r0, #32
    6b00:	e6a8      	b.n	6854 <__aeabi_dmul+0x160>
    6b02:	0003      	movs	r3, r0
    6b04:	3b28      	subs	r3, #40	; 0x28
    6b06:	409f      	lsls	r7, r3
    6b08:	2300      	movs	r3, #0
    6b0a:	46bb      	mov	fp, r7
    6b0c:	4698      	mov	r8, r3
    6b0e:	e689      	b.n	6824 <__aeabi_dmul+0x130>
    6b10:	f000 f8ac 	bl	6c6c <__clzsi2>
    6b14:	3020      	adds	r0, #32
    6b16:	e673      	b.n	6800 <__aeabi_dmul+0x10c>
    6b18:	2401      	movs	r4, #1
    6b1a:	1aa6      	subs	r6, r4, r2
    6b1c:	2e38      	cmp	r6, #56	; 0x38
    6b1e:	dd07      	ble.n	6b30 <__aeabi_dmul+0x43c>
    6b20:	2200      	movs	r2, #0
    6b22:	400c      	ands	r4, r1
    6b24:	2300      	movs	r3, #0
    6b26:	2500      	movs	r5, #0
    6b28:	4690      	mov	r8, r2
    6b2a:	e649      	b.n	67c0 <__aeabi_dmul+0xcc>
    6b2c:	9e02      	ldr	r6, [sp, #8]
    6b2e:	e7a3      	b.n	6a78 <__aeabi_dmul+0x384>
    6b30:	2e1f      	cmp	r6, #31
    6b32:	dc20      	bgt.n	6b76 <__aeabi_dmul+0x482>
    6b34:	2220      	movs	r2, #32
    6b36:	002c      	movs	r4, r5
    6b38:	0018      	movs	r0, r3
    6b3a:	1b92      	subs	r2, r2, r6
    6b3c:	40f0      	lsrs	r0, r6
    6b3e:	4094      	lsls	r4, r2
    6b40:	4093      	lsls	r3, r2
    6b42:	4304      	orrs	r4, r0
    6b44:	1e58      	subs	r0, r3, #1
    6b46:	4183      	sbcs	r3, r0
    6b48:	431c      	orrs	r4, r3
    6b4a:	40f5      	lsrs	r5, r6
    6b4c:	0763      	lsls	r3, r4, #29
    6b4e:	d009      	beq.n	6b64 <__aeabi_dmul+0x470>
    6b50:	230f      	movs	r3, #15
    6b52:	4023      	ands	r3, r4
    6b54:	2b04      	cmp	r3, #4
    6b56:	d005      	beq.n	6b64 <__aeabi_dmul+0x470>
    6b58:	0023      	movs	r3, r4
    6b5a:	1d1c      	adds	r4, r3, #4
    6b5c:	429c      	cmp	r4, r3
    6b5e:	4192      	sbcs	r2, r2
    6b60:	4252      	negs	r2, r2
    6b62:	18ad      	adds	r5, r5, r2
    6b64:	022b      	lsls	r3, r5, #8
    6b66:	d51f      	bpl.n	6ba8 <__aeabi_dmul+0x4b4>
    6b68:	2401      	movs	r4, #1
    6b6a:	2200      	movs	r2, #0
    6b6c:	400c      	ands	r4, r1
    6b6e:	2301      	movs	r3, #1
    6b70:	2500      	movs	r5, #0
    6b72:	4690      	mov	r8, r2
    6b74:	e624      	b.n	67c0 <__aeabi_dmul+0xcc>
    6b76:	201f      	movs	r0, #31
    6b78:	002c      	movs	r4, r5
    6b7a:	4240      	negs	r0, r0
    6b7c:	1a82      	subs	r2, r0, r2
    6b7e:	40d4      	lsrs	r4, r2
    6b80:	2e20      	cmp	r6, #32
    6b82:	d01c      	beq.n	6bbe <__aeabi_dmul+0x4ca>
    6b84:	2240      	movs	r2, #64	; 0x40
    6b86:	1b96      	subs	r6, r2, r6
    6b88:	40b5      	lsls	r5, r6
    6b8a:	432b      	orrs	r3, r5
    6b8c:	1e58      	subs	r0, r3, #1
    6b8e:	4183      	sbcs	r3, r0
    6b90:	2007      	movs	r0, #7
    6b92:	4323      	orrs	r3, r4
    6b94:	4018      	ands	r0, r3
    6b96:	2500      	movs	r5, #0
    6b98:	2800      	cmp	r0, #0
    6b9a:	d009      	beq.n	6bb0 <__aeabi_dmul+0x4bc>
    6b9c:	220f      	movs	r2, #15
    6b9e:	2500      	movs	r5, #0
    6ba0:	401a      	ands	r2, r3
    6ba2:	001c      	movs	r4, r3
    6ba4:	2a04      	cmp	r2, #4
    6ba6:	d1d8      	bne.n	6b5a <__aeabi_dmul+0x466>
    6ba8:	0023      	movs	r3, r4
    6baa:	0768      	lsls	r0, r5, #29
    6bac:	026d      	lsls	r5, r5, #9
    6bae:	0b2d      	lsrs	r5, r5, #12
    6bb0:	2401      	movs	r4, #1
    6bb2:	08db      	lsrs	r3, r3, #3
    6bb4:	4303      	orrs	r3, r0
    6bb6:	4698      	mov	r8, r3
    6bb8:	400c      	ands	r4, r1
    6bba:	2300      	movs	r3, #0
    6bbc:	e600      	b.n	67c0 <__aeabi_dmul+0xcc>
    6bbe:	2500      	movs	r5, #0
    6bc0:	e7e3      	b.n	6b8a <__aeabi_dmul+0x496>
    6bc2:	2280      	movs	r2, #128	; 0x80
    6bc4:	2401      	movs	r4, #1
    6bc6:	0312      	lsls	r2, r2, #12
    6bc8:	4315      	orrs	r5, r2
    6bca:	032d      	lsls	r5, r5, #12
    6bcc:	4698      	mov	r8, r3
    6bce:	0b2d      	lsrs	r5, r5, #12
    6bd0:	400c      	ands	r4, r1
    6bd2:	4b04      	ldr	r3, [pc, #16]	; (6be4 <__aeabi_dmul+0x4f0>)
    6bd4:	e5f4      	b.n	67c0 <__aeabi_dmul+0xcc>
    6bd6:	46c0      	nop			; (mov r8, r8)
    6bd8:	000003ff 	.word	0x000003ff
    6bdc:	feffffff 	.word	0xfeffffff
    6be0:	000007fe 	.word	0x000007fe
    6be4:	000007ff 	.word	0x000007ff

00006be8 <__aeabi_i2d>:
    6be8:	b570      	push	{r4, r5, r6, lr}
    6bea:	2800      	cmp	r0, #0
    6bec:	d030      	beq.n	6c50 <__aeabi_i2d+0x68>
    6bee:	17c3      	asrs	r3, r0, #31
    6bf0:	18c4      	adds	r4, r0, r3
    6bf2:	405c      	eors	r4, r3
    6bf4:	0fc5      	lsrs	r5, r0, #31
    6bf6:	0020      	movs	r0, r4
    6bf8:	f000 f838 	bl	6c6c <__clzsi2>
    6bfc:	4b17      	ldr	r3, [pc, #92]	; (6c5c <__aeabi_i2d+0x74>)
    6bfe:	4a18      	ldr	r2, [pc, #96]	; (6c60 <__aeabi_i2d+0x78>)
    6c00:	1a1b      	subs	r3, r3, r0
    6c02:	1ad2      	subs	r2, r2, r3
    6c04:	2a1f      	cmp	r2, #31
    6c06:	dd18      	ble.n	6c3a <__aeabi_i2d+0x52>
    6c08:	4a16      	ldr	r2, [pc, #88]	; (6c64 <__aeabi_i2d+0x7c>)
    6c0a:	1ad2      	subs	r2, r2, r3
    6c0c:	4094      	lsls	r4, r2
    6c0e:	2200      	movs	r2, #0
    6c10:	0324      	lsls	r4, r4, #12
    6c12:	055b      	lsls	r3, r3, #21
    6c14:	0b24      	lsrs	r4, r4, #12
    6c16:	0d5b      	lsrs	r3, r3, #21
    6c18:	2100      	movs	r1, #0
    6c1a:	0010      	movs	r0, r2
    6c1c:	0324      	lsls	r4, r4, #12
    6c1e:	0d0a      	lsrs	r2, r1, #20
    6c20:	0512      	lsls	r2, r2, #20
    6c22:	0b24      	lsrs	r4, r4, #12
    6c24:	4314      	orrs	r4, r2
    6c26:	4a10      	ldr	r2, [pc, #64]	; (6c68 <__aeabi_i2d+0x80>)
    6c28:	051b      	lsls	r3, r3, #20
    6c2a:	4014      	ands	r4, r2
    6c2c:	431c      	orrs	r4, r3
    6c2e:	0064      	lsls	r4, r4, #1
    6c30:	07ed      	lsls	r5, r5, #31
    6c32:	0864      	lsrs	r4, r4, #1
    6c34:	432c      	orrs	r4, r5
    6c36:	0021      	movs	r1, r4
    6c38:	bd70      	pop	{r4, r5, r6, pc}
    6c3a:	0021      	movs	r1, r4
    6c3c:	4091      	lsls	r1, r2
    6c3e:	000a      	movs	r2, r1
    6c40:	210b      	movs	r1, #11
    6c42:	1a08      	subs	r0, r1, r0
    6c44:	40c4      	lsrs	r4, r0
    6c46:	055b      	lsls	r3, r3, #21
    6c48:	0324      	lsls	r4, r4, #12
    6c4a:	0b24      	lsrs	r4, r4, #12
    6c4c:	0d5b      	lsrs	r3, r3, #21
    6c4e:	e7e3      	b.n	6c18 <__aeabi_i2d+0x30>
    6c50:	2500      	movs	r5, #0
    6c52:	2300      	movs	r3, #0
    6c54:	2400      	movs	r4, #0
    6c56:	2200      	movs	r2, #0
    6c58:	e7de      	b.n	6c18 <__aeabi_i2d+0x30>
    6c5a:	46c0      	nop			; (mov r8, r8)
    6c5c:	0000041e 	.word	0x0000041e
    6c60:	00000433 	.word	0x00000433
    6c64:	00000413 	.word	0x00000413
    6c68:	800fffff 	.word	0x800fffff

00006c6c <__clzsi2>:
    6c6c:	211c      	movs	r1, #28
    6c6e:	2301      	movs	r3, #1
    6c70:	041b      	lsls	r3, r3, #16
    6c72:	4298      	cmp	r0, r3
    6c74:	d301      	bcc.n	6c7a <__clzsi2+0xe>
    6c76:	0c00      	lsrs	r0, r0, #16
    6c78:	3910      	subs	r1, #16
    6c7a:	0a1b      	lsrs	r3, r3, #8
    6c7c:	4298      	cmp	r0, r3
    6c7e:	d301      	bcc.n	6c84 <__clzsi2+0x18>
    6c80:	0a00      	lsrs	r0, r0, #8
    6c82:	3908      	subs	r1, #8
    6c84:	091b      	lsrs	r3, r3, #4
    6c86:	4298      	cmp	r0, r3
    6c88:	d301      	bcc.n	6c8e <__clzsi2+0x22>
    6c8a:	0900      	lsrs	r0, r0, #4
    6c8c:	3904      	subs	r1, #4
    6c8e:	a202      	add	r2, pc, #8	; (adr r2, 6c98 <__clzsi2+0x2c>)
    6c90:	5c10      	ldrb	r0, [r2, r0]
    6c92:	1840      	adds	r0, r0, r1
    6c94:	4770      	bx	lr
    6c96:	46c0      	nop			; (mov r8, r8)
    6c98:	02020304 	.word	0x02020304
    6c9c:	01010101 	.word	0x01010101
	...

00006ca8 <__clzdi2>:
    6ca8:	b510      	push	{r4, lr}
    6caa:	2900      	cmp	r1, #0
    6cac:	d103      	bne.n	6cb6 <__clzdi2+0xe>
    6cae:	f7ff ffdd 	bl	6c6c <__clzsi2>
    6cb2:	3020      	adds	r0, #32
    6cb4:	e002      	b.n	6cbc <__clzdi2+0x14>
    6cb6:	1c08      	adds	r0, r1, #0
    6cb8:	f7ff ffd8 	bl	6c6c <__clzsi2>
    6cbc:	bd10      	pop	{r4, pc}
    6cbe:	46c0      	nop			; (mov r8, r8)

00006cc0 <__libc_init_array>:
    6cc0:	b570      	push	{r4, r5, r6, lr}
    6cc2:	4e0d      	ldr	r6, [pc, #52]	; (6cf8 <__libc_init_array+0x38>)
    6cc4:	4d0d      	ldr	r5, [pc, #52]	; (6cfc <__libc_init_array+0x3c>)
    6cc6:	2400      	movs	r4, #0
    6cc8:	1bad      	subs	r5, r5, r6
    6cca:	10ad      	asrs	r5, r5, #2
    6ccc:	d005      	beq.n	6cda <__libc_init_array+0x1a>
    6cce:	00a3      	lsls	r3, r4, #2
    6cd0:	58f3      	ldr	r3, [r6, r3]
    6cd2:	3401      	adds	r4, #1
    6cd4:	4798      	blx	r3
    6cd6:	42a5      	cmp	r5, r4
    6cd8:	d1f9      	bne.n	6cce <__libc_init_array+0xe>
    6cda:	f007 fa23 	bl	e124 <_init>
    6cde:	4e08      	ldr	r6, [pc, #32]	; (6d00 <__libc_init_array+0x40>)
    6ce0:	4d08      	ldr	r5, [pc, #32]	; (6d04 <__libc_init_array+0x44>)
    6ce2:	2400      	movs	r4, #0
    6ce4:	1bad      	subs	r5, r5, r6
    6ce6:	10ad      	asrs	r5, r5, #2
    6ce8:	d005      	beq.n	6cf6 <__libc_init_array+0x36>
    6cea:	00a3      	lsls	r3, r4, #2
    6cec:	58f3      	ldr	r3, [r6, r3]
    6cee:	3401      	adds	r4, #1
    6cf0:	4798      	blx	r3
    6cf2:	42a5      	cmp	r5, r4
    6cf4:	d1f9      	bne.n	6cea <__libc_init_array+0x2a>
    6cf6:	bd70      	pop	{r4, r5, r6, pc}
    6cf8:	0000e130 	.word	0x0000e130
    6cfc:	0000e130 	.word	0x0000e130
    6d00:	0000e130 	.word	0x0000e130
    6d04:	0000e138 	.word	0x0000e138

00006d08 <memcpy>:
    6d08:	b570      	push	{r4, r5, r6, lr}
    6d0a:	2a0f      	cmp	r2, #15
    6d0c:	d932      	bls.n	6d74 <memcpy+0x6c>
    6d0e:	000c      	movs	r4, r1
    6d10:	4304      	orrs	r4, r0
    6d12:	000b      	movs	r3, r1
    6d14:	07a4      	lsls	r4, r4, #30
    6d16:	d131      	bne.n	6d7c <memcpy+0x74>
    6d18:	0015      	movs	r5, r2
    6d1a:	0004      	movs	r4, r0
    6d1c:	3d10      	subs	r5, #16
    6d1e:	092d      	lsrs	r5, r5, #4
    6d20:	3501      	adds	r5, #1
    6d22:	012d      	lsls	r5, r5, #4
    6d24:	1949      	adds	r1, r1, r5
    6d26:	681e      	ldr	r6, [r3, #0]
    6d28:	6026      	str	r6, [r4, #0]
    6d2a:	685e      	ldr	r6, [r3, #4]
    6d2c:	6066      	str	r6, [r4, #4]
    6d2e:	689e      	ldr	r6, [r3, #8]
    6d30:	60a6      	str	r6, [r4, #8]
    6d32:	68de      	ldr	r6, [r3, #12]
    6d34:	3310      	adds	r3, #16
    6d36:	60e6      	str	r6, [r4, #12]
    6d38:	3410      	adds	r4, #16
    6d3a:	4299      	cmp	r1, r3
    6d3c:	d1f3      	bne.n	6d26 <memcpy+0x1e>
    6d3e:	230f      	movs	r3, #15
    6d40:	1945      	adds	r5, r0, r5
    6d42:	4013      	ands	r3, r2
    6d44:	2b03      	cmp	r3, #3
    6d46:	d91b      	bls.n	6d80 <memcpy+0x78>
    6d48:	1f1c      	subs	r4, r3, #4
    6d4a:	2300      	movs	r3, #0
    6d4c:	08a4      	lsrs	r4, r4, #2
    6d4e:	3401      	adds	r4, #1
    6d50:	00a4      	lsls	r4, r4, #2
    6d52:	58ce      	ldr	r6, [r1, r3]
    6d54:	50ee      	str	r6, [r5, r3]
    6d56:	3304      	adds	r3, #4
    6d58:	429c      	cmp	r4, r3
    6d5a:	d1fa      	bne.n	6d52 <memcpy+0x4a>
    6d5c:	2303      	movs	r3, #3
    6d5e:	192d      	adds	r5, r5, r4
    6d60:	1909      	adds	r1, r1, r4
    6d62:	401a      	ands	r2, r3
    6d64:	d005      	beq.n	6d72 <memcpy+0x6a>
    6d66:	2300      	movs	r3, #0
    6d68:	5ccc      	ldrb	r4, [r1, r3]
    6d6a:	54ec      	strb	r4, [r5, r3]
    6d6c:	3301      	adds	r3, #1
    6d6e:	429a      	cmp	r2, r3
    6d70:	d1fa      	bne.n	6d68 <memcpy+0x60>
    6d72:	bd70      	pop	{r4, r5, r6, pc}
    6d74:	0005      	movs	r5, r0
    6d76:	2a00      	cmp	r2, #0
    6d78:	d1f5      	bne.n	6d66 <memcpy+0x5e>
    6d7a:	e7fa      	b.n	6d72 <memcpy+0x6a>
    6d7c:	0005      	movs	r5, r0
    6d7e:	e7f2      	b.n	6d66 <memcpy+0x5e>
    6d80:	001a      	movs	r2, r3
    6d82:	e7f8      	b.n	6d76 <memcpy+0x6e>

00006d84 <memset>:
    6d84:	b570      	push	{r4, r5, r6, lr}
    6d86:	0783      	lsls	r3, r0, #30
    6d88:	d03f      	beq.n	6e0a <memset+0x86>
    6d8a:	1e54      	subs	r4, r2, #1
    6d8c:	2a00      	cmp	r2, #0
    6d8e:	d03b      	beq.n	6e08 <memset+0x84>
    6d90:	b2ce      	uxtb	r6, r1
    6d92:	0003      	movs	r3, r0
    6d94:	2503      	movs	r5, #3
    6d96:	e003      	b.n	6da0 <memset+0x1c>
    6d98:	1e62      	subs	r2, r4, #1
    6d9a:	2c00      	cmp	r4, #0
    6d9c:	d034      	beq.n	6e08 <memset+0x84>
    6d9e:	0014      	movs	r4, r2
    6da0:	3301      	adds	r3, #1
    6da2:	1e5a      	subs	r2, r3, #1
    6da4:	7016      	strb	r6, [r2, #0]
    6da6:	422b      	tst	r3, r5
    6da8:	d1f6      	bne.n	6d98 <memset+0x14>
    6daa:	2c03      	cmp	r4, #3
    6dac:	d924      	bls.n	6df8 <memset+0x74>
    6dae:	25ff      	movs	r5, #255	; 0xff
    6db0:	400d      	ands	r5, r1
    6db2:	022a      	lsls	r2, r5, #8
    6db4:	4315      	orrs	r5, r2
    6db6:	042a      	lsls	r2, r5, #16
    6db8:	4315      	orrs	r5, r2
    6dba:	2c0f      	cmp	r4, #15
    6dbc:	d911      	bls.n	6de2 <memset+0x5e>
    6dbe:	0026      	movs	r6, r4
    6dc0:	3e10      	subs	r6, #16
    6dc2:	0936      	lsrs	r6, r6, #4
    6dc4:	3601      	adds	r6, #1
    6dc6:	0136      	lsls	r6, r6, #4
    6dc8:	001a      	movs	r2, r3
    6dca:	199b      	adds	r3, r3, r6
    6dcc:	6015      	str	r5, [r2, #0]
    6dce:	6055      	str	r5, [r2, #4]
    6dd0:	6095      	str	r5, [r2, #8]
    6dd2:	60d5      	str	r5, [r2, #12]
    6dd4:	3210      	adds	r2, #16
    6dd6:	4293      	cmp	r3, r2
    6dd8:	d1f8      	bne.n	6dcc <memset+0x48>
    6dda:	220f      	movs	r2, #15
    6ddc:	4014      	ands	r4, r2
    6dde:	2c03      	cmp	r4, #3
    6de0:	d90a      	bls.n	6df8 <memset+0x74>
    6de2:	1f26      	subs	r6, r4, #4
    6de4:	08b6      	lsrs	r6, r6, #2
    6de6:	3601      	adds	r6, #1
    6de8:	00b6      	lsls	r6, r6, #2
    6dea:	001a      	movs	r2, r3
    6dec:	199b      	adds	r3, r3, r6
    6dee:	c220      	stmia	r2!, {r5}
    6df0:	4293      	cmp	r3, r2
    6df2:	d1fc      	bne.n	6dee <memset+0x6a>
    6df4:	2203      	movs	r2, #3
    6df6:	4014      	ands	r4, r2
    6df8:	2c00      	cmp	r4, #0
    6dfa:	d005      	beq.n	6e08 <memset+0x84>
    6dfc:	b2c9      	uxtb	r1, r1
    6dfe:	191c      	adds	r4, r3, r4
    6e00:	7019      	strb	r1, [r3, #0]
    6e02:	3301      	adds	r3, #1
    6e04:	429c      	cmp	r4, r3
    6e06:	d1fb      	bne.n	6e00 <memset+0x7c>
    6e08:	bd70      	pop	{r4, r5, r6, pc}
    6e0a:	0014      	movs	r4, r2
    6e0c:	0003      	movs	r3, r0
    6e0e:	e7cc      	b.n	6daa <memset+0x26>

00006e10 <printf>:
    6e10:	b40f      	push	{r0, r1, r2, r3}
    6e12:	b500      	push	{lr}
    6e14:	4906      	ldr	r1, [pc, #24]	; (6e30 <printf+0x20>)
    6e16:	b083      	sub	sp, #12
    6e18:	ab04      	add	r3, sp, #16
    6e1a:	6808      	ldr	r0, [r1, #0]
    6e1c:	cb04      	ldmia	r3!, {r2}
    6e1e:	6881      	ldr	r1, [r0, #8]
    6e20:	9301      	str	r3, [sp, #4]
    6e22:	f000 f945 	bl	70b0 <_vfprintf_r>
    6e26:	b003      	add	sp, #12
    6e28:	bc08      	pop	{r3}
    6e2a:	b004      	add	sp, #16
    6e2c:	4718      	bx	r3
    6e2e:	46c0      	nop			; (mov r8, r8)
    6e30:	20000438 	.word	0x20000438

00006e34 <putchar>:
    6e34:	b510      	push	{r4, lr}
    6e36:	4b03      	ldr	r3, [pc, #12]	; (6e44 <putchar+0x10>)
    6e38:	0001      	movs	r1, r0
    6e3a:	6818      	ldr	r0, [r3, #0]
    6e3c:	6882      	ldr	r2, [r0, #8]
    6e3e:	f004 f9b1 	bl	b1a4 <_putc_r>
    6e42:	bd10      	pop	{r4, pc}
    6e44:	20000438 	.word	0x20000438

00006e48 <_puts_r>:
    6e48:	b530      	push	{r4, r5, lr}
    6e4a:	0005      	movs	r5, r0
    6e4c:	b089      	sub	sp, #36	; 0x24
    6e4e:	0008      	movs	r0, r1
    6e50:	000c      	movs	r4, r1
    6e52:	f000 f8f9 	bl	7048 <strlen>
    6e56:	ab04      	add	r3, sp, #16
    6e58:	4a15      	ldr	r2, [pc, #84]	; (6eb0 <_puts_r+0x68>)
    6e5a:	9301      	str	r3, [sp, #4]
    6e5c:	2302      	movs	r3, #2
    6e5e:	9206      	str	r2, [sp, #24]
    6e60:	2201      	movs	r2, #1
    6e62:	9302      	str	r3, [sp, #8]
    6e64:	6bab      	ldr	r3, [r5, #56]	; 0x38
    6e66:	9005      	str	r0, [sp, #20]
    6e68:	3001      	adds	r0, #1
    6e6a:	9404      	str	r4, [sp, #16]
    6e6c:	9207      	str	r2, [sp, #28]
    6e6e:	9003      	str	r0, [sp, #12]
    6e70:	68ac      	ldr	r4, [r5, #8]
    6e72:	2b00      	cmp	r3, #0
    6e74:	d017      	beq.n	6ea6 <_puts_r+0x5e>
    6e76:	220c      	movs	r2, #12
    6e78:	5ea3      	ldrsh	r3, [r4, r2]
    6e7a:	2280      	movs	r2, #128	; 0x80
    6e7c:	0192      	lsls	r2, r2, #6
    6e7e:	4213      	tst	r3, r2
    6e80:	d105      	bne.n	6e8e <_puts_r+0x46>
    6e82:	4313      	orrs	r3, r2
    6e84:	81a3      	strh	r3, [r4, #12]
    6e86:	6e62      	ldr	r2, [r4, #100]	; 0x64
    6e88:	4b0a      	ldr	r3, [pc, #40]	; (6eb4 <_puts_r+0x6c>)
    6e8a:	4013      	ands	r3, r2
    6e8c:	6663      	str	r3, [r4, #100]	; 0x64
    6e8e:	aa01      	add	r2, sp, #4
    6e90:	0021      	movs	r1, r4
    6e92:	0028      	movs	r0, r5
    6e94:	f003 f8c0 	bl	a018 <__sfvwrite_r>
    6e98:	1e43      	subs	r3, r0, #1
    6e9a:	4198      	sbcs	r0, r3
    6e9c:	230a      	movs	r3, #10
    6e9e:	4240      	negs	r0, r0
    6ea0:	4318      	orrs	r0, r3
    6ea2:	b009      	add	sp, #36	; 0x24
    6ea4:	bd30      	pop	{r4, r5, pc}
    6ea6:	0028      	movs	r0, r5
    6ea8:	f002 ff5e 	bl	9d68 <__sinit>
    6eac:	e7e3      	b.n	6e76 <_puts_r+0x2e>
    6eae:	46c0      	nop			; (mov r8, r8)
    6eb0:	0000ddfc 	.word	0x0000ddfc
    6eb4:	ffffdfff 	.word	0xffffdfff

00006eb8 <puts>:
    6eb8:	b510      	push	{r4, lr}
    6eba:	4b03      	ldr	r3, [pc, #12]	; (6ec8 <puts+0x10>)
    6ebc:	0001      	movs	r1, r0
    6ebe:	6818      	ldr	r0, [r3, #0]
    6ec0:	f7ff ffc2 	bl	6e48 <_puts_r>
    6ec4:	bd10      	pop	{r4, pc}
    6ec6:	46c0      	nop			; (mov r8, r8)
    6ec8:	20000438 	.word	0x20000438

00006ecc <setbuf>:
    6ecc:	424a      	negs	r2, r1
    6ece:	414a      	adcs	r2, r1
    6ed0:	2380      	movs	r3, #128	; 0x80
    6ed2:	b510      	push	{r4, lr}
    6ed4:	0052      	lsls	r2, r2, #1
    6ed6:	00db      	lsls	r3, r3, #3
    6ed8:	f000 f802 	bl	6ee0 <setvbuf>
    6edc:	bd10      	pop	{r4, pc}
    6ede:	46c0      	nop			; (mov r8, r8)

00006ee0 <setvbuf>:
    6ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ee2:	4646      	mov	r6, r8
    6ee4:	464f      	mov	r7, r9
    6ee6:	b4c0      	push	{r6, r7}
    6ee8:	001e      	movs	r6, r3
    6eea:	4b55      	ldr	r3, [pc, #340]	; (7040 <setvbuf+0x160>)
    6eec:	b083      	sub	sp, #12
    6eee:	681d      	ldr	r5, [r3, #0]
    6ef0:	0004      	movs	r4, r0
    6ef2:	4688      	mov	r8, r1
    6ef4:	0017      	movs	r7, r2
    6ef6:	2d00      	cmp	r5, #0
    6ef8:	d003      	beq.n	6f02 <setvbuf+0x22>
    6efa:	6bab      	ldr	r3, [r5, #56]	; 0x38
    6efc:	2b00      	cmp	r3, #0
    6efe:	d100      	bne.n	6f02 <setvbuf+0x22>
    6f00:	e076      	b.n	6ff0 <setvbuf+0x110>
    6f02:	2f02      	cmp	r7, #2
    6f04:	d005      	beq.n	6f12 <setvbuf+0x32>
    6f06:	2f01      	cmp	r7, #1
    6f08:	d900      	bls.n	6f0c <setvbuf+0x2c>
    6f0a:	e086      	b.n	701a <setvbuf+0x13a>
    6f0c:	2e00      	cmp	r6, #0
    6f0e:	da00      	bge.n	6f12 <setvbuf+0x32>
    6f10:	e083      	b.n	701a <setvbuf+0x13a>
    6f12:	0021      	movs	r1, r4
    6f14:	0028      	movs	r0, r5
    6f16:	f002 fe91 	bl	9c3c <_fflush_r>
    6f1a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6f1c:	2900      	cmp	r1, #0
    6f1e:	d008      	beq.n	6f32 <setvbuf+0x52>
    6f20:	0023      	movs	r3, r4
    6f22:	3340      	adds	r3, #64	; 0x40
    6f24:	4299      	cmp	r1, r3
    6f26:	d002      	beq.n	6f2e <setvbuf+0x4e>
    6f28:	0028      	movs	r0, r5
    6f2a:	f002 ff93 	bl	9e54 <_free_r>
    6f2e:	2300      	movs	r3, #0
    6f30:	6323      	str	r3, [r4, #48]	; 0x30
    6f32:	2300      	movs	r3, #0
    6f34:	61a3      	str	r3, [r4, #24]
    6f36:	6063      	str	r3, [r4, #4]
    6f38:	230c      	movs	r3, #12
    6f3a:	5ee2      	ldrsh	r2, [r4, r3]
    6f3c:	0613      	lsls	r3, r2, #24
    6f3e:	d450      	bmi.n	6fe2 <setvbuf+0x102>
    6f40:	4b40      	ldr	r3, [pc, #256]	; (7044 <setvbuf+0x164>)
    6f42:	4013      	ands	r3, r2
    6f44:	81a3      	strh	r3, [r4, #12]
    6f46:	2f02      	cmp	r7, #2
    6f48:	d037      	beq.n	6fba <setvbuf+0xda>
    6f4a:	ab01      	add	r3, sp, #4
    6f4c:	466a      	mov	r2, sp
    6f4e:	0021      	movs	r1, r4
    6f50:	0028      	movs	r0, r5
    6f52:	f003 fa23 	bl	a39c <__swhatbuf_r>
    6f56:	89a3      	ldrh	r3, [r4, #12]
    6f58:	4318      	orrs	r0, r3
    6f5a:	81a0      	strh	r0, [r4, #12]
    6f5c:	2e00      	cmp	r6, #0
    6f5e:	d020      	beq.n	6fa2 <setvbuf+0xc2>
    6f60:	4643      	mov	r3, r8
    6f62:	2b00      	cmp	r3, #0
    6f64:	d01e      	beq.n	6fa4 <setvbuf+0xc4>
    6f66:	6bab      	ldr	r3, [r5, #56]	; 0x38
    6f68:	2b00      	cmp	r3, #0
    6f6a:	d048      	beq.n	6ffe <setvbuf+0x11e>
    6f6c:	9b00      	ldr	r3, [sp, #0]
    6f6e:	429e      	cmp	r6, r3
    6f70:	d04b      	beq.n	700a <setvbuf+0x12a>
    6f72:	2280      	movs	r2, #128	; 0x80
    6f74:	89a3      	ldrh	r3, [r4, #12]
    6f76:	0112      	lsls	r2, r2, #4
    6f78:	4313      	orrs	r3, r2
    6f7a:	b21b      	sxth	r3, r3
    6f7c:	81a3      	strh	r3, [r4, #12]
    6f7e:	2f01      	cmp	r7, #1
    6f80:	d047      	beq.n	7012 <setvbuf+0x132>
    6f82:	4642      	mov	r2, r8
    6f84:	6022      	str	r2, [r4, #0]
    6f86:	6122      	str	r2, [r4, #16]
    6f88:	2208      	movs	r2, #8
    6f8a:	b29b      	uxth	r3, r3
    6f8c:	6166      	str	r6, [r4, #20]
    6f8e:	401a      	ands	r2, r3
    6f90:	d024      	beq.n	6fdc <setvbuf+0xfc>
    6f92:	07db      	lsls	r3, r3, #31
    6f94:	d530      	bpl.n	6ff8 <setvbuf+0x118>
    6f96:	2300      	movs	r3, #0
    6f98:	4276      	negs	r6, r6
    6f9a:	60a3      	str	r3, [r4, #8]
    6f9c:	61a6      	str	r6, [r4, #24]
    6f9e:	2000      	movs	r0, #0
    6fa0:	e017      	b.n	6fd2 <setvbuf+0xf2>
    6fa2:	9e00      	ldr	r6, [sp, #0]
    6fa4:	0030      	movs	r0, r6
    6fa6:	f003 fa6d 	bl	a484 <malloc>
    6faa:	4680      	mov	r8, r0
    6fac:	2800      	cmp	r0, #0
    6fae:	d037      	beq.n	7020 <setvbuf+0x140>
    6fb0:	2380      	movs	r3, #128	; 0x80
    6fb2:	89a2      	ldrh	r2, [r4, #12]
    6fb4:	4313      	orrs	r3, r2
    6fb6:	81a3      	strh	r3, [r4, #12]
    6fb8:	e7d5      	b.n	6f66 <setvbuf+0x86>
    6fba:	2000      	movs	r0, #0
    6fbc:	2202      	movs	r2, #2
    6fbe:	4313      	orrs	r3, r2
    6fc0:	81a3      	strh	r3, [r4, #12]
    6fc2:	2300      	movs	r3, #0
    6fc4:	60a3      	str	r3, [r4, #8]
    6fc6:	0023      	movs	r3, r4
    6fc8:	3343      	adds	r3, #67	; 0x43
    6fca:	6023      	str	r3, [r4, #0]
    6fcc:	6123      	str	r3, [r4, #16]
    6fce:	2301      	movs	r3, #1
    6fd0:	6163      	str	r3, [r4, #20]
    6fd2:	b003      	add	sp, #12
    6fd4:	bc0c      	pop	{r2, r3}
    6fd6:	4690      	mov	r8, r2
    6fd8:	4699      	mov	r9, r3
    6fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6fdc:	60a2      	str	r2, [r4, #8]
    6fde:	2000      	movs	r0, #0
    6fe0:	e7f7      	b.n	6fd2 <setvbuf+0xf2>
    6fe2:	6921      	ldr	r1, [r4, #16]
    6fe4:	0028      	movs	r0, r5
    6fe6:	f002 ff35 	bl	9e54 <_free_r>
    6fea:	230c      	movs	r3, #12
    6fec:	5ee2      	ldrsh	r2, [r4, r3]
    6fee:	e7a7      	b.n	6f40 <setvbuf+0x60>
    6ff0:	0028      	movs	r0, r5
    6ff2:	f002 feb9 	bl	9d68 <__sinit>
    6ff6:	e784      	b.n	6f02 <setvbuf+0x22>
    6ff8:	60a6      	str	r6, [r4, #8]
    6ffa:	2000      	movs	r0, #0
    6ffc:	e7e9      	b.n	6fd2 <setvbuf+0xf2>
    6ffe:	0028      	movs	r0, r5
    7000:	f002 feb2 	bl	9d68 <__sinit>
    7004:	9b00      	ldr	r3, [sp, #0]
    7006:	429e      	cmp	r6, r3
    7008:	d1b3      	bne.n	6f72 <setvbuf+0x92>
    700a:	220c      	movs	r2, #12
    700c:	5ea3      	ldrsh	r3, [r4, r2]
    700e:	2f01      	cmp	r7, #1
    7010:	d1b7      	bne.n	6f82 <setvbuf+0xa2>
    7012:	2201      	movs	r2, #1
    7014:	4313      	orrs	r3, r2
    7016:	81a3      	strh	r3, [r4, #12]
    7018:	e7b3      	b.n	6f82 <setvbuf+0xa2>
    701a:	2001      	movs	r0, #1
    701c:	4240      	negs	r0, r0
    701e:	e7d8      	b.n	6fd2 <setvbuf+0xf2>
    7020:	9b00      	ldr	r3, [sp, #0]
    7022:	4699      	mov	r9, r3
    7024:	42b3      	cmp	r3, r6
    7026:	d006      	beq.n	7036 <setvbuf+0x156>
    7028:	0018      	movs	r0, r3
    702a:	f003 fa2b 	bl	a484 <malloc>
    702e:	464e      	mov	r6, r9
    7030:	4680      	mov	r8, r0
    7032:	2800      	cmp	r0, #0
    7034:	d1bc      	bne.n	6fb0 <setvbuf+0xd0>
    7036:	2001      	movs	r0, #1
    7038:	220c      	movs	r2, #12
    703a:	5ea3      	ldrsh	r3, [r4, r2]
    703c:	4240      	negs	r0, r0
    703e:	e7bd      	b.n	6fbc <setvbuf+0xdc>
    7040:	20000438 	.word	0x20000438
    7044:	fffff35c 	.word	0xfffff35c

00007048 <strlen>:
    7048:	b510      	push	{r4, lr}
    704a:	0783      	lsls	r3, r0, #30
    704c:	d027      	beq.n	709e <strlen+0x56>
    704e:	7803      	ldrb	r3, [r0, #0]
    7050:	2b00      	cmp	r3, #0
    7052:	d026      	beq.n	70a2 <strlen+0x5a>
    7054:	0003      	movs	r3, r0
    7056:	2103      	movs	r1, #3
    7058:	e002      	b.n	7060 <strlen+0x18>
    705a:	781a      	ldrb	r2, [r3, #0]
    705c:	2a00      	cmp	r2, #0
    705e:	d01c      	beq.n	709a <strlen+0x52>
    7060:	3301      	adds	r3, #1
    7062:	420b      	tst	r3, r1
    7064:	d1f9      	bne.n	705a <strlen+0x12>
    7066:	6819      	ldr	r1, [r3, #0]
    7068:	4a0f      	ldr	r2, [pc, #60]	; (70a8 <strlen+0x60>)
    706a:	4c10      	ldr	r4, [pc, #64]	; (70ac <strlen+0x64>)
    706c:	188a      	adds	r2, r1, r2
    706e:	438a      	bics	r2, r1
    7070:	4222      	tst	r2, r4
    7072:	d10f      	bne.n	7094 <strlen+0x4c>
    7074:	3304      	adds	r3, #4
    7076:	6819      	ldr	r1, [r3, #0]
    7078:	4a0b      	ldr	r2, [pc, #44]	; (70a8 <strlen+0x60>)
    707a:	188a      	adds	r2, r1, r2
    707c:	438a      	bics	r2, r1
    707e:	4222      	tst	r2, r4
    7080:	d108      	bne.n	7094 <strlen+0x4c>
    7082:	3304      	adds	r3, #4
    7084:	6819      	ldr	r1, [r3, #0]
    7086:	4a08      	ldr	r2, [pc, #32]	; (70a8 <strlen+0x60>)
    7088:	188a      	adds	r2, r1, r2
    708a:	438a      	bics	r2, r1
    708c:	4222      	tst	r2, r4
    708e:	d0f1      	beq.n	7074 <strlen+0x2c>
    7090:	e000      	b.n	7094 <strlen+0x4c>
    7092:	3301      	adds	r3, #1
    7094:	781a      	ldrb	r2, [r3, #0]
    7096:	2a00      	cmp	r2, #0
    7098:	d1fb      	bne.n	7092 <strlen+0x4a>
    709a:	1a18      	subs	r0, r3, r0
    709c:	bd10      	pop	{r4, pc}
    709e:	0003      	movs	r3, r0
    70a0:	e7e1      	b.n	7066 <strlen+0x1e>
    70a2:	2000      	movs	r0, #0
    70a4:	e7fa      	b.n	709c <strlen+0x54>
    70a6:	46c0      	nop			; (mov r8, r8)
    70a8:	fefefeff 	.word	0xfefefeff
    70ac:	80808080 	.word	0x80808080

000070b0 <_vfprintf_r>:
    70b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    70b2:	4644      	mov	r4, r8
    70b4:	465f      	mov	r7, fp
    70b6:	4656      	mov	r6, sl
    70b8:	464d      	mov	r5, r9
    70ba:	b4f0      	push	{r4, r5, r6, r7}
    70bc:	b0c3      	sub	sp, #268	; 0x10c
    70be:	001c      	movs	r4, r3
    70c0:	9311      	str	r3, [sp, #68]	; 0x44
    70c2:	4683      	mov	fp, r0
    70c4:	4688      	mov	r8, r1
    70c6:	920a      	str	r2, [sp, #40]	; 0x28
    70c8:	f003 f964 	bl	a394 <_localeconv_r>
    70cc:	6800      	ldr	r0, [r0, #0]
    70ce:	9019      	str	r0, [sp, #100]	; 0x64
    70d0:	f7ff ffba 	bl	7048 <strlen>
    70d4:	465b      	mov	r3, fp
    70d6:	9018      	str	r0, [sp, #96]	; 0x60
    70d8:	2b00      	cmp	r3, #0
    70da:	d003      	beq.n	70e4 <_vfprintf_r+0x34>
    70dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    70de:	2b00      	cmp	r3, #0
    70e0:	d100      	bne.n	70e4 <_vfprintf_r+0x34>
    70e2:	e0d9      	b.n	7298 <_vfprintf_r+0x1e8>
    70e4:	4643      	mov	r3, r8
    70e6:	2180      	movs	r1, #128	; 0x80
    70e8:	220c      	movs	r2, #12
    70ea:	5e9a      	ldrsh	r2, [r3, r2]
    70ec:	0189      	lsls	r1, r1, #6
    70ee:	b293      	uxth	r3, r2
    70f0:	420b      	tst	r3, r1
    70f2:	d109      	bne.n	7108 <_vfprintf_r+0x58>
    70f4:	430a      	orrs	r2, r1
    70f6:	4643      	mov	r3, r8
    70f8:	4641      	mov	r1, r8
    70fa:	819a      	strh	r2, [r3, #12]
    70fc:	6e49      	ldr	r1, [r1, #100]	; 0x64
    70fe:	4bbc      	ldr	r3, [pc, #752]	; (73f0 <_vfprintf_r+0x340>)
    7100:	400b      	ands	r3, r1
    7102:	4641      	mov	r1, r8
    7104:	664b      	str	r3, [r1, #100]	; 0x64
    7106:	b293      	uxth	r3, r2
    7108:	071a      	lsls	r2, r3, #28
    710a:	d400      	bmi.n	710e <_vfprintf_r+0x5e>
    710c:	e097      	b.n	723e <_vfprintf_r+0x18e>
    710e:	4642      	mov	r2, r8
    7110:	6912      	ldr	r2, [r2, #16]
    7112:	2a00      	cmp	r2, #0
    7114:	d100      	bne.n	7118 <_vfprintf_r+0x68>
    7116:	e092      	b.n	723e <_vfprintf_r+0x18e>
    7118:	221a      	movs	r2, #26
    711a:	4013      	ands	r3, r2
    711c:	2b0a      	cmp	r3, #10
    711e:	d100      	bne.n	7122 <_vfprintf_r+0x72>
    7120:	e09c      	b.n	725c <_vfprintf_r+0x1ac>
    7122:	ab32      	add	r3, sp, #200	; 0xc8
    7124:	9325      	str	r3, [sp, #148]	; 0x94
    7126:	2300      	movs	r3, #0
    7128:	af25      	add	r7, sp, #148	; 0x94
    712a:	60bb      	str	r3, [r7, #8]
    712c:	607b      	str	r3, [r7, #4]
    712e:	9314      	str	r3, [sp, #80]	; 0x50
    7130:	9316      	str	r3, [sp, #88]	; 0x58
    7132:	9317      	str	r3, [sp, #92]	; 0x5c
    7134:	931a      	str	r3, [sp, #104]	; 0x68
    7136:	930c      	str	r3, [sp, #48]	; 0x30
    7138:	465b      	mov	r3, fp
    713a:	46c3      	mov	fp, r8
    713c:	ae32      	add	r6, sp, #200	; 0xc8
    713e:	9307      	str	r3, [sp, #28]
    7140:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    7142:	7823      	ldrb	r3, [r4, #0]
    7144:	2b00      	cmp	r3, #0
    7146:	d100      	bne.n	714a <_vfprintf_r+0x9a>
    7148:	e0aa      	b.n	72a0 <_vfprintf_r+0x1f0>
    714a:	2b25      	cmp	r3, #37	; 0x25
    714c:	d102      	bne.n	7154 <_vfprintf_r+0xa4>
    714e:	e0a7      	b.n	72a0 <_vfprintf_r+0x1f0>
    7150:	2b25      	cmp	r3, #37	; 0x25
    7152:	d003      	beq.n	715c <_vfprintf_r+0xac>
    7154:	3401      	adds	r4, #1
    7156:	7823      	ldrb	r3, [r4, #0]
    7158:	2b00      	cmp	r3, #0
    715a:	d1f9      	bne.n	7150 <_vfprintf_r+0xa0>
    715c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    715e:	1ae5      	subs	r5, r4, r3
    7160:	d011      	beq.n	7186 <_vfprintf_r+0xd6>
    7162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7164:	6075      	str	r5, [r6, #4]
    7166:	6033      	str	r3, [r6, #0]
    7168:	68bb      	ldr	r3, [r7, #8]
    716a:	195b      	adds	r3, r3, r5
    716c:	60bb      	str	r3, [r7, #8]
    716e:	687b      	ldr	r3, [r7, #4]
    7170:	3301      	adds	r3, #1
    7172:	607b      	str	r3, [r7, #4]
    7174:	2b07      	cmp	r3, #7
    7176:	dd00      	ble.n	717a <_vfprintf_r+0xca>
    7178:	e083      	b.n	7282 <_vfprintf_r+0x1d2>
    717a:	3608      	adds	r6, #8
    717c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    717e:	469c      	mov	ip, r3
    7180:	44ac      	add	ip, r5
    7182:	4663      	mov	r3, ip
    7184:	930c      	str	r3, [sp, #48]	; 0x30
    7186:	7823      	ldrb	r3, [r4, #0]
    7188:	2b00      	cmp	r3, #0
    718a:	d101      	bne.n	7190 <_vfprintf_r+0xe0>
    718c:	f001 f8da 	bl	8344 <_vfprintf_r+0x1294>
    7190:	2300      	movs	r3, #0
    7192:	aa16      	add	r2, sp, #88	; 0x58
    7194:	77d3      	strb	r3, [r2, #31]
    7196:	2201      	movs	r2, #1
    7198:	4252      	negs	r2, r2
    719a:	920b      	str	r2, [sp, #44]	; 0x2c
    719c:	2200      	movs	r2, #0
    719e:	920d      	str	r2, [sp, #52]	; 0x34
    71a0:	9208      	str	r2, [sp, #32]
    71a2:	3240      	adds	r2, #64	; 0x40
    71a4:	4692      	mov	sl, r2
    71a6:	3a38      	subs	r2, #56	; 0x38
    71a8:	4691      	mov	r9, r2
    71aa:	3278      	adds	r2, #120	; 0x78
    71ac:	1c61      	adds	r1, r4, #1
    71ae:	7863      	ldrb	r3, [r4, #1]
    71b0:	2000      	movs	r0, #0
    71b2:	2400      	movs	r4, #0
    71b4:	4694      	mov	ip, r2
    71b6:	3101      	adds	r1, #1
    71b8:	001a      	movs	r2, r3
    71ba:	3a20      	subs	r2, #32
    71bc:	2a58      	cmp	r2, #88	; 0x58
    71be:	d900      	bls.n	71c2 <_vfprintf_r+0x112>
    71c0:	e38d      	b.n	78de <_vfprintf_r+0x82e>
    71c2:	4d8c      	ldr	r5, [pc, #560]	; (73f4 <_vfprintf_r+0x344>)
    71c4:	0092      	lsls	r2, r2, #2
    71c6:	58aa      	ldr	r2, [r5, r2]
    71c8:	4697      	mov	pc, r2
    71ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    71cc:	9211      	str	r2, [sp, #68]	; 0x44
    71ce:	425b      	negs	r3, r3
    71d0:	930d      	str	r3, [sp, #52]	; 0x34
    71d2:	2304      	movs	r3, #4
    71d4:	9a08      	ldr	r2, [sp, #32]
    71d6:	431a      	orrs	r2, r3
    71d8:	9208      	str	r2, [sp, #32]
    71da:	780b      	ldrb	r3, [r1, #0]
    71dc:	e7eb      	b.n	71b6 <_vfprintf_r+0x106>
    71de:	2430      	movs	r4, #48	; 0x30
    71e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    71e2:	aa1e      	add	r2, sp, #120	; 0x78
    71e4:	7014      	strb	r4, [r2, #0]
    71e6:	1d18      	adds	r0, r3, #4
    71e8:	3448      	adds	r4, #72	; 0x48
    71ea:	681b      	ldr	r3, [r3, #0]
    71ec:	7054      	strb	r4, [r2, #1]
    71ee:	9d08      	ldr	r5, [sp, #32]
    71f0:	2200      	movs	r2, #0
    71f2:	930e      	str	r3, [sp, #56]	; 0x38
    71f4:	2300      	movs	r3, #0
    71f6:	910a      	str	r1, [sp, #40]	; 0x28
    71f8:	0029      	movs	r1, r5
    71fa:	ac16      	add	r4, sp, #88	; 0x58
    71fc:	77e2      	strb	r2, [r4, #31]
    71fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7200:	930f      	str	r3, [sp, #60]	; 0x3c
    7202:	3302      	adds	r3, #2
    7204:	4319      	orrs	r1, r3
    7206:	2a00      	cmp	r2, #0
    7208:	da00      	bge.n	720c <_vfprintf_r+0x15c>
    720a:	e379      	b.n	7900 <_vfprintf_r+0x850>
    720c:	2280      	movs	r2, #128	; 0x80
    720e:	4395      	bics	r5, r2
    7210:	002a      	movs	r2, r5
    7212:	431a      	orrs	r2, r3
    7214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7216:	9208      	str	r2, [sp, #32]
    7218:	9011      	str	r0, [sp, #68]	; 0x44
    721a:	2b00      	cmp	r3, #0
    721c:	d000      	beq.n	7220 <_vfprintf_r+0x170>
    721e:	e358      	b.n	78d2 <_vfprintf_r+0x822>
    7220:	3378      	adds	r3, #120	; 0x78
    7222:	4975      	ldr	r1, [pc, #468]	; (73f8 <_vfprintf_r+0x348>)
    7224:	9313      	str	r3, [sp, #76]	; 0x4c
    7226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7228:	4698      	mov	r8, r3
    722a:	2b00      	cmp	r3, #0
    722c:	d100      	bne.n	7230 <_vfprintf_r+0x180>
    722e:	e31e      	b.n	786e <_vfprintf_r+0x7be>
    7230:	2300      	movs	r3, #0
    7232:	4698      	mov	r8, r3
    7234:	2400      	movs	r4, #0
    7236:	2300      	movs	r3, #0
    7238:	930e      	str	r3, [sp, #56]	; 0x38
    723a:	940f      	str	r4, [sp, #60]	; 0x3c
    723c:	e2c0      	b.n	77c0 <_vfprintf_r+0x710>
    723e:	4641      	mov	r1, r8
    7240:	4658      	mov	r0, fp
    7242:	f001 fb83 	bl	894c <__swsetup_r>
    7246:	2800      	cmp	r0, #0
    7248:	d001      	beq.n	724e <_vfprintf_r+0x19e>
    724a:	f001 f873 	bl	8334 <_vfprintf_r+0x1284>
    724e:	4643      	mov	r3, r8
    7250:	221a      	movs	r2, #26
    7252:	899b      	ldrh	r3, [r3, #12]
    7254:	4013      	ands	r3, r2
    7256:	2b0a      	cmp	r3, #10
    7258:	d000      	beq.n	725c <_vfprintf_r+0x1ac>
    725a:	e762      	b.n	7122 <_vfprintf_r+0x72>
    725c:	4643      	mov	r3, r8
    725e:	220e      	movs	r2, #14
    7260:	5e9b      	ldrsh	r3, [r3, r2]
    7262:	2b00      	cmp	r3, #0
    7264:	da00      	bge.n	7268 <_vfprintf_r+0x1b8>
    7266:	e75c      	b.n	7122 <_vfprintf_r+0x72>
    7268:	0023      	movs	r3, r4
    726a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    726c:	4641      	mov	r1, r8
    726e:	4658      	mov	r0, fp
    7270:	f001 fb32 	bl	88d8 <__sbprintf>
    7274:	b043      	add	sp, #268	; 0x10c
    7276:	bc3c      	pop	{r2, r3, r4, r5}
    7278:	4690      	mov	r8, r2
    727a:	4699      	mov	r9, r3
    727c:	46a2      	mov	sl, r4
    727e:	46ab      	mov	fp, r5
    7280:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7282:	003a      	movs	r2, r7
    7284:	4659      	mov	r1, fp
    7286:	9807      	ldr	r0, [sp, #28]
    7288:	f004 fa3a 	bl	b700 <__sprint_r>
    728c:	2800      	cmp	r0, #0
    728e:	d001      	beq.n	7294 <_vfprintf_r+0x1e4>
    7290:	f000 fd27 	bl	7ce2 <_vfprintf_r+0xc32>
    7294:	ae32      	add	r6, sp, #200	; 0xc8
    7296:	e771      	b.n	717c <_vfprintf_r+0xcc>
    7298:	4658      	mov	r0, fp
    729a:	f002 fd65 	bl	9d68 <__sinit>
    729e:	e721      	b.n	70e4 <_vfprintf_r+0x34>
    72a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    72a2:	e770      	b.n	7186 <_vfprintf_r+0xd6>
    72a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    72a6:	1d1a      	adds	r2, r3, #4
    72a8:	681b      	ldr	r3, [r3, #0]
    72aa:	930d      	str	r3, [sp, #52]	; 0x34
    72ac:	2b00      	cmp	r3, #0
    72ae:	da00      	bge.n	72b2 <_vfprintf_r+0x202>
    72b0:	e78b      	b.n	71ca <_vfprintf_r+0x11a>
    72b2:	780b      	ldrb	r3, [r1, #0]
    72b4:	9211      	str	r2, [sp, #68]	; 0x44
    72b6:	e77e      	b.n	71b6 <_vfprintf_r+0x106>
    72b8:	1c4b      	adds	r3, r1, #1
    72ba:	4698      	mov	r8, r3
    72bc:	780b      	ldrb	r3, [r1, #0]
    72be:	2b2a      	cmp	r3, #42	; 0x2a
    72c0:	d101      	bne.n	72c6 <_vfprintf_r+0x216>
    72c2:	f001 fabb 	bl	883c <_vfprintf_r+0x178c>
    72c6:	001a      	movs	r2, r3
    72c8:	3a30      	subs	r2, #48	; 0x30
    72ca:	2100      	movs	r1, #0
    72cc:	2a09      	cmp	r2, #9
    72ce:	d901      	bls.n	72d4 <_vfprintf_r+0x224>
    72d0:	f001 fa60 	bl	8794 <_vfprintf_r+0x16e4>
    72d4:	4643      	mov	r3, r8
    72d6:	4680      	mov	r8, r0
    72d8:	0008      	movs	r0, r1
    72da:	0081      	lsls	r1, r0, #2
    72dc:	1809      	adds	r1, r1, r0
    72de:	0049      	lsls	r1, r1, #1
    72e0:	3301      	adds	r3, #1
    72e2:	1888      	adds	r0, r1, r2
    72e4:	1e5a      	subs	r2, r3, #1
    72e6:	7811      	ldrb	r1, [r2, #0]
    72e8:	000a      	movs	r2, r1
    72ea:	3a30      	subs	r2, #48	; 0x30
    72ec:	2a09      	cmp	r2, #9
    72ee:	d9f4      	bls.n	72da <_vfprintf_r+0x22a>
    72f0:	4642      	mov	r2, r8
    72f2:	4698      	mov	r8, r3
    72f4:	000b      	movs	r3, r1
    72f6:	0001      	movs	r1, r0
    72f8:	0010      	movs	r0, r2
    72fa:	2900      	cmp	r1, #0
    72fc:	da01      	bge.n	7302 <_vfprintf_r+0x252>
    72fe:	f001 f8fd 	bl	84fc <_vfprintf_r+0x144c>
    7302:	910b      	str	r1, [sp, #44]	; 0x2c
    7304:	4641      	mov	r1, r8
    7306:	e757      	b.n	71b8 <_vfprintf_r+0x108>
    7308:	4662      	mov	r2, ip
    730a:	9b08      	ldr	r3, [sp, #32]
    730c:	4313      	orrs	r3, r2
    730e:	9308      	str	r3, [sp, #32]
    7310:	780b      	ldrb	r3, [r1, #0]
    7312:	e750      	b.n	71b6 <_vfprintf_r+0x106>
    7314:	2200      	movs	r2, #0
    7316:	0015      	movs	r5, r2
    7318:	3b30      	subs	r3, #48	; 0x30
    731a:	4680      	mov	r8, r0
    731c:	001a      	movs	r2, r3
    731e:	0028      	movs	r0, r5
    7320:	0083      	lsls	r3, r0, #2
    7322:	181b      	adds	r3, r3, r0
    7324:	005b      	lsls	r3, r3, #1
    7326:	3101      	adds	r1, #1
    7328:	18d0      	adds	r0, r2, r3
    732a:	1e4b      	subs	r3, r1, #1
    732c:	781b      	ldrb	r3, [r3, #0]
    732e:	001a      	movs	r2, r3
    7330:	3a30      	subs	r2, #48	; 0x30
    7332:	2a09      	cmp	r2, #9
    7334:	d9f4      	bls.n	7320 <_vfprintf_r+0x270>
    7336:	900d      	str	r0, [sp, #52]	; 0x34
    7338:	4640      	mov	r0, r8
    733a:	e73d      	b.n	71b8 <_vfprintf_r+0x108>
    733c:	9313      	str	r3, [sp, #76]	; 0x4c
    733e:	910a      	str	r1, [sp, #40]	; 0x28
    7340:	2800      	cmp	r0, #0
    7342:	d001      	beq.n	7348 <_vfprintf_r+0x298>
    7344:	f001 faa7 	bl	8896 <_vfprintf_r+0x17e6>
    7348:	2310      	movs	r3, #16
    734a:	9a08      	ldr	r2, [sp, #32]
    734c:	431a      	orrs	r2, r3
    734e:	9208      	str	r2, [sp, #32]
    7350:	9b08      	ldr	r3, [sp, #32]
    7352:	069b      	lsls	r3, r3, #26
    7354:	d401      	bmi.n	735a <_vfprintf_r+0x2aa>
    7356:	f000 fd9c 	bl	7e92 <_vfprintf_r+0xde2>
    735a:	2307      	movs	r3, #7
    735c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    735e:	3207      	adds	r2, #7
    7360:	439a      	bics	r2, r3
    7362:	3301      	adds	r3, #1
    7364:	469c      	mov	ip, r3
    7366:	4494      	add	ip, r2
    7368:	4663      	mov	r3, ip
    736a:	9311      	str	r3, [sp, #68]	; 0x44
    736c:	6853      	ldr	r3, [r2, #4]
    736e:	6812      	ldr	r2, [r2, #0]
    7370:	930f      	str	r3, [sp, #60]	; 0x3c
    7372:	920e      	str	r2, [sp, #56]	; 0x38
    7374:	2b00      	cmp	r3, #0
    7376:	da01      	bge.n	737c <_vfprintf_r+0x2cc>
    7378:	f000 fe8e 	bl	8098 <_vfprintf_r+0xfe8>
    737c:	ab16      	add	r3, sp, #88	; 0x58
    737e:	7fdb      	ldrb	r3, [r3, #31]
    7380:	4698      	mov	r8, r3
    7382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7384:	2b00      	cmp	r3, #0
    7386:	da01      	bge.n	738c <_vfprintf_r+0x2dc>
    7388:	f000 fde3 	bl	7f52 <_vfprintf_r+0xea2>
    738c:	2380      	movs	r3, #128	; 0x80
    738e:	9a08      	ldr	r2, [sp, #32]
    7390:	439a      	bics	r2, r3
    7392:	9208      	str	r2, [sp, #32]
    7394:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7398:	0011      	movs	r1, r2
    739a:	4319      	orrs	r1, r3
    739c:	d101      	bne.n	73a2 <_vfprintf_r+0x2f2>
    739e:	f000 fcbd 	bl	7d1c <_vfprintf_r+0xc6c>
    73a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    73a4:	2b00      	cmp	r3, #0
    73a6:	d101      	bne.n	73ac <_vfprintf_r+0x2fc>
    73a8:	f001 f8a2 	bl	84f0 <_vfprintf_r+0x1440>
    73ac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    73ae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    73b0:	ab32      	add	r3, sp, #200	; 0xc8
    73b2:	46b1      	mov	r9, r6
    73b4:	001e      	movs	r6, r3
    73b6:	0020      	movs	r0, r4
    73b8:	0029      	movs	r1, r5
    73ba:	220a      	movs	r2, #10
    73bc:	2300      	movs	r3, #0
    73be:	f7ff f88d 	bl	64dc <__aeabi_uldivmod>
    73c2:	3e01      	subs	r6, #1
    73c4:	3230      	adds	r2, #48	; 0x30
    73c6:	7032      	strb	r2, [r6, #0]
    73c8:	2300      	movs	r3, #0
    73ca:	0020      	movs	r0, r4
    73cc:	0029      	movs	r1, r5
    73ce:	220a      	movs	r2, #10
    73d0:	f7ff f884 	bl	64dc <__aeabi_uldivmod>
    73d4:	0003      	movs	r3, r0
    73d6:	0004      	movs	r4, r0
    73d8:	000d      	movs	r5, r1
    73da:	430b      	orrs	r3, r1
    73dc:	d1eb      	bne.n	73b6 <_vfprintf_r+0x306>
    73de:	0032      	movs	r2, r6
    73e0:	ab32      	add	r3, sp, #200	; 0xc8
    73e2:	1a9b      	subs	r3, r3, r2
    73e4:	9612      	str	r6, [sp, #72]	; 0x48
    73e6:	940e      	str	r4, [sp, #56]	; 0x38
    73e8:	950f      	str	r5, [sp, #60]	; 0x3c
    73ea:	464e      	mov	r6, r9
    73ec:	9310      	str	r3, [sp, #64]	; 0x40
    73ee:	e0b1      	b.n	7554 <_vfprintf_r+0x4a4>
    73f0:	ffffdfff 	.word	0xffffdfff
    73f4:	0000de00 	.word	0x0000de00
    73f8:	0000df98 	.word	0x0000df98
    73fc:	9313      	str	r3, [sp, #76]	; 0x4c
    73fe:	910a      	str	r1, [sp, #40]	; 0x28
    7400:	2800      	cmp	r0, #0
    7402:	d001      	beq.n	7408 <_vfprintf_r+0x358>
    7404:	f001 fa32 	bl	886c <_vfprintf_r+0x17bc>
    7408:	2207      	movs	r2, #7
    740a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    740c:	3307      	adds	r3, #7
    740e:	4393      	bics	r3, r2
    7410:	3201      	adds	r2, #1
    7412:	4694      	mov	ip, r2
    7414:	449c      	add	ip, r3
    7416:	4662      	mov	r2, ip
    7418:	9211      	str	r2, [sp, #68]	; 0x44
    741a:	681a      	ldr	r2, [r3, #0]
    741c:	9216      	str	r2, [sp, #88]	; 0x58
    741e:	2201      	movs	r2, #1
    7420:	685b      	ldr	r3, [r3, #4]
    7422:	9d16      	ldr	r5, [sp, #88]	; 0x58
    7424:	9317      	str	r3, [sp, #92]	; 0x5c
    7426:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    7428:	4252      	negs	r2, r2
    742a:	005c      	lsls	r4, r3, #1
    742c:	0864      	lsrs	r4, r4, #1
    742e:	4bc2      	ldr	r3, [pc, #776]	; (7738 <_vfprintf_r+0x688>)
    7430:	0028      	movs	r0, r5
    7432:	0021      	movs	r1, r4
    7434:	f005 ff82 	bl	d33c <__aeabi_dcmpun>
    7438:	2800      	cmp	r0, #0
    743a:	d001      	beq.n	7440 <_vfprintf_r+0x390>
    743c:	f000 fe6c 	bl	8118 <_vfprintf_r+0x1068>
    7440:	2201      	movs	r2, #1
    7442:	4bbd      	ldr	r3, [pc, #756]	; (7738 <_vfprintf_r+0x688>)
    7444:	4252      	negs	r2, r2
    7446:	0028      	movs	r0, r5
    7448:	0021      	movs	r1, r4
    744a:	f004 fcb5 	bl	bdb8 <__aeabi_dcmple>
    744e:	2800      	cmp	r0, #0
    7450:	d001      	beq.n	7456 <_vfprintf_r+0x3a6>
    7452:	f000 fe61 	bl	8118 <_vfprintf_r+0x1068>
    7456:	2200      	movs	r2, #0
    7458:	2300      	movs	r3, #0
    745a:	9816      	ldr	r0, [sp, #88]	; 0x58
    745c:	9917      	ldr	r1, [sp, #92]	; 0x5c
    745e:	f004 fca1 	bl	bda4 <__aeabi_dcmplt>
    7462:	2800      	cmp	r0, #0
    7464:	d001      	beq.n	746a <_vfprintf_r+0x3ba>
    7466:	f001 f91f 	bl	86a8 <_vfprintf_r+0x15f8>
    746a:	ab16      	add	r3, sp, #88	; 0x58
    746c:	7fdb      	ldrb	r3, [r3, #31]
    746e:	4698      	mov	r8, r3
    7470:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7472:	2b47      	cmp	r3, #71	; 0x47
    7474:	dc01      	bgt.n	747a <_vfprintf_r+0x3ca>
    7476:	f000 ff72 	bl	835e <_vfprintf_r+0x12ae>
    747a:	4bb0      	ldr	r3, [pc, #704]	; (773c <_vfprintf_r+0x68c>)
    747c:	9312      	str	r3, [sp, #72]	; 0x48
    747e:	2380      	movs	r3, #128	; 0x80
    7480:	9a08      	ldr	r2, [sp, #32]
    7482:	439a      	bics	r2, r3
    7484:	9208      	str	r2, [sp, #32]
    7486:	3b7d      	subs	r3, #125	; 0x7d
    7488:	9309      	str	r3, [sp, #36]	; 0x24
    748a:	9310      	str	r3, [sp, #64]	; 0x40
    748c:	2300      	movs	r3, #0
    748e:	930b      	str	r3, [sp, #44]	; 0x2c
    7490:	9315      	str	r3, [sp, #84]	; 0x54
    7492:	e068      	b.n	7566 <_vfprintf_r+0x4b6>
    7494:	464a      	mov	r2, r9
    7496:	9b08      	ldr	r3, [sp, #32]
    7498:	4313      	orrs	r3, r2
    749a:	9308      	str	r3, [sp, #32]
    749c:	780b      	ldrb	r3, [r1, #0]
    749e:	e68a      	b.n	71b6 <_vfprintf_r+0x106>
    74a0:	9313      	str	r3, [sp, #76]	; 0x4c
    74a2:	910a      	str	r1, [sp, #40]	; 0x28
    74a4:	2800      	cmp	r0, #0
    74a6:	d001      	beq.n	74ac <_vfprintf_r+0x3fc>
    74a8:	f001 f9e4 	bl	8874 <_vfprintf_r+0x17c4>
    74ac:	2310      	movs	r3, #16
    74ae:	9a08      	ldr	r2, [sp, #32]
    74b0:	431a      	orrs	r2, r3
    74b2:	9208      	str	r2, [sp, #32]
    74b4:	2320      	movs	r3, #32
    74b6:	9908      	ldr	r1, [sp, #32]
    74b8:	400b      	ands	r3, r1
    74ba:	d101      	bne.n	74c0 <_vfprintf_r+0x410>
    74bc:	f000 fcc1 	bl	7e42 <_vfprintf_r+0xd92>
    74c0:	2207      	movs	r2, #7
    74c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    74c4:	3307      	adds	r3, #7
    74c6:	4393      	bics	r3, r2
    74c8:	3201      	adds	r2, #1
    74ca:	4694      	mov	ip, r2
    74cc:	449c      	add	ip, r3
    74ce:	4662      	mov	r2, ip
    74d0:	685c      	ldr	r4, [r3, #4]
    74d2:	681b      	ldr	r3, [r3, #0]
    74d4:	0025      	movs	r5, r4
    74d6:	001c      	movs	r4, r3
    74d8:	2300      	movs	r3, #0
    74da:	9211      	str	r2, [sp, #68]	; 0x44
    74dc:	aa16      	add	r2, sp, #88	; 0x58
    74de:	77d3      	strb	r3, [r2, #31]
    74e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    74e2:	940e      	str	r4, [sp, #56]	; 0x38
    74e4:	950f      	str	r5, [sp, #60]	; 0x3c
    74e6:	2b00      	cmp	r3, #0
    74e8:	da01      	bge.n	74ee <_vfprintf_r+0x43e>
    74ea:	f000 fdfd 	bl	80e8 <_vfprintf_r+0x1038>
    74ee:	2380      	movs	r3, #128	; 0x80
    74f0:	4399      	bics	r1, r3
    74f2:	9108      	str	r1, [sp, #32]
    74f4:	0021      	movs	r1, r4
    74f6:	4329      	orrs	r1, r5
    74f8:	d101      	bne.n	74fe <_vfprintf_r+0x44e>
    74fa:	f000 fcbd 	bl	7e78 <_vfprintf_r+0xdc8>
    74fe:	2300      	movs	r3, #0
    7500:	4698      	mov	r8, r3
    7502:	2207      	movs	r2, #7
    7504:	46b4      	mov	ip, r6
    7506:	ab32      	add	r3, sp, #200	; 0xc8
    7508:	4692      	mov	sl, r2
    750a:	001c      	movs	r4, r3
    750c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    750e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7510:	0758      	lsls	r0, r3, #29
    7512:	08d6      	lsrs	r6, r2, #3
    7514:	4651      	mov	r1, sl
    7516:	08dd      	lsrs	r5, r3, #3
    7518:	4330      	orrs	r0, r6
    751a:	002b      	movs	r3, r5
    751c:	0005      	movs	r5, r0
    751e:	4011      	ands	r1, r2
    7520:	3c01      	subs	r4, #1
    7522:	3130      	adds	r1, #48	; 0x30
    7524:	7021      	strb	r1, [r4, #0]
    7526:	0002      	movs	r2, r0
    7528:	431d      	orrs	r5, r3
    752a:	d1f1      	bne.n	7510 <_vfprintf_r+0x460>
    752c:	920e      	str	r2, [sp, #56]	; 0x38
    752e:	930f      	str	r3, [sp, #60]	; 0x3c
    7530:	9a08      	ldr	r2, [sp, #32]
    7532:	9412      	str	r4, [sp, #72]	; 0x48
    7534:	4666      	mov	r6, ip
    7536:	07d2      	lsls	r2, r2, #31
    7538:	d400      	bmi.n	753c <_vfprintf_r+0x48c>
    753a:	e15b      	b.n	77f4 <_vfprintf_r+0x744>
    753c:	2930      	cmp	r1, #48	; 0x30
    753e:	d101      	bne.n	7544 <_vfprintf_r+0x494>
    7540:	f000 ff99 	bl	8476 <_vfprintf_r+0x13c6>
    7544:	2330      	movs	r3, #48	; 0x30
    7546:	9d12      	ldr	r5, [sp, #72]	; 0x48
    7548:	3d01      	subs	r5, #1
    754a:	702b      	strb	r3, [r5, #0]
    754c:	ab32      	add	r3, sp, #200	; 0xc8
    754e:	1b5b      	subs	r3, r3, r5
    7550:	9310      	str	r3, [sp, #64]	; 0x40
    7552:	9512      	str	r5, [sp, #72]	; 0x48
    7554:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7556:	1e13      	subs	r3, r2, #0
    7558:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    755a:	4293      	cmp	r3, r2
    755c:	da00      	bge.n	7560 <_vfprintf_r+0x4b0>
    755e:	0013      	movs	r3, r2
    7560:	9309      	str	r3, [sp, #36]	; 0x24
    7562:	2300      	movs	r3, #0
    7564:	9315      	str	r3, [sp, #84]	; 0x54
    7566:	4643      	mov	r3, r8
    7568:	2b00      	cmp	r3, #0
    756a:	d002      	beq.n	7572 <_vfprintf_r+0x4c2>
    756c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    756e:	3301      	adds	r3, #1
    7570:	9309      	str	r3, [sp, #36]	; 0x24
    7572:	2302      	movs	r3, #2
    7574:	9a08      	ldr	r2, [sp, #32]
    7576:	401a      	ands	r2, r3
    7578:	4692      	mov	sl, r2
    757a:	d002      	beq.n	7582 <_vfprintf_r+0x4d2>
    757c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    757e:	3302      	adds	r3, #2
    7580:	9309      	str	r3, [sp, #36]	; 0x24
    7582:	2384      	movs	r3, #132	; 0x84
    7584:	9a08      	ldr	r2, [sp, #32]
    7586:	401a      	ands	r2, r3
    7588:	4691      	mov	r9, r2
    758a:	d000      	beq.n	758e <_vfprintf_r+0x4de>
    758c:	e1c7      	b.n	791e <_vfprintf_r+0x86e>
    758e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7590:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7592:	1a9c      	subs	r4, r3, r2
    7594:	2c00      	cmp	r4, #0
    7596:	dc00      	bgt.n	759a <_vfprintf_r+0x4ea>
    7598:	e1c1      	b.n	791e <_vfprintf_r+0x86e>
    759a:	4969      	ldr	r1, [pc, #420]	; (7740 <_vfprintf_r+0x690>)
    759c:	68ba      	ldr	r2, [r7, #8]
    759e:	687b      	ldr	r3, [r7, #4]
    75a0:	4688      	mov	r8, r1
    75a2:	2c10      	cmp	r4, #16
    75a4:	dd21      	ble.n	75ea <_vfprintf_r+0x53a>
    75a6:	0031      	movs	r1, r6
    75a8:	2510      	movs	r5, #16
    75aa:	465e      	mov	r6, fp
    75ac:	e003      	b.n	75b6 <_vfprintf_r+0x506>
    75ae:	3c10      	subs	r4, #16
    75b0:	3108      	adds	r1, #8
    75b2:	2c10      	cmp	r4, #16
    75b4:	dd17      	ble.n	75e6 <_vfprintf_r+0x536>
    75b6:	4640      	mov	r0, r8
    75b8:	3210      	adds	r2, #16
    75ba:	3301      	adds	r3, #1
    75bc:	6008      	str	r0, [r1, #0]
    75be:	604d      	str	r5, [r1, #4]
    75c0:	60ba      	str	r2, [r7, #8]
    75c2:	607b      	str	r3, [r7, #4]
    75c4:	2b07      	cmp	r3, #7
    75c6:	ddf2      	ble.n	75ae <_vfprintf_r+0x4fe>
    75c8:	003a      	movs	r2, r7
    75ca:	0031      	movs	r1, r6
    75cc:	9807      	ldr	r0, [sp, #28]
    75ce:	f004 f897 	bl	b700 <__sprint_r>
    75d2:	2800      	cmp	r0, #0
    75d4:	d001      	beq.n	75da <_vfprintf_r+0x52a>
    75d6:	f000 fc32 	bl	7e3e <_vfprintf_r+0xd8e>
    75da:	3c10      	subs	r4, #16
    75dc:	68ba      	ldr	r2, [r7, #8]
    75de:	687b      	ldr	r3, [r7, #4]
    75e0:	a932      	add	r1, sp, #200	; 0xc8
    75e2:	2c10      	cmp	r4, #16
    75e4:	dce7      	bgt.n	75b6 <_vfprintf_r+0x506>
    75e6:	46b3      	mov	fp, r6
    75e8:	000e      	movs	r6, r1
    75ea:	4641      	mov	r1, r8
    75ec:	6074      	str	r4, [r6, #4]
    75ee:	3301      	adds	r3, #1
    75f0:	18a4      	adds	r4, r4, r2
    75f2:	6031      	str	r1, [r6, #0]
    75f4:	60bc      	str	r4, [r7, #8]
    75f6:	607b      	str	r3, [r7, #4]
    75f8:	2b07      	cmp	r3, #7
    75fa:	dd01      	ble.n	7600 <_vfprintf_r+0x550>
    75fc:	f000 fc11 	bl	7e22 <_vfprintf_r+0xd72>
    7600:	ab16      	add	r3, sp, #88	; 0x58
    7602:	7fdb      	ldrb	r3, [r3, #31]
    7604:	3608      	adds	r6, #8
    7606:	4698      	mov	r8, r3
    7608:	e18a      	b.n	7920 <_vfprintf_r+0x870>
    760a:	9313      	str	r3, [sp, #76]	; 0x4c
    760c:	910a      	str	r1, [sp, #40]	; 0x28
    760e:	2800      	cmp	r0, #0
    7610:	d001      	beq.n	7616 <_vfprintf_r+0x566>
    7612:	f001 f938 	bl	8886 <_vfprintf_r+0x17d6>
    7616:	2310      	movs	r3, #16
    7618:	9a08      	ldr	r2, [sp, #32]
    761a:	431a      	orrs	r2, r3
    761c:	9208      	str	r2, [sp, #32]
    761e:	2320      	movs	r3, #32
    7620:	9908      	ldr	r1, [sp, #32]
    7622:	400b      	ands	r3, r1
    7624:	d100      	bne.n	7628 <_vfprintf_r+0x578>
    7626:	e35e      	b.n	7ce6 <_vfprintf_r+0xc36>
    7628:	2207      	movs	r2, #7
    762a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    762c:	3307      	adds	r3, #7
    762e:	4393      	bics	r3, r2
    7630:	3201      	adds	r2, #1
    7632:	4694      	mov	ip, r2
    7634:	449c      	add	ip, r3
    7636:	4662      	mov	r2, ip
    7638:	685c      	ldr	r4, [r3, #4]
    763a:	681b      	ldr	r3, [r3, #0]
    763c:	0025      	movs	r5, r4
    763e:	001c      	movs	r4, r3
    7640:	2300      	movs	r3, #0
    7642:	9211      	str	r2, [sp, #68]	; 0x44
    7644:	aa16      	add	r2, sp, #88	; 0x58
    7646:	77d3      	strb	r3, [r2, #31]
    7648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    764a:	940e      	str	r4, [sp, #56]	; 0x38
    764c:	950f      	str	r5, [sp, #60]	; 0x3c
    764e:	2b00      	cmp	r3, #0
    7650:	da01      	bge.n	7656 <_vfprintf_r+0x5a6>
    7652:	f000 fc7c 	bl	7f4e <_vfprintf_r+0xe9e>
    7656:	2380      	movs	r3, #128	; 0x80
    7658:	4399      	bics	r1, r3
    765a:	9108      	str	r1, [sp, #32]
    765c:	0021      	movs	r1, r4
    765e:	4329      	orrs	r1, r5
    7660:	1e0b      	subs	r3, r1, #0
    7662:	d100      	bne.n	7666 <_vfprintf_r+0x5b6>
    7664:	e359      	b.n	7d1a <_vfprintf_r+0xc6a>
    7666:	2300      	movs	r3, #0
    7668:	4698      	mov	r8, r3
    766a:	e69a      	b.n	73a2 <_vfprintf_r+0x2f2>
    766c:	9313      	str	r3, [sp, #76]	; 0x4c
    766e:	910a      	str	r1, [sp, #40]	; 0x28
    7670:	2800      	cmp	r0, #0
    7672:	d100      	bne.n	7676 <_vfprintf_r+0x5c6>
    7674:	e71e      	b.n	74b4 <_vfprintf_r+0x404>
    7676:	ab16      	add	r3, sp, #88	; 0x58
    7678:	77dc      	strb	r4, [r3, #31]
    767a:	e71b      	b.n	74b4 <_vfprintf_r+0x404>
    767c:	2220      	movs	r2, #32
    767e:	9b08      	ldr	r3, [sp, #32]
    7680:	4313      	orrs	r3, r2
    7682:	9308      	str	r3, [sp, #32]
    7684:	780b      	ldrb	r3, [r1, #0]
    7686:	e596      	b.n	71b6 <_vfprintf_r+0x106>
    7688:	9313      	str	r3, [sp, #76]	; 0x4c
    768a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    768c:	910a      	str	r1, [sp, #40]	; 0x28
    768e:	1d1c      	adds	r4, r3, #4
    7690:	681b      	ldr	r3, [r3, #0]
    7692:	a916      	add	r1, sp, #88	; 0x58
    7694:	001a      	movs	r2, r3
    7696:	9312      	str	r3, [sp, #72]	; 0x48
    7698:	2300      	movs	r3, #0
    769a:	77cb      	strb	r3, [r1, #31]
    769c:	2a00      	cmp	r2, #0
    769e:	d101      	bne.n	76a4 <_vfprintf_r+0x5f4>
    76a0:	f000 ffc6 	bl	8630 <_vfprintf_r+0x1580>
    76a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    76a6:	2b00      	cmp	r3, #0
    76a8:	da01      	bge.n	76ae <_vfprintf_r+0x5fe>
    76aa:	f000 feea 	bl	8482 <_vfprintf_r+0x13d2>
    76ae:	001a      	movs	r2, r3
    76b0:	2100      	movs	r1, #0
    76b2:	9812      	ldr	r0, [sp, #72]	; 0x48
    76b4:	f003 f99a 	bl	a9ec <memchr>
    76b8:	2800      	cmp	r0, #0
    76ba:	d101      	bne.n	76c0 <_vfprintf_r+0x610>
    76bc:	f001 f840 	bl	8740 <_vfprintf_r+0x1690>
    76c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    76c2:	1ac3      	subs	r3, r0, r3
    76c4:	001a      	movs	r2, r3
    76c6:	9310      	str	r3, [sp, #64]	; 0x40
    76c8:	43db      	mvns	r3, r3
    76ca:	17db      	asrs	r3, r3, #31
    76cc:	401a      	ands	r2, r3
    76ce:	2300      	movs	r3, #0
    76d0:	a916      	add	r1, sp, #88	; 0x58
    76d2:	7fc9      	ldrb	r1, [r1, #31]
    76d4:	9209      	str	r2, [sp, #36]	; 0x24
    76d6:	4688      	mov	r8, r1
    76d8:	9411      	str	r4, [sp, #68]	; 0x44
    76da:	930b      	str	r3, [sp, #44]	; 0x2c
    76dc:	9315      	str	r3, [sp, #84]	; 0x54
    76de:	e742      	b.n	7566 <_vfprintf_r+0x4b6>
    76e0:	9313      	str	r3, [sp, #76]	; 0x4c
    76e2:	910a      	str	r1, [sp, #40]	; 0x28
    76e4:	2800      	cmp	r0, #0
    76e6:	d100      	bne.n	76ea <_vfprintf_r+0x63a>
    76e8:	e632      	b.n	7350 <_vfprintf_r+0x2a0>
    76ea:	ab16      	add	r3, sp, #88	; 0x58
    76ec:	77dc      	strb	r4, [r3, #31]
    76ee:	e62f      	b.n	7350 <_vfprintf_r+0x2a0>
    76f0:	4652      	mov	r2, sl
    76f2:	9b08      	ldr	r3, [sp, #32]
    76f4:	4313      	orrs	r3, r2
    76f6:	9308      	str	r3, [sp, #32]
    76f8:	780b      	ldrb	r3, [r1, #0]
    76fa:	e55c      	b.n	71b6 <_vfprintf_r+0x106>
    76fc:	780b      	ldrb	r3, [r1, #0]
    76fe:	2b6c      	cmp	r3, #108	; 0x6c
    7700:	d101      	bne.n	7706 <_vfprintf_r+0x656>
    7702:	f000 fea4 	bl	844e <_vfprintf_r+0x139e>
    7706:	2510      	movs	r5, #16
    7708:	9a08      	ldr	r2, [sp, #32]
    770a:	432a      	orrs	r2, r5
    770c:	9208      	str	r2, [sp, #32]
    770e:	e552      	b.n	71b6 <_vfprintf_r+0x106>
    7710:	910a      	str	r1, [sp, #40]	; 0x28
    7712:	2800      	cmp	r0, #0
    7714:	d001      	beq.n	771a <_vfprintf_r+0x66a>
    7716:	f001 f8cb 	bl	88b0 <_vfprintf_r+0x1800>
    771a:	9b08      	ldr	r3, [sp, #32]
    771c:	069b      	lsls	r3, r3, #26
    771e:	d401      	bmi.n	7724 <_vfprintf_r+0x674>
    7720:	f000 fd85 	bl	822e <_vfprintf_r+0x117e>
    7724:	9911      	ldr	r1, [sp, #68]	; 0x44
    7726:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7728:	680b      	ldr	r3, [r1, #0]
    772a:	601a      	str	r2, [r3, #0]
    772c:	17d2      	asrs	r2, r2, #31
    772e:	605a      	str	r2, [r3, #4]
    7730:	000b      	movs	r3, r1
    7732:	3304      	adds	r3, #4
    7734:	9311      	str	r3, [sp, #68]	; 0x44
    7736:	e503      	b.n	7140 <_vfprintf_r+0x90>
    7738:	7fefffff 	.word	0x7fefffff
    773c:	0000df78 	.word	0x0000df78
    7740:	0000dfb8 	.word	0x0000dfb8
    7744:	9313      	str	r3, [sp, #76]	; 0x4c
    7746:	910a      	str	r1, [sp, #40]	; 0x28
    7748:	2800      	cmp	r0, #0
    774a:	d001      	beq.n	7750 <_vfprintf_r+0x6a0>
    774c:	f001 f89f 	bl	888e <_vfprintf_r+0x17de>
    7750:	9b08      	ldr	r3, [sp, #32]
    7752:	49b5      	ldr	r1, [pc, #724]	; (7a28 <_vfprintf_r+0x978>)
    7754:	069b      	lsls	r3, r3, #26
    7756:	d563      	bpl.n	7820 <_vfprintf_r+0x770>
    7758:	2207      	movs	r2, #7
    775a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    775c:	3307      	adds	r3, #7
    775e:	4393      	bics	r3, r2
    7760:	3201      	adds	r2, #1
    7762:	4694      	mov	ip, r2
    7764:	449c      	add	ip, r3
    7766:	4662      	mov	r2, ip
    7768:	685c      	ldr	r4, [r3, #4]
    776a:	681b      	ldr	r3, [r3, #0]
    776c:	930e      	str	r3, [sp, #56]	; 0x38
    776e:	940f      	str	r4, [sp, #60]	; 0x3c
    7770:	2301      	movs	r3, #1
    7772:	9211      	str	r2, [sp, #68]	; 0x44
    7774:	9a08      	ldr	r2, [sp, #32]
    7776:	4013      	ands	r3, r2
    7778:	d065      	beq.n	7846 <_vfprintf_r+0x796>
    777a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    777c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    777e:	0010      	movs	r0, r2
    7780:	4318      	orrs	r0, r3
    7782:	d101      	bne.n	7788 <_vfprintf_r+0x6d8>
    7784:	f000 fd6c 	bl	8260 <_vfprintf_r+0x11b0>
    7788:	2230      	movs	r2, #48	; 0x30
    778a:	ab1e      	add	r3, sp, #120	; 0x78
    778c:	701a      	strb	r2, [r3, #0]
    778e:	204c      	movs	r0, #76	; 0x4c
    7790:	466a      	mov	r2, sp
    7792:	1812      	adds	r2, r2, r0
    7794:	7812      	ldrb	r2, [r2, #0]
    7796:	9c08      	ldr	r4, [sp, #32]
    7798:	705a      	strb	r2, [r3, #1]
    779a:	2200      	movs	r2, #0
    779c:	2302      	movs	r3, #2
    779e:	0020      	movs	r0, r4
    77a0:	ad16      	add	r5, sp, #88	; 0x58
    77a2:	77ea      	strb	r2, [r5, #31]
    77a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    77a6:	4318      	orrs	r0, r3
    77a8:	2a00      	cmp	r2, #0
    77aa:	da01      	bge.n	77b0 <_vfprintf_r+0x700>
    77ac:	f000 ff82 	bl	86b4 <_vfprintf_r+0x1604>
    77b0:	2280      	movs	r2, #128	; 0x80
    77b2:	0020      	movs	r0, r4
    77b4:	4390      	bics	r0, r2
    77b6:	0002      	movs	r2, r0
    77b8:	431a      	orrs	r2, r3
    77ba:	2300      	movs	r3, #0
    77bc:	4698      	mov	r8, r3
    77be:	9208      	str	r2, [sp, #32]
    77c0:	200f      	movs	r0, #15
    77c2:	468c      	mov	ip, r1
    77c4:	46b1      	mov	r9, r6
    77c6:	ab32      	add	r3, sp, #200	; 0xc8
    77c8:	001c      	movs	r4, r3
    77ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    77cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    77ce:	0001      	movs	r1, r0
    77d0:	4665      	mov	r5, ip
    77d2:	4011      	ands	r1, r2
    77d4:	5c69      	ldrb	r1, [r5, r1]
    77d6:	3c01      	subs	r4, #1
    77d8:	071e      	lsls	r6, r3, #28
    77da:	7021      	strb	r1, [r4, #0]
    77dc:	0911      	lsrs	r1, r2, #4
    77de:	091d      	lsrs	r5, r3, #4
    77e0:	430e      	orrs	r6, r1
    77e2:	002b      	movs	r3, r5
    77e4:	0035      	movs	r5, r6
    77e6:	0032      	movs	r2, r6
    77e8:	431d      	orrs	r5, r3
    77ea:	d1f0      	bne.n	77ce <_vfprintf_r+0x71e>
    77ec:	464e      	mov	r6, r9
    77ee:	920e      	str	r2, [sp, #56]	; 0x38
    77f0:	930f      	str	r3, [sp, #60]	; 0x3c
    77f2:	9412      	str	r4, [sp, #72]	; 0x48
    77f4:	ab32      	add	r3, sp, #200	; 0xc8
    77f6:	1b1b      	subs	r3, r3, r4
    77f8:	9310      	str	r3, [sp, #64]	; 0x40
    77fa:	e6ab      	b.n	7554 <_vfprintf_r+0x4a4>
    77fc:	9313      	str	r3, [sp, #76]	; 0x4c
    77fe:	910a      	str	r1, [sp, #40]	; 0x28
    7800:	2800      	cmp	r0, #0
    7802:	d100      	bne.n	7806 <_vfprintf_r+0x756>
    7804:	e70b      	b.n	761e <_vfprintf_r+0x56e>
    7806:	ab16      	add	r3, sp, #88	; 0x58
    7808:	77dc      	strb	r4, [r3, #31]
    780a:	e708      	b.n	761e <_vfprintf_r+0x56e>
    780c:	9313      	str	r3, [sp, #76]	; 0x4c
    780e:	910a      	str	r1, [sp, #40]	; 0x28
    7810:	2800      	cmp	r0, #0
    7812:	d001      	beq.n	7818 <_vfprintf_r+0x768>
    7814:	f001 f843 	bl	889e <_vfprintf_r+0x17ee>
    7818:	4984      	ldr	r1, [pc, #528]	; (7a2c <_vfprintf_r+0x97c>)
    781a:	9b08      	ldr	r3, [sp, #32]
    781c:	069b      	lsls	r3, r3, #26
    781e:	d49b      	bmi.n	7758 <_vfprintf_r+0x6a8>
    7820:	9b08      	ldr	r3, [sp, #32]
    7822:	06db      	lsls	r3, r3, #27
    7824:	d404      	bmi.n	7830 <_vfprintf_r+0x780>
    7826:	9b08      	ldr	r3, [sp, #32]
    7828:	065b      	lsls	r3, r3, #25
    782a:	d501      	bpl.n	7830 <_vfprintf_r+0x780>
    782c:	f000 fdcb 	bl	83c6 <_vfprintf_r+0x1316>
    7830:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7832:	681a      	ldr	r2, [r3, #0]
    7834:	920e      	str	r2, [sp, #56]	; 0x38
    7836:	2200      	movs	r2, #0
    7838:	3304      	adds	r3, #4
    783a:	9311      	str	r3, [sp, #68]	; 0x44
    783c:	2301      	movs	r3, #1
    783e:	920f      	str	r2, [sp, #60]	; 0x3c
    7840:	9a08      	ldr	r2, [sp, #32]
    7842:	4013      	ands	r3, r2
    7844:	d199      	bne.n	777a <_vfprintf_r+0x6ca>
    7846:	a816      	add	r0, sp, #88	; 0x58
    7848:	77c3      	strb	r3, [r0, #31]
    784a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    784c:	2b00      	cmp	r3, #0
    784e:	da01      	bge.n	7854 <_vfprintf_r+0x7a4>
    7850:	f000 fd6d 	bl	832e <_vfprintf_r+0x127e>
    7854:	2380      	movs	r3, #128	; 0x80
    7856:	439a      	bics	r2, r3
    7858:	9208      	str	r2, [sp, #32]
    785a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    785c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    785e:	0010      	movs	r0, r2
    7860:	4318      	orrs	r0, r3
    7862:	d159      	bne.n	7918 <_vfprintf_r+0x868>
    7864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7866:	4698      	mov	r8, r3
    7868:	2b00      	cmp	r3, #0
    786a:	d000      	beq.n	786e <_vfprintf_r+0x7be>
    786c:	e4e0      	b.n	7230 <_vfprintf_r+0x180>
    786e:	2300      	movs	r3, #0
    7870:	930b      	str	r3, [sp, #44]	; 0x2c
    7872:	9310      	str	r3, [sp, #64]	; 0x40
    7874:	ab32      	add	r3, sp, #200	; 0xc8
    7876:	9312      	str	r3, [sp, #72]	; 0x48
    7878:	e66c      	b.n	7554 <_vfprintf_r+0x4a4>
    787a:	780b      	ldrb	r3, [r1, #0]
    787c:	2c00      	cmp	r4, #0
    787e:	d000      	beq.n	7882 <_vfprintf_r+0x7d2>
    7880:	e499      	b.n	71b6 <_vfprintf_r+0x106>
    7882:	2001      	movs	r0, #1
    7884:	3420      	adds	r4, #32
    7886:	e496      	b.n	71b6 <_vfprintf_r+0x106>
    7888:	2301      	movs	r3, #1
    788a:	9a08      	ldr	r2, [sp, #32]
    788c:	431a      	orrs	r2, r3
    788e:	9208      	str	r2, [sp, #32]
    7890:	780b      	ldrb	r3, [r1, #0]
    7892:	e490      	b.n	71b6 <_vfprintf_r+0x106>
    7894:	780b      	ldrb	r3, [r1, #0]
    7896:	2001      	movs	r0, #1
    7898:	242b      	movs	r4, #43	; 0x2b
    789a:	e48c      	b.n	71b6 <_vfprintf_r+0x106>
    789c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    789e:	9313      	str	r3, [sp, #76]	; 0x4c
    78a0:	6813      	ldr	r3, [r2, #0]
    78a2:	910a      	str	r1, [sp, #40]	; 0x28
    78a4:	9309      	str	r3, [sp, #36]	; 0x24
    78a6:	2124      	movs	r1, #36	; 0x24
    78a8:	466b      	mov	r3, sp
    78aa:	185b      	adds	r3, r3, r1
    78ac:	781b      	ldrb	r3, [r3, #0]
    78ae:	ad28      	add	r5, sp, #160	; 0xa0
    78b0:	702b      	strb	r3, [r5, #0]
    78b2:	2300      	movs	r3, #0
    78b4:	a916      	add	r1, sp, #88	; 0x58
    78b6:	77cb      	strb	r3, [r1, #31]
    78b8:	0013      	movs	r3, r2
    78ba:	3304      	adds	r3, #4
    78bc:	9311      	str	r3, [sp, #68]	; 0x44
    78be:	2300      	movs	r3, #0
    78c0:	4698      	mov	r8, r3
    78c2:	3301      	adds	r3, #1
    78c4:	9309      	str	r3, [sp, #36]	; 0x24
    78c6:	9310      	str	r3, [sp, #64]	; 0x40
    78c8:	2300      	movs	r3, #0
    78ca:	9512      	str	r5, [sp, #72]	; 0x48
    78cc:	930b      	str	r3, [sp, #44]	; 0x2c
    78ce:	9315      	str	r3, [sp, #84]	; 0x54
    78d0:	e64f      	b.n	7572 <_vfprintf_r+0x4c2>
    78d2:	2300      	movs	r3, #0
    78d4:	4698      	mov	r8, r3
    78d6:	3378      	adds	r3, #120	; 0x78
    78d8:	4954      	ldr	r1, [pc, #336]	; (7a2c <_vfprintf_r+0x97c>)
    78da:	9313      	str	r3, [sp, #76]	; 0x4c
    78dc:	e770      	b.n	77c0 <_vfprintf_r+0x710>
    78de:	9313      	str	r3, [sp, #76]	; 0x4c
    78e0:	910a      	str	r1, [sp, #40]	; 0x28
    78e2:	2800      	cmp	r0, #0
    78e4:	d001      	beq.n	78ea <_vfprintf_r+0x83a>
    78e6:	f000 ffdf 	bl	88a8 <_vfprintf_r+0x17f8>
    78ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    78ec:	2b00      	cmp	r3, #0
    78ee:	d101      	bne.n	78f4 <_vfprintf_r+0x844>
    78f0:	f000 fd28 	bl	8344 <_vfprintf_r+0x1294>
    78f4:	ad28      	add	r5, sp, #160	; 0xa0
    78f6:	702b      	strb	r3, [r5, #0]
    78f8:	2300      	movs	r3, #0
    78fa:	aa16      	add	r2, sp, #88	; 0x58
    78fc:	77d3      	strb	r3, [r2, #31]
    78fe:	e7df      	b.n	78c0 <_vfprintf_r+0x810>
    7900:	2378      	movs	r3, #120	; 0x78
    7902:	9108      	str	r1, [sp, #32]
    7904:	4949      	ldr	r1, [pc, #292]	; (7a2c <_vfprintf_r+0x97c>)
    7906:	9313      	str	r3, [sp, #76]	; 0x4c
    7908:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    790a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    790c:	0014      	movs	r4, r2
    790e:	431c      	orrs	r4, r3
    7910:	1e23      	subs	r3, r4, #0
    7912:	9011      	str	r0, [sp, #68]	; 0x44
    7914:	d100      	bne.n	7918 <_vfprintf_r+0x868>
    7916:	e48c      	b.n	7232 <_vfprintf_r+0x182>
    7918:	2300      	movs	r3, #0
    791a:	4698      	mov	r8, r3
    791c:	e750      	b.n	77c0 <_vfprintf_r+0x710>
    791e:	68bc      	ldr	r4, [r7, #8]
    7920:	4643      	mov	r3, r8
    7922:	2b00      	cmp	r3, #0
    7924:	d00f      	beq.n	7946 <_vfprintf_r+0x896>
    7926:	aa16      	add	r2, sp, #88	; 0x58
    7928:	231f      	movs	r3, #31
    792a:	4694      	mov	ip, r2
    792c:	4463      	add	r3, ip
    792e:	6033      	str	r3, [r6, #0]
    7930:	2301      	movs	r3, #1
    7932:	6073      	str	r3, [r6, #4]
    7934:	687b      	ldr	r3, [r7, #4]
    7936:	3401      	adds	r4, #1
    7938:	3301      	adds	r3, #1
    793a:	60bc      	str	r4, [r7, #8]
    793c:	607b      	str	r3, [r7, #4]
    793e:	2b07      	cmp	r3, #7
    7940:	dd00      	ble.n	7944 <_vfprintf_r+0x894>
    7942:	e20c      	b.n	7d5e <_vfprintf_r+0xcae>
    7944:	3608      	adds	r6, #8
    7946:	4653      	mov	r3, sl
    7948:	2b00      	cmp	r3, #0
    794a:	d00c      	beq.n	7966 <_vfprintf_r+0x8b6>
    794c:	ab1e      	add	r3, sp, #120	; 0x78
    794e:	6033      	str	r3, [r6, #0]
    7950:	2302      	movs	r3, #2
    7952:	6073      	str	r3, [r6, #4]
    7954:	687b      	ldr	r3, [r7, #4]
    7956:	3402      	adds	r4, #2
    7958:	3301      	adds	r3, #1
    795a:	60bc      	str	r4, [r7, #8]
    795c:	607b      	str	r3, [r7, #4]
    795e:	2b07      	cmp	r3, #7
    7960:	dd00      	ble.n	7964 <_vfprintf_r+0x8b4>
    7962:	e206      	b.n	7d72 <_vfprintf_r+0xcc2>
    7964:	3608      	adds	r6, #8
    7966:	464b      	mov	r3, r9
    7968:	2b80      	cmp	r3, #128	; 0x80
    796a:	d100      	bne.n	796e <_vfprintf_r+0x8be>
    796c:	e152      	b.n	7c14 <_vfprintf_r+0xb64>
    796e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7970:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7972:	1a9d      	subs	r5, r3, r2
    7974:	2d00      	cmp	r5, #0
    7976:	dd32      	ble.n	79de <_vfprintf_r+0x92e>
    7978:	4a2d      	ldr	r2, [pc, #180]	; (7a30 <_vfprintf_r+0x980>)
    797a:	687b      	ldr	r3, [r7, #4]
    797c:	4691      	mov	r9, r2
    797e:	2d10      	cmp	r5, #16
    7980:	dd22      	ble.n	79c8 <_vfprintf_r+0x918>
    7982:	2210      	movs	r2, #16
    7984:	4692      	mov	sl, r2
    7986:	0022      	movs	r2, r4
    7988:	465c      	mov	r4, fp
    798a:	e003      	b.n	7994 <_vfprintf_r+0x8e4>
    798c:	3d10      	subs	r5, #16
    798e:	3608      	adds	r6, #8
    7990:	2d10      	cmp	r5, #16
    7992:	dd17      	ble.n	79c4 <_vfprintf_r+0x914>
    7994:	4649      	mov	r1, r9
    7996:	6031      	str	r1, [r6, #0]
    7998:	4651      	mov	r1, sl
    799a:	3210      	adds	r2, #16
    799c:	3301      	adds	r3, #1
    799e:	6071      	str	r1, [r6, #4]
    79a0:	60ba      	str	r2, [r7, #8]
    79a2:	607b      	str	r3, [r7, #4]
    79a4:	2b07      	cmp	r3, #7
    79a6:	ddf1      	ble.n	798c <_vfprintf_r+0x8dc>
    79a8:	003a      	movs	r2, r7
    79aa:	0021      	movs	r1, r4
    79ac:	9807      	ldr	r0, [sp, #28]
    79ae:	f003 fea7 	bl	b700 <__sprint_r>
    79b2:	2800      	cmp	r0, #0
    79b4:	d000      	beq.n	79b8 <_vfprintf_r+0x908>
    79b6:	e166      	b.n	7c86 <_vfprintf_r+0xbd6>
    79b8:	3d10      	subs	r5, #16
    79ba:	68ba      	ldr	r2, [r7, #8]
    79bc:	687b      	ldr	r3, [r7, #4]
    79be:	ae32      	add	r6, sp, #200	; 0xc8
    79c0:	2d10      	cmp	r5, #16
    79c2:	dce7      	bgt.n	7994 <_vfprintf_r+0x8e4>
    79c4:	46a3      	mov	fp, r4
    79c6:	0014      	movs	r4, r2
    79c8:	464a      	mov	r2, r9
    79ca:	1964      	adds	r4, r4, r5
    79cc:	3301      	adds	r3, #1
    79ce:	6032      	str	r2, [r6, #0]
    79d0:	6075      	str	r5, [r6, #4]
    79d2:	60bc      	str	r4, [r7, #8]
    79d4:	607b      	str	r3, [r7, #4]
    79d6:	2b07      	cmp	r3, #7
    79d8:	dd00      	ble.n	79dc <_vfprintf_r+0x92c>
    79da:	e1b6      	b.n	7d4a <_vfprintf_r+0xc9a>
    79dc:	3608      	adds	r6, #8
    79de:	9b08      	ldr	r3, [sp, #32]
    79e0:	05db      	lsls	r3, r3, #23
    79e2:	d500      	bpl.n	79e6 <_vfprintf_r+0x936>
    79e4:	e0ba      	b.n	7b5c <_vfprintf_r+0xaac>
    79e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    79e8:	6033      	str	r3, [r6, #0]
    79ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
    79ec:	469c      	mov	ip, r3
    79ee:	6073      	str	r3, [r6, #4]
    79f0:	687b      	ldr	r3, [r7, #4]
    79f2:	4464      	add	r4, ip
    79f4:	3301      	adds	r3, #1
    79f6:	60bc      	str	r4, [r7, #8]
    79f8:	607b      	str	r3, [r7, #4]
    79fa:	2b07      	cmp	r3, #7
    79fc:	dd00      	ble.n	7a00 <_vfprintf_r+0x950>
    79fe:	e0a2      	b.n	7b46 <_vfprintf_r+0xa96>
    7a00:	3608      	adds	r6, #8
    7a02:	9b08      	ldr	r3, [sp, #32]
    7a04:	075b      	lsls	r3, r3, #29
    7a06:	d546      	bpl.n	7a96 <_vfprintf_r+0x9e6>
    7a08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7a0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7a0c:	1a9d      	subs	r5, r3, r2
    7a0e:	2d00      	cmp	r5, #0
    7a10:	dd41      	ble.n	7a96 <_vfprintf_r+0x9e6>
    7a12:	4a08      	ldr	r2, [pc, #32]	; (7a34 <_vfprintf_r+0x984>)
    7a14:	687b      	ldr	r3, [r7, #4]
    7a16:	4690      	mov	r8, r2
    7a18:	2d10      	cmp	r5, #16
    7a1a:	dd2b      	ble.n	7a74 <_vfprintf_r+0x9c4>
    7a1c:	2210      	movs	r2, #16
    7a1e:	4691      	mov	r9, r2
    7a20:	0022      	movs	r2, r4
    7a22:	465c      	mov	r4, fp
    7a24:	e00c      	b.n	7a40 <_vfprintf_r+0x990>
    7a26:	46c0      	nop			; (mov r8, r8)
    7a28:	0000df84 	.word	0x0000df84
    7a2c:	0000df98 	.word	0x0000df98
    7a30:	0000df64 	.word	0x0000df64
    7a34:	0000dfb8 	.word	0x0000dfb8
    7a38:	3d10      	subs	r5, #16
    7a3a:	3608      	adds	r6, #8
    7a3c:	2d10      	cmp	r5, #16
    7a3e:	dd17      	ble.n	7a70 <_vfprintf_r+0x9c0>
    7a40:	4641      	mov	r1, r8
    7a42:	6031      	str	r1, [r6, #0]
    7a44:	4649      	mov	r1, r9
    7a46:	3210      	adds	r2, #16
    7a48:	3301      	adds	r3, #1
    7a4a:	6071      	str	r1, [r6, #4]
    7a4c:	60ba      	str	r2, [r7, #8]
    7a4e:	607b      	str	r3, [r7, #4]
    7a50:	2b07      	cmp	r3, #7
    7a52:	ddf1      	ble.n	7a38 <_vfprintf_r+0x988>
    7a54:	003a      	movs	r2, r7
    7a56:	0021      	movs	r1, r4
    7a58:	9807      	ldr	r0, [sp, #28]
    7a5a:	f003 fe51 	bl	b700 <__sprint_r>
    7a5e:	2800      	cmp	r0, #0
    7a60:	d000      	beq.n	7a64 <_vfprintf_r+0x9b4>
    7a62:	e110      	b.n	7c86 <_vfprintf_r+0xbd6>
    7a64:	3d10      	subs	r5, #16
    7a66:	68ba      	ldr	r2, [r7, #8]
    7a68:	687b      	ldr	r3, [r7, #4]
    7a6a:	ae32      	add	r6, sp, #200	; 0xc8
    7a6c:	2d10      	cmp	r5, #16
    7a6e:	dce7      	bgt.n	7a40 <_vfprintf_r+0x990>
    7a70:	46a3      	mov	fp, r4
    7a72:	0014      	movs	r4, r2
    7a74:	4642      	mov	r2, r8
    7a76:	1964      	adds	r4, r4, r5
    7a78:	3301      	adds	r3, #1
    7a7a:	c624      	stmia	r6!, {r2, r5}
    7a7c:	60bc      	str	r4, [r7, #8]
    7a7e:	607b      	str	r3, [r7, #4]
    7a80:	2b07      	cmp	r3, #7
    7a82:	dd08      	ble.n	7a96 <_vfprintf_r+0x9e6>
    7a84:	003a      	movs	r2, r7
    7a86:	4659      	mov	r1, fp
    7a88:	9807      	ldr	r0, [sp, #28]
    7a8a:	f003 fe39 	bl	b700 <__sprint_r>
    7a8e:	2800      	cmp	r0, #0
    7a90:	d000      	beq.n	7a94 <_vfprintf_r+0x9e4>
    7a92:	e126      	b.n	7ce2 <_vfprintf_r+0xc32>
    7a94:	68bc      	ldr	r4, [r7, #8]
    7a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7a98:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7a9a:	4293      	cmp	r3, r2
    7a9c:	da00      	bge.n	7aa0 <_vfprintf_r+0x9f0>
    7a9e:	0013      	movs	r3, r2
    7aa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7aa2:	4694      	mov	ip, r2
    7aa4:	449c      	add	ip, r3
    7aa6:	4663      	mov	r3, ip
    7aa8:	930c      	str	r3, [sp, #48]	; 0x30
    7aaa:	2c00      	cmp	r4, #0
    7aac:	d000      	beq.n	7ab0 <_vfprintf_r+0xa00>
    7aae:	e110      	b.n	7cd2 <_vfprintf_r+0xc22>
    7ab0:	2300      	movs	r3, #0
    7ab2:	ae32      	add	r6, sp, #200	; 0xc8
    7ab4:	607b      	str	r3, [r7, #4]
    7ab6:	f7ff fb43 	bl	7140 <_vfprintf_r+0x90>
    7aba:	9b14      	ldr	r3, [sp, #80]	; 0x50
    7abc:	2b01      	cmp	r3, #1
    7abe:	dc00      	bgt.n	7ac2 <_vfprintf_r+0xa12>
    7ac0:	e0ea      	b.n	7c98 <_vfprintf_r+0xbe8>
    7ac2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7ac4:	3401      	adds	r4, #1
    7ac6:	6033      	str	r3, [r6, #0]
    7ac8:	2301      	movs	r3, #1
    7aca:	6073      	str	r3, [r6, #4]
    7acc:	687b      	ldr	r3, [r7, #4]
    7ace:	60bc      	str	r4, [r7, #8]
    7ad0:	3301      	adds	r3, #1
    7ad2:	607b      	str	r3, [r7, #4]
    7ad4:	2b07      	cmp	r3, #7
    7ad6:	dd00      	ble.n	7ada <_vfprintf_r+0xa2a>
    7ad8:	e2b2      	b.n	8040 <_vfprintf_r+0xf90>
    7ada:	3608      	adds	r6, #8
    7adc:	9a19      	ldr	r2, [sp, #100]	; 0x64
    7ade:	3301      	adds	r3, #1
    7ae0:	6032      	str	r2, [r6, #0]
    7ae2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    7ae4:	4698      	mov	r8, r3
    7ae6:	4694      	mov	ip, r2
    7ae8:	4464      	add	r4, ip
    7aea:	6072      	str	r2, [r6, #4]
    7aec:	60bc      	str	r4, [r7, #8]
    7aee:	607b      	str	r3, [r7, #4]
    7af0:	2b07      	cmp	r3, #7
    7af2:	dd00      	ble.n	7af6 <_vfprintf_r+0xa46>
    7af4:	e2b8      	b.n	8068 <_vfprintf_r+0xfb8>
    7af6:	3608      	adds	r6, #8
    7af8:	2200      	movs	r2, #0
    7afa:	2300      	movs	r3, #0
    7afc:	9816      	ldr	r0, [sp, #88]	; 0x58
    7afe:	9917      	ldr	r1, [sp, #92]	; 0x5c
    7b00:	f004 f94a 	bl	bd98 <__aeabi_dcmpeq>
    7b04:	2800      	cmp	r0, #0
    7b06:	d000      	beq.n	7b0a <_vfprintf_r+0xa5a>
    7b08:	e1d1      	b.n	7eae <_vfprintf_r+0xdfe>
    7b0a:	9d12      	ldr	r5, [sp, #72]	; 0x48
    7b0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    7b0e:	3501      	adds	r5, #1
    7b10:	3b01      	subs	r3, #1
    7b12:	6035      	str	r5, [r6, #0]
    7b14:	6073      	str	r3, [r6, #4]
    7b16:	18e4      	adds	r4, r4, r3
    7b18:	2301      	movs	r3, #1
    7b1a:	469c      	mov	ip, r3
    7b1c:	44e0      	add	r8, ip
    7b1e:	4643      	mov	r3, r8
    7b20:	60bc      	str	r4, [r7, #8]
    7b22:	607b      	str	r3, [r7, #4]
    7b24:	2b07      	cmp	r3, #7
    7b26:	dd00      	ble.n	7b2a <_vfprintf_r+0xa7a>
    7b28:	e0c7      	b.n	7cba <_vfprintf_r+0xc0a>
    7b2a:	3608      	adds	r6, #8
    7b2c:	ab21      	add	r3, sp, #132	; 0x84
    7b2e:	6033      	str	r3, [r6, #0]
    7b30:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    7b32:	469c      	mov	ip, r3
    7b34:	6073      	str	r3, [r6, #4]
    7b36:	4643      	mov	r3, r8
    7b38:	4464      	add	r4, ip
    7b3a:	3301      	adds	r3, #1
    7b3c:	60bc      	str	r4, [r7, #8]
    7b3e:	607b      	str	r3, [r7, #4]
    7b40:	2b07      	cmp	r3, #7
    7b42:	dc00      	bgt.n	7b46 <_vfprintf_r+0xa96>
    7b44:	e75c      	b.n	7a00 <_vfprintf_r+0x950>
    7b46:	003a      	movs	r2, r7
    7b48:	4659      	mov	r1, fp
    7b4a:	9807      	ldr	r0, [sp, #28]
    7b4c:	f003 fdd8 	bl	b700 <__sprint_r>
    7b50:	2800      	cmp	r0, #0
    7b52:	d000      	beq.n	7b56 <_vfprintf_r+0xaa6>
    7b54:	e0c5      	b.n	7ce2 <_vfprintf_r+0xc32>
    7b56:	68bc      	ldr	r4, [r7, #8]
    7b58:	ae32      	add	r6, sp, #200	; 0xc8
    7b5a:	e752      	b.n	7a02 <_vfprintf_r+0x952>
    7b5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7b5e:	2b65      	cmp	r3, #101	; 0x65
    7b60:	ddab      	ble.n	7aba <_vfprintf_r+0xa0a>
    7b62:	2200      	movs	r2, #0
    7b64:	2300      	movs	r3, #0
    7b66:	9816      	ldr	r0, [sp, #88]	; 0x58
    7b68:	9917      	ldr	r1, [sp, #92]	; 0x5c
    7b6a:	f004 f915 	bl	bd98 <__aeabi_dcmpeq>
    7b6e:	2800      	cmp	r0, #0
    7b70:	d100      	bne.n	7b74 <_vfprintf_r+0xac4>
    7b72:	e108      	b.n	7d86 <_vfprintf_r+0xcd6>
    7b74:	4bd6      	ldr	r3, [pc, #856]	; (7ed0 <_vfprintf_r+0xe20>)
    7b76:	3401      	adds	r4, #1
    7b78:	6033      	str	r3, [r6, #0]
    7b7a:	2301      	movs	r3, #1
    7b7c:	6073      	str	r3, [r6, #4]
    7b7e:	687b      	ldr	r3, [r7, #4]
    7b80:	60bc      	str	r4, [r7, #8]
    7b82:	3301      	adds	r3, #1
    7b84:	607b      	str	r3, [r7, #4]
    7b86:	2b07      	cmp	r3, #7
    7b88:	dd00      	ble.n	7b8c <_vfprintf_r+0xadc>
    7b8a:	e37a      	b.n	8282 <_vfprintf_r+0x11d2>
    7b8c:	3608      	adds	r6, #8
    7b8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    7b90:	9a14      	ldr	r2, [sp, #80]	; 0x50
    7b92:	4293      	cmp	r3, r2
    7b94:	db03      	blt.n	7b9e <_vfprintf_r+0xaee>
    7b96:	9b08      	ldr	r3, [sp, #32]
    7b98:	07db      	lsls	r3, r3, #31
    7b9a:	d400      	bmi.n	7b9e <_vfprintf_r+0xaee>
    7b9c:	e731      	b.n	7a02 <_vfprintf_r+0x952>
    7b9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    7ba0:	6033      	str	r3, [r6, #0]
    7ba2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7ba4:	469c      	mov	ip, r3
    7ba6:	6073      	str	r3, [r6, #4]
    7ba8:	687b      	ldr	r3, [r7, #4]
    7baa:	4464      	add	r4, ip
    7bac:	3301      	adds	r3, #1
    7bae:	60bc      	str	r4, [r7, #8]
    7bb0:	607b      	str	r3, [r7, #4]
    7bb2:	2b07      	cmp	r3, #7
    7bb4:	dd01      	ble.n	7bba <_vfprintf_r+0xb0a>
    7bb6:	f000 fc52 	bl	845e <_vfprintf_r+0x13ae>
    7bba:	3608      	adds	r6, #8
    7bbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
    7bbe:	1e5d      	subs	r5, r3, #1
    7bc0:	2d00      	cmp	r5, #0
    7bc2:	dc00      	bgt.n	7bc6 <_vfprintf_r+0xb16>
    7bc4:	e71d      	b.n	7a02 <_vfprintf_r+0x952>
    7bc6:	4ac3      	ldr	r2, [pc, #780]	; (7ed4 <_vfprintf_r+0xe24>)
    7bc8:	687b      	ldr	r3, [r7, #4]
    7bca:	4691      	mov	r9, r2
    7bcc:	2d10      	cmp	r5, #16
    7bce:	dc00      	bgt.n	7bd2 <_vfprintf_r+0xb22>
    7bd0:	e19f      	b.n	7f12 <_vfprintf_r+0xe62>
    7bd2:	2210      	movs	r2, #16
    7bd4:	4690      	mov	r8, r2
    7bd6:	0022      	movs	r2, r4
    7bd8:	464c      	mov	r4, r9
    7bda:	46d9      	mov	r9, fp
    7bdc:	e004      	b.n	7be8 <_vfprintf_r+0xb38>
    7bde:	3608      	adds	r6, #8
    7be0:	3d10      	subs	r5, #16
    7be2:	2d10      	cmp	r5, #16
    7be4:	dc00      	bgt.n	7be8 <_vfprintf_r+0xb38>
    7be6:	e348      	b.n	827a <_vfprintf_r+0x11ca>
    7be8:	4641      	mov	r1, r8
    7bea:	3210      	adds	r2, #16
    7bec:	3301      	adds	r3, #1
    7bee:	6034      	str	r4, [r6, #0]
    7bf0:	6071      	str	r1, [r6, #4]
    7bf2:	60ba      	str	r2, [r7, #8]
    7bf4:	607b      	str	r3, [r7, #4]
    7bf6:	2b07      	cmp	r3, #7
    7bf8:	ddf1      	ble.n	7bde <_vfprintf_r+0xb2e>
    7bfa:	003a      	movs	r2, r7
    7bfc:	4649      	mov	r1, r9
    7bfe:	9807      	ldr	r0, [sp, #28]
    7c00:	f003 fd7e 	bl	b700 <__sprint_r>
    7c04:	2800      	cmp	r0, #0
    7c06:	d001      	beq.n	7c0c <_vfprintf_r+0xb5c>
    7c08:	f000 fd0f 	bl	862a <_vfprintf_r+0x157a>
    7c0c:	68ba      	ldr	r2, [r7, #8]
    7c0e:	687b      	ldr	r3, [r7, #4]
    7c10:	ae32      	add	r6, sp, #200	; 0xc8
    7c12:	e7e5      	b.n	7be0 <_vfprintf_r+0xb30>
    7c14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7c16:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7c18:	1a9d      	subs	r5, r3, r2
    7c1a:	2d00      	cmp	r5, #0
    7c1c:	dc00      	bgt.n	7c20 <_vfprintf_r+0xb70>
    7c1e:	e6a6      	b.n	796e <_vfprintf_r+0x8be>
    7c20:	4aac      	ldr	r2, [pc, #688]	; (7ed4 <_vfprintf_r+0xe24>)
    7c22:	687b      	ldr	r3, [r7, #4]
    7c24:	4691      	mov	r9, r2
    7c26:	2d10      	cmp	r5, #16
    7c28:	dd21      	ble.n	7c6e <_vfprintf_r+0xbbe>
    7c2a:	2210      	movs	r2, #16
    7c2c:	4692      	mov	sl, r2
    7c2e:	0022      	movs	r2, r4
    7c30:	465c      	mov	r4, fp
    7c32:	e003      	b.n	7c3c <_vfprintf_r+0xb8c>
    7c34:	3d10      	subs	r5, #16
    7c36:	3608      	adds	r6, #8
    7c38:	2d10      	cmp	r5, #16
    7c3a:	dd16      	ble.n	7c6a <_vfprintf_r+0xbba>
    7c3c:	4649      	mov	r1, r9
    7c3e:	6031      	str	r1, [r6, #0]
    7c40:	4651      	mov	r1, sl
    7c42:	3210      	adds	r2, #16
    7c44:	3301      	adds	r3, #1
    7c46:	6071      	str	r1, [r6, #4]
    7c48:	60ba      	str	r2, [r7, #8]
    7c4a:	607b      	str	r3, [r7, #4]
    7c4c:	2b07      	cmp	r3, #7
    7c4e:	ddf1      	ble.n	7c34 <_vfprintf_r+0xb84>
    7c50:	003a      	movs	r2, r7
    7c52:	0021      	movs	r1, r4
    7c54:	9807      	ldr	r0, [sp, #28]
    7c56:	f003 fd53 	bl	b700 <__sprint_r>
    7c5a:	2800      	cmp	r0, #0
    7c5c:	d113      	bne.n	7c86 <_vfprintf_r+0xbd6>
    7c5e:	3d10      	subs	r5, #16
    7c60:	68ba      	ldr	r2, [r7, #8]
    7c62:	687b      	ldr	r3, [r7, #4]
    7c64:	ae32      	add	r6, sp, #200	; 0xc8
    7c66:	2d10      	cmp	r5, #16
    7c68:	dce8      	bgt.n	7c3c <_vfprintf_r+0xb8c>
    7c6a:	46a3      	mov	fp, r4
    7c6c:	0014      	movs	r4, r2
    7c6e:	464a      	mov	r2, r9
    7c70:	1964      	adds	r4, r4, r5
    7c72:	3301      	adds	r3, #1
    7c74:	6032      	str	r2, [r6, #0]
    7c76:	6075      	str	r5, [r6, #4]
    7c78:	60bc      	str	r4, [r7, #8]
    7c7a:	607b      	str	r3, [r7, #4]
    7c7c:	2b07      	cmp	r3, #7
    7c7e:	dd00      	ble.n	7c82 <_vfprintf_r+0xbd2>
    7c80:	e1ff      	b.n	8082 <_vfprintf_r+0xfd2>
    7c82:	3608      	adds	r6, #8
    7c84:	e673      	b.n	796e <_vfprintf_r+0x8be>
    7c86:	46a0      	mov	r8, r4
    7c88:	4643      	mov	r3, r8
    7c8a:	899b      	ldrh	r3, [r3, #12]
    7c8c:	065b      	lsls	r3, r3, #25
    7c8e:	d500      	bpl.n	7c92 <_vfprintf_r+0xbe2>
    7c90:	e350      	b.n	8334 <_vfprintf_r+0x1284>
    7c92:	980c      	ldr	r0, [sp, #48]	; 0x30
    7c94:	f7ff faee 	bl	7274 <_vfprintf_r+0x1c4>
    7c98:	2301      	movs	r3, #1
    7c9a:	9a08      	ldr	r2, [sp, #32]
    7c9c:	4213      	tst	r3, r2
    7c9e:	d000      	beq.n	7ca2 <_vfprintf_r+0xbf2>
    7ca0:	e70f      	b.n	7ac2 <_vfprintf_r+0xa12>
    7ca2:	6073      	str	r3, [r6, #4]
    7ca4:	687b      	ldr	r3, [r7, #4]
    7ca6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    7ca8:	3301      	adds	r3, #1
    7caa:	3401      	adds	r4, #1
    7cac:	6032      	str	r2, [r6, #0]
    7cae:	60bc      	str	r4, [r7, #8]
    7cb0:	4698      	mov	r8, r3
    7cb2:	607b      	str	r3, [r7, #4]
    7cb4:	2b07      	cmp	r3, #7
    7cb6:	dc00      	bgt.n	7cba <_vfprintf_r+0xc0a>
    7cb8:	e737      	b.n	7b2a <_vfprintf_r+0xa7a>
    7cba:	003a      	movs	r2, r7
    7cbc:	4659      	mov	r1, fp
    7cbe:	9807      	ldr	r0, [sp, #28]
    7cc0:	f003 fd1e 	bl	b700 <__sprint_r>
    7cc4:	2800      	cmp	r0, #0
    7cc6:	d10c      	bne.n	7ce2 <_vfprintf_r+0xc32>
    7cc8:	687b      	ldr	r3, [r7, #4]
    7cca:	68bc      	ldr	r4, [r7, #8]
    7ccc:	4698      	mov	r8, r3
    7cce:	ae32      	add	r6, sp, #200	; 0xc8
    7cd0:	e72c      	b.n	7b2c <_vfprintf_r+0xa7c>
    7cd2:	003a      	movs	r2, r7
    7cd4:	4659      	mov	r1, fp
    7cd6:	9807      	ldr	r0, [sp, #28]
    7cd8:	f003 fd12 	bl	b700 <__sprint_r>
    7cdc:	2800      	cmp	r0, #0
    7cde:	d100      	bne.n	7ce2 <_vfprintf_r+0xc32>
    7ce0:	e6e6      	b.n	7ab0 <_vfprintf_r+0xa00>
    7ce2:	46d8      	mov	r8, fp
    7ce4:	e7d0      	b.n	7c88 <_vfprintf_r+0xbd8>
    7ce6:	2210      	movs	r2, #16
    7ce8:	9908      	ldr	r1, [sp, #32]
    7cea:	400a      	ands	r2, r1
    7cec:	d100      	bne.n	7cf0 <_vfprintf_r+0xc40>
    7cee:	e11b      	b.n	7f28 <_vfprintf_r+0xe78>
    7cf0:	9811      	ldr	r0, [sp, #68]	; 0x44
    7cf2:	0002      	movs	r2, r0
    7cf4:	6800      	ldr	r0, [r0, #0]
    7cf6:	3204      	adds	r2, #4
    7cf8:	900e      	str	r0, [sp, #56]	; 0x38
    7cfa:	2000      	movs	r0, #0
    7cfc:	900f      	str	r0, [sp, #60]	; 0x3c
    7cfe:	a816      	add	r0, sp, #88	; 0x58
    7d00:	77c3      	strb	r3, [r0, #31]
    7d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7d04:	2b00      	cmp	r3, #0
    7d06:	da00      	bge.n	7d0a <_vfprintf_r+0xc5a>
    7d08:	e120      	b.n	7f4c <_vfprintf_r+0xe9c>
    7d0a:	2380      	movs	r3, #128	; 0x80
    7d0c:	4399      	bics	r1, r3
    7d0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7d10:	9108      	str	r1, [sp, #32]
    7d12:	9211      	str	r2, [sp, #68]	; 0x44
    7d14:	2b00      	cmp	r3, #0
    7d16:	d000      	beq.n	7d1a <_vfprintf_r+0xc6a>
    7d18:	e4a5      	b.n	7666 <_vfprintf_r+0x5b6>
    7d1a:	4698      	mov	r8, r3
    7d1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7d1e:	2b00      	cmp	r3, #0
    7d20:	d100      	bne.n	7d24 <_vfprintf_r+0xc74>
    7d22:	e5a4      	b.n	786e <_vfprintf_r+0x7be>
    7d24:	2300      	movs	r3, #0
    7d26:	2400      	movs	r4, #0
    7d28:	930e      	str	r3, [sp, #56]	; 0x38
    7d2a:	940f      	str	r4, [sp, #60]	; 0x3c
    7d2c:	2227      	movs	r2, #39	; 0x27
    7d2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7d30:	a928      	add	r1, sp, #160	; 0xa0
    7d32:	3330      	adds	r3, #48	; 0x30
    7d34:	548b      	strb	r3, [r1, r2]
    7d36:	ab16      	add	r3, sp, #88	; 0x58
    7d38:	469c      	mov	ip, r3
    7d3a:	256f      	movs	r5, #111	; 0x6f
    7d3c:	ab32      	add	r3, sp, #200	; 0xc8
    7d3e:	4465      	add	r5, ip
    7d40:	1b5b      	subs	r3, r3, r5
    7d42:	9310      	str	r3, [sp, #64]	; 0x40
    7d44:	9512      	str	r5, [sp, #72]	; 0x48
    7d46:	f7ff fc05 	bl	7554 <_vfprintf_r+0x4a4>
    7d4a:	003a      	movs	r2, r7
    7d4c:	4659      	mov	r1, fp
    7d4e:	9807      	ldr	r0, [sp, #28]
    7d50:	f003 fcd6 	bl	b700 <__sprint_r>
    7d54:	2800      	cmp	r0, #0
    7d56:	d1c4      	bne.n	7ce2 <_vfprintf_r+0xc32>
    7d58:	68bc      	ldr	r4, [r7, #8]
    7d5a:	ae32      	add	r6, sp, #200	; 0xc8
    7d5c:	e63f      	b.n	79de <_vfprintf_r+0x92e>
    7d5e:	003a      	movs	r2, r7
    7d60:	4659      	mov	r1, fp
    7d62:	9807      	ldr	r0, [sp, #28]
    7d64:	f003 fccc 	bl	b700 <__sprint_r>
    7d68:	2800      	cmp	r0, #0
    7d6a:	d1ba      	bne.n	7ce2 <_vfprintf_r+0xc32>
    7d6c:	68bc      	ldr	r4, [r7, #8]
    7d6e:	ae32      	add	r6, sp, #200	; 0xc8
    7d70:	e5e9      	b.n	7946 <_vfprintf_r+0x896>
    7d72:	003a      	movs	r2, r7
    7d74:	4659      	mov	r1, fp
    7d76:	9807      	ldr	r0, [sp, #28]
    7d78:	f003 fcc2 	bl	b700 <__sprint_r>
    7d7c:	2800      	cmp	r0, #0
    7d7e:	d1b0      	bne.n	7ce2 <_vfprintf_r+0xc32>
    7d80:	68bc      	ldr	r4, [r7, #8]
    7d82:	ae32      	add	r6, sp, #200	; 0xc8
    7d84:	e5ef      	b.n	7966 <_vfprintf_r+0x8b6>
    7d86:	981f      	ldr	r0, [sp, #124]	; 0x7c
    7d88:	2800      	cmp	r0, #0
    7d8a:	dc00      	bgt.n	7d8e <_vfprintf_r+0xcde>
    7d8c:	e284      	b.n	8298 <_vfprintf_r+0x11e8>
    7d8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    7d90:	9914      	ldr	r1, [sp, #80]	; 0x50
    7d92:	1e13      	subs	r3, r2, #0
    7d94:	4691      	mov	r9, r2
    7d96:	428b      	cmp	r3, r1
    7d98:	dd00      	ble.n	7d9c <_vfprintf_r+0xcec>
    7d9a:	4689      	mov	r9, r1
    7d9c:	464b      	mov	r3, r9
    7d9e:	2b00      	cmp	r3, #0
    7da0:	dd0c      	ble.n	7dbc <_vfprintf_r+0xd0c>
    7da2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7da4:	444c      	add	r4, r9
    7da6:	6033      	str	r3, [r6, #0]
    7da8:	464b      	mov	r3, r9
    7daa:	6073      	str	r3, [r6, #4]
    7dac:	687b      	ldr	r3, [r7, #4]
    7dae:	60bc      	str	r4, [r7, #8]
    7db0:	3301      	adds	r3, #1
    7db2:	607b      	str	r3, [r7, #4]
    7db4:	2b07      	cmp	r3, #7
    7db6:	dd00      	ble.n	7dba <_vfprintf_r+0xd0a>
    7db8:	e3a4      	b.n	8504 <_vfprintf_r+0x1454>
    7dba:	3608      	adds	r6, #8
    7dbc:	464b      	mov	r3, r9
    7dbe:	43db      	mvns	r3, r3
    7dc0:	464a      	mov	r2, r9
    7dc2:	17db      	asrs	r3, r3, #31
    7dc4:	4013      	ands	r3, r2
    7dc6:	9a15      	ldr	r2, [sp, #84]	; 0x54
    7dc8:	1ad3      	subs	r3, r2, r3
    7dca:	4698      	mov	r8, r3
    7dcc:	2b00      	cmp	r3, #0
    7dce:	dc00      	bgt.n	7dd2 <_vfprintf_r+0xd22>
    7dd0:	e0d7      	b.n	7f82 <_vfprintf_r+0xed2>
    7dd2:	2b10      	cmp	r3, #16
    7dd4:	dc01      	bgt.n	7dda <_vfprintf_r+0xd2a>
    7dd6:	f000 fd19 	bl	880c <_vfprintf_r+0x175c>
    7dda:	4a3e      	ldr	r2, [pc, #248]	; (7ed4 <_vfprintf_r+0xe24>)
    7ddc:	687b      	ldr	r3, [r7, #4]
    7dde:	4691      	mov	r9, r2
    7de0:	2210      	movs	r2, #16
    7de2:	464d      	mov	r5, r9
    7de4:	4692      	mov	sl, r2
    7de6:	0022      	movs	r2, r4
    7de8:	4644      	mov	r4, r8
    7dea:	46d8      	mov	r8, fp
    7dec:	e004      	b.n	7df8 <_vfprintf_r+0xd48>
    7dee:	3608      	adds	r6, #8
    7df0:	3c10      	subs	r4, #16
    7df2:	2c10      	cmp	r4, #16
    7df4:	dc00      	bgt.n	7df8 <_vfprintf_r+0xd48>
    7df6:	e0b4      	b.n	7f62 <_vfprintf_r+0xeb2>
    7df8:	4651      	mov	r1, sl
    7dfa:	3210      	adds	r2, #16
    7dfc:	3301      	adds	r3, #1
    7dfe:	6035      	str	r5, [r6, #0]
    7e00:	6071      	str	r1, [r6, #4]
    7e02:	60ba      	str	r2, [r7, #8]
    7e04:	607b      	str	r3, [r7, #4]
    7e06:	2b07      	cmp	r3, #7
    7e08:	ddf1      	ble.n	7dee <_vfprintf_r+0xd3e>
    7e0a:	003a      	movs	r2, r7
    7e0c:	4641      	mov	r1, r8
    7e0e:	9807      	ldr	r0, [sp, #28]
    7e10:	f003 fc76 	bl	b700 <__sprint_r>
    7e14:	2800      	cmp	r0, #0
    7e16:	d000      	beq.n	7e1a <_vfprintf_r+0xd6a>
    7e18:	e736      	b.n	7c88 <_vfprintf_r+0xbd8>
    7e1a:	68ba      	ldr	r2, [r7, #8]
    7e1c:	687b      	ldr	r3, [r7, #4]
    7e1e:	ae32      	add	r6, sp, #200	; 0xc8
    7e20:	e7e6      	b.n	7df0 <_vfprintf_r+0xd40>
    7e22:	003a      	movs	r2, r7
    7e24:	4659      	mov	r1, fp
    7e26:	9807      	ldr	r0, [sp, #28]
    7e28:	f003 fc6a 	bl	b700 <__sprint_r>
    7e2c:	2800      	cmp	r0, #0
    7e2e:	d000      	beq.n	7e32 <_vfprintf_r+0xd82>
    7e30:	e757      	b.n	7ce2 <_vfprintf_r+0xc32>
    7e32:	ab16      	add	r3, sp, #88	; 0x58
    7e34:	7fdb      	ldrb	r3, [r3, #31]
    7e36:	68bc      	ldr	r4, [r7, #8]
    7e38:	4698      	mov	r8, r3
    7e3a:	ae32      	add	r6, sp, #200	; 0xc8
    7e3c:	e570      	b.n	7920 <_vfprintf_r+0x870>
    7e3e:	46b0      	mov	r8, r6
    7e40:	e722      	b.n	7c88 <_vfprintf_r+0xbd8>
    7e42:	2210      	movs	r2, #16
    7e44:	9908      	ldr	r1, [sp, #32]
    7e46:	400a      	ands	r2, r1
    7e48:	d100      	bne.n	7e4c <_vfprintf_r+0xd9c>
    7e4a:	e13b      	b.n	80c4 <_vfprintf_r+0x1014>
    7e4c:	9811      	ldr	r0, [sp, #68]	; 0x44
    7e4e:	0002      	movs	r2, r0
    7e50:	6800      	ldr	r0, [r0, #0]
    7e52:	3204      	adds	r2, #4
    7e54:	900e      	str	r0, [sp, #56]	; 0x38
    7e56:	2000      	movs	r0, #0
    7e58:	900f      	str	r0, [sp, #60]	; 0x3c
    7e5a:	a816      	add	r0, sp, #88	; 0x58
    7e5c:	77c3      	strb	r3, [r0, #31]
    7e5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7e60:	2b00      	cmp	r3, #0
    7e62:	da00      	bge.n	7e66 <_vfprintf_r+0xdb6>
    7e64:	e13f      	b.n	80e6 <_vfprintf_r+0x1036>
    7e66:	2380      	movs	r3, #128	; 0x80
    7e68:	4399      	bics	r1, r3
    7e6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7e6c:	9108      	str	r1, [sp, #32]
    7e6e:	9211      	str	r2, [sp, #68]	; 0x44
    7e70:	2b00      	cmp	r3, #0
    7e72:	d001      	beq.n	7e78 <_vfprintf_r+0xdc8>
    7e74:	f7ff fb43 	bl	74fe <_vfprintf_r+0x44e>
    7e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7e7a:	2b00      	cmp	r3, #0
    7e7c:	d101      	bne.n	7e82 <_vfprintf_r+0xdd2>
    7e7e:	f000 fc6b 	bl	8758 <_vfprintf_r+0x16a8>
    7e82:	2300      	movs	r3, #0
    7e84:	4698      	mov	r8, r3
    7e86:	2300      	movs	r3, #0
    7e88:	2400      	movs	r4, #0
    7e8a:	930e      	str	r3, [sp, #56]	; 0x38
    7e8c:	940f      	str	r4, [sp, #60]	; 0x3c
    7e8e:	f7ff fb38 	bl	7502 <_vfprintf_r+0x452>
    7e92:	9b08      	ldr	r3, [sp, #32]
    7e94:	06db      	lsls	r3, r3, #27
    7e96:	d400      	bmi.n	7e9a <_vfprintf_r+0xdea>
    7e98:	e130      	b.n	80fc <_vfprintf_r+0x104c>
    7e9a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    7e9c:	6813      	ldr	r3, [r2, #0]
    7e9e:	9309      	str	r3, [sp, #36]	; 0x24
    7ea0:	930e      	str	r3, [sp, #56]	; 0x38
    7ea2:	3204      	adds	r2, #4
    7ea4:	17db      	asrs	r3, r3, #31
    7ea6:	930f      	str	r3, [sp, #60]	; 0x3c
    7ea8:	9211      	str	r2, [sp, #68]	; 0x44
    7eaa:	f7ff fa63 	bl	7374 <_vfprintf_r+0x2c4>
    7eae:	9b14      	ldr	r3, [sp, #80]	; 0x50
    7eb0:	1e5d      	subs	r5, r3, #1
    7eb2:	2d00      	cmp	r5, #0
    7eb4:	dc00      	bgt.n	7eb8 <_vfprintf_r+0xe08>
    7eb6:	e639      	b.n	7b2c <_vfprintf_r+0xa7c>
    7eb8:	4b06      	ldr	r3, [pc, #24]	; (7ed4 <_vfprintf_r+0xe24>)
    7eba:	4699      	mov	r9, r3
    7ebc:	2d10      	cmp	r5, #16
    7ebe:	dc00      	bgt.n	7ec2 <_vfprintf_r+0xe12>
    7ec0:	e0cd      	b.n	805e <_vfprintf_r+0xfae>
    7ec2:	2310      	movs	r3, #16
    7ec4:	0022      	movs	r2, r4
    7ec6:	469a      	mov	sl, r3
    7ec8:	465c      	mov	r4, fp
    7eca:	4643      	mov	r3, r8
    7ecc:	e009      	b.n	7ee2 <_vfprintf_r+0xe32>
    7ece:	46c0      	nop			; (mov r8, r8)
    7ed0:	0000dfb4 	.word	0x0000dfb4
    7ed4:	0000df64 	.word	0x0000df64
    7ed8:	3608      	adds	r6, #8
    7eda:	3d10      	subs	r5, #16
    7edc:	2d10      	cmp	r5, #16
    7ede:	dc00      	bgt.n	7ee2 <_vfprintf_r+0xe32>
    7ee0:	e0ba      	b.n	8058 <_vfprintf_r+0xfa8>
    7ee2:	4649      	mov	r1, r9
    7ee4:	6031      	str	r1, [r6, #0]
    7ee6:	4651      	mov	r1, sl
    7ee8:	3210      	adds	r2, #16
    7eea:	3301      	adds	r3, #1
    7eec:	6071      	str	r1, [r6, #4]
    7eee:	60ba      	str	r2, [r7, #8]
    7ef0:	607b      	str	r3, [r7, #4]
    7ef2:	2b07      	cmp	r3, #7
    7ef4:	ddf0      	ble.n	7ed8 <_vfprintf_r+0xe28>
    7ef6:	003a      	movs	r2, r7
    7ef8:	0021      	movs	r1, r4
    7efa:	9807      	ldr	r0, [sp, #28]
    7efc:	f003 fc00 	bl	b700 <__sprint_r>
    7f00:	2800      	cmp	r0, #0
    7f02:	d000      	beq.n	7f06 <_vfprintf_r+0xe56>
    7f04:	e6bf      	b.n	7c86 <_vfprintf_r+0xbd6>
    7f06:	68ba      	ldr	r2, [r7, #8]
    7f08:	687b      	ldr	r3, [r7, #4]
    7f0a:	ae32      	add	r6, sp, #200	; 0xc8
    7f0c:	e7e5      	b.n	7eda <_vfprintf_r+0xe2a>
    7f0e:	46a3      	mov	fp, r4
    7f10:	0014      	movs	r4, r2
    7f12:	464a      	mov	r2, r9
    7f14:	1964      	adds	r4, r4, r5
    7f16:	3301      	adds	r3, #1
    7f18:	6032      	str	r2, [r6, #0]
    7f1a:	6075      	str	r5, [r6, #4]
    7f1c:	60bc      	str	r4, [r7, #8]
    7f1e:	607b      	str	r3, [r7, #4]
    7f20:	2b07      	cmp	r3, #7
    7f22:	dc00      	bgt.n	7f26 <_vfprintf_r+0xe76>
    7f24:	e56c      	b.n	7a00 <_vfprintf_r+0x950>
    7f26:	e60e      	b.n	7b46 <_vfprintf_r+0xa96>
    7f28:	2340      	movs	r3, #64	; 0x40
    7f2a:	9908      	ldr	r1, [sp, #32]
    7f2c:	400b      	ands	r3, r1
    7f2e:	d000      	beq.n	7f32 <_vfprintf_r+0xe82>
    7f30:	e230      	b.n	8394 <_vfprintf_r+0x12e4>
    7f32:	9911      	ldr	r1, [sp, #68]	; 0x44
    7f34:	000a      	movs	r2, r1
    7f36:	6809      	ldr	r1, [r1, #0]
    7f38:	3204      	adds	r2, #4
    7f3a:	910e      	str	r1, [sp, #56]	; 0x38
    7f3c:	2100      	movs	r1, #0
    7f3e:	910f      	str	r1, [sp, #60]	; 0x3c
    7f40:	a916      	add	r1, sp, #88	; 0x58
    7f42:	77cb      	strb	r3, [r1, #31]
    7f44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7f46:	2b00      	cmp	r3, #0
    7f48:	db00      	blt.n	7f4c <_vfprintf_r+0xe9c>
    7f4a:	e0df      	b.n	810c <_vfprintf_r+0x105c>
    7f4c:	9211      	str	r2, [sp, #68]	; 0x44
    7f4e:	2300      	movs	r3, #0
    7f50:	4698      	mov	r8, r3
    7f52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7f54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f56:	0011      	movs	r1, r2
    7f58:	4319      	orrs	r1, r3
    7f5a:	d001      	beq.n	7f60 <_vfprintf_r+0xeb0>
    7f5c:	f7ff fa21 	bl	73a2 <_vfprintf_r+0x2f2>
    7f60:	e6e0      	b.n	7d24 <_vfprintf_r+0xc74>
    7f62:	46c3      	mov	fp, r8
    7f64:	46a9      	mov	r9, r5
    7f66:	46a0      	mov	r8, r4
    7f68:	0014      	movs	r4, r2
    7f6a:	464a      	mov	r2, r9
    7f6c:	6032      	str	r2, [r6, #0]
    7f6e:	4642      	mov	r2, r8
    7f70:	4444      	add	r4, r8
    7f72:	3301      	adds	r3, #1
    7f74:	6072      	str	r2, [r6, #4]
    7f76:	60bc      	str	r4, [r7, #8]
    7f78:	607b      	str	r3, [r7, #4]
    7f7a:	2b07      	cmp	r3, #7
    7f7c:	dd00      	ble.n	7f80 <_vfprintf_r+0xed0>
    7f7e:	e36a      	b.n	8656 <_vfprintf_r+0x15a6>
    7f80:	3608      	adds	r6, #8
    7f82:	9a12      	ldr	r2, [sp, #72]	; 0x48
    7f84:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7f86:	4694      	mov	ip, r2
    7f88:	4463      	add	r3, ip
    7f8a:	4698      	mov	r8, r3
    7f8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    7f8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    7f90:	4293      	cmp	r3, r2
    7f92:	db46      	blt.n	8022 <_vfprintf_r+0xf72>
    7f94:	9a08      	ldr	r2, [sp, #32]
    7f96:	07d2      	lsls	r2, r2, #31
    7f98:	d443      	bmi.n	8022 <_vfprintf_r+0xf72>
    7f9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    7f9c:	9914      	ldr	r1, [sp, #80]	; 0x50
    7f9e:	0015      	movs	r5, r2
    7fa0:	468c      	mov	ip, r1
    7fa2:	4642      	mov	r2, r8
    7fa4:	4465      	add	r5, ip
    7fa6:	1acb      	subs	r3, r1, r3
    7fa8:	1aad      	subs	r5, r5, r2
    7faa:	429d      	cmp	r5, r3
    7fac:	dd00      	ble.n	7fb0 <_vfprintf_r+0xf00>
    7fae:	001d      	movs	r5, r3
    7fb0:	2d00      	cmp	r5, #0
    7fb2:	dd0b      	ble.n	7fcc <_vfprintf_r+0xf1c>
    7fb4:	4642      	mov	r2, r8
    7fb6:	6032      	str	r2, [r6, #0]
    7fb8:	687a      	ldr	r2, [r7, #4]
    7fba:	1964      	adds	r4, r4, r5
    7fbc:	3201      	adds	r2, #1
    7fbe:	6075      	str	r5, [r6, #4]
    7fc0:	60bc      	str	r4, [r7, #8]
    7fc2:	607a      	str	r2, [r7, #4]
    7fc4:	2a07      	cmp	r2, #7
    7fc6:	dd00      	ble.n	7fca <_vfprintf_r+0xf1a>
    7fc8:	e31c      	b.n	8604 <_vfprintf_r+0x1554>
    7fca:	3608      	adds	r6, #8
    7fcc:	43ea      	mvns	r2, r5
    7fce:	17d2      	asrs	r2, r2, #31
    7fd0:	4015      	ands	r5, r2
    7fd2:	1b5d      	subs	r5, r3, r5
    7fd4:	2d00      	cmp	r5, #0
    7fd6:	dc00      	bgt.n	7fda <_vfprintf_r+0xf2a>
    7fd8:	e513      	b.n	7a02 <_vfprintf_r+0x952>
    7fda:	4ad8      	ldr	r2, [pc, #864]	; (833c <_vfprintf_r+0x128c>)
    7fdc:	687b      	ldr	r3, [r7, #4]
    7fde:	4691      	mov	r9, r2
    7fe0:	2d10      	cmp	r5, #16
    7fe2:	dd96      	ble.n	7f12 <_vfprintf_r+0xe62>
    7fe4:	2210      	movs	r2, #16
    7fe6:	4690      	mov	r8, r2
    7fe8:	0022      	movs	r2, r4
    7fea:	465c      	mov	r4, fp
    7fec:	e003      	b.n	7ff6 <_vfprintf_r+0xf46>
    7fee:	3608      	adds	r6, #8
    7ff0:	3d10      	subs	r5, #16
    7ff2:	2d10      	cmp	r5, #16
    7ff4:	dd8b      	ble.n	7f0e <_vfprintf_r+0xe5e>
    7ff6:	4649      	mov	r1, r9
    7ff8:	6031      	str	r1, [r6, #0]
    7ffa:	4641      	mov	r1, r8
    7ffc:	3210      	adds	r2, #16
    7ffe:	3301      	adds	r3, #1
    8000:	6071      	str	r1, [r6, #4]
    8002:	60ba      	str	r2, [r7, #8]
    8004:	607b      	str	r3, [r7, #4]
    8006:	2b07      	cmp	r3, #7
    8008:	ddf1      	ble.n	7fee <_vfprintf_r+0xf3e>
    800a:	003a      	movs	r2, r7
    800c:	0021      	movs	r1, r4
    800e:	9807      	ldr	r0, [sp, #28]
    8010:	f003 fb76 	bl	b700 <__sprint_r>
    8014:	2800      	cmp	r0, #0
    8016:	d000      	beq.n	801a <_vfprintf_r+0xf6a>
    8018:	e635      	b.n	7c86 <_vfprintf_r+0xbd6>
    801a:	68ba      	ldr	r2, [r7, #8]
    801c:	687b      	ldr	r3, [r7, #4]
    801e:	ae32      	add	r6, sp, #200	; 0xc8
    8020:	e7e6      	b.n	7ff0 <_vfprintf_r+0xf40>
    8022:	9a19      	ldr	r2, [sp, #100]	; 0x64
    8024:	6032      	str	r2, [r6, #0]
    8026:	9a18      	ldr	r2, [sp, #96]	; 0x60
    8028:	4694      	mov	ip, r2
    802a:	6072      	str	r2, [r6, #4]
    802c:	687a      	ldr	r2, [r7, #4]
    802e:	4464      	add	r4, ip
    8030:	3201      	adds	r2, #1
    8032:	60bc      	str	r4, [r7, #8]
    8034:	607a      	str	r2, [r7, #4]
    8036:	2a07      	cmp	r2, #7
    8038:	dd00      	ble.n	803c <_vfprintf_r+0xf8c>
    803a:	e26f      	b.n	851c <_vfprintf_r+0x146c>
    803c:	3608      	adds	r6, #8
    803e:	e7ac      	b.n	7f9a <_vfprintf_r+0xeea>
    8040:	003a      	movs	r2, r7
    8042:	4659      	mov	r1, fp
    8044:	9807      	ldr	r0, [sp, #28]
    8046:	f003 fb5b 	bl	b700 <__sprint_r>
    804a:	2800      	cmp	r0, #0
    804c:	d000      	beq.n	8050 <_vfprintf_r+0xfa0>
    804e:	e648      	b.n	7ce2 <_vfprintf_r+0xc32>
    8050:	68bc      	ldr	r4, [r7, #8]
    8052:	687b      	ldr	r3, [r7, #4]
    8054:	ae32      	add	r6, sp, #200	; 0xc8
    8056:	e541      	b.n	7adc <_vfprintf_r+0xa2c>
    8058:	46a3      	mov	fp, r4
    805a:	4698      	mov	r8, r3
    805c:	0014      	movs	r4, r2
    805e:	464b      	mov	r3, r9
    8060:	6075      	str	r5, [r6, #4]
    8062:	6033      	str	r3, [r6, #0]
    8064:	1964      	adds	r4, r4, r5
    8066:	e557      	b.n	7b18 <_vfprintf_r+0xa68>
    8068:	003a      	movs	r2, r7
    806a:	4659      	mov	r1, fp
    806c:	9807      	ldr	r0, [sp, #28]
    806e:	f003 fb47 	bl	b700 <__sprint_r>
    8072:	2800      	cmp	r0, #0
    8074:	d000      	beq.n	8078 <_vfprintf_r+0xfc8>
    8076:	e634      	b.n	7ce2 <_vfprintf_r+0xc32>
    8078:	687b      	ldr	r3, [r7, #4]
    807a:	68bc      	ldr	r4, [r7, #8]
    807c:	4698      	mov	r8, r3
    807e:	ae32      	add	r6, sp, #200	; 0xc8
    8080:	e53a      	b.n	7af8 <_vfprintf_r+0xa48>
    8082:	003a      	movs	r2, r7
    8084:	4659      	mov	r1, fp
    8086:	9807      	ldr	r0, [sp, #28]
    8088:	f003 fb3a 	bl	b700 <__sprint_r>
    808c:	2800      	cmp	r0, #0
    808e:	d000      	beq.n	8092 <_vfprintf_r+0xfe2>
    8090:	e627      	b.n	7ce2 <_vfprintf_r+0xc32>
    8092:	68bc      	ldr	r4, [r7, #8]
    8094:	ae32      	add	r6, sp, #200	; 0xc8
    8096:	e46a      	b.n	796e <_vfprintf_r+0x8be>
    8098:	990e      	ldr	r1, [sp, #56]	; 0x38
    809a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    809c:	2400      	movs	r4, #0
    809e:	424b      	negs	r3, r1
    80a0:	4194      	sbcs	r4, r2
    80a2:	930e      	str	r3, [sp, #56]	; 0x38
    80a4:	940f      	str	r4, [sp, #60]	; 0x3c
    80a6:	232d      	movs	r3, #45	; 0x2d
    80a8:	aa16      	add	r2, sp, #88	; 0x58
    80aa:	77d3      	strb	r3, [r2, #31]
    80ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    80ae:	2b00      	cmp	r3, #0
    80b0:	da00      	bge.n	80b4 <_vfprintf_r+0x1004>
    80b2:	e2b6      	b.n	8622 <_vfprintf_r+0x1572>
    80b4:	2380      	movs	r3, #128	; 0x80
    80b6:	9a08      	ldr	r2, [sp, #32]
    80b8:	439a      	bics	r2, r3
    80ba:	3b53      	subs	r3, #83	; 0x53
    80bc:	9208      	str	r2, [sp, #32]
    80be:	4698      	mov	r8, r3
    80c0:	f7ff f96f 	bl	73a2 <_vfprintf_r+0x2f2>
    80c4:	2340      	movs	r3, #64	; 0x40
    80c6:	9908      	ldr	r1, [sp, #32]
    80c8:	400b      	ands	r3, r1
    80ca:	d000      	beq.n	80ce <_vfprintf_r+0x101e>
    80cc:	e14b      	b.n	8366 <_vfprintf_r+0x12b6>
    80ce:	9911      	ldr	r1, [sp, #68]	; 0x44
    80d0:	000a      	movs	r2, r1
    80d2:	6809      	ldr	r1, [r1, #0]
    80d4:	3204      	adds	r2, #4
    80d6:	910e      	str	r1, [sp, #56]	; 0x38
    80d8:	2100      	movs	r1, #0
    80da:	910f      	str	r1, [sp, #60]	; 0x3c
    80dc:	a916      	add	r1, sp, #88	; 0x58
    80de:	77cb      	strb	r3, [r1, #31]
    80e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    80e2:	2b00      	cmp	r3, #0
    80e4:	da15      	bge.n	8112 <_vfprintf_r+0x1062>
    80e6:	9211      	str	r2, [sp, #68]	; 0x44
    80e8:	2300      	movs	r3, #0
    80ea:	4698      	mov	r8, r3
    80ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    80ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    80f0:	0011      	movs	r1, r2
    80f2:	4319      	orrs	r1, r3
    80f4:	d001      	beq.n	80fa <_vfprintf_r+0x104a>
    80f6:	f7ff fa04 	bl	7502 <_vfprintf_r+0x452>
    80fa:	e6c4      	b.n	7e86 <_vfprintf_r+0xdd6>
    80fc:	9b08      	ldr	r3, [sp, #32]
    80fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8100:	065b      	lsls	r3, r3, #25
    8102:	d400      	bmi.n	8106 <_vfprintf_r+0x1056>
    8104:	e6ca      	b.n	7e9c <_vfprintf_r+0xdec>
    8106:	2100      	movs	r1, #0
    8108:	5e53      	ldrsh	r3, [r2, r1]
    810a:	e6c9      	b.n	7ea0 <_vfprintf_r+0xdf0>
    810c:	2380      	movs	r3, #128	; 0x80
    810e:	9908      	ldr	r1, [sp, #32]
    8110:	e5fc      	b.n	7d0c <_vfprintf_r+0xc5c>
    8112:	2380      	movs	r3, #128	; 0x80
    8114:	9908      	ldr	r1, [sp, #32]
    8116:	e6a7      	b.n	7e68 <_vfprintf_r+0xdb8>
    8118:	9d16      	ldr	r5, [sp, #88]	; 0x58
    811a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    811c:	002a      	movs	r2, r5
    811e:	0023      	movs	r3, r4
    8120:	0028      	movs	r0, r5
    8122:	0021      	movs	r1, r4
    8124:	f005 f90a 	bl	d33c <__aeabi_dcmpun>
    8128:	2800      	cmp	r0, #0
    812a:	d000      	beq.n	812e <_vfprintf_r+0x107e>
    812c:	e35f      	b.n	87ee <_vfprintf_r+0x173e>
    812e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8130:	3301      	adds	r3, #1
    8132:	d100      	bne.n	8136 <_vfprintf_r+0x1086>
    8134:	e29b      	b.n	866e <_vfprintf_r+0x15be>
    8136:	2320      	movs	r3, #32
    8138:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    813a:	439d      	bics	r5, r3
    813c:	2d47      	cmp	r5, #71	; 0x47
    813e:	d100      	bne.n	8142 <_vfprintf_r+0x1092>
    8140:	e170      	b.n	8424 <_vfprintf_r+0x1374>
    8142:	2380      	movs	r3, #128	; 0x80
    8144:	9a08      	ldr	r2, [sp, #32]
    8146:	005b      	lsls	r3, r3, #1
    8148:	431a      	orrs	r2, r3
    814a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    814c:	921b      	str	r2, [sp, #108]	; 0x6c
    814e:	2b00      	cmp	r3, #0
    8150:	da00      	bge.n	8154 <_vfprintf_r+0x10a4>
    8152:	e2c9      	b.n	86e8 <_vfprintf_r+0x1638>
    8154:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8156:	4698      	mov	r8, r3
    8158:	2300      	movs	r3, #0
    815a:	4691      	mov	r9, r2
    815c:	9309      	str	r3, [sp, #36]	; 0x24
    815e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    8160:	2c66      	cmp	r4, #102	; 0x66
    8162:	d100      	bne.n	8166 <_vfprintf_r+0x10b6>
    8164:	e289      	b.n	867a <_vfprintf_r+0x15ca>
    8166:	2c46      	cmp	r4, #70	; 0x46
    8168:	d100      	bne.n	816c <_vfprintf_r+0x10bc>
    816a:	e130      	b.n	83ce <_vfprintf_r+0x131e>
    816c:	002b      	movs	r3, r5
    816e:	3b45      	subs	r3, #69	; 0x45
    8170:	4259      	negs	r1, r3
    8172:	4159      	adcs	r1, r3
    8174:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8176:	464a      	mov	r2, r9
    8178:	469a      	mov	sl, r3
    817a:	ab23      	add	r3, sp, #140	; 0x8c
    817c:	9304      	str	r3, [sp, #16]
    817e:	ab20      	add	r3, sp, #128	; 0x80
    8180:	448a      	add	sl, r1
    8182:	9303      	str	r3, [sp, #12]
    8184:	ab1f      	add	r3, sp, #124	; 0x7c
    8186:	9302      	str	r3, [sp, #8]
    8188:	4653      	mov	r3, sl
    818a:	9301      	str	r3, [sp, #4]
    818c:	2302      	movs	r3, #2
    818e:	9807      	ldr	r0, [sp, #28]
    8190:	9300      	str	r3, [sp, #0]
    8192:	4643      	mov	r3, r8
    8194:	f000 fd00 	bl	8b98 <_dtoa_r>
    8198:	9012      	str	r0, [sp, #72]	; 0x48
    819a:	2c67      	cmp	r4, #103	; 0x67
    819c:	d000      	beq.n	81a0 <_vfprintf_r+0x10f0>
    819e:	e2bb      	b.n	8718 <_vfprintf_r+0x1668>
    81a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    81a2:	4453      	add	r3, sl
    81a4:	001c      	movs	r4, r3
    81a6:	9b08      	ldr	r3, [sp, #32]
    81a8:	07db      	lsls	r3, r3, #31
    81aa:	d400      	bmi.n	81ae <_vfprintf_r+0x10fe>
    81ac:	e306      	b.n	87bc <_vfprintf_r+0x170c>
    81ae:	2300      	movs	r3, #0
    81b0:	2200      	movs	r2, #0
    81b2:	4648      	mov	r0, r9
    81b4:	4641      	mov	r1, r8
    81b6:	f003 fdef 	bl	bd98 <__aeabi_dcmpeq>
    81ba:	0023      	movs	r3, r4
    81bc:	2800      	cmp	r0, #0
    81be:	d109      	bne.n	81d4 <_vfprintf_r+0x1124>
    81c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    81c2:	429c      	cmp	r4, r3
    81c4:	d906      	bls.n	81d4 <_vfprintf_r+0x1124>
    81c6:	2130      	movs	r1, #48	; 0x30
    81c8:	1c5a      	adds	r2, r3, #1
    81ca:	9223      	str	r2, [sp, #140]	; 0x8c
    81cc:	7019      	strb	r1, [r3, #0]
    81ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    81d0:	429c      	cmp	r4, r3
    81d2:	d8f9      	bhi.n	81c8 <_vfprintf_r+0x1118>
    81d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    81d6:	1a9b      	subs	r3, r3, r2
    81d8:	9314      	str	r3, [sp, #80]	; 0x50
    81da:	2d47      	cmp	r5, #71	; 0x47
    81dc:	d100      	bne.n	81e0 <_vfprintf_r+0x1130>
    81de:	e17f      	b.n	84e0 <_vfprintf_r+0x1430>
    81e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    81e2:	2b65      	cmp	r3, #101	; 0x65
    81e4:	dc00      	bgt.n	81e8 <_vfprintf_r+0x1138>
    81e6:	e2a9      	b.n	873c <_vfprintf_r+0x168c>
    81e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    81ea:	2b66      	cmp	r3, #102	; 0x66
    81ec:	d100      	bne.n	81f0 <_vfprintf_r+0x1140>
    81ee:	e286      	b.n	86fe <_vfprintf_r+0x164e>
    81f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    81f2:	9315      	str	r3, [sp, #84]	; 0x54
    81f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
    81f6:	9914      	ldr	r1, [sp, #80]	; 0x50
    81f8:	428a      	cmp	r2, r1
    81fa:	da00      	bge.n	81fe <_vfprintf_r+0x114e>
    81fc:	e25f      	b.n	86be <_vfprintf_r+0x160e>
    81fe:	9b08      	ldr	r3, [sp, #32]
    8200:	07db      	lsls	r3, r3, #31
    8202:	d500      	bpl.n	8206 <_vfprintf_r+0x1156>
    8204:	e2cb      	b.n	879e <_vfprintf_r+0x16ee>
    8206:	43d3      	mvns	r3, r2
    8208:	17db      	asrs	r3, r3, #31
    820a:	4013      	ands	r3, r2
    820c:	9210      	str	r2, [sp, #64]	; 0x40
    820e:	2267      	movs	r2, #103	; 0x67
    8210:	9213      	str	r2, [sp, #76]	; 0x4c
    8212:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8214:	2a00      	cmp	r2, #0
    8216:	d000      	beq.n	821a <_vfprintf_r+0x116a>
    8218:	e156      	b.n	84c8 <_vfprintf_r+0x1418>
    821a:	9309      	str	r3, [sp, #36]	; 0x24
    821c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    821e:	aa16      	add	r2, sp, #88	; 0x58
    8220:	9308      	str	r3, [sp, #32]
    8222:	2300      	movs	r3, #0
    8224:	7fd2      	ldrb	r2, [r2, #31]
    8226:	930b      	str	r3, [sp, #44]	; 0x2c
    8228:	4690      	mov	r8, r2
    822a:	f7ff f99c 	bl	7566 <_vfprintf_r+0x4b6>
    822e:	9b08      	ldr	r3, [sp, #32]
    8230:	06db      	lsls	r3, r3, #27
    8232:	d40c      	bmi.n	824e <_vfprintf_r+0x119e>
    8234:	9b08      	ldr	r3, [sp, #32]
    8236:	065b      	lsls	r3, r3, #25
    8238:	d509      	bpl.n	824e <_vfprintf_r+0x119e>
    823a:	4669      	mov	r1, sp
    823c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    823e:	8e09      	ldrh	r1, [r1, #48]	; 0x30
    8240:	681a      	ldr	r2, [r3, #0]
    8242:	3304      	adds	r3, #4
    8244:	9208      	str	r2, [sp, #32]
    8246:	8011      	strh	r1, [r2, #0]
    8248:	9311      	str	r3, [sp, #68]	; 0x44
    824a:	f7fe ff79 	bl	7140 <_vfprintf_r+0x90>
    824e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8250:	990c      	ldr	r1, [sp, #48]	; 0x30
    8252:	6813      	ldr	r3, [r2, #0]
    8254:	6019      	str	r1, [r3, #0]
    8256:	0013      	movs	r3, r2
    8258:	3304      	adds	r3, #4
    825a:	9311      	str	r3, [sp, #68]	; 0x44
    825c:	f7fe ff70 	bl	7140 <_vfprintf_r+0x90>
    8260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8262:	aa16      	add	r2, sp, #88	; 0x58
    8264:	77d0      	strb	r0, [r2, #31]
    8266:	2b00      	cmp	r3, #0
    8268:	da01      	bge.n	826e <_vfprintf_r+0x11be>
    826a:	f7fe ffe1 	bl	7230 <_vfprintf_r+0x180>
    826e:	2380      	movs	r3, #128	; 0x80
    8270:	9a08      	ldr	r2, [sp, #32]
    8272:	439a      	bics	r2, r3
    8274:	9208      	str	r2, [sp, #32]
    8276:	f7fe ffd6 	bl	7226 <_vfprintf_r+0x176>
    827a:	46cb      	mov	fp, r9
    827c:	46a1      	mov	r9, r4
    827e:	0014      	movs	r4, r2
    8280:	e647      	b.n	7f12 <_vfprintf_r+0xe62>
    8282:	003a      	movs	r2, r7
    8284:	4659      	mov	r1, fp
    8286:	9807      	ldr	r0, [sp, #28]
    8288:	f003 fa3a 	bl	b700 <__sprint_r>
    828c:	2800      	cmp	r0, #0
    828e:	d000      	beq.n	8292 <_vfprintf_r+0x11e2>
    8290:	e527      	b.n	7ce2 <_vfprintf_r+0xc32>
    8292:	68bc      	ldr	r4, [r7, #8]
    8294:	ae32      	add	r6, sp, #200	; 0xc8
    8296:	e47a      	b.n	7b8e <_vfprintf_r+0xade>
    8298:	4b29      	ldr	r3, [pc, #164]	; (8340 <_vfprintf_r+0x1290>)
    829a:	3401      	adds	r4, #1
    829c:	6033      	str	r3, [r6, #0]
    829e:	2301      	movs	r3, #1
    82a0:	6073      	str	r3, [r6, #4]
    82a2:	687b      	ldr	r3, [r7, #4]
    82a4:	60bc      	str	r4, [r7, #8]
    82a6:	3301      	adds	r3, #1
    82a8:	607b      	str	r3, [r7, #4]
    82aa:	2b07      	cmp	r3, #7
    82ac:	dd00      	ble.n	82b0 <_vfprintf_r+0x1200>
    82ae:	e0ad      	b.n	840c <_vfprintf_r+0x135c>
    82b0:	3608      	adds	r6, #8
    82b2:	2800      	cmp	r0, #0
    82b4:	d107      	bne.n	82c6 <_vfprintf_r+0x1216>
    82b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    82b8:	2b00      	cmp	r3, #0
    82ba:	d104      	bne.n	82c6 <_vfprintf_r+0x1216>
    82bc:	9b08      	ldr	r3, [sp, #32]
    82be:	07db      	lsls	r3, r3, #31
    82c0:	d401      	bmi.n	82c6 <_vfprintf_r+0x1216>
    82c2:	f7ff fb9e 	bl	7a02 <_vfprintf_r+0x952>
    82c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    82c8:	6033      	str	r3, [r6, #0]
    82ca:	9b18      	ldr	r3, [sp, #96]	; 0x60
    82cc:	1919      	adds	r1, r3, r4
    82ce:	6073      	str	r3, [r6, #4]
    82d0:	687b      	ldr	r3, [r7, #4]
    82d2:	60b9      	str	r1, [r7, #8]
    82d4:	3301      	adds	r3, #1
    82d6:	607b      	str	r3, [r7, #4]
    82d8:	2b07      	cmp	r3, #7
    82da:	dd00      	ble.n	82de <_vfprintf_r+0x122e>
    82dc:	e24c      	b.n	8778 <_vfprintf_r+0x16c8>
    82de:	0032      	movs	r2, r6
    82e0:	3208      	adds	r2, #8
    82e2:	4244      	negs	r4, r0
    82e4:	2c00      	cmp	r4, #0
    82e6:	dc00      	bgt.n	82ea <_vfprintf_r+0x123a>
    82e8:	e0de      	b.n	84a8 <_vfprintf_r+0x13f8>
    82ea:	4814      	ldr	r0, [pc, #80]	; (833c <_vfprintf_r+0x128c>)
    82ec:	4681      	mov	r9, r0
    82ee:	2c10      	cmp	r4, #16
    82f0:	dc00      	bgt.n	82f4 <_vfprintf_r+0x1244>
    82f2:	e121      	b.n	8538 <_vfprintf_r+0x1488>
    82f4:	2610      	movs	r6, #16
    82f6:	465d      	mov	r5, fp
    82f8:	e004      	b.n	8304 <_vfprintf_r+0x1254>
    82fa:	3208      	adds	r2, #8
    82fc:	3c10      	subs	r4, #16
    82fe:	2c10      	cmp	r4, #16
    8300:	dc00      	bgt.n	8304 <_vfprintf_r+0x1254>
    8302:	e118      	b.n	8536 <_vfprintf_r+0x1486>
    8304:	4648      	mov	r0, r9
    8306:	3110      	adds	r1, #16
    8308:	3301      	adds	r3, #1
    830a:	6010      	str	r0, [r2, #0]
    830c:	6056      	str	r6, [r2, #4]
    830e:	60b9      	str	r1, [r7, #8]
    8310:	607b      	str	r3, [r7, #4]
    8312:	2b07      	cmp	r3, #7
    8314:	ddf1      	ble.n	82fa <_vfprintf_r+0x124a>
    8316:	003a      	movs	r2, r7
    8318:	0029      	movs	r1, r5
    831a:	9807      	ldr	r0, [sp, #28]
    831c:	f003 f9f0 	bl	b700 <__sprint_r>
    8320:	2800      	cmp	r0, #0
    8322:	d000      	beq.n	8326 <_vfprintf_r+0x1276>
    8324:	e260      	b.n	87e8 <_vfprintf_r+0x1738>
    8326:	68b9      	ldr	r1, [r7, #8]
    8328:	687b      	ldr	r3, [r7, #4]
    832a:	aa32      	add	r2, sp, #200	; 0xc8
    832c:	e7e6      	b.n	82fc <_vfprintf_r+0x124c>
    832e:	9811      	ldr	r0, [sp, #68]	; 0x44
    8330:	f7ff faea 	bl	7908 <_vfprintf_r+0x858>
    8334:	2001      	movs	r0, #1
    8336:	4240      	negs	r0, r0
    8338:	f7fe ff9c 	bl	7274 <_vfprintf_r+0x1c4>
    833c:	0000df64 	.word	0x0000df64
    8340:	0000dfb4 	.word	0x0000dfb4
    8344:	9b07      	ldr	r3, [sp, #28]
    8346:	46d8      	mov	r8, fp
    8348:	469b      	mov	fp, r3
    834a:	68bb      	ldr	r3, [r7, #8]
    834c:	2b00      	cmp	r3, #0
    834e:	d100      	bne.n	8352 <_vfprintf_r+0x12a2>
    8350:	e49a      	b.n	7c88 <_vfprintf_r+0xbd8>
    8352:	003a      	movs	r2, r7
    8354:	4641      	mov	r1, r8
    8356:	4658      	mov	r0, fp
    8358:	f003 f9d2 	bl	b700 <__sprint_r>
    835c:	e494      	b.n	7c88 <_vfprintf_r+0xbd8>
    835e:	4be0      	ldr	r3, [pc, #896]	; (86e0 <_vfprintf_r+0x1630>)
    8360:	9312      	str	r3, [sp, #72]	; 0x48
    8362:	f7ff f88c 	bl	747e <_vfprintf_r+0x3ce>
    8366:	9811      	ldr	r0, [sp, #68]	; 0x44
    8368:	0003      	movs	r3, r0
    836a:	8800      	ldrh	r0, [r0, #0]
    836c:	3304      	adds	r3, #4
    836e:	900e      	str	r0, [sp, #56]	; 0x38
    8370:	2000      	movs	r0, #0
    8372:	900f      	str	r0, [sp, #60]	; 0x3c
    8374:	a816      	add	r0, sp, #88	; 0x58
    8376:	77c2      	strb	r2, [r0, #31]
    8378:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    837a:	2a00      	cmp	r2, #0
    837c:	da00      	bge.n	8380 <_vfprintf_r+0x12d0>
    837e:	e215      	b.n	87ac <_vfprintf_r+0x16fc>
    8380:	2280      	movs	r2, #128	; 0x80
    8382:	4391      	bics	r1, r2
    8384:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8386:	9108      	str	r1, [sp, #32]
    8388:	9311      	str	r3, [sp, #68]	; 0x44
    838a:	2a00      	cmp	r2, #0
    838c:	d001      	beq.n	8392 <_vfprintf_r+0x12e2>
    838e:	f7ff f8b6 	bl	74fe <_vfprintf_r+0x44e>
    8392:	e571      	b.n	7e78 <_vfprintf_r+0xdc8>
    8394:	9811      	ldr	r0, [sp, #68]	; 0x44
    8396:	0003      	movs	r3, r0
    8398:	8800      	ldrh	r0, [r0, #0]
    839a:	3304      	adds	r3, #4
    839c:	900e      	str	r0, [sp, #56]	; 0x38
    839e:	2000      	movs	r0, #0
    83a0:	900f      	str	r0, [sp, #60]	; 0x3c
    83a2:	a816      	add	r0, sp, #88	; 0x58
    83a4:	77c2      	strb	r2, [r0, #31]
    83a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    83a8:	2a00      	cmp	r2, #0
    83aa:	da00      	bge.n	83ae <_vfprintf_r+0x12fe>
    83ac:	e208      	b.n	87c0 <_vfprintf_r+0x1710>
    83ae:	2280      	movs	r2, #128	; 0x80
    83b0:	9311      	str	r3, [sp, #68]	; 0x44
    83b2:	2300      	movs	r3, #0
    83b4:	4391      	bics	r1, r2
    83b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    83b8:	9108      	str	r1, [sp, #32]
    83ba:	4698      	mov	r8, r3
    83bc:	2a00      	cmp	r2, #0
    83be:	d001      	beq.n	83c4 <_vfprintf_r+0x1314>
    83c0:	f7fe ffef 	bl	73a2 <_vfprintf_r+0x2f2>
    83c4:	e4aa      	b.n	7d1c <_vfprintf_r+0xc6c>
    83c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    83c8:	881a      	ldrh	r2, [r3, #0]
    83ca:	f7ff fa33 	bl	7834 <_vfprintf_r+0x784>
    83ce:	ab23      	add	r3, sp, #140	; 0x8c
    83d0:	9304      	str	r3, [sp, #16]
    83d2:	ab20      	add	r3, sp, #128	; 0x80
    83d4:	9303      	str	r3, [sp, #12]
    83d6:	ab1f      	add	r3, sp, #124	; 0x7c
    83d8:	9302      	str	r3, [sp, #8]
    83da:	2303      	movs	r3, #3
    83dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    83de:	9300      	str	r3, [sp, #0]
    83e0:	9401      	str	r4, [sp, #4]
    83e2:	464a      	mov	r2, r9
    83e4:	4643      	mov	r3, r8
    83e6:	9807      	ldr	r0, [sp, #28]
    83e8:	f000 fbd6 	bl	8b98 <_dtoa_r>
    83ec:	46a2      	mov	sl, r4
    83ee:	9012      	str	r0, [sp, #72]	; 0x48
    83f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    83f2:	4453      	add	r3, sl
    83f4:	001c      	movs	r4, r3
    83f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    83f8:	2b46      	cmp	r3, #70	; 0x46
    83fa:	d000      	beq.n	83fe <_vfprintf_r+0x134e>
    83fc:	e6d7      	b.n	81ae <_vfprintf_r+0x10fe>
    83fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8400:	781b      	ldrb	r3, [r3, #0]
    8402:	2b30      	cmp	r3, #48	; 0x30
    8404:	d015      	beq.n	8432 <_vfprintf_r+0x1382>
    8406:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8408:	18e4      	adds	r4, r4, r3
    840a:	e6d0      	b.n	81ae <_vfprintf_r+0x10fe>
    840c:	003a      	movs	r2, r7
    840e:	4659      	mov	r1, fp
    8410:	9807      	ldr	r0, [sp, #28]
    8412:	f003 f975 	bl	b700 <__sprint_r>
    8416:	2800      	cmp	r0, #0
    8418:	d000      	beq.n	841c <_vfprintf_r+0x136c>
    841a:	e462      	b.n	7ce2 <_vfprintf_r+0xc32>
    841c:	981f      	ldr	r0, [sp, #124]	; 0x7c
    841e:	68bc      	ldr	r4, [r7, #8]
    8420:	ae32      	add	r6, sp, #200	; 0xc8
    8422:	e746      	b.n	82b2 <_vfprintf_r+0x1202>
    8424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8426:	2b00      	cmp	r3, #0
    8428:	d000      	beq.n	842c <_vfprintf_r+0x137c>
    842a:	e68a      	b.n	8142 <_vfprintf_r+0x1092>
    842c:	3301      	adds	r3, #1
    842e:	930b      	str	r3, [sp, #44]	; 0x2c
    8430:	e687      	b.n	8142 <_vfprintf_r+0x1092>
    8432:	2200      	movs	r2, #0
    8434:	2300      	movs	r3, #0
    8436:	4648      	mov	r0, r9
    8438:	4641      	mov	r1, r8
    843a:	f003 fcad 	bl	bd98 <__aeabi_dcmpeq>
    843e:	2800      	cmp	r0, #0
    8440:	d1e1      	bne.n	8406 <_vfprintf_r+0x1356>
    8442:	2301      	movs	r3, #1
    8444:	4652      	mov	r2, sl
    8446:	1a9b      	subs	r3, r3, r2
    8448:	931f      	str	r3, [sp, #124]	; 0x7c
    844a:	18e4      	adds	r4, r4, r3
    844c:	e6af      	b.n	81ae <_vfprintf_r+0x10fe>
    844e:	2220      	movs	r2, #32
    8450:	9b08      	ldr	r3, [sp, #32]
    8452:	3101      	adds	r1, #1
    8454:	4313      	orrs	r3, r2
    8456:	9308      	str	r3, [sp, #32]
    8458:	780b      	ldrb	r3, [r1, #0]
    845a:	f7fe feac 	bl	71b6 <_vfprintf_r+0x106>
    845e:	003a      	movs	r2, r7
    8460:	4659      	mov	r1, fp
    8462:	9807      	ldr	r0, [sp, #28]
    8464:	f003 f94c 	bl	b700 <__sprint_r>
    8468:	2800      	cmp	r0, #0
    846a:	d000      	beq.n	846e <_vfprintf_r+0x13be>
    846c:	e439      	b.n	7ce2 <_vfprintf_r+0xc32>
    846e:	68bc      	ldr	r4, [r7, #8]
    8470:	ae32      	add	r6, sp, #200	; 0xc8
    8472:	f7ff fba3 	bl	7bbc <_vfprintf_r+0xb0c>
    8476:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8478:	ab32      	add	r3, sp, #200	; 0xc8
    847a:	1a9b      	subs	r3, r3, r2
    847c:	9310      	str	r3, [sp, #64]	; 0x40
    847e:	f7ff f869 	bl	7554 <_vfprintf_r+0x4a4>
    8482:	9812      	ldr	r0, [sp, #72]	; 0x48
    8484:	f7fe fde0 	bl	7048 <strlen>
    8488:	0002      	movs	r2, r0
    848a:	9010      	str	r0, [sp, #64]	; 0x40
    848c:	0003      	movs	r3, r0
    848e:	f7ff f91b 	bl	76c8 <_vfprintf_r+0x618>
    8492:	003a      	movs	r2, r7
    8494:	4659      	mov	r1, fp
    8496:	9807      	ldr	r0, [sp, #28]
    8498:	f003 f932 	bl	b700 <__sprint_r>
    849c:	2800      	cmp	r0, #0
    849e:	d000      	beq.n	84a2 <_vfprintf_r+0x13f2>
    84a0:	e41f      	b.n	7ce2 <_vfprintf_r+0xc32>
    84a2:	68b9      	ldr	r1, [r7, #8]
    84a4:	687b      	ldr	r3, [r7, #4]
    84a6:	aa32      	add	r2, sp, #200	; 0xc8
    84a8:	9812      	ldr	r0, [sp, #72]	; 0x48
    84aa:	3301      	adds	r3, #1
    84ac:	6010      	str	r0, [r2, #0]
    84ae:	9814      	ldr	r0, [sp, #80]	; 0x50
    84b0:	607b      	str	r3, [r7, #4]
    84b2:	1844      	adds	r4, r0, r1
    84b4:	6050      	str	r0, [r2, #4]
    84b6:	60bc      	str	r4, [r7, #8]
    84b8:	2b07      	cmp	r3, #7
    84ba:	dd01      	ble.n	84c0 <_vfprintf_r+0x1410>
    84bc:	f7ff fb43 	bl	7b46 <_vfprintf_r+0xa96>
    84c0:	3208      	adds	r2, #8
    84c2:	0016      	movs	r6, r2
    84c4:	f7ff fa9d 	bl	7a02 <_vfprintf_r+0x952>
    84c8:	9309      	str	r3, [sp, #36]	; 0x24
    84ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    84cc:	222d      	movs	r2, #45	; 0x2d
    84ce:	9308      	str	r3, [sp, #32]
    84d0:	232d      	movs	r3, #45	; 0x2d
    84d2:	4698      	mov	r8, r3
    84d4:	2300      	movs	r3, #0
    84d6:	a916      	add	r1, sp, #88	; 0x58
    84d8:	77ca      	strb	r2, [r1, #31]
    84da:	930b      	str	r3, [sp, #44]	; 0x2c
    84dc:	f7ff f846 	bl	756c <_vfprintf_r+0x4bc>
    84e0:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
    84e2:	1ce3      	adds	r3, r4, #3
    84e4:	db33      	blt.n	854e <_vfprintf_r+0x149e>
    84e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    84e8:	42a3      	cmp	r3, r4
    84ea:	db30      	blt.n	854e <_vfprintf_r+0x149e>
    84ec:	9415      	str	r4, [sp, #84]	; 0x54
    84ee:	e681      	b.n	81f4 <_vfprintf_r+0x1144>
    84f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    84f2:	2b09      	cmp	r3, #9
    84f4:	d901      	bls.n	84fa <_vfprintf_r+0x144a>
    84f6:	f7fe ff59 	bl	73ac <_vfprintf_r+0x2fc>
    84fa:	e417      	b.n	7d2c <_vfprintf_r+0xc7c>
    84fc:	2101      	movs	r1, #1
    84fe:	4249      	negs	r1, r1
    8500:	f7fe feff 	bl	7302 <_vfprintf_r+0x252>
    8504:	003a      	movs	r2, r7
    8506:	4659      	mov	r1, fp
    8508:	9807      	ldr	r0, [sp, #28]
    850a:	f003 f8f9 	bl	b700 <__sprint_r>
    850e:	2800      	cmp	r0, #0
    8510:	d001      	beq.n	8516 <_vfprintf_r+0x1466>
    8512:	f7ff fbe6 	bl	7ce2 <_vfprintf_r+0xc32>
    8516:	68bc      	ldr	r4, [r7, #8]
    8518:	ae32      	add	r6, sp, #200	; 0xc8
    851a:	e44f      	b.n	7dbc <_vfprintf_r+0xd0c>
    851c:	003a      	movs	r2, r7
    851e:	4659      	mov	r1, fp
    8520:	9807      	ldr	r0, [sp, #28]
    8522:	f003 f8ed 	bl	b700 <__sprint_r>
    8526:	2800      	cmp	r0, #0
    8528:	d001      	beq.n	852e <_vfprintf_r+0x147e>
    852a:	f7ff fbda 	bl	7ce2 <_vfprintf_r+0xc32>
    852e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8530:	68bc      	ldr	r4, [r7, #8]
    8532:	ae32      	add	r6, sp, #200	; 0xc8
    8534:	e531      	b.n	7f9a <_vfprintf_r+0xeea>
    8536:	46ab      	mov	fp, r5
    8538:	4648      	mov	r0, r9
    853a:	1909      	adds	r1, r1, r4
    853c:	3301      	adds	r3, #1
    853e:	6010      	str	r0, [r2, #0]
    8540:	6054      	str	r4, [r2, #4]
    8542:	60b9      	str	r1, [r7, #8]
    8544:	607b      	str	r3, [r7, #4]
    8546:	2b07      	cmp	r3, #7
    8548:	dca3      	bgt.n	8492 <_vfprintf_r+0x13e2>
    854a:	3208      	adds	r2, #8
    854c:	e7ac      	b.n	84a8 <_vfprintf_r+0x13f8>
    854e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8550:	3b02      	subs	r3, #2
    8552:	9313      	str	r3, [sp, #76]	; 0x4c
    8554:	466b      	mov	r3, sp
    8556:	224c      	movs	r2, #76	; 0x4c
    8558:	189b      	adds	r3, r3, r2
    855a:	781b      	ldrb	r3, [r3, #0]
    855c:	3c01      	subs	r4, #1
    855e:	ad21      	add	r5, sp, #132	; 0x84
    8560:	941f      	str	r4, [sp, #124]	; 0x7c
    8562:	702b      	strb	r3, [r5, #0]
    8564:	2c00      	cmp	r4, #0
    8566:	da00      	bge.n	856a <_vfprintf_r+0x14ba>
    8568:	e155      	b.n	8816 <_vfprintf_r+0x1766>
    856a:	232b      	movs	r3, #43	; 0x2b
    856c:	706b      	strb	r3, [r5, #1]
    856e:	2c09      	cmp	r4, #9
    8570:	dc00      	bgt.n	8574 <_vfprintf_r+0x14c4>
    8572:	e11d      	b.n	87b0 <_vfprintf_r+0x1700>
    8574:	aa16      	add	r2, sp, #88	; 0x58
    8576:	233b      	movs	r3, #59	; 0x3b
    8578:	4694      	mov	ip, r2
    857a:	4463      	add	r3, ip
    857c:	46b0      	mov	r8, r6
    857e:	469a      	mov	sl, r3
    8580:	001e      	movs	r6, r3
    8582:	0020      	movs	r0, r4
    8584:	210a      	movs	r1, #10
    8586:	f003 fbf3 	bl	bd70 <__aeabi_idivmod>
    858a:	3e01      	subs	r6, #1
    858c:	3130      	adds	r1, #48	; 0x30
    858e:	7031      	strb	r1, [r6, #0]
    8590:	0020      	movs	r0, r4
    8592:	210a      	movs	r1, #10
    8594:	f003 fb06 	bl	bba4 <__aeabi_idiv>
    8598:	1e04      	subs	r4, r0, #0
    859a:	2c09      	cmp	r4, #9
    859c:	dcf1      	bgt.n	8582 <_vfprintf_r+0x14d2>
    859e:	0033      	movs	r3, r6
    85a0:	3430      	adds	r4, #48	; 0x30
    85a2:	1e5a      	subs	r2, r3, #1
    85a4:	b2e4      	uxtb	r4, r4
    85a6:	4646      	mov	r6, r8
    85a8:	7014      	strb	r4, [r2, #0]
    85aa:	4698      	mov	r8, r3
    85ac:	4552      	cmp	r2, sl
    85ae:	d300      	bcc.n	85b2 <_vfprintf_r+0x1502>
    85b0:	e164      	b.n	887c <_vfprintf_r+0x17cc>
    85b2:	4641      	mov	r1, r8
    85b4:	1a79      	subs	r1, r7, r1
    85b6:	002b      	movs	r3, r5
    85b8:	1869      	adds	r1, r5, r1
    85ba:	e000      	b.n	85be <_vfprintf_r+0x150e>
    85bc:	7814      	ldrb	r4, [r2, #0]
    85be:	709c      	strb	r4, [r3, #2]
    85c0:	3301      	adds	r3, #1
    85c2:	3201      	adds	r2, #1
    85c4:	428b      	cmp	r3, r1
    85c6:	d1f9      	bne.n	85bc <_vfprintf_r+0x150c>
    85c8:	a916      	add	r1, sp, #88	; 0x58
    85ca:	468c      	mov	ip, r1
    85cc:	222e      	movs	r2, #46	; 0x2e
    85ce:	4643      	mov	r3, r8
    85d0:	4462      	add	r2, ip
    85d2:	4694      	mov	ip, r2
    85d4:	1afb      	subs	r3, r7, r3
    85d6:	4463      	add	r3, ip
    85d8:	9914      	ldr	r1, [sp, #80]	; 0x50
    85da:	1b5b      	subs	r3, r3, r5
    85dc:	000a      	movs	r2, r1
    85de:	469c      	mov	ip, r3
    85e0:	4462      	add	r2, ip
    85e2:	931a      	str	r3, [sp, #104]	; 0x68
    85e4:	9210      	str	r2, [sp, #64]	; 0x40
    85e6:	2901      	cmp	r1, #1
    85e8:	dc00      	bgt.n	85ec <_vfprintf_r+0x153c>
    85ea:	e11d      	b.n	8828 <_vfprintf_r+0x1778>
    85ec:	9a18      	ldr	r2, [sp, #96]	; 0x60
    85ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
    85f0:	4694      	mov	ip, r2
    85f2:	4463      	add	r3, ip
    85f4:	001a      	movs	r2, r3
    85f6:	9310      	str	r3, [sp, #64]	; 0x40
    85f8:	43db      	mvns	r3, r3
    85fa:	17db      	asrs	r3, r3, #31
    85fc:	4013      	ands	r3, r2
    85fe:	2200      	movs	r2, #0
    8600:	9215      	str	r2, [sp, #84]	; 0x54
    8602:	e606      	b.n	8212 <_vfprintf_r+0x1162>
    8604:	003a      	movs	r2, r7
    8606:	4659      	mov	r1, fp
    8608:	9807      	ldr	r0, [sp, #28]
    860a:	f003 f879 	bl	b700 <__sprint_r>
    860e:	2800      	cmp	r0, #0
    8610:	d001      	beq.n	8616 <_vfprintf_r+0x1566>
    8612:	f7ff fb66 	bl	7ce2 <_vfprintf_r+0xc32>
    8616:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8618:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    861a:	68bc      	ldr	r4, [r7, #8]
    861c:	1a9b      	subs	r3, r3, r2
    861e:	ae32      	add	r6, sp, #200	; 0xc8
    8620:	e4d4      	b.n	7fcc <_vfprintf_r+0xf1c>
    8622:	232d      	movs	r3, #45	; 0x2d
    8624:	4698      	mov	r8, r3
    8626:	f7fe febc 	bl	73a2 <_vfprintf_r+0x2f2>
    862a:	46c8      	mov	r8, r9
    862c:	f7ff fb2c 	bl	7c88 <_vfprintf_r+0xbd8>
    8630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8632:	2b06      	cmp	r3, #6
    8634:	d900      	bls.n	8638 <_vfprintf_r+0x1588>
    8636:	2306      	movs	r3, #6
    8638:	001a      	movs	r2, r3
    863a:	9310      	str	r3, [sp, #64]	; 0x40
    863c:	43db      	mvns	r3, r3
    863e:	17db      	asrs	r3, r3, #31
    8640:	401a      	ands	r2, r3
    8642:	2300      	movs	r3, #0
    8644:	4698      	mov	r8, r3
    8646:	930b      	str	r3, [sp, #44]	; 0x2c
    8648:	9315      	str	r3, [sp, #84]	; 0x54
    864a:	4b26      	ldr	r3, [pc, #152]	; (86e4 <_vfprintf_r+0x1634>)
    864c:	9209      	str	r2, [sp, #36]	; 0x24
    864e:	9411      	str	r4, [sp, #68]	; 0x44
    8650:	9312      	str	r3, [sp, #72]	; 0x48
    8652:	f7fe ff8e 	bl	7572 <_vfprintf_r+0x4c2>
    8656:	003a      	movs	r2, r7
    8658:	4659      	mov	r1, fp
    865a:	9807      	ldr	r0, [sp, #28]
    865c:	f003 f850 	bl	b700 <__sprint_r>
    8660:	2800      	cmp	r0, #0
    8662:	d001      	beq.n	8668 <_vfprintf_r+0x15b8>
    8664:	f7ff fb3d 	bl	7ce2 <_vfprintf_r+0xc32>
    8668:	68bc      	ldr	r4, [r7, #8]
    866a:	ae32      	add	r6, sp, #200	; 0xc8
    866c:	e489      	b.n	7f82 <_vfprintf_r+0xed2>
    866e:	2320      	movs	r3, #32
    8670:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    8672:	439d      	bics	r5, r3
    8674:	3b1a      	subs	r3, #26
    8676:	930b      	str	r3, [sp, #44]	; 0x2c
    8678:	e563      	b.n	8142 <_vfprintf_r+0x1092>
    867a:	ab23      	add	r3, sp, #140	; 0x8c
    867c:	9304      	str	r3, [sp, #16]
    867e:	ab20      	add	r3, sp, #128	; 0x80
    8680:	9303      	str	r3, [sp, #12]
    8682:	ab1f      	add	r3, sp, #124	; 0x7c
    8684:	9302      	str	r3, [sp, #8]
    8686:	2303      	movs	r3, #3
    8688:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    868a:	9300      	str	r3, [sp, #0]
    868c:	9401      	str	r4, [sp, #4]
    868e:	464a      	mov	r2, r9
    8690:	4643      	mov	r3, r8
    8692:	9807      	ldr	r0, [sp, #28]
    8694:	f000 fa80 	bl	8b98 <_dtoa_r>
    8698:	46a4      	mov	ip, r4
    869a:	0001      	movs	r1, r0
    869c:	0022      	movs	r2, r4
    869e:	4461      	add	r1, ip
    86a0:	9012      	str	r0, [sp, #72]	; 0x48
    86a2:	000c      	movs	r4, r1
    86a4:	4692      	mov	sl, r2
    86a6:	e6aa      	b.n	83fe <_vfprintf_r+0x134e>
    86a8:	232d      	movs	r3, #45	; 0x2d
    86aa:	aa16      	add	r2, sp, #88	; 0x58
    86ac:	77d3      	strb	r3, [r2, #31]
    86ae:	4698      	mov	r8, r3
    86b0:	f7fe fede 	bl	7470 <_vfprintf_r+0x3c0>
    86b4:	2300      	movs	r3, #0
    86b6:	9008      	str	r0, [sp, #32]
    86b8:	4698      	mov	r8, r3
    86ba:	f7ff f881 	bl	77c0 <_vfprintf_r+0x710>
    86be:	9a18      	ldr	r2, [sp, #96]	; 0x60
    86c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    86c2:	4694      	mov	ip, r2
    86c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
    86c6:	4463      	add	r3, ip
    86c8:	9310      	str	r3, [sp, #64]	; 0x40
    86ca:	2a00      	cmp	r2, #0
    86cc:	dc00      	bgt.n	86d0 <_vfprintf_r+0x1620>
    86ce:	e0a6      	b.n	881e <_vfprintf_r+0x176e>
    86d0:	001a      	movs	r2, r3
    86d2:	43db      	mvns	r3, r3
    86d4:	17db      	asrs	r3, r3, #31
    86d6:	4013      	ands	r3, r2
    86d8:	2267      	movs	r2, #103	; 0x67
    86da:	9213      	str	r2, [sp, #76]	; 0x4c
    86dc:	e599      	b.n	8212 <_vfprintf_r+0x1162>
    86de:	46c0      	nop			; (mov r8, r8)
    86e0:	0000df74 	.word	0x0000df74
    86e4:	0000dfac 	.word	0x0000dfac
    86e8:	2280      	movs	r2, #128	; 0x80
    86ea:	0612      	lsls	r2, r2, #24
    86ec:	4694      	mov	ip, r2
    86ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
    86f0:	4699      	mov	r9, r3
    86f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    86f4:	4463      	add	r3, ip
    86f6:	4698      	mov	r8, r3
    86f8:	232d      	movs	r3, #45	; 0x2d
    86fa:	9309      	str	r3, [sp, #36]	; 0x24
    86fc:	e52f      	b.n	815e <_vfprintf_r+0x10ae>
    86fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8700:	9315      	str	r3, [sp, #84]	; 0x54
    8702:	2b00      	cmp	r3, #0
    8704:	dc00      	bgt.n	8708 <_vfprintf_r+0x1658>
    8706:	e0a4      	b.n	8852 <_vfprintf_r+0x17a2>
    8708:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    870a:	2a00      	cmp	r2, #0
    870c:	d15d      	bne.n	87ca <_vfprintf_r+0x171a>
    870e:	9a08      	ldr	r2, [sp, #32]
    8710:	07d2      	lsls	r2, r2, #31
    8712:	d45a      	bmi.n	87ca <_vfprintf_r+0x171a>
    8714:	9310      	str	r3, [sp, #64]	; 0x40
    8716:	e57c      	b.n	8212 <_vfprintf_r+0x1162>
    8718:	9b12      	ldr	r3, [sp, #72]	; 0x48
    871a:	4453      	add	r3, sl
    871c:	001c      	movs	r4, r3
    871e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8720:	2b47      	cmp	r3, #71	; 0x47
    8722:	d000      	beq.n	8726 <_vfprintf_r+0x1676>
    8724:	e543      	b.n	81ae <_vfprintf_r+0x10fe>
    8726:	9b08      	ldr	r3, [sp, #32]
    8728:	07db      	lsls	r3, r3, #31
    872a:	d500      	bpl.n	872e <_vfprintf_r+0x167e>
    872c:	e660      	b.n	83f0 <_vfprintf_r+0x1340>
    872e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    8730:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8732:	1a9b      	subs	r3, r3, r2
    8734:	9314      	str	r3, [sp, #80]	; 0x50
    8736:	2d47      	cmp	r5, #71	; 0x47
    8738:	d100      	bne.n	873c <_vfprintf_r+0x168c>
    873a:	e6d1      	b.n	84e0 <_vfprintf_r+0x1430>
    873c:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
    873e:	e709      	b.n	8554 <_vfprintf_r+0x14a4>
    8740:	ab16      	add	r3, sp, #88	; 0x58
    8742:	7fdb      	ldrb	r3, [r3, #31]
    8744:	9411      	str	r4, [sp, #68]	; 0x44
    8746:	4698      	mov	r8, r3
    8748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    874a:	9309      	str	r3, [sp, #36]	; 0x24
    874c:	9310      	str	r3, [sp, #64]	; 0x40
    874e:	2300      	movs	r3, #0
    8750:	930b      	str	r3, [sp, #44]	; 0x2c
    8752:	9315      	str	r3, [sp, #84]	; 0x54
    8754:	f7fe ff07 	bl	7566 <_vfprintf_r+0x4b6>
    8758:	4698      	mov	r8, r3
    875a:	9b08      	ldr	r3, [sp, #32]
    875c:	07db      	lsls	r3, r3, #31
    875e:	d505      	bpl.n	876c <_vfprintf_r+0x16bc>
    8760:	2130      	movs	r1, #48	; 0x30
    8762:	2327      	movs	r3, #39	; 0x27
    8764:	aa28      	add	r2, sp, #160	; 0xa0
    8766:	54d1      	strb	r1, [r2, r3]
    8768:	f7ff fae5 	bl	7d36 <_vfprintf_r+0xc86>
    876c:	2300      	movs	r3, #0
    876e:	9310      	str	r3, [sp, #64]	; 0x40
    8770:	ab32      	add	r3, sp, #200	; 0xc8
    8772:	9312      	str	r3, [sp, #72]	; 0x48
    8774:	f7fe feee 	bl	7554 <_vfprintf_r+0x4a4>
    8778:	003a      	movs	r2, r7
    877a:	4659      	mov	r1, fp
    877c:	9807      	ldr	r0, [sp, #28]
    877e:	f002 ffbf 	bl	b700 <__sprint_r>
    8782:	2800      	cmp	r0, #0
    8784:	d001      	beq.n	878a <_vfprintf_r+0x16da>
    8786:	f7ff faac 	bl	7ce2 <_vfprintf_r+0xc32>
    878a:	981f      	ldr	r0, [sp, #124]	; 0x7c
    878c:	68b9      	ldr	r1, [r7, #8]
    878e:	687b      	ldr	r3, [r7, #4]
    8790:	aa32      	add	r2, sp, #200	; 0xc8
    8792:	e5a6      	b.n	82e2 <_vfprintf_r+0x1232>
    8794:	2200      	movs	r2, #0
    8796:	4641      	mov	r1, r8
    8798:	920b      	str	r2, [sp, #44]	; 0x2c
    879a:	f7fe fd0d 	bl	71b8 <_vfprintf_r+0x108>
    879e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    87a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    87a2:	4694      	mov	ip, r2
    87a4:	4463      	add	r3, ip
    87a6:	001a      	movs	r2, r3
    87a8:	9310      	str	r3, [sp, #64]	; 0x40
    87aa:	e792      	b.n	86d2 <_vfprintf_r+0x1622>
    87ac:	9311      	str	r3, [sp, #68]	; 0x44
    87ae:	e49b      	b.n	80e8 <_vfprintf_r+0x1038>
    87b0:	2330      	movs	r3, #48	; 0x30
    87b2:	3430      	adds	r4, #48	; 0x30
    87b4:	70ab      	strb	r3, [r5, #2]
    87b6:	70ec      	strb	r4, [r5, #3]
    87b8:	ab22      	add	r3, sp, #136	; 0x88
    87ba:	e70d      	b.n	85d8 <_vfprintf_r+0x1528>
    87bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    87be:	e509      	b.n	81d4 <_vfprintf_r+0x1124>
    87c0:	9311      	str	r3, [sp, #68]	; 0x44
    87c2:	2300      	movs	r3, #0
    87c4:	4698      	mov	r8, r3
    87c6:	f7ff fbc4 	bl	7f52 <_vfprintf_r+0xea2>
    87ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
    87cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    87ce:	4694      	mov	ip, r2
    87d0:	4463      	add	r3, ip
    87d2:	0018      	movs	r0, r3
    87d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    87d6:	469c      	mov	ip, r3
    87d8:	4484      	add	ip, r0
    87da:	4663      	mov	r3, ip
    87dc:	9310      	str	r3, [sp, #64]	; 0x40
    87de:	43db      	mvns	r3, r3
    87e0:	4662      	mov	r2, ip
    87e2:	17db      	asrs	r3, r3, #31
    87e4:	4013      	ands	r3, r2
    87e6:	e514      	b.n	8212 <_vfprintf_r+0x1162>
    87e8:	46a8      	mov	r8, r5
    87ea:	f7ff fa4d 	bl	7c88 <_vfprintf_r+0xbd8>
    87ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    87f0:	2b47      	cmp	r3, #71	; 0x47
    87f2:	dc20      	bgt.n	8836 <_vfprintf_r+0x1786>
    87f4:	4b34      	ldr	r3, [pc, #208]	; (88c8 <_vfprintf_r+0x1818>)
    87f6:	9312      	str	r3, [sp, #72]	; 0x48
    87f8:	2380      	movs	r3, #128	; 0x80
    87fa:	9a08      	ldr	r2, [sp, #32]
    87fc:	439a      	bics	r2, r3
    87fe:	ab16      	add	r3, sp, #88	; 0x58
    8800:	7fdb      	ldrb	r3, [r3, #31]
    8802:	9208      	str	r2, [sp, #32]
    8804:	4698      	mov	r8, r3
    8806:	2303      	movs	r3, #3
    8808:	f7fe fe3e 	bl	7488 <_vfprintf_r+0x3d8>
    880c:	4a2f      	ldr	r2, [pc, #188]	; (88cc <_vfprintf_r+0x181c>)
    880e:	687b      	ldr	r3, [r7, #4]
    8810:	4691      	mov	r9, r2
    8812:	f7ff fbaa 	bl	7f6a <_vfprintf_r+0xeba>
    8816:	232d      	movs	r3, #45	; 0x2d
    8818:	4264      	negs	r4, r4
    881a:	706b      	strb	r3, [r5, #1]
    881c:	e6a7      	b.n	856e <_vfprintf_r+0x14be>
    881e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8820:	9a15      	ldr	r2, [sp, #84]	; 0x54
    8822:	1a98      	subs	r0, r3, r2
    8824:	1c43      	adds	r3, r0, #1
    8826:	e7be      	b.n	87a6 <_vfprintf_r+0x16f6>
    8828:	9b08      	ldr	r3, [sp, #32]
    882a:	07db      	lsls	r3, r3, #31
    882c:	d500      	bpl.n	8830 <_vfprintf_r+0x1780>
    882e:	e6dd      	b.n	85ec <_vfprintf_r+0x153c>
    8830:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8832:	0013      	movs	r3, r2
    8834:	e6e0      	b.n	85f8 <_vfprintf_r+0x1548>
    8836:	4b26      	ldr	r3, [pc, #152]	; (88d0 <_vfprintf_r+0x1820>)
    8838:	9312      	str	r3, [sp, #72]	; 0x48
    883a:	e7dd      	b.n	87f8 <_vfprintf_r+0x1748>
    883c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    883e:	1d1a      	adds	r2, r3, #4
    8840:	681b      	ldr	r3, [r3, #0]
    8842:	930b      	str	r3, [sp, #44]	; 0x2c
    8844:	2b00      	cmp	r3, #0
    8846:	db37      	blt.n	88b8 <_vfprintf_r+0x1808>
    8848:	784b      	ldrb	r3, [r1, #1]
    884a:	9211      	str	r2, [sp, #68]	; 0x44
    884c:	4641      	mov	r1, r8
    884e:	f7fe fcb2 	bl	71b6 <_vfprintf_r+0x106>
    8852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8854:	2b00      	cmp	r3, #0
    8856:	d102      	bne.n	885e <_vfprintf_r+0x17ae>
    8858:	9b08      	ldr	r3, [sp, #32]
    885a:	07db      	lsls	r3, r3, #31
    885c:	d502      	bpl.n	8864 <_vfprintf_r+0x17b4>
    885e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8860:	1c58      	adds	r0, r3, #1
    8862:	e7b7      	b.n	87d4 <_vfprintf_r+0x1724>
    8864:	2201      	movs	r2, #1
    8866:	2301      	movs	r3, #1
    8868:	9210      	str	r2, [sp, #64]	; 0x40
    886a:	e4d2      	b.n	8212 <_vfprintf_r+0x1162>
    886c:	ab16      	add	r3, sp, #88	; 0x58
    886e:	77dc      	strb	r4, [r3, #31]
    8870:	f7fe fdca 	bl	7408 <_vfprintf_r+0x358>
    8874:	ab16      	add	r3, sp, #88	; 0x58
    8876:	77dc      	strb	r4, [r3, #31]
    8878:	f7fe fe18 	bl	74ac <_vfprintf_r+0x3fc>
    887c:	aa16      	add	r2, sp, #88	; 0x58
    887e:	232e      	movs	r3, #46	; 0x2e
    8880:	4694      	mov	ip, r2
    8882:	4463      	add	r3, ip
    8884:	e6a8      	b.n	85d8 <_vfprintf_r+0x1528>
    8886:	ab16      	add	r3, sp, #88	; 0x58
    8888:	77dc      	strb	r4, [r3, #31]
    888a:	f7fe fec4 	bl	7616 <_vfprintf_r+0x566>
    888e:	ab16      	add	r3, sp, #88	; 0x58
    8890:	77dc      	strb	r4, [r3, #31]
    8892:	f7fe ff5d 	bl	7750 <_vfprintf_r+0x6a0>
    8896:	ab16      	add	r3, sp, #88	; 0x58
    8898:	77dc      	strb	r4, [r3, #31]
    889a:	f7fe fd55 	bl	7348 <_vfprintf_r+0x298>
    889e:	ab16      	add	r3, sp, #88	; 0x58
    88a0:	77dc      	strb	r4, [r3, #31]
    88a2:	490c      	ldr	r1, [pc, #48]	; (88d4 <_vfprintf_r+0x1824>)
    88a4:	f7fe ffb9 	bl	781a <_vfprintf_r+0x76a>
    88a8:	ab16      	add	r3, sp, #88	; 0x58
    88aa:	77dc      	strb	r4, [r3, #31]
    88ac:	f7ff f81d 	bl	78ea <_vfprintf_r+0x83a>
    88b0:	ab16      	add	r3, sp, #88	; 0x58
    88b2:	77dc      	strb	r4, [r3, #31]
    88b4:	f7fe ff31 	bl	771a <_vfprintf_r+0x66a>
    88b8:	9211      	str	r2, [sp, #68]	; 0x44
    88ba:	2201      	movs	r2, #1
    88bc:	4252      	negs	r2, r2
    88be:	784b      	ldrb	r3, [r1, #1]
    88c0:	920b      	str	r2, [sp, #44]	; 0x2c
    88c2:	4641      	mov	r1, r8
    88c4:	f7fe fc77 	bl	71b6 <_vfprintf_r+0x106>
    88c8:	0000df7c 	.word	0x0000df7c
    88cc:	0000df64 	.word	0x0000df64
    88d0:	0000df80 	.word	0x0000df80
    88d4:	0000df98 	.word	0x0000df98

000088d8 <__sbprintf>:
    88d8:	b570      	push	{r4, r5, r6, lr}
    88da:	0006      	movs	r6, r0
    88dc:	2002      	movs	r0, #2
    88de:	4c1a      	ldr	r4, [pc, #104]	; (8948 <__sbprintf+0x70>)
    88e0:	44a5      	add	sp, r4
    88e2:	000c      	movs	r4, r1
    88e4:	8989      	ldrh	r1, [r1, #12]
    88e6:	4381      	bics	r1, r0
    88e8:	4668      	mov	r0, sp
    88ea:	8181      	strh	r1, [r0, #12]
    88ec:	6e61      	ldr	r1, [r4, #100]	; 0x64
    88ee:	9119      	str	r1, [sp, #100]	; 0x64
    88f0:	89e1      	ldrh	r1, [r4, #14]
    88f2:	81c1      	strh	r1, [r0, #14]
    88f4:	69e1      	ldr	r1, [r4, #28]
    88f6:	0030      	movs	r0, r6
    88f8:	9107      	str	r1, [sp, #28]
    88fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
    88fc:	9109      	str	r1, [sp, #36]	; 0x24
    88fe:	a91a      	add	r1, sp, #104	; 0x68
    8900:	9100      	str	r1, [sp, #0]
    8902:	9104      	str	r1, [sp, #16]
    8904:	2180      	movs	r1, #128	; 0x80
    8906:	00c9      	lsls	r1, r1, #3
    8908:	9102      	str	r1, [sp, #8]
    890a:	9105      	str	r1, [sp, #20]
    890c:	2100      	movs	r1, #0
    890e:	9106      	str	r1, [sp, #24]
    8910:	4669      	mov	r1, sp
    8912:	f7fe fbcd 	bl	70b0 <_vfprintf_r>
    8916:	1e05      	subs	r5, r0, #0
    8918:	db05      	blt.n	8926 <__sbprintf+0x4e>
    891a:	4669      	mov	r1, sp
    891c:	0030      	movs	r0, r6
    891e:	f001 f98d 	bl	9c3c <_fflush_r>
    8922:	2800      	cmp	r0, #0
    8924:	d10c      	bne.n	8940 <__sbprintf+0x68>
    8926:	466b      	mov	r3, sp
    8928:	899b      	ldrh	r3, [r3, #12]
    892a:	065b      	lsls	r3, r3, #25
    892c:	d503      	bpl.n	8936 <__sbprintf+0x5e>
    892e:	2340      	movs	r3, #64	; 0x40
    8930:	89a2      	ldrh	r2, [r4, #12]
    8932:	4313      	orrs	r3, r2
    8934:	81a3      	strh	r3, [r4, #12]
    8936:	0028      	movs	r0, r5
    8938:	238d      	movs	r3, #141	; 0x8d
    893a:	00db      	lsls	r3, r3, #3
    893c:	449d      	add	sp, r3
    893e:	bd70      	pop	{r4, r5, r6, pc}
    8940:	2501      	movs	r5, #1
    8942:	426d      	negs	r5, r5
    8944:	e7ef      	b.n	8926 <__sbprintf+0x4e>
    8946:	46c0      	nop			; (mov r8, r8)
    8948:	fffffb98 	.word	0xfffffb98

0000894c <__swsetup_r>:
    894c:	4b33      	ldr	r3, [pc, #204]	; (8a1c <__swsetup_r+0xd0>)
    894e:	b570      	push	{r4, r5, r6, lr}
    8950:	0005      	movs	r5, r0
    8952:	6818      	ldr	r0, [r3, #0]
    8954:	000c      	movs	r4, r1
    8956:	2800      	cmp	r0, #0
    8958:	d002      	beq.n	8960 <__swsetup_r+0x14>
    895a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    895c:	2b00      	cmp	r3, #0
    895e:	d03d      	beq.n	89dc <__swsetup_r+0x90>
    8960:	230c      	movs	r3, #12
    8962:	5ee0      	ldrsh	r0, [r4, r3]
    8964:	b283      	uxth	r3, r0
    8966:	071a      	lsls	r2, r3, #28
    8968:	d50d      	bpl.n	8986 <__swsetup_r+0x3a>
    896a:	6921      	ldr	r1, [r4, #16]
    896c:	2900      	cmp	r1, #0
    896e:	d016      	beq.n	899e <__swsetup_r+0x52>
    8970:	07da      	lsls	r2, r3, #31
    8972:	d522      	bpl.n	89ba <__swsetup_r+0x6e>
    8974:	2300      	movs	r3, #0
    8976:	60a3      	str	r3, [r4, #8]
    8978:	6963      	ldr	r3, [r4, #20]
    897a:	2000      	movs	r0, #0
    897c:	425b      	negs	r3, r3
    897e:	61a3      	str	r3, [r4, #24]
    8980:	2900      	cmp	r1, #0
    8982:	d022      	beq.n	89ca <__swsetup_r+0x7e>
    8984:	bd70      	pop	{r4, r5, r6, pc}
    8986:	06da      	lsls	r2, r3, #27
    8988:	d540      	bpl.n	8a0c <__swsetup_r+0xc0>
    898a:	075b      	lsls	r3, r3, #29
    898c:	d429      	bmi.n	89e2 <__swsetup_r+0x96>
    898e:	6921      	ldr	r1, [r4, #16]
    8990:	2208      	movs	r2, #8
    8992:	0003      	movs	r3, r0
    8994:	4313      	orrs	r3, r2
    8996:	81a3      	strh	r3, [r4, #12]
    8998:	b29b      	uxth	r3, r3
    899a:	2900      	cmp	r1, #0
    899c:	d1e8      	bne.n	8970 <__swsetup_r+0x24>
    899e:	22a0      	movs	r2, #160	; 0xa0
    89a0:	2080      	movs	r0, #128	; 0x80
    89a2:	0092      	lsls	r2, r2, #2
    89a4:	401a      	ands	r2, r3
    89a6:	0080      	lsls	r0, r0, #2
    89a8:	4282      	cmp	r2, r0
    89aa:	d0e1      	beq.n	8970 <__swsetup_r+0x24>
    89ac:	0021      	movs	r1, r4
    89ae:	0028      	movs	r0, r5
    89b0:	f001 fd24 	bl	a3fc <__smakebuf_r>
    89b4:	89a3      	ldrh	r3, [r4, #12]
    89b6:	6921      	ldr	r1, [r4, #16]
    89b8:	e7da      	b.n	8970 <__swsetup_r+0x24>
    89ba:	2200      	movs	r2, #0
    89bc:	079b      	lsls	r3, r3, #30
    89be:	d400      	bmi.n	89c2 <__swsetup_r+0x76>
    89c0:	6962      	ldr	r2, [r4, #20]
    89c2:	60a2      	str	r2, [r4, #8]
    89c4:	2000      	movs	r0, #0
    89c6:	2900      	cmp	r1, #0
    89c8:	d1dc      	bne.n	8984 <__swsetup_r+0x38>
    89ca:	220c      	movs	r2, #12
    89cc:	5ea3      	ldrsh	r3, [r4, r2]
    89ce:	061a      	lsls	r2, r3, #24
    89d0:	d5d8      	bpl.n	8984 <__swsetup_r+0x38>
    89d2:	2240      	movs	r2, #64	; 0x40
    89d4:	4313      	orrs	r3, r2
    89d6:	81a3      	strh	r3, [r4, #12]
    89d8:	3801      	subs	r0, #1
    89da:	e7d3      	b.n	8984 <__swsetup_r+0x38>
    89dc:	f001 f9c4 	bl	9d68 <__sinit>
    89e0:	e7be      	b.n	8960 <__swsetup_r+0x14>
    89e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    89e4:	2900      	cmp	r1, #0
    89e6:	d00a      	beq.n	89fe <__swsetup_r+0xb2>
    89e8:	0023      	movs	r3, r4
    89ea:	3340      	adds	r3, #64	; 0x40
    89ec:	4299      	cmp	r1, r3
    89ee:	d004      	beq.n	89fa <__swsetup_r+0xae>
    89f0:	0028      	movs	r0, r5
    89f2:	f001 fa2f 	bl	9e54 <_free_r>
    89f6:	230c      	movs	r3, #12
    89f8:	5ee0      	ldrsh	r0, [r4, r3]
    89fa:	2300      	movs	r3, #0
    89fc:	6323      	str	r3, [r4, #48]	; 0x30
    89fe:	2324      	movs	r3, #36	; 0x24
    8a00:	4398      	bics	r0, r3
    8a02:	2300      	movs	r3, #0
    8a04:	6921      	ldr	r1, [r4, #16]
    8a06:	6063      	str	r3, [r4, #4]
    8a08:	6021      	str	r1, [r4, #0]
    8a0a:	e7c1      	b.n	8990 <__swsetup_r+0x44>
    8a0c:	2309      	movs	r3, #9
    8a0e:	602b      	str	r3, [r5, #0]
    8a10:	2340      	movs	r3, #64	; 0x40
    8a12:	4303      	orrs	r3, r0
    8a14:	2001      	movs	r0, #1
    8a16:	81a3      	strh	r3, [r4, #12]
    8a18:	4240      	negs	r0, r0
    8a1a:	e7b3      	b.n	8984 <__swsetup_r+0x38>
    8a1c:	20000438 	.word	0x20000438

00008a20 <register_fini>:
    8a20:	4b03      	ldr	r3, [pc, #12]	; (8a30 <register_fini+0x10>)
    8a22:	b510      	push	{r4, lr}
    8a24:	2b00      	cmp	r3, #0
    8a26:	d002      	beq.n	8a2e <register_fini+0xe>
    8a28:	4802      	ldr	r0, [pc, #8]	; (8a34 <register_fini+0x14>)
    8a2a:	f000 f805 	bl	8a38 <atexit>
    8a2e:	bd10      	pop	{r4, pc}
    8a30:	00000000 	.word	0x00000000
    8a34:	00009d81 	.word	0x00009d81

00008a38 <atexit>:
    8a38:	b510      	push	{r4, lr}
    8a3a:	0001      	movs	r1, r0
    8a3c:	2300      	movs	r3, #0
    8a3e:	2200      	movs	r2, #0
    8a40:	2000      	movs	r0, #0
    8a42:	f002 fed9 	bl	b7f8 <__register_exitproc>
    8a46:	bd10      	pop	{r4, pc}

00008a48 <quorem>:
    8a48:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a4a:	4644      	mov	r4, r8
    8a4c:	4680      	mov	r8, r0
    8a4e:	465f      	mov	r7, fp
    8a50:	4656      	mov	r6, sl
    8a52:	464d      	mov	r5, r9
    8a54:	4642      	mov	r2, r8
    8a56:	b4f0      	push	{r4, r5, r6, r7}
    8a58:	6912      	ldr	r2, [r2, #16]
    8a5a:	690c      	ldr	r4, [r1, #16]
    8a5c:	b085      	sub	sp, #20
    8a5e:	000b      	movs	r3, r1
    8a60:	9103      	str	r1, [sp, #12]
    8a62:	2000      	movs	r0, #0
    8a64:	4294      	cmp	r4, r2
    8a66:	dd00      	ble.n	8a6a <quorem+0x22>
    8a68:	e08e      	b.n	8b88 <quorem+0x140>
    8a6a:	2214      	movs	r2, #20
    8a6c:	4694      	mov	ip, r2
    8a6e:	4463      	add	r3, ip
    8a70:	4699      	mov	r9, r3
    8a72:	464a      	mov	r2, r9
    8a74:	3c01      	subs	r4, #1
    8a76:	00a3      	lsls	r3, r4, #2
    8a78:	18d6      	adds	r6, r2, r3
    8a7a:	2214      	movs	r2, #20
    8a7c:	4442      	add	r2, r8
    8a7e:	4693      	mov	fp, r2
    8a80:	449b      	add	fp, r3
    8a82:	6833      	ldr	r3, [r6, #0]
    8a84:	0015      	movs	r5, r2
    8a86:	1c59      	adds	r1, r3, #1
    8a88:	465b      	mov	r3, fp
    8a8a:	6818      	ldr	r0, [r3, #0]
    8a8c:	9202      	str	r2, [sp, #8]
    8a8e:	f7fd fc99 	bl	63c4 <__aeabi_uidiv>
    8a92:	1e03      	subs	r3, r0, #0
    8a94:	9001      	str	r0, [sp, #4]
    8a96:	d040      	beq.n	8b1a <quorem+0xd2>
    8a98:	2700      	movs	r7, #0
    8a9a:	0029      	movs	r1, r5
    8a9c:	46b4      	mov	ip, r6
    8a9e:	001e      	movs	r6, r3
    8aa0:	0023      	movs	r3, r4
    8aa2:	46ca      	mov	sl, r9
    8aa4:	003c      	movs	r4, r7
    8aa6:	2000      	movs	r0, #0
    8aa8:	464f      	mov	r7, r9
    8aaa:	000d      	movs	r5, r1
    8aac:	4699      	mov	r9, r3
    8aae:	cf02      	ldmia	r7!, {r1}
    8ab0:	040a      	lsls	r2, r1, #16
    8ab2:	0c12      	lsrs	r2, r2, #16
    8ab4:	4372      	muls	r2, r6
    8ab6:	0c09      	lsrs	r1, r1, #16
    8ab8:	4371      	muls	r1, r6
    8aba:	1912      	adds	r2, r2, r4
    8abc:	0c13      	lsrs	r3, r2, #16
    8abe:	18c9      	adds	r1, r1, r3
    8ac0:	682b      	ldr	r3, [r5, #0]
    8ac2:	0412      	lsls	r2, r2, #16
    8ac4:	041b      	lsls	r3, r3, #16
    8ac6:	0c1b      	lsrs	r3, r3, #16
    8ac8:	181b      	adds	r3, r3, r0
    8aca:	0c12      	lsrs	r2, r2, #16
    8acc:	1a9b      	subs	r3, r3, r2
    8ace:	682a      	ldr	r2, [r5, #0]
    8ad0:	0c0c      	lsrs	r4, r1, #16
    8ad2:	0409      	lsls	r1, r1, #16
    8ad4:	0c12      	lsrs	r2, r2, #16
    8ad6:	0c09      	lsrs	r1, r1, #16
    8ad8:	1418      	asrs	r0, r3, #16
    8ada:	1a51      	subs	r1, r2, r1
    8adc:	1809      	adds	r1, r1, r0
    8ade:	041b      	lsls	r3, r3, #16
    8ae0:	1408      	asrs	r0, r1, #16
    8ae2:	0c1b      	lsrs	r3, r3, #16
    8ae4:	0409      	lsls	r1, r1, #16
    8ae6:	430b      	orrs	r3, r1
    8ae8:	c508      	stmia	r5!, {r3}
    8aea:	45bc      	cmp	ip, r7
    8aec:	d2df      	bcs.n	8aae <quorem+0x66>
    8aee:	465b      	mov	r3, fp
    8af0:	681b      	ldr	r3, [r3, #0]
    8af2:	464c      	mov	r4, r9
    8af4:	4666      	mov	r6, ip
    8af6:	46d1      	mov	r9, sl
    8af8:	2b00      	cmp	r3, #0
    8afa:	d10e      	bne.n	8b1a <quorem+0xd2>
    8afc:	465b      	mov	r3, fp
    8afe:	9a02      	ldr	r2, [sp, #8]
    8b00:	3b04      	subs	r3, #4
    8b02:	429a      	cmp	r2, r3
    8b04:	d304      	bcc.n	8b10 <quorem+0xc8>
    8b06:	e006      	b.n	8b16 <quorem+0xce>
    8b08:	3b04      	subs	r3, #4
    8b0a:	3c01      	subs	r4, #1
    8b0c:	429a      	cmp	r2, r3
    8b0e:	d202      	bcs.n	8b16 <quorem+0xce>
    8b10:	6819      	ldr	r1, [r3, #0]
    8b12:	2900      	cmp	r1, #0
    8b14:	d0f8      	beq.n	8b08 <quorem+0xc0>
    8b16:	4643      	mov	r3, r8
    8b18:	611c      	str	r4, [r3, #16]
    8b1a:	9903      	ldr	r1, [sp, #12]
    8b1c:	4640      	mov	r0, r8
    8b1e:	f002 fa37 	bl	af90 <__mcmp>
    8b22:	2800      	cmp	r0, #0
    8b24:	db2f      	blt.n	8b86 <quorem+0x13e>
    8b26:	464f      	mov	r7, r9
    8b28:	2000      	movs	r0, #0
    8b2a:	9b01      	ldr	r3, [sp, #4]
    8b2c:	9d02      	ldr	r5, [sp, #8]
    8b2e:	3301      	adds	r3, #1
    8b30:	9301      	str	r3, [sp, #4]
    8b32:	6829      	ldr	r1, [r5, #0]
    8b34:	cf04      	ldmia	r7!, {r2}
    8b36:	040b      	lsls	r3, r1, #16
    8b38:	0c1b      	lsrs	r3, r3, #16
    8b3a:	1818      	adds	r0, r3, r0
    8b3c:	0413      	lsls	r3, r2, #16
    8b3e:	0c1b      	lsrs	r3, r3, #16
    8b40:	1ac3      	subs	r3, r0, r3
    8b42:	0c09      	lsrs	r1, r1, #16
    8b44:	0c12      	lsrs	r2, r2, #16
    8b46:	1a8a      	subs	r2, r1, r2
    8b48:	1419      	asrs	r1, r3, #16
    8b4a:	1852      	adds	r2, r2, r1
    8b4c:	041b      	lsls	r3, r3, #16
    8b4e:	1410      	asrs	r0, r2, #16
    8b50:	0c1b      	lsrs	r3, r3, #16
    8b52:	0412      	lsls	r2, r2, #16
    8b54:	431a      	orrs	r2, r3
    8b56:	c504      	stmia	r5!, {r2}
    8b58:	42be      	cmp	r6, r7
    8b5a:	d2ea      	bcs.n	8b32 <quorem+0xea>
    8b5c:	9902      	ldr	r1, [sp, #8]
    8b5e:	00a3      	lsls	r3, r4, #2
    8b60:	468c      	mov	ip, r1
    8b62:	4463      	add	r3, ip
    8b64:	681a      	ldr	r2, [r3, #0]
    8b66:	2a00      	cmp	r2, #0
    8b68:	d10d      	bne.n	8b86 <quorem+0x13e>
    8b6a:	3b04      	subs	r3, #4
    8b6c:	1e0a      	subs	r2, r1, #0
    8b6e:	429a      	cmp	r2, r3
    8b70:	d304      	bcc.n	8b7c <quorem+0x134>
    8b72:	e006      	b.n	8b82 <quorem+0x13a>
    8b74:	3b04      	subs	r3, #4
    8b76:	3c01      	subs	r4, #1
    8b78:	429a      	cmp	r2, r3
    8b7a:	d202      	bcs.n	8b82 <quorem+0x13a>
    8b7c:	6819      	ldr	r1, [r3, #0]
    8b7e:	2900      	cmp	r1, #0
    8b80:	d0f8      	beq.n	8b74 <quorem+0x12c>
    8b82:	4643      	mov	r3, r8
    8b84:	611c      	str	r4, [r3, #16]
    8b86:	9801      	ldr	r0, [sp, #4]
    8b88:	b005      	add	sp, #20
    8b8a:	bc3c      	pop	{r2, r3, r4, r5}
    8b8c:	4690      	mov	r8, r2
    8b8e:	4699      	mov	r9, r3
    8b90:	46a2      	mov	sl, r4
    8b92:	46ab      	mov	fp, r5
    8b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8b96:	46c0      	nop			; (mov r8, r8)

00008b98 <_dtoa_r>:
    8b98:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b9a:	465f      	mov	r7, fp
    8b9c:	4656      	mov	r6, sl
    8b9e:	464d      	mov	r5, r9
    8ba0:	4644      	mov	r4, r8
    8ba2:	b4f0      	push	{r4, r5, r6, r7}
    8ba4:	0014      	movs	r4, r2
    8ba6:	001d      	movs	r5, r3
    8ba8:	6c01      	ldr	r1, [r0, #64]	; 0x40
    8baa:	b099      	sub	sp, #100	; 0x64
    8bac:	4683      	mov	fp, r0
    8bae:	9e25      	ldr	r6, [sp, #148]	; 0x94
    8bb0:	9402      	str	r4, [sp, #8]
    8bb2:	9503      	str	r5, [sp, #12]
    8bb4:	2900      	cmp	r1, #0
    8bb6:	d009      	beq.n	8bcc <_dtoa_r+0x34>
    8bb8:	2301      	movs	r3, #1
    8bba:	6c42      	ldr	r2, [r0, #68]	; 0x44
    8bbc:	4093      	lsls	r3, r2
    8bbe:	604a      	str	r2, [r1, #4]
    8bc0:	608b      	str	r3, [r1, #8]
    8bc2:	f001 ffd3 	bl	ab6c <_Bfree>
    8bc6:	2300      	movs	r3, #0
    8bc8:	465a      	mov	r2, fp
    8bca:	6413      	str	r3, [r2, #64]	; 0x40
    8bcc:	9f03      	ldr	r7, [sp, #12]
    8bce:	2f00      	cmp	r7, #0
    8bd0:	db34      	blt.n	8c3c <_dtoa_r+0xa4>
    8bd2:	2300      	movs	r3, #0
    8bd4:	6033      	str	r3, [r6, #0]
    8bd6:	003a      	movs	r2, r7
    8bd8:	4bd3      	ldr	r3, [pc, #844]	; (8f28 <_dtoa_r+0x390>)
    8bda:	401a      	ands	r2, r3
    8bdc:	429a      	cmp	r2, r3
    8bde:	d01a      	beq.n	8c16 <_dtoa_r+0x7e>
    8be0:	9c02      	ldr	r4, [sp, #8]
    8be2:	9d03      	ldr	r5, [sp, #12]
    8be4:	2200      	movs	r2, #0
    8be6:	2300      	movs	r3, #0
    8be8:	0020      	movs	r0, r4
    8bea:	0029      	movs	r1, r5
    8bec:	f003 f8d4 	bl	bd98 <__aeabi_dcmpeq>
    8bf0:	2800      	cmp	r0, #0
    8bf2:	d029      	beq.n	8c48 <_dtoa_r+0xb0>
    8bf4:	2301      	movs	r3, #1
    8bf6:	9a24      	ldr	r2, [sp, #144]	; 0x90
    8bf8:	6013      	str	r3, [r2, #0]
    8bfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
    8bfc:	2b00      	cmp	r3, #0
    8bfe:	d100      	bne.n	8c02 <_dtoa_r+0x6a>
    8c00:	e22e      	b.n	9060 <_dtoa_r+0x4c8>
    8c02:	48ca      	ldr	r0, [pc, #808]	; (8f2c <_dtoa_r+0x394>)
    8c04:	6018      	str	r0, [r3, #0]
    8c06:	3801      	subs	r0, #1
    8c08:	b019      	add	sp, #100	; 0x64
    8c0a:	bc3c      	pop	{r2, r3, r4, r5}
    8c0c:	4690      	mov	r8, r2
    8c0e:	4699      	mov	r9, r3
    8c10:	46a2      	mov	sl, r4
    8c12:	46ab      	mov	fp, r5
    8c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8c16:	4bc6      	ldr	r3, [pc, #792]	; (8f30 <_dtoa_r+0x398>)
    8c18:	9a24      	ldr	r2, [sp, #144]	; 0x90
    8c1a:	6013      	str	r3, [r2, #0]
    8c1c:	9b02      	ldr	r3, [sp, #8]
    8c1e:	2b00      	cmp	r3, #0
    8c20:	d100      	bne.n	8c24 <_dtoa_r+0x8c>
    8c22:	e1fd      	b.n	9020 <_dtoa_r+0x488>
    8c24:	48c3      	ldr	r0, [pc, #780]	; (8f34 <_dtoa_r+0x39c>)
    8c26:	9b26      	ldr	r3, [sp, #152]	; 0x98
    8c28:	2b00      	cmp	r3, #0
    8c2a:	d0ed      	beq.n	8c08 <_dtoa_r+0x70>
    8c2c:	78c2      	ldrb	r2, [r0, #3]
    8c2e:	1cc3      	adds	r3, r0, #3
    8c30:	2a00      	cmp	r2, #0
    8c32:	d000      	beq.n	8c36 <_dtoa_r+0x9e>
    8c34:	3305      	adds	r3, #5
    8c36:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8c38:	6013      	str	r3, [r2, #0]
    8c3a:	e7e5      	b.n	8c08 <_dtoa_r+0x70>
    8c3c:	2301      	movs	r3, #1
    8c3e:	0068      	lsls	r0, r5, #1
    8c40:	0847      	lsrs	r7, r0, #1
    8c42:	6033      	str	r3, [r6, #0]
    8c44:	9703      	str	r7, [sp, #12]
    8c46:	e7c6      	b.n	8bd6 <_dtoa_r+0x3e>
    8c48:	ab16      	add	r3, sp, #88	; 0x58
    8c4a:	9301      	str	r3, [sp, #4]
    8c4c:	ab17      	add	r3, sp, #92	; 0x5c
    8c4e:	9300      	str	r3, [sp, #0]
    8c50:	0022      	movs	r2, r4
    8c52:	002b      	movs	r3, r5
    8c54:	4658      	mov	r0, fp
    8c56:	f002 fa47 	bl	b0e8 <__d2b>
    8c5a:	0d3e      	lsrs	r6, r7, #20
    8c5c:	900a      	str	r0, [sp, #40]	; 0x28
    8c5e:	d100      	bne.n	8c62 <_dtoa_r+0xca>
    8c60:	e1e3      	b.n	902a <_dtoa_r+0x492>
    8c62:	032b      	lsls	r3, r5, #12
    8c64:	4ab4      	ldr	r2, [pc, #720]	; (8f38 <_dtoa_r+0x3a0>)
    8c66:	0b1b      	lsrs	r3, r3, #12
    8c68:	431a      	orrs	r2, r3
    8c6a:	4bb4      	ldr	r3, [pc, #720]	; (8f3c <_dtoa_r+0x3a4>)
    8c6c:	0020      	movs	r0, r4
    8c6e:	469c      	mov	ip, r3
    8c70:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8c72:	0011      	movs	r1, r2
    8c74:	4698      	mov	r8, r3
    8c76:	2300      	movs	r3, #0
    8c78:	4466      	add	r6, ip
    8c7a:	9312      	str	r3, [sp, #72]	; 0x48
    8c7c:	2200      	movs	r2, #0
    8c7e:	4bb0      	ldr	r3, [pc, #704]	; (8f40 <_dtoa_r+0x3a8>)
    8c80:	f004 f808 	bl	cc94 <__aeabi_dsub>
    8c84:	4aaf      	ldr	r2, [pc, #700]	; (8f44 <_dtoa_r+0x3ac>)
    8c86:	4bb0      	ldr	r3, [pc, #704]	; (8f48 <_dtoa_r+0x3b0>)
    8c88:	f7fd fd34 	bl	66f4 <__aeabi_dmul>
    8c8c:	4aaf      	ldr	r2, [pc, #700]	; (8f4c <_dtoa_r+0x3b4>)
    8c8e:	4bb0      	ldr	r3, [pc, #704]	; (8f50 <_dtoa_r+0x3b8>)
    8c90:	f003 f8b0 	bl	bdf4 <__aeabi_dadd>
    8c94:	0004      	movs	r4, r0
    8c96:	0030      	movs	r0, r6
    8c98:	000d      	movs	r5, r1
    8c9a:	f7fd ffa5 	bl	6be8 <__aeabi_i2d>
    8c9e:	4aad      	ldr	r2, [pc, #692]	; (8f54 <_dtoa_r+0x3bc>)
    8ca0:	4bad      	ldr	r3, [pc, #692]	; (8f58 <_dtoa_r+0x3c0>)
    8ca2:	f7fd fd27 	bl	66f4 <__aeabi_dmul>
    8ca6:	0002      	movs	r2, r0
    8ca8:	000b      	movs	r3, r1
    8caa:	0020      	movs	r0, r4
    8cac:	0029      	movs	r1, r5
    8cae:	f003 f8a1 	bl	bdf4 <__aeabi_dadd>
    8cb2:	0004      	movs	r4, r0
    8cb4:	000d      	movs	r5, r1
    8cb6:	f004 fb61 	bl	d37c <__aeabi_d2iz>
    8cba:	2200      	movs	r2, #0
    8cbc:	9005      	str	r0, [sp, #20]
    8cbe:	2300      	movs	r3, #0
    8cc0:	0020      	movs	r0, r4
    8cc2:	0029      	movs	r1, r5
    8cc4:	f003 f86e 	bl	bda4 <__aeabi_dcmplt>
    8cc8:	2800      	cmp	r0, #0
    8cca:	d000      	beq.n	8cce <_dtoa_r+0x136>
    8ccc:	e2b6      	b.n	923c <_dtoa_r+0x6a4>
    8cce:	2301      	movs	r3, #1
    8cd0:	9c05      	ldr	r4, [sp, #20]
    8cd2:	930d      	str	r3, [sp, #52]	; 0x34
    8cd4:	2c16      	cmp	r4, #22
    8cd6:	d810      	bhi.n	8cfa <_dtoa_r+0x162>
    8cd8:	49a0      	ldr	r1, [pc, #640]	; (8f5c <_dtoa_r+0x3c4>)
    8cda:	00e3      	lsls	r3, r4, #3
    8cdc:	18c9      	adds	r1, r1, r3
    8cde:	6808      	ldr	r0, [r1, #0]
    8ce0:	6849      	ldr	r1, [r1, #4]
    8ce2:	9a02      	ldr	r2, [sp, #8]
    8ce4:	9b03      	ldr	r3, [sp, #12]
    8ce6:	f003 f871 	bl	bdcc <__aeabi_dcmpgt>
    8cea:	2800      	cmp	r0, #0
    8cec:	d100      	bne.n	8cf0 <_dtoa_r+0x158>
    8cee:	e3aa      	b.n	9446 <_dtoa_r+0x8ae>
    8cf0:	0023      	movs	r3, r4
    8cf2:	3b01      	subs	r3, #1
    8cf4:	9305      	str	r3, [sp, #20]
    8cf6:	2300      	movs	r3, #0
    8cf8:	930d      	str	r3, [sp, #52]	; 0x34
    8cfa:	4643      	mov	r3, r8
    8cfc:	1b9e      	subs	r6, r3, r6
    8cfe:	2300      	movs	r3, #0
    8d00:	9306      	str	r3, [sp, #24]
    8d02:	3e01      	subs	r6, #1
    8d04:	46b2      	mov	sl, r6
    8d06:	d500      	bpl.n	8d0a <_dtoa_r+0x172>
    8d08:	e2a7      	b.n	925a <_dtoa_r+0x6c2>
    8d0a:	9b05      	ldr	r3, [sp, #20]
    8d0c:	2b00      	cmp	r3, #0
    8d0e:	da00      	bge.n	8d12 <_dtoa_r+0x17a>
    8d10:	e28b      	b.n	922a <_dtoa_r+0x692>
    8d12:	469c      	mov	ip, r3
    8d14:	930e      	str	r3, [sp, #56]	; 0x38
    8d16:	2300      	movs	r3, #0
    8d18:	44e2      	add	sl, ip
    8d1a:	930b      	str	r3, [sp, #44]	; 0x2c
    8d1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8d1e:	2b09      	cmp	r3, #9
    8d20:	d900      	bls.n	8d24 <_dtoa_r+0x18c>
    8d22:	e19f      	b.n	9064 <_dtoa_r+0x4cc>
    8d24:	2401      	movs	r4, #1
    8d26:	2b05      	cmp	r3, #5
    8d28:	dd02      	ble.n	8d30 <_dtoa_r+0x198>
    8d2a:	2400      	movs	r4, #0
    8d2c:	3b04      	subs	r3, #4
    8d2e:	9322      	str	r3, [sp, #136]	; 0x88
    8d30:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8d32:	2b03      	cmp	r3, #3
    8d34:	d101      	bne.n	8d3a <_dtoa_r+0x1a2>
    8d36:	f000 fcd8 	bl	96ea <_dtoa_r+0xb52>
    8d3a:	dc01      	bgt.n	8d40 <_dtoa_r+0x1a8>
    8d3c:	f000 fc9d 	bl	967a <_dtoa_r+0xae2>
    8d40:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8d42:	2b04      	cmp	r3, #4
    8d44:	d100      	bne.n	8d48 <_dtoa_r+0x1b0>
    8d46:	e3a4      	b.n	9492 <_dtoa_r+0x8fa>
    8d48:	2301      	movs	r3, #1
    8d4a:	930c      	str	r3, [sp, #48]	; 0x30
    8d4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8d4e:	2b05      	cmp	r3, #5
    8d50:	d001      	beq.n	8d56 <_dtoa_r+0x1be>
    8d52:	f000 fc98 	bl	9686 <_dtoa_r+0xaee>
    8d56:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    8d58:	9b05      	ldr	r3, [sp, #20]
    8d5a:	4694      	mov	ip, r2
    8d5c:	4463      	add	r3, ip
    8d5e:	930f      	str	r3, [sp, #60]	; 0x3c
    8d60:	3301      	adds	r3, #1
    8d62:	9308      	str	r3, [sp, #32]
    8d64:	1e1d      	subs	r5, r3, #0
    8d66:	dc01      	bgt.n	8d6c <_dtoa_r+0x1d4>
    8d68:	f000 fc66 	bl	9638 <_dtoa_r+0xaa0>
    8d6c:	9d08      	ldr	r5, [sp, #32]
    8d6e:	002e      	movs	r6, r5
    8d70:	2300      	movs	r3, #0
    8d72:	465a      	mov	r2, fp
    8d74:	2100      	movs	r1, #0
    8d76:	6453      	str	r3, [r2, #68]	; 0x44
    8d78:	2e17      	cmp	r6, #23
    8d7a:	d90a      	bls.n	8d92 <_dtoa_r+0x1fa>
    8d7c:	2201      	movs	r2, #1
    8d7e:	3304      	adds	r3, #4
    8d80:	005b      	lsls	r3, r3, #1
    8d82:	0018      	movs	r0, r3
    8d84:	3014      	adds	r0, #20
    8d86:	0011      	movs	r1, r2
    8d88:	3201      	adds	r2, #1
    8d8a:	4286      	cmp	r6, r0
    8d8c:	d2f8      	bcs.n	8d80 <_dtoa_r+0x1e8>
    8d8e:	465b      	mov	r3, fp
    8d90:	6459      	str	r1, [r3, #68]	; 0x44
    8d92:	4658      	mov	r0, fp
    8d94:	f001 fec2 	bl	ab1c <_Balloc>
    8d98:	465b      	mov	r3, fp
    8d9a:	9009      	str	r0, [sp, #36]	; 0x24
    8d9c:	6418      	str	r0, [r3, #64]	; 0x40
    8d9e:	2d0e      	cmp	r5, #14
    8da0:	d900      	bls.n	8da4 <_dtoa_r+0x20c>
    8da2:	e172      	b.n	908a <_dtoa_r+0x4f2>
    8da4:	2c00      	cmp	r4, #0
    8da6:	d100      	bne.n	8daa <_dtoa_r+0x212>
    8da8:	e16f      	b.n	908a <_dtoa_r+0x4f2>
    8daa:	9b02      	ldr	r3, [sp, #8]
    8dac:	9c03      	ldr	r4, [sp, #12]
    8dae:	9e05      	ldr	r6, [sp, #20]
    8db0:	9310      	str	r3, [sp, #64]	; 0x40
    8db2:	9411      	str	r4, [sp, #68]	; 0x44
    8db4:	2e00      	cmp	r6, #0
    8db6:	dc01      	bgt.n	8dbc <_dtoa_r+0x224>
    8db8:	f000 fd31 	bl	981e <_dtoa_r+0xc86>
    8dbc:	0031      	movs	r1, r6
    8dbe:	220f      	movs	r2, #15
    8dc0:	4011      	ands	r1, r2
    8dc2:	00cb      	lsls	r3, r1, #3
    8dc4:	4965      	ldr	r1, [pc, #404]	; (8f5c <_dtoa_r+0x3c4>)
    8dc6:	1136      	asrs	r6, r6, #4
    8dc8:	18cb      	adds	r3, r1, r3
    8dca:	681c      	ldr	r4, [r3, #0]
    8dcc:	685d      	ldr	r5, [r3, #4]
    8dce:	06f1      	lsls	r1, r6, #27
    8dd0:	d401      	bmi.n	8dd6 <_dtoa_r+0x23e>
    8dd2:	f000 fcda 	bl	978a <_dtoa_r+0xbf2>
    8dd6:	9810      	ldr	r0, [sp, #64]	; 0x40
    8dd8:	9911      	ldr	r1, [sp, #68]	; 0x44
    8dda:	4b61      	ldr	r3, [pc, #388]	; (8f60 <_dtoa_r+0x3c8>)
    8ddc:	4016      	ands	r6, r2
    8dde:	6a1a      	ldr	r2, [r3, #32]
    8de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8de2:	f003 fb33 	bl	c44c <__aeabi_ddiv>
    8de6:	2303      	movs	r3, #3
    8de8:	4698      	mov	r8, r3
    8dea:	9002      	str	r0, [sp, #8]
    8dec:	9103      	str	r1, [sp, #12]
    8dee:	2e00      	cmp	r6, #0
    8df0:	d014      	beq.n	8e1c <_dtoa_r+0x284>
    8df2:	2301      	movs	r3, #1
    8df4:	4699      	mov	r9, r3
    8df6:	4f5a      	ldr	r7, [pc, #360]	; (8f60 <_dtoa_r+0x3c8>)
    8df8:	464b      	mov	r3, r9
    8dfa:	4233      	tst	r3, r6
    8dfc:	d00a      	beq.n	8e14 <_dtoa_r+0x27c>
    8dfe:	2301      	movs	r3, #1
    8e00:	469c      	mov	ip, r3
    8e02:	683a      	ldr	r2, [r7, #0]
    8e04:	687b      	ldr	r3, [r7, #4]
    8e06:	0020      	movs	r0, r4
    8e08:	0029      	movs	r1, r5
    8e0a:	44e0      	add	r8, ip
    8e0c:	f7fd fc72 	bl	66f4 <__aeabi_dmul>
    8e10:	0004      	movs	r4, r0
    8e12:	000d      	movs	r5, r1
    8e14:	1076      	asrs	r6, r6, #1
    8e16:	3708      	adds	r7, #8
    8e18:	2e00      	cmp	r6, #0
    8e1a:	d1ed      	bne.n	8df8 <_dtoa_r+0x260>
    8e1c:	0022      	movs	r2, r4
    8e1e:	9802      	ldr	r0, [sp, #8]
    8e20:	9903      	ldr	r1, [sp, #12]
    8e22:	002b      	movs	r3, r5
    8e24:	f003 fb12 	bl	c44c <__aeabi_ddiv>
    8e28:	0006      	movs	r6, r0
    8e2a:	000f      	movs	r7, r1
    8e2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8e2e:	2b00      	cmp	r3, #0
    8e30:	d009      	beq.n	8e46 <_dtoa_r+0x2ae>
    8e32:	2200      	movs	r2, #0
    8e34:	4b40      	ldr	r3, [pc, #256]	; (8f38 <_dtoa_r+0x3a0>)
    8e36:	0030      	movs	r0, r6
    8e38:	0039      	movs	r1, r7
    8e3a:	f002 ffb3 	bl	bda4 <__aeabi_dcmplt>
    8e3e:	2800      	cmp	r0, #0
    8e40:	d001      	beq.n	8e46 <_dtoa_r+0x2ae>
    8e42:	f000 fdc7 	bl	99d4 <_dtoa_r+0xe3c>
    8e46:	4640      	mov	r0, r8
    8e48:	f7fd fece 	bl	6be8 <__aeabi_i2d>
    8e4c:	0032      	movs	r2, r6
    8e4e:	003b      	movs	r3, r7
    8e50:	f7fd fc50 	bl	66f4 <__aeabi_dmul>
    8e54:	2200      	movs	r2, #0
    8e56:	4b43      	ldr	r3, [pc, #268]	; (8f64 <_dtoa_r+0x3cc>)
    8e58:	f002 ffcc 	bl	bdf4 <__aeabi_dadd>
    8e5c:	4a42      	ldr	r2, [pc, #264]	; (8f68 <_dtoa_r+0x3d0>)
    8e5e:	000b      	movs	r3, r1
    8e60:	4694      	mov	ip, r2
    8e62:	4463      	add	r3, ip
    8e64:	9002      	str	r0, [sp, #8]
    8e66:	9103      	str	r1, [sp, #12]
    8e68:	9303      	str	r3, [sp, #12]
    8e6a:	9b08      	ldr	r3, [sp, #32]
    8e6c:	2b00      	cmp	r3, #0
    8e6e:	d101      	bne.n	8e74 <_dtoa_r+0x2dc>
    8e70:	f000 fc5c 	bl	972c <_dtoa_r+0xb94>
    8e74:	9b05      	ldr	r3, [sp, #20]
    8e76:	9314      	str	r3, [sp, #80]	; 0x50
    8e78:	9b08      	ldr	r3, [sp, #32]
    8e7a:	9313      	str	r3, [sp, #76]	; 0x4c
    8e7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8e7e:	2b00      	cmp	r3, #0
    8e80:	d101      	bne.n	8e86 <_dtoa_r+0x2ee>
    8e82:	f000 fd1a 	bl	98ba <_dtoa_r+0xd22>
    8e86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8e88:	4a34      	ldr	r2, [pc, #208]	; (8f5c <_dtoa_r+0x3c4>)
    8e8a:	3b01      	subs	r3, #1
    8e8c:	00db      	lsls	r3, r3, #3
    8e8e:	18d3      	adds	r3, r2, r3
    8e90:	681a      	ldr	r2, [r3, #0]
    8e92:	685b      	ldr	r3, [r3, #4]
    8e94:	2000      	movs	r0, #0
    8e96:	4935      	ldr	r1, [pc, #212]	; (8f6c <_dtoa_r+0x3d4>)
    8e98:	f003 fad8 	bl	c44c <__aeabi_ddiv>
    8e9c:	9a02      	ldr	r2, [sp, #8]
    8e9e:	9b03      	ldr	r3, [sp, #12]
    8ea0:	f003 fef8 	bl	cc94 <__aeabi_dsub>
    8ea4:	9002      	str	r0, [sp, #8]
    8ea6:	9103      	str	r1, [sp, #12]
    8ea8:	0039      	movs	r1, r7
    8eaa:	0030      	movs	r0, r6
    8eac:	f004 fa66 	bl	d37c <__aeabi_d2iz>
    8eb0:	0005      	movs	r5, r0
    8eb2:	f7fd fe99 	bl	6be8 <__aeabi_i2d>
    8eb6:	0002      	movs	r2, r0
    8eb8:	000b      	movs	r3, r1
    8eba:	0030      	movs	r0, r6
    8ebc:	0039      	movs	r1, r7
    8ebe:	f003 fee9 	bl	cc94 <__aeabi_dsub>
    8ec2:	0006      	movs	r6, r0
    8ec4:	000f      	movs	r7, r1
    8ec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8ec8:	3530      	adds	r5, #48	; 0x30
    8eca:	b2e9      	uxtb	r1, r5
    8ecc:	7011      	strb	r1, [r2, #0]
    8ece:	1c54      	adds	r4, r2, #1
    8ed0:	4688      	mov	r8, r1
    8ed2:	9802      	ldr	r0, [sp, #8]
    8ed4:	9903      	ldr	r1, [sp, #12]
    8ed6:	0032      	movs	r2, r6
    8ed8:	003b      	movs	r3, r7
    8eda:	f002 ff77 	bl	bdcc <__aeabi_dcmpgt>
    8ede:	2800      	cmp	r0, #0
    8ee0:	d000      	beq.n	8ee4 <_dtoa_r+0x34c>
    8ee2:	e08a      	b.n	8ffa <_dtoa_r+0x462>
    8ee4:	0032      	movs	r2, r6
    8ee6:	003b      	movs	r3, r7
    8ee8:	2000      	movs	r0, #0
    8eea:	4913      	ldr	r1, [pc, #76]	; (8f38 <_dtoa_r+0x3a0>)
    8eec:	f003 fed2 	bl	cc94 <__aeabi_dsub>
    8ef0:	0002      	movs	r2, r0
    8ef2:	000b      	movs	r3, r1
    8ef4:	9802      	ldr	r0, [sp, #8]
    8ef6:	9903      	ldr	r1, [sp, #12]
    8ef8:	f002 ff68 	bl	bdcc <__aeabi_dcmpgt>
    8efc:	2800      	cmp	r0, #0
    8efe:	d001      	beq.n	8f04 <_dtoa_r+0x36c>
    8f00:	f000 fdd8 	bl	9ab4 <_dtoa_r+0xf1c>
    8f04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8f06:	2b01      	cmp	r3, #1
    8f08:	dc01      	bgt.n	8f0e <_dtoa_r+0x376>
    8f0a:	f000 fc83 	bl	9814 <_dtoa_r+0xc7c>
    8f0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8f10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8f12:	4694      	mov	ip, r2
    8f14:	4463      	add	r3, ip
    8f16:	4699      	mov	r9, r3
    8f18:	4653      	mov	r3, sl
    8f1a:	9313      	str	r3, [sp, #76]	; 0x4c
    8f1c:	465b      	mov	r3, fp
    8f1e:	46a2      	mov	sl, r4
    8f20:	9c02      	ldr	r4, [sp, #8]
    8f22:	9d03      	ldr	r5, [sp, #12]
    8f24:	9302      	str	r3, [sp, #8]
    8f26:	e035      	b.n	8f94 <_dtoa_r+0x3fc>
    8f28:	7ff00000 	.word	0x7ff00000
    8f2c:	0000dfb5 	.word	0x0000dfb5
    8f30:	0000270f 	.word	0x0000270f
    8f34:	0000dfd4 	.word	0x0000dfd4
    8f38:	3ff00000 	.word	0x3ff00000
    8f3c:	fffffc01 	.word	0xfffffc01
    8f40:	3ff80000 	.word	0x3ff80000
    8f44:	636f4361 	.word	0x636f4361
    8f48:	3fd287a7 	.word	0x3fd287a7
    8f4c:	8b60c8b3 	.word	0x8b60c8b3
    8f50:	3fc68a28 	.word	0x3fc68a28
    8f54:	509f79fb 	.word	0x509f79fb
    8f58:	3fd34413 	.word	0x3fd34413
    8f5c:	0000dfe8 	.word	0x0000dfe8
    8f60:	0000e0b0 	.word	0x0000e0b0
    8f64:	401c0000 	.word	0x401c0000
    8f68:	fcc00000 	.word	0xfcc00000
    8f6c:	3fe00000 	.word	0x3fe00000
    8f70:	0032      	movs	r2, r6
    8f72:	003b      	movs	r3, r7
    8f74:	2000      	movs	r0, #0
    8f76:	49bc      	ldr	r1, [pc, #752]	; (9268 <_dtoa_r+0x6d0>)
    8f78:	f003 fe8c 	bl	cc94 <__aeabi_dsub>
    8f7c:	0022      	movs	r2, r4
    8f7e:	002b      	movs	r3, r5
    8f80:	f002 ff10 	bl	bda4 <__aeabi_dcmplt>
    8f84:	2800      	cmp	r0, #0
    8f86:	d001      	beq.n	8f8c <_dtoa_r+0x3f4>
    8f88:	f000 fd6c 	bl	9a64 <_dtoa_r+0xecc>
    8f8c:	45ca      	cmp	sl, r9
    8f8e:	d101      	bne.n	8f94 <_dtoa_r+0x3fc>
    8f90:	f000 fc3c 	bl	980c <_dtoa_r+0xc74>
    8f94:	2200      	movs	r2, #0
    8f96:	4bb5      	ldr	r3, [pc, #724]	; (926c <_dtoa_r+0x6d4>)
    8f98:	0020      	movs	r0, r4
    8f9a:	0029      	movs	r1, r5
    8f9c:	f7fd fbaa 	bl	66f4 <__aeabi_dmul>
    8fa0:	2200      	movs	r2, #0
    8fa2:	4bb2      	ldr	r3, [pc, #712]	; (926c <_dtoa_r+0x6d4>)
    8fa4:	0004      	movs	r4, r0
    8fa6:	000d      	movs	r5, r1
    8fa8:	0030      	movs	r0, r6
    8faa:	0039      	movs	r1, r7
    8fac:	f7fd fba2 	bl	66f4 <__aeabi_dmul>
    8fb0:	000f      	movs	r7, r1
    8fb2:	0006      	movs	r6, r0
    8fb4:	f004 f9e2 	bl	d37c <__aeabi_d2iz>
    8fb8:	4680      	mov	r8, r0
    8fba:	f7fd fe15 	bl	6be8 <__aeabi_i2d>
    8fbe:	0002      	movs	r2, r0
    8fc0:	000b      	movs	r3, r1
    8fc2:	0030      	movs	r0, r6
    8fc4:	0039      	movs	r1, r7
    8fc6:	f003 fe65 	bl	cc94 <__aeabi_dsub>
    8fca:	2301      	movs	r3, #1
    8fcc:	469c      	mov	ip, r3
    8fce:	4643      	mov	r3, r8
    8fd0:	3330      	adds	r3, #48	; 0x30
    8fd2:	b2db      	uxtb	r3, r3
    8fd4:	4698      	mov	r8, r3
    8fd6:	2301      	movs	r3, #1
    8fd8:	4642      	mov	r2, r8
    8fda:	44e2      	add	sl, ip
    8fdc:	425b      	negs	r3, r3
    8fde:	4453      	add	r3, sl
    8fe0:	701a      	strb	r2, [r3, #0]
    8fe2:	469b      	mov	fp, r3
    8fe4:	0022      	movs	r2, r4
    8fe6:	002b      	movs	r3, r5
    8fe8:	0006      	movs	r6, r0
    8fea:	000f      	movs	r7, r1
    8fec:	f002 feda 	bl	bda4 <__aeabi_dcmplt>
    8ff0:	2800      	cmp	r0, #0
    8ff2:	d0bd      	beq.n	8f70 <_dtoa_r+0x3d8>
    8ff4:	9b02      	ldr	r3, [sp, #8]
    8ff6:	4654      	mov	r4, sl
    8ff8:	469b      	mov	fp, r3
    8ffa:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8ffc:	9305      	str	r3, [sp, #20]
    8ffe:	990a      	ldr	r1, [sp, #40]	; 0x28
    9000:	4658      	mov	r0, fp
    9002:	f001 fdb3 	bl	ab6c <_Bfree>
    9006:	2300      	movs	r3, #0
    9008:	7023      	strb	r3, [r4, #0]
    900a:	9b05      	ldr	r3, [sp, #20]
    900c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    900e:	3301      	adds	r3, #1
    9010:	6013      	str	r3, [r2, #0]
    9012:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9014:	2b00      	cmp	r3, #0
    9016:	d100      	bne.n	901a <_dtoa_r+0x482>
    9018:	e3aa      	b.n	9770 <_dtoa_r+0xbd8>
    901a:	601c      	str	r4, [r3, #0]
    901c:	9809      	ldr	r0, [sp, #36]	; 0x24
    901e:	e5f3      	b.n	8c08 <_dtoa_r+0x70>
    9020:	0338      	lsls	r0, r7, #12
    9022:	d000      	beq.n	9026 <_dtoa_r+0x48e>
    9024:	e5fe      	b.n	8c24 <_dtoa_r+0x8c>
    9026:	4892      	ldr	r0, [pc, #584]	; (9270 <_dtoa_r+0x6d8>)
    9028:	e5fd      	b.n	8c26 <_dtoa_r+0x8e>
    902a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    902c:	4698      	mov	r8, r3
    902e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9030:	4443      	add	r3, r8
    9032:	001e      	movs	r6, r3
    9034:	4b8f      	ldr	r3, [pc, #572]	; (9274 <_dtoa_r+0x6dc>)
    9036:	18f3      	adds	r3, r6, r3
    9038:	2b20      	cmp	r3, #32
    903a:	dc00      	bgt.n	903e <_dtoa_r+0x4a6>
    903c:	e1fe      	b.n	943c <_dtoa_r+0x8a4>
    903e:	4a8e      	ldr	r2, [pc, #568]	; (9278 <_dtoa_r+0x6e0>)
    9040:	9902      	ldr	r1, [sp, #8]
    9042:	18b2      	adds	r2, r6, r2
    9044:	40d1      	lsrs	r1, r2
    9046:	2240      	movs	r2, #64	; 0x40
    9048:	0038      	movs	r0, r7
    904a:	1ad3      	subs	r3, r2, r3
    904c:	4098      	lsls	r0, r3
    904e:	4308      	orrs	r0, r1
    9050:	f004 f9ca 	bl	d3e8 <__aeabi_ui2d>
    9054:	2301      	movs	r3, #1
    9056:	4c89      	ldr	r4, [pc, #548]	; (927c <_dtoa_r+0x6e4>)
    9058:	3e01      	subs	r6, #1
    905a:	1909      	adds	r1, r1, r4
    905c:	9312      	str	r3, [sp, #72]	; 0x48
    905e:	e60d      	b.n	8c7c <_dtoa_r+0xe4>
    9060:	4887      	ldr	r0, [pc, #540]	; (9280 <_dtoa_r+0x6e8>)
    9062:	e5d1      	b.n	8c08 <_dtoa_r+0x70>
    9064:	2300      	movs	r3, #0
    9066:	465a      	mov	r2, fp
    9068:	2100      	movs	r1, #0
    906a:	6453      	str	r3, [r2, #68]	; 0x44
    906c:	4658      	mov	r0, fp
    906e:	f001 fd55 	bl	ab1c <_Balloc>
    9072:	465b      	mov	r3, fp
    9074:	6418      	str	r0, [r3, #64]	; 0x40
    9076:	2301      	movs	r3, #1
    9078:	425b      	negs	r3, r3
    907a:	9308      	str	r3, [sp, #32]
    907c:	930f      	str	r3, [sp, #60]	; 0x3c
    907e:	2300      	movs	r3, #0
    9080:	9323      	str	r3, [sp, #140]	; 0x8c
    9082:	9322      	str	r3, [sp, #136]	; 0x88
    9084:	3301      	adds	r3, #1
    9086:	9009      	str	r0, [sp, #36]	; 0x24
    9088:	930c      	str	r3, [sp, #48]	; 0x30
    908a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    908c:	2b00      	cmp	r3, #0
    908e:	da00      	bge.n	9092 <_dtoa_r+0x4fa>
    9090:	e0ab      	b.n	91ea <_dtoa_r+0x652>
    9092:	9a05      	ldr	r2, [sp, #20]
    9094:	2a0e      	cmp	r2, #14
    9096:	dd00      	ble.n	909a <_dtoa_r+0x502>
    9098:	e0a7      	b.n	91ea <_dtoa_r+0x652>
    909a:	00d3      	lsls	r3, r2, #3
    909c:	4a79      	ldr	r2, [pc, #484]	; (9284 <_dtoa_r+0x6ec>)
    909e:	18d3      	adds	r3, r2, r3
    90a0:	685c      	ldr	r4, [r3, #4]
    90a2:	681b      	ldr	r3, [r3, #0]
    90a4:	9306      	str	r3, [sp, #24]
    90a6:	9407      	str	r4, [sp, #28]
    90a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    90aa:	2b00      	cmp	r3, #0
    90ac:	da00      	bge.n	90b0 <_dtoa_r+0x518>
    90ae:	e1fb      	b.n	94a8 <_dtoa_r+0x910>
    90b0:	9e06      	ldr	r6, [sp, #24]
    90b2:	9f07      	ldr	r7, [sp, #28]
    90b4:	9c02      	ldr	r4, [sp, #8]
    90b6:	9d03      	ldr	r5, [sp, #12]
    90b8:	0032      	movs	r2, r6
    90ba:	003b      	movs	r3, r7
    90bc:	0020      	movs	r0, r4
    90be:	0029      	movs	r1, r5
    90c0:	f003 f9c4 	bl	c44c <__aeabi_ddiv>
    90c4:	f004 f95a 	bl	d37c <__aeabi_d2iz>
    90c8:	4680      	mov	r8, r0
    90ca:	f7fd fd8d 	bl	6be8 <__aeabi_i2d>
    90ce:	0032      	movs	r2, r6
    90d0:	003b      	movs	r3, r7
    90d2:	f7fd fb0f 	bl	66f4 <__aeabi_dmul>
    90d6:	0002      	movs	r2, r0
    90d8:	000b      	movs	r3, r1
    90da:	0020      	movs	r0, r4
    90dc:	0029      	movs	r1, r5
    90de:	f003 fdd9 	bl	cc94 <__aeabi_dsub>
    90e2:	4643      	mov	r3, r8
    90e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    90e6:	3330      	adds	r3, #48	; 0x30
    90e8:	7013      	strb	r3, [r2, #0]
    90ea:	9b08      	ldr	r3, [sp, #32]
    90ec:	0006      	movs	r6, r0
    90ee:	000f      	movs	r7, r1
    90f0:	1c54      	adds	r4, r2, #1
    90f2:	2b01      	cmp	r3, #1
    90f4:	d04a      	beq.n	918c <_dtoa_r+0x5f4>
    90f6:	2200      	movs	r2, #0
    90f8:	4b5c      	ldr	r3, [pc, #368]	; (926c <_dtoa_r+0x6d4>)
    90fa:	f7fd fafb 	bl	66f4 <__aeabi_dmul>
    90fe:	2200      	movs	r2, #0
    9100:	2300      	movs	r3, #0
    9102:	0006      	movs	r6, r0
    9104:	000f      	movs	r7, r1
    9106:	f002 fe47 	bl	bd98 <__aeabi_dcmpeq>
    910a:	2800      	cmp	r0, #0
    910c:	d000      	beq.n	9110 <_dtoa_r+0x578>
    910e:	e776      	b.n	8ffe <_dtoa_r+0x466>
    9110:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9112:	9a08      	ldr	r2, [sp, #32]
    9114:	469c      	mov	ip, r3
    9116:	1c9d      	adds	r5, r3, #2
    9118:	465b      	mov	r3, fp
    911a:	4462      	add	r2, ip
    911c:	46aa      	mov	sl, r5
    911e:	9c06      	ldr	r4, [sp, #24]
    9120:	9d07      	ldr	r5, [sp, #28]
    9122:	4691      	mov	r9, r2
    9124:	9302      	str	r3, [sp, #8]
    9126:	e00f      	b.n	9148 <_dtoa_r+0x5b0>
    9128:	2200      	movs	r2, #0
    912a:	4b50      	ldr	r3, [pc, #320]	; (926c <_dtoa_r+0x6d4>)
    912c:	f7fd fae2 	bl	66f4 <__aeabi_dmul>
    9130:	2301      	movs	r3, #1
    9132:	469c      	mov	ip, r3
    9134:	2200      	movs	r2, #0
    9136:	2300      	movs	r3, #0
    9138:	0006      	movs	r6, r0
    913a:	000f      	movs	r7, r1
    913c:	44e2      	add	sl, ip
    913e:	f002 fe2b 	bl	bd98 <__aeabi_dcmpeq>
    9142:	2800      	cmp	r0, #0
    9144:	d000      	beq.n	9148 <_dtoa_r+0x5b0>
    9146:	e2db      	b.n	9700 <_dtoa_r+0xb68>
    9148:	0022      	movs	r2, r4
    914a:	002b      	movs	r3, r5
    914c:	0030      	movs	r0, r6
    914e:	0039      	movs	r1, r7
    9150:	f003 f97c 	bl	c44c <__aeabi_ddiv>
    9154:	f004 f912 	bl	d37c <__aeabi_d2iz>
    9158:	4680      	mov	r8, r0
    915a:	f7fd fd45 	bl	6be8 <__aeabi_i2d>
    915e:	0022      	movs	r2, r4
    9160:	002b      	movs	r3, r5
    9162:	f7fd fac7 	bl	66f4 <__aeabi_dmul>
    9166:	0002      	movs	r2, r0
    9168:	000b      	movs	r3, r1
    916a:	0030      	movs	r0, r6
    916c:	0039      	movs	r1, r7
    916e:	f003 fd91 	bl	cc94 <__aeabi_dsub>
    9172:	4653      	mov	r3, sl
    9174:	4642      	mov	r2, r8
    9176:	3b01      	subs	r3, #1
    9178:	3230      	adds	r2, #48	; 0x30
    917a:	0006      	movs	r6, r0
    917c:	000f      	movs	r7, r1
    917e:	46d3      	mov	fp, sl
    9180:	701a      	strb	r2, [r3, #0]
    9182:	45d1      	cmp	r9, sl
    9184:	d1d0      	bne.n	9128 <_dtoa_r+0x590>
    9186:	9b02      	ldr	r3, [sp, #8]
    9188:	4654      	mov	r4, sl
    918a:	469b      	mov	fp, r3
    918c:	0032      	movs	r2, r6
    918e:	003b      	movs	r3, r7
    9190:	0030      	movs	r0, r6
    9192:	0039      	movs	r1, r7
    9194:	f002 fe2e 	bl	bdf4 <__aeabi_dadd>
    9198:	0006      	movs	r6, r0
    919a:	000f      	movs	r7, r1
    919c:	0002      	movs	r2, r0
    919e:	000b      	movs	r3, r1
    91a0:	9806      	ldr	r0, [sp, #24]
    91a2:	9907      	ldr	r1, [sp, #28]
    91a4:	f002 fdfe 	bl	bda4 <__aeabi_dcmplt>
    91a8:	2800      	cmp	r0, #0
    91aa:	d10c      	bne.n	91c6 <_dtoa_r+0x62e>
    91ac:	9806      	ldr	r0, [sp, #24]
    91ae:	9907      	ldr	r1, [sp, #28]
    91b0:	0032      	movs	r2, r6
    91b2:	003b      	movs	r3, r7
    91b4:	f002 fdf0 	bl	bd98 <__aeabi_dcmpeq>
    91b8:	2800      	cmp	r0, #0
    91ba:	d100      	bne.n	91be <_dtoa_r+0x626>
    91bc:	e71f      	b.n	8ffe <_dtoa_r+0x466>
    91be:	4643      	mov	r3, r8
    91c0:	07db      	lsls	r3, r3, #31
    91c2:	d400      	bmi.n	91c6 <_dtoa_r+0x62e>
    91c4:	e71b      	b.n	8ffe <_dtoa_r+0x466>
    91c6:	1e65      	subs	r5, r4, #1
    91c8:	782b      	ldrb	r3, [r5, #0]
    91ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
    91cc:	e006      	b.n	91dc <_dtoa_r+0x644>
    91ce:	4295      	cmp	r5, r2
    91d0:	d100      	bne.n	91d4 <_dtoa_r+0x63c>
    91d2:	e353      	b.n	987c <_dtoa_r+0xce4>
    91d4:	3c02      	subs	r4, #2
    91d6:	7823      	ldrb	r3, [r4, #0]
    91d8:	002c      	movs	r4, r5
    91da:	3d01      	subs	r5, #1
    91dc:	2b39      	cmp	r3, #57	; 0x39
    91de:	d0f6      	beq.n	91ce <_dtoa_r+0x636>
    91e0:	4698      	mov	r8, r3
    91e2:	4643      	mov	r3, r8
    91e4:	3301      	adds	r3, #1
    91e6:	702b      	strb	r3, [r5, #0]
    91e8:	e709      	b.n	8ffe <_dtoa_r+0x466>
    91ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    91ec:	2a00      	cmp	r2, #0
    91ee:	d04b      	beq.n	9288 <_dtoa_r+0x6f0>
    91f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
    91f2:	2a01      	cmp	r2, #1
    91f4:	dc00      	bgt.n	91f8 <_dtoa_r+0x660>
    91f6:	e179      	b.n	94ec <_dtoa_r+0x954>
    91f8:	9b08      	ldr	r3, [sp, #32]
    91fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    91fc:	1e5d      	subs	r5, r3, #1
    91fe:	42aa      	cmp	r2, r5
    9200:	da00      	bge.n	9204 <_dtoa_r+0x66c>
    9202:	e2b8      	b.n	9776 <_dtoa_r+0xbde>
    9204:	1b55      	subs	r5, r2, r5
    9206:	9b08      	ldr	r3, [sp, #32]
    9208:	2b00      	cmp	r3, #0
    920a:	da00      	bge.n	920e <_dtoa_r+0x676>
    920c:	e3c5      	b.n	999a <_dtoa_r+0xe02>
    920e:	9c06      	ldr	r4, [sp, #24]
    9210:	9b08      	ldr	r3, [sp, #32]
    9212:	9a06      	ldr	r2, [sp, #24]
    9214:	2101      	movs	r1, #1
    9216:	4694      	mov	ip, r2
    9218:	449c      	add	ip, r3
    921a:	4662      	mov	r2, ip
    921c:	4658      	mov	r0, fp
    921e:	9206      	str	r2, [sp, #24]
    9220:	449a      	add	sl, r3
    9222:	f001 fd3f 	bl	aca4 <__i2b>
    9226:	0007      	movs	r7, r0
    9228:	e031      	b.n	928e <_dtoa_r+0x6f6>
    922a:	9a06      	ldr	r2, [sp, #24]
    922c:	9b05      	ldr	r3, [sp, #20]
    922e:	1ad2      	subs	r2, r2, r3
    9230:	425b      	negs	r3, r3
    9232:	930b      	str	r3, [sp, #44]	; 0x2c
    9234:	2300      	movs	r3, #0
    9236:	9206      	str	r2, [sp, #24]
    9238:	930e      	str	r3, [sp, #56]	; 0x38
    923a:	e56f      	b.n	8d1c <_dtoa_r+0x184>
    923c:	9f05      	ldr	r7, [sp, #20]
    923e:	0038      	movs	r0, r7
    9240:	f7fd fcd2 	bl	6be8 <__aeabi_i2d>
    9244:	000b      	movs	r3, r1
    9246:	0002      	movs	r2, r0
    9248:	0029      	movs	r1, r5
    924a:	0020      	movs	r0, r4
    924c:	f002 fda4 	bl	bd98 <__aeabi_dcmpeq>
    9250:	4243      	negs	r3, r0
    9252:	4143      	adcs	r3, r0
    9254:	1afb      	subs	r3, r7, r3
    9256:	9305      	str	r3, [sp, #20]
    9258:	e539      	b.n	8cce <_dtoa_r+0x136>
    925a:	4653      	mov	r3, sl
    925c:	425b      	negs	r3, r3
    925e:	9306      	str	r3, [sp, #24]
    9260:	2300      	movs	r3, #0
    9262:	469a      	mov	sl, r3
    9264:	e551      	b.n	8d0a <_dtoa_r+0x172>
    9266:	46c0      	nop			; (mov r8, r8)
    9268:	3ff00000 	.word	0x3ff00000
    926c:	40240000 	.word	0x40240000
    9270:	0000dfc8 	.word	0x0000dfc8
    9274:	00000432 	.word	0x00000432
    9278:	00000412 	.word	0x00000412
    927c:	fe100000 	.word	0xfe100000
    9280:	0000dfb4 	.word	0x0000dfb4
    9284:	0000dfe8 	.word	0x0000dfe8
    9288:	2700      	movs	r7, #0
    928a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    928c:	9c06      	ldr	r4, [sp, #24]
    928e:	2c00      	cmp	r4, #0
    9290:	d00d      	beq.n	92ae <_dtoa_r+0x716>
    9292:	4653      	mov	r3, sl
    9294:	2b00      	cmp	r3, #0
    9296:	dd0a      	ble.n	92ae <_dtoa_r+0x716>
    9298:	1e23      	subs	r3, r4, #0
    929a:	4553      	cmp	r3, sl
    929c:	dd00      	ble.n	92a0 <_dtoa_r+0x708>
    929e:	e0d5      	b.n	944c <_dtoa_r+0x8b4>
    92a0:	9a06      	ldr	r2, [sp, #24]
    92a2:	1ae4      	subs	r4, r4, r3
    92a4:	1ad2      	subs	r2, r2, r3
    92a6:	9206      	str	r2, [sp, #24]
    92a8:	4652      	mov	r2, sl
    92aa:	1ad3      	subs	r3, r2, r3
    92ac:	469a      	mov	sl, r3
    92ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    92b0:	2b00      	cmp	r3, #0
    92b2:	dc00      	bgt.n	92b6 <_dtoa_r+0x71e>
    92b4:	e1f9      	b.n	96aa <_dtoa_r+0xb12>
    92b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    92b8:	2a00      	cmp	r2, #0
    92ba:	d100      	bne.n	92be <_dtoa_r+0x726>
    92bc:	e0c9      	b.n	9452 <_dtoa_r+0x8ba>
    92be:	2d00      	cmp	r5, #0
    92c0:	d100      	bne.n	92c4 <_dtoa_r+0x72c>
    92c2:	e0c6      	b.n	9452 <_dtoa_r+0x8ba>
    92c4:	0039      	movs	r1, r7
    92c6:	002a      	movs	r2, r5
    92c8:	4658      	mov	r0, fp
    92ca:	f001 fda3 	bl	ae14 <__pow5mult>
    92ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    92d0:	0001      	movs	r1, r0
    92d2:	001a      	movs	r2, r3
    92d4:	0007      	movs	r7, r0
    92d6:	4658      	mov	r0, fp
    92d8:	4698      	mov	r8, r3
    92da:	f001 fced 	bl	acb8 <__multiply>
    92de:	4641      	mov	r1, r8
    92e0:	0006      	movs	r6, r0
    92e2:	4658      	mov	r0, fp
    92e4:	f001 fc42 	bl	ab6c <_Bfree>
    92e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    92ea:	1b5b      	subs	r3, r3, r5
    92ec:	930b      	str	r3, [sp, #44]	; 0x2c
    92ee:	d000      	beq.n	92f2 <_dtoa_r+0x75a>
    92f0:	e0ae      	b.n	9450 <_dtoa_r+0x8b8>
    92f2:	2101      	movs	r1, #1
    92f4:	4658      	mov	r0, fp
    92f6:	f001 fcd5 	bl	aca4 <__i2b>
    92fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    92fc:	4681      	mov	r9, r0
    92fe:	2b00      	cmp	r3, #0
    9300:	d100      	bne.n	9304 <_dtoa_r+0x76c>
    9302:	e0ff      	b.n	9504 <_dtoa_r+0x96c>
    9304:	001a      	movs	r2, r3
    9306:	0001      	movs	r1, r0
    9308:	4658      	mov	r0, fp
    930a:	f001 fd83 	bl	ae14 <__pow5mult>
    930e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9310:	4681      	mov	r9, r0
    9312:	2b01      	cmp	r3, #1
    9314:	dc00      	bgt.n	9318 <_dtoa_r+0x780>
    9316:	e0a3      	b.n	9460 <_dtoa_r+0x8c8>
    9318:	2500      	movs	r5, #0
    931a:	464b      	mov	r3, r9
    931c:	691b      	ldr	r3, [r3, #16]
    931e:	3303      	adds	r3, #3
    9320:	009b      	lsls	r3, r3, #2
    9322:	444b      	add	r3, r9
    9324:	6858      	ldr	r0, [r3, #4]
    9326:	f001 fc71 	bl	ac0c <__hi0bits>
    932a:	2320      	movs	r3, #32
    932c:	1a18      	subs	r0, r3, r0
    932e:	231f      	movs	r3, #31
    9330:	4450      	add	r0, sl
    9332:	4018      	ands	r0, r3
    9334:	d100      	bne.n	9338 <_dtoa_r+0x7a0>
    9336:	e0e3      	b.n	9500 <_dtoa_r+0x968>
    9338:	3301      	adds	r3, #1
    933a:	1a1b      	subs	r3, r3, r0
    933c:	2b04      	cmp	r3, #4
    933e:	dc00      	bgt.n	9342 <_dtoa_r+0x7aa>
    9340:	e3bf      	b.n	9ac2 <_dtoa_r+0xf2a>
    9342:	231c      	movs	r3, #28
    9344:	1a18      	subs	r0, r3, r0
    9346:	9b06      	ldr	r3, [sp, #24]
    9348:	1824      	adds	r4, r4, r0
    934a:	469c      	mov	ip, r3
    934c:	4484      	add	ip, r0
    934e:	4663      	mov	r3, ip
    9350:	4482      	add	sl, r0
    9352:	9306      	str	r3, [sp, #24]
    9354:	9b06      	ldr	r3, [sp, #24]
    9356:	2b00      	cmp	r3, #0
    9358:	dd05      	ble.n	9366 <_dtoa_r+0x7ce>
    935a:	0031      	movs	r1, r6
    935c:	001a      	movs	r2, r3
    935e:	4658      	mov	r0, fp
    9360:	f001 fdb6 	bl	aed0 <__lshift>
    9364:	0006      	movs	r6, r0
    9366:	4653      	mov	r3, sl
    9368:	2b00      	cmp	r3, #0
    936a:	dd05      	ble.n	9378 <_dtoa_r+0x7e0>
    936c:	4649      	mov	r1, r9
    936e:	4652      	mov	r2, sl
    9370:	4658      	mov	r0, fp
    9372:	f001 fdad 	bl	aed0 <__lshift>
    9376:	4681      	mov	r9, r0
    9378:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    937a:	2b00      	cmp	r3, #0
    937c:	d000      	beq.n	9380 <_dtoa_r+0x7e8>
    937e:	e161      	b.n	9644 <_dtoa_r+0xaac>
    9380:	9b08      	ldr	r3, [sp, #32]
    9382:	2b00      	cmp	r3, #0
    9384:	dc00      	bgt.n	9388 <_dtoa_r+0x7f0>
    9386:	e192      	b.n	96ae <_dtoa_r+0xb16>
    9388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    938a:	2b00      	cmp	r3, #0
    938c:	d000      	beq.n	9390 <_dtoa_r+0x7f8>
    938e:	e0d0      	b.n	9532 <_dtoa_r+0x99a>
    9390:	464b      	mov	r3, r9
    9392:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9394:	46b9      	mov	r9, r7
    9396:	2400      	movs	r4, #0
    9398:	9d08      	ldr	r5, [sp, #32]
    939a:	4690      	mov	r8, r2
    939c:	001f      	movs	r7, r3
    939e:	e006      	b.n	93ae <_dtoa_r+0x816>
    93a0:	0031      	movs	r1, r6
    93a2:	2300      	movs	r3, #0
    93a4:	220a      	movs	r2, #10
    93a6:	4658      	mov	r0, fp
    93a8:	f001 fbea 	bl	ab80 <__multadd>
    93ac:	0006      	movs	r6, r0
    93ae:	0039      	movs	r1, r7
    93b0:	0030      	movs	r0, r6
    93b2:	f7ff fb49 	bl	8a48 <quorem>
    93b6:	4643      	mov	r3, r8
    93b8:	3030      	adds	r0, #48	; 0x30
    93ba:	5518      	strb	r0, [r3, r4]
    93bc:	3401      	adds	r4, #1
    93be:	42ac      	cmp	r4, r5
    93c0:	dbee      	blt.n	93a0 <_dtoa_r+0x808>
    93c2:	003b      	movs	r3, r7
    93c4:	464f      	mov	r7, r9
    93c6:	4699      	mov	r9, r3
    93c8:	9002      	str	r0, [sp, #8]
    93ca:	9c08      	ldr	r4, [sp, #32]
    93cc:	2c00      	cmp	r4, #0
    93ce:	dc00      	bgt.n	93d2 <_dtoa_r+0x83a>
    93d0:	e2e8      	b.n	99a4 <_dtoa_r+0xe0c>
    93d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    93d4:	469c      	mov	ip, r3
    93d6:	2300      	movs	r3, #0
    93d8:	4698      	mov	r8, r3
    93da:	4464      	add	r4, ip
    93dc:	0031      	movs	r1, r6
    93de:	2201      	movs	r2, #1
    93e0:	4658      	mov	r0, fp
    93e2:	f001 fd75 	bl	aed0 <__lshift>
    93e6:	4649      	mov	r1, r9
    93e8:	900a      	str	r0, [sp, #40]	; 0x28
    93ea:	f001 fdd1 	bl	af90 <__mcmp>
    93ee:	2800      	cmp	r0, #0
    93f0:	dc00      	bgt.n	93f4 <_dtoa_r+0x85c>
    93f2:	e1ff      	b.n	97f4 <_dtoa_r+0xc5c>
    93f4:	1e65      	subs	r5, r4, #1
    93f6:	782b      	ldrb	r3, [r5, #0]
    93f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    93fa:	e006      	b.n	940a <_dtoa_r+0x872>
    93fc:	4295      	cmp	r5, r2
    93fe:	d100      	bne.n	9402 <_dtoa_r+0x86a>
    9400:	e177      	b.n	96f2 <_dtoa_r+0xb5a>
    9402:	3c02      	subs	r4, #2
    9404:	7823      	ldrb	r3, [r4, #0]
    9406:	002c      	movs	r4, r5
    9408:	3d01      	subs	r5, #1
    940a:	2b39      	cmp	r3, #57	; 0x39
    940c:	d0f6      	beq.n	93fc <_dtoa_r+0x864>
    940e:	3301      	adds	r3, #1
    9410:	702b      	strb	r3, [r5, #0]
    9412:	4649      	mov	r1, r9
    9414:	4658      	mov	r0, fp
    9416:	f001 fba9 	bl	ab6c <_Bfree>
    941a:	2f00      	cmp	r7, #0
    941c:	d100      	bne.n	9420 <_dtoa_r+0x888>
    941e:	e5ee      	b.n	8ffe <_dtoa_r+0x466>
    9420:	4643      	mov	r3, r8
    9422:	2b00      	cmp	r3, #0
    9424:	d005      	beq.n	9432 <_dtoa_r+0x89a>
    9426:	45b8      	cmp	r8, r7
    9428:	d003      	beq.n	9432 <_dtoa_r+0x89a>
    942a:	4641      	mov	r1, r8
    942c:	4658      	mov	r0, fp
    942e:	f001 fb9d 	bl	ab6c <_Bfree>
    9432:	0039      	movs	r1, r7
    9434:	4658      	mov	r0, fp
    9436:	f001 fb99 	bl	ab6c <_Bfree>
    943a:	e5e0      	b.n	8ffe <_dtoa_r+0x466>
    943c:	2220      	movs	r2, #32
    943e:	9802      	ldr	r0, [sp, #8]
    9440:	1ad3      	subs	r3, r2, r3
    9442:	4098      	lsls	r0, r3
    9444:	e604      	b.n	9050 <_dtoa_r+0x4b8>
    9446:	2300      	movs	r3, #0
    9448:	930d      	str	r3, [sp, #52]	; 0x34
    944a:	e456      	b.n	8cfa <_dtoa_r+0x162>
    944c:	4653      	mov	r3, sl
    944e:	e727      	b.n	92a0 <_dtoa_r+0x708>
    9450:	960a      	str	r6, [sp, #40]	; 0x28
    9452:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9454:	990a      	ldr	r1, [sp, #40]	; 0x28
    9456:	4658      	mov	r0, fp
    9458:	f001 fcdc 	bl	ae14 <__pow5mult>
    945c:	0006      	movs	r6, r0
    945e:	e748      	b.n	92f2 <_dtoa_r+0x75a>
    9460:	9b02      	ldr	r3, [sp, #8]
    9462:	2b00      	cmp	r3, #0
    9464:	d000      	beq.n	9468 <_dtoa_r+0x8d0>
    9466:	e757      	b.n	9318 <_dtoa_r+0x780>
    9468:	9902      	ldr	r1, [sp, #8]
    946a:	9a03      	ldr	r2, [sp, #12]
    946c:	2500      	movs	r5, #0
    946e:	0313      	lsls	r3, r2, #12
    9470:	d109      	bne.n	9486 <_dtoa_r+0x8ee>
    9472:	4bdb      	ldr	r3, [pc, #876]	; (97e0 <_dtoa_r+0xc48>)
    9474:	4213      	tst	r3, r2
    9476:	d006      	beq.n	9486 <_dtoa_r+0x8ee>
    9478:	9b06      	ldr	r3, [sp, #24]
    947a:	3501      	adds	r5, #1
    947c:	3301      	adds	r3, #1
    947e:	9306      	str	r3, [sp, #24]
    9480:	2301      	movs	r3, #1
    9482:	469c      	mov	ip, r3
    9484:	44e2      	add	sl, ip
    9486:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9488:	2001      	movs	r0, #1
    948a:	2b00      	cmp	r3, #0
    948c:	d100      	bne.n	9490 <_dtoa_r+0x8f8>
    948e:	e74e      	b.n	932e <_dtoa_r+0x796>
    9490:	e743      	b.n	931a <_dtoa_r+0x782>
    9492:	2301      	movs	r3, #1
    9494:	930c      	str	r3, [sp, #48]	; 0x30
    9496:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9498:	2b00      	cmp	r3, #0
    949a:	dc00      	bgt.n	949e <_dtoa_r+0x906>
    949c:	e0c7      	b.n	962e <_dtoa_r+0xa96>
    949e:	001e      	movs	r6, r3
    94a0:	001d      	movs	r5, r3
    94a2:	930f      	str	r3, [sp, #60]	; 0x3c
    94a4:	9308      	str	r3, [sp, #32]
    94a6:	e463      	b.n	8d70 <_dtoa_r+0x1d8>
    94a8:	9b08      	ldr	r3, [sp, #32]
    94aa:	2b00      	cmp	r3, #0
    94ac:	dd00      	ble.n	94b0 <_dtoa_r+0x918>
    94ae:	e5ff      	b.n	90b0 <_dtoa_r+0x518>
    94b0:	d000      	beq.n	94b4 <_dtoa_r+0x91c>
    94b2:	e159      	b.n	9768 <_dtoa_r+0xbd0>
    94b4:	9806      	ldr	r0, [sp, #24]
    94b6:	9907      	ldr	r1, [sp, #28]
    94b8:	2200      	movs	r2, #0
    94ba:	4bca      	ldr	r3, [pc, #808]	; (97e4 <_dtoa_r+0xc4c>)
    94bc:	f7fd f91a 	bl	66f4 <__aeabi_dmul>
    94c0:	9a02      	ldr	r2, [sp, #8]
    94c2:	9b03      	ldr	r3, [sp, #12]
    94c4:	f002 fc8c 	bl	bde0 <__aeabi_dcmpge>
    94c8:	2300      	movs	r3, #0
    94ca:	2700      	movs	r7, #0
    94cc:	4699      	mov	r9, r3
    94ce:	2800      	cmp	r0, #0
    94d0:	d100      	bne.n	94d4 <_dtoa_r+0x93c>
    94d2:	e102      	b.n	96da <_dtoa_r+0xb42>
    94d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    94d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
    94d8:	43db      	mvns	r3, r3
    94da:	9305      	str	r3, [sp, #20]
    94dc:	4649      	mov	r1, r9
    94de:	4658      	mov	r0, fp
    94e0:	f001 fb44 	bl	ab6c <_Bfree>
    94e4:	2f00      	cmp	r7, #0
    94e6:	d100      	bne.n	94ea <_dtoa_r+0x952>
    94e8:	e589      	b.n	8ffe <_dtoa_r+0x466>
    94ea:	e7a2      	b.n	9432 <_dtoa_r+0x89a>
    94ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
    94ee:	2a00      	cmp	r2, #0
    94f0:	d100      	bne.n	94f4 <_dtoa_r+0x95c>
    94f2:	e259      	b.n	99a8 <_dtoa_r+0xe10>
    94f4:	4abc      	ldr	r2, [pc, #752]	; (97e8 <_dtoa_r+0xc50>)
    94f6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    94f8:	4694      	mov	ip, r2
    94fa:	9c06      	ldr	r4, [sp, #24]
    94fc:	4463      	add	r3, ip
    94fe:	e688      	b.n	9212 <_dtoa_r+0x67a>
    9500:	201c      	movs	r0, #28
    9502:	e720      	b.n	9346 <_dtoa_r+0x7ae>
    9504:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9506:	2b01      	cmp	r3, #1
    9508:	dc00      	bgt.n	950c <_dtoa_r+0x974>
    950a:	e2b5      	b.n	9a78 <_dtoa_r+0xee0>
    950c:	2500      	movs	r5, #0
    950e:	2001      	movs	r0, #1
    9510:	e70d      	b.n	932e <_dtoa_r+0x796>
    9512:	2300      	movs	r3, #0
    9514:	0039      	movs	r1, r7
    9516:	220a      	movs	r2, #10
    9518:	4658      	mov	r0, fp
    951a:	f001 fb31 	bl	ab80 <__multadd>
    951e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9520:	0007      	movs	r7, r0
    9522:	2b00      	cmp	r3, #0
    9524:	dc04      	bgt.n	9530 <_dtoa_r+0x998>
    9526:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9528:	2b02      	cmp	r3, #2
    952a:	dd00      	ble.n	952e <_dtoa_r+0x996>
    952c:	e2cf      	b.n	9ace <_dtoa_r+0xf36>
    952e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9530:	9308      	str	r3, [sp, #32]
    9532:	2c00      	cmp	r4, #0
    9534:	dd05      	ble.n	9542 <_dtoa_r+0x9aa>
    9536:	0039      	movs	r1, r7
    9538:	0022      	movs	r2, r4
    953a:	4658      	mov	r0, fp
    953c:	f001 fcc8 	bl	aed0 <__lshift>
    9540:	0007      	movs	r7, r0
    9542:	46ba      	mov	sl, r7
    9544:	2d00      	cmp	r5, #0
    9546:	d000      	beq.n	954a <_dtoa_r+0x9b2>
    9548:	e19f      	b.n	988a <_dtoa_r+0xcf2>
    954a:	9c08      	ldr	r4, [sp, #32]
    954c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    954e:	3c01      	subs	r4, #1
    9550:	4694      	mov	ip, r2
    9552:	0023      	movs	r3, r4
    9554:	4463      	add	r3, ip
    9556:	930a      	str	r3, [sp, #40]	; 0x28
    9558:	2301      	movs	r3, #1
    955a:	0015      	movs	r5, r2
    955c:	9a02      	ldr	r2, [sp, #8]
    955e:	46d8      	mov	r8, fp
    9560:	401a      	ands	r2, r3
    9562:	464b      	mov	r3, r9
    9564:	46a9      	mov	r9, r5
    9566:	9208      	str	r2, [sp, #32]
    9568:	9306      	str	r3, [sp, #24]
    956a:	9d06      	ldr	r5, [sp, #24]
    956c:	0030      	movs	r0, r6
    956e:	0029      	movs	r1, r5
    9570:	f7ff fa6a 	bl	8a48 <quorem>
    9574:	0003      	movs	r3, r0
    9576:	900b      	str	r0, [sp, #44]	; 0x2c
    9578:	3330      	adds	r3, #48	; 0x30
    957a:	0039      	movs	r1, r7
    957c:	0030      	movs	r0, r6
    957e:	9302      	str	r3, [sp, #8]
    9580:	f001 fd06 	bl	af90 <__mcmp>
    9584:	0029      	movs	r1, r5
    9586:	0004      	movs	r4, r0
    9588:	4652      	mov	r2, sl
    958a:	4640      	mov	r0, r8
    958c:	f001 fd1e 	bl	afcc <__mdiff>
    9590:	68c3      	ldr	r3, [r0, #12]
    9592:	0005      	movs	r5, r0
    9594:	2b00      	cmp	r3, #0
    9596:	d147      	bne.n	9628 <_dtoa_r+0xa90>
    9598:	0001      	movs	r1, r0
    959a:	0030      	movs	r0, r6
    959c:	f001 fcf8 	bl	af90 <__mcmp>
    95a0:	4683      	mov	fp, r0
    95a2:	0029      	movs	r1, r5
    95a4:	4640      	mov	r0, r8
    95a6:	f001 fae1 	bl	ab6c <_Bfree>
    95aa:	465b      	mov	r3, fp
    95ac:	9a22      	ldr	r2, [sp, #136]	; 0x88
    95ae:	4313      	orrs	r3, r2
    95b0:	d103      	bne.n	95ba <_dtoa_r+0xa22>
    95b2:	9b08      	ldr	r3, [sp, #32]
    95b4:	2b00      	cmp	r3, #0
    95b6:	d100      	bne.n	95ba <_dtoa_r+0xa22>
    95b8:	e249      	b.n	9a4e <_dtoa_r+0xeb6>
    95ba:	2c00      	cmp	r4, #0
    95bc:	da00      	bge.n	95c0 <_dtoa_r+0xa28>
    95be:	e0ec      	b.n	979a <_dtoa_r+0xc02>
    95c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    95c2:	431c      	orrs	r4, r3
    95c4:	d103      	bne.n	95ce <_dtoa_r+0xa36>
    95c6:	9b08      	ldr	r3, [sp, #32]
    95c8:	2b00      	cmp	r3, #0
    95ca:	d100      	bne.n	95ce <_dtoa_r+0xa36>
    95cc:	e0e5      	b.n	979a <_dtoa_r+0xc02>
    95ce:	465b      	mov	r3, fp
    95d0:	2b00      	cmp	r3, #0
    95d2:	dd00      	ble.n	95d6 <_dtoa_r+0xa3e>
    95d4:	e1cc      	b.n	9970 <_dtoa_r+0xdd8>
    95d6:	466a      	mov	r2, sp
    95d8:	464b      	mov	r3, r9
    95da:	7a12      	ldrb	r2, [r2, #8]
    95dc:	1c5d      	adds	r5, r3, #1
    95de:	701a      	strb	r2, [r3, #0]
    95e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    95e2:	002c      	movs	r4, r5
    95e4:	4599      	cmp	r9, r3
    95e6:	d100      	bne.n	95ea <_dtoa_r+0xa52>
    95e8:	e1d1      	b.n	998e <_dtoa_r+0xdf6>
    95ea:	0031      	movs	r1, r6
    95ec:	2300      	movs	r3, #0
    95ee:	220a      	movs	r2, #10
    95f0:	4640      	mov	r0, r8
    95f2:	f001 fac5 	bl	ab80 <__multadd>
    95f6:	2300      	movs	r3, #0
    95f8:	0006      	movs	r6, r0
    95fa:	220a      	movs	r2, #10
    95fc:	1e39      	subs	r1, r7, #0
    95fe:	4640      	mov	r0, r8
    9600:	4551      	cmp	r1, sl
    9602:	d00b      	beq.n	961c <_dtoa_r+0xa84>
    9604:	f001 fabc 	bl	ab80 <__multadd>
    9608:	4651      	mov	r1, sl
    960a:	0007      	movs	r7, r0
    960c:	2300      	movs	r3, #0
    960e:	220a      	movs	r2, #10
    9610:	4640      	mov	r0, r8
    9612:	f001 fab5 	bl	ab80 <__multadd>
    9616:	46a9      	mov	r9, r5
    9618:	4682      	mov	sl, r0
    961a:	e7a6      	b.n	956a <_dtoa_r+0x9d2>
    961c:	f001 fab0 	bl	ab80 <__multadd>
    9620:	46a9      	mov	r9, r5
    9622:	0007      	movs	r7, r0
    9624:	4682      	mov	sl, r0
    9626:	e7a0      	b.n	956a <_dtoa_r+0x9d2>
    9628:	2301      	movs	r3, #1
    962a:	469b      	mov	fp, r3
    962c:	e7b9      	b.n	95a2 <_dtoa_r+0xa0a>
    962e:	2301      	movs	r3, #1
    9630:	2501      	movs	r5, #1
    9632:	930f      	str	r3, [sp, #60]	; 0x3c
    9634:	9308      	str	r3, [sp, #32]
    9636:	9323      	str	r3, [sp, #140]	; 0x8c
    9638:	2300      	movs	r3, #0
    963a:	465a      	mov	r2, fp
    963c:	2100      	movs	r1, #0
    963e:	6453      	str	r3, [r2, #68]	; 0x44
    9640:	f7ff fba7 	bl	8d92 <_dtoa_r+0x1fa>
    9644:	4649      	mov	r1, r9
    9646:	0030      	movs	r0, r6
    9648:	f001 fca2 	bl	af90 <__mcmp>
    964c:	2800      	cmp	r0, #0
    964e:	db00      	blt.n	9652 <_dtoa_r+0xaba>
    9650:	e696      	b.n	9380 <_dtoa_r+0x7e8>
    9652:	9b05      	ldr	r3, [sp, #20]
    9654:	0031      	movs	r1, r6
    9656:	3b01      	subs	r3, #1
    9658:	9305      	str	r3, [sp, #20]
    965a:	220a      	movs	r2, #10
    965c:	2300      	movs	r3, #0
    965e:	4658      	mov	r0, fp
    9660:	f001 fa8e 	bl	ab80 <__multadd>
    9664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9666:	0006      	movs	r6, r0
    9668:	2b00      	cmp	r3, #0
    966a:	d000      	beq.n	966e <_dtoa_r+0xad6>
    966c:	e751      	b.n	9512 <_dtoa_r+0x97a>
    966e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9670:	2b00      	cmp	r3, #0
    9672:	dc00      	bgt.n	9676 <_dtoa_r+0xade>
    9674:	e20d      	b.n	9a92 <_dtoa_r+0xefa>
    9676:	9308      	str	r3, [sp, #32]
    9678:	e68a      	b.n	9390 <_dtoa_r+0x7f8>
    967a:	2300      	movs	r3, #0
    967c:	930c      	str	r3, [sp, #48]	; 0x30
    967e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9680:	2b02      	cmp	r3, #2
    9682:	d100      	bne.n	9686 <_dtoa_r+0xaee>
    9684:	e707      	b.n	9496 <_dtoa_r+0x8fe>
    9686:	2400      	movs	r4, #0
    9688:	465b      	mov	r3, fp
    968a:	0021      	movs	r1, r4
    968c:	645c      	str	r4, [r3, #68]	; 0x44
    968e:	4658      	mov	r0, fp
    9690:	f001 fa44 	bl	ab1c <_Balloc>
    9694:	465b      	mov	r3, fp
    9696:	6418      	str	r0, [r3, #64]	; 0x40
    9698:	2301      	movs	r3, #1
    969a:	425b      	negs	r3, r3
    969c:	9308      	str	r3, [sp, #32]
    969e:	930f      	str	r3, [sp, #60]	; 0x3c
    96a0:	3302      	adds	r3, #2
    96a2:	9009      	str	r0, [sp, #36]	; 0x24
    96a4:	9423      	str	r4, [sp, #140]	; 0x8c
    96a6:	930c      	str	r3, [sp, #48]	; 0x30
    96a8:	e4ef      	b.n	908a <_dtoa_r+0x4f2>
    96aa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    96ac:	e621      	b.n	92f2 <_dtoa_r+0x75a>
    96ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
    96b0:	2b02      	cmp	r3, #2
    96b2:	dc00      	bgt.n	96b6 <_dtoa_r+0xb1e>
    96b4:	e668      	b.n	9388 <_dtoa_r+0x7f0>
    96b6:	9b08      	ldr	r3, [sp, #32]
    96b8:	2b00      	cmp	r3, #0
    96ba:	d000      	beq.n	96be <_dtoa_r+0xb26>
    96bc:	e188      	b.n	99d0 <_dtoa_r+0xe38>
    96be:	4649      	mov	r1, r9
    96c0:	2205      	movs	r2, #5
    96c2:	4658      	mov	r0, fp
    96c4:	f001 fa5c 	bl	ab80 <__multadd>
    96c8:	0001      	movs	r1, r0
    96ca:	4681      	mov	r9, r0
    96cc:	0030      	movs	r0, r6
    96ce:	f001 fc5f 	bl	af90 <__mcmp>
    96d2:	960a      	str	r6, [sp, #40]	; 0x28
    96d4:	2800      	cmp	r0, #0
    96d6:	dc00      	bgt.n	96da <_dtoa_r+0xb42>
    96d8:	e6fc      	b.n	94d4 <_dtoa_r+0x93c>
    96da:	2331      	movs	r3, #49	; 0x31
    96dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    96de:	7013      	strb	r3, [r2, #0]
    96e0:	9b05      	ldr	r3, [sp, #20]
    96e2:	1c54      	adds	r4, r2, #1
    96e4:	3301      	adds	r3, #1
    96e6:	9305      	str	r3, [sp, #20]
    96e8:	e6f8      	b.n	94dc <_dtoa_r+0x944>
    96ea:	2300      	movs	r3, #0
    96ec:	930c      	str	r3, [sp, #48]	; 0x30
    96ee:	f7ff fb32 	bl	8d56 <_dtoa_r+0x1be>
    96f2:	9b05      	ldr	r3, [sp, #20]
    96f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    96f6:	3301      	adds	r3, #1
    96f8:	9305      	str	r3, [sp, #20]
    96fa:	2331      	movs	r3, #49	; 0x31
    96fc:	7013      	strb	r3, [r2, #0]
    96fe:	e688      	b.n	9412 <_dtoa_r+0x87a>
    9700:	9b02      	ldr	r3, [sp, #8]
    9702:	465c      	mov	r4, fp
    9704:	469b      	mov	fp, r3
    9706:	e47a      	b.n	8ffe <_dtoa_r+0x466>
    9708:	4640      	mov	r0, r8
    970a:	f7fd fa6d 	bl	6be8 <__aeabi_i2d>
    970e:	0032      	movs	r2, r6
    9710:	003b      	movs	r3, r7
    9712:	f7fc ffef 	bl	66f4 <__aeabi_dmul>
    9716:	2200      	movs	r2, #0
    9718:	4b34      	ldr	r3, [pc, #208]	; (97ec <_dtoa_r+0xc54>)
    971a:	f002 fb6b 	bl	bdf4 <__aeabi_dadd>
    971e:	4a34      	ldr	r2, [pc, #208]	; (97f0 <_dtoa_r+0xc58>)
    9720:	000b      	movs	r3, r1
    9722:	4694      	mov	ip, r2
    9724:	4463      	add	r3, ip
    9726:	9002      	str	r0, [sp, #8]
    9728:	9103      	str	r1, [sp, #12]
    972a:	9303      	str	r3, [sp, #12]
    972c:	2200      	movs	r2, #0
    972e:	4b2d      	ldr	r3, [pc, #180]	; (97e4 <_dtoa_r+0xc4c>)
    9730:	0030      	movs	r0, r6
    9732:	0039      	movs	r1, r7
    9734:	f003 faae 	bl	cc94 <__aeabi_dsub>
    9738:	9e02      	ldr	r6, [sp, #8]
    973a:	9f03      	ldr	r7, [sp, #12]
    973c:	0032      	movs	r2, r6
    973e:	003b      	movs	r3, r7
    9740:	0004      	movs	r4, r0
    9742:	000d      	movs	r5, r1
    9744:	f002 fb42 	bl	bdcc <__aeabi_dcmpgt>
    9748:	2800      	cmp	r0, #0
    974a:	d000      	beq.n	974e <_dtoa_r+0xbb6>
    974c:	e0b1      	b.n	98b2 <_dtoa_r+0xd1a>
    974e:	2080      	movs	r0, #128	; 0x80
    9750:	0600      	lsls	r0, r0, #24
    9752:	4684      	mov	ip, r0
    9754:	0039      	movs	r1, r7
    9756:	4461      	add	r1, ip
    9758:	000b      	movs	r3, r1
    975a:	0032      	movs	r2, r6
    975c:	0020      	movs	r0, r4
    975e:	0029      	movs	r1, r5
    9760:	f002 fb20 	bl	bda4 <__aeabi_dcmplt>
    9764:	2800      	cmp	r0, #0
    9766:	d055      	beq.n	9814 <_dtoa_r+0xc7c>
    9768:	2300      	movs	r3, #0
    976a:	2700      	movs	r7, #0
    976c:	4699      	mov	r9, r3
    976e:	e6b1      	b.n	94d4 <_dtoa_r+0x93c>
    9770:	9809      	ldr	r0, [sp, #36]	; 0x24
    9772:	f7ff fa49 	bl	8c08 <_dtoa_r+0x70>
    9776:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    977a:	4694      	mov	ip, r2
    977c:	1aeb      	subs	r3, r5, r3
    977e:	449c      	add	ip, r3
    9780:	4663      	mov	r3, ip
    9782:	950b      	str	r5, [sp, #44]	; 0x2c
    9784:	930e      	str	r3, [sp, #56]	; 0x38
    9786:	2500      	movs	r5, #0
    9788:	e53d      	b.n	9206 <_dtoa_r+0x66e>
    978a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    978c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    978e:	9202      	str	r2, [sp, #8]
    9790:	9303      	str	r3, [sp, #12]
    9792:	2302      	movs	r3, #2
    9794:	4698      	mov	r8, r3
    9796:	f7ff fb2a 	bl	8dee <_dtoa_r+0x256>
    979a:	465b      	mov	r3, fp
    979c:	9a06      	ldr	r2, [sp, #24]
    979e:	464d      	mov	r5, r9
    97a0:	46c3      	mov	fp, r8
    97a2:	4691      	mov	r9, r2
    97a4:	2b00      	cmp	r3, #0
    97a6:	dd12      	ble.n	97ce <_dtoa_r+0xc36>
    97a8:	0031      	movs	r1, r6
    97aa:	2201      	movs	r2, #1
    97ac:	4640      	mov	r0, r8
    97ae:	f001 fb8f 	bl	aed0 <__lshift>
    97b2:	4649      	mov	r1, r9
    97b4:	0006      	movs	r6, r0
    97b6:	f001 fbeb 	bl	af90 <__mcmp>
    97ba:	2800      	cmp	r0, #0
    97bc:	dc00      	bgt.n	97c0 <_dtoa_r+0xc28>
    97be:	e160      	b.n	9a82 <_dtoa_r+0xeea>
    97c0:	9b02      	ldr	r3, [sp, #8]
    97c2:	2b39      	cmp	r3, #57	; 0x39
    97c4:	d100      	bne.n	97c8 <_dtoa_r+0xc30>
    97c6:	e0fb      	b.n	99c0 <_dtoa_r+0xe28>
    97c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    97ca:	3331      	adds	r3, #49	; 0x31
    97cc:	9302      	str	r3, [sp, #8]
    97ce:	466b      	mov	r3, sp
    97d0:	7a1b      	ldrb	r3, [r3, #8]
    97d2:	46b8      	mov	r8, r7
    97d4:	1c6c      	adds	r4, r5, #1
    97d6:	702b      	strb	r3, [r5, #0]
    97d8:	4657      	mov	r7, sl
    97da:	960a      	str	r6, [sp, #40]	; 0x28
    97dc:	e619      	b.n	9412 <_dtoa_r+0x87a>
    97de:	46c0      	nop			; (mov r8, r8)
    97e0:	7ff00000 	.word	0x7ff00000
    97e4:	40140000 	.word	0x40140000
    97e8:	00000433 	.word	0x00000433
    97ec:	401c0000 	.word	0x401c0000
    97f0:	fcc00000 	.word	0xfcc00000
    97f4:	2800      	cmp	r0, #0
    97f6:	d104      	bne.n	9802 <_dtoa_r+0xc6a>
    97f8:	9b02      	ldr	r3, [sp, #8]
    97fa:	07db      	lsls	r3, r3, #31
    97fc:	d501      	bpl.n	9802 <_dtoa_r+0xc6a>
    97fe:	e5f9      	b.n	93f4 <_dtoa_r+0x85c>
    9800:	001c      	movs	r4, r3
    9802:	1e63      	subs	r3, r4, #1
    9804:	781a      	ldrb	r2, [r3, #0]
    9806:	2a30      	cmp	r2, #48	; 0x30
    9808:	d0fa      	beq.n	9800 <_dtoa_r+0xc68>
    980a:	e602      	b.n	9412 <_dtoa_r+0x87a>
    980c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    980e:	469a      	mov	sl, r3
    9810:	9b02      	ldr	r3, [sp, #8]
    9812:	469b      	mov	fp, r3
    9814:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9816:	9c11      	ldr	r4, [sp, #68]	; 0x44
    9818:	9302      	str	r3, [sp, #8]
    981a:	9403      	str	r4, [sp, #12]
    981c:	e435      	b.n	908a <_dtoa_r+0x4f2>
    981e:	9b05      	ldr	r3, [sp, #20]
    9820:	425c      	negs	r4, r3
    9822:	2c00      	cmp	r4, #0
    9824:	d100      	bne.n	9828 <_dtoa_r+0xc90>
    9826:	e0c5      	b.n	99b4 <_dtoa_r+0xe1c>
    9828:	9810      	ldr	r0, [sp, #64]	; 0x40
    982a:	9911      	ldr	r1, [sp, #68]	; 0x44
    982c:	230f      	movs	r3, #15
    982e:	4aa9      	ldr	r2, [pc, #676]	; (9ad4 <_dtoa_r+0xf3c>)
    9830:	4023      	ands	r3, r4
    9832:	00db      	lsls	r3, r3, #3
    9834:	18d3      	adds	r3, r2, r3
    9836:	681a      	ldr	r2, [r3, #0]
    9838:	685b      	ldr	r3, [r3, #4]
    983a:	f7fc ff5b 	bl	66f4 <__aeabi_dmul>
    983e:	1124      	asrs	r4, r4, #4
    9840:	0006      	movs	r6, r0
    9842:	000f      	movs	r7, r1
    9844:	2c00      	cmp	r4, #0
    9846:	d100      	bne.n	984a <_dtoa_r+0xcb2>
    9848:	e130      	b.n	9aac <_dtoa_r+0xf14>
    984a:	2302      	movs	r3, #2
    984c:	4698      	mov	r8, r3
    984e:	3b01      	subs	r3, #1
    9850:	4699      	mov	r9, r3
    9852:	4da1      	ldr	r5, [pc, #644]	; (9ad8 <_dtoa_r+0xf40>)
    9854:	464b      	mov	r3, r9
    9856:	4223      	tst	r3, r4
    9858:	d00a      	beq.n	9870 <_dtoa_r+0xcd8>
    985a:	2301      	movs	r3, #1
    985c:	469c      	mov	ip, r3
    985e:	682a      	ldr	r2, [r5, #0]
    9860:	686b      	ldr	r3, [r5, #4]
    9862:	0030      	movs	r0, r6
    9864:	0039      	movs	r1, r7
    9866:	44e0      	add	r8, ip
    9868:	f7fc ff44 	bl	66f4 <__aeabi_dmul>
    986c:	0006      	movs	r6, r0
    986e:	000f      	movs	r7, r1
    9870:	1064      	asrs	r4, r4, #1
    9872:	3508      	adds	r5, #8
    9874:	2c00      	cmp	r4, #0
    9876:	d1ed      	bne.n	9854 <_dtoa_r+0xcbc>
    9878:	f7ff fad8 	bl	8e2c <_dtoa_r+0x294>
    987c:	9b05      	ldr	r3, [sp, #20]
    987e:	3301      	adds	r3, #1
    9880:	9305      	str	r3, [sp, #20]
    9882:	2330      	movs	r3, #48	; 0x30
    9884:	702b      	strb	r3, [r5, #0]
    9886:	4698      	mov	r8, r3
    9888:	e4ab      	b.n	91e2 <_dtoa_r+0x64a>
    988a:	6879      	ldr	r1, [r7, #4]
    988c:	4658      	mov	r0, fp
    988e:	f001 f945 	bl	ab1c <_Balloc>
    9892:	0039      	movs	r1, r7
    9894:	0004      	movs	r4, r0
    9896:	693b      	ldr	r3, [r7, #16]
    9898:	310c      	adds	r1, #12
    989a:	1c9a      	adds	r2, r3, #2
    989c:	0092      	lsls	r2, r2, #2
    989e:	300c      	adds	r0, #12
    98a0:	f7fd fa32 	bl	6d08 <memcpy>
    98a4:	2201      	movs	r2, #1
    98a6:	0021      	movs	r1, r4
    98a8:	4658      	mov	r0, fp
    98aa:	f001 fb11 	bl	aed0 <__lshift>
    98ae:	4682      	mov	sl, r0
    98b0:	e64b      	b.n	954a <_dtoa_r+0x9b2>
    98b2:	2300      	movs	r3, #0
    98b4:	2700      	movs	r7, #0
    98b6:	4699      	mov	r9, r3
    98b8:	e70f      	b.n	96da <_dtoa_r+0xb42>
    98ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    98bc:	1e59      	subs	r1, r3, #1
    98be:	00cb      	lsls	r3, r1, #3
    98c0:	9115      	str	r1, [sp, #84]	; 0x54
    98c2:	4984      	ldr	r1, [pc, #528]	; (9ad4 <_dtoa_r+0xf3c>)
    98c4:	18c9      	adds	r1, r1, r3
    98c6:	6808      	ldr	r0, [r1, #0]
    98c8:	6849      	ldr	r1, [r1, #4]
    98ca:	9a02      	ldr	r2, [sp, #8]
    98cc:	9b03      	ldr	r3, [sp, #12]
    98ce:	f7fc ff11 	bl	66f4 <__aeabi_dmul>
    98d2:	9002      	str	r0, [sp, #8]
    98d4:	9103      	str	r1, [sp, #12]
    98d6:	0039      	movs	r1, r7
    98d8:	0030      	movs	r0, r6
    98da:	f003 fd4f 	bl	d37c <__aeabi_d2iz>
    98de:	0005      	movs	r5, r0
    98e0:	f7fd f982 	bl	6be8 <__aeabi_i2d>
    98e4:	0002      	movs	r2, r0
    98e6:	000b      	movs	r3, r1
    98e8:	0030      	movs	r0, r6
    98ea:	0039      	movs	r1, r7
    98ec:	f003 f9d2 	bl	cc94 <__aeabi_dsub>
    98f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    98f2:	000f      	movs	r7, r1
    98f4:	9909      	ldr	r1, [sp, #36]	; 0x24
    98f6:	001a      	movs	r2, r3
    98f8:	468c      	mov	ip, r1
    98fa:	3530      	adds	r5, #48	; 0x30
    98fc:	4462      	add	r2, ip
    98fe:	0006      	movs	r6, r0
    9900:	1c4c      	adds	r4, r1, #1
    9902:	700d      	strb	r5, [r1, #0]
    9904:	4691      	mov	r9, r2
    9906:	2b01      	cmp	r3, #1
    9908:	d01e      	beq.n	9948 <_dtoa_r+0xdb0>
    990a:	46a0      	mov	r8, r4
    990c:	2200      	movs	r2, #0
    990e:	4b73      	ldr	r3, [pc, #460]	; (9adc <_dtoa_r+0xf44>)
    9910:	0030      	movs	r0, r6
    9912:	0039      	movs	r1, r7
    9914:	f7fc feee 	bl	66f4 <__aeabi_dmul>
    9918:	000f      	movs	r7, r1
    991a:	0006      	movs	r6, r0
    991c:	f003 fd2e 	bl	d37c <__aeabi_d2iz>
    9920:	0005      	movs	r5, r0
    9922:	f7fd f961 	bl	6be8 <__aeabi_i2d>
    9926:	0002      	movs	r2, r0
    9928:	000b      	movs	r3, r1
    992a:	0030      	movs	r0, r6
    992c:	0039      	movs	r1, r7
    992e:	f003 f9b1 	bl	cc94 <__aeabi_dsub>
    9932:	3530      	adds	r5, #48	; 0x30
    9934:	7025      	strb	r5, [r4, #0]
    9936:	3401      	adds	r4, #1
    9938:	0006      	movs	r6, r0
    993a:	000f      	movs	r7, r1
    993c:	454c      	cmp	r4, r9
    993e:	d1e5      	bne.n	990c <_dtoa_r+0xd74>
    9940:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9942:	4644      	mov	r4, r8
    9944:	469c      	mov	ip, r3
    9946:	4464      	add	r4, ip
    9948:	2200      	movs	r2, #0
    994a:	9802      	ldr	r0, [sp, #8]
    994c:	9903      	ldr	r1, [sp, #12]
    994e:	4b64      	ldr	r3, [pc, #400]	; (9ae0 <_dtoa_r+0xf48>)
    9950:	f002 fa50 	bl	bdf4 <__aeabi_dadd>
    9954:	0032      	movs	r2, r6
    9956:	003b      	movs	r3, r7
    9958:	f002 fa24 	bl	bda4 <__aeabi_dcmplt>
    995c:	2800      	cmp	r0, #0
    995e:	d062      	beq.n	9a26 <_dtoa_r+0xe8e>
    9960:	1e65      	subs	r5, r4, #1
    9962:	782b      	ldrb	r3, [r5, #0]
    9964:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9966:	4698      	mov	r8, r3
    9968:	9b14      	ldr	r3, [sp, #80]	; 0x50
    996a:	9305      	str	r3, [sp, #20]
    996c:	4643      	mov	r3, r8
    996e:	e435      	b.n	91dc <_dtoa_r+0x644>
    9970:	9b06      	ldr	r3, [sp, #24]
    9972:	464d      	mov	r5, r9
    9974:	4699      	mov	r9, r3
    9976:	9b02      	ldr	r3, [sp, #8]
    9978:	46c3      	mov	fp, r8
    997a:	2b39      	cmp	r3, #57	; 0x39
    997c:	d020      	beq.n	99c0 <_dtoa_r+0xe28>
    997e:	9b02      	ldr	r3, [sp, #8]
    9980:	46b8      	mov	r8, r7
    9982:	3301      	adds	r3, #1
    9984:	1c6c      	adds	r4, r5, #1
    9986:	702b      	strb	r3, [r5, #0]
    9988:	4657      	mov	r7, sl
    998a:	960a      	str	r6, [sp, #40]	; 0x28
    998c:	e541      	b.n	9412 <_dtoa_r+0x87a>
    998e:	9b06      	ldr	r3, [sp, #24]
    9990:	46c3      	mov	fp, r8
    9992:	4699      	mov	r9, r3
    9994:	46b8      	mov	r8, r7
    9996:	4657      	mov	r7, sl
    9998:	e520      	b.n	93dc <_dtoa_r+0x844>
    999a:	9b06      	ldr	r3, [sp, #24]
    999c:	9a08      	ldr	r2, [sp, #32]
    999e:	1a9c      	subs	r4, r3, r2
    99a0:	2300      	movs	r3, #0
    99a2:	e436      	b.n	9212 <_dtoa_r+0x67a>
    99a4:	2401      	movs	r4, #1
    99a6:	e514      	b.n	93d2 <_dtoa_r+0x83a>
    99a8:	2336      	movs	r3, #54	; 0x36
    99aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
    99ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    99ae:	1a9b      	subs	r3, r3, r2
    99b0:	9c06      	ldr	r4, [sp, #24]
    99b2:	e42e      	b.n	9212 <_dtoa_r+0x67a>
    99b4:	2302      	movs	r3, #2
    99b6:	9e10      	ldr	r6, [sp, #64]	; 0x40
    99b8:	9f11      	ldr	r7, [sp, #68]	; 0x44
    99ba:	4698      	mov	r8, r3
    99bc:	f7ff fa36 	bl	8e2c <_dtoa_r+0x294>
    99c0:	2339      	movs	r3, #57	; 0x39
    99c2:	46b8      	mov	r8, r7
    99c4:	1c6c      	adds	r4, r5, #1
    99c6:	702b      	strb	r3, [r5, #0]
    99c8:	4657      	mov	r7, sl
    99ca:	960a      	str	r6, [sp, #40]	; 0x28
    99cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    99ce:	e51c      	b.n	940a <_dtoa_r+0x872>
    99d0:	960a      	str	r6, [sp, #40]	; 0x28
    99d2:	e57f      	b.n	94d4 <_dtoa_r+0x93c>
    99d4:	9b08      	ldr	r3, [sp, #32]
    99d6:	2b00      	cmp	r3, #0
    99d8:	d100      	bne.n	99dc <_dtoa_r+0xe44>
    99da:	e695      	b.n	9708 <_dtoa_r+0xb70>
    99dc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    99de:	2c00      	cmp	r4, #0
    99e0:	dc00      	bgt.n	99e4 <_dtoa_r+0xe4c>
    99e2:	e717      	b.n	9814 <_dtoa_r+0xc7c>
    99e4:	9b05      	ldr	r3, [sp, #20]
    99e6:	2200      	movs	r2, #0
    99e8:	3b01      	subs	r3, #1
    99ea:	9314      	str	r3, [sp, #80]	; 0x50
    99ec:	0030      	movs	r0, r6
    99ee:	4b3b      	ldr	r3, [pc, #236]	; (9adc <_dtoa_r+0xf44>)
    99f0:	0039      	movs	r1, r7
    99f2:	f7fc fe7f 	bl	66f4 <__aeabi_dmul>
    99f6:	0006      	movs	r6, r0
    99f8:	4640      	mov	r0, r8
    99fa:	000f      	movs	r7, r1
    99fc:	3001      	adds	r0, #1
    99fe:	f7fd f8f3 	bl	6be8 <__aeabi_i2d>
    9a02:	0032      	movs	r2, r6
    9a04:	003b      	movs	r3, r7
    9a06:	f7fc fe75 	bl	66f4 <__aeabi_dmul>
    9a0a:	2200      	movs	r2, #0
    9a0c:	4b35      	ldr	r3, [pc, #212]	; (9ae4 <_dtoa_r+0xf4c>)
    9a0e:	f002 f9f1 	bl	bdf4 <__aeabi_dadd>
    9a12:	4a35      	ldr	r2, [pc, #212]	; (9ae8 <_dtoa_r+0xf50>)
    9a14:	000b      	movs	r3, r1
    9a16:	4694      	mov	ip, r2
    9a18:	4463      	add	r3, ip
    9a1a:	9002      	str	r0, [sp, #8]
    9a1c:	9103      	str	r1, [sp, #12]
    9a1e:	9413      	str	r4, [sp, #76]	; 0x4c
    9a20:	9303      	str	r3, [sp, #12]
    9a22:	f7ff fa2b 	bl	8e7c <_dtoa_r+0x2e4>
    9a26:	9a02      	ldr	r2, [sp, #8]
    9a28:	9b03      	ldr	r3, [sp, #12]
    9a2a:	2000      	movs	r0, #0
    9a2c:	492c      	ldr	r1, [pc, #176]	; (9ae0 <_dtoa_r+0xf48>)
    9a2e:	f003 f931 	bl	cc94 <__aeabi_dsub>
    9a32:	0032      	movs	r2, r6
    9a34:	003b      	movs	r3, r7
    9a36:	f002 f9c9 	bl	bdcc <__aeabi_dcmpgt>
    9a3a:	2800      	cmp	r0, #0
    9a3c:	d101      	bne.n	9a42 <_dtoa_r+0xeaa>
    9a3e:	e6e9      	b.n	9814 <_dtoa_r+0xc7c>
    9a40:	001c      	movs	r4, r3
    9a42:	1e63      	subs	r3, r4, #1
    9a44:	781a      	ldrb	r2, [r3, #0]
    9a46:	2a30      	cmp	r2, #48	; 0x30
    9a48:	d0fa      	beq.n	9a40 <_dtoa_r+0xea8>
    9a4a:	f7ff fad6 	bl	8ffa <_dtoa_r+0x462>
    9a4e:	9b06      	ldr	r3, [sp, #24]
    9a50:	464d      	mov	r5, r9
    9a52:	4699      	mov	r9, r3
    9a54:	9b02      	ldr	r3, [sp, #8]
    9a56:	46c3      	mov	fp, r8
    9a58:	2b39      	cmp	r3, #57	; 0x39
    9a5a:	d0b1      	beq.n	99c0 <_dtoa_r+0xe28>
    9a5c:	2c00      	cmp	r4, #0
    9a5e:	dd00      	ble.n	9a62 <_dtoa_r+0xeca>
    9a60:	e6b2      	b.n	97c8 <_dtoa_r+0xc30>
    9a62:	e6b4      	b.n	97ce <_dtoa_r+0xc36>
    9a64:	9b02      	ldr	r3, [sp, #8]
    9a66:	465d      	mov	r5, fp
    9a68:	469b      	mov	fp, r3
    9a6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9a6c:	4654      	mov	r4, sl
    9a6e:	9305      	str	r3, [sp, #20]
    9a70:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9a72:	4643      	mov	r3, r8
    9a74:	f7ff fbb2 	bl	91dc <_dtoa_r+0x644>
    9a78:	9b02      	ldr	r3, [sp, #8]
    9a7a:	2b00      	cmp	r3, #0
    9a7c:	d000      	beq.n	9a80 <_dtoa_r+0xee8>
    9a7e:	e545      	b.n	950c <_dtoa_r+0x974>
    9a80:	e4f2      	b.n	9468 <_dtoa_r+0x8d0>
    9a82:	2800      	cmp	r0, #0
    9a84:	d000      	beq.n	9a88 <_dtoa_r+0xef0>
    9a86:	e6a2      	b.n	97ce <_dtoa_r+0xc36>
    9a88:	9b02      	ldr	r3, [sp, #8]
    9a8a:	07db      	lsls	r3, r3, #31
    9a8c:	d400      	bmi.n	9a90 <_dtoa_r+0xef8>
    9a8e:	e69e      	b.n	97ce <_dtoa_r+0xc36>
    9a90:	e696      	b.n	97c0 <_dtoa_r+0xc28>
    9a92:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9a94:	2b02      	cmp	r3, #2
    9a96:	dc1a      	bgt.n	9ace <_dtoa_r+0xf36>
    9a98:	4649      	mov	r1, r9
    9a9a:	f7fe ffd5 	bl	8a48 <quorem>
    9a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9aa0:	3030      	adds	r0, #48	; 0x30
    9aa2:	7018      	strb	r0, [r3, #0]
    9aa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9aa6:	9002      	str	r0, [sp, #8]
    9aa8:	9308      	str	r3, [sp, #32]
    9aaa:	e48e      	b.n	93ca <_dtoa_r+0x832>
    9aac:	2302      	movs	r3, #2
    9aae:	4698      	mov	r8, r3
    9ab0:	f7ff f9bc 	bl	8e2c <_dtoa_r+0x294>
    9ab4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9ab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9ab8:	9305      	str	r3, [sp, #20]
    9aba:	0015      	movs	r5, r2
    9abc:	4643      	mov	r3, r8
    9abe:	f7ff fb8d 	bl	91dc <_dtoa_r+0x644>
    9ac2:	2b04      	cmp	r3, #4
    9ac4:	d100      	bne.n	9ac8 <_dtoa_r+0xf30>
    9ac6:	e445      	b.n	9354 <_dtoa_r+0x7bc>
    9ac8:	233c      	movs	r3, #60	; 0x3c
    9aca:	1a18      	subs	r0, r3, r0
    9acc:	e43b      	b.n	9346 <_dtoa_r+0x7ae>
    9ace:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9ad0:	9308      	str	r3, [sp, #32]
    9ad2:	e5f0      	b.n	96b6 <_dtoa_r+0xb1e>
    9ad4:	0000dfe8 	.word	0x0000dfe8
    9ad8:	0000e0b0 	.word	0x0000e0b0
    9adc:	40240000 	.word	0x40240000
    9ae0:	3fe00000 	.word	0x3fe00000
    9ae4:	401c0000 	.word	0x401c0000
    9ae8:	fcc00000 	.word	0xfcc00000

00009aec <__sflush_r>:
    9aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    9aee:	4647      	mov	r7, r8
    9af0:	b480      	push	{r7}
    9af2:	220c      	movs	r2, #12
    9af4:	5e8b      	ldrsh	r3, [r1, r2]
    9af6:	4680      	mov	r8, r0
    9af8:	b29a      	uxth	r2, r3
    9afa:	000c      	movs	r4, r1
    9afc:	0711      	lsls	r1, r2, #28
    9afe:	d440      	bmi.n	9b82 <__sflush_r+0x96>
    9b00:	2280      	movs	r2, #128	; 0x80
    9b02:	0112      	lsls	r2, r2, #4
    9b04:	4313      	orrs	r3, r2
    9b06:	6862      	ldr	r2, [r4, #4]
    9b08:	81a3      	strh	r3, [r4, #12]
    9b0a:	2a00      	cmp	r2, #0
    9b0c:	dc00      	bgt.n	9b10 <__sflush_r+0x24>
    9b0e:	e070      	b.n	9bf2 <__sflush_r+0x106>
    9b10:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    9b12:	2e00      	cmp	r6, #0
    9b14:	d031      	beq.n	9b7a <__sflush_r+0x8e>
    9b16:	4642      	mov	r2, r8
    9b18:	4641      	mov	r1, r8
    9b1a:	6815      	ldr	r5, [r2, #0]
    9b1c:	2200      	movs	r2, #0
    9b1e:	b29b      	uxth	r3, r3
    9b20:	600a      	str	r2, [r1, #0]
    9b22:	04da      	lsls	r2, r3, #19
    9b24:	d400      	bmi.n	9b28 <__sflush_r+0x3c>
    9b26:	e069      	b.n	9bfc <__sflush_r+0x110>
    9b28:	6d22      	ldr	r2, [r4, #80]	; 0x50
    9b2a:	075b      	lsls	r3, r3, #29
    9b2c:	d506      	bpl.n	9b3c <__sflush_r+0x50>
    9b2e:	6863      	ldr	r3, [r4, #4]
    9b30:	1ad2      	subs	r2, r2, r3
    9b32:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9b34:	2b00      	cmp	r3, #0
    9b36:	d001      	beq.n	9b3c <__sflush_r+0x50>
    9b38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    9b3a:	1ad2      	subs	r2, r2, r3
    9b3c:	2300      	movs	r3, #0
    9b3e:	69e1      	ldr	r1, [r4, #28]
    9b40:	4640      	mov	r0, r8
    9b42:	47b0      	blx	r6
    9b44:	1c43      	adds	r3, r0, #1
    9b46:	d03d      	beq.n	9bc4 <__sflush_r+0xd8>
    9b48:	89a2      	ldrh	r2, [r4, #12]
    9b4a:	4b3a      	ldr	r3, [pc, #232]	; (9c34 <__sflush_r+0x148>)
    9b4c:	4013      	ands	r3, r2
    9b4e:	2200      	movs	r2, #0
    9b50:	6062      	str	r2, [r4, #4]
    9b52:	6922      	ldr	r2, [r4, #16]
    9b54:	b21b      	sxth	r3, r3
    9b56:	81a3      	strh	r3, [r4, #12]
    9b58:	6022      	str	r2, [r4, #0]
    9b5a:	04db      	lsls	r3, r3, #19
    9b5c:	d447      	bmi.n	9bee <__sflush_r+0x102>
    9b5e:	4643      	mov	r3, r8
    9b60:	6b21      	ldr	r1, [r4, #48]	; 0x30
    9b62:	601d      	str	r5, [r3, #0]
    9b64:	2900      	cmp	r1, #0
    9b66:	d008      	beq.n	9b7a <__sflush_r+0x8e>
    9b68:	0023      	movs	r3, r4
    9b6a:	3340      	adds	r3, #64	; 0x40
    9b6c:	4299      	cmp	r1, r3
    9b6e:	d002      	beq.n	9b76 <__sflush_r+0x8a>
    9b70:	4640      	mov	r0, r8
    9b72:	f000 f96f 	bl	9e54 <_free_r>
    9b76:	2300      	movs	r3, #0
    9b78:	6323      	str	r3, [r4, #48]	; 0x30
    9b7a:	2000      	movs	r0, #0
    9b7c:	bc04      	pop	{r2}
    9b7e:	4690      	mov	r8, r2
    9b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9b82:	6926      	ldr	r6, [r4, #16]
    9b84:	2e00      	cmp	r6, #0
    9b86:	d0f8      	beq.n	9b7a <__sflush_r+0x8e>
    9b88:	6823      	ldr	r3, [r4, #0]
    9b8a:	6026      	str	r6, [r4, #0]
    9b8c:	1b9d      	subs	r5, r3, r6
    9b8e:	2300      	movs	r3, #0
    9b90:	0792      	lsls	r2, r2, #30
    9b92:	d100      	bne.n	9b96 <__sflush_r+0xaa>
    9b94:	6963      	ldr	r3, [r4, #20]
    9b96:	60a3      	str	r3, [r4, #8]
    9b98:	2d00      	cmp	r5, #0
    9b9a:	dc04      	bgt.n	9ba6 <__sflush_r+0xba>
    9b9c:	e7ed      	b.n	9b7a <__sflush_r+0x8e>
    9b9e:	1836      	adds	r6, r6, r0
    9ba0:	1a2d      	subs	r5, r5, r0
    9ba2:	2d00      	cmp	r5, #0
    9ba4:	dde9      	ble.n	9b7a <__sflush_r+0x8e>
    9ba6:	002b      	movs	r3, r5
    9ba8:	0032      	movs	r2, r6
    9baa:	69e1      	ldr	r1, [r4, #28]
    9bac:	4640      	mov	r0, r8
    9bae:	6a67      	ldr	r7, [r4, #36]	; 0x24
    9bb0:	47b8      	blx	r7
    9bb2:	2800      	cmp	r0, #0
    9bb4:	dcf3      	bgt.n	9b9e <__sflush_r+0xb2>
    9bb6:	2340      	movs	r3, #64	; 0x40
    9bb8:	2001      	movs	r0, #1
    9bba:	89a2      	ldrh	r2, [r4, #12]
    9bbc:	4240      	negs	r0, r0
    9bbe:	4313      	orrs	r3, r2
    9bc0:	81a3      	strh	r3, [r4, #12]
    9bc2:	e7db      	b.n	9b7c <__sflush_r+0x90>
    9bc4:	4643      	mov	r3, r8
    9bc6:	6819      	ldr	r1, [r3, #0]
    9bc8:	291d      	cmp	r1, #29
    9bca:	d8f4      	bhi.n	9bb6 <__sflush_r+0xca>
    9bcc:	4b1a      	ldr	r3, [pc, #104]	; (9c38 <__sflush_r+0x14c>)
    9bce:	2201      	movs	r2, #1
    9bd0:	40cb      	lsrs	r3, r1
    9bd2:	439a      	bics	r2, r3
    9bd4:	d1ef      	bne.n	9bb6 <__sflush_r+0xca>
    9bd6:	89a6      	ldrh	r6, [r4, #12]
    9bd8:	4b16      	ldr	r3, [pc, #88]	; (9c34 <__sflush_r+0x148>)
    9bda:	6062      	str	r2, [r4, #4]
    9bdc:	4033      	ands	r3, r6
    9bde:	6922      	ldr	r2, [r4, #16]
    9be0:	b21b      	sxth	r3, r3
    9be2:	81a3      	strh	r3, [r4, #12]
    9be4:	6022      	str	r2, [r4, #0]
    9be6:	04db      	lsls	r3, r3, #19
    9be8:	d5b9      	bpl.n	9b5e <__sflush_r+0x72>
    9bea:	2900      	cmp	r1, #0
    9bec:	d1b7      	bne.n	9b5e <__sflush_r+0x72>
    9bee:	6520      	str	r0, [r4, #80]	; 0x50
    9bf0:	e7b5      	b.n	9b5e <__sflush_r+0x72>
    9bf2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    9bf4:	2a00      	cmp	r2, #0
    9bf6:	dd00      	ble.n	9bfa <__sflush_r+0x10e>
    9bf8:	e78a      	b.n	9b10 <__sflush_r+0x24>
    9bfa:	e7be      	b.n	9b7a <__sflush_r+0x8e>
    9bfc:	2200      	movs	r2, #0
    9bfe:	2301      	movs	r3, #1
    9c00:	69e1      	ldr	r1, [r4, #28]
    9c02:	4640      	mov	r0, r8
    9c04:	47b0      	blx	r6
    9c06:	0002      	movs	r2, r0
    9c08:	1c43      	adds	r3, r0, #1
    9c0a:	d002      	beq.n	9c12 <__sflush_r+0x126>
    9c0c:	89a3      	ldrh	r3, [r4, #12]
    9c0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    9c10:	e78b      	b.n	9b2a <__sflush_r+0x3e>
    9c12:	4643      	mov	r3, r8
    9c14:	681b      	ldr	r3, [r3, #0]
    9c16:	2b00      	cmp	r3, #0
    9c18:	d0f8      	beq.n	9c0c <__sflush_r+0x120>
    9c1a:	2b1d      	cmp	r3, #29
    9c1c:	d001      	beq.n	9c22 <__sflush_r+0x136>
    9c1e:	2b16      	cmp	r3, #22
    9c20:	d103      	bne.n	9c2a <__sflush_r+0x13e>
    9c22:	4643      	mov	r3, r8
    9c24:	2000      	movs	r0, #0
    9c26:	601d      	str	r5, [r3, #0]
    9c28:	e7a8      	b.n	9b7c <__sflush_r+0x90>
    9c2a:	2340      	movs	r3, #64	; 0x40
    9c2c:	89a1      	ldrh	r1, [r4, #12]
    9c2e:	430b      	orrs	r3, r1
    9c30:	81a3      	strh	r3, [r4, #12]
    9c32:	e7a3      	b.n	9b7c <__sflush_r+0x90>
    9c34:	fffff7ff 	.word	0xfffff7ff
    9c38:	20400001 	.word	0x20400001

00009c3c <_fflush_r>:
    9c3c:	b570      	push	{r4, r5, r6, lr}
    9c3e:	0004      	movs	r4, r0
    9c40:	000d      	movs	r5, r1
    9c42:	2800      	cmp	r0, #0
    9c44:	d002      	beq.n	9c4c <_fflush_r+0x10>
    9c46:	6b83      	ldr	r3, [r0, #56]	; 0x38
    9c48:	2b00      	cmp	r3, #0
    9c4a:	d009      	beq.n	9c60 <_fflush_r+0x24>
    9c4c:	220c      	movs	r2, #12
    9c4e:	5eab      	ldrsh	r3, [r5, r2]
    9c50:	2000      	movs	r0, #0
    9c52:	2b00      	cmp	r3, #0
    9c54:	d003      	beq.n	9c5e <_fflush_r+0x22>
    9c56:	0029      	movs	r1, r5
    9c58:	0020      	movs	r0, r4
    9c5a:	f7ff ff47 	bl	9aec <__sflush_r>
    9c5e:	bd70      	pop	{r4, r5, r6, pc}
    9c60:	f000 f882 	bl	9d68 <__sinit>
    9c64:	e7f2      	b.n	9c4c <_fflush_r+0x10>
    9c66:	46c0      	nop			; (mov r8, r8)

00009c68 <_cleanup_r>:
    9c68:	b510      	push	{r4, lr}
    9c6a:	4902      	ldr	r1, [pc, #8]	; (9c74 <_cleanup_r+0xc>)
    9c6c:	f000 fb62 	bl	a334 <_fwalk_reent>
    9c70:	bd10      	pop	{r4, pc}
    9c72:	46c0      	nop			; (mov r8, r8)
    9c74:	0000b951 	.word	0x0000b951

00009c78 <__sinit.part.1>:
    9c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9c7a:	465f      	mov	r7, fp
    9c7c:	4656      	mov	r6, sl
    9c7e:	464d      	mov	r5, r9
    9c80:	4644      	mov	r4, r8
    9c82:	4b34      	ldr	r3, [pc, #208]	; (9d54 <__sinit.part.1+0xdc>)
    9c84:	b4f0      	push	{r4, r5, r6, r7}
    9c86:	63c3      	str	r3, [r0, #60]	; 0x3c
    9c88:	23b8      	movs	r3, #184	; 0xb8
    9c8a:	2400      	movs	r4, #0
    9c8c:	2203      	movs	r2, #3
    9c8e:	009b      	lsls	r3, r3, #2
    9c90:	50c4      	str	r4, [r0, r3]
    9c92:	3304      	adds	r3, #4
    9c94:	6845      	ldr	r5, [r0, #4]
    9c96:	50c2      	str	r2, [r0, r3]
    9c98:	3308      	adds	r3, #8
    9c9a:	18c2      	adds	r2, r0, r3
    9c9c:	3b04      	subs	r3, #4
    9c9e:	50c2      	str	r2, [r0, r3]
    9ca0:	0006      	movs	r6, r0
    9ca2:	2304      	movs	r3, #4
    9ca4:	0028      	movs	r0, r5
    9ca6:	602c      	str	r4, [r5, #0]
    9ca8:	606c      	str	r4, [r5, #4]
    9caa:	60ac      	str	r4, [r5, #8]
    9cac:	81ab      	strh	r3, [r5, #12]
    9cae:	666c      	str	r4, [r5, #100]	; 0x64
    9cb0:	81ec      	strh	r4, [r5, #14]
    9cb2:	612c      	str	r4, [r5, #16]
    9cb4:	616c      	str	r4, [r5, #20]
    9cb6:	61ac      	str	r4, [r5, #24]
    9cb8:	2208      	movs	r2, #8
    9cba:	2100      	movs	r1, #0
    9cbc:	305c      	adds	r0, #92	; 0x5c
    9cbe:	f7fd f861 	bl	6d84 <memset>
    9cc2:	4b25      	ldr	r3, [pc, #148]	; (9d58 <__sinit.part.1+0xe0>)
    9cc4:	4f25      	ldr	r7, [pc, #148]	; (9d5c <__sinit.part.1+0xe4>)
    9cc6:	469a      	mov	sl, r3
    9cc8:	622b      	str	r3, [r5, #32]
    9cca:	4b25      	ldr	r3, [pc, #148]	; (9d60 <__sinit.part.1+0xe8>)
    9ccc:	62ef      	str	r7, [r5, #44]	; 0x2c
    9cce:	4699      	mov	r9, r3
    9cd0:	626b      	str	r3, [r5, #36]	; 0x24
    9cd2:	4b24      	ldr	r3, [pc, #144]	; (9d64 <__sinit.part.1+0xec>)
    9cd4:	61ed      	str	r5, [r5, #28]
    9cd6:	62ab      	str	r3, [r5, #40]	; 0x28
    9cd8:	68b5      	ldr	r5, [r6, #8]
    9cda:	4698      	mov	r8, r3
    9cdc:	2309      	movs	r3, #9
    9cde:	0028      	movs	r0, r5
    9ce0:	81ab      	strh	r3, [r5, #12]
    9ce2:	3b08      	subs	r3, #8
    9ce4:	602c      	str	r4, [r5, #0]
    9ce6:	606c      	str	r4, [r5, #4]
    9ce8:	60ac      	str	r4, [r5, #8]
    9cea:	666c      	str	r4, [r5, #100]	; 0x64
    9cec:	81eb      	strh	r3, [r5, #14]
    9cee:	612c      	str	r4, [r5, #16]
    9cf0:	616c      	str	r4, [r5, #20]
    9cf2:	61ac      	str	r4, [r5, #24]
    9cf4:	2208      	movs	r2, #8
    9cf6:	2100      	movs	r1, #0
    9cf8:	305c      	adds	r0, #92	; 0x5c
    9cfa:	469b      	mov	fp, r3
    9cfc:	f7fd f842 	bl	6d84 <memset>
    9d00:	4653      	mov	r3, sl
    9d02:	622b      	str	r3, [r5, #32]
    9d04:	464b      	mov	r3, r9
    9d06:	626b      	str	r3, [r5, #36]	; 0x24
    9d08:	4643      	mov	r3, r8
    9d0a:	62ef      	str	r7, [r5, #44]	; 0x2c
    9d0c:	62ab      	str	r3, [r5, #40]	; 0x28
    9d0e:	61ed      	str	r5, [r5, #28]
    9d10:	68f5      	ldr	r5, [r6, #12]
    9d12:	2312      	movs	r3, #18
    9d14:	0028      	movs	r0, r5
    9d16:	81ab      	strh	r3, [r5, #12]
    9d18:	3b10      	subs	r3, #16
    9d1a:	81eb      	strh	r3, [r5, #14]
    9d1c:	602c      	str	r4, [r5, #0]
    9d1e:	606c      	str	r4, [r5, #4]
    9d20:	60ac      	str	r4, [r5, #8]
    9d22:	666c      	str	r4, [r5, #100]	; 0x64
    9d24:	612c      	str	r4, [r5, #16]
    9d26:	616c      	str	r4, [r5, #20]
    9d28:	61ac      	str	r4, [r5, #24]
    9d2a:	2208      	movs	r2, #8
    9d2c:	2100      	movs	r1, #0
    9d2e:	305c      	adds	r0, #92	; 0x5c
    9d30:	f7fd f828 	bl	6d84 <memset>
    9d34:	4653      	mov	r3, sl
    9d36:	622b      	str	r3, [r5, #32]
    9d38:	464b      	mov	r3, r9
    9d3a:	626b      	str	r3, [r5, #36]	; 0x24
    9d3c:	4643      	mov	r3, r8
    9d3e:	62ab      	str	r3, [r5, #40]	; 0x28
    9d40:	465b      	mov	r3, fp
    9d42:	62ef      	str	r7, [r5, #44]	; 0x2c
    9d44:	61ed      	str	r5, [r5, #28]
    9d46:	63b3      	str	r3, [r6, #56]	; 0x38
    9d48:	bc3c      	pop	{r2, r3, r4, r5}
    9d4a:	4690      	mov	r8, r2
    9d4c:	4699      	mov	r9, r3
    9d4e:	46a2      	mov	sl, r4
    9d50:	46ab      	mov	fp, r5
    9d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9d54:	00009c69 	.word	0x00009c69
    9d58:	0000b5ed 	.word	0x0000b5ed
    9d5c:	0000b67d 	.word	0x0000b67d
    9d60:	0000b615 	.word	0x0000b615
    9d64:	0000b651 	.word	0x0000b651

00009d68 <__sinit>:
    9d68:	6b83      	ldr	r3, [r0, #56]	; 0x38
    9d6a:	b510      	push	{r4, lr}
    9d6c:	2b00      	cmp	r3, #0
    9d6e:	d101      	bne.n	9d74 <__sinit+0xc>
    9d70:	f7ff ff82 	bl	9c78 <__sinit.part.1>
    9d74:	bd10      	pop	{r4, pc}
    9d76:	46c0      	nop			; (mov r8, r8)

00009d78 <__sfp_lock_acquire>:
    9d78:	4770      	bx	lr
    9d7a:	46c0      	nop			; (mov r8, r8)

00009d7c <__sfp_lock_release>:
    9d7c:	4770      	bx	lr
    9d7e:	46c0      	nop			; (mov r8, r8)

00009d80 <__libc_fini_array>:
    9d80:	b570      	push	{r4, r5, r6, lr}
    9d82:	4b09      	ldr	r3, [pc, #36]	; (9da8 <__libc_fini_array+0x28>)
    9d84:	4c09      	ldr	r4, [pc, #36]	; (9dac <__libc_fini_array+0x2c>)
    9d86:	1ae4      	subs	r4, r4, r3
    9d88:	10a4      	asrs	r4, r4, #2
    9d8a:	d009      	beq.n	9da0 <__libc_fini_array+0x20>
    9d8c:	4a08      	ldr	r2, [pc, #32]	; (9db0 <__libc_fini_array+0x30>)
    9d8e:	18a5      	adds	r5, r4, r2
    9d90:	00ad      	lsls	r5, r5, #2
    9d92:	18ed      	adds	r5, r5, r3
    9d94:	682b      	ldr	r3, [r5, #0]
    9d96:	3c01      	subs	r4, #1
    9d98:	4798      	blx	r3
    9d9a:	3d04      	subs	r5, #4
    9d9c:	2c00      	cmp	r4, #0
    9d9e:	d1f9      	bne.n	9d94 <__libc_fini_array+0x14>
    9da0:	f004 f9ca 	bl	e138 <_fini>
    9da4:	bd70      	pop	{r4, r5, r6, pc}
    9da6:	46c0      	nop			; (mov r8, r8)
    9da8:	0000e144 	.word	0x0000e144
    9dac:	0000e148 	.word	0x0000e148
    9db0:	3fffffff 	.word	0x3fffffff

00009db4 <_malloc_trim_r>:
    9db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9db6:	000c      	movs	r4, r1
    9db8:	0006      	movs	r6, r0
    9dba:	f000 feab 	bl	ab14 <__malloc_lock>
    9dbe:	4f20      	ldr	r7, [pc, #128]	; (9e40 <_malloc_trim_r+0x8c>)
    9dc0:	68bb      	ldr	r3, [r7, #8]
    9dc2:	685d      	ldr	r5, [r3, #4]
    9dc4:	2303      	movs	r3, #3
    9dc6:	439d      	bics	r5, r3
    9dc8:	4b1e      	ldr	r3, [pc, #120]	; (9e44 <_malloc_trim_r+0x90>)
    9dca:	1b2c      	subs	r4, r5, r4
    9dcc:	469c      	mov	ip, r3
    9dce:	4464      	add	r4, ip
    9dd0:	0b24      	lsrs	r4, r4, #12
    9dd2:	4b1d      	ldr	r3, [pc, #116]	; (9e48 <_malloc_trim_r+0x94>)
    9dd4:	3c01      	subs	r4, #1
    9dd6:	0324      	lsls	r4, r4, #12
    9dd8:	429c      	cmp	r4, r3
    9dda:	dd07      	ble.n	9dec <_malloc_trim_r+0x38>
    9ddc:	2100      	movs	r1, #0
    9dde:	0030      	movs	r0, r6
    9de0:	f001 fbf2 	bl	b5c8 <_sbrk_r>
    9de4:	68bb      	ldr	r3, [r7, #8]
    9de6:	195b      	adds	r3, r3, r5
    9de8:	4298      	cmp	r0, r3
    9dea:	d004      	beq.n	9df6 <_malloc_trim_r+0x42>
    9dec:	0030      	movs	r0, r6
    9dee:	f000 fe93 	bl	ab18 <__malloc_unlock>
    9df2:	2000      	movs	r0, #0
    9df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9df6:	4261      	negs	r1, r4
    9df8:	0030      	movs	r0, r6
    9dfa:	f001 fbe5 	bl	b5c8 <_sbrk_r>
    9dfe:	1c43      	adds	r3, r0, #1
    9e00:	d00d      	beq.n	9e1e <_malloc_trim_r+0x6a>
    9e02:	2301      	movs	r3, #1
    9e04:	1b2d      	subs	r5, r5, r4
    9e06:	68ba      	ldr	r2, [r7, #8]
    9e08:	431d      	orrs	r5, r3
    9e0a:	4b10      	ldr	r3, [pc, #64]	; (9e4c <_malloc_trim_r+0x98>)
    9e0c:	6055      	str	r5, [r2, #4]
    9e0e:	681a      	ldr	r2, [r3, #0]
    9e10:	0030      	movs	r0, r6
    9e12:	1b14      	subs	r4, r2, r4
    9e14:	601c      	str	r4, [r3, #0]
    9e16:	f000 fe7f 	bl	ab18 <__malloc_unlock>
    9e1a:	2001      	movs	r0, #1
    9e1c:	e7ea      	b.n	9df4 <_malloc_trim_r+0x40>
    9e1e:	2100      	movs	r1, #0
    9e20:	0030      	movs	r0, r6
    9e22:	f001 fbd1 	bl	b5c8 <_sbrk_r>
    9e26:	68bb      	ldr	r3, [r7, #8]
    9e28:	1ac2      	subs	r2, r0, r3
    9e2a:	2a0f      	cmp	r2, #15
    9e2c:	ddde      	ble.n	9dec <_malloc_trim_r+0x38>
    9e2e:	4908      	ldr	r1, [pc, #32]	; (9e50 <_malloc_trim_r+0x9c>)
    9e30:	6809      	ldr	r1, [r1, #0]
    9e32:	1a40      	subs	r0, r0, r1
    9e34:	4905      	ldr	r1, [pc, #20]	; (9e4c <_malloc_trim_r+0x98>)
    9e36:	6008      	str	r0, [r1, #0]
    9e38:	2101      	movs	r1, #1
    9e3a:	430a      	orrs	r2, r1
    9e3c:	605a      	str	r2, [r3, #4]
    9e3e:	e7d5      	b.n	9dec <_malloc_trim_r+0x38>
    9e40:	20000498 	.word	0x20000498
    9e44:	00000fef 	.word	0x00000fef
    9e48:	00000fff 	.word	0x00000fff
    9e4c:	20000da0 	.word	0x20000da0
    9e50:	200008a4 	.word	0x200008a4

00009e54 <_free_r>:
    9e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e56:	4647      	mov	r7, r8
    9e58:	0005      	movs	r5, r0
    9e5a:	b480      	push	{r7}
    9e5c:	1e0c      	subs	r4, r1, #0
    9e5e:	d03e      	beq.n	9ede <_free_r+0x8a>
    9e60:	f000 fe58 	bl	ab14 <__malloc_lock>
    9e64:	2301      	movs	r3, #1
    9e66:	0021      	movs	r1, r4
    9e68:	4698      	mov	r8, r3
    9e6a:	3908      	subs	r1, #8
    9e6c:	684e      	ldr	r6, [r1, #4]
    9e6e:	4642      	mov	r2, r8
    9e70:	0033      	movs	r3, r6
    9e72:	2003      	movs	r0, #3
    9e74:	4393      	bics	r3, r2
    9e76:	18cc      	adds	r4, r1, r3
    9e78:	6862      	ldr	r2, [r4, #4]
    9e7a:	4382      	bics	r2, r0
    9e7c:	4860      	ldr	r0, [pc, #384]	; (a000 <_free_r+0x1ac>)
    9e7e:	6887      	ldr	r7, [r0, #8]
    9e80:	42bc      	cmp	r4, r7
    9e82:	d05a      	beq.n	9f3a <_free_r+0xe6>
    9e84:	4647      	mov	r7, r8
    9e86:	6062      	str	r2, [r4, #4]
    9e88:	4237      	tst	r7, r6
    9e8a:	d10b      	bne.n	9ea4 <_free_r+0x50>
    9e8c:	2708      	movs	r7, #8
    9e8e:	46bc      	mov	ip, r7
    9e90:	680e      	ldr	r6, [r1, #0]
    9e92:	4484      	add	ip, r0
    9e94:	1b89      	subs	r1, r1, r6
    9e96:	199b      	adds	r3, r3, r6
    9e98:	688e      	ldr	r6, [r1, #8]
    9e9a:	4566      	cmp	r6, ip
    9e9c:	d066      	beq.n	9f6c <_free_r+0x118>
    9e9e:	68cf      	ldr	r7, [r1, #12]
    9ea0:	60f7      	str	r7, [r6, #12]
    9ea2:	60be      	str	r6, [r7, #8]
    9ea4:	2601      	movs	r6, #1
    9ea6:	18a7      	adds	r7, r4, r2
    9ea8:	687f      	ldr	r7, [r7, #4]
    9eaa:	4237      	tst	r7, r6
    9eac:	d036      	beq.n	9f1c <_free_r+0xc8>
    9eae:	4a55      	ldr	r2, [pc, #340]	; (a004 <_free_r+0x1b0>)
    9eb0:	431e      	orrs	r6, r3
    9eb2:	604e      	str	r6, [r1, #4]
    9eb4:	50cb      	str	r3, [r1, r3]
    9eb6:	4293      	cmp	r3, r2
    9eb8:	d814      	bhi.n	9ee4 <_free_r+0x90>
    9eba:	08db      	lsrs	r3, r3, #3
    9ebc:	3aff      	subs	r2, #255	; 0xff
    9ebe:	109c      	asrs	r4, r3, #2
    9ec0:	3aff      	subs	r2, #255	; 0xff
    9ec2:	40a2      	lsls	r2, r4
    9ec4:	6844      	ldr	r4, [r0, #4]
    9ec6:	00db      	lsls	r3, r3, #3
    9ec8:	4322      	orrs	r2, r4
    9eca:	6042      	str	r2, [r0, #4]
    9ecc:	1818      	adds	r0, r3, r0
    9ece:	6883      	ldr	r3, [r0, #8]
    9ed0:	60c8      	str	r0, [r1, #12]
    9ed2:	608b      	str	r3, [r1, #8]
    9ed4:	6081      	str	r1, [r0, #8]
    9ed6:	60d9      	str	r1, [r3, #12]
    9ed8:	0028      	movs	r0, r5
    9eda:	f000 fe1d 	bl	ab18 <__malloc_unlock>
    9ede:	bc04      	pop	{r2}
    9ee0:	4690      	mov	r8, r2
    9ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9ee4:	0a5a      	lsrs	r2, r3, #9
    9ee6:	2a04      	cmp	r2, #4
    9ee8:	d84f      	bhi.n	9f8a <_free_r+0x136>
    9eea:	099c      	lsrs	r4, r3, #6
    9eec:	0026      	movs	r6, r4
    9eee:	3439      	adds	r4, #57	; 0x39
    9ef0:	3638      	adds	r6, #56	; 0x38
    9ef2:	0064      	lsls	r4, r4, #1
    9ef4:	00a4      	lsls	r4, r4, #2
    9ef6:	1904      	adds	r4, r0, r4
    9ef8:	3c08      	subs	r4, #8
    9efa:	68a2      	ldr	r2, [r4, #8]
    9efc:	2703      	movs	r7, #3
    9efe:	4294      	cmp	r4, r2
    9f00:	d04a      	beq.n	9f98 <_free_r+0x144>
    9f02:	6850      	ldr	r0, [r2, #4]
    9f04:	43b8      	bics	r0, r7
    9f06:	4283      	cmp	r3, r0
    9f08:	d202      	bcs.n	9f10 <_free_r+0xbc>
    9f0a:	6892      	ldr	r2, [r2, #8]
    9f0c:	4294      	cmp	r4, r2
    9f0e:	d1f8      	bne.n	9f02 <_free_r+0xae>
    9f10:	68d4      	ldr	r4, [r2, #12]
    9f12:	60cc      	str	r4, [r1, #12]
    9f14:	608a      	str	r2, [r1, #8]
    9f16:	60a1      	str	r1, [r4, #8]
    9f18:	60d1      	str	r1, [r2, #12]
    9f1a:	e7dd      	b.n	9ed8 <_free_r+0x84>
    9f1c:	189b      	adds	r3, r3, r2
    9f1e:	4f3a      	ldr	r7, [pc, #232]	; (a008 <_free_r+0x1b4>)
    9f20:	68a2      	ldr	r2, [r4, #8]
    9f22:	42ba      	cmp	r2, r7
    9f24:	d040      	beq.n	9fa8 <_free_r+0x154>
    9f26:	68e4      	ldr	r4, [r4, #12]
    9f28:	431e      	orrs	r6, r3
    9f2a:	60d4      	str	r4, [r2, #12]
    9f2c:	60a2      	str	r2, [r4, #8]
    9f2e:	4a35      	ldr	r2, [pc, #212]	; (a004 <_free_r+0x1b0>)
    9f30:	604e      	str	r6, [r1, #4]
    9f32:	50cb      	str	r3, [r1, r3]
    9f34:	4293      	cmp	r3, r2
    9f36:	d8d5      	bhi.n	9ee4 <_free_r+0x90>
    9f38:	e7bf      	b.n	9eba <_free_r+0x66>
    9f3a:	189b      	adds	r3, r3, r2
    9f3c:	4642      	mov	r2, r8
    9f3e:	4232      	tst	r2, r6
    9f40:	d106      	bne.n	9f50 <_free_r+0xfc>
    9f42:	680a      	ldr	r2, [r1, #0]
    9f44:	1a89      	subs	r1, r1, r2
    9f46:	688c      	ldr	r4, [r1, #8]
    9f48:	189b      	adds	r3, r3, r2
    9f4a:	68ca      	ldr	r2, [r1, #12]
    9f4c:	60e2      	str	r2, [r4, #12]
    9f4e:	6094      	str	r4, [r2, #8]
    9f50:	2401      	movs	r4, #1
    9f52:	4a2e      	ldr	r2, [pc, #184]	; (a00c <_free_r+0x1b8>)
    9f54:	431c      	orrs	r4, r3
    9f56:	6812      	ldr	r2, [r2, #0]
    9f58:	604c      	str	r4, [r1, #4]
    9f5a:	6081      	str	r1, [r0, #8]
    9f5c:	4293      	cmp	r3, r2
    9f5e:	d3bb      	bcc.n	9ed8 <_free_r+0x84>
    9f60:	4b2b      	ldr	r3, [pc, #172]	; (a010 <_free_r+0x1bc>)
    9f62:	0028      	movs	r0, r5
    9f64:	6819      	ldr	r1, [r3, #0]
    9f66:	f7ff ff25 	bl	9db4 <_malloc_trim_r>
    9f6a:	e7b5      	b.n	9ed8 <_free_r+0x84>
    9f6c:	4646      	mov	r6, r8
    9f6e:	18a0      	adds	r0, r4, r2
    9f70:	6840      	ldr	r0, [r0, #4]
    9f72:	4230      	tst	r0, r6
    9f74:	d13e      	bne.n	9ff4 <_free_r+0x1a0>
    9f76:	68a0      	ldr	r0, [r4, #8]
    9f78:	18d3      	adds	r3, r2, r3
    9f7a:	68e2      	ldr	r2, [r4, #12]
    9f7c:	60c2      	str	r2, [r0, #12]
    9f7e:	6090      	str	r0, [r2, #8]
    9f80:	4642      	mov	r2, r8
    9f82:	431a      	orrs	r2, r3
    9f84:	604a      	str	r2, [r1, #4]
    9f86:	50cb      	str	r3, [r1, r3]
    9f88:	e7a6      	b.n	9ed8 <_free_r+0x84>
    9f8a:	2a14      	cmp	r2, #20
    9f8c:	d814      	bhi.n	9fb8 <_free_r+0x164>
    9f8e:	0016      	movs	r6, r2
    9f90:	325c      	adds	r2, #92	; 0x5c
    9f92:	365b      	adds	r6, #91	; 0x5b
    9f94:	0054      	lsls	r4, r2, #1
    9f96:	e7ad      	b.n	9ef4 <_free_r+0xa0>
    9f98:	2301      	movs	r3, #1
    9f9a:	10b6      	asrs	r6, r6, #2
    9f9c:	40b3      	lsls	r3, r6
    9f9e:	6842      	ldr	r2, [r0, #4]
    9fa0:	4313      	orrs	r3, r2
    9fa2:	6043      	str	r3, [r0, #4]
    9fa4:	0022      	movs	r2, r4
    9fa6:	e7b4      	b.n	9f12 <_free_r+0xbe>
    9fa8:	431e      	orrs	r6, r3
    9faa:	60d1      	str	r1, [r2, #12]
    9fac:	6091      	str	r1, [r2, #8]
    9fae:	60ca      	str	r2, [r1, #12]
    9fb0:	608a      	str	r2, [r1, #8]
    9fb2:	604e      	str	r6, [r1, #4]
    9fb4:	50cb      	str	r3, [r1, r3]
    9fb6:	e78f      	b.n	9ed8 <_free_r+0x84>
    9fb8:	2a54      	cmp	r2, #84	; 0x54
    9fba:	d805      	bhi.n	9fc8 <_free_r+0x174>
    9fbc:	0b1c      	lsrs	r4, r3, #12
    9fbe:	0026      	movs	r6, r4
    9fc0:	346f      	adds	r4, #111	; 0x6f
    9fc2:	366e      	adds	r6, #110	; 0x6e
    9fc4:	0064      	lsls	r4, r4, #1
    9fc6:	e795      	b.n	9ef4 <_free_r+0xa0>
    9fc8:	24aa      	movs	r4, #170	; 0xaa
    9fca:	0064      	lsls	r4, r4, #1
    9fcc:	42a2      	cmp	r2, r4
    9fce:	d805      	bhi.n	9fdc <_free_r+0x188>
    9fd0:	0bdc      	lsrs	r4, r3, #15
    9fd2:	0026      	movs	r6, r4
    9fd4:	3478      	adds	r4, #120	; 0x78
    9fd6:	3677      	adds	r6, #119	; 0x77
    9fd8:	0064      	lsls	r4, r4, #1
    9fda:	e78b      	b.n	9ef4 <_free_r+0xa0>
    9fdc:	4c0d      	ldr	r4, [pc, #52]	; (a014 <_free_r+0x1c0>)
    9fde:	42a2      	cmp	r2, r4
    9fe0:	d805      	bhi.n	9fee <_free_r+0x19a>
    9fe2:	0c9c      	lsrs	r4, r3, #18
    9fe4:	0026      	movs	r6, r4
    9fe6:	347d      	adds	r4, #125	; 0x7d
    9fe8:	367c      	adds	r6, #124	; 0x7c
    9fea:	0064      	lsls	r4, r4, #1
    9fec:	e782      	b.n	9ef4 <_free_r+0xa0>
    9fee:	24fe      	movs	r4, #254	; 0xfe
    9ff0:	267e      	movs	r6, #126	; 0x7e
    9ff2:	e77f      	b.n	9ef4 <_free_r+0xa0>
    9ff4:	4642      	mov	r2, r8
    9ff6:	431a      	orrs	r2, r3
    9ff8:	604a      	str	r2, [r1, #4]
    9ffa:	50cb      	str	r3, [r1, r3]
    9ffc:	e76c      	b.n	9ed8 <_free_r+0x84>
    9ffe:	46c0      	nop			; (mov r8, r8)
    a000:	20000498 	.word	0x20000498
    a004:	000001ff 	.word	0x000001ff
    a008:	200004a0 	.word	0x200004a0
    a00c:	200008a0 	.word	0x200008a0
    a010:	20000d9c 	.word	0x20000d9c
    a014:	00000554 	.word	0x00000554

0000a018 <__sfvwrite_r>:
    a018:	b5f0      	push	{r4, r5, r6, r7, lr}
    a01a:	4656      	mov	r6, sl
    a01c:	4644      	mov	r4, r8
    a01e:	465f      	mov	r7, fp
    a020:	464d      	mov	r5, r9
    a022:	b4f0      	push	{r4, r5, r6, r7}
    a024:	6893      	ldr	r3, [r2, #8]
    a026:	b085      	sub	sp, #20
    a028:	9001      	str	r0, [sp, #4]
    a02a:	000c      	movs	r4, r1
    a02c:	4692      	mov	sl, r2
    a02e:	2b00      	cmp	r3, #0
    a030:	d025      	beq.n	a07e <__sfvwrite_r+0x66>
    a032:	898b      	ldrh	r3, [r1, #12]
    a034:	071a      	lsls	r2, r3, #28
    a036:	d52a      	bpl.n	a08e <__sfvwrite_r+0x76>
    a038:	690a      	ldr	r2, [r1, #16]
    a03a:	2a00      	cmp	r2, #0
    a03c:	d027      	beq.n	a08e <__sfvwrite_r+0x76>
    a03e:	4652      	mov	r2, sl
    a040:	6812      	ldr	r2, [r2, #0]
    a042:	4693      	mov	fp, r2
    a044:	079a      	lsls	r2, r3, #30
    a046:	d52f      	bpl.n	a0a8 <__sfvwrite_r+0x90>
    a048:	4bb7      	ldr	r3, [pc, #732]	; (a328 <__sfvwrite_r+0x310>)
    a04a:	2600      	movs	r6, #0
    a04c:	2500      	movs	r5, #0
    a04e:	4698      	mov	r8, r3
    a050:	2d00      	cmp	r5, #0
    a052:	d100      	bne.n	a056 <__sfvwrite_r+0x3e>
    a054:	e06d      	b.n	a132 <__sfvwrite_r+0x11a>
    a056:	1e2b      	subs	r3, r5, #0
    a058:	4543      	cmp	r3, r8
    a05a:	d900      	bls.n	a05e <__sfvwrite_r+0x46>
    a05c:	4bb2      	ldr	r3, [pc, #712]	; (a328 <__sfvwrite_r+0x310>)
    a05e:	0032      	movs	r2, r6
    a060:	69e1      	ldr	r1, [r4, #28]
    a062:	9801      	ldr	r0, [sp, #4]
    a064:	6a67      	ldr	r7, [r4, #36]	; 0x24
    a066:	47b8      	blx	r7
    a068:	2800      	cmp	r0, #0
    a06a:	dc00      	bgt.n	a06e <__sfvwrite_r+0x56>
    a06c:	e079      	b.n	a162 <__sfvwrite_r+0x14a>
    a06e:	4653      	mov	r3, sl
    a070:	689b      	ldr	r3, [r3, #8]
    a072:	1836      	adds	r6, r6, r0
    a074:	1a2d      	subs	r5, r5, r0
    a076:	1a18      	subs	r0, r3, r0
    a078:	4653      	mov	r3, sl
    a07a:	6098      	str	r0, [r3, #8]
    a07c:	d1e8      	bne.n	a050 <__sfvwrite_r+0x38>
    a07e:	2000      	movs	r0, #0
    a080:	b005      	add	sp, #20
    a082:	bc3c      	pop	{r2, r3, r4, r5}
    a084:	4690      	mov	r8, r2
    a086:	4699      	mov	r9, r3
    a088:	46a2      	mov	sl, r4
    a08a:	46ab      	mov	fp, r5
    a08c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a08e:	0021      	movs	r1, r4
    a090:	9801      	ldr	r0, [sp, #4]
    a092:	f7fe fc5b 	bl	894c <__swsetup_r>
    a096:	2800      	cmp	r0, #0
    a098:	d000      	beq.n	a09c <__sfvwrite_r+0x84>
    a09a:	e13b      	b.n	a314 <__sfvwrite_r+0x2fc>
    a09c:	4652      	mov	r2, sl
    a09e:	89a3      	ldrh	r3, [r4, #12]
    a0a0:	6812      	ldr	r2, [r2, #0]
    a0a2:	4693      	mov	fp, r2
    a0a4:	079a      	lsls	r2, r3, #30
    a0a6:	d4cf      	bmi.n	a048 <__sfvwrite_r+0x30>
    a0a8:	07da      	lsls	r2, r3, #31
    a0aa:	d562      	bpl.n	a172 <__sfvwrite_r+0x15a>
    a0ac:	2300      	movs	r3, #0
    a0ae:	2700      	movs	r7, #0
    a0b0:	4699      	mov	r9, r3
    a0b2:	001d      	movs	r5, r3
    a0b4:	9302      	str	r3, [sp, #8]
    a0b6:	2f00      	cmp	r7, #0
    a0b8:	d030      	beq.n	a11c <__sfvwrite_r+0x104>
    a0ba:	9b02      	ldr	r3, [sp, #8]
    a0bc:	2b00      	cmp	r3, #0
    a0be:	d100      	bne.n	a0c2 <__sfvwrite_r+0xaa>
    a0c0:	e0c3      	b.n	a24a <__sfvwrite_r+0x232>
    a0c2:	1e2e      	subs	r6, r5, #0
    a0c4:	42be      	cmp	r6, r7
    a0c6:	d900      	bls.n	a0ca <__sfvwrite_r+0xb2>
    a0c8:	003e      	movs	r6, r7
    a0ca:	6820      	ldr	r0, [r4, #0]
    a0cc:	6922      	ldr	r2, [r4, #16]
    a0ce:	46b0      	mov	r8, r6
    a0d0:	6963      	ldr	r3, [r4, #20]
    a0d2:	4290      	cmp	r0, r2
    a0d4:	d907      	bls.n	a0e6 <__sfvwrite_r+0xce>
    a0d6:	68a2      	ldr	r2, [r4, #8]
    a0d8:	4694      	mov	ip, r2
    a0da:	449c      	add	ip, r3
    a0dc:	4662      	mov	r2, ip
    a0de:	9203      	str	r2, [sp, #12]
    a0e0:	4566      	cmp	r6, ip
    a0e2:	dd00      	ble.n	a0e6 <__sfvwrite_r+0xce>
    a0e4:	e0ef      	b.n	a2c6 <__sfvwrite_r+0x2ae>
    a0e6:	429e      	cmp	r6, r3
    a0e8:	da00      	bge.n	a0ec <__sfvwrite_r+0xd4>
    a0ea:	e092      	b.n	a212 <__sfvwrite_r+0x1fa>
    a0ec:	464a      	mov	r2, r9
    a0ee:	69e1      	ldr	r1, [r4, #28]
    a0f0:	9801      	ldr	r0, [sp, #4]
    a0f2:	6a66      	ldr	r6, [r4, #36]	; 0x24
    a0f4:	47b0      	blx	r6
    a0f6:	4680      	mov	r8, r0
    a0f8:	2800      	cmp	r0, #0
    a0fa:	dd32      	ble.n	a162 <__sfvwrite_r+0x14a>
    a0fc:	4643      	mov	r3, r8
    a0fe:	1aed      	subs	r5, r5, r3
    a100:	d100      	bne.n	a104 <__sfvwrite_r+0xec>
    a102:	e095      	b.n	a230 <__sfvwrite_r+0x218>
    a104:	4643      	mov	r3, r8
    a106:	1aff      	subs	r7, r7, r3
    a108:	4653      	mov	r3, sl
    a10a:	4642      	mov	r2, r8
    a10c:	689b      	ldr	r3, [r3, #8]
    a10e:	44c1      	add	r9, r8
    a110:	1a9b      	subs	r3, r3, r2
    a112:	4652      	mov	r2, sl
    a114:	6093      	str	r3, [r2, #8]
    a116:	d0b2      	beq.n	a07e <__sfvwrite_r+0x66>
    a118:	2f00      	cmp	r7, #0
    a11a:	d1ce      	bne.n	a0ba <__sfvwrite_r+0xa2>
    a11c:	465b      	mov	r3, fp
    a11e:	681b      	ldr	r3, [r3, #0]
    a120:	4699      	mov	r9, r3
    a122:	465b      	mov	r3, fp
    a124:	685f      	ldr	r7, [r3, #4]
    a126:	2308      	movs	r3, #8
    a128:	469c      	mov	ip, r3
    a12a:	2300      	movs	r3, #0
    a12c:	44e3      	add	fp, ip
    a12e:	9302      	str	r3, [sp, #8]
    a130:	e7c1      	b.n	a0b6 <__sfvwrite_r+0x9e>
    a132:	465b      	mov	r3, fp
    a134:	681e      	ldr	r6, [r3, #0]
    a136:	685d      	ldr	r5, [r3, #4]
    a138:	2308      	movs	r3, #8
    a13a:	469c      	mov	ip, r3
    a13c:	44e3      	add	fp, ip
    a13e:	e787      	b.n	a050 <__sfvwrite_r+0x38>
    a140:	4b7a      	ldr	r3, [pc, #488]	; (a32c <__sfvwrite_r+0x314>)
    a142:	1e30      	subs	r0, r6, #0
    a144:	4298      	cmp	r0, r3
    a146:	d900      	bls.n	a14a <__sfvwrite_r+0x132>
    a148:	0018      	movs	r0, r3
    a14a:	4641      	mov	r1, r8
    a14c:	f001 fd2a 	bl	bba4 <__aeabi_idiv>
    a150:	4643      	mov	r3, r8
    a152:	003a      	movs	r2, r7
    a154:	4343      	muls	r3, r0
    a156:	69e1      	ldr	r1, [r4, #28]
    a158:	9801      	ldr	r0, [sp, #4]
    a15a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    a15c:	47a8      	blx	r5
    a15e:	2800      	cmp	r0, #0
    a160:	dc23      	bgt.n	a1aa <__sfvwrite_r+0x192>
    a162:	230c      	movs	r3, #12
    a164:	5ee2      	ldrsh	r2, [r4, r3]
    a166:	2340      	movs	r3, #64	; 0x40
    a168:	2001      	movs	r0, #1
    a16a:	4313      	orrs	r3, r2
    a16c:	81a3      	strh	r3, [r4, #12]
    a16e:	4240      	negs	r0, r0
    a170:	e786      	b.n	a080 <__sfvwrite_r+0x68>
    a172:	2700      	movs	r7, #0
    a174:	2600      	movs	r6, #0
    a176:	2e00      	cmp	r6, #0
    a178:	d023      	beq.n	a1c2 <__sfvwrite_r+0x1aa>
    a17a:	2280      	movs	r2, #128	; 0x80
    a17c:	0092      	lsls	r2, r2, #2
    a17e:	68a5      	ldr	r5, [r4, #8]
    a180:	4213      	tst	r3, r2
    a182:	d025      	beq.n	a1d0 <__sfvwrite_r+0x1b8>
    a184:	46a8      	mov	r8, r5
    a186:	42ae      	cmp	r6, r5
    a188:	d35b      	bcc.n	a242 <__sfvwrite_r+0x22a>
    a18a:	2290      	movs	r2, #144	; 0x90
    a18c:	00d2      	lsls	r2, r2, #3
    a18e:	4213      	tst	r3, r2
    a190:	d168      	bne.n	a264 <__sfvwrite_r+0x24c>
    a192:	6820      	ldr	r0, [r4, #0]
    a194:	4642      	mov	r2, r8
    a196:	0039      	movs	r1, r7
    a198:	f000 fc70 	bl	aa7c <memmove>
    a19c:	0030      	movs	r0, r6
    a19e:	68a3      	ldr	r3, [r4, #8]
    a1a0:	1b5d      	subs	r5, r3, r5
    a1a2:	6823      	ldr	r3, [r4, #0]
    a1a4:	60a5      	str	r5, [r4, #8]
    a1a6:	4443      	add	r3, r8
    a1a8:	6023      	str	r3, [r4, #0]
    a1aa:	4653      	mov	r3, sl
    a1ac:	689b      	ldr	r3, [r3, #8]
    a1ae:	183f      	adds	r7, r7, r0
    a1b0:	1a36      	subs	r6, r6, r0
    a1b2:	1a18      	subs	r0, r3, r0
    a1b4:	4653      	mov	r3, sl
    a1b6:	6098      	str	r0, [r3, #8]
    a1b8:	d100      	bne.n	a1bc <__sfvwrite_r+0x1a4>
    a1ba:	e760      	b.n	a07e <__sfvwrite_r+0x66>
    a1bc:	89a3      	ldrh	r3, [r4, #12]
    a1be:	2e00      	cmp	r6, #0
    a1c0:	d1db      	bne.n	a17a <__sfvwrite_r+0x162>
    a1c2:	465a      	mov	r2, fp
    a1c4:	6817      	ldr	r7, [r2, #0]
    a1c6:	6856      	ldr	r6, [r2, #4]
    a1c8:	2208      	movs	r2, #8
    a1ca:	4694      	mov	ip, r2
    a1cc:	44e3      	add	fp, ip
    a1ce:	e7d2      	b.n	a176 <__sfvwrite_r+0x15e>
    a1d0:	6820      	ldr	r0, [r4, #0]
    a1d2:	6923      	ldr	r3, [r4, #16]
    a1d4:	4298      	cmp	r0, r3
    a1d6:	d803      	bhi.n	a1e0 <__sfvwrite_r+0x1c8>
    a1d8:	6963      	ldr	r3, [r4, #20]
    a1da:	4698      	mov	r8, r3
    a1dc:	429e      	cmp	r6, r3
    a1de:	d2af      	bcs.n	a140 <__sfvwrite_r+0x128>
    a1e0:	42b5      	cmp	r5, r6
    a1e2:	d900      	bls.n	a1e6 <__sfvwrite_r+0x1ce>
    a1e4:	0035      	movs	r5, r6
    a1e6:	002a      	movs	r2, r5
    a1e8:	0039      	movs	r1, r7
    a1ea:	f000 fc47 	bl	aa7c <memmove>
    a1ee:	68a3      	ldr	r3, [r4, #8]
    a1f0:	6822      	ldr	r2, [r4, #0]
    a1f2:	1b5b      	subs	r3, r3, r5
    a1f4:	1952      	adds	r2, r2, r5
    a1f6:	60a3      	str	r3, [r4, #8]
    a1f8:	6022      	str	r2, [r4, #0]
    a1fa:	2b00      	cmp	r3, #0
    a1fc:	d001      	beq.n	a202 <__sfvwrite_r+0x1ea>
    a1fe:	0028      	movs	r0, r5
    a200:	e7d3      	b.n	a1aa <__sfvwrite_r+0x192>
    a202:	0021      	movs	r1, r4
    a204:	9801      	ldr	r0, [sp, #4]
    a206:	f7ff fd19 	bl	9c3c <_fflush_r>
    a20a:	2800      	cmp	r0, #0
    a20c:	d1a9      	bne.n	a162 <__sfvwrite_r+0x14a>
    a20e:	0028      	movs	r0, r5
    a210:	e7cb      	b.n	a1aa <__sfvwrite_r+0x192>
    a212:	0032      	movs	r2, r6
    a214:	4649      	mov	r1, r9
    a216:	f000 fc31 	bl	aa7c <memmove>
    a21a:	68a3      	ldr	r3, [r4, #8]
    a21c:	1b9b      	subs	r3, r3, r6
    a21e:	60a3      	str	r3, [r4, #8]
    a220:	6823      	ldr	r3, [r4, #0]
    a222:	469c      	mov	ip, r3
    a224:	4643      	mov	r3, r8
    a226:	4466      	add	r6, ip
    a228:	6026      	str	r6, [r4, #0]
    a22a:	1aed      	subs	r5, r5, r3
    a22c:	d000      	beq.n	a230 <__sfvwrite_r+0x218>
    a22e:	e769      	b.n	a104 <__sfvwrite_r+0xec>
    a230:	0021      	movs	r1, r4
    a232:	9801      	ldr	r0, [sp, #4]
    a234:	f7ff fd02 	bl	9c3c <_fflush_r>
    a238:	2800      	cmp	r0, #0
    a23a:	d192      	bne.n	a162 <__sfvwrite_r+0x14a>
    a23c:	2300      	movs	r3, #0
    a23e:	9302      	str	r3, [sp, #8]
    a240:	e760      	b.n	a104 <__sfvwrite_r+0xec>
    a242:	0035      	movs	r5, r6
    a244:	6820      	ldr	r0, [r4, #0]
    a246:	46b0      	mov	r8, r6
    a248:	e7a4      	b.n	a194 <__sfvwrite_r+0x17c>
    a24a:	003a      	movs	r2, r7
    a24c:	210a      	movs	r1, #10
    a24e:	4648      	mov	r0, r9
    a250:	f000 fbcc 	bl	a9ec <memchr>
    a254:	2800      	cmp	r0, #0
    a256:	d059      	beq.n	a30c <__sfvwrite_r+0x2f4>
    a258:	464b      	mov	r3, r9
    a25a:	3001      	adds	r0, #1
    a25c:	1ac5      	subs	r5, r0, r3
    a25e:	2301      	movs	r3, #1
    a260:	9302      	str	r3, [sp, #8]
    a262:	e72e      	b.n	a0c2 <__sfvwrite_r+0xaa>
    a264:	6921      	ldr	r1, [r4, #16]
    a266:	6822      	ldr	r2, [r4, #0]
    a268:	1a52      	subs	r2, r2, r1
    a26a:	4691      	mov	r9, r2
    a26c:	6962      	ldr	r2, [r4, #20]
    a26e:	0050      	lsls	r0, r2, #1
    a270:	1882      	adds	r2, r0, r2
    a272:	0fd0      	lsrs	r0, r2, #31
    a274:	1882      	adds	r2, r0, r2
    a276:	1052      	asrs	r2, r2, #1
    a278:	4690      	mov	r8, r2
    a27a:	464a      	mov	r2, r9
    a27c:	1c50      	adds	r0, r2, #1
    a27e:	1980      	adds	r0, r0, r6
    a280:	4642      	mov	r2, r8
    a282:	4540      	cmp	r0, r8
    a284:	d901      	bls.n	a28a <__sfvwrite_r+0x272>
    a286:	4680      	mov	r8, r0
    a288:	0002      	movs	r2, r0
    a28a:	055b      	lsls	r3, r3, #21
    a28c:	d52d      	bpl.n	a2ea <__sfvwrite_r+0x2d2>
    a28e:	0011      	movs	r1, r2
    a290:	9801      	ldr	r0, [sp, #4]
    a292:	f000 f901 	bl	a498 <_malloc_r>
    a296:	1e05      	subs	r5, r0, #0
    a298:	d03f      	beq.n	a31a <__sfvwrite_r+0x302>
    a29a:	464a      	mov	r2, r9
    a29c:	6921      	ldr	r1, [r4, #16]
    a29e:	f7fc fd33 	bl	6d08 <memcpy>
    a2a2:	89a2      	ldrh	r2, [r4, #12]
    a2a4:	4b22      	ldr	r3, [pc, #136]	; (a330 <__sfvwrite_r+0x318>)
    a2a6:	4013      	ands	r3, r2
    a2a8:	2280      	movs	r2, #128	; 0x80
    a2aa:	4313      	orrs	r3, r2
    a2ac:	81a3      	strh	r3, [r4, #12]
    a2ae:	4643      	mov	r3, r8
    a2b0:	0028      	movs	r0, r5
    a2b2:	464a      	mov	r2, r9
    a2b4:	4448      	add	r0, r9
    a2b6:	6163      	str	r3, [r4, #20]
    a2b8:	1a9b      	subs	r3, r3, r2
    a2ba:	6125      	str	r5, [r4, #16]
    a2bc:	6020      	str	r0, [r4, #0]
    a2be:	0035      	movs	r5, r6
    a2c0:	60a3      	str	r3, [r4, #8]
    a2c2:	46b0      	mov	r8, r6
    a2c4:	e766      	b.n	a194 <__sfvwrite_r+0x17c>
    a2c6:	4666      	mov	r6, ip
    a2c8:	4649      	mov	r1, r9
    a2ca:	f000 fbd7 	bl	aa7c <memmove>
    a2ce:	46b4      	mov	ip, r6
    a2d0:	6823      	ldr	r3, [r4, #0]
    a2d2:	0021      	movs	r1, r4
    a2d4:	4463      	add	r3, ip
    a2d6:	6023      	str	r3, [r4, #0]
    a2d8:	9801      	ldr	r0, [sp, #4]
    a2da:	f7ff fcaf 	bl	9c3c <_fflush_r>
    a2de:	2800      	cmp	r0, #0
    a2e0:	d000      	beq.n	a2e4 <__sfvwrite_r+0x2cc>
    a2e2:	e73e      	b.n	a162 <__sfvwrite_r+0x14a>
    a2e4:	9b03      	ldr	r3, [sp, #12]
    a2e6:	4698      	mov	r8, r3
    a2e8:	e708      	b.n	a0fc <__sfvwrite_r+0xe4>
    a2ea:	9801      	ldr	r0, [sp, #4]
    a2ec:	f000 ff7e 	bl	b1ec <_realloc_r>
    a2f0:	1e05      	subs	r5, r0, #0
    a2f2:	d1dc      	bne.n	a2ae <__sfvwrite_r+0x296>
    a2f4:	9d01      	ldr	r5, [sp, #4]
    a2f6:	6921      	ldr	r1, [r4, #16]
    a2f8:	0028      	movs	r0, r5
    a2fa:	f7ff fdab 	bl	9e54 <_free_r>
    a2fe:	2280      	movs	r2, #128	; 0x80
    a300:	89a3      	ldrh	r3, [r4, #12]
    a302:	4393      	bics	r3, r2
    a304:	b21a      	sxth	r2, r3
    a306:	230c      	movs	r3, #12
    a308:	602b      	str	r3, [r5, #0]
    a30a:	e72c      	b.n	a166 <__sfvwrite_r+0x14e>
    a30c:	2301      	movs	r3, #1
    a30e:	1c7d      	adds	r5, r7, #1
    a310:	9302      	str	r3, [sp, #8]
    a312:	e6d6      	b.n	a0c2 <__sfvwrite_r+0xaa>
    a314:	2001      	movs	r0, #1
    a316:	4240      	negs	r0, r0
    a318:	e6b2      	b.n	a080 <__sfvwrite_r+0x68>
    a31a:	230c      	movs	r3, #12
    a31c:	9a01      	ldr	r2, [sp, #4]
    a31e:	6013      	str	r3, [r2, #0]
    a320:	230c      	movs	r3, #12
    a322:	5ee2      	ldrsh	r2, [r4, r3]
    a324:	e71f      	b.n	a166 <__sfvwrite_r+0x14e>
    a326:	46c0      	nop			; (mov r8, r8)
    a328:	7ffffc00 	.word	0x7ffffc00
    a32c:	7fffffff 	.word	0x7fffffff
    a330:	fffffb7f 	.word	0xfffffb7f

0000a334 <_fwalk_reent>:
    a334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a336:	464f      	mov	r7, r9
    a338:	4646      	mov	r6, r8
    a33a:	b4c0      	push	{r6, r7}
    a33c:	27b8      	movs	r7, #184	; 0xb8
    a33e:	4680      	mov	r8, r0
    a340:	00bf      	lsls	r7, r7, #2
    a342:	4447      	add	r7, r8
    a344:	4689      	mov	r9, r1
    a346:	2600      	movs	r6, #0
    a348:	2f00      	cmp	r7, #0
    a34a:	d014      	beq.n	a376 <_fwalk_reent+0x42>
    a34c:	687b      	ldr	r3, [r7, #4]
    a34e:	68bc      	ldr	r4, [r7, #8]
    a350:	1e5d      	subs	r5, r3, #1
    a352:	d40d      	bmi.n	a370 <_fwalk_reent+0x3c>
    a354:	89a3      	ldrh	r3, [r4, #12]
    a356:	2b01      	cmp	r3, #1
    a358:	d907      	bls.n	a36a <_fwalk_reent+0x36>
    a35a:	220e      	movs	r2, #14
    a35c:	5ea3      	ldrsh	r3, [r4, r2]
    a35e:	3301      	adds	r3, #1
    a360:	d003      	beq.n	a36a <_fwalk_reent+0x36>
    a362:	0021      	movs	r1, r4
    a364:	4640      	mov	r0, r8
    a366:	47c8      	blx	r9
    a368:	4306      	orrs	r6, r0
    a36a:	3468      	adds	r4, #104	; 0x68
    a36c:	3d01      	subs	r5, #1
    a36e:	d2f1      	bcs.n	a354 <_fwalk_reent+0x20>
    a370:	683f      	ldr	r7, [r7, #0]
    a372:	2f00      	cmp	r7, #0
    a374:	d1ea      	bne.n	a34c <_fwalk_reent+0x18>
    a376:	0030      	movs	r0, r6
    a378:	bc0c      	pop	{r2, r3}
    a37a:	4690      	mov	r8, r2
    a37c:	4699      	mov	r9, r3
    a37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a380 <__locale_charset>:
    a380:	4800      	ldr	r0, [pc, #0]	; (a384 <__locale_charset+0x4>)
    a382:	4770      	bx	lr
    a384:	20000474 	.word	0x20000474

0000a388 <__locale_mb_cur_max>:
    a388:	4b01      	ldr	r3, [pc, #4]	; (a390 <__locale_mb_cur_max+0x8>)
    a38a:	6818      	ldr	r0, [r3, #0]
    a38c:	4770      	bx	lr
    a38e:	46c0      	nop			; (mov r8, r8)
    a390:	20000494 	.word	0x20000494

0000a394 <_localeconv_r>:
    a394:	4800      	ldr	r0, [pc, #0]	; (a398 <_localeconv_r+0x4>)
    a396:	4770      	bx	lr
    a398:	2000043c 	.word	0x2000043c

0000a39c <__swhatbuf_r>:
    a39c:	b570      	push	{r4, r5, r6, lr}
    a39e:	000c      	movs	r4, r1
    a3a0:	001e      	movs	r6, r3
    a3a2:	230e      	movs	r3, #14
    a3a4:	5ec9      	ldrsh	r1, [r1, r3]
    a3a6:	b090      	sub	sp, #64	; 0x40
    a3a8:	0015      	movs	r5, r2
    a3aa:	2900      	cmp	r1, #0
    a3ac:	db15      	blt.n	a3da <__swhatbuf_r+0x3e>
    a3ae:	aa01      	add	r2, sp, #4
    a3b0:	f001 fb70 	bl	ba94 <_fstat_r>
    a3b4:	2800      	cmp	r0, #0
    a3b6:	db10      	blt.n	a3da <__swhatbuf_r+0x3e>
    a3b8:	23f0      	movs	r3, #240	; 0xf0
    a3ba:	9a02      	ldr	r2, [sp, #8]
    a3bc:	021b      	lsls	r3, r3, #8
    a3be:	4013      	ands	r3, r2
    a3c0:	4a0d      	ldr	r2, [pc, #52]	; (a3f8 <__swhatbuf_r+0x5c>)
    a3c2:	2080      	movs	r0, #128	; 0x80
    a3c4:	4694      	mov	ip, r2
    a3c6:	4463      	add	r3, ip
    a3c8:	425a      	negs	r2, r3
    a3ca:	4153      	adcs	r3, r2
    a3cc:	6033      	str	r3, [r6, #0]
    a3ce:	2380      	movs	r3, #128	; 0x80
    a3d0:	00db      	lsls	r3, r3, #3
    a3d2:	602b      	str	r3, [r5, #0]
    a3d4:	0100      	lsls	r0, r0, #4
    a3d6:	b010      	add	sp, #64	; 0x40
    a3d8:	bd70      	pop	{r4, r5, r6, pc}
    a3da:	2300      	movs	r3, #0
    a3dc:	6033      	str	r3, [r6, #0]
    a3de:	89a3      	ldrh	r3, [r4, #12]
    a3e0:	061b      	lsls	r3, r3, #24
    a3e2:	d503      	bpl.n	a3ec <__swhatbuf_r+0x50>
    a3e4:	2340      	movs	r3, #64	; 0x40
    a3e6:	2000      	movs	r0, #0
    a3e8:	602b      	str	r3, [r5, #0]
    a3ea:	e7f4      	b.n	a3d6 <__swhatbuf_r+0x3a>
    a3ec:	2380      	movs	r3, #128	; 0x80
    a3ee:	00db      	lsls	r3, r3, #3
    a3f0:	602b      	str	r3, [r5, #0]
    a3f2:	2000      	movs	r0, #0
    a3f4:	e7ef      	b.n	a3d6 <__swhatbuf_r+0x3a>
    a3f6:	46c0      	nop			; (mov r8, r8)
    a3f8:	ffffe000 	.word	0xffffe000

0000a3fc <__smakebuf_r>:
    a3fc:	b570      	push	{r4, r5, r6, lr}
    a3fe:	898b      	ldrh	r3, [r1, #12]
    a400:	b082      	sub	sp, #8
    a402:	0005      	movs	r5, r0
    a404:	000c      	movs	r4, r1
    a406:	079b      	lsls	r3, r3, #30
    a408:	d507      	bpl.n	a41a <__smakebuf_r+0x1e>
    a40a:	0023      	movs	r3, r4
    a40c:	3343      	adds	r3, #67	; 0x43
    a40e:	6023      	str	r3, [r4, #0]
    a410:	6123      	str	r3, [r4, #16]
    a412:	2301      	movs	r3, #1
    a414:	6163      	str	r3, [r4, #20]
    a416:	b002      	add	sp, #8
    a418:	bd70      	pop	{r4, r5, r6, pc}
    a41a:	ab01      	add	r3, sp, #4
    a41c:	466a      	mov	r2, sp
    a41e:	f7ff ffbd 	bl	a39c <__swhatbuf_r>
    a422:	9900      	ldr	r1, [sp, #0]
    a424:	0006      	movs	r6, r0
    a426:	0028      	movs	r0, r5
    a428:	f000 f836 	bl	a498 <_malloc_r>
    a42c:	2800      	cmp	r0, #0
    a42e:	d01c      	beq.n	a46a <__smakebuf_r+0x6e>
    a430:	2280      	movs	r2, #128	; 0x80
    a432:	4b13      	ldr	r3, [pc, #76]	; (a480 <__smakebuf_r+0x84>)
    a434:	63eb      	str	r3, [r5, #60]	; 0x3c
    a436:	89a3      	ldrh	r3, [r4, #12]
    a438:	6020      	str	r0, [r4, #0]
    a43a:	4313      	orrs	r3, r2
    a43c:	9a00      	ldr	r2, [sp, #0]
    a43e:	b21b      	sxth	r3, r3
    a440:	6162      	str	r2, [r4, #20]
    a442:	9a01      	ldr	r2, [sp, #4]
    a444:	81a3      	strh	r3, [r4, #12]
    a446:	6120      	str	r0, [r4, #16]
    a448:	2a00      	cmp	r2, #0
    a44a:	d102      	bne.n	a452 <__smakebuf_r+0x56>
    a44c:	4333      	orrs	r3, r6
    a44e:	81a3      	strh	r3, [r4, #12]
    a450:	e7e1      	b.n	a416 <__smakebuf_r+0x1a>
    a452:	230e      	movs	r3, #14
    a454:	5ee1      	ldrsh	r1, [r4, r3]
    a456:	0028      	movs	r0, r5
    a458:	f001 fb30 	bl	babc <_isatty_r>
    a45c:	2800      	cmp	r0, #0
    a45e:	d00c      	beq.n	a47a <__smakebuf_r+0x7e>
    a460:	2201      	movs	r2, #1
    a462:	89a3      	ldrh	r3, [r4, #12]
    a464:	431a      	orrs	r2, r3
    a466:	b213      	sxth	r3, r2
    a468:	e7f0      	b.n	a44c <__smakebuf_r+0x50>
    a46a:	220c      	movs	r2, #12
    a46c:	5ea3      	ldrsh	r3, [r4, r2]
    a46e:	059a      	lsls	r2, r3, #22
    a470:	d4d1      	bmi.n	a416 <__smakebuf_r+0x1a>
    a472:	2202      	movs	r2, #2
    a474:	4313      	orrs	r3, r2
    a476:	81a3      	strh	r3, [r4, #12]
    a478:	e7c7      	b.n	a40a <__smakebuf_r+0xe>
    a47a:	220c      	movs	r2, #12
    a47c:	5ea3      	ldrsh	r3, [r4, r2]
    a47e:	e7e5      	b.n	a44c <__smakebuf_r+0x50>
    a480:	00009c69 	.word	0x00009c69

0000a484 <malloc>:
    a484:	b510      	push	{r4, lr}
    a486:	4b03      	ldr	r3, [pc, #12]	; (a494 <malloc+0x10>)
    a488:	0001      	movs	r1, r0
    a48a:	6818      	ldr	r0, [r3, #0]
    a48c:	f000 f804 	bl	a498 <_malloc_r>
    a490:	bd10      	pop	{r4, pc}
    a492:	46c0      	nop			; (mov r8, r8)
    a494:	20000438 	.word	0x20000438

0000a498 <_malloc_r>:
    a498:	b5f0      	push	{r4, r5, r6, r7, lr}
    a49a:	465f      	mov	r7, fp
    a49c:	464d      	mov	r5, r9
    a49e:	4656      	mov	r6, sl
    a4a0:	4644      	mov	r4, r8
    a4a2:	b4f0      	push	{r4, r5, r6, r7}
    a4a4:	000d      	movs	r5, r1
    a4a6:	350b      	adds	r5, #11
    a4a8:	b083      	sub	sp, #12
    a4aa:	0007      	movs	r7, r0
    a4ac:	2d16      	cmp	r5, #22
    a4ae:	d800      	bhi.n	a4b2 <_malloc_r+0x1a>
    a4b0:	e0a8      	b.n	a604 <_malloc_r+0x16c>
    a4b2:	2307      	movs	r3, #7
    a4b4:	439d      	bics	r5, r3
    a4b6:	d500      	bpl.n	a4ba <_malloc_r+0x22>
    a4b8:	e0ce      	b.n	a658 <_malloc_r+0x1c0>
    a4ba:	42a9      	cmp	r1, r5
    a4bc:	d900      	bls.n	a4c0 <_malloc_r+0x28>
    a4be:	e0cb      	b.n	a658 <_malloc_r+0x1c0>
    a4c0:	f000 fb28 	bl	ab14 <__malloc_lock>
    a4c4:	23f8      	movs	r3, #248	; 0xf8
    a4c6:	33ff      	adds	r3, #255	; 0xff
    a4c8:	429d      	cmp	r5, r3
    a4ca:	d800      	bhi.n	a4ce <_malloc_r+0x36>
    a4cc:	e284      	b.n	a9d8 <_malloc_r+0x540>
    a4ce:	0a6b      	lsrs	r3, r5, #9
    a4d0:	d100      	bne.n	a4d4 <_malloc_r+0x3c>
    a4d2:	e0c5      	b.n	a660 <_malloc_r+0x1c8>
    a4d4:	2b04      	cmp	r3, #4
    a4d6:	d900      	bls.n	a4da <_malloc_r+0x42>
    a4d8:	e16c      	b.n	a7b4 <_malloc_r+0x31c>
    a4da:	2338      	movs	r3, #56	; 0x38
    a4dc:	09a9      	lsrs	r1, r5, #6
    a4de:	469c      	mov	ip, r3
    a4e0:	3301      	adds	r3, #1
    a4e2:	4698      	mov	r8, r3
    a4e4:	4488      	add	r8, r1
    a4e6:	4643      	mov	r3, r8
    a4e8:	448c      	add	ip, r1
    a4ea:	0059      	lsls	r1, r3, #1
    a4ec:	4ec9      	ldr	r6, [pc, #804]	; (a814 <_malloc_r+0x37c>)
    a4ee:	0089      	lsls	r1, r1, #2
    a4f0:	1871      	adds	r1, r6, r1
    a4f2:	3908      	subs	r1, #8
    a4f4:	68cc      	ldr	r4, [r1, #12]
    a4f6:	42a1      	cmp	r1, r4
    a4f8:	d017      	beq.n	a52a <_malloc_r+0x92>
    a4fa:	2303      	movs	r3, #3
    a4fc:	6862      	ldr	r2, [r4, #4]
    a4fe:	439a      	bics	r2, r3
    a500:	0013      	movs	r3, r2
    a502:	1b52      	subs	r2, r2, r5
    a504:	2a0f      	cmp	r2, #15
    a506:	dd00      	ble.n	a50a <_malloc_r+0x72>
    a508:	e0b0      	b.n	a66c <_malloc_r+0x1d4>
    a50a:	2003      	movs	r0, #3
    a50c:	2a00      	cmp	r2, #0
    a50e:	db09      	blt.n	a524 <_malloc_r+0x8c>
    a510:	e08d      	b.n	a62e <_malloc_r+0x196>
    a512:	6863      	ldr	r3, [r4, #4]
    a514:	4383      	bics	r3, r0
    a516:	1b5a      	subs	r2, r3, r5
    a518:	2a0f      	cmp	r2, #15
    a51a:	dd00      	ble.n	a51e <_malloc_r+0x86>
    a51c:	e0a6      	b.n	a66c <_malloc_r+0x1d4>
    a51e:	2a00      	cmp	r2, #0
    a520:	db00      	blt.n	a524 <_malloc_r+0x8c>
    a522:	e084      	b.n	a62e <_malloc_r+0x196>
    a524:	68e4      	ldr	r4, [r4, #12]
    a526:	42a1      	cmp	r1, r4
    a528:	d1f3      	bne.n	a512 <_malloc_r+0x7a>
    a52a:	4643      	mov	r3, r8
    a52c:	9300      	str	r3, [sp, #0]
    a52e:	0032      	movs	r2, r6
    a530:	6934      	ldr	r4, [r6, #16]
    a532:	3208      	adds	r2, #8
    a534:	4294      	cmp	r4, r2
    a536:	d100      	bne.n	a53a <_malloc_r+0xa2>
    a538:	e18f      	b.n	a85a <_malloc_r+0x3c2>
    a53a:	2303      	movs	r3, #3
    a53c:	6861      	ldr	r1, [r4, #4]
    a53e:	4399      	bics	r1, r3
    a540:	000b      	movs	r3, r1
    a542:	1b48      	subs	r0, r1, r5
    a544:	280f      	cmp	r0, #15
    a546:	dd00      	ble.n	a54a <_malloc_r+0xb2>
    a548:	e176      	b.n	a838 <_malloc_r+0x3a0>
    a54a:	6172      	str	r2, [r6, #20]
    a54c:	6132      	str	r2, [r6, #16]
    a54e:	2800      	cmp	r0, #0
    a550:	da71      	bge.n	a636 <_malloc_r+0x19e>
    a552:	4ab1      	ldr	r2, [pc, #708]	; (a818 <_malloc_r+0x380>)
    a554:	4291      	cmp	r1, r2
    a556:	d900      	bls.n	a55a <_malloc_r+0xc2>
    a558:	e134      	b.n	a7c4 <_malloc_r+0x32c>
    a55a:	2301      	movs	r3, #1
    a55c:	08c8      	lsrs	r0, r1, #3
    a55e:	1082      	asrs	r2, r0, #2
    a560:	4093      	lsls	r3, r2
    a562:	6872      	ldr	r2, [r6, #4]
    a564:	431a      	orrs	r2, r3
    a566:	00c3      	lsls	r3, r0, #3
    a568:	199b      	adds	r3, r3, r6
    a56a:	6898      	ldr	r0, [r3, #8]
    a56c:	6072      	str	r2, [r6, #4]
    a56e:	60e3      	str	r3, [r4, #12]
    a570:	60a0      	str	r0, [r4, #8]
    a572:	609c      	str	r4, [r3, #8]
    a574:	0013      	movs	r3, r2
    a576:	60c4      	str	r4, [r0, #12]
    a578:	2001      	movs	r0, #1
    a57a:	9900      	ldr	r1, [sp, #0]
    a57c:	108a      	asrs	r2, r1, #2
    a57e:	4090      	lsls	r0, r2
    a580:	4298      	cmp	r0, r3
    a582:	d900      	bls.n	a586 <_malloc_r+0xee>
    a584:	e075      	b.n	a672 <_malloc_r+0x1da>
    a586:	4203      	tst	r3, r0
    a588:	d10c      	bne.n	a5a4 <_malloc_r+0x10c>
    a58a:	2203      	movs	r2, #3
    a58c:	4391      	bics	r1, r2
    a58e:	1d0a      	adds	r2, r1, #4
    a590:	0040      	lsls	r0, r0, #1
    a592:	9200      	str	r2, [sp, #0]
    a594:	4203      	tst	r3, r0
    a596:	d105      	bne.n	a5a4 <_malloc_r+0x10c>
    a598:	9a00      	ldr	r2, [sp, #0]
    a59a:	0040      	lsls	r0, r0, #1
    a59c:	3204      	adds	r2, #4
    a59e:	9200      	str	r2, [sp, #0]
    a5a0:	4203      	tst	r3, r0
    a5a2:	d0f9      	beq.n	a598 <_malloc_r+0x100>
    a5a4:	2303      	movs	r3, #3
    a5a6:	4698      	mov	r8, r3
    a5a8:	9a00      	ldr	r2, [sp, #0]
    a5aa:	00d3      	lsls	r3, r2, #3
    a5ac:	4699      	mov	r9, r3
    a5ae:	44b1      	add	r9, r6
    a5b0:	46cc      	mov	ip, r9
    a5b2:	4692      	mov	sl, r2
    a5b4:	4663      	mov	r3, ip
    a5b6:	68dc      	ldr	r4, [r3, #12]
    a5b8:	45a4      	cmp	ip, r4
    a5ba:	d107      	bne.n	a5cc <_malloc_r+0x134>
    a5bc:	e14f      	b.n	a85e <_malloc_r+0x3c6>
    a5be:	2a00      	cmp	r2, #0
    a5c0:	db00      	blt.n	a5c4 <_malloc_r+0x12c>
    a5c2:	e15f      	b.n	a884 <_malloc_r+0x3ec>
    a5c4:	68e4      	ldr	r4, [r4, #12]
    a5c6:	45a4      	cmp	ip, r4
    a5c8:	d100      	bne.n	a5cc <_malloc_r+0x134>
    a5ca:	e148      	b.n	a85e <_malloc_r+0x3c6>
    a5cc:	4642      	mov	r2, r8
    a5ce:	6863      	ldr	r3, [r4, #4]
    a5d0:	4393      	bics	r3, r2
    a5d2:	1b5a      	subs	r2, r3, r5
    a5d4:	2a0f      	cmp	r2, #15
    a5d6:	ddf2      	ble.n	a5be <_malloc_r+0x126>
    a5d8:	2101      	movs	r1, #1
    a5da:	1963      	adds	r3, r4, r5
    a5dc:	430d      	orrs	r5, r1
    a5de:	6065      	str	r5, [r4, #4]
    a5e0:	68e0      	ldr	r0, [r4, #12]
    a5e2:	68a5      	ldr	r5, [r4, #8]
    a5e4:	3608      	adds	r6, #8
    a5e6:	60e8      	str	r0, [r5, #12]
    a5e8:	4311      	orrs	r1, r2
    a5ea:	6085      	str	r5, [r0, #8]
    a5ec:	60f3      	str	r3, [r6, #12]
    a5ee:	60b3      	str	r3, [r6, #8]
    a5f0:	0038      	movs	r0, r7
    a5f2:	60de      	str	r6, [r3, #12]
    a5f4:	609e      	str	r6, [r3, #8]
    a5f6:	6059      	str	r1, [r3, #4]
    a5f8:	509a      	str	r2, [r3, r2]
    a5fa:	f000 fa8d 	bl	ab18 <__malloc_unlock>
    a5fe:	0020      	movs	r0, r4
    a600:	3008      	adds	r0, #8
    a602:	e022      	b.n	a64a <_malloc_r+0x1b2>
    a604:	2910      	cmp	r1, #16
    a606:	d827      	bhi.n	a658 <_malloc_r+0x1c0>
    a608:	0038      	movs	r0, r7
    a60a:	f000 fa83 	bl	ab14 <__malloc_lock>
    a60e:	2510      	movs	r5, #16
    a610:	2306      	movs	r3, #6
    a612:	2102      	movs	r1, #2
    a614:	4e7f      	ldr	r6, [pc, #508]	; (a814 <_malloc_r+0x37c>)
    a616:	009b      	lsls	r3, r3, #2
    a618:	18f3      	adds	r3, r6, r3
    a61a:	001a      	movs	r2, r3
    a61c:	685c      	ldr	r4, [r3, #4]
    a61e:	3a08      	subs	r2, #8
    a620:	4294      	cmp	r4, r2
    a622:	d100      	bne.n	a626 <_malloc_r+0x18e>
    a624:	e127      	b.n	a876 <_malloc_r+0x3de>
    a626:	2303      	movs	r3, #3
    a628:	6862      	ldr	r2, [r4, #4]
    a62a:	439a      	bics	r2, r3
    a62c:	0013      	movs	r3, r2
    a62e:	68e2      	ldr	r2, [r4, #12]
    a630:	68a1      	ldr	r1, [r4, #8]
    a632:	60ca      	str	r2, [r1, #12]
    a634:	6091      	str	r1, [r2, #8]
    a636:	2201      	movs	r2, #1
    a638:	18e3      	adds	r3, r4, r3
    a63a:	6859      	ldr	r1, [r3, #4]
    a63c:	0038      	movs	r0, r7
    a63e:	430a      	orrs	r2, r1
    a640:	605a      	str	r2, [r3, #4]
    a642:	f000 fa69 	bl	ab18 <__malloc_unlock>
    a646:	0020      	movs	r0, r4
    a648:	3008      	adds	r0, #8
    a64a:	b003      	add	sp, #12
    a64c:	bc3c      	pop	{r2, r3, r4, r5}
    a64e:	4690      	mov	r8, r2
    a650:	4699      	mov	r9, r3
    a652:	46a2      	mov	sl, r4
    a654:	46ab      	mov	fp, r5
    a656:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a658:	230c      	movs	r3, #12
    a65a:	2000      	movs	r0, #0
    a65c:	603b      	str	r3, [r7, #0]
    a65e:	e7f4      	b.n	a64a <_malloc_r+0x1b2>
    a660:	2340      	movs	r3, #64	; 0x40
    a662:	4698      	mov	r8, r3
    a664:	3b01      	subs	r3, #1
    a666:	2180      	movs	r1, #128	; 0x80
    a668:	469c      	mov	ip, r3
    a66a:	e73f      	b.n	a4ec <_malloc_r+0x54>
    a66c:	4663      	mov	r3, ip
    a66e:	9300      	str	r3, [sp, #0]
    a670:	e75d      	b.n	a52e <_malloc_r+0x96>
    a672:	2303      	movs	r3, #3
    a674:	68b4      	ldr	r4, [r6, #8]
    a676:	6862      	ldr	r2, [r4, #4]
    a678:	439a      	bics	r2, r3
    a67a:	4690      	mov	r8, r2
    a67c:	42aa      	cmp	r2, r5
    a67e:	d303      	bcc.n	a688 <_malloc_r+0x1f0>
    a680:	1b52      	subs	r2, r2, r5
    a682:	2a0f      	cmp	r2, #15
    a684:	dd00      	ble.n	a688 <_malloc_r+0x1f0>
    a686:	e087      	b.n	a798 <_malloc_r+0x300>
    a688:	0023      	movs	r3, r4
    a68a:	4443      	add	r3, r8
    a68c:	4a63      	ldr	r2, [pc, #396]	; (a81c <_malloc_r+0x384>)
    a68e:	9301      	str	r3, [sp, #4]
    a690:	4b63      	ldr	r3, [pc, #396]	; (a820 <_malloc_r+0x388>)
    a692:	4693      	mov	fp, r2
    a694:	681b      	ldr	r3, [r3, #0]
    a696:	6812      	ldr	r2, [r2, #0]
    a698:	18eb      	adds	r3, r5, r3
    a69a:	3201      	adds	r2, #1
    a69c:	d100      	bne.n	a6a0 <_malloc_r+0x208>
    a69e:	e157      	b.n	a950 <_malloc_r+0x4b8>
    a6a0:	4a60      	ldr	r2, [pc, #384]	; (a824 <_malloc_r+0x38c>)
    a6a2:	4694      	mov	ip, r2
    a6a4:	4463      	add	r3, ip
    a6a6:	0b1b      	lsrs	r3, r3, #12
    a6a8:	031b      	lsls	r3, r3, #12
    a6aa:	9300      	str	r3, [sp, #0]
    a6ac:	9900      	ldr	r1, [sp, #0]
    a6ae:	0038      	movs	r0, r7
    a6b0:	f000 ff8a 	bl	b5c8 <_sbrk_r>
    a6b4:	0003      	movs	r3, r0
    a6b6:	4681      	mov	r9, r0
    a6b8:	3301      	adds	r3, #1
    a6ba:	d061      	beq.n	a780 <_malloc_r+0x2e8>
    a6bc:	9b01      	ldr	r3, [sp, #4]
    a6be:	4283      	cmp	r3, r0
    a6c0:	d900      	bls.n	a6c4 <_malloc_r+0x22c>
    a6c2:	e0fd      	b.n	a8c0 <_malloc_r+0x428>
    a6c4:	4b58      	ldr	r3, [pc, #352]	; (a828 <_malloc_r+0x390>)
    a6c6:	9a00      	ldr	r2, [sp, #0]
    a6c8:	469a      	mov	sl, r3
    a6ca:	681b      	ldr	r3, [r3, #0]
    a6cc:	469c      	mov	ip, r3
    a6ce:	4653      	mov	r3, sl
    a6d0:	4462      	add	r2, ip
    a6d2:	601a      	str	r2, [r3, #0]
    a6d4:	9b01      	ldr	r3, [sp, #4]
    a6d6:	0011      	movs	r1, r2
    a6d8:	454b      	cmp	r3, r9
    a6da:	d100      	bne.n	a6de <_malloc_r+0x246>
    a6dc:	e143      	b.n	a966 <_malloc_r+0x4ce>
    a6de:	465b      	mov	r3, fp
    a6e0:	681b      	ldr	r3, [r3, #0]
    a6e2:	3301      	adds	r3, #1
    a6e4:	d100      	bne.n	a6e8 <_malloc_r+0x250>
    a6e6:	e14f      	b.n	a988 <_malloc_r+0x4f0>
    a6e8:	464b      	mov	r3, r9
    a6ea:	9a01      	ldr	r2, [sp, #4]
    a6ec:	1a9b      	subs	r3, r3, r2
    a6ee:	1859      	adds	r1, r3, r1
    a6f0:	4653      	mov	r3, sl
    a6f2:	6019      	str	r1, [r3, #0]
    a6f4:	2307      	movs	r3, #7
    a6f6:	464a      	mov	r2, r9
    a6f8:	4013      	ands	r3, r2
    a6fa:	d100      	bne.n	a6fe <_malloc_r+0x266>
    a6fc:	e117      	b.n	a92e <_malloc_r+0x496>
    a6fe:	2108      	movs	r1, #8
    a700:	4689      	mov	r9, r1
    a702:	494a      	ldr	r1, [pc, #296]	; (a82c <_malloc_r+0x394>)
    a704:	1ad2      	subs	r2, r2, r3
    a706:	4491      	add	r9, r2
    a708:	1ac9      	subs	r1, r1, r3
    a70a:	9b00      	ldr	r3, [sp, #0]
    a70c:	0038      	movs	r0, r7
    a70e:	444b      	add	r3, r9
    a710:	051b      	lsls	r3, r3, #20
    a712:	0d1b      	lsrs	r3, r3, #20
    a714:	1acb      	subs	r3, r1, r3
    a716:	0019      	movs	r1, r3
    a718:	469b      	mov	fp, r3
    a71a:	f000 ff55 	bl	b5c8 <_sbrk_r>
    a71e:	1c43      	adds	r3, r0, #1
    a720:	d100      	bne.n	a724 <_malloc_r+0x28c>
    a722:	e135      	b.n	a990 <_malloc_r+0x4f8>
    a724:	464b      	mov	r3, r9
    a726:	1ac0      	subs	r0, r0, r3
    a728:	2301      	movs	r3, #1
    a72a:	4458      	add	r0, fp
    a72c:	4318      	orrs	r0, r3
    a72e:	4653      	mov	r3, sl
    a730:	681b      	ldr	r3, [r3, #0]
    a732:	445b      	add	r3, fp
    a734:	0019      	movs	r1, r3
    a736:	4653      	mov	r3, sl
    a738:	6019      	str	r1, [r3, #0]
    a73a:	464b      	mov	r3, r9
    a73c:	60b3      	str	r3, [r6, #8]
    a73e:	6058      	str	r0, [r3, #4]
    a740:	42b4      	cmp	r4, r6
    a742:	d013      	beq.n	a76c <_malloc_r+0x2d4>
    a744:	4643      	mov	r3, r8
    a746:	2b0f      	cmp	r3, #15
    a748:	d800      	bhi.n	a74c <_malloc_r+0x2b4>
    a74a:	e0e1      	b.n	a910 <_malloc_r+0x478>
    a74c:	4643      	mov	r3, r8
    a74e:	2207      	movs	r2, #7
    a750:	6860      	ldr	r0, [r4, #4]
    a752:	3b0c      	subs	r3, #12
    a754:	4393      	bics	r3, r2
    a756:	3a06      	subs	r2, #6
    a758:	4002      	ands	r2, r0
    a75a:	2005      	movs	r0, #5
    a75c:	431a      	orrs	r2, r3
    a75e:	6062      	str	r2, [r4, #4]
    a760:	18e2      	adds	r2, r4, r3
    a762:	6050      	str	r0, [r2, #4]
    a764:	6090      	str	r0, [r2, #8]
    a766:	2b0f      	cmp	r3, #15
    a768:	d900      	bls.n	a76c <_malloc_r+0x2d4>
    a76a:	e115      	b.n	a998 <_malloc_r+0x500>
    a76c:	4b30      	ldr	r3, [pc, #192]	; (a830 <_malloc_r+0x398>)
    a76e:	681a      	ldr	r2, [r3, #0]
    a770:	4291      	cmp	r1, r2
    a772:	d900      	bls.n	a776 <_malloc_r+0x2de>
    a774:	6019      	str	r1, [r3, #0]
    a776:	4b2f      	ldr	r3, [pc, #188]	; (a834 <_malloc_r+0x39c>)
    a778:	681a      	ldr	r2, [r3, #0]
    a77a:	4291      	cmp	r1, r2
    a77c:	d900      	bls.n	a780 <_malloc_r+0x2e8>
    a77e:	6019      	str	r1, [r3, #0]
    a780:	2303      	movs	r3, #3
    a782:	68b4      	ldr	r4, [r6, #8]
    a784:	6862      	ldr	r2, [r4, #4]
    a786:	439a      	bics	r2, r3
    a788:	0013      	movs	r3, r2
    a78a:	1b52      	subs	r2, r2, r5
    a78c:	429d      	cmp	r5, r3
    a78e:	d900      	bls.n	a792 <_malloc_r+0x2fa>
    a790:	e0c1      	b.n	a916 <_malloc_r+0x47e>
    a792:	2a0f      	cmp	r2, #15
    a794:	dc00      	bgt.n	a798 <_malloc_r+0x300>
    a796:	e0be      	b.n	a916 <_malloc_r+0x47e>
    a798:	2301      	movs	r3, #1
    a79a:	0029      	movs	r1, r5
    a79c:	1965      	adds	r5, r4, r5
    a79e:	4319      	orrs	r1, r3
    a7a0:	4313      	orrs	r3, r2
    a7a2:	6061      	str	r1, [r4, #4]
    a7a4:	0038      	movs	r0, r7
    a7a6:	60b5      	str	r5, [r6, #8]
    a7a8:	606b      	str	r3, [r5, #4]
    a7aa:	f000 f9b5 	bl	ab18 <__malloc_unlock>
    a7ae:	0020      	movs	r0, r4
    a7b0:	3008      	adds	r0, #8
    a7b2:	e74a      	b.n	a64a <_malloc_r+0x1b2>
    a7b4:	2b14      	cmp	r3, #20
    a7b6:	d974      	bls.n	a8a2 <_malloc_r+0x40a>
    a7b8:	2b54      	cmp	r3, #84	; 0x54
    a7ba:	d900      	bls.n	a7be <_malloc_r+0x326>
    a7bc:	e0b0      	b.n	a920 <_malloc_r+0x488>
    a7be:	0b29      	lsrs	r1, r5, #12
    a7c0:	236e      	movs	r3, #110	; 0x6e
    a7c2:	e68c      	b.n	a4de <_malloc_r+0x46>
    a7c4:	0a4a      	lsrs	r2, r1, #9
    a7c6:	2a04      	cmp	r2, #4
    a7c8:	d974      	bls.n	a8b4 <_malloc_r+0x41c>
    a7ca:	2a14      	cmp	r2, #20
    a7cc:	d900      	bls.n	a7d0 <_malloc_r+0x338>
    a7ce:	e0c2      	b.n	a956 <_malloc_r+0x4be>
    a7d0:	0010      	movs	r0, r2
    a7d2:	325c      	adds	r2, #92	; 0x5c
    a7d4:	305b      	adds	r0, #91	; 0x5b
    a7d6:	0052      	lsls	r2, r2, #1
    a7d8:	2108      	movs	r1, #8
    a7da:	4249      	negs	r1, r1
    a7dc:	468c      	mov	ip, r1
    a7de:	0092      	lsls	r2, r2, #2
    a7e0:	18b2      	adds	r2, r6, r2
    a7e2:	4494      	add	ip, r2
    a7e4:	4662      	mov	r2, ip
    a7e6:	6892      	ldr	r2, [r2, #8]
    a7e8:	310b      	adds	r1, #11
    a7ea:	4688      	mov	r8, r1
    a7ec:	4594      	cmp	ip, r2
    a7ee:	d100      	bne.n	a7f2 <_malloc_r+0x35a>
    a7f0:	e0a0      	b.n	a934 <_malloc_r+0x49c>
    a7f2:	4641      	mov	r1, r8
    a7f4:	6850      	ldr	r0, [r2, #4]
    a7f6:	4388      	bics	r0, r1
    a7f8:	4283      	cmp	r3, r0
    a7fa:	d202      	bcs.n	a802 <_malloc_r+0x36a>
    a7fc:	6892      	ldr	r2, [r2, #8]
    a7fe:	4594      	cmp	ip, r2
    a800:	d1f7      	bne.n	a7f2 <_malloc_r+0x35a>
    a802:	68d3      	ldr	r3, [r2, #12]
    a804:	469c      	mov	ip, r3
    a806:	6873      	ldr	r3, [r6, #4]
    a808:	4661      	mov	r1, ip
    a80a:	60a2      	str	r2, [r4, #8]
    a80c:	60e1      	str	r1, [r4, #12]
    a80e:	608c      	str	r4, [r1, #8]
    a810:	60d4      	str	r4, [r2, #12]
    a812:	e6b1      	b.n	a578 <_malloc_r+0xe0>
    a814:	20000498 	.word	0x20000498
    a818:	000001ff 	.word	0x000001ff
    a81c:	200008a4 	.word	0x200008a4
    a820:	20000d9c 	.word	0x20000d9c
    a824:	0000100f 	.word	0x0000100f
    a828:	20000da0 	.word	0x20000da0
    a82c:	00001008 	.word	0x00001008
    a830:	20000d98 	.word	0x20000d98
    a834:	20000d94 	.word	0x20000d94
    a838:	2101      	movs	r1, #1
    a83a:	1963      	adds	r3, r4, r5
    a83c:	430d      	orrs	r5, r1
    a83e:	4301      	orrs	r1, r0
    a840:	6065      	str	r5, [r4, #4]
    a842:	6173      	str	r3, [r6, #20]
    a844:	6133      	str	r3, [r6, #16]
    a846:	60da      	str	r2, [r3, #12]
    a848:	609a      	str	r2, [r3, #8]
    a84a:	6059      	str	r1, [r3, #4]
    a84c:	5018      	str	r0, [r3, r0]
    a84e:	0038      	movs	r0, r7
    a850:	f000 f962 	bl	ab18 <__malloc_unlock>
    a854:	0020      	movs	r0, r4
    a856:	3008      	adds	r0, #8
    a858:	e6f7      	b.n	a64a <_malloc_r+0x1b2>
    a85a:	6873      	ldr	r3, [r6, #4]
    a85c:	e68c      	b.n	a578 <_malloc_r+0xe0>
    a85e:	2308      	movs	r3, #8
    a860:	469b      	mov	fp, r3
    a862:	3b07      	subs	r3, #7
    a864:	44dc      	add	ip, fp
    a866:	469b      	mov	fp, r3
    a868:	44da      	add	sl, fp
    a86a:	4643      	mov	r3, r8
    a86c:	4652      	mov	r2, sl
    a86e:	4213      	tst	r3, r2
    a870:	d000      	beq.n	a874 <_malloc_r+0x3dc>
    a872:	e69f      	b.n	a5b4 <_malloc_r+0x11c>
    a874:	e033      	b.n	a8de <_malloc_r+0x446>
    a876:	68dc      	ldr	r4, [r3, #12]
    a878:	1c8a      	adds	r2, r1, #2
    a87a:	9200      	str	r2, [sp, #0]
    a87c:	42a3      	cmp	r3, r4
    a87e:	d100      	bne.n	a882 <_malloc_r+0x3ea>
    a880:	e655      	b.n	a52e <_malloc_r+0x96>
    a882:	e6d0      	b.n	a626 <_malloc_r+0x18e>
    a884:	2201      	movs	r2, #1
    a886:	18e3      	adds	r3, r4, r3
    a888:	6859      	ldr	r1, [r3, #4]
    a88a:	0038      	movs	r0, r7
    a88c:	430a      	orrs	r2, r1
    a88e:	605a      	str	r2, [r3, #4]
    a890:	68e3      	ldr	r3, [r4, #12]
    a892:	68a2      	ldr	r2, [r4, #8]
    a894:	60d3      	str	r3, [r2, #12]
    a896:	609a      	str	r2, [r3, #8]
    a898:	f000 f93e 	bl	ab18 <__malloc_unlock>
    a89c:	0020      	movs	r0, r4
    a89e:	3008      	adds	r0, #8
    a8a0:	e6d3      	b.n	a64a <_malloc_r+0x1b2>
    a8a2:	225b      	movs	r2, #91	; 0x5b
    a8a4:	4694      	mov	ip, r2
    a8a6:	3201      	adds	r2, #1
    a8a8:	4690      	mov	r8, r2
    a8aa:	4498      	add	r8, r3
    a8ac:	449c      	add	ip, r3
    a8ae:	4643      	mov	r3, r8
    a8b0:	0059      	lsls	r1, r3, #1
    a8b2:	e61b      	b.n	a4ec <_malloc_r+0x54>
    a8b4:	098a      	lsrs	r2, r1, #6
    a8b6:	0010      	movs	r0, r2
    a8b8:	3239      	adds	r2, #57	; 0x39
    a8ba:	3038      	adds	r0, #56	; 0x38
    a8bc:	0052      	lsls	r2, r2, #1
    a8be:	e78b      	b.n	a7d8 <_malloc_r+0x340>
    a8c0:	42b4      	cmp	r4, r6
    a8c2:	d000      	beq.n	a8c6 <_malloc_r+0x42e>
    a8c4:	e75c      	b.n	a780 <_malloc_r+0x2e8>
    a8c6:	e6fd      	b.n	a6c4 <_malloc_r+0x22c>
    a8c8:	9b00      	ldr	r3, [sp, #0]
    a8ca:	3b01      	subs	r3, #1
    a8cc:	9300      	str	r3, [sp, #0]
    a8ce:	2308      	movs	r3, #8
    a8d0:	425b      	negs	r3, r3
    a8d2:	469c      	mov	ip, r3
    a8d4:	44e1      	add	r9, ip
    a8d6:	464b      	mov	r3, r9
    a8d8:	689b      	ldr	r3, [r3, #8]
    a8da:	4599      	cmp	r9, r3
    a8dc:	d17a      	bne.n	a9d4 <_malloc_r+0x53c>
    a8de:	4643      	mov	r3, r8
    a8e0:	9a00      	ldr	r2, [sp, #0]
    a8e2:	4213      	tst	r3, r2
    a8e4:	d1f0      	bne.n	a8c8 <_malloc_r+0x430>
    a8e6:	6873      	ldr	r3, [r6, #4]
    a8e8:	4383      	bics	r3, r0
    a8ea:	6073      	str	r3, [r6, #4]
    a8ec:	0040      	lsls	r0, r0, #1
    a8ee:	4298      	cmp	r0, r3
    a8f0:	d900      	bls.n	a8f4 <_malloc_r+0x45c>
    a8f2:	e6be      	b.n	a672 <_malloc_r+0x1da>
    a8f4:	2800      	cmp	r0, #0
    a8f6:	d100      	bne.n	a8fa <_malloc_r+0x462>
    a8f8:	e6bb      	b.n	a672 <_malloc_r+0x1da>
    a8fa:	4203      	tst	r3, r0
    a8fc:	d170      	bne.n	a9e0 <_malloc_r+0x548>
    a8fe:	4652      	mov	r2, sl
    a900:	9200      	str	r2, [sp, #0]
    a902:	9a00      	ldr	r2, [sp, #0]
    a904:	0040      	lsls	r0, r0, #1
    a906:	3204      	adds	r2, #4
    a908:	9200      	str	r2, [sp, #0]
    a90a:	4203      	tst	r3, r0
    a90c:	d0f9      	beq.n	a902 <_malloc_r+0x46a>
    a90e:	e64b      	b.n	a5a8 <_malloc_r+0x110>
    a910:	2301      	movs	r3, #1
    a912:	464a      	mov	r2, r9
    a914:	6053      	str	r3, [r2, #4]
    a916:	0038      	movs	r0, r7
    a918:	f000 f8fe 	bl	ab18 <__malloc_unlock>
    a91c:	2000      	movs	r0, #0
    a91e:	e694      	b.n	a64a <_malloc_r+0x1b2>
    a920:	22aa      	movs	r2, #170	; 0xaa
    a922:	0052      	lsls	r2, r2, #1
    a924:	4293      	cmp	r3, r2
    a926:	d80d      	bhi.n	a944 <_malloc_r+0x4ac>
    a928:	0be9      	lsrs	r1, r5, #15
    a92a:	2377      	movs	r3, #119	; 0x77
    a92c:	e5d7      	b.n	a4de <_malloc_r+0x46>
    a92e:	2180      	movs	r1, #128	; 0x80
    a930:	0149      	lsls	r1, r1, #5
    a932:	e6ea      	b.n	a70a <_malloc_r+0x272>
    a934:	2301      	movs	r3, #1
    a936:	1080      	asrs	r0, r0, #2
    a938:	4083      	lsls	r3, r0
    a93a:	6872      	ldr	r2, [r6, #4]
    a93c:	4313      	orrs	r3, r2
    a93e:	6073      	str	r3, [r6, #4]
    a940:	4662      	mov	r2, ip
    a942:	e761      	b.n	a808 <_malloc_r+0x370>
    a944:	4a28      	ldr	r2, [pc, #160]	; (a9e8 <_malloc_r+0x550>)
    a946:	4293      	cmp	r3, r2
    a948:	d818      	bhi.n	a97c <_malloc_r+0x4e4>
    a94a:	0ca9      	lsrs	r1, r5, #18
    a94c:	237c      	movs	r3, #124	; 0x7c
    a94e:	e5c6      	b.n	a4de <_malloc_r+0x46>
    a950:	3310      	adds	r3, #16
    a952:	9300      	str	r3, [sp, #0]
    a954:	e6aa      	b.n	a6ac <_malloc_r+0x214>
    a956:	2a54      	cmp	r2, #84	; 0x54
    a958:	d826      	bhi.n	a9a8 <_malloc_r+0x510>
    a95a:	0b0a      	lsrs	r2, r1, #12
    a95c:	0010      	movs	r0, r2
    a95e:	326f      	adds	r2, #111	; 0x6f
    a960:	306e      	adds	r0, #110	; 0x6e
    a962:	0052      	lsls	r2, r2, #1
    a964:	e738      	b.n	a7d8 <_malloc_r+0x340>
    a966:	051b      	lsls	r3, r3, #20
    a968:	d000      	beq.n	a96c <_malloc_r+0x4d4>
    a96a:	e6b8      	b.n	a6de <_malloc_r+0x246>
    a96c:	9b00      	ldr	r3, [sp, #0]
    a96e:	68b2      	ldr	r2, [r6, #8]
    a970:	4443      	add	r3, r8
    a972:	0018      	movs	r0, r3
    a974:	2301      	movs	r3, #1
    a976:	4303      	orrs	r3, r0
    a978:	6053      	str	r3, [r2, #4]
    a97a:	e6f7      	b.n	a76c <_malloc_r+0x2d4>
    a97c:	237f      	movs	r3, #127	; 0x7f
    a97e:	4698      	mov	r8, r3
    a980:	3b01      	subs	r3, #1
    a982:	21fe      	movs	r1, #254	; 0xfe
    a984:	469c      	mov	ip, r3
    a986:	e5b1      	b.n	a4ec <_malloc_r+0x54>
    a988:	465b      	mov	r3, fp
    a98a:	464a      	mov	r2, r9
    a98c:	601a      	str	r2, [r3, #0]
    a98e:	e6b1      	b.n	a6f4 <_malloc_r+0x25c>
    a990:	2300      	movs	r3, #0
    a992:	2001      	movs	r0, #1
    a994:	469b      	mov	fp, r3
    a996:	e6ca      	b.n	a72e <_malloc_r+0x296>
    a998:	0021      	movs	r1, r4
    a99a:	0038      	movs	r0, r7
    a99c:	3108      	adds	r1, #8
    a99e:	f7ff fa59 	bl	9e54 <_free_r>
    a9a2:	4653      	mov	r3, sl
    a9a4:	6819      	ldr	r1, [r3, #0]
    a9a6:	e6e1      	b.n	a76c <_malloc_r+0x2d4>
    a9a8:	20aa      	movs	r0, #170	; 0xaa
    a9aa:	0040      	lsls	r0, r0, #1
    a9ac:	4282      	cmp	r2, r0
    a9ae:	d805      	bhi.n	a9bc <_malloc_r+0x524>
    a9b0:	0bca      	lsrs	r2, r1, #15
    a9b2:	0010      	movs	r0, r2
    a9b4:	3278      	adds	r2, #120	; 0x78
    a9b6:	3077      	adds	r0, #119	; 0x77
    a9b8:	0052      	lsls	r2, r2, #1
    a9ba:	e70d      	b.n	a7d8 <_malloc_r+0x340>
    a9bc:	480a      	ldr	r0, [pc, #40]	; (a9e8 <_malloc_r+0x550>)
    a9be:	4282      	cmp	r2, r0
    a9c0:	d805      	bhi.n	a9ce <_malloc_r+0x536>
    a9c2:	0c8a      	lsrs	r2, r1, #18
    a9c4:	0010      	movs	r0, r2
    a9c6:	327d      	adds	r2, #125	; 0x7d
    a9c8:	307c      	adds	r0, #124	; 0x7c
    a9ca:	0052      	lsls	r2, r2, #1
    a9cc:	e704      	b.n	a7d8 <_malloc_r+0x340>
    a9ce:	22fe      	movs	r2, #254	; 0xfe
    a9d0:	207e      	movs	r0, #126	; 0x7e
    a9d2:	e701      	b.n	a7d8 <_malloc_r+0x340>
    a9d4:	6873      	ldr	r3, [r6, #4]
    a9d6:	e789      	b.n	a8ec <_malloc_r+0x454>
    a9d8:	08e9      	lsrs	r1, r5, #3
    a9da:	1c4b      	adds	r3, r1, #1
    a9dc:	005b      	lsls	r3, r3, #1
    a9de:	e619      	b.n	a614 <_malloc_r+0x17c>
    a9e0:	4653      	mov	r3, sl
    a9e2:	9300      	str	r3, [sp, #0]
    a9e4:	e5e0      	b.n	a5a8 <_malloc_r+0x110>
    a9e6:	46c0      	nop			; (mov r8, r8)
    a9e8:	00000554 	.word	0x00000554

0000a9ec <memchr>:
    a9ec:	b570      	push	{r4, r5, r6, lr}
    a9ee:	b2cd      	uxtb	r5, r1
    a9f0:	0783      	lsls	r3, r0, #30
    a9f2:	d03c      	beq.n	aa6e <memchr+0x82>
    a9f4:	1e53      	subs	r3, r2, #1
    a9f6:	2a00      	cmp	r2, #0
    a9f8:	d01f      	beq.n	aa3a <memchr+0x4e>
    a9fa:	7802      	ldrb	r2, [r0, #0]
    a9fc:	42aa      	cmp	r2, r5
    a9fe:	d01d      	beq.n	aa3c <memchr+0x50>
    aa00:	2403      	movs	r4, #3
    aa02:	e005      	b.n	aa10 <memchr+0x24>
    aa04:	2b00      	cmp	r3, #0
    aa06:	d018      	beq.n	aa3a <memchr+0x4e>
    aa08:	7802      	ldrb	r2, [r0, #0]
    aa0a:	3b01      	subs	r3, #1
    aa0c:	42aa      	cmp	r2, r5
    aa0e:	d015      	beq.n	aa3c <memchr+0x50>
    aa10:	3001      	adds	r0, #1
    aa12:	4220      	tst	r0, r4
    aa14:	d1f6      	bne.n	aa04 <memchr+0x18>
    aa16:	2b03      	cmp	r3, #3
    aa18:	d811      	bhi.n	aa3e <memchr+0x52>
    aa1a:	2b00      	cmp	r3, #0
    aa1c:	d00d      	beq.n	aa3a <memchr+0x4e>
    aa1e:	7802      	ldrb	r2, [r0, #0]
    aa20:	42aa      	cmp	r2, r5
    aa22:	d00b      	beq.n	aa3c <memchr+0x50>
    aa24:	1c42      	adds	r2, r0, #1
    aa26:	18c0      	adds	r0, r0, r3
    aa28:	e004      	b.n	aa34 <memchr+0x48>
    aa2a:	3201      	adds	r2, #1
    aa2c:	1e51      	subs	r1, r2, #1
    aa2e:	7809      	ldrb	r1, [r1, #0]
    aa30:	42a9      	cmp	r1, r5
    aa32:	d01a      	beq.n	aa6a <memchr+0x7e>
    aa34:	0013      	movs	r3, r2
    aa36:	4290      	cmp	r0, r2
    aa38:	d1f7      	bne.n	aa2a <memchr+0x3e>
    aa3a:	2000      	movs	r0, #0
    aa3c:	bd70      	pop	{r4, r5, r6, pc}
    aa3e:	22ff      	movs	r2, #255	; 0xff
    aa40:	020c      	lsls	r4, r1, #8
    aa42:	0212      	lsls	r2, r2, #8
    aa44:	4022      	ands	r2, r4
    aa46:	24ff      	movs	r4, #255	; 0xff
    aa48:	4021      	ands	r1, r4
    aa4a:	4311      	orrs	r1, r2
    aa4c:	040c      	lsls	r4, r1, #16
    aa4e:	4e09      	ldr	r6, [pc, #36]	; (aa74 <memchr+0x88>)
    aa50:	430c      	orrs	r4, r1
    aa52:	6802      	ldr	r2, [r0, #0]
    aa54:	4908      	ldr	r1, [pc, #32]	; (aa78 <memchr+0x8c>)
    aa56:	4062      	eors	r2, r4
    aa58:	1851      	adds	r1, r2, r1
    aa5a:	4391      	bics	r1, r2
    aa5c:	4231      	tst	r1, r6
    aa5e:	d1de      	bne.n	aa1e <memchr+0x32>
    aa60:	3b04      	subs	r3, #4
    aa62:	3004      	adds	r0, #4
    aa64:	2b03      	cmp	r3, #3
    aa66:	d8f4      	bhi.n	aa52 <memchr+0x66>
    aa68:	e7d7      	b.n	aa1a <memchr+0x2e>
    aa6a:	0018      	movs	r0, r3
    aa6c:	e7e6      	b.n	aa3c <memchr+0x50>
    aa6e:	0013      	movs	r3, r2
    aa70:	e7d1      	b.n	aa16 <memchr+0x2a>
    aa72:	46c0      	nop			; (mov r8, r8)
    aa74:	80808080 	.word	0x80808080
    aa78:	fefefeff 	.word	0xfefefeff

0000aa7c <memmove>:
    aa7c:	b570      	push	{r4, r5, r6, lr}
    aa7e:	4288      	cmp	r0, r1
    aa80:	d90b      	bls.n	aa9a <memmove+0x1e>
    aa82:	188b      	adds	r3, r1, r2
    aa84:	4298      	cmp	r0, r3
    aa86:	d208      	bcs.n	aa9a <memmove+0x1e>
    aa88:	1a99      	subs	r1, r3, r2
    aa8a:	1e53      	subs	r3, r2, #1
    aa8c:	2a00      	cmp	r2, #0
    aa8e:	d003      	beq.n	aa98 <memmove+0x1c>
    aa90:	5cca      	ldrb	r2, [r1, r3]
    aa92:	54c2      	strb	r2, [r0, r3]
    aa94:	3b01      	subs	r3, #1
    aa96:	d2fb      	bcs.n	aa90 <memmove+0x14>
    aa98:	bd70      	pop	{r4, r5, r6, pc}
    aa9a:	2a0f      	cmp	r2, #15
    aa9c:	d809      	bhi.n	aab2 <memmove+0x36>
    aa9e:	0005      	movs	r5, r0
    aaa0:	2a00      	cmp	r2, #0
    aaa2:	d0f9      	beq.n	aa98 <memmove+0x1c>
    aaa4:	2300      	movs	r3, #0
    aaa6:	5ccc      	ldrb	r4, [r1, r3]
    aaa8:	54ec      	strb	r4, [r5, r3]
    aaaa:	3301      	adds	r3, #1
    aaac:	429a      	cmp	r2, r3
    aaae:	d1fa      	bne.n	aaa6 <memmove+0x2a>
    aab0:	e7f2      	b.n	aa98 <memmove+0x1c>
    aab2:	000c      	movs	r4, r1
    aab4:	4304      	orrs	r4, r0
    aab6:	000b      	movs	r3, r1
    aab8:	07a4      	lsls	r4, r4, #30
    aaba:	d126      	bne.n	ab0a <memmove+0x8e>
    aabc:	0015      	movs	r5, r2
    aabe:	0004      	movs	r4, r0
    aac0:	3d10      	subs	r5, #16
    aac2:	092d      	lsrs	r5, r5, #4
    aac4:	3501      	adds	r5, #1
    aac6:	012d      	lsls	r5, r5, #4
    aac8:	1949      	adds	r1, r1, r5
    aaca:	681e      	ldr	r6, [r3, #0]
    aacc:	6026      	str	r6, [r4, #0]
    aace:	685e      	ldr	r6, [r3, #4]
    aad0:	6066      	str	r6, [r4, #4]
    aad2:	689e      	ldr	r6, [r3, #8]
    aad4:	60a6      	str	r6, [r4, #8]
    aad6:	68de      	ldr	r6, [r3, #12]
    aad8:	3310      	adds	r3, #16
    aada:	60e6      	str	r6, [r4, #12]
    aadc:	3410      	adds	r4, #16
    aade:	4299      	cmp	r1, r3
    aae0:	d1f3      	bne.n	aaca <memmove+0x4e>
    aae2:	240f      	movs	r4, #15
    aae4:	1945      	adds	r5, r0, r5
    aae6:	4014      	ands	r4, r2
    aae8:	2c03      	cmp	r4, #3
    aaea:	d910      	bls.n	ab0e <memmove+0x92>
    aaec:	2300      	movs	r3, #0
    aaee:	3c04      	subs	r4, #4
    aaf0:	08a4      	lsrs	r4, r4, #2
    aaf2:	3401      	adds	r4, #1
    aaf4:	00a4      	lsls	r4, r4, #2
    aaf6:	58ce      	ldr	r6, [r1, r3]
    aaf8:	50ee      	str	r6, [r5, r3]
    aafa:	3304      	adds	r3, #4
    aafc:	429c      	cmp	r4, r3
    aafe:	d1fa      	bne.n	aaf6 <memmove+0x7a>
    ab00:	2303      	movs	r3, #3
    ab02:	192d      	adds	r5, r5, r4
    ab04:	1909      	adds	r1, r1, r4
    ab06:	401a      	ands	r2, r3
    ab08:	e7ca      	b.n	aaa0 <memmove+0x24>
    ab0a:	0005      	movs	r5, r0
    ab0c:	e7ca      	b.n	aaa4 <memmove+0x28>
    ab0e:	0022      	movs	r2, r4
    ab10:	e7c6      	b.n	aaa0 <memmove+0x24>
    ab12:	46c0      	nop			; (mov r8, r8)

0000ab14 <__malloc_lock>:
    ab14:	4770      	bx	lr
    ab16:	46c0      	nop			; (mov r8, r8)

0000ab18 <__malloc_unlock>:
    ab18:	4770      	bx	lr
    ab1a:	46c0      	nop			; (mov r8, r8)

0000ab1c <_Balloc>:
    ab1c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    ab1e:	b570      	push	{r4, r5, r6, lr}
    ab20:	0004      	movs	r4, r0
    ab22:	000d      	movs	r5, r1
    ab24:	2b00      	cmp	r3, #0
    ab26:	d00a      	beq.n	ab3e <_Balloc+0x22>
    ab28:	00aa      	lsls	r2, r5, #2
    ab2a:	189b      	adds	r3, r3, r2
    ab2c:	6818      	ldr	r0, [r3, #0]
    ab2e:	2800      	cmp	r0, #0
    ab30:	d00e      	beq.n	ab50 <_Balloc+0x34>
    ab32:	6802      	ldr	r2, [r0, #0]
    ab34:	601a      	str	r2, [r3, #0]
    ab36:	2300      	movs	r3, #0
    ab38:	6103      	str	r3, [r0, #16]
    ab3a:	60c3      	str	r3, [r0, #12]
    ab3c:	bd70      	pop	{r4, r5, r6, pc}
    ab3e:	2221      	movs	r2, #33	; 0x21
    ab40:	2104      	movs	r1, #4
    ab42:	f000 fec3 	bl	b8cc <_calloc_r>
    ab46:	64e0      	str	r0, [r4, #76]	; 0x4c
    ab48:	1e03      	subs	r3, r0, #0
    ab4a:	d1ed      	bne.n	ab28 <_Balloc+0xc>
    ab4c:	2000      	movs	r0, #0
    ab4e:	e7f5      	b.n	ab3c <_Balloc+0x20>
    ab50:	2601      	movs	r6, #1
    ab52:	40ae      	lsls	r6, r5
    ab54:	1d72      	adds	r2, r6, #5
    ab56:	0092      	lsls	r2, r2, #2
    ab58:	2101      	movs	r1, #1
    ab5a:	0020      	movs	r0, r4
    ab5c:	f000 feb6 	bl	b8cc <_calloc_r>
    ab60:	2800      	cmp	r0, #0
    ab62:	d0f3      	beq.n	ab4c <_Balloc+0x30>
    ab64:	6045      	str	r5, [r0, #4]
    ab66:	6086      	str	r6, [r0, #8]
    ab68:	e7e5      	b.n	ab36 <_Balloc+0x1a>
    ab6a:	46c0      	nop			; (mov r8, r8)

0000ab6c <_Bfree>:
    ab6c:	2900      	cmp	r1, #0
    ab6e:	d006      	beq.n	ab7e <_Bfree+0x12>
    ab70:	684b      	ldr	r3, [r1, #4]
    ab72:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    ab74:	009b      	lsls	r3, r3, #2
    ab76:	18d3      	adds	r3, r2, r3
    ab78:	681a      	ldr	r2, [r3, #0]
    ab7a:	600a      	str	r2, [r1, #0]
    ab7c:	6019      	str	r1, [r3, #0]
    ab7e:	4770      	bx	lr

0000ab80 <__multadd>:
    ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab82:	464f      	mov	r7, r9
    ab84:	4646      	mov	r6, r8
    ab86:	b4c0      	push	{r6, r7}
    ab88:	000f      	movs	r7, r1
    ab8a:	4681      	mov	r9, r0
    ab8c:	000e      	movs	r6, r1
    ab8e:	001c      	movs	r4, r3
    ab90:	2000      	movs	r0, #0
    ab92:	690d      	ldr	r5, [r1, #16]
    ab94:	3714      	adds	r7, #20
    ab96:	6839      	ldr	r1, [r7, #0]
    ab98:	3001      	adds	r0, #1
    ab9a:	040b      	lsls	r3, r1, #16
    ab9c:	0c1b      	lsrs	r3, r3, #16
    ab9e:	4353      	muls	r3, r2
    aba0:	0c09      	lsrs	r1, r1, #16
    aba2:	4351      	muls	r1, r2
    aba4:	191b      	adds	r3, r3, r4
    aba6:	0c1c      	lsrs	r4, r3, #16
    aba8:	1909      	adds	r1, r1, r4
    abaa:	041b      	lsls	r3, r3, #16
    abac:	0c0c      	lsrs	r4, r1, #16
    abae:	0c1b      	lsrs	r3, r3, #16
    abb0:	0409      	lsls	r1, r1, #16
    abb2:	18cb      	adds	r3, r1, r3
    abb4:	c708      	stmia	r7!, {r3}
    abb6:	4285      	cmp	r5, r0
    abb8:	dced      	bgt.n	ab96 <__multadd+0x16>
    abba:	2c00      	cmp	r4, #0
    abbc:	d008      	beq.n	abd0 <__multadd+0x50>
    abbe:	68b3      	ldr	r3, [r6, #8]
    abc0:	429d      	cmp	r5, r3
    abc2:	da0a      	bge.n	abda <__multadd+0x5a>
    abc4:	1d2b      	adds	r3, r5, #4
    abc6:	009b      	lsls	r3, r3, #2
    abc8:	18f3      	adds	r3, r6, r3
    abca:	3501      	adds	r5, #1
    abcc:	605c      	str	r4, [r3, #4]
    abce:	6135      	str	r5, [r6, #16]
    abd0:	0030      	movs	r0, r6
    abd2:	bc0c      	pop	{r2, r3}
    abd4:	4690      	mov	r8, r2
    abd6:	4699      	mov	r9, r3
    abd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    abda:	6873      	ldr	r3, [r6, #4]
    abdc:	4648      	mov	r0, r9
    abde:	1c59      	adds	r1, r3, #1
    abe0:	f7ff ff9c 	bl	ab1c <_Balloc>
    abe4:	0031      	movs	r1, r6
    abe6:	6933      	ldr	r3, [r6, #16]
    abe8:	4680      	mov	r8, r0
    abea:	1c9a      	adds	r2, r3, #2
    abec:	0092      	lsls	r2, r2, #2
    abee:	310c      	adds	r1, #12
    abf0:	300c      	adds	r0, #12
    abf2:	f7fc f889 	bl	6d08 <memcpy>
    abf6:	464a      	mov	r2, r9
    abf8:	6873      	ldr	r3, [r6, #4]
    abfa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    abfc:	009b      	lsls	r3, r3, #2
    abfe:	18d3      	adds	r3, r2, r3
    ac00:	681a      	ldr	r2, [r3, #0]
    ac02:	6032      	str	r2, [r6, #0]
    ac04:	601e      	str	r6, [r3, #0]
    ac06:	4646      	mov	r6, r8
    ac08:	e7dc      	b.n	abc4 <__multadd+0x44>
    ac0a:	46c0      	nop			; (mov r8, r8)

0000ac0c <__hi0bits>:
    ac0c:	0003      	movs	r3, r0
    ac0e:	0c01      	lsrs	r1, r0, #16
    ac10:	2200      	movs	r2, #0
    ac12:	2900      	cmp	r1, #0
    ac14:	d101      	bne.n	ac1a <__hi0bits+0xe>
    ac16:	0403      	lsls	r3, r0, #16
    ac18:	3210      	adds	r2, #16
    ac1a:	0e19      	lsrs	r1, r3, #24
    ac1c:	d101      	bne.n	ac22 <__hi0bits+0x16>
    ac1e:	3208      	adds	r2, #8
    ac20:	021b      	lsls	r3, r3, #8
    ac22:	0f19      	lsrs	r1, r3, #28
    ac24:	d101      	bne.n	ac2a <__hi0bits+0x1e>
    ac26:	3204      	adds	r2, #4
    ac28:	011b      	lsls	r3, r3, #4
    ac2a:	0f99      	lsrs	r1, r3, #30
    ac2c:	d101      	bne.n	ac32 <__hi0bits+0x26>
    ac2e:	3202      	adds	r2, #2
    ac30:	009b      	lsls	r3, r3, #2
    ac32:	2b00      	cmp	r3, #0
    ac34:	db05      	blt.n	ac42 <__hi0bits+0x36>
    ac36:	2020      	movs	r0, #32
    ac38:	005b      	lsls	r3, r3, #1
    ac3a:	d400      	bmi.n	ac3e <__hi0bits+0x32>
    ac3c:	4770      	bx	lr
    ac3e:	1c50      	adds	r0, r2, #1
    ac40:	e7fc      	b.n	ac3c <__hi0bits+0x30>
    ac42:	0010      	movs	r0, r2
    ac44:	e7fa      	b.n	ac3c <__hi0bits+0x30>
    ac46:	46c0      	nop			; (mov r8, r8)

0000ac48 <__lo0bits>:
    ac48:	6803      	ldr	r3, [r0, #0]
    ac4a:	0001      	movs	r1, r0
    ac4c:	075a      	lsls	r2, r3, #29
    ac4e:	d008      	beq.n	ac62 <__lo0bits+0x1a>
    ac50:	2000      	movs	r0, #0
    ac52:	07da      	lsls	r2, r3, #31
    ac54:	d404      	bmi.n	ac60 <__lo0bits+0x18>
    ac56:	079a      	lsls	r2, r3, #30
    ac58:	d420      	bmi.n	ac9c <__lo0bits+0x54>
    ac5a:	2002      	movs	r0, #2
    ac5c:	089b      	lsrs	r3, r3, #2
    ac5e:	600b      	str	r3, [r1, #0]
    ac60:	4770      	bx	lr
    ac62:	0418      	lsls	r0, r3, #16
    ac64:	2200      	movs	r2, #0
    ac66:	2800      	cmp	r0, #0
    ac68:	d101      	bne.n	ac6e <__lo0bits+0x26>
    ac6a:	0c1b      	lsrs	r3, r3, #16
    ac6c:	3210      	adds	r2, #16
    ac6e:	20ff      	movs	r0, #255	; 0xff
    ac70:	4218      	tst	r0, r3
    ac72:	d101      	bne.n	ac78 <__lo0bits+0x30>
    ac74:	3208      	adds	r2, #8
    ac76:	0a1b      	lsrs	r3, r3, #8
    ac78:	0718      	lsls	r0, r3, #28
    ac7a:	d101      	bne.n	ac80 <__lo0bits+0x38>
    ac7c:	3204      	adds	r2, #4
    ac7e:	091b      	lsrs	r3, r3, #4
    ac80:	0798      	lsls	r0, r3, #30
    ac82:	d101      	bne.n	ac88 <__lo0bits+0x40>
    ac84:	3202      	adds	r2, #2
    ac86:	089b      	lsrs	r3, r3, #2
    ac88:	07d8      	lsls	r0, r3, #31
    ac8a:	d404      	bmi.n	ac96 <__lo0bits+0x4e>
    ac8c:	085b      	lsrs	r3, r3, #1
    ac8e:	2020      	movs	r0, #32
    ac90:	2b00      	cmp	r3, #0
    ac92:	d0e5      	beq.n	ac60 <__lo0bits+0x18>
    ac94:	3201      	adds	r2, #1
    ac96:	600b      	str	r3, [r1, #0]
    ac98:	0010      	movs	r0, r2
    ac9a:	e7e1      	b.n	ac60 <__lo0bits+0x18>
    ac9c:	085b      	lsrs	r3, r3, #1
    ac9e:	600b      	str	r3, [r1, #0]
    aca0:	3001      	adds	r0, #1
    aca2:	e7dd      	b.n	ac60 <__lo0bits+0x18>

0000aca4 <__i2b>:
    aca4:	b510      	push	{r4, lr}
    aca6:	000c      	movs	r4, r1
    aca8:	2101      	movs	r1, #1
    acaa:	f7ff ff37 	bl	ab1c <_Balloc>
    acae:	2301      	movs	r3, #1
    acb0:	6144      	str	r4, [r0, #20]
    acb2:	6103      	str	r3, [r0, #16]
    acb4:	bd10      	pop	{r4, pc}
    acb6:	46c0      	nop			; (mov r8, r8)

0000acb8 <__multiply>:
    acb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    acba:	465f      	mov	r7, fp
    acbc:	4656      	mov	r6, sl
    acbe:	464d      	mov	r5, r9
    acc0:	4644      	mov	r4, r8
    acc2:	b4f0      	push	{r4, r5, r6, r7}
    acc4:	690e      	ldr	r6, [r1, #16]
    acc6:	6914      	ldr	r4, [r2, #16]
    acc8:	b085      	sub	sp, #20
    acca:	000f      	movs	r7, r1
    accc:	0015      	movs	r5, r2
    acce:	42a6      	cmp	r6, r4
    acd0:	da04      	bge.n	acdc <__multiply+0x24>
    acd2:	0033      	movs	r3, r6
    acd4:	0017      	movs	r7, r2
    acd6:	0026      	movs	r6, r4
    acd8:	000d      	movs	r5, r1
    acda:	001c      	movs	r4, r3
    acdc:	1933      	adds	r3, r6, r4
    acde:	4698      	mov	r8, r3
    ace0:	68bb      	ldr	r3, [r7, #8]
    ace2:	6879      	ldr	r1, [r7, #4]
    ace4:	4598      	cmp	r8, r3
    ace6:	dd00      	ble.n	acea <__multiply+0x32>
    ace8:	3101      	adds	r1, #1
    acea:	f7ff ff17 	bl	ab1c <_Balloc>
    acee:	2214      	movs	r2, #20
    acf0:	0003      	movs	r3, r0
    acf2:	4694      	mov	ip, r2
    acf4:	4463      	add	r3, ip
    acf6:	469b      	mov	fp, r3
    acf8:	4643      	mov	r3, r8
    acfa:	009b      	lsls	r3, r3, #2
    acfc:	445b      	add	r3, fp
    acfe:	0019      	movs	r1, r3
    ad00:	9302      	str	r3, [sp, #8]
    ad02:	9003      	str	r0, [sp, #12]
    ad04:	465b      	mov	r3, fp
    ad06:	2200      	movs	r2, #0
    ad08:	458b      	cmp	fp, r1
    ad0a:	d203      	bcs.n	ad14 <__multiply+0x5c>
    ad0c:	9902      	ldr	r1, [sp, #8]
    ad0e:	c304      	stmia	r3!, {r2}
    ad10:	4299      	cmp	r1, r3
    ad12:	d8fc      	bhi.n	ad0e <__multiply+0x56>
    ad14:	2314      	movs	r3, #20
    ad16:	00a4      	lsls	r4, r4, #2
    ad18:	469a      	mov	sl, r3
    ad1a:	3714      	adds	r7, #20
    ad1c:	0023      	movs	r3, r4
    ad1e:	46bc      	mov	ip, r7
    ad20:	44aa      	add	sl, r5
    ad22:	00b6      	lsls	r6, r6, #2
    ad24:	4453      	add	r3, sl
    ad26:	9700      	str	r7, [sp, #0]
    ad28:	44b4      	add	ip, r6
    ad2a:	9301      	str	r3, [sp, #4]
    ad2c:	459a      	cmp	sl, r3
    ad2e:	d253      	bcs.n	add8 <__multiply+0x120>
    ad30:	4653      	mov	r3, sl
    ad32:	681b      	ldr	r3, [r3, #0]
    ad34:	041e      	lsls	r6, r3, #16
    ad36:	0c36      	lsrs	r6, r6, #16
    ad38:	d021      	beq.n	ad7e <__multiply+0xc6>
    ad3a:	465c      	mov	r4, fp
    ad3c:	2700      	movs	r7, #0
    ad3e:	4661      	mov	r1, ip
    ad40:	9d00      	ldr	r5, [sp, #0]
    ad42:	cd04      	ldmia	r5!, {r2}
    ad44:	0020      	movs	r0, r4
    ad46:	0413      	lsls	r3, r2, #16
    ad48:	0c1b      	lsrs	r3, r3, #16
    ad4a:	4373      	muls	r3, r6
    ad4c:	4699      	mov	r9, r3
    ad4e:	6823      	ldr	r3, [r4, #0]
    ad50:	041b      	lsls	r3, r3, #16
    ad52:	0c1b      	lsrs	r3, r3, #16
    ad54:	444b      	add	r3, r9
    ad56:	19db      	adds	r3, r3, r7
    ad58:	0c17      	lsrs	r7, r2, #16
    ad5a:	4377      	muls	r7, r6
    ad5c:	6822      	ldr	r2, [r4, #0]
    ad5e:	0c12      	lsrs	r2, r2, #16
    ad60:	18ba      	adds	r2, r7, r2
    ad62:	0c1f      	lsrs	r7, r3, #16
    ad64:	19d2      	adds	r2, r2, r7
    ad66:	041b      	lsls	r3, r3, #16
    ad68:	0c17      	lsrs	r7, r2, #16
    ad6a:	0c1b      	lsrs	r3, r3, #16
    ad6c:	0412      	lsls	r2, r2, #16
    ad6e:	4313      	orrs	r3, r2
    ad70:	c408      	stmia	r4!, {r3}
    ad72:	42a9      	cmp	r1, r5
    ad74:	d8e5      	bhi.n	ad42 <__multiply+0x8a>
    ad76:	4653      	mov	r3, sl
    ad78:	468c      	mov	ip, r1
    ad7a:	6047      	str	r7, [r0, #4]
    ad7c:	681b      	ldr	r3, [r3, #0]
    ad7e:	0c1e      	lsrs	r6, r3, #16
    ad80:	d023      	beq.n	adca <__multiply+0x112>
    ad82:	465b      	mov	r3, fp
    ad84:	2200      	movs	r2, #0
    ad86:	681b      	ldr	r3, [r3, #0]
    ad88:	4658      	mov	r0, fp
    ad8a:	001d      	movs	r5, r3
    ad8c:	0011      	movs	r1, r2
    ad8e:	4667      	mov	r7, ip
    ad90:	9c00      	ldr	r4, [sp, #0]
    ad92:	8822      	ldrh	r2, [r4, #0]
    ad94:	0c2d      	lsrs	r5, r5, #16
    ad96:	4372      	muls	r2, r6
    ad98:	1955      	adds	r5, r2, r5
    ad9a:	186a      	adds	r2, r5, r1
    ad9c:	041b      	lsls	r3, r3, #16
    ad9e:	0411      	lsls	r1, r2, #16
    ada0:	0c1b      	lsrs	r3, r3, #16
    ada2:	430b      	orrs	r3, r1
    ada4:	6003      	str	r3, [r0, #0]
    ada6:	cc08      	ldmia	r4!, {r3}
    ada8:	6845      	ldr	r5, [r0, #4]
    adaa:	0c1b      	lsrs	r3, r3, #16
    adac:	4373      	muls	r3, r6
    adae:	0429      	lsls	r1, r5, #16
    adb0:	0c09      	lsrs	r1, r1, #16
    adb2:	1859      	adds	r1, r3, r1
    adb4:	0c13      	lsrs	r3, r2, #16
    adb6:	18cb      	adds	r3, r1, r3
    adb8:	4684      	mov	ip, r0
    adba:	0c19      	lsrs	r1, r3, #16
    adbc:	3004      	adds	r0, #4
    adbe:	42a7      	cmp	r7, r4
    adc0:	d8e7      	bhi.n	ad92 <__multiply+0xda>
    adc2:	003a      	movs	r2, r7
    adc4:	4667      	mov	r7, ip
    adc6:	4694      	mov	ip, r2
    adc8:	607b      	str	r3, [r7, #4]
    adca:	2304      	movs	r3, #4
    adcc:	4699      	mov	r9, r3
    adce:	9b01      	ldr	r3, [sp, #4]
    add0:	44ca      	add	sl, r9
    add2:	44cb      	add	fp, r9
    add4:	4553      	cmp	r3, sl
    add6:	d8ab      	bhi.n	ad30 <__multiply+0x78>
    add8:	4643      	mov	r3, r8
    adda:	2b00      	cmp	r3, #0
    addc:	dd0e      	ble.n	adfc <__multiply+0x144>
    adde:	9b02      	ldr	r3, [sp, #8]
    ade0:	3b04      	subs	r3, #4
    ade2:	681a      	ldr	r2, [r3, #0]
    ade4:	2a00      	cmp	r2, #0
    ade6:	d109      	bne.n	adfc <__multiply+0x144>
    ade8:	4642      	mov	r2, r8
    adea:	e003      	b.n	adf4 <__multiply+0x13c>
    adec:	3b04      	subs	r3, #4
    adee:	6819      	ldr	r1, [r3, #0]
    adf0:	2900      	cmp	r1, #0
    adf2:	d102      	bne.n	adfa <__multiply+0x142>
    adf4:	3a01      	subs	r2, #1
    adf6:	2a00      	cmp	r2, #0
    adf8:	d1f8      	bne.n	adec <__multiply+0x134>
    adfa:	4690      	mov	r8, r2
    adfc:	9b03      	ldr	r3, [sp, #12]
    adfe:	4642      	mov	r2, r8
    ae00:	0018      	movs	r0, r3
    ae02:	611a      	str	r2, [r3, #16]
    ae04:	b005      	add	sp, #20
    ae06:	bc3c      	pop	{r2, r3, r4, r5}
    ae08:	4690      	mov	r8, r2
    ae0a:	4699      	mov	r9, r3
    ae0c:	46a2      	mov	sl, r4
    ae0e:	46ab      	mov	fp, r5
    ae10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae12:	46c0      	nop			; (mov r8, r8)

0000ae14 <__pow5mult>:
    ae14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ae16:	4646      	mov	r6, r8
    ae18:	464f      	mov	r7, r9
    ae1a:	2303      	movs	r3, #3
    ae1c:	b4c0      	push	{r6, r7}
    ae1e:	4680      	mov	r8, r0
    ae20:	000e      	movs	r6, r1
    ae22:	0014      	movs	r4, r2
    ae24:	4013      	ands	r3, r2
    ae26:	d137      	bne.n	ae98 <__pow5mult+0x84>
    ae28:	10a4      	asrs	r4, r4, #2
    ae2a:	d024      	beq.n	ae76 <__pow5mult+0x62>
    ae2c:	4643      	mov	r3, r8
    ae2e:	6c9d      	ldr	r5, [r3, #72]	; 0x48
    ae30:	2d00      	cmp	r5, #0
    ae32:	d03a      	beq.n	aeaa <__pow5mult+0x96>
    ae34:	2300      	movs	r3, #0
    ae36:	2701      	movs	r7, #1
    ae38:	4699      	mov	r9, r3
    ae3a:	4227      	tst	r7, r4
    ae3c:	d107      	bne.n	ae4e <__pow5mult+0x3a>
    ae3e:	1064      	asrs	r4, r4, #1
    ae40:	d019      	beq.n	ae76 <__pow5mult+0x62>
    ae42:	6828      	ldr	r0, [r5, #0]
    ae44:	2800      	cmp	r0, #0
    ae46:	d01b      	beq.n	ae80 <__pow5mult+0x6c>
    ae48:	0005      	movs	r5, r0
    ae4a:	4227      	tst	r7, r4
    ae4c:	d0f7      	beq.n	ae3e <__pow5mult+0x2a>
    ae4e:	002a      	movs	r2, r5
    ae50:	0031      	movs	r1, r6
    ae52:	4640      	mov	r0, r8
    ae54:	f7ff ff30 	bl	acb8 <__multiply>
    ae58:	2e00      	cmp	r6, #0
    ae5a:	d01b      	beq.n	ae94 <__pow5mult+0x80>
    ae5c:	4642      	mov	r2, r8
    ae5e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    ae60:	6873      	ldr	r3, [r6, #4]
    ae62:	4694      	mov	ip, r2
    ae64:	009b      	lsls	r3, r3, #2
    ae66:	4463      	add	r3, ip
    ae68:	681a      	ldr	r2, [r3, #0]
    ae6a:	1064      	asrs	r4, r4, #1
    ae6c:	6032      	str	r2, [r6, #0]
    ae6e:	601e      	str	r6, [r3, #0]
    ae70:	0006      	movs	r6, r0
    ae72:	2c00      	cmp	r4, #0
    ae74:	d1e5      	bne.n	ae42 <__pow5mult+0x2e>
    ae76:	0030      	movs	r0, r6
    ae78:	bc0c      	pop	{r2, r3}
    ae7a:	4690      	mov	r8, r2
    ae7c:	4699      	mov	r9, r3
    ae7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ae80:	002a      	movs	r2, r5
    ae82:	0029      	movs	r1, r5
    ae84:	4640      	mov	r0, r8
    ae86:	f7ff ff17 	bl	acb8 <__multiply>
    ae8a:	464b      	mov	r3, r9
    ae8c:	6028      	str	r0, [r5, #0]
    ae8e:	6003      	str	r3, [r0, #0]
    ae90:	0005      	movs	r5, r0
    ae92:	e7da      	b.n	ae4a <__pow5mult+0x36>
    ae94:	0006      	movs	r6, r0
    ae96:	e7d2      	b.n	ae3e <__pow5mult+0x2a>
    ae98:	4a0b      	ldr	r2, [pc, #44]	; (aec8 <__pow5mult+0xb4>)
    ae9a:	3b01      	subs	r3, #1
    ae9c:	009b      	lsls	r3, r3, #2
    ae9e:	589a      	ldr	r2, [r3, r2]
    aea0:	2300      	movs	r3, #0
    aea2:	f7ff fe6d 	bl	ab80 <__multadd>
    aea6:	0006      	movs	r6, r0
    aea8:	e7be      	b.n	ae28 <__pow5mult+0x14>
    aeaa:	2101      	movs	r1, #1
    aeac:	4640      	mov	r0, r8
    aeae:	f7ff fe35 	bl	ab1c <_Balloc>
    aeb2:	4b06      	ldr	r3, [pc, #24]	; (aecc <__pow5mult+0xb8>)
    aeb4:	0005      	movs	r5, r0
    aeb6:	6143      	str	r3, [r0, #20]
    aeb8:	2301      	movs	r3, #1
    aeba:	6103      	str	r3, [r0, #16]
    aebc:	4643      	mov	r3, r8
    aebe:	6498      	str	r0, [r3, #72]	; 0x48
    aec0:	2300      	movs	r3, #0
    aec2:	6003      	str	r3, [r0, #0]
    aec4:	e7b6      	b.n	ae34 <__pow5mult+0x20>
    aec6:	46c0      	nop			; (mov r8, r8)
    aec8:	0000e0d8 	.word	0x0000e0d8
    aecc:	00000271 	.word	0x00000271

0000aed0 <__lshift>:
    aed0:	b5f0      	push	{r4, r5, r6, r7, lr}
    aed2:	464d      	mov	r5, r9
    aed4:	4644      	mov	r4, r8
    aed6:	465f      	mov	r7, fp
    aed8:	4656      	mov	r6, sl
    aeda:	b4f0      	push	{r4, r5, r6, r7}
    aedc:	000e      	movs	r6, r1
    aede:	6933      	ldr	r3, [r6, #16]
    aee0:	1157      	asrs	r7, r2, #5
    aee2:	4699      	mov	r9, r3
    aee4:	44b9      	add	r9, r7
    aee6:	464b      	mov	r3, r9
    aee8:	1c5d      	adds	r5, r3, #1
    aeea:	68b3      	ldr	r3, [r6, #8]
    aeec:	b083      	sub	sp, #12
    aeee:	4680      	mov	r8, r0
    aef0:	0014      	movs	r4, r2
    aef2:	6849      	ldr	r1, [r1, #4]
    aef4:	429d      	cmp	r5, r3
    aef6:	dd03      	ble.n	af00 <__lshift+0x30>
    aef8:	3101      	adds	r1, #1
    aefa:	005b      	lsls	r3, r3, #1
    aefc:	429d      	cmp	r5, r3
    aefe:	dcfb      	bgt.n	aef8 <__lshift+0x28>
    af00:	4640      	mov	r0, r8
    af02:	f7ff fe0b 	bl	ab1c <_Balloc>
    af06:	0003      	movs	r3, r0
    af08:	4682      	mov	sl, r0
    af0a:	3314      	adds	r3, #20
    af0c:	2f00      	cmp	r7, #0
    af0e:	dd06      	ble.n	af1e <__lshift+0x4e>
    af10:	00b9      	lsls	r1, r7, #2
    af12:	001a      	movs	r2, r3
    af14:	185b      	adds	r3, r3, r1
    af16:	2100      	movs	r1, #0
    af18:	c202      	stmia	r2!, {r1}
    af1a:	4293      	cmp	r3, r2
    af1c:	d1fc      	bne.n	af18 <__lshift+0x48>
    af1e:	0031      	movs	r1, r6
    af20:	201f      	movs	r0, #31
    af22:	6932      	ldr	r2, [r6, #16]
    af24:	3114      	adds	r1, #20
    af26:	0092      	lsls	r2, r2, #2
    af28:	188a      	adds	r2, r1, r2
    af2a:	4020      	ands	r0, r4
    af2c:	d026      	beq.n	af7c <__lshift+0xac>
    af2e:	2420      	movs	r4, #32
    af30:	1a24      	subs	r4, r4, r0
    af32:	46a4      	mov	ip, r4
    af34:	2400      	movs	r4, #0
    af36:	680f      	ldr	r7, [r1, #0]
    af38:	9301      	str	r3, [sp, #4]
    af3a:	4087      	lsls	r7, r0
    af3c:	433c      	orrs	r4, r7
    af3e:	4667      	mov	r7, ip
    af40:	c310      	stmia	r3!, {r4}
    af42:	c910      	ldmia	r1!, {r4}
    af44:	40fc      	lsrs	r4, r7
    af46:	428a      	cmp	r2, r1
    af48:	d8f5      	bhi.n	af36 <__lshift+0x66>
    af4a:	9b01      	ldr	r3, [sp, #4]
    af4c:	605c      	str	r4, [r3, #4]
    af4e:	2c00      	cmp	r4, #0
    af50:	d001      	beq.n	af56 <__lshift+0x86>
    af52:	464d      	mov	r5, r9
    af54:	3502      	adds	r5, #2
    af56:	4653      	mov	r3, sl
    af58:	4642      	mov	r2, r8
    af5a:	4650      	mov	r0, sl
    af5c:	3d01      	subs	r5, #1
    af5e:	611d      	str	r5, [r3, #16]
    af60:	6873      	ldr	r3, [r6, #4]
    af62:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    af64:	009b      	lsls	r3, r3, #2
    af66:	18d3      	adds	r3, r2, r3
    af68:	681a      	ldr	r2, [r3, #0]
    af6a:	6032      	str	r2, [r6, #0]
    af6c:	601e      	str	r6, [r3, #0]
    af6e:	b003      	add	sp, #12
    af70:	bc3c      	pop	{r2, r3, r4, r5}
    af72:	4690      	mov	r8, r2
    af74:	4699      	mov	r9, r3
    af76:	46a2      	mov	sl, r4
    af78:	46ab      	mov	fp, r5
    af7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    af7c:	c901      	ldmia	r1!, {r0}
    af7e:	c301      	stmia	r3!, {r0}
    af80:	428a      	cmp	r2, r1
    af82:	d9e8      	bls.n	af56 <__lshift+0x86>
    af84:	c901      	ldmia	r1!, {r0}
    af86:	c301      	stmia	r3!, {r0}
    af88:	428a      	cmp	r2, r1
    af8a:	d8f7      	bhi.n	af7c <__lshift+0xac>
    af8c:	e7e3      	b.n	af56 <__lshift+0x86>
    af8e:	46c0      	nop			; (mov r8, r8)

0000af90 <__mcmp>:
    af90:	6902      	ldr	r2, [r0, #16]
    af92:	690b      	ldr	r3, [r1, #16]
    af94:	b510      	push	{r4, lr}
    af96:	1ad2      	subs	r2, r2, r3
    af98:	0004      	movs	r4, r0
    af9a:	1e10      	subs	r0, r2, #0
    af9c:	d112      	bne.n	afc4 <__mcmp+0x34>
    af9e:	0020      	movs	r0, r4
    afa0:	009a      	lsls	r2, r3, #2
    afa2:	3014      	adds	r0, #20
    afa4:	3114      	adds	r1, #20
    afa6:	1883      	adds	r3, r0, r2
    afa8:	1889      	adds	r1, r1, r2
    afaa:	e001      	b.n	afb0 <__mcmp+0x20>
    afac:	4298      	cmp	r0, r3
    afae:	d20a      	bcs.n	afc6 <__mcmp+0x36>
    afb0:	3b04      	subs	r3, #4
    afb2:	3904      	subs	r1, #4
    afb4:	681a      	ldr	r2, [r3, #0]
    afb6:	680c      	ldr	r4, [r1, #0]
    afb8:	42a2      	cmp	r2, r4
    afba:	d0f7      	beq.n	afac <__mcmp+0x1c>
    afbc:	42a2      	cmp	r2, r4
    afbe:	4192      	sbcs	r2, r2
    afc0:	2001      	movs	r0, #1
    afc2:	4310      	orrs	r0, r2
    afc4:	bd10      	pop	{r4, pc}
    afc6:	2000      	movs	r0, #0
    afc8:	e7fc      	b.n	afc4 <__mcmp+0x34>
    afca:	46c0      	nop			; (mov r8, r8)

0000afcc <__mdiff>:
    afcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    afce:	464f      	mov	r7, r9
    afd0:	4646      	mov	r6, r8
    afd2:	0014      	movs	r4, r2
    afd4:	690b      	ldr	r3, [r1, #16]
    afd6:	6912      	ldr	r2, [r2, #16]
    afd8:	b4c0      	push	{r6, r7}
    afda:	1a9b      	subs	r3, r3, r2
    afdc:	000f      	movs	r7, r1
    afde:	2b00      	cmp	r3, #0
    afe0:	d119      	bne.n	b016 <__mdiff+0x4a>
    afe2:	000d      	movs	r5, r1
    afe4:	2114      	movs	r1, #20
    afe6:	468c      	mov	ip, r1
    afe8:	0092      	lsls	r2, r2, #2
    afea:	3514      	adds	r5, #20
    afec:	44a4      	add	ip, r4
    afee:	18ab      	adds	r3, r5, r2
    aff0:	4462      	add	r2, ip
    aff2:	e001      	b.n	aff8 <__mdiff+0x2c>
    aff4:	429d      	cmp	r5, r3
    aff6:	d266      	bcs.n	b0c6 <__mdiff+0xfa>
    aff8:	3b04      	subs	r3, #4
    affa:	3a04      	subs	r2, #4
    affc:	681e      	ldr	r6, [r3, #0]
    affe:	6811      	ldr	r1, [r2, #0]
    b000:	428e      	cmp	r6, r1
    b002:	d0f7      	beq.n	aff4 <__mdiff+0x28>
    b004:	d267      	bcs.n	b0d6 <__mdiff+0x10a>
    b006:	002e      	movs	r6, r5
    b008:	4665      	mov	r5, ip
    b00a:	003b      	movs	r3, r7
    b00c:	0027      	movs	r7, r4
    b00e:	001c      	movs	r4, r3
    b010:	2301      	movs	r3, #1
    b012:	4699      	mov	r9, r3
    b014:	e007      	b.n	b026 <__mdiff+0x5a>
    b016:	2b00      	cmp	r3, #0
    b018:	db61      	blt.n	b0de <__mdiff+0x112>
    b01a:	2300      	movs	r3, #0
    b01c:	0026      	movs	r6, r4
    b01e:	000d      	movs	r5, r1
    b020:	4699      	mov	r9, r3
    b022:	3614      	adds	r6, #20
    b024:	3514      	adds	r5, #20
    b026:	6879      	ldr	r1, [r7, #4]
    b028:	f7ff fd78 	bl	ab1c <_Balloc>
    b02c:	464a      	mov	r2, r9
    b02e:	4680      	mov	r8, r0
    b030:	6921      	ldr	r1, [r4, #16]
    b032:	60c2      	str	r2, [r0, #12]
    b034:	6938      	ldr	r0, [r7, #16]
    b036:	0089      	lsls	r1, r1, #2
    b038:	0083      	lsls	r3, r0, #2
    b03a:	469c      	mov	ip, r3
    b03c:	4689      	mov	r9, r1
    b03e:	4647      	mov	r7, r8
    b040:	2400      	movs	r4, #0
    b042:	44ac      	add	ip, r5
    b044:	44b1      	add	r9, r6
    b046:	3714      	adds	r7, #20
    b048:	cd08      	ldmia	r5!, {r3}
    b04a:	ce02      	ldmia	r6!, {r1}
    b04c:	041a      	lsls	r2, r3, #16
    b04e:	0c12      	lsrs	r2, r2, #16
    b050:	1914      	adds	r4, r2, r4
    b052:	040a      	lsls	r2, r1, #16
    b054:	0c12      	lsrs	r2, r2, #16
    b056:	1aa2      	subs	r2, r4, r2
    b058:	0c1c      	lsrs	r4, r3, #16
    b05a:	0c0b      	lsrs	r3, r1, #16
    b05c:	1ae3      	subs	r3, r4, r3
    b05e:	1414      	asrs	r4, r2, #16
    b060:	191b      	adds	r3, r3, r4
    b062:	0412      	lsls	r2, r2, #16
    b064:	0c12      	lsrs	r2, r2, #16
    b066:	141c      	asrs	r4, r3, #16
    b068:	3704      	adds	r7, #4
    b06a:	041b      	lsls	r3, r3, #16
    b06c:	4313      	orrs	r3, r2
    b06e:	1f3a      	subs	r2, r7, #4
    b070:	6013      	str	r3, [r2, #0]
    b072:	45b1      	cmp	r9, r6
    b074:	d8e8      	bhi.n	b048 <__mdiff+0x7c>
    b076:	45ac      	cmp	ip, r5
    b078:	d91c      	bls.n	b0b4 <__mdiff+0xe8>
    b07a:	003e      	movs	r6, r7
    b07c:	002a      	movs	r2, r5
    b07e:	ca08      	ldmia	r2!, {r3}
    b080:	0419      	lsls	r1, r3, #16
    b082:	0c09      	lsrs	r1, r1, #16
    b084:	1909      	adds	r1, r1, r4
    b086:	140c      	asrs	r4, r1, #16
    b088:	0c1b      	lsrs	r3, r3, #16
    b08a:	191b      	adds	r3, r3, r4
    b08c:	0409      	lsls	r1, r1, #16
    b08e:	141c      	asrs	r4, r3, #16
    b090:	0c09      	lsrs	r1, r1, #16
    b092:	041b      	lsls	r3, r3, #16
    b094:	430b      	orrs	r3, r1
    b096:	c608      	stmia	r6!, {r3}
    b098:	4594      	cmp	ip, r2
    b09a:	d8f0      	bhi.n	b07e <__mdiff+0xb2>
    b09c:	43ed      	mvns	r5, r5
    b09e:	4465      	add	r5, ip
    b0a0:	08ad      	lsrs	r5, r5, #2
    b0a2:	3501      	adds	r5, #1
    b0a4:	00ad      	lsls	r5, r5, #2
    b0a6:	197f      	adds	r7, r7, r5
    b0a8:	1f3a      	subs	r2, r7, #4
    b0aa:	2b00      	cmp	r3, #0
    b0ac:	d104      	bne.n	b0b8 <__mdiff+0xec>
    b0ae:	3a04      	subs	r2, #4
    b0b0:	6813      	ldr	r3, [r2, #0]
    b0b2:	3801      	subs	r0, #1
    b0b4:	2b00      	cmp	r3, #0
    b0b6:	d0fa      	beq.n	b0ae <__mdiff+0xe2>
    b0b8:	4643      	mov	r3, r8
    b0ba:	6118      	str	r0, [r3, #16]
    b0bc:	4640      	mov	r0, r8
    b0be:	bc0c      	pop	{r2, r3}
    b0c0:	4690      	mov	r8, r2
    b0c2:	4699      	mov	r9, r3
    b0c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b0c6:	2100      	movs	r1, #0
    b0c8:	f7ff fd28 	bl	ab1c <_Balloc>
    b0cc:	2301      	movs	r3, #1
    b0ce:	6103      	str	r3, [r0, #16]
    b0d0:	2300      	movs	r3, #0
    b0d2:	6143      	str	r3, [r0, #20]
    b0d4:	e7f3      	b.n	b0be <__mdiff+0xf2>
    b0d6:	2300      	movs	r3, #0
    b0d8:	4666      	mov	r6, ip
    b0da:	4699      	mov	r9, r3
    b0dc:	e7a3      	b.n	b026 <__mdiff+0x5a>
    b0de:	003e      	movs	r6, r7
    b0e0:	0025      	movs	r5, r4
    b0e2:	3614      	adds	r6, #20
    b0e4:	3514      	adds	r5, #20
    b0e6:	e790      	b.n	b00a <__mdiff+0x3e>

0000b0e8 <__d2b>:
    b0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b0ea:	2101      	movs	r1, #1
    b0ec:	001c      	movs	r4, r3
    b0ee:	b083      	sub	sp, #12
    b0f0:	9f08      	ldr	r7, [sp, #32]
    b0f2:	0015      	movs	r5, r2
    b0f4:	f7ff fd12 	bl	ab1c <_Balloc>
    b0f8:	0321      	lsls	r1, r4, #12
    b0fa:	0064      	lsls	r4, r4, #1
    b0fc:	0006      	movs	r6, r0
    b0fe:	0b09      	lsrs	r1, r1, #12
    b100:	0d64      	lsrs	r4, r4, #21
    b102:	d002      	beq.n	b10a <__d2b+0x22>
    b104:	2380      	movs	r3, #128	; 0x80
    b106:	035b      	lsls	r3, r3, #13
    b108:	4319      	orrs	r1, r3
    b10a:	9101      	str	r1, [sp, #4]
    b10c:	2d00      	cmp	r5, #0
    b10e:	d01a      	beq.n	b146 <__d2b+0x5e>
    b110:	4668      	mov	r0, sp
    b112:	9500      	str	r5, [sp, #0]
    b114:	f7ff fd98 	bl	ac48 <__lo0bits>
    b118:	2800      	cmp	r0, #0
    b11a:	d131      	bne.n	b180 <__d2b+0x98>
    b11c:	9b00      	ldr	r3, [sp, #0]
    b11e:	9d01      	ldr	r5, [sp, #4]
    b120:	6173      	str	r3, [r6, #20]
    b122:	61b5      	str	r5, [r6, #24]
    b124:	426b      	negs	r3, r5
    b126:	416b      	adcs	r3, r5
    b128:	2502      	movs	r5, #2
    b12a:	1aed      	subs	r5, r5, r3
    b12c:	6135      	str	r5, [r6, #16]
    b12e:	2c00      	cmp	r4, #0
    b130:	d014      	beq.n	b15c <__d2b+0x74>
    b132:	4b19      	ldr	r3, [pc, #100]	; (b198 <__d2b+0xb0>)
    b134:	469c      	mov	ip, r3
    b136:	2335      	movs	r3, #53	; 0x35
    b138:	4464      	add	r4, ip
    b13a:	1824      	adds	r4, r4, r0
    b13c:	1a18      	subs	r0, r3, r0
    b13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b140:	603c      	str	r4, [r7, #0]
    b142:	6018      	str	r0, [r3, #0]
    b144:	e019      	b.n	b17a <__d2b+0x92>
    b146:	a801      	add	r0, sp, #4
    b148:	f7ff fd7e 	bl	ac48 <__lo0bits>
    b14c:	9b01      	ldr	r3, [sp, #4]
    b14e:	3020      	adds	r0, #32
    b150:	6173      	str	r3, [r6, #20]
    b152:	2301      	movs	r3, #1
    b154:	2501      	movs	r5, #1
    b156:	6133      	str	r3, [r6, #16]
    b158:	2c00      	cmp	r4, #0
    b15a:	d1ea      	bne.n	b132 <__d2b+0x4a>
    b15c:	4b0f      	ldr	r3, [pc, #60]	; (b19c <__d2b+0xb4>)
    b15e:	469c      	mov	ip, r3
    b160:	4b0f      	ldr	r3, [pc, #60]	; (b1a0 <__d2b+0xb8>)
    b162:	4460      	add	r0, ip
    b164:	18eb      	adds	r3, r5, r3
    b166:	009b      	lsls	r3, r3, #2
    b168:	18f3      	adds	r3, r6, r3
    b16a:	6038      	str	r0, [r7, #0]
    b16c:	6958      	ldr	r0, [r3, #20]
    b16e:	f7ff fd4d 	bl	ac0c <__hi0bits>
    b172:	016d      	lsls	r5, r5, #5
    b174:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b176:	1a28      	subs	r0, r5, r0
    b178:	6018      	str	r0, [r3, #0]
    b17a:	0030      	movs	r0, r6
    b17c:	b003      	add	sp, #12
    b17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b180:	9d01      	ldr	r5, [sp, #4]
    b182:	2320      	movs	r3, #32
    b184:	002a      	movs	r2, r5
    b186:	1a1b      	subs	r3, r3, r0
    b188:	409a      	lsls	r2, r3
    b18a:	0013      	movs	r3, r2
    b18c:	40c5      	lsrs	r5, r0
    b18e:	9a00      	ldr	r2, [sp, #0]
    b190:	9501      	str	r5, [sp, #4]
    b192:	4313      	orrs	r3, r2
    b194:	6173      	str	r3, [r6, #20]
    b196:	e7c4      	b.n	b122 <__d2b+0x3a>
    b198:	fffffbcd 	.word	0xfffffbcd
    b19c:	fffffbce 	.word	0xfffffbce
    b1a0:	3fffffff 	.word	0x3fffffff

0000b1a4 <_putc_r>:
    b1a4:	b570      	push	{r4, r5, r6, lr}
    b1a6:	0005      	movs	r5, r0
    b1a8:	000e      	movs	r6, r1
    b1aa:	0014      	movs	r4, r2
    b1ac:	2800      	cmp	r0, #0
    b1ae:	d004      	beq.n	b1ba <_putc_r+0x16>
    b1b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    b1b2:	2b00      	cmp	r3, #0
    b1b4:	d101      	bne.n	b1ba <_putc_r+0x16>
    b1b6:	f7fe fdd7 	bl	9d68 <__sinit>
    b1ba:	68a3      	ldr	r3, [r4, #8]
    b1bc:	3b01      	subs	r3, #1
    b1be:	60a3      	str	r3, [r4, #8]
    b1c0:	2b00      	cmp	r3, #0
    b1c2:	db06      	blt.n	b1d2 <_putc_r+0x2e>
    b1c4:	20ff      	movs	r0, #255	; 0xff
    b1c6:	6823      	ldr	r3, [r4, #0]
    b1c8:	4030      	ands	r0, r6
    b1ca:	1c5a      	adds	r2, r3, #1
    b1cc:	6022      	str	r2, [r4, #0]
    b1ce:	701e      	strb	r6, [r3, #0]
    b1d0:	bd70      	pop	{r4, r5, r6, pc}
    b1d2:	69a2      	ldr	r2, [r4, #24]
    b1d4:	4293      	cmp	r3, r2
    b1d6:	db03      	blt.n	b1e0 <_putc_r+0x3c>
    b1d8:	23ff      	movs	r3, #255	; 0xff
    b1da:	4033      	ands	r3, r6
    b1dc:	2b0a      	cmp	r3, #10
    b1de:	d1f1      	bne.n	b1c4 <_putc_r+0x20>
    b1e0:	0022      	movs	r2, r4
    b1e2:	0031      	movs	r1, r6
    b1e4:	0028      	movs	r0, r5
    b1e6:	f000 fa95 	bl	b714 <__swbuf_r>
    b1ea:	e7f1      	b.n	b1d0 <_putc_r+0x2c>

0000b1ec <_realloc_r>:
    b1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1ee:	4656      	mov	r6, sl
    b1f0:	464d      	mov	r5, r9
    b1f2:	4644      	mov	r4, r8
    b1f4:	465f      	mov	r7, fp
    b1f6:	b4f0      	push	{r4, r5, r6, r7}
    b1f8:	4680      	mov	r8, r0
    b1fa:	b085      	sub	sp, #20
    b1fc:	1e0e      	subs	r6, r1, #0
    b1fe:	4691      	mov	r9, r2
    b200:	d100      	bne.n	b204 <_realloc_r+0x18>
    b202:	e0cb      	b.n	b39c <_realloc_r+0x1b0>
    b204:	0037      	movs	r7, r6
    b206:	3f08      	subs	r7, #8
    b208:	f7ff fc84 	bl	ab14 <__malloc_lock>
    b20c:	687a      	ldr	r2, [r7, #4]
    b20e:	464d      	mov	r5, r9
    b210:	2303      	movs	r3, #3
    b212:	0014      	movs	r4, r2
    b214:	350b      	adds	r5, #11
    b216:	46ba      	mov	sl, r7
    b218:	439c      	bics	r4, r3
    b21a:	2d16      	cmp	r5, #22
    b21c:	d84a      	bhi.n	b2b4 <_realloc_r+0xc8>
    b21e:	2310      	movs	r3, #16
    b220:	2510      	movs	r5, #16
    b222:	45a9      	cmp	r9, r5
    b224:	d84a      	bhi.n	b2bc <_realloc_r+0xd0>
    b226:	429c      	cmp	r4, r3
    b228:	da7b      	bge.n	b322 <_realloc_r+0x136>
    b22a:	49d3      	ldr	r1, [pc, #844]	; (b578 <_realloc_r+0x38c>)
    b22c:	1938      	adds	r0, r7, r4
    b22e:	6889      	ldr	r1, [r1, #8]
    b230:	9001      	str	r0, [sp, #4]
    b232:	4288      	cmp	r0, r1
    b234:	d100      	bne.n	b238 <_realloc_r+0x4c>
    b236:	e0ec      	b.n	b412 <_realloc_r+0x226>
    b238:	6840      	ldr	r0, [r0, #4]
    b23a:	0001      	movs	r1, r0
    b23c:	9002      	str	r0, [sp, #8]
    b23e:	2001      	movs	r0, #1
    b240:	9003      	str	r0, [sp, #12]
    b242:	0008      	movs	r0, r1
    b244:	2101      	movs	r1, #1
    b246:	4388      	bics	r0, r1
    b248:	9901      	ldr	r1, [sp, #4]
    b24a:	4684      	mov	ip, r0
    b24c:	468b      	mov	fp, r1
    b24e:	44dc      	add	ip, fp
    b250:	4661      	mov	r1, ip
    b252:	2001      	movs	r0, #1
    b254:	6849      	ldr	r1, [r1, #4]
    b256:	4201      	tst	r1, r0
    b258:	d100      	bne.n	b25c <_realloc_r+0x70>
    b25a:	e07c      	b.n	b356 <_realloc_r+0x16a>
    b25c:	2101      	movs	r1, #1
    b25e:	4211      	tst	r1, r2
    b260:	d031      	beq.n	b2c6 <_realloc_r+0xda>
    b262:	4649      	mov	r1, r9
    b264:	4640      	mov	r0, r8
    b266:	f7ff f917 	bl	a498 <_malloc_r>
    b26a:	4681      	mov	r9, r0
    b26c:	2800      	cmp	r0, #0
    b26e:	d100      	bne.n	b272 <_realloc_r+0x86>
    b270:	e19c      	b.n	b5ac <_realloc_r+0x3c0>
    b272:	2301      	movs	r3, #1
    b274:	0002      	movs	r2, r0
    b276:	6879      	ldr	r1, [r7, #4]
    b278:	3a08      	subs	r2, #8
    b27a:	4399      	bics	r1, r3
    b27c:	187f      	adds	r7, r7, r1
    b27e:	42ba      	cmp	r2, r7
    b280:	d100      	bne.n	b284 <_realloc_r+0x98>
    b282:	e13c      	b.n	b4fe <_realloc_r+0x312>
    b284:	1f22      	subs	r2, r4, #4
    b286:	2a24      	cmp	r2, #36	; 0x24
    b288:	d900      	bls.n	b28c <_realloc_r+0xa0>
    b28a:	e129      	b.n	b4e0 <_realloc_r+0x2f4>
    b28c:	0003      	movs	r3, r0
    b28e:	2a13      	cmp	r2, #19
    b290:	d900      	bls.n	b294 <_realloc_r+0xa8>
    b292:	e10b      	b.n	b4ac <_realloc_r+0x2c0>
    b294:	0032      	movs	r2, r6
    b296:	6811      	ldr	r1, [r2, #0]
    b298:	6019      	str	r1, [r3, #0]
    b29a:	6851      	ldr	r1, [r2, #4]
    b29c:	6059      	str	r1, [r3, #4]
    b29e:	6892      	ldr	r2, [r2, #8]
    b2a0:	609a      	str	r2, [r3, #8]
    b2a2:	0031      	movs	r1, r6
    b2a4:	4640      	mov	r0, r8
    b2a6:	f7fe fdd5 	bl	9e54 <_free_r>
    b2aa:	4640      	mov	r0, r8
    b2ac:	f7ff fc34 	bl	ab18 <__malloc_unlock>
    b2b0:	4648      	mov	r0, r9
    b2b2:	e049      	b.n	b348 <_realloc_r+0x15c>
    b2b4:	3304      	adds	r3, #4
    b2b6:	439d      	bics	r5, r3
    b2b8:	1e2b      	subs	r3, r5, #0
    b2ba:	dab2      	bge.n	b222 <_realloc_r+0x36>
    b2bc:	230c      	movs	r3, #12
    b2be:	4642      	mov	r2, r8
    b2c0:	2000      	movs	r0, #0
    b2c2:	6013      	str	r3, [r2, #0]
    b2c4:	e040      	b.n	b348 <_realloc_r+0x15c>
    b2c6:	683a      	ldr	r2, [r7, #0]
    b2c8:	1aba      	subs	r2, r7, r2
    b2ca:	4693      	mov	fp, r2
    b2cc:	4659      	mov	r1, fp
    b2ce:	2203      	movs	r2, #3
    b2d0:	6849      	ldr	r1, [r1, #4]
    b2d2:	4391      	bics	r1, r2
    b2d4:	000a      	movs	r2, r1
    b2d6:	18a2      	adds	r2, r4, r2
    b2d8:	9201      	str	r2, [sp, #4]
    b2da:	429a      	cmp	r2, r3
    b2dc:	dbc1      	blt.n	b262 <_realloc_r+0x76>
    b2de:	465b      	mov	r3, fp
    b2e0:	465a      	mov	r2, fp
    b2e2:	465f      	mov	r7, fp
    b2e4:	6892      	ldr	r2, [r2, #8]
    b2e6:	68db      	ldr	r3, [r3, #12]
    b2e8:	3708      	adds	r7, #8
    b2ea:	60d3      	str	r3, [r2, #12]
    b2ec:	609a      	str	r2, [r3, #8]
    b2ee:	1f22      	subs	r2, r4, #4
    b2f0:	2a24      	cmp	r2, #36	; 0x24
    b2f2:	d900      	bls.n	b2f6 <_realloc_r+0x10a>
    b2f4:	e110      	b.n	b518 <_realloc_r+0x32c>
    b2f6:	003b      	movs	r3, r7
    b2f8:	2a13      	cmp	r2, #19
    b2fa:	d909      	bls.n	b310 <_realloc_r+0x124>
    b2fc:	465b      	mov	r3, fp
    b2fe:	6831      	ldr	r1, [r6, #0]
    b300:	6099      	str	r1, [r3, #8]
    b302:	6871      	ldr	r1, [r6, #4]
    b304:	60d9      	str	r1, [r3, #12]
    b306:	2a1b      	cmp	r2, #27
    b308:	d900      	bls.n	b30c <_realloc_r+0x120>
    b30a:	e121      	b.n	b550 <_realloc_r+0x364>
    b30c:	3310      	adds	r3, #16
    b30e:	3608      	adds	r6, #8
    b310:	6832      	ldr	r2, [r6, #0]
    b312:	46da      	mov	sl, fp
    b314:	601a      	str	r2, [r3, #0]
    b316:	6872      	ldr	r2, [r6, #4]
    b318:	9c01      	ldr	r4, [sp, #4]
    b31a:	605a      	str	r2, [r3, #4]
    b31c:	68b2      	ldr	r2, [r6, #8]
    b31e:	003e      	movs	r6, r7
    b320:	609a      	str	r2, [r3, #8]
    b322:	1b63      	subs	r3, r4, r5
    b324:	2b0f      	cmp	r3, #15
    b326:	d824      	bhi.n	b372 <_realloc_r+0x186>
    b328:	4653      	mov	r3, sl
    b32a:	2101      	movs	r1, #1
    b32c:	4652      	mov	r2, sl
    b32e:	685b      	ldr	r3, [r3, #4]
    b330:	400b      	ands	r3, r1
    b332:	4323      	orrs	r3, r4
    b334:	6053      	str	r3, [r2, #4]
    b336:	0022      	movs	r2, r4
    b338:	4452      	add	r2, sl
    b33a:	6853      	ldr	r3, [r2, #4]
    b33c:	4319      	orrs	r1, r3
    b33e:	6051      	str	r1, [r2, #4]
    b340:	4640      	mov	r0, r8
    b342:	f7ff fbe9 	bl	ab18 <__malloc_unlock>
    b346:	0030      	movs	r0, r6
    b348:	b005      	add	sp, #20
    b34a:	bc3c      	pop	{r2, r3, r4, r5}
    b34c:	4690      	mov	r8, r2
    b34e:	4699      	mov	r9, r3
    b350:	46a2      	mov	sl, r4
    b352:	46ab      	mov	fp, r5
    b354:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b356:	2103      	movs	r1, #3
    b358:	9802      	ldr	r0, [sp, #8]
    b35a:	468c      	mov	ip, r1
    b35c:	4388      	bics	r0, r1
    b35e:	1901      	adds	r1, r0, r4
    b360:	4299      	cmp	r1, r3
    b362:	db1f      	blt.n	b3a4 <_realloc_r+0x1b8>
    b364:	9a01      	ldr	r2, [sp, #4]
    b366:	000c      	movs	r4, r1
    b368:	68d3      	ldr	r3, [r2, #12]
    b36a:	6892      	ldr	r2, [r2, #8]
    b36c:	60d3      	str	r3, [r2, #12]
    b36e:	609a      	str	r2, [r3, #8]
    b370:	e7d7      	b.n	b322 <_realloc_r+0x136>
    b372:	4652      	mov	r2, sl
    b374:	4650      	mov	r0, sl
    b376:	1951      	adds	r1, r2, r5
    b378:	2201      	movs	r2, #1
    b37a:	6840      	ldr	r0, [r0, #4]
    b37c:	4010      	ands	r0, r2
    b37e:	4305      	orrs	r5, r0
    b380:	4650      	mov	r0, sl
    b382:	6045      	str	r5, [r0, #4]
    b384:	0018      	movs	r0, r3
    b386:	4310      	orrs	r0, r2
    b388:	18cb      	adds	r3, r1, r3
    b38a:	6048      	str	r0, [r1, #4]
    b38c:	6858      	ldr	r0, [r3, #4]
    b38e:	3108      	adds	r1, #8
    b390:	4302      	orrs	r2, r0
    b392:	605a      	str	r2, [r3, #4]
    b394:	4640      	mov	r0, r8
    b396:	f7fe fd5d 	bl	9e54 <_free_r>
    b39a:	e7d1      	b.n	b340 <_realloc_r+0x154>
    b39c:	0011      	movs	r1, r2
    b39e:	f7ff f87b 	bl	a498 <_malloc_r>
    b3a2:	e7d1      	b.n	b348 <_realloc_r+0x15c>
    b3a4:	2001      	movs	r0, #1
    b3a6:	4210      	tst	r0, r2
    b3a8:	d000      	beq.n	b3ac <_realloc_r+0x1c0>
    b3aa:	e75a      	b.n	b262 <_realloc_r+0x76>
    b3ac:	4660      	mov	r0, ip
    b3ae:	683a      	ldr	r2, [r7, #0]
    b3b0:	1aba      	subs	r2, r7, r2
    b3b2:	4693      	mov	fp, r2
    b3b4:	6852      	ldr	r2, [r2, #4]
    b3b6:	4382      	bics	r2, r0
    b3b8:	1889      	adds	r1, r1, r2
    b3ba:	9102      	str	r1, [sp, #8]
    b3bc:	4299      	cmp	r1, r3
    b3be:	da00      	bge.n	b3c2 <_realloc_r+0x1d6>
    b3c0:	e789      	b.n	b2d6 <_realloc_r+0xea>
    b3c2:	9a01      	ldr	r2, [sp, #4]
    b3c4:	465f      	mov	r7, fp
    b3c6:	68d3      	ldr	r3, [r2, #12]
    b3c8:	6892      	ldr	r2, [r2, #8]
    b3ca:	3708      	adds	r7, #8
    b3cc:	60d3      	str	r3, [r2, #12]
    b3ce:	609a      	str	r2, [r3, #8]
    b3d0:	465b      	mov	r3, fp
    b3d2:	465a      	mov	r2, fp
    b3d4:	68db      	ldr	r3, [r3, #12]
    b3d6:	6892      	ldr	r2, [r2, #8]
    b3d8:	60d3      	str	r3, [r2, #12]
    b3da:	609a      	str	r2, [r3, #8]
    b3dc:	1f22      	subs	r2, r4, #4
    b3de:	2a24      	cmp	r2, #36	; 0x24
    b3e0:	d900      	bls.n	b3e4 <_realloc_r+0x1f8>
    b3e2:	e091      	b.n	b508 <_realloc_r+0x31c>
    b3e4:	003b      	movs	r3, r7
    b3e6:	2a13      	cmp	r2, #19
    b3e8:	d909      	bls.n	b3fe <_realloc_r+0x212>
    b3ea:	465b      	mov	r3, fp
    b3ec:	6831      	ldr	r1, [r6, #0]
    b3ee:	6099      	str	r1, [r3, #8]
    b3f0:	6871      	ldr	r1, [r6, #4]
    b3f2:	60d9      	str	r1, [r3, #12]
    b3f4:	2a1b      	cmp	r2, #27
    b3f6:	d900      	bls.n	b3fa <_realloc_r+0x20e>
    b3f8:	e096      	b.n	b528 <_realloc_r+0x33c>
    b3fa:	3310      	adds	r3, #16
    b3fc:	3608      	adds	r6, #8
    b3fe:	6832      	ldr	r2, [r6, #0]
    b400:	9c02      	ldr	r4, [sp, #8]
    b402:	601a      	str	r2, [r3, #0]
    b404:	6872      	ldr	r2, [r6, #4]
    b406:	46da      	mov	sl, fp
    b408:	605a      	str	r2, [r3, #4]
    b40a:	68b2      	ldr	r2, [r6, #8]
    b40c:	003e      	movs	r6, r7
    b40e:	609a      	str	r2, [r3, #8]
    b410:	e787      	b.n	b322 <_realloc_r+0x136>
    b412:	2003      	movs	r0, #3
    b414:	9901      	ldr	r1, [sp, #4]
    b416:	4684      	mov	ip, r0
    b418:	6849      	ldr	r1, [r1, #4]
    b41a:	4381      	bics	r1, r0
    b41c:	0028      	movs	r0, r5
    b41e:	1909      	adds	r1, r1, r4
    b420:	3010      	adds	r0, #16
    b422:	9001      	str	r0, [sp, #4]
    b424:	4281      	cmp	r1, r0
    b426:	da4b      	bge.n	b4c0 <_realloc_r+0x2d4>
    b428:	07d2      	lsls	r2, r2, #31
    b42a:	d500      	bpl.n	b42e <_realloc_r+0x242>
    b42c:	e719      	b.n	b262 <_realloc_r+0x76>
    b42e:	4660      	mov	r0, ip
    b430:	683a      	ldr	r2, [r7, #0]
    b432:	1aba      	subs	r2, r7, r2
    b434:	4693      	mov	fp, r2
    b436:	6852      	ldr	r2, [r2, #4]
    b438:	4382      	bics	r2, r0
    b43a:	9801      	ldr	r0, [sp, #4]
    b43c:	1851      	adds	r1, r2, r1
    b43e:	9102      	str	r1, [sp, #8]
    b440:	4288      	cmp	r0, r1
    b442:	dd00      	ble.n	b446 <_realloc_r+0x25a>
    b444:	e747      	b.n	b2d6 <_realloc_r+0xea>
    b446:	465b      	mov	r3, fp
    b448:	465a      	mov	r2, fp
    b44a:	465f      	mov	r7, fp
    b44c:	6892      	ldr	r2, [r2, #8]
    b44e:	68db      	ldr	r3, [r3, #12]
    b450:	3708      	adds	r7, #8
    b452:	60d3      	str	r3, [r2, #12]
    b454:	609a      	str	r2, [r3, #8]
    b456:	1f22      	subs	r2, r4, #4
    b458:	2a24      	cmp	r2, #36	; 0x24
    b45a:	d900      	bls.n	b45e <_realloc_r+0x272>
    b45c:	e097      	b.n	b58e <_realloc_r+0x3a2>
    b45e:	003b      	movs	r3, r7
    b460:	2a13      	cmp	r2, #19
    b462:	d909      	bls.n	b478 <_realloc_r+0x28c>
    b464:	465b      	mov	r3, fp
    b466:	6831      	ldr	r1, [r6, #0]
    b468:	6099      	str	r1, [r3, #8]
    b46a:	6871      	ldr	r1, [r6, #4]
    b46c:	60d9      	str	r1, [r3, #12]
    b46e:	2a1b      	cmp	r2, #27
    b470:	d900      	bls.n	b474 <_realloc_r+0x288>
    b472:	e091      	b.n	b598 <_realloc_r+0x3ac>
    b474:	3310      	adds	r3, #16
    b476:	3608      	adds	r6, #8
    b478:	6832      	ldr	r2, [r6, #0]
    b47a:	601a      	str	r2, [r3, #0]
    b47c:	6872      	ldr	r2, [r6, #4]
    b47e:	605a      	str	r2, [r3, #4]
    b480:	68b2      	ldr	r2, [r6, #8]
    b482:	609a      	str	r2, [r3, #8]
    b484:	465b      	mov	r3, fp
    b486:	1959      	adds	r1, r3, r5
    b488:	4b3b      	ldr	r3, [pc, #236]	; (b578 <_realloc_r+0x38c>)
    b48a:	4640      	mov	r0, r8
    b48c:	6099      	str	r1, [r3, #8]
    b48e:	9b02      	ldr	r3, [sp, #8]
    b490:	1b5a      	subs	r2, r3, r5
    b492:	2301      	movs	r3, #1
    b494:	431a      	orrs	r2, r3
    b496:	604a      	str	r2, [r1, #4]
    b498:	465a      	mov	r2, fp
    b49a:	6852      	ldr	r2, [r2, #4]
    b49c:	4013      	ands	r3, r2
    b49e:	431d      	orrs	r5, r3
    b4a0:	465b      	mov	r3, fp
    b4a2:	605d      	str	r5, [r3, #4]
    b4a4:	f7ff fb38 	bl	ab18 <__malloc_unlock>
    b4a8:	0038      	movs	r0, r7
    b4aa:	e74d      	b.n	b348 <_realloc_r+0x15c>
    b4ac:	6831      	ldr	r1, [r6, #0]
    b4ae:	6001      	str	r1, [r0, #0]
    b4b0:	6871      	ldr	r1, [r6, #4]
    b4b2:	6041      	str	r1, [r0, #4]
    b4b4:	2a1b      	cmp	r2, #27
    b4b6:	d817      	bhi.n	b4e8 <_realloc_r+0x2fc>
    b4b8:	0032      	movs	r2, r6
    b4ba:	3308      	adds	r3, #8
    b4bc:	3208      	adds	r2, #8
    b4be:	e6ea      	b.n	b296 <_realloc_r+0xaa>
    b4c0:	4b2d      	ldr	r3, [pc, #180]	; (b578 <_realloc_r+0x38c>)
    b4c2:	197a      	adds	r2, r7, r5
    b4c4:	609a      	str	r2, [r3, #8]
    b4c6:	2301      	movs	r3, #1
    b4c8:	1b49      	subs	r1, r1, r5
    b4ca:	4319      	orrs	r1, r3
    b4cc:	6051      	str	r1, [r2, #4]
    b4ce:	687a      	ldr	r2, [r7, #4]
    b4d0:	4640      	mov	r0, r8
    b4d2:	4013      	ands	r3, r2
    b4d4:	431d      	orrs	r5, r3
    b4d6:	607d      	str	r5, [r7, #4]
    b4d8:	f7ff fb1e 	bl	ab18 <__malloc_unlock>
    b4dc:	0030      	movs	r0, r6
    b4de:	e733      	b.n	b348 <_realloc_r+0x15c>
    b4e0:	0031      	movs	r1, r6
    b4e2:	f7ff facb 	bl	aa7c <memmove>
    b4e6:	e6dc      	b.n	b2a2 <_realloc_r+0xb6>
    b4e8:	68b1      	ldr	r1, [r6, #8]
    b4ea:	0003      	movs	r3, r0
    b4ec:	6081      	str	r1, [r0, #8]
    b4ee:	68f1      	ldr	r1, [r6, #12]
    b4f0:	60c1      	str	r1, [r0, #12]
    b4f2:	2a24      	cmp	r2, #36	; 0x24
    b4f4:	d022      	beq.n	b53c <_realloc_r+0x350>
    b4f6:	0032      	movs	r2, r6
    b4f8:	3310      	adds	r3, #16
    b4fa:	3210      	adds	r2, #16
    b4fc:	e6cb      	b.n	b296 <_realloc_r+0xaa>
    b4fe:	6853      	ldr	r3, [r2, #4]
    b500:	2203      	movs	r2, #3
    b502:	4393      	bics	r3, r2
    b504:	18e4      	adds	r4, r4, r3
    b506:	e70c      	b.n	b322 <_realloc_r+0x136>
    b508:	0031      	movs	r1, r6
    b50a:	0038      	movs	r0, r7
    b50c:	f7ff fab6 	bl	aa7c <memmove>
    b510:	003e      	movs	r6, r7
    b512:	9c02      	ldr	r4, [sp, #8]
    b514:	46da      	mov	sl, fp
    b516:	e704      	b.n	b322 <_realloc_r+0x136>
    b518:	0031      	movs	r1, r6
    b51a:	0038      	movs	r0, r7
    b51c:	f7ff faae 	bl	aa7c <memmove>
    b520:	003e      	movs	r6, r7
    b522:	9c01      	ldr	r4, [sp, #4]
    b524:	46da      	mov	sl, fp
    b526:	e6fc      	b.n	b322 <_realloc_r+0x136>
    b528:	465b      	mov	r3, fp
    b52a:	68b1      	ldr	r1, [r6, #8]
    b52c:	6119      	str	r1, [r3, #16]
    b52e:	68f1      	ldr	r1, [r6, #12]
    b530:	6159      	str	r1, [r3, #20]
    b532:	2a24      	cmp	r2, #36	; 0x24
    b534:	d016      	beq.n	b564 <_realloc_r+0x378>
    b536:	3318      	adds	r3, #24
    b538:	3610      	adds	r6, #16
    b53a:	e760      	b.n	b3fe <_realloc_r+0x212>
    b53c:	6932      	ldr	r2, [r6, #16]
    b53e:	0003      	movs	r3, r0
    b540:	6102      	str	r2, [r0, #16]
    b542:	0001      	movs	r1, r0
    b544:	0032      	movs	r2, r6
    b546:	6970      	ldr	r0, [r6, #20]
    b548:	3318      	adds	r3, #24
    b54a:	3218      	adds	r2, #24
    b54c:	6148      	str	r0, [r1, #20]
    b54e:	e6a2      	b.n	b296 <_realloc_r+0xaa>
    b550:	465b      	mov	r3, fp
    b552:	68b1      	ldr	r1, [r6, #8]
    b554:	6119      	str	r1, [r3, #16]
    b556:	68f1      	ldr	r1, [r6, #12]
    b558:	6159      	str	r1, [r3, #20]
    b55a:	2a24      	cmp	r2, #36	; 0x24
    b55c:	d00e      	beq.n	b57c <_realloc_r+0x390>
    b55e:	3318      	adds	r3, #24
    b560:	3610      	adds	r6, #16
    b562:	e6d5      	b.n	b310 <_realloc_r+0x124>
    b564:	465b      	mov	r3, fp
    b566:	6932      	ldr	r2, [r6, #16]
    b568:	619a      	str	r2, [r3, #24]
    b56a:	465a      	mov	r2, fp
    b56c:	6971      	ldr	r1, [r6, #20]
    b56e:	3320      	adds	r3, #32
    b570:	61d1      	str	r1, [r2, #28]
    b572:	3618      	adds	r6, #24
    b574:	e743      	b.n	b3fe <_realloc_r+0x212>
    b576:	46c0      	nop			; (mov r8, r8)
    b578:	20000498 	.word	0x20000498
    b57c:	465b      	mov	r3, fp
    b57e:	6932      	ldr	r2, [r6, #16]
    b580:	619a      	str	r2, [r3, #24]
    b582:	465a      	mov	r2, fp
    b584:	6971      	ldr	r1, [r6, #20]
    b586:	3320      	adds	r3, #32
    b588:	61d1      	str	r1, [r2, #28]
    b58a:	3618      	adds	r6, #24
    b58c:	e6c0      	b.n	b310 <_realloc_r+0x124>
    b58e:	0031      	movs	r1, r6
    b590:	0038      	movs	r0, r7
    b592:	f7ff fa73 	bl	aa7c <memmove>
    b596:	e775      	b.n	b484 <_realloc_r+0x298>
    b598:	465b      	mov	r3, fp
    b59a:	68b1      	ldr	r1, [r6, #8]
    b59c:	6119      	str	r1, [r3, #16]
    b59e:	68f1      	ldr	r1, [r6, #12]
    b5a0:	6159      	str	r1, [r3, #20]
    b5a2:	2a24      	cmp	r2, #36	; 0x24
    b5a4:	d007      	beq.n	b5b6 <_realloc_r+0x3ca>
    b5a6:	3318      	adds	r3, #24
    b5a8:	3610      	adds	r6, #16
    b5aa:	e765      	b.n	b478 <_realloc_r+0x28c>
    b5ac:	4640      	mov	r0, r8
    b5ae:	f7ff fab3 	bl	ab18 <__malloc_unlock>
    b5b2:	2000      	movs	r0, #0
    b5b4:	e6c8      	b.n	b348 <_realloc_r+0x15c>
    b5b6:	465b      	mov	r3, fp
    b5b8:	6932      	ldr	r2, [r6, #16]
    b5ba:	619a      	str	r2, [r3, #24]
    b5bc:	465a      	mov	r2, fp
    b5be:	6971      	ldr	r1, [r6, #20]
    b5c0:	3320      	adds	r3, #32
    b5c2:	61d1      	str	r1, [r2, #28]
    b5c4:	3618      	adds	r6, #24
    b5c6:	e757      	b.n	b478 <_realloc_r+0x28c>

0000b5c8 <_sbrk_r>:
    b5c8:	2300      	movs	r3, #0
    b5ca:	b570      	push	{r4, r5, r6, lr}
    b5cc:	4c06      	ldr	r4, [pc, #24]	; (b5e8 <_sbrk_r+0x20>)
    b5ce:	0005      	movs	r5, r0
    b5d0:	0008      	movs	r0, r1
    b5d2:	6023      	str	r3, [r4, #0]
    b5d4:	f7fa feaa 	bl	632c <_sbrk>
    b5d8:	1c43      	adds	r3, r0, #1
    b5da:	d000      	beq.n	b5de <_sbrk_r+0x16>
    b5dc:	bd70      	pop	{r4, r5, r6, pc}
    b5de:	6823      	ldr	r3, [r4, #0]
    b5e0:	2b00      	cmp	r3, #0
    b5e2:	d0fb      	beq.n	b5dc <_sbrk_r+0x14>
    b5e4:	602b      	str	r3, [r5, #0]
    b5e6:	e7f9      	b.n	b5dc <_sbrk_r+0x14>
    b5e8:	20000e5c 	.word	0x20000e5c

0000b5ec <__sread>:
    b5ec:	b570      	push	{r4, r5, r6, lr}
    b5ee:	000c      	movs	r4, r1
    b5f0:	250e      	movs	r5, #14
    b5f2:	5f49      	ldrsh	r1, [r1, r5]
    b5f4:	f000 fa88 	bl	bb08 <_read_r>
    b5f8:	2800      	cmp	r0, #0
    b5fa:	db03      	blt.n	b604 <__sread+0x18>
    b5fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
    b5fe:	181b      	adds	r3, r3, r0
    b600:	6523      	str	r3, [r4, #80]	; 0x50
    b602:	bd70      	pop	{r4, r5, r6, pc}
    b604:	89a2      	ldrh	r2, [r4, #12]
    b606:	4b02      	ldr	r3, [pc, #8]	; (b610 <__sread+0x24>)
    b608:	4013      	ands	r3, r2
    b60a:	81a3      	strh	r3, [r4, #12]
    b60c:	e7f9      	b.n	b602 <__sread+0x16>
    b60e:	46c0      	nop			; (mov r8, r8)
    b610:	ffffefff 	.word	0xffffefff

0000b614 <__swrite>:
    b614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b616:	0016      	movs	r6, r2
    b618:	001f      	movs	r7, r3
    b61a:	230c      	movs	r3, #12
    b61c:	5eca      	ldrsh	r2, [r1, r3]
    b61e:	0005      	movs	r5, r0
    b620:	000c      	movs	r4, r1
    b622:	05d3      	lsls	r3, r2, #23
    b624:	d507      	bpl.n	b636 <__swrite+0x22>
    b626:	230e      	movs	r3, #14
    b628:	5ec9      	ldrsh	r1, [r1, r3]
    b62a:	2200      	movs	r2, #0
    b62c:	2302      	movs	r3, #2
    b62e:	f000 fa57 	bl	bae0 <_lseek_r>
    b632:	230c      	movs	r3, #12
    b634:	5ee2      	ldrsh	r2, [r4, r3]
    b636:	4b05      	ldr	r3, [pc, #20]	; (b64c <__swrite+0x38>)
    b638:	0028      	movs	r0, r5
    b63a:	4013      	ands	r3, r2
    b63c:	81a3      	strh	r3, [r4, #12]
    b63e:	0032      	movs	r2, r6
    b640:	230e      	movs	r3, #14
    b642:	5ee1      	ldrsh	r1, [r4, r3]
    b644:	003b      	movs	r3, r7
    b646:	f000 f8c3 	bl	b7d0 <_write_r>
    b64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b64c:	ffffefff 	.word	0xffffefff

0000b650 <__sseek>:
    b650:	b570      	push	{r4, r5, r6, lr}
    b652:	000c      	movs	r4, r1
    b654:	250e      	movs	r5, #14
    b656:	5f49      	ldrsh	r1, [r1, r5]
    b658:	f000 fa42 	bl	bae0 <_lseek_r>
    b65c:	1c43      	adds	r3, r0, #1
    b65e:	d006      	beq.n	b66e <__sseek+0x1e>
    b660:	2280      	movs	r2, #128	; 0x80
    b662:	89a3      	ldrh	r3, [r4, #12]
    b664:	0152      	lsls	r2, r2, #5
    b666:	4313      	orrs	r3, r2
    b668:	81a3      	strh	r3, [r4, #12]
    b66a:	6520      	str	r0, [r4, #80]	; 0x50
    b66c:	bd70      	pop	{r4, r5, r6, pc}
    b66e:	89a2      	ldrh	r2, [r4, #12]
    b670:	4b01      	ldr	r3, [pc, #4]	; (b678 <__sseek+0x28>)
    b672:	4013      	ands	r3, r2
    b674:	81a3      	strh	r3, [r4, #12]
    b676:	e7f9      	b.n	b66c <__sseek+0x1c>
    b678:	ffffefff 	.word	0xffffefff

0000b67c <__sclose>:
    b67c:	b510      	push	{r4, lr}
    b67e:	230e      	movs	r3, #14
    b680:	5ec9      	ldrsh	r1, [r1, r3]
    b682:	f000 f953 	bl	b92c <_close_r>
    b686:	bd10      	pop	{r4, pc}

0000b688 <__sprint_r.part.0>:
    b688:	b5f0      	push	{r4, r5, r6, r7, lr}
    b68a:	4657      	mov	r7, sl
    b68c:	464e      	mov	r6, r9
    b68e:	4645      	mov	r5, r8
    b690:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    b692:	b4e0      	push	{r5, r6, r7}
    b694:	4680      	mov	r8, r0
    b696:	000f      	movs	r7, r1
    b698:	4691      	mov	r9, r2
    b69a:	049b      	lsls	r3, r3, #18
    b69c:	d52d      	bpl.n	b6fa <__sprint_r.part.0+0x72>
    b69e:	6813      	ldr	r3, [r2, #0]
    b6a0:	469a      	mov	sl, r3
    b6a2:	6893      	ldr	r3, [r2, #8]
    b6a4:	2b00      	cmp	r3, #0
    b6a6:	d026      	beq.n	b6f6 <__sprint_r.part.0+0x6e>
    b6a8:	4652      	mov	r2, sl
    b6aa:	6852      	ldr	r2, [r2, #4]
    b6ac:	2500      	movs	r5, #0
    b6ae:	0896      	lsrs	r6, r2, #2
    b6b0:	4652      	mov	r2, sl
    b6b2:	6814      	ldr	r4, [r2, #0]
    b6b4:	d104      	bne.n	b6c0 <__sprint_r.part.0+0x38>
    b6b6:	e015      	b.n	b6e4 <__sprint_r.part.0+0x5c>
    b6b8:	3501      	adds	r5, #1
    b6ba:	3404      	adds	r4, #4
    b6bc:	42ae      	cmp	r6, r5
    b6be:	d00f      	beq.n	b6e0 <__sprint_r.part.0+0x58>
    b6c0:	003a      	movs	r2, r7
    b6c2:	6821      	ldr	r1, [r4, #0]
    b6c4:	4640      	mov	r0, r8
    b6c6:	f000 f9d5 	bl	ba74 <_fputwc_r>
    b6ca:	1c43      	adds	r3, r0, #1
    b6cc:	d1f4      	bne.n	b6b8 <__sprint_r.part.0+0x30>
    b6ce:	464a      	mov	r2, r9
    b6d0:	2300      	movs	r3, #0
    b6d2:	6093      	str	r3, [r2, #8]
    b6d4:	6053      	str	r3, [r2, #4]
    b6d6:	bc1c      	pop	{r2, r3, r4}
    b6d8:	4690      	mov	r8, r2
    b6da:	4699      	mov	r9, r3
    b6dc:	46a2      	mov	sl, r4
    b6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b6e0:	464b      	mov	r3, r9
    b6e2:	689b      	ldr	r3, [r3, #8]
    b6e4:	464a      	mov	r2, r9
    b6e6:	00b6      	lsls	r6, r6, #2
    b6e8:	1b9b      	subs	r3, r3, r6
    b6ea:	6093      	str	r3, [r2, #8]
    b6ec:	2208      	movs	r2, #8
    b6ee:	4694      	mov	ip, r2
    b6f0:	44e2      	add	sl, ip
    b6f2:	2b00      	cmp	r3, #0
    b6f4:	d1d8      	bne.n	b6a8 <__sprint_r.part.0+0x20>
    b6f6:	2000      	movs	r0, #0
    b6f8:	e7e9      	b.n	b6ce <__sprint_r.part.0+0x46>
    b6fa:	f7fe fc8d 	bl	a018 <__sfvwrite_r>
    b6fe:	e7e6      	b.n	b6ce <__sprint_r.part.0+0x46>

0000b700 <__sprint_r>:
    b700:	6893      	ldr	r3, [r2, #8]
    b702:	b510      	push	{r4, lr}
    b704:	2b00      	cmp	r3, #0
    b706:	d002      	beq.n	b70e <__sprint_r+0xe>
    b708:	f7ff ffbe 	bl	b688 <__sprint_r.part.0>
    b70c:	bd10      	pop	{r4, pc}
    b70e:	6053      	str	r3, [r2, #4]
    b710:	2000      	movs	r0, #0
    b712:	e7fb      	b.n	b70c <__sprint_r+0xc>

0000b714 <__swbuf_r>:
    b714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b716:	0006      	movs	r6, r0
    b718:	000f      	movs	r7, r1
    b71a:	0014      	movs	r4, r2
    b71c:	2800      	cmp	r0, #0
    b71e:	d002      	beq.n	b726 <__swbuf_r+0x12>
    b720:	6b83      	ldr	r3, [r0, #56]	; 0x38
    b722:	2b00      	cmp	r3, #0
    b724:	d04c      	beq.n	b7c0 <__swbuf_r+0xac>
    b726:	69a3      	ldr	r3, [r4, #24]
    b728:	60a3      	str	r3, [r4, #8]
    b72a:	230c      	movs	r3, #12
    b72c:	5ee2      	ldrsh	r2, [r4, r3]
    b72e:	b291      	uxth	r1, r2
    b730:	070b      	lsls	r3, r1, #28
    b732:	d53a      	bpl.n	b7aa <__swbuf_r+0x96>
    b734:	6923      	ldr	r3, [r4, #16]
    b736:	2b00      	cmp	r3, #0
    b738:	d037      	beq.n	b7aa <__swbuf_r+0x96>
    b73a:	2080      	movs	r0, #128	; 0x80
    b73c:	25ff      	movs	r5, #255	; 0xff
    b73e:	0180      	lsls	r0, r0, #6
    b740:	403d      	ands	r5, r7
    b742:	4201      	tst	r1, r0
    b744:	d015      	beq.n	b772 <__swbuf_r+0x5e>
    b746:	6822      	ldr	r2, [r4, #0]
    b748:	6961      	ldr	r1, [r4, #20]
    b74a:	1ad3      	subs	r3, r2, r3
    b74c:	428b      	cmp	r3, r1
    b74e:	da1b      	bge.n	b788 <__swbuf_r+0x74>
    b750:	3301      	adds	r3, #1
    b752:	68a1      	ldr	r1, [r4, #8]
    b754:	3901      	subs	r1, #1
    b756:	60a1      	str	r1, [r4, #8]
    b758:	1c51      	adds	r1, r2, #1
    b75a:	6021      	str	r1, [r4, #0]
    b75c:	7017      	strb	r7, [r2, #0]
    b75e:	6962      	ldr	r2, [r4, #20]
    b760:	429a      	cmp	r2, r3
    b762:	d01a      	beq.n	b79a <__swbuf_r+0x86>
    b764:	89a3      	ldrh	r3, [r4, #12]
    b766:	0028      	movs	r0, r5
    b768:	07db      	lsls	r3, r3, #31
    b76a:	d501      	bpl.n	b770 <__swbuf_r+0x5c>
    b76c:	2d0a      	cmp	r5, #10
    b76e:	d014      	beq.n	b79a <__swbuf_r+0x86>
    b770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b772:	4302      	orrs	r2, r0
    b774:	6e61      	ldr	r1, [r4, #100]	; 0x64
    b776:	81a2      	strh	r2, [r4, #12]
    b778:	4a14      	ldr	r2, [pc, #80]	; (b7cc <__swbuf_r+0xb8>)
    b77a:	400a      	ands	r2, r1
    b77c:	6662      	str	r2, [r4, #100]	; 0x64
    b77e:	6961      	ldr	r1, [r4, #20]
    b780:	6822      	ldr	r2, [r4, #0]
    b782:	1ad3      	subs	r3, r2, r3
    b784:	428b      	cmp	r3, r1
    b786:	dbe3      	blt.n	b750 <__swbuf_r+0x3c>
    b788:	0021      	movs	r1, r4
    b78a:	0030      	movs	r0, r6
    b78c:	f7fe fa56 	bl	9c3c <_fflush_r>
    b790:	2800      	cmp	r0, #0
    b792:	d118      	bne.n	b7c6 <__swbuf_r+0xb2>
    b794:	6822      	ldr	r2, [r4, #0]
    b796:	2301      	movs	r3, #1
    b798:	e7db      	b.n	b752 <__swbuf_r+0x3e>
    b79a:	0021      	movs	r1, r4
    b79c:	0030      	movs	r0, r6
    b79e:	f7fe fa4d 	bl	9c3c <_fflush_r>
    b7a2:	2800      	cmp	r0, #0
    b7a4:	d10f      	bne.n	b7c6 <__swbuf_r+0xb2>
    b7a6:	0028      	movs	r0, r5
    b7a8:	e7e2      	b.n	b770 <__swbuf_r+0x5c>
    b7aa:	0021      	movs	r1, r4
    b7ac:	0030      	movs	r0, r6
    b7ae:	f7fd f8cd 	bl	894c <__swsetup_r>
    b7b2:	2800      	cmp	r0, #0
    b7b4:	d107      	bne.n	b7c6 <__swbuf_r+0xb2>
    b7b6:	230c      	movs	r3, #12
    b7b8:	5ee2      	ldrsh	r2, [r4, r3]
    b7ba:	6923      	ldr	r3, [r4, #16]
    b7bc:	b291      	uxth	r1, r2
    b7be:	e7bc      	b.n	b73a <__swbuf_r+0x26>
    b7c0:	f7fe fad2 	bl	9d68 <__sinit>
    b7c4:	e7af      	b.n	b726 <__swbuf_r+0x12>
    b7c6:	2001      	movs	r0, #1
    b7c8:	4240      	negs	r0, r0
    b7ca:	e7d1      	b.n	b770 <__swbuf_r+0x5c>
    b7cc:	ffffdfff 	.word	0xffffdfff

0000b7d0 <_write_r>:
    b7d0:	b570      	push	{r4, r5, r6, lr}
    b7d2:	0005      	movs	r5, r0
    b7d4:	0008      	movs	r0, r1
    b7d6:	0011      	movs	r1, r2
    b7d8:	2200      	movs	r2, #0
    b7da:	4c06      	ldr	r4, [pc, #24]	; (b7f4 <_write_r+0x24>)
    b7dc:	6022      	str	r2, [r4, #0]
    b7de:	001a      	movs	r2, r3
    b7e0:	f7f8 fdb4 	bl	434c <_write>
    b7e4:	1c43      	adds	r3, r0, #1
    b7e6:	d000      	beq.n	b7ea <_write_r+0x1a>
    b7e8:	bd70      	pop	{r4, r5, r6, pc}
    b7ea:	6823      	ldr	r3, [r4, #0]
    b7ec:	2b00      	cmp	r3, #0
    b7ee:	d0fb      	beq.n	b7e8 <_write_r+0x18>
    b7f0:	602b      	str	r3, [r5, #0]
    b7f2:	e7f9      	b.n	b7e8 <_write_r+0x18>
    b7f4:	20000e5c 	.word	0x20000e5c

0000b7f8 <__register_exitproc>:
    b7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b7fa:	4644      	mov	r4, r8
    b7fc:	465f      	mov	r7, fp
    b7fe:	4656      	mov	r6, sl
    b800:	464d      	mov	r5, r9
    b802:	469b      	mov	fp, r3
    b804:	4b2f      	ldr	r3, [pc, #188]	; (b8c4 <__register_exitproc+0xcc>)
    b806:	b4f0      	push	{r4, r5, r6, r7}
    b808:	681c      	ldr	r4, [r3, #0]
    b80a:	23a4      	movs	r3, #164	; 0xa4
    b80c:	005b      	lsls	r3, r3, #1
    b80e:	0005      	movs	r5, r0
    b810:	58e0      	ldr	r0, [r4, r3]
    b812:	000e      	movs	r6, r1
    b814:	4690      	mov	r8, r2
    b816:	2800      	cmp	r0, #0
    b818:	d04b      	beq.n	b8b2 <__register_exitproc+0xba>
    b81a:	6843      	ldr	r3, [r0, #4]
    b81c:	2b1f      	cmp	r3, #31
    b81e:	dc0d      	bgt.n	b83c <__register_exitproc+0x44>
    b820:	1c5c      	adds	r4, r3, #1
    b822:	2d00      	cmp	r5, #0
    b824:	d121      	bne.n	b86a <__register_exitproc+0x72>
    b826:	3302      	adds	r3, #2
    b828:	009b      	lsls	r3, r3, #2
    b82a:	6044      	str	r4, [r0, #4]
    b82c:	501e      	str	r6, [r3, r0]
    b82e:	2000      	movs	r0, #0
    b830:	bc3c      	pop	{r2, r3, r4, r5}
    b832:	4690      	mov	r8, r2
    b834:	4699      	mov	r9, r3
    b836:	46a2      	mov	sl, r4
    b838:	46ab      	mov	fp, r5
    b83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b83c:	4b22      	ldr	r3, [pc, #136]	; (b8c8 <__register_exitproc+0xd0>)
    b83e:	2b00      	cmp	r3, #0
    b840:	d03c      	beq.n	b8bc <__register_exitproc+0xc4>
    b842:	20c8      	movs	r0, #200	; 0xc8
    b844:	0040      	lsls	r0, r0, #1
    b846:	f7fe fe1d 	bl	a484 <malloc>
    b84a:	2800      	cmp	r0, #0
    b84c:	d036      	beq.n	b8bc <__register_exitproc+0xc4>
    b84e:	22a4      	movs	r2, #164	; 0xa4
    b850:	2300      	movs	r3, #0
    b852:	0052      	lsls	r2, r2, #1
    b854:	58a1      	ldr	r1, [r4, r2]
    b856:	6043      	str	r3, [r0, #4]
    b858:	6001      	str	r1, [r0, #0]
    b85a:	50a0      	str	r0, [r4, r2]
    b85c:	3240      	adds	r2, #64	; 0x40
    b85e:	5083      	str	r3, [r0, r2]
    b860:	3204      	adds	r2, #4
    b862:	5083      	str	r3, [r0, r2]
    b864:	2401      	movs	r4, #1
    b866:	2d00      	cmp	r5, #0
    b868:	d0dd      	beq.n	b826 <__register_exitproc+0x2e>
    b86a:	009a      	lsls	r2, r3, #2
    b86c:	4691      	mov	r9, r2
    b86e:	4481      	add	r9, r0
    b870:	4642      	mov	r2, r8
    b872:	2188      	movs	r1, #136	; 0x88
    b874:	464f      	mov	r7, r9
    b876:	507a      	str	r2, [r7, r1]
    b878:	22c4      	movs	r2, #196	; 0xc4
    b87a:	0052      	lsls	r2, r2, #1
    b87c:	4690      	mov	r8, r2
    b87e:	4480      	add	r8, r0
    b880:	4642      	mov	r2, r8
    b882:	3987      	subs	r1, #135	; 0x87
    b884:	4099      	lsls	r1, r3
    b886:	6812      	ldr	r2, [r2, #0]
    b888:	468a      	mov	sl, r1
    b88a:	430a      	orrs	r2, r1
    b88c:	4694      	mov	ip, r2
    b88e:	4642      	mov	r2, r8
    b890:	4661      	mov	r1, ip
    b892:	6011      	str	r1, [r2, #0]
    b894:	2284      	movs	r2, #132	; 0x84
    b896:	4649      	mov	r1, r9
    b898:	465f      	mov	r7, fp
    b89a:	0052      	lsls	r2, r2, #1
    b89c:	508f      	str	r7, [r1, r2]
    b89e:	2d02      	cmp	r5, #2
    b8a0:	d1c1      	bne.n	b826 <__register_exitproc+0x2e>
    b8a2:	0002      	movs	r2, r0
    b8a4:	4655      	mov	r5, sl
    b8a6:	328d      	adds	r2, #141	; 0x8d
    b8a8:	32ff      	adds	r2, #255	; 0xff
    b8aa:	6811      	ldr	r1, [r2, #0]
    b8ac:	430d      	orrs	r5, r1
    b8ae:	6015      	str	r5, [r2, #0]
    b8b0:	e7b9      	b.n	b826 <__register_exitproc+0x2e>
    b8b2:	0020      	movs	r0, r4
    b8b4:	304d      	adds	r0, #77	; 0x4d
    b8b6:	30ff      	adds	r0, #255	; 0xff
    b8b8:	50e0      	str	r0, [r4, r3]
    b8ba:	e7ae      	b.n	b81a <__register_exitproc+0x22>
    b8bc:	2001      	movs	r0, #1
    b8be:	4240      	negs	r0, r0
    b8c0:	e7b6      	b.n	b830 <__register_exitproc+0x38>
    b8c2:	46c0      	nop			; (mov r8, r8)
    b8c4:	0000ddf8 	.word	0x0000ddf8
    b8c8:	0000a485 	.word	0x0000a485

0000b8cc <_calloc_r>:
    b8cc:	b510      	push	{r4, lr}
    b8ce:	4351      	muls	r1, r2
    b8d0:	f7fe fde2 	bl	a498 <_malloc_r>
    b8d4:	1e04      	subs	r4, r0, #0
    b8d6:	d026      	beq.n	b926 <_calloc_r+0x5a>
    b8d8:	0003      	movs	r3, r0
    b8da:	3b08      	subs	r3, #8
    b8dc:	685a      	ldr	r2, [r3, #4]
    b8de:	2303      	movs	r3, #3
    b8e0:	439a      	bics	r2, r3
    b8e2:	3a04      	subs	r2, #4
    b8e4:	2a24      	cmp	r2, #36	; 0x24
    b8e6:	d816      	bhi.n	b916 <_calloc_r+0x4a>
    b8e8:	0003      	movs	r3, r0
    b8ea:	2a13      	cmp	r2, #19
    b8ec:	d90d      	bls.n	b90a <_calloc_r+0x3e>
    b8ee:	2100      	movs	r1, #0
    b8f0:	3308      	adds	r3, #8
    b8f2:	6001      	str	r1, [r0, #0]
    b8f4:	6041      	str	r1, [r0, #4]
    b8f6:	2a1b      	cmp	r2, #27
    b8f8:	d907      	bls.n	b90a <_calloc_r+0x3e>
    b8fa:	6081      	str	r1, [r0, #8]
    b8fc:	60c1      	str	r1, [r0, #12]
    b8fe:	2a24      	cmp	r2, #36	; 0x24
    b900:	d10e      	bne.n	b920 <_calloc_r+0x54>
    b902:	0003      	movs	r3, r0
    b904:	6101      	str	r1, [r0, #16]
    b906:	3318      	adds	r3, #24
    b908:	6141      	str	r1, [r0, #20]
    b90a:	2200      	movs	r2, #0
    b90c:	0020      	movs	r0, r4
    b90e:	601a      	str	r2, [r3, #0]
    b910:	605a      	str	r2, [r3, #4]
    b912:	609a      	str	r2, [r3, #8]
    b914:	bd10      	pop	{r4, pc}
    b916:	2100      	movs	r1, #0
    b918:	f7fb fa34 	bl	6d84 <memset>
    b91c:	0020      	movs	r0, r4
    b91e:	e7f9      	b.n	b914 <_calloc_r+0x48>
    b920:	0003      	movs	r3, r0
    b922:	3310      	adds	r3, #16
    b924:	e7f1      	b.n	b90a <_calloc_r+0x3e>
    b926:	2000      	movs	r0, #0
    b928:	e7f4      	b.n	b914 <_calloc_r+0x48>
    b92a:	46c0      	nop			; (mov r8, r8)

0000b92c <_close_r>:
    b92c:	2300      	movs	r3, #0
    b92e:	b570      	push	{r4, r5, r6, lr}
    b930:	4c06      	ldr	r4, [pc, #24]	; (b94c <_close_r+0x20>)
    b932:	0005      	movs	r5, r0
    b934:	0008      	movs	r0, r1
    b936:	6023      	str	r3, [r4, #0]
    b938:	f7fa fd16 	bl	6368 <_close>
    b93c:	1c43      	adds	r3, r0, #1
    b93e:	d000      	beq.n	b942 <_close_r+0x16>
    b940:	bd70      	pop	{r4, r5, r6, pc}
    b942:	6823      	ldr	r3, [r4, #0]
    b944:	2b00      	cmp	r3, #0
    b946:	d0fb      	beq.n	b940 <_close_r+0x14>
    b948:	602b      	str	r3, [r5, #0]
    b94a:	e7f9      	b.n	b940 <_close_r+0x14>
    b94c:	20000e5c 	.word	0x20000e5c

0000b950 <_fclose_r>:
    b950:	b570      	push	{r4, r5, r6, lr}
    b952:	0005      	movs	r5, r0
    b954:	1e0c      	subs	r4, r1, #0
    b956:	d008      	beq.n	b96a <_fclose_r+0x1a>
    b958:	2800      	cmp	r0, #0
    b95a:	d002      	beq.n	b962 <_fclose_r+0x12>
    b95c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    b95e:	2b00      	cmp	r3, #0
    b960:	d031      	beq.n	b9c6 <_fclose_r+0x76>
    b962:	220c      	movs	r2, #12
    b964:	5ea3      	ldrsh	r3, [r4, r2]
    b966:	2b00      	cmp	r3, #0
    b968:	d101      	bne.n	b96e <_fclose_r+0x1e>
    b96a:	2000      	movs	r0, #0
    b96c:	bd70      	pop	{r4, r5, r6, pc}
    b96e:	0021      	movs	r1, r4
    b970:	0028      	movs	r0, r5
    b972:	f7fe f8bb 	bl	9aec <__sflush_r>
    b976:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b978:	0006      	movs	r6, r0
    b97a:	2b00      	cmp	r3, #0
    b97c:	d004      	beq.n	b988 <_fclose_r+0x38>
    b97e:	69e1      	ldr	r1, [r4, #28]
    b980:	0028      	movs	r0, r5
    b982:	4798      	blx	r3
    b984:	2800      	cmp	r0, #0
    b986:	db21      	blt.n	b9cc <_fclose_r+0x7c>
    b988:	89a3      	ldrh	r3, [r4, #12]
    b98a:	061b      	lsls	r3, r3, #24
    b98c:	d421      	bmi.n	b9d2 <_fclose_r+0x82>
    b98e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    b990:	2900      	cmp	r1, #0
    b992:	d008      	beq.n	b9a6 <_fclose_r+0x56>
    b994:	0023      	movs	r3, r4
    b996:	3340      	adds	r3, #64	; 0x40
    b998:	4299      	cmp	r1, r3
    b99a:	d002      	beq.n	b9a2 <_fclose_r+0x52>
    b99c:	0028      	movs	r0, r5
    b99e:	f7fe fa59 	bl	9e54 <_free_r>
    b9a2:	2300      	movs	r3, #0
    b9a4:	6323      	str	r3, [r4, #48]	; 0x30
    b9a6:	6c61      	ldr	r1, [r4, #68]	; 0x44
    b9a8:	2900      	cmp	r1, #0
    b9aa:	d004      	beq.n	b9b6 <_fclose_r+0x66>
    b9ac:	0028      	movs	r0, r5
    b9ae:	f7fe fa51 	bl	9e54 <_free_r>
    b9b2:	2300      	movs	r3, #0
    b9b4:	6463      	str	r3, [r4, #68]	; 0x44
    b9b6:	f7fe f9df 	bl	9d78 <__sfp_lock_acquire>
    b9ba:	2300      	movs	r3, #0
    b9bc:	81a3      	strh	r3, [r4, #12]
    b9be:	f7fe f9dd 	bl	9d7c <__sfp_lock_release>
    b9c2:	0030      	movs	r0, r6
    b9c4:	e7d2      	b.n	b96c <_fclose_r+0x1c>
    b9c6:	f7fe f9cf 	bl	9d68 <__sinit>
    b9ca:	e7ca      	b.n	b962 <_fclose_r+0x12>
    b9cc:	2601      	movs	r6, #1
    b9ce:	4276      	negs	r6, r6
    b9d0:	e7da      	b.n	b988 <_fclose_r+0x38>
    b9d2:	6921      	ldr	r1, [r4, #16]
    b9d4:	0028      	movs	r0, r5
    b9d6:	f7fe fa3d 	bl	9e54 <_free_r>
    b9da:	e7d8      	b.n	b98e <_fclose_r+0x3e>

0000b9dc <__fputwc>:
    b9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b9de:	464f      	mov	r7, r9
    b9e0:	4646      	mov	r6, r8
    b9e2:	b4c0      	push	{r6, r7}
    b9e4:	b085      	sub	sp, #20
    b9e6:	4680      	mov	r8, r0
    b9e8:	4689      	mov	r9, r1
    b9ea:	0014      	movs	r4, r2
    b9ec:	f7fe fccc 	bl	a388 <__locale_mb_cur_max>
    b9f0:	2801      	cmp	r0, #1
    b9f2:	d031      	beq.n	ba58 <__fputwc+0x7c>
    b9f4:	0023      	movs	r3, r4
    b9f6:	af03      	add	r7, sp, #12
    b9f8:	335c      	adds	r3, #92	; 0x5c
    b9fa:	464a      	mov	r2, r9
    b9fc:	0039      	movs	r1, r7
    b9fe:	4640      	mov	r0, r8
    ba00:	f000 f896 	bl	bb30 <_wcrtomb_r>
    ba04:	0006      	movs	r6, r0
    ba06:	1c43      	adds	r3, r0, #1
    ba08:	d021      	beq.n	ba4e <__fputwc+0x72>
    ba0a:	2800      	cmp	r0, #0
    ba0c:	d030      	beq.n	ba70 <__fputwc+0x94>
    ba0e:	7839      	ldrb	r1, [r7, #0]
    ba10:	2500      	movs	r5, #0
    ba12:	e007      	b.n	ba24 <__fputwc+0x48>
    ba14:	6823      	ldr	r3, [r4, #0]
    ba16:	1c5a      	adds	r2, r3, #1
    ba18:	6022      	str	r2, [r4, #0]
    ba1a:	7019      	strb	r1, [r3, #0]
    ba1c:	3501      	adds	r5, #1
    ba1e:	42b5      	cmp	r5, r6
    ba20:	d226      	bcs.n	ba70 <__fputwc+0x94>
    ba22:	5d79      	ldrb	r1, [r7, r5]
    ba24:	68a3      	ldr	r3, [r4, #8]
    ba26:	3b01      	subs	r3, #1
    ba28:	60a3      	str	r3, [r4, #8]
    ba2a:	2b00      	cmp	r3, #0
    ba2c:	daf2      	bge.n	ba14 <__fputwc+0x38>
    ba2e:	69a2      	ldr	r2, [r4, #24]
    ba30:	4293      	cmp	r3, r2
    ba32:	db01      	blt.n	ba38 <__fputwc+0x5c>
    ba34:	290a      	cmp	r1, #10
    ba36:	d1ed      	bne.n	ba14 <__fputwc+0x38>
    ba38:	0022      	movs	r2, r4
    ba3a:	4640      	mov	r0, r8
    ba3c:	f7ff fe6a 	bl	b714 <__swbuf_r>
    ba40:	1c43      	adds	r3, r0, #1
    ba42:	d1eb      	bne.n	ba1c <__fputwc+0x40>
    ba44:	b005      	add	sp, #20
    ba46:	bc0c      	pop	{r2, r3}
    ba48:	4690      	mov	r8, r2
    ba4a:	4699      	mov	r9, r3
    ba4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ba4e:	2340      	movs	r3, #64	; 0x40
    ba50:	89a2      	ldrh	r2, [r4, #12]
    ba52:	4313      	orrs	r3, r2
    ba54:	81a3      	strh	r3, [r4, #12]
    ba56:	e7f5      	b.n	ba44 <__fputwc+0x68>
    ba58:	464b      	mov	r3, r9
    ba5a:	3b01      	subs	r3, #1
    ba5c:	2bfe      	cmp	r3, #254	; 0xfe
    ba5e:	d8c9      	bhi.n	b9f4 <__fputwc+0x18>
    ba60:	466a      	mov	r2, sp
    ba62:	464b      	mov	r3, r9
    ba64:	71d3      	strb	r3, [r2, #7]
    ba66:	79d1      	ldrb	r1, [r2, #7]
    ba68:	af03      	add	r7, sp, #12
    ba6a:	7039      	strb	r1, [r7, #0]
    ba6c:	2601      	movs	r6, #1
    ba6e:	e7cf      	b.n	ba10 <__fputwc+0x34>
    ba70:	4648      	mov	r0, r9
    ba72:	e7e7      	b.n	ba44 <__fputwc+0x68>

0000ba74 <_fputwc_r>:
    ba74:	b510      	push	{r4, lr}
    ba76:	240c      	movs	r4, #12
    ba78:	5f13      	ldrsh	r3, [r2, r4]
    ba7a:	2480      	movs	r4, #128	; 0x80
    ba7c:	01a4      	lsls	r4, r4, #6
    ba7e:	4223      	tst	r3, r4
    ba80:	d104      	bne.n	ba8c <_fputwc_r+0x18>
    ba82:	4323      	orrs	r3, r4
    ba84:	8193      	strh	r3, [r2, #12]
    ba86:	6e53      	ldr	r3, [r2, #100]	; 0x64
    ba88:	431c      	orrs	r4, r3
    ba8a:	6654      	str	r4, [r2, #100]	; 0x64
    ba8c:	f7ff ffa6 	bl	b9dc <__fputwc>
    ba90:	bd10      	pop	{r4, pc}
    ba92:	46c0      	nop			; (mov r8, r8)

0000ba94 <_fstat_r>:
    ba94:	2300      	movs	r3, #0
    ba96:	b570      	push	{r4, r5, r6, lr}
    ba98:	4c07      	ldr	r4, [pc, #28]	; (bab8 <_fstat_r+0x24>)
    ba9a:	0005      	movs	r5, r0
    ba9c:	0008      	movs	r0, r1
    ba9e:	0011      	movs	r1, r2
    baa0:	6023      	str	r3, [r4, #0]
    baa2:	f7fa fc6b 	bl	637c <_fstat>
    baa6:	1c43      	adds	r3, r0, #1
    baa8:	d000      	beq.n	baac <_fstat_r+0x18>
    baaa:	bd70      	pop	{r4, r5, r6, pc}
    baac:	6823      	ldr	r3, [r4, #0]
    baae:	2b00      	cmp	r3, #0
    bab0:	d0fb      	beq.n	baaa <_fstat_r+0x16>
    bab2:	602b      	str	r3, [r5, #0]
    bab4:	e7f9      	b.n	baaa <_fstat_r+0x16>
    bab6:	46c0      	nop			; (mov r8, r8)
    bab8:	20000e5c 	.word	0x20000e5c

0000babc <_isatty_r>:
    babc:	2300      	movs	r3, #0
    babe:	b570      	push	{r4, r5, r6, lr}
    bac0:	4c06      	ldr	r4, [pc, #24]	; (badc <_isatty_r+0x20>)
    bac2:	0005      	movs	r5, r0
    bac4:	0008      	movs	r0, r1
    bac6:	6023      	str	r3, [r4, #0]
    bac8:	f7fa fc66 	bl	6398 <_isatty>
    bacc:	1c43      	adds	r3, r0, #1
    bace:	d000      	beq.n	bad2 <_isatty_r+0x16>
    bad0:	bd70      	pop	{r4, r5, r6, pc}
    bad2:	6823      	ldr	r3, [r4, #0]
    bad4:	2b00      	cmp	r3, #0
    bad6:	d0fb      	beq.n	bad0 <_isatty_r+0x14>
    bad8:	602b      	str	r3, [r5, #0]
    bada:	e7f9      	b.n	bad0 <_isatty_r+0x14>
    badc:	20000e5c 	.word	0x20000e5c

0000bae0 <_lseek_r>:
    bae0:	b570      	push	{r4, r5, r6, lr}
    bae2:	0005      	movs	r5, r0
    bae4:	0008      	movs	r0, r1
    bae6:	0011      	movs	r1, r2
    bae8:	2200      	movs	r2, #0
    baea:	4c06      	ldr	r4, [pc, #24]	; (bb04 <_lseek_r+0x24>)
    baec:	6022      	str	r2, [r4, #0]
    baee:	001a      	movs	r2, r3
    baf0:	f7fa fc5c 	bl	63ac <_lseek>
    baf4:	1c43      	adds	r3, r0, #1
    baf6:	d000      	beq.n	bafa <_lseek_r+0x1a>
    baf8:	bd70      	pop	{r4, r5, r6, pc}
    bafa:	6823      	ldr	r3, [r4, #0]
    bafc:	2b00      	cmp	r3, #0
    bafe:	d0fb      	beq.n	baf8 <_lseek_r+0x18>
    bb00:	602b      	str	r3, [r5, #0]
    bb02:	e7f9      	b.n	baf8 <_lseek_r+0x18>
    bb04:	20000e5c 	.word	0x20000e5c

0000bb08 <_read_r>:
    bb08:	b570      	push	{r4, r5, r6, lr}
    bb0a:	0005      	movs	r5, r0
    bb0c:	0008      	movs	r0, r1
    bb0e:	0011      	movs	r1, r2
    bb10:	2200      	movs	r2, #0
    bb12:	4c06      	ldr	r4, [pc, #24]	; (bb2c <_read_r+0x24>)
    bb14:	6022      	str	r2, [r4, #0]
    bb16:	001a      	movs	r2, r3
    bb18:	f7f8 fbee 	bl	42f8 <_read>
    bb1c:	1c43      	adds	r3, r0, #1
    bb1e:	d000      	beq.n	bb22 <_read_r+0x1a>
    bb20:	bd70      	pop	{r4, r5, r6, pc}
    bb22:	6823      	ldr	r3, [r4, #0]
    bb24:	2b00      	cmp	r3, #0
    bb26:	d0fb      	beq.n	bb20 <_read_r+0x18>
    bb28:	602b      	str	r3, [r5, #0]
    bb2a:	e7f9      	b.n	bb20 <_read_r+0x18>
    bb2c:	20000e5c 	.word	0x20000e5c

0000bb30 <_wcrtomb_r>:
    bb30:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb32:	4647      	mov	r7, r8
    bb34:	b480      	push	{r7}
    bb36:	001e      	movs	r6, r3
    bb38:	b086      	sub	sp, #24
    bb3a:	0005      	movs	r5, r0
    bb3c:	000c      	movs	r4, r1
    bb3e:	0017      	movs	r7, r2
    bb40:	4b10      	ldr	r3, [pc, #64]	; (bb84 <_wcrtomb_r+0x54>)
    bb42:	2900      	cmp	r1, #0
    bb44:	d013      	beq.n	bb6e <_wcrtomb_r+0x3e>
    bb46:	681b      	ldr	r3, [r3, #0]
    bb48:	4698      	mov	r8, r3
    bb4a:	f7fe fc19 	bl	a380 <__locale_charset>
    bb4e:	9600      	str	r6, [sp, #0]
    bb50:	0003      	movs	r3, r0
    bb52:	003a      	movs	r2, r7
    bb54:	0021      	movs	r1, r4
    bb56:	0028      	movs	r0, r5
    bb58:	47c0      	blx	r8
    bb5a:	1c43      	adds	r3, r0, #1
    bb5c:	d103      	bne.n	bb66 <_wcrtomb_r+0x36>
    bb5e:	2300      	movs	r3, #0
    bb60:	6033      	str	r3, [r6, #0]
    bb62:	338a      	adds	r3, #138	; 0x8a
    bb64:	602b      	str	r3, [r5, #0]
    bb66:	b006      	add	sp, #24
    bb68:	bc04      	pop	{r2}
    bb6a:	4690      	mov	r8, r2
    bb6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bb6e:	681c      	ldr	r4, [r3, #0]
    bb70:	f7fe fc06 	bl	a380 <__locale_charset>
    bb74:	9600      	str	r6, [sp, #0]
    bb76:	0003      	movs	r3, r0
    bb78:	2200      	movs	r2, #0
    bb7a:	a903      	add	r1, sp, #12
    bb7c:	0028      	movs	r0, r5
    bb7e:	47a0      	blx	r4
    bb80:	e7eb      	b.n	bb5a <_wcrtomb_r+0x2a>
    bb82:	46c0      	nop			; (mov r8, r8)
    bb84:	200008a8 	.word	0x200008a8

0000bb88 <__ascii_wctomb>:
    bb88:	2900      	cmp	r1, #0
    bb8a:	d004      	beq.n	bb96 <__ascii_wctomb+0xe>
    bb8c:	2aff      	cmp	r2, #255	; 0xff
    bb8e:	d804      	bhi.n	bb9a <__ascii_wctomb+0x12>
    bb90:	2001      	movs	r0, #1
    bb92:	700a      	strb	r2, [r1, #0]
    bb94:	4770      	bx	lr
    bb96:	2000      	movs	r0, #0
    bb98:	e7fc      	b.n	bb94 <__ascii_wctomb+0xc>
    bb9a:	238a      	movs	r3, #138	; 0x8a
    bb9c:	6003      	str	r3, [r0, #0]
    bb9e:	2001      	movs	r0, #1
    bba0:	4240      	negs	r0, r0
    bba2:	e7f7      	b.n	bb94 <__ascii_wctomb+0xc>

0000bba4 <__aeabi_idiv>:
    bba4:	4603      	mov	r3, r0
    bba6:	430b      	orrs	r3, r1
    bba8:	d47f      	bmi.n	bcaa <__aeabi_idiv+0x106>
    bbaa:	2200      	movs	r2, #0
    bbac:	0843      	lsrs	r3, r0, #1
    bbae:	428b      	cmp	r3, r1
    bbb0:	d374      	bcc.n	bc9c <__aeabi_idiv+0xf8>
    bbb2:	0903      	lsrs	r3, r0, #4
    bbb4:	428b      	cmp	r3, r1
    bbb6:	d35f      	bcc.n	bc78 <__aeabi_idiv+0xd4>
    bbb8:	0a03      	lsrs	r3, r0, #8
    bbba:	428b      	cmp	r3, r1
    bbbc:	d344      	bcc.n	bc48 <__aeabi_idiv+0xa4>
    bbbe:	0b03      	lsrs	r3, r0, #12
    bbc0:	428b      	cmp	r3, r1
    bbc2:	d328      	bcc.n	bc16 <__aeabi_idiv+0x72>
    bbc4:	0c03      	lsrs	r3, r0, #16
    bbc6:	428b      	cmp	r3, r1
    bbc8:	d30d      	bcc.n	bbe6 <__aeabi_idiv+0x42>
    bbca:	22ff      	movs	r2, #255	; 0xff
    bbcc:	0209      	lsls	r1, r1, #8
    bbce:	ba12      	rev	r2, r2
    bbd0:	0c03      	lsrs	r3, r0, #16
    bbd2:	428b      	cmp	r3, r1
    bbd4:	d302      	bcc.n	bbdc <__aeabi_idiv+0x38>
    bbd6:	1212      	asrs	r2, r2, #8
    bbd8:	0209      	lsls	r1, r1, #8
    bbda:	d065      	beq.n	bca8 <__aeabi_idiv+0x104>
    bbdc:	0b03      	lsrs	r3, r0, #12
    bbde:	428b      	cmp	r3, r1
    bbe0:	d319      	bcc.n	bc16 <__aeabi_idiv+0x72>
    bbe2:	e000      	b.n	bbe6 <__aeabi_idiv+0x42>
    bbe4:	0a09      	lsrs	r1, r1, #8
    bbe6:	0bc3      	lsrs	r3, r0, #15
    bbe8:	428b      	cmp	r3, r1
    bbea:	d301      	bcc.n	bbf0 <__aeabi_idiv+0x4c>
    bbec:	03cb      	lsls	r3, r1, #15
    bbee:	1ac0      	subs	r0, r0, r3
    bbf0:	4152      	adcs	r2, r2
    bbf2:	0b83      	lsrs	r3, r0, #14
    bbf4:	428b      	cmp	r3, r1
    bbf6:	d301      	bcc.n	bbfc <__aeabi_idiv+0x58>
    bbf8:	038b      	lsls	r3, r1, #14
    bbfa:	1ac0      	subs	r0, r0, r3
    bbfc:	4152      	adcs	r2, r2
    bbfe:	0b43      	lsrs	r3, r0, #13
    bc00:	428b      	cmp	r3, r1
    bc02:	d301      	bcc.n	bc08 <__aeabi_idiv+0x64>
    bc04:	034b      	lsls	r3, r1, #13
    bc06:	1ac0      	subs	r0, r0, r3
    bc08:	4152      	adcs	r2, r2
    bc0a:	0b03      	lsrs	r3, r0, #12
    bc0c:	428b      	cmp	r3, r1
    bc0e:	d301      	bcc.n	bc14 <__aeabi_idiv+0x70>
    bc10:	030b      	lsls	r3, r1, #12
    bc12:	1ac0      	subs	r0, r0, r3
    bc14:	4152      	adcs	r2, r2
    bc16:	0ac3      	lsrs	r3, r0, #11
    bc18:	428b      	cmp	r3, r1
    bc1a:	d301      	bcc.n	bc20 <__aeabi_idiv+0x7c>
    bc1c:	02cb      	lsls	r3, r1, #11
    bc1e:	1ac0      	subs	r0, r0, r3
    bc20:	4152      	adcs	r2, r2
    bc22:	0a83      	lsrs	r3, r0, #10
    bc24:	428b      	cmp	r3, r1
    bc26:	d301      	bcc.n	bc2c <__aeabi_idiv+0x88>
    bc28:	028b      	lsls	r3, r1, #10
    bc2a:	1ac0      	subs	r0, r0, r3
    bc2c:	4152      	adcs	r2, r2
    bc2e:	0a43      	lsrs	r3, r0, #9
    bc30:	428b      	cmp	r3, r1
    bc32:	d301      	bcc.n	bc38 <__aeabi_idiv+0x94>
    bc34:	024b      	lsls	r3, r1, #9
    bc36:	1ac0      	subs	r0, r0, r3
    bc38:	4152      	adcs	r2, r2
    bc3a:	0a03      	lsrs	r3, r0, #8
    bc3c:	428b      	cmp	r3, r1
    bc3e:	d301      	bcc.n	bc44 <__aeabi_idiv+0xa0>
    bc40:	020b      	lsls	r3, r1, #8
    bc42:	1ac0      	subs	r0, r0, r3
    bc44:	4152      	adcs	r2, r2
    bc46:	d2cd      	bcs.n	bbe4 <__aeabi_idiv+0x40>
    bc48:	09c3      	lsrs	r3, r0, #7
    bc4a:	428b      	cmp	r3, r1
    bc4c:	d301      	bcc.n	bc52 <__aeabi_idiv+0xae>
    bc4e:	01cb      	lsls	r3, r1, #7
    bc50:	1ac0      	subs	r0, r0, r3
    bc52:	4152      	adcs	r2, r2
    bc54:	0983      	lsrs	r3, r0, #6
    bc56:	428b      	cmp	r3, r1
    bc58:	d301      	bcc.n	bc5e <__aeabi_idiv+0xba>
    bc5a:	018b      	lsls	r3, r1, #6
    bc5c:	1ac0      	subs	r0, r0, r3
    bc5e:	4152      	adcs	r2, r2
    bc60:	0943      	lsrs	r3, r0, #5
    bc62:	428b      	cmp	r3, r1
    bc64:	d301      	bcc.n	bc6a <__aeabi_idiv+0xc6>
    bc66:	014b      	lsls	r3, r1, #5
    bc68:	1ac0      	subs	r0, r0, r3
    bc6a:	4152      	adcs	r2, r2
    bc6c:	0903      	lsrs	r3, r0, #4
    bc6e:	428b      	cmp	r3, r1
    bc70:	d301      	bcc.n	bc76 <__aeabi_idiv+0xd2>
    bc72:	010b      	lsls	r3, r1, #4
    bc74:	1ac0      	subs	r0, r0, r3
    bc76:	4152      	adcs	r2, r2
    bc78:	08c3      	lsrs	r3, r0, #3
    bc7a:	428b      	cmp	r3, r1
    bc7c:	d301      	bcc.n	bc82 <__aeabi_idiv+0xde>
    bc7e:	00cb      	lsls	r3, r1, #3
    bc80:	1ac0      	subs	r0, r0, r3
    bc82:	4152      	adcs	r2, r2
    bc84:	0883      	lsrs	r3, r0, #2
    bc86:	428b      	cmp	r3, r1
    bc88:	d301      	bcc.n	bc8e <__aeabi_idiv+0xea>
    bc8a:	008b      	lsls	r3, r1, #2
    bc8c:	1ac0      	subs	r0, r0, r3
    bc8e:	4152      	adcs	r2, r2
    bc90:	0843      	lsrs	r3, r0, #1
    bc92:	428b      	cmp	r3, r1
    bc94:	d301      	bcc.n	bc9a <__aeabi_idiv+0xf6>
    bc96:	004b      	lsls	r3, r1, #1
    bc98:	1ac0      	subs	r0, r0, r3
    bc9a:	4152      	adcs	r2, r2
    bc9c:	1a41      	subs	r1, r0, r1
    bc9e:	d200      	bcs.n	bca2 <__aeabi_idiv+0xfe>
    bca0:	4601      	mov	r1, r0
    bca2:	4152      	adcs	r2, r2
    bca4:	4610      	mov	r0, r2
    bca6:	4770      	bx	lr
    bca8:	e05d      	b.n	bd66 <__aeabi_idiv+0x1c2>
    bcaa:	0fca      	lsrs	r2, r1, #31
    bcac:	d000      	beq.n	bcb0 <__aeabi_idiv+0x10c>
    bcae:	4249      	negs	r1, r1
    bcb0:	1003      	asrs	r3, r0, #32
    bcb2:	d300      	bcc.n	bcb6 <__aeabi_idiv+0x112>
    bcb4:	4240      	negs	r0, r0
    bcb6:	4053      	eors	r3, r2
    bcb8:	2200      	movs	r2, #0
    bcba:	469c      	mov	ip, r3
    bcbc:	0903      	lsrs	r3, r0, #4
    bcbe:	428b      	cmp	r3, r1
    bcc0:	d32d      	bcc.n	bd1e <__aeabi_idiv+0x17a>
    bcc2:	0a03      	lsrs	r3, r0, #8
    bcc4:	428b      	cmp	r3, r1
    bcc6:	d312      	bcc.n	bcee <__aeabi_idiv+0x14a>
    bcc8:	22fc      	movs	r2, #252	; 0xfc
    bcca:	0189      	lsls	r1, r1, #6
    bccc:	ba12      	rev	r2, r2
    bcce:	0a03      	lsrs	r3, r0, #8
    bcd0:	428b      	cmp	r3, r1
    bcd2:	d30c      	bcc.n	bcee <__aeabi_idiv+0x14a>
    bcd4:	0189      	lsls	r1, r1, #6
    bcd6:	1192      	asrs	r2, r2, #6
    bcd8:	428b      	cmp	r3, r1
    bcda:	d308      	bcc.n	bcee <__aeabi_idiv+0x14a>
    bcdc:	0189      	lsls	r1, r1, #6
    bcde:	1192      	asrs	r2, r2, #6
    bce0:	428b      	cmp	r3, r1
    bce2:	d304      	bcc.n	bcee <__aeabi_idiv+0x14a>
    bce4:	0189      	lsls	r1, r1, #6
    bce6:	d03a      	beq.n	bd5e <__aeabi_idiv+0x1ba>
    bce8:	1192      	asrs	r2, r2, #6
    bcea:	e000      	b.n	bcee <__aeabi_idiv+0x14a>
    bcec:	0989      	lsrs	r1, r1, #6
    bcee:	09c3      	lsrs	r3, r0, #7
    bcf0:	428b      	cmp	r3, r1
    bcf2:	d301      	bcc.n	bcf8 <__aeabi_idiv+0x154>
    bcf4:	01cb      	lsls	r3, r1, #7
    bcf6:	1ac0      	subs	r0, r0, r3
    bcf8:	4152      	adcs	r2, r2
    bcfa:	0983      	lsrs	r3, r0, #6
    bcfc:	428b      	cmp	r3, r1
    bcfe:	d301      	bcc.n	bd04 <__aeabi_idiv+0x160>
    bd00:	018b      	lsls	r3, r1, #6
    bd02:	1ac0      	subs	r0, r0, r3
    bd04:	4152      	adcs	r2, r2
    bd06:	0943      	lsrs	r3, r0, #5
    bd08:	428b      	cmp	r3, r1
    bd0a:	d301      	bcc.n	bd10 <__aeabi_idiv+0x16c>
    bd0c:	014b      	lsls	r3, r1, #5
    bd0e:	1ac0      	subs	r0, r0, r3
    bd10:	4152      	adcs	r2, r2
    bd12:	0903      	lsrs	r3, r0, #4
    bd14:	428b      	cmp	r3, r1
    bd16:	d301      	bcc.n	bd1c <__aeabi_idiv+0x178>
    bd18:	010b      	lsls	r3, r1, #4
    bd1a:	1ac0      	subs	r0, r0, r3
    bd1c:	4152      	adcs	r2, r2
    bd1e:	08c3      	lsrs	r3, r0, #3
    bd20:	428b      	cmp	r3, r1
    bd22:	d301      	bcc.n	bd28 <__aeabi_idiv+0x184>
    bd24:	00cb      	lsls	r3, r1, #3
    bd26:	1ac0      	subs	r0, r0, r3
    bd28:	4152      	adcs	r2, r2
    bd2a:	0883      	lsrs	r3, r0, #2
    bd2c:	428b      	cmp	r3, r1
    bd2e:	d301      	bcc.n	bd34 <__aeabi_idiv+0x190>
    bd30:	008b      	lsls	r3, r1, #2
    bd32:	1ac0      	subs	r0, r0, r3
    bd34:	4152      	adcs	r2, r2
    bd36:	d2d9      	bcs.n	bcec <__aeabi_idiv+0x148>
    bd38:	0843      	lsrs	r3, r0, #1
    bd3a:	428b      	cmp	r3, r1
    bd3c:	d301      	bcc.n	bd42 <__aeabi_idiv+0x19e>
    bd3e:	004b      	lsls	r3, r1, #1
    bd40:	1ac0      	subs	r0, r0, r3
    bd42:	4152      	adcs	r2, r2
    bd44:	1a41      	subs	r1, r0, r1
    bd46:	d200      	bcs.n	bd4a <__aeabi_idiv+0x1a6>
    bd48:	4601      	mov	r1, r0
    bd4a:	4663      	mov	r3, ip
    bd4c:	4152      	adcs	r2, r2
    bd4e:	105b      	asrs	r3, r3, #1
    bd50:	4610      	mov	r0, r2
    bd52:	d301      	bcc.n	bd58 <__aeabi_idiv+0x1b4>
    bd54:	4240      	negs	r0, r0
    bd56:	2b00      	cmp	r3, #0
    bd58:	d500      	bpl.n	bd5c <__aeabi_idiv+0x1b8>
    bd5a:	4249      	negs	r1, r1
    bd5c:	4770      	bx	lr
    bd5e:	4663      	mov	r3, ip
    bd60:	105b      	asrs	r3, r3, #1
    bd62:	d300      	bcc.n	bd66 <__aeabi_idiv+0x1c2>
    bd64:	4240      	negs	r0, r0
    bd66:	b501      	push	{r0, lr}
    bd68:	2000      	movs	r0, #0
    bd6a:	f7fa fbb5 	bl	64d8 <__aeabi_idiv0>
    bd6e:	bd02      	pop	{r1, pc}

0000bd70 <__aeabi_idivmod>:
    bd70:	2900      	cmp	r1, #0
    bd72:	d0f8      	beq.n	bd66 <__aeabi_idiv+0x1c2>
    bd74:	e716      	b.n	bba4 <__aeabi_idiv>
    bd76:	4770      	bx	lr

0000bd78 <__aeabi_cdrcmple>:
    bd78:	4684      	mov	ip, r0
    bd7a:	1c10      	adds	r0, r2, #0
    bd7c:	4662      	mov	r2, ip
    bd7e:	468c      	mov	ip, r1
    bd80:	1c19      	adds	r1, r3, #0
    bd82:	4663      	mov	r3, ip
    bd84:	e000      	b.n	bd88 <__aeabi_cdcmpeq>
    bd86:	46c0      	nop			; (mov r8, r8)

0000bd88 <__aeabi_cdcmpeq>:
    bd88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    bd8a:	f000 ff19 	bl	cbc0 <__ledf2>
    bd8e:	2800      	cmp	r0, #0
    bd90:	d401      	bmi.n	bd96 <__aeabi_cdcmpeq+0xe>
    bd92:	2100      	movs	r1, #0
    bd94:	42c8      	cmn	r0, r1
    bd96:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000bd98 <__aeabi_dcmpeq>:
    bd98:	b510      	push	{r4, lr}
    bd9a:	f000 fe6d 	bl	ca78 <__eqdf2>
    bd9e:	4240      	negs	r0, r0
    bda0:	3001      	adds	r0, #1
    bda2:	bd10      	pop	{r4, pc}

0000bda4 <__aeabi_dcmplt>:
    bda4:	b510      	push	{r4, lr}
    bda6:	f000 ff0b 	bl	cbc0 <__ledf2>
    bdaa:	2800      	cmp	r0, #0
    bdac:	db01      	blt.n	bdb2 <__aeabi_dcmplt+0xe>
    bdae:	2000      	movs	r0, #0
    bdb0:	bd10      	pop	{r4, pc}
    bdb2:	2001      	movs	r0, #1
    bdb4:	bd10      	pop	{r4, pc}
    bdb6:	46c0      	nop			; (mov r8, r8)

0000bdb8 <__aeabi_dcmple>:
    bdb8:	b510      	push	{r4, lr}
    bdba:	f000 ff01 	bl	cbc0 <__ledf2>
    bdbe:	2800      	cmp	r0, #0
    bdc0:	dd01      	ble.n	bdc6 <__aeabi_dcmple+0xe>
    bdc2:	2000      	movs	r0, #0
    bdc4:	bd10      	pop	{r4, pc}
    bdc6:	2001      	movs	r0, #1
    bdc8:	bd10      	pop	{r4, pc}
    bdca:	46c0      	nop			; (mov r8, r8)

0000bdcc <__aeabi_dcmpgt>:
    bdcc:	b510      	push	{r4, lr}
    bdce:	f000 fe93 	bl	caf8 <__gedf2>
    bdd2:	2800      	cmp	r0, #0
    bdd4:	dc01      	bgt.n	bdda <__aeabi_dcmpgt+0xe>
    bdd6:	2000      	movs	r0, #0
    bdd8:	bd10      	pop	{r4, pc}
    bdda:	2001      	movs	r0, #1
    bddc:	bd10      	pop	{r4, pc}
    bdde:	46c0      	nop			; (mov r8, r8)

0000bde0 <__aeabi_dcmpge>:
    bde0:	b510      	push	{r4, lr}
    bde2:	f000 fe89 	bl	caf8 <__gedf2>
    bde6:	2800      	cmp	r0, #0
    bde8:	da01      	bge.n	bdee <__aeabi_dcmpge+0xe>
    bdea:	2000      	movs	r0, #0
    bdec:	bd10      	pop	{r4, pc}
    bdee:	2001      	movs	r0, #1
    bdf0:	bd10      	pop	{r4, pc}
    bdf2:	46c0      	nop			; (mov r8, r8)

0000bdf4 <__aeabi_dadd>:
    bdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bdf6:	4656      	mov	r6, sl
    bdf8:	465f      	mov	r7, fp
    bdfa:	464d      	mov	r5, r9
    bdfc:	4644      	mov	r4, r8
    bdfe:	b4f0      	push	{r4, r5, r6, r7}
    be00:	000f      	movs	r7, r1
    be02:	0ffd      	lsrs	r5, r7, #31
    be04:	46aa      	mov	sl, r5
    be06:	0309      	lsls	r1, r1, #12
    be08:	007c      	lsls	r4, r7, #1
    be0a:	002e      	movs	r6, r5
    be0c:	005f      	lsls	r7, r3, #1
    be0e:	0f45      	lsrs	r5, r0, #29
    be10:	0a49      	lsrs	r1, r1, #9
    be12:	0d7f      	lsrs	r7, r7, #21
    be14:	4329      	orrs	r1, r5
    be16:	00c5      	lsls	r5, r0, #3
    be18:	0318      	lsls	r0, r3, #12
    be1a:	46bc      	mov	ip, r7
    be1c:	0a40      	lsrs	r0, r0, #9
    be1e:	0f57      	lsrs	r7, r2, #29
    be20:	0d64      	lsrs	r4, r4, #21
    be22:	0fdb      	lsrs	r3, r3, #31
    be24:	4338      	orrs	r0, r7
    be26:	00d2      	lsls	r2, r2, #3
    be28:	459a      	cmp	sl, r3
    be2a:	d100      	bne.n	be2e <__aeabi_dadd+0x3a>
    be2c:	e0aa      	b.n	bf84 <__aeabi_dadd+0x190>
    be2e:	4666      	mov	r6, ip
    be30:	1ba6      	subs	r6, r4, r6
    be32:	2e00      	cmp	r6, #0
    be34:	dc00      	bgt.n	be38 <__aeabi_dadd+0x44>
    be36:	e0ff      	b.n	c038 <__aeabi_dadd+0x244>
    be38:	4663      	mov	r3, ip
    be3a:	2b00      	cmp	r3, #0
    be3c:	d139      	bne.n	beb2 <__aeabi_dadd+0xbe>
    be3e:	0003      	movs	r3, r0
    be40:	4313      	orrs	r3, r2
    be42:	d000      	beq.n	be46 <__aeabi_dadd+0x52>
    be44:	e0d9      	b.n	bffa <__aeabi_dadd+0x206>
    be46:	076b      	lsls	r3, r5, #29
    be48:	d009      	beq.n	be5e <__aeabi_dadd+0x6a>
    be4a:	230f      	movs	r3, #15
    be4c:	402b      	ands	r3, r5
    be4e:	2b04      	cmp	r3, #4
    be50:	d005      	beq.n	be5e <__aeabi_dadd+0x6a>
    be52:	1d2b      	adds	r3, r5, #4
    be54:	42ab      	cmp	r3, r5
    be56:	41ad      	sbcs	r5, r5
    be58:	426d      	negs	r5, r5
    be5a:	1949      	adds	r1, r1, r5
    be5c:	001d      	movs	r5, r3
    be5e:	020b      	lsls	r3, r1, #8
    be60:	d400      	bmi.n	be64 <__aeabi_dadd+0x70>
    be62:	e082      	b.n	bf6a <__aeabi_dadd+0x176>
    be64:	4bca      	ldr	r3, [pc, #808]	; (c190 <__aeabi_dadd+0x39c>)
    be66:	3401      	adds	r4, #1
    be68:	429c      	cmp	r4, r3
    be6a:	d100      	bne.n	be6e <__aeabi_dadd+0x7a>
    be6c:	e0fe      	b.n	c06c <__aeabi_dadd+0x278>
    be6e:	000a      	movs	r2, r1
    be70:	4656      	mov	r6, sl
    be72:	4bc8      	ldr	r3, [pc, #800]	; (c194 <__aeabi_dadd+0x3a0>)
    be74:	08ed      	lsrs	r5, r5, #3
    be76:	401a      	ands	r2, r3
    be78:	0750      	lsls	r0, r2, #29
    be7a:	0564      	lsls	r4, r4, #21
    be7c:	0252      	lsls	r2, r2, #9
    be7e:	4305      	orrs	r5, r0
    be80:	0b12      	lsrs	r2, r2, #12
    be82:	0d64      	lsrs	r4, r4, #21
    be84:	2100      	movs	r1, #0
    be86:	0312      	lsls	r2, r2, #12
    be88:	0d0b      	lsrs	r3, r1, #20
    be8a:	051b      	lsls	r3, r3, #20
    be8c:	0564      	lsls	r4, r4, #21
    be8e:	0b12      	lsrs	r2, r2, #12
    be90:	431a      	orrs	r2, r3
    be92:	0863      	lsrs	r3, r4, #1
    be94:	4cc0      	ldr	r4, [pc, #768]	; (c198 <__aeabi_dadd+0x3a4>)
    be96:	07f6      	lsls	r6, r6, #31
    be98:	4014      	ands	r4, r2
    be9a:	431c      	orrs	r4, r3
    be9c:	0064      	lsls	r4, r4, #1
    be9e:	0864      	lsrs	r4, r4, #1
    bea0:	4334      	orrs	r4, r6
    bea2:	0028      	movs	r0, r5
    bea4:	0021      	movs	r1, r4
    bea6:	bc3c      	pop	{r2, r3, r4, r5}
    bea8:	4690      	mov	r8, r2
    beaa:	4699      	mov	r9, r3
    beac:	46a2      	mov	sl, r4
    beae:	46ab      	mov	fp, r5
    beb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    beb2:	4bb7      	ldr	r3, [pc, #732]	; (c190 <__aeabi_dadd+0x39c>)
    beb4:	429c      	cmp	r4, r3
    beb6:	d0c6      	beq.n	be46 <__aeabi_dadd+0x52>
    beb8:	2380      	movs	r3, #128	; 0x80
    beba:	041b      	lsls	r3, r3, #16
    bebc:	4318      	orrs	r0, r3
    bebe:	2e38      	cmp	r6, #56	; 0x38
    bec0:	dd00      	ble.n	bec4 <__aeabi_dadd+0xd0>
    bec2:	e0eb      	b.n	c09c <__aeabi_dadd+0x2a8>
    bec4:	2e1f      	cmp	r6, #31
    bec6:	dd00      	ble.n	beca <__aeabi_dadd+0xd6>
    bec8:	e11e      	b.n	c108 <__aeabi_dadd+0x314>
    beca:	2320      	movs	r3, #32
    becc:	1b9b      	subs	r3, r3, r6
    bece:	469c      	mov	ip, r3
    bed0:	0003      	movs	r3, r0
    bed2:	4667      	mov	r7, ip
    bed4:	40bb      	lsls	r3, r7
    bed6:	4698      	mov	r8, r3
    bed8:	0013      	movs	r3, r2
    beda:	4647      	mov	r7, r8
    bedc:	40f3      	lsrs	r3, r6
    bede:	433b      	orrs	r3, r7
    bee0:	4667      	mov	r7, ip
    bee2:	40ba      	lsls	r2, r7
    bee4:	1e57      	subs	r7, r2, #1
    bee6:	41ba      	sbcs	r2, r7
    bee8:	4313      	orrs	r3, r2
    beea:	0002      	movs	r2, r0
    beec:	40f2      	lsrs	r2, r6
    beee:	1aeb      	subs	r3, r5, r3
    bef0:	429d      	cmp	r5, r3
    bef2:	41b6      	sbcs	r6, r6
    bef4:	001d      	movs	r5, r3
    bef6:	1a8a      	subs	r2, r1, r2
    bef8:	4276      	negs	r6, r6
    befa:	1b91      	subs	r1, r2, r6
    befc:	020b      	lsls	r3, r1, #8
    befe:	d531      	bpl.n	bf64 <__aeabi_dadd+0x170>
    bf00:	024a      	lsls	r2, r1, #9
    bf02:	0a56      	lsrs	r6, r2, #9
    bf04:	2e00      	cmp	r6, #0
    bf06:	d100      	bne.n	bf0a <__aeabi_dadd+0x116>
    bf08:	e0b4      	b.n	c074 <__aeabi_dadd+0x280>
    bf0a:	0030      	movs	r0, r6
    bf0c:	f7fa feae 	bl	6c6c <__clzsi2>
    bf10:	0003      	movs	r3, r0
    bf12:	3b08      	subs	r3, #8
    bf14:	2b1f      	cmp	r3, #31
    bf16:	dd00      	ble.n	bf1a <__aeabi_dadd+0x126>
    bf18:	e0b5      	b.n	c086 <__aeabi_dadd+0x292>
    bf1a:	2220      	movs	r2, #32
    bf1c:	0029      	movs	r1, r5
    bf1e:	1ad2      	subs	r2, r2, r3
    bf20:	40d1      	lsrs	r1, r2
    bf22:	409e      	lsls	r6, r3
    bf24:	000a      	movs	r2, r1
    bf26:	409d      	lsls	r5, r3
    bf28:	4332      	orrs	r2, r6
    bf2a:	429c      	cmp	r4, r3
    bf2c:	dd00      	ble.n	bf30 <__aeabi_dadd+0x13c>
    bf2e:	e0b1      	b.n	c094 <__aeabi_dadd+0x2a0>
    bf30:	1b1c      	subs	r4, r3, r4
    bf32:	1c63      	adds	r3, r4, #1
    bf34:	2b1f      	cmp	r3, #31
    bf36:	dd00      	ble.n	bf3a <__aeabi_dadd+0x146>
    bf38:	e0d5      	b.n	c0e6 <__aeabi_dadd+0x2f2>
    bf3a:	2120      	movs	r1, #32
    bf3c:	0014      	movs	r4, r2
    bf3e:	0028      	movs	r0, r5
    bf40:	1ac9      	subs	r1, r1, r3
    bf42:	408c      	lsls	r4, r1
    bf44:	40d8      	lsrs	r0, r3
    bf46:	408d      	lsls	r5, r1
    bf48:	4304      	orrs	r4, r0
    bf4a:	40da      	lsrs	r2, r3
    bf4c:	1e68      	subs	r0, r5, #1
    bf4e:	4185      	sbcs	r5, r0
    bf50:	0011      	movs	r1, r2
    bf52:	4325      	orrs	r5, r4
    bf54:	2400      	movs	r4, #0
    bf56:	e776      	b.n	be46 <__aeabi_dadd+0x52>
    bf58:	4641      	mov	r1, r8
    bf5a:	4331      	orrs	r1, r6
    bf5c:	d100      	bne.n	bf60 <__aeabi_dadd+0x16c>
    bf5e:	e234      	b.n	c3ca <__aeabi_dadd+0x5d6>
    bf60:	0031      	movs	r1, r6
    bf62:	4645      	mov	r5, r8
    bf64:	076b      	lsls	r3, r5, #29
    bf66:	d000      	beq.n	bf6a <__aeabi_dadd+0x176>
    bf68:	e76f      	b.n	be4a <__aeabi_dadd+0x56>
    bf6a:	4656      	mov	r6, sl
    bf6c:	0748      	lsls	r0, r1, #29
    bf6e:	08ed      	lsrs	r5, r5, #3
    bf70:	08c9      	lsrs	r1, r1, #3
    bf72:	4305      	orrs	r5, r0
    bf74:	4b86      	ldr	r3, [pc, #536]	; (c190 <__aeabi_dadd+0x39c>)
    bf76:	429c      	cmp	r4, r3
    bf78:	d035      	beq.n	bfe6 <__aeabi_dadd+0x1f2>
    bf7a:	030a      	lsls	r2, r1, #12
    bf7c:	0564      	lsls	r4, r4, #21
    bf7e:	0b12      	lsrs	r2, r2, #12
    bf80:	0d64      	lsrs	r4, r4, #21
    bf82:	e77f      	b.n	be84 <__aeabi_dadd+0x90>
    bf84:	4663      	mov	r3, ip
    bf86:	1ae3      	subs	r3, r4, r3
    bf88:	469b      	mov	fp, r3
    bf8a:	2b00      	cmp	r3, #0
    bf8c:	dc00      	bgt.n	bf90 <__aeabi_dadd+0x19c>
    bf8e:	e08b      	b.n	c0a8 <__aeabi_dadd+0x2b4>
    bf90:	4667      	mov	r7, ip
    bf92:	2f00      	cmp	r7, #0
    bf94:	d03c      	beq.n	c010 <__aeabi_dadd+0x21c>
    bf96:	4f7e      	ldr	r7, [pc, #504]	; (c190 <__aeabi_dadd+0x39c>)
    bf98:	42bc      	cmp	r4, r7
    bf9a:	d100      	bne.n	bf9e <__aeabi_dadd+0x1aa>
    bf9c:	e753      	b.n	be46 <__aeabi_dadd+0x52>
    bf9e:	2780      	movs	r7, #128	; 0x80
    bfa0:	043f      	lsls	r7, r7, #16
    bfa2:	4338      	orrs	r0, r7
    bfa4:	465b      	mov	r3, fp
    bfa6:	2b38      	cmp	r3, #56	; 0x38
    bfa8:	dc00      	bgt.n	bfac <__aeabi_dadd+0x1b8>
    bfaa:	e0f7      	b.n	c19c <__aeabi_dadd+0x3a8>
    bfac:	4302      	orrs	r2, r0
    bfae:	1e50      	subs	r0, r2, #1
    bfb0:	4182      	sbcs	r2, r0
    bfb2:	2000      	movs	r0, #0
    bfb4:	b2d2      	uxtb	r2, r2
    bfb6:	1953      	adds	r3, r2, r5
    bfb8:	1842      	adds	r2, r0, r1
    bfba:	42ab      	cmp	r3, r5
    bfbc:	4189      	sbcs	r1, r1
    bfbe:	001d      	movs	r5, r3
    bfc0:	4249      	negs	r1, r1
    bfc2:	1889      	adds	r1, r1, r2
    bfc4:	020b      	lsls	r3, r1, #8
    bfc6:	d5cd      	bpl.n	bf64 <__aeabi_dadd+0x170>
    bfc8:	4b71      	ldr	r3, [pc, #452]	; (c190 <__aeabi_dadd+0x39c>)
    bfca:	3401      	adds	r4, #1
    bfcc:	429c      	cmp	r4, r3
    bfce:	d100      	bne.n	bfd2 <__aeabi_dadd+0x1de>
    bfd0:	e13d      	b.n	c24e <__aeabi_dadd+0x45a>
    bfd2:	2001      	movs	r0, #1
    bfd4:	4a6f      	ldr	r2, [pc, #444]	; (c194 <__aeabi_dadd+0x3a0>)
    bfd6:	086b      	lsrs	r3, r5, #1
    bfd8:	400a      	ands	r2, r1
    bfda:	4028      	ands	r0, r5
    bfdc:	4318      	orrs	r0, r3
    bfde:	07d5      	lsls	r5, r2, #31
    bfe0:	4305      	orrs	r5, r0
    bfe2:	0851      	lsrs	r1, r2, #1
    bfe4:	e72f      	b.n	be46 <__aeabi_dadd+0x52>
    bfe6:	002b      	movs	r3, r5
    bfe8:	430b      	orrs	r3, r1
    bfea:	d100      	bne.n	bfee <__aeabi_dadd+0x1fa>
    bfec:	e1cb      	b.n	c386 <__aeabi_dadd+0x592>
    bfee:	2380      	movs	r3, #128	; 0x80
    bff0:	031b      	lsls	r3, r3, #12
    bff2:	430b      	orrs	r3, r1
    bff4:	031a      	lsls	r2, r3, #12
    bff6:	0b12      	lsrs	r2, r2, #12
    bff8:	e744      	b.n	be84 <__aeabi_dadd+0x90>
    bffa:	3e01      	subs	r6, #1
    bffc:	2e00      	cmp	r6, #0
    bffe:	d16d      	bne.n	c0dc <__aeabi_dadd+0x2e8>
    c000:	1aae      	subs	r6, r5, r2
    c002:	42b5      	cmp	r5, r6
    c004:	419b      	sbcs	r3, r3
    c006:	1a09      	subs	r1, r1, r0
    c008:	425b      	negs	r3, r3
    c00a:	1ac9      	subs	r1, r1, r3
    c00c:	0035      	movs	r5, r6
    c00e:	e775      	b.n	befc <__aeabi_dadd+0x108>
    c010:	0007      	movs	r7, r0
    c012:	4317      	orrs	r7, r2
    c014:	d100      	bne.n	c018 <__aeabi_dadd+0x224>
    c016:	e716      	b.n	be46 <__aeabi_dadd+0x52>
    c018:	2301      	movs	r3, #1
    c01a:	425b      	negs	r3, r3
    c01c:	469c      	mov	ip, r3
    c01e:	44e3      	add	fp, ip
    c020:	465b      	mov	r3, fp
    c022:	2b00      	cmp	r3, #0
    c024:	d000      	beq.n	c028 <__aeabi_dadd+0x234>
    c026:	e0e0      	b.n	c1ea <__aeabi_dadd+0x3f6>
    c028:	18aa      	adds	r2, r5, r2
    c02a:	42aa      	cmp	r2, r5
    c02c:	419b      	sbcs	r3, r3
    c02e:	1809      	adds	r1, r1, r0
    c030:	425b      	negs	r3, r3
    c032:	1859      	adds	r1, r3, r1
    c034:	0015      	movs	r5, r2
    c036:	e7c5      	b.n	bfc4 <__aeabi_dadd+0x1d0>
    c038:	2e00      	cmp	r6, #0
    c03a:	d175      	bne.n	c128 <__aeabi_dadd+0x334>
    c03c:	1c66      	adds	r6, r4, #1
    c03e:	0576      	lsls	r6, r6, #21
    c040:	0d76      	lsrs	r6, r6, #21
    c042:	2e01      	cmp	r6, #1
    c044:	dc00      	bgt.n	c048 <__aeabi_dadd+0x254>
    c046:	e0f3      	b.n	c230 <__aeabi_dadd+0x43c>
    c048:	1aae      	subs	r6, r5, r2
    c04a:	46b0      	mov	r8, r6
    c04c:	4545      	cmp	r5, r8
    c04e:	41bf      	sbcs	r7, r7
    c050:	1a0e      	subs	r6, r1, r0
    c052:	427f      	negs	r7, r7
    c054:	1bf6      	subs	r6, r6, r7
    c056:	0237      	lsls	r7, r6, #8
    c058:	d400      	bmi.n	c05c <__aeabi_dadd+0x268>
    c05a:	e08f      	b.n	c17c <__aeabi_dadd+0x388>
    c05c:	1b55      	subs	r5, r2, r5
    c05e:	42aa      	cmp	r2, r5
    c060:	41b6      	sbcs	r6, r6
    c062:	1a41      	subs	r1, r0, r1
    c064:	4276      	negs	r6, r6
    c066:	1b8e      	subs	r6, r1, r6
    c068:	469a      	mov	sl, r3
    c06a:	e74b      	b.n	bf04 <__aeabi_dadd+0x110>
    c06c:	4656      	mov	r6, sl
    c06e:	2200      	movs	r2, #0
    c070:	2500      	movs	r5, #0
    c072:	e707      	b.n	be84 <__aeabi_dadd+0x90>
    c074:	0028      	movs	r0, r5
    c076:	f7fa fdf9 	bl	6c6c <__clzsi2>
    c07a:	3020      	adds	r0, #32
    c07c:	0003      	movs	r3, r0
    c07e:	3b08      	subs	r3, #8
    c080:	2b1f      	cmp	r3, #31
    c082:	dc00      	bgt.n	c086 <__aeabi_dadd+0x292>
    c084:	e749      	b.n	bf1a <__aeabi_dadd+0x126>
    c086:	002a      	movs	r2, r5
    c088:	3828      	subs	r0, #40	; 0x28
    c08a:	4082      	lsls	r2, r0
    c08c:	2500      	movs	r5, #0
    c08e:	429c      	cmp	r4, r3
    c090:	dc00      	bgt.n	c094 <__aeabi_dadd+0x2a0>
    c092:	e74d      	b.n	bf30 <__aeabi_dadd+0x13c>
    c094:	493f      	ldr	r1, [pc, #252]	; (c194 <__aeabi_dadd+0x3a0>)
    c096:	1ae4      	subs	r4, r4, r3
    c098:	4011      	ands	r1, r2
    c09a:	e6d4      	b.n	be46 <__aeabi_dadd+0x52>
    c09c:	4302      	orrs	r2, r0
    c09e:	1e50      	subs	r0, r2, #1
    c0a0:	4182      	sbcs	r2, r0
    c0a2:	b2d3      	uxtb	r3, r2
    c0a4:	2200      	movs	r2, #0
    c0a6:	e722      	b.n	beee <__aeabi_dadd+0xfa>
    c0a8:	2b00      	cmp	r3, #0
    c0aa:	d000      	beq.n	c0ae <__aeabi_dadd+0x2ba>
    c0ac:	e0f3      	b.n	c296 <__aeabi_dadd+0x4a2>
    c0ae:	1c63      	adds	r3, r4, #1
    c0b0:	469c      	mov	ip, r3
    c0b2:	055b      	lsls	r3, r3, #21
    c0b4:	0d5b      	lsrs	r3, r3, #21
    c0b6:	2b01      	cmp	r3, #1
    c0b8:	dc00      	bgt.n	c0bc <__aeabi_dadd+0x2c8>
    c0ba:	e09f      	b.n	c1fc <__aeabi_dadd+0x408>
    c0bc:	4b34      	ldr	r3, [pc, #208]	; (c190 <__aeabi_dadd+0x39c>)
    c0be:	459c      	cmp	ip, r3
    c0c0:	d100      	bne.n	c0c4 <__aeabi_dadd+0x2d0>
    c0c2:	e0c3      	b.n	c24c <__aeabi_dadd+0x458>
    c0c4:	18aa      	adds	r2, r5, r2
    c0c6:	1809      	adds	r1, r1, r0
    c0c8:	42aa      	cmp	r2, r5
    c0ca:	4180      	sbcs	r0, r0
    c0cc:	4240      	negs	r0, r0
    c0ce:	1841      	adds	r1, r0, r1
    c0d0:	07cd      	lsls	r5, r1, #31
    c0d2:	0852      	lsrs	r2, r2, #1
    c0d4:	4315      	orrs	r5, r2
    c0d6:	0849      	lsrs	r1, r1, #1
    c0d8:	4664      	mov	r4, ip
    c0da:	e6b4      	b.n	be46 <__aeabi_dadd+0x52>
    c0dc:	4b2c      	ldr	r3, [pc, #176]	; (c190 <__aeabi_dadd+0x39c>)
    c0de:	429c      	cmp	r4, r3
    c0e0:	d000      	beq.n	c0e4 <__aeabi_dadd+0x2f0>
    c0e2:	e6ec      	b.n	bebe <__aeabi_dadd+0xca>
    c0e4:	e6af      	b.n	be46 <__aeabi_dadd+0x52>
    c0e6:	0011      	movs	r1, r2
    c0e8:	3c1f      	subs	r4, #31
    c0ea:	40e1      	lsrs	r1, r4
    c0ec:	000c      	movs	r4, r1
    c0ee:	2b20      	cmp	r3, #32
    c0f0:	d100      	bne.n	c0f4 <__aeabi_dadd+0x300>
    c0f2:	e07f      	b.n	c1f4 <__aeabi_dadd+0x400>
    c0f4:	2140      	movs	r1, #64	; 0x40
    c0f6:	1acb      	subs	r3, r1, r3
    c0f8:	409a      	lsls	r2, r3
    c0fa:	4315      	orrs	r5, r2
    c0fc:	1e6a      	subs	r2, r5, #1
    c0fe:	4195      	sbcs	r5, r2
    c100:	2100      	movs	r1, #0
    c102:	4325      	orrs	r5, r4
    c104:	2400      	movs	r4, #0
    c106:	e72d      	b.n	bf64 <__aeabi_dadd+0x170>
    c108:	0033      	movs	r3, r6
    c10a:	0007      	movs	r7, r0
    c10c:	3b20      	subs	r3, #32
    c10e:	40df      	lsrs	r7, r3
    c110:	003b      	movs	r3, r7
    c112:	2e20      	cmp	r6, #32
    c114:	d070      	beq.n	c1f8 <__aeabi_dadd+0x404>
    c116:	2740      	movs	r7, #64	; 0x40
    c118:	1bbe      	subs	r6, r7, r6
    c11a:	40b0      	lsls	r0, r6
    c11c:	4302      	orrs	r2, r0
    c11e:	1e50      	subs	r0, r2, #1
    c120:	4182      	sbcs	r2, r0
    c122:	4313      	orrs	r3, r2
    c124:	2200      	movs	r2, #0
    c126:	e6e2      	b.n	beee <__aeabi_dadd+0xfa>
    c128:	2c00      	cmp	r4, #0
    c12a:	d04f      	beq.n	c1cc <__aeabi_dadd+0x3d8>
    c12c:	4c18      	ldr	r4, [pc, #96]	; (c190 <__aeabi_dadd+0x39c>)
    c12e:	45a4      	cmp	ip, r4
    c130:	d100      	bne.n	c134 <__aeabi_dadd+0x340>
    c132:	e0ab      	b.n	c28c <__aeabi_dadd+0x498>
    c134:	2480      	movs	r4, #128	; 0x80
    c136:	0424      	lsls	r4, r4, #16
    c138:	4276      	negs	r6, r6
    c13a:	4321      	orrs	r1, r4
    c13c:	2e38      	cmp	r6, #56	; 0x38
    c13e:	dd00      	ble.n	c142 <__aeabi_dadd+0x34e>
    c140:	e0df      	b.n	c302 <__aeabi_dadd+0x50e>
    c142:	2e1f      	cmp	r6, #31
    c144:	dd00      	ble.n	c148 <__aeabi_dadd+0x354>
    c146:	e143      	b.n	c3d0 <__aeabi_dadd+0x5dc>
    c148:	2720      	movs	r7, #32
    c14a:	1bbc      	subs	r4, r7, r6
    c14c:	46a1      	mov	r9, r4
    c14e:	000c      	movs	r4, r1
    c150:	464f      	mov	r7, r9
    c152:	40bc      	lsls	r4, r7
    c154:	46a0      	mov	r8, r4
    c156:	002c      	movs	r4, r5
    c158:	4647      	mov	r7, r8
    c15a:	40f4      	lsrs	r4, r6
    c15c:	433c      	orrs	r4, r7
    c15e:	464f      	mov	r7, r9
    c160:	40bd      	lsls	r5, r7
    c162:	1e6f      	subs	r7, r5, #1
    c164:	41bd      	sbcs	r5, r7
    c166:	40f1      	lsrs	r1, r6
    c168:	432c      	orrs	r4, r5
    c16a:	1b15      	subs	r5, r2, r4
    c16c:	42aa      	cmp	r2, r5
    c16e:	4192      	sbcs	r2, r2
    c170:	1a41      	subs	r1, r0, r1
    c172:	4252      	negs	r2, r2
    c174:	1a89      	subs	r1, r1, r2
    c176:	4664      	mov	r4, ip
    c178:	469a      	mov	sl, r3
    c17a:	e6bf      	b.n	befc <__aeabi_dadd+0x108>
    c17c:	4641      	mov	r1, r8
    c17e:	4645      	mov	r5, r8
    c180:	4331      	orrs	r1, r6
    c182:	d000      	beq.n	c186 <__aeabi_dadd+0x392>
    c184:	e6be      	b.n	bf04 <__aeabi_dadd+0x110>
    c186:	2600      	movs	r6, #0
    c188:	2400      	movs	r4, #0
    c18a:	2500      	movs	r5, #0
    c18c:	e6f2      	b.n	bf74 <__aeabi_dadd+0x180>
    c18e:	46c0      	nop			; (mov r8, r8)
    c190:	000007ff 	.word	0x000007ff
    c194:	ff7fffff 	.word	0xff7fffff
    c198:	800fffff 	.word	0x800fffff
    c19c:	2b1f      	cmp	r3, #31
    c19e:	dc59      	bgt.n	c254 <__aeabi_dadd+0x460>
    c1a0:	2720      	movs	r7, #32
    c1a2:	1aff      	subs	r7, r7, r3
    c1a4:	46bc      	mov	ip, r7
    c1a6:	0007      	movs	r7, r0
    c1a8:	4663      	mov	r3, ip
    c1aa:	409f      	lsls	r7, r3
    c1ac:	465b      	mov	r3, fp
    c1ae:	46b9      	mov	r9, r7
    c1b0:	0017      	movs	r7, r2
    c1b2:	40df      	lsrs	r7, r3
    c1b4:	46b8      	mov	r8, r7
    c1b6:	464f      	mov	r7, r9
    c1b8:	4643      	mov	r3, r8
    c1ba:	431f      	orrs	r7, r3
    c1bc:	4663      	mov	r3, ip
    c1be:	409a      	lsls	r2, r3
    c1c0:	1e53      	subs	r3, r2, #1
    c1c2:	419a      	sbcs	r2, r3
    c1c4:	465b      	mov	r3, fp
    c1c6:	433a      	orrs	r2, r7
    c1c8:	40d8      	lsrs	r0, r3
    c1ca:	e6f4      	b.n	bfb6 <__aeabi_dadd+0x1c2>
    c1cc:	000c      	movs	r4, r1
    c1ce:	432c      	orrs	r4, r5
    c1d0:	d05c      	beq.n	c28c <__aeabi_dadd+0x498>
    c1d2:	43f6      	mvns	r6, r6
    c1d4:	2e00      	cmp	r6, #0
    c1d6:	d155      	bne.n	c284 <__aeabi_dadd+0x490>
    c1d8:	1b55      	subs	r5, r2, r5
    c1da:	42aa      	cmp	r2, r5
    c1dc:	41a4      	sbcs	r4, r4
    c1de:	1a41      	subs	r1, r0, r1
    c1e0:	4264      	negs	r4, r4
    c1e2:	1b09      	subs	r1, r1, r4
    c1e4:	469a      	mov	sl, r3
    c1e6:	4664      	mov	r4, ip
    c1e8:	e688      	b.n	befc <__aeabi_dadd+0x108>
    c1ea:	4f96      	ldr	r7, [pc, #600]	; (c444 <__aeabi_dadd+0x650>)
    c1ec:	42bc      	cmp	r4, r7
    c1ee:	d000      	beq.n	c1f2 <__aeabi_dadd+0x3fe>
    c1f0:	e6d8      	b.n	bfa4 <__aeabi_dadd+0x1b0>
    c1f2:	e628      	b.n	be46 <__aeabi_dadd+0x52>
    c1f4:	2200      	movs	r2, #0
    c1f6:	e780      	b.n	c0fa <__aeabi_dadd+0x306>
    c1f8:	2000      	movs	r0, #0
    c1fa:	e78f      	b.n	c11c <__aeabi_dadd+0x328>
    c1fc:	000b      	movs	r3, r1
    c1fe:	432b      	orrs	r3, r5
    c200:	2c00      	cmp	r4, #0
    c202:	d000      	beq.n	c206 <__aeabi_dadd+0x412>
    c204:	e0c2      	b.n	c38c <__aeabi_dadd+0x598>
    c206:	2b00      	cmp	r3, #0
    c208:	d100      	bne.n	c20c <__aeabi_dadd+0x418>
    c20a:	e101      	b.n	c410 <__aeabi_dadd+0x61c>
    c20c:	0003      	movs	r3, r0
    c20e:	4313      	orrs	r3, r2
    c210:	d100      	bne.n	c214 <__aeabi_dadd+0x420>
    c212:	e618      	b.n	be46 <__aeabi_dadd+0x52>
    c214:	18ab      	adds	r3, r5, r2
    c216:	42ab      	cmp	r3, r5
    c218:	41b6      	sbcs	r6, r6
    c21a:	1809      	adds	r1, r1, r0
    c21c:	4276      	negs	r6, r6
    c21e:	1871      	adds	r1, r6, r1
    c220:	020a      	lsls	r2, r1, #8
    c222:	d400      	bmi.n	c226 <__aeabi_dadd+0x432>
    c224:	e109      	b.n	c43a <__aeabi_dadd+0x646>
    c226:	4a88      	ldr	r2, [pc, #544]	; (c448 <__aeabi_dadd+0x654>)
    c228:	001d      	movs	r5, r3
    c22a:	4011      	ands	r1, r2
    c22c:	4664      	mov	r4, ip
    c22e:	e60a      	b.n	be46 <__aeabi_dadd+0x52>
    c230:	2c00      	cmp	r4, #0
    c232:	d15b      	bne.n	c2ec <__aeabi_dadd+0x4f8>
    c234:	000e      	movs	r6, r1
    c236:	432e      	orrs	r6, r5
    c238:	d000      	beq.n	c23c <__aeabi_dadd+0x448>
    c23a:	e08a      	b.n	c352 <__aeabi_dadd+0x55e>
    c23c:	0001      	movs	r1, r0
    c23e:	4311      	orrs	r1, r2
    c240:	d100      	bne.n	c244 <__aeabi_dadd+0x450>
    c242:	e0c2      	b.n	c3ca <__aeabi_dadd+0x5d6>
    c244:	0001      	movs	r1, r0
    c246:	0015      	movs	r5, r2
    c248:	469a      	mov	sl, r3
    c24a:	e5fc      	b.n	be46 <__aeabi_dadd+0x52>
    c24c:	4664      	mov	r4, ip
    c24e:	2100      	movs	r1, #0
    c250:	2500      	movs	r5, #0
    c252:	e68f      	b.n	bf74 <__aeabi_dadd+0x180>
    c254:	2320      	movs	r3, #32
    c256:	425b      	negs	r3, r3
    c258:	469c      	mov	ip, r3
    c25a:	44dc      	add	ip, fp
    c25c:	4663      	mov	r3, ip
    c25e:	0007      	movs	r7, r0
    c260:	40df      	lsrs	r7, r3
    c262:	465b      	mov	r3, fp
    c264:	46bc      	mov	ip, r7
    c266:	2b20      	cmp	r3, #32
    c268:	d100      	bne.n	c26c <__aeabi_dadd+0x478>
    c26a:	e0ac      	b.n	c3c6 <__aeabi_dadd+0x5d2>
    c26c:	2340      	movs	r3, #64	; 0x40
    c26e:	465f      	mov	r7, fp
    c270:	1bdb      	subs	r3, r3, r7
    c272:	4098      	lsls	r0, r3
    c274:	4302      	orrs	r2, r0
    c276:	1e50      	subs	r0, r2, #1
    c278:	4182      	sbcs	r2, r0
    c27a:	4663      	mov	r3, ip
    c27c:	4313      	orrs	r3, r2
    c27e:	001a      	movs	r2, r3
    c280:	2000      	movs	r0, #0
    c282:	e698      	b.n	bfb6 <__aeabi_dadd+0x1c2>
    c284:	4c6f      	ldr	r4, [pc, #444]	; (c444 <__aeabi_dadd+0x650>)
    c286:	45a4      	cmp	ip, r4
    c288:	d000      	beq.n	c28c <__aeabi_dadd+0x498>
    c28a:	e757      	b.n	c13c <__aeabi_dadd+0x348>
    c28c:	0001      	movs	r1, r0
    c28e:	0015      	movs	r5, r2
    c290:	4664      	mov	r4, ip
    c292:	469a      	mov	sl, r3
    c294:	e5d7      	b.n	be46 <__aeabi_dadd+0x52>
    c296:	2c00      	cmp	r4, #0
    c298:	d139      	bne.n	c30e <__aeabi_dadd+0x51a>
    c29a:	000c      	movs	r4, r1
    c29c:	432c      	orrs	r4, r5
    c29e:	d06e      	beq.n	c37e <__aeabi_dadd+0x58a>
    c2a0:	43db      	mvns	r3, r3
    c2a2:	2b00      	cmp	r3, #0
    c2a4:	d01a      	beq.n	c2dc <__aeabi_dadd+0x4e8>
    c2a6:	4c67      	ldr	r4, [pc, #412]	; (c444 <__aeabi_dadd+0x650>)
    c2a8:	45a4      	cmp	ip, r4
    c2aa:	d068      	beq.n	c37e <__aeabi_dadd+0x58a>
    c2ac:	2b38      	cmp	r3, #56	; 0x38
    c2ae:	dd00      	ble.n	c2b2 <__aeabi_dadd+0x4be>
    c2b0:	e0a4      	b.n	c3fc <__aeabi_dadd+0x608>
    c2b2:	2b1f      	cmp	r3, #31
    c2b4:	dd00      	ble.n	c2b8 <__aeabi_dadd+0x4c4>
    c2b6:	e0ae      	b.n	c416 <__aeabi_dadd+0x622>
    c2b8:	2420      	movs	r4, #32
    c2ba:	000f      	movs	r7, r1
    c2bc:	1ae4      	subs	r4, r4, r3
    c2be:	40a7      	lsls	r7, r4
    c2c0:	46b9      	mov	r9, r7
    c2c2:	002f      	movs	r7, r5
    c2c4:	40df      	lsrs	r7, r3
    c2c6:	46b8      	mov	r8, r7
    c2c8:	46a3      	mov	fp, r4
    c2ca:	464f      	mov	r7, r9
    c2cc:	4644      	mov	r4, r8
    c2ce:	4327      	orrs	r7, r4
    c2d0:	465c      	mov	r4, fp
    c2d2:	40a5      	lsls	r5, r4
    c2d4:	1e6c      	subs	r4, r5, #1
    c2d6:	41a5      	sbcs	r5, r4
    c2d8:	40d9      	lsrs	r1, r3
    c2da:	433d      	orrs	r5, r7
    c2dc:	18ad      	adds	r5, r5, r2
    c2de:	4295      	cmp	r5, r2
    c2e0:	419b      	sbcs	r3, r3
    c2e2:	1809      	adds	r1, r1, r0
    c2e4:	425b      	negs	r3, r3
    c2e6:	1859      	adds	r1, r3, r1
    c2e8:	4664      	mov	r4, ip
    c2ea:	e66b      	b.n	bfc4 <__aeabi_dadd+0x1d0>
    c2ec:	000c      	movs	r4, r1
    c2ee:	432c      	orrs	r4, r5
    c2f0:	d115      	bne.n	c31e <__aeabi_dadd+0x52a>
    c2f2:	0001      	movs	r1, r0
    c2f4:	4311      	orrs	r1, r2
    c2f6:	d07b      	beq.n	c3f0 <__aeabi_dadd+0x5fc>
    c2f8:	0001      	movs	r1, r0
    c2fa:	0015      	movs	r5, r2
    c2fc:	469a      	mov	sl, r3
    c2fe:	4c51      	ldr	r4, [pc, #324]	; (c444 <__aeabi_dadd+0x650>)
    c300:	e5a1      	b.n	be46 <__aeabi_dadd+0x52>
    c302:	430d      	orrs	r5, r1
    c304:	1e69      	subs	r1, r5, #1
    c306:	418d      	sbcs	r5, r1
    c308:	2100      	movs	r1, #0
    c30a:	b2ec      	uxtb	r4, r5
    c30c:	e72d      	b.n	c16a <__aeabi_dadd+0x376>
    c30e:	4c4d      	ldr	r4, [pc, #308]	; (c444 <__aeabi_dadd+0x650>)
    c310:	45a4      	cmp	ip, r4
    c312:	d034      	beq.n	c37e <__aeabi_dadd+0x58a>
    c314:	2480      	movs	r4, #128	; 0x80
    c316:	0424      	lsls	r4, r4, #16
    c318:	425b      	negs	r3, r3
    c31a:	4321      	orrs	r1, r4
    c31c:	e7c6      	b.n	c2ac <__aeabi_dadd+0x4b8>
    c31e:	0004      	movs	r4, r0
    c320:	4314      	orrs	r4, r2
    c322:	d04e      	beq.n	c3c2 <__aeabi_dadd+0x5ce>
    c324:	08ed      	lsrs	r5, r5, #3
    c326:	074c      	lsls	r4, r1, #29
    c328:	432c      	orrs	r4, r5
    c32a:	2580      	movs	r5, #128	; 0x80
    c32c:	08c9      	lsrs	r1, r1, #3
    c32e:	032d      	lsls	r5, r5, #12
    c330:	4229      	tst	r1, r5
    c332:	d008      	beq.n	c346 <__aeabi_dadd+0x552>
    c334:	08c6      	lsrs	r6, r0, #3
    c336:	422e      	tst	r6, r5
    c338:	d105      	bne.n	c346 <__aeabi_dadd+0x552>
    c33a:	08d2      	lsrs	r2, r2, #3
    c33c:	0741      	lsls	r1, r0, #29
    c33e:	4311      	orrs	r1, r2
    c340:	000c      	movs	r4, r1
    c342:	469a      	mov	sl, r3
    c344:	0031      	movs	r1, r6
    c346:	0f62      	lsrs	r2, r4, #29
    c348:	00c9      	lsls	r1, r1, #3
    c34a:	00e5      	lsls	r5, r4, #3
    c34c:	4311      	orrs	r1, r2
    c34e:	4c3d      	ldr	r4, [pc, #244]	; (c444 <__aeabi_dadd+0x650>)
    c350:	e579      	b.n	be46 <__aeabi_dadd+0x52>
    c352:	0006      	movs	r6, r0
    c354:	4316      	orrs	r6, r2
    c356:	d100      	bne.n	c35a <__aeabi_dadd+0x566>
    c358:	e575      	b.n	be46 <__aeabi_dadd+0x52>
    c35a:	1aae      	subs	r6, r5, r2
    c35c:	46b0      	mov	r8, r6
    c35e:	4545      	cmp	r5, r8
    c360:	41bf      	sbcs	r7, r7
    c362:	1a0e      	subs	r6, r1, r0
    c364:	427f      	negs	r7, r7
    c366:	1bf6      	subs	r6, r6, r7
    c368:	0237      	lsls	r7, r6, #8
    c36a:	d400      	bmi.n	c36e <__aeabi_dadd+0x57a>
    c36c:	e5f4      	b.n	bf58 <__aeabi_dadd+0x164>
    c36e:	1b55      	subs	r5, r2, r5
    c370:	42aa      	cmp	r2, r5
    c372:	41b6      	sbcs	r6, r6
    c374:	1a41      	subs	r1, r0, r1
    c376:	4276      	negs	r6, r6
    c378:	1b89      	subs	r1, r1, r6
    c37a:	469a      	mov	sl, r3
    c37c:	e563      	b.n	be46 <__aeabi_dadd+0x52>
    c37e:	0001      	movs	r1, r0
    c380:	0015      	movs	r5, r2
    c382:	4664      	mov	r4, ip
    c384:	e55f      	b.n	be46 <__aeabi_dadd+0x52>
    c386:	2200      	movs	r2, #0
    c388:	2500      	movs	r5, #0
    c38a:	e57b      	b.n	be84 <__aeabi_dadd+0x90>
    c38c:	2b00      	cmp	r3, #0
    c38e:	d03b      	beq.n	c408 <__aeabi_dadd+0x614>
    c390:	0003      	movs	r3, r0
    c392:	4313      	orrs	r3, r2
    c394:	d015      	beq.n	c3c2 <__aeabi_dadd+0x5ce>
    c396:	08ed      	lsrs	r5, r5, #3
    c398:	074b      	lsls	r3, r1, #29
    c39a:	432b      	orrs	r3, r5
    c39c:	2580      	movs	r5, #128	; 0x80
    c39e:	08c9      	lsrs	r1, r1, #3
    c3a0:	032d      	lsls	r5, r5, #12
    c3a2:	4229      	tst	r1, r5
    c3a4:	d007      	beq.n	c3b6 <__aeabi_dadd+0x5c2>
    c3a6:	08c4      	lsrs	r4, r0, #3
    c3a8:	422c      	tst	r4, r5
    c3aa:	d104      	bne.n	c3b6 <__aeabi_dadd+0x5c2>
    c3ac:	0741      	lsls	r1, r0, #29
    c3ae:	000b      	movs	r3, r1
    c3b0:	0021      	movs	r1, r4
    c3b2:	08d2      	lsrs	r2, r2, #3
    c3b4:	4313      	orrs	r3, r2
    c3b6:	00c9      	lsls	r1, r1, #3
    c3b8:	0f5a      	lsrs	r2, r3, #29
    c3ba:	4311      	orrs	r1, r2
    c3bc:	00dd      	lsls	r5, r3, #3
    c3be:	4c21      	ldr	r4, [pc, #132]	; (c444 <__aeabi_dadd+0x650>)
    c3c0:	e541      	b.n	be46 <__aeabi_dadd+0x52>
    c3c2:	4c20      	ldr	r4, [pc, #128]	; (c444 <__aeabi_dadd+0x650>)
    c3c4:	e53f      	b.n	be46 <__aeabi_dadd+0x52>
    c3c6:	2000      	movs	r0, #0
    c3c8:	e754      	b.n	c274 <__aeabi_dadd+0x480>
    c3ca:	2600      	movs	r6, #0
    c3cc:	2500      	movs	r5, #0
    c3ce:	e5d1      	b.n	bf74 <__aeabi_dadd+0x180>
    c3d0:	0034      	movs	r4, r6
    c3d2:	000f      	movs	r7, r1
    c3d4:	3c20      	subs	r4, #32
    c3d6:	40e7      	lsrs	r7, r4
    c3d8:	003c      	movs	r4, r7
    c3da:	2e20      	cmp	r6, #32
    c3dc:	d02b      	beq.n	c436 <__aeabi_dadd+0x642>
    c3de:	2740      	movs	r7, #64	; 0x40
    c3e0:	1bbe      	subs	r6, r7, r6
    c3e2:	40b1      	lsls	r1, r6
    c3e4:	430d      	orrs	r5, r1
    c3e6:	1e69      	subs	r1, r5, #1
    c3e8:	418d      	sbcs	r5, r1
    c3ea:	2100      	movs	r1, #0
    c3ec:	432c      	orrs	r4, r5
    c3ee:	e6bc      	b.n	c16a <__aeabi_dadd+0x376>
    c3f0:	2180      	movs	r1, #128	; 0x80
    c3f2:	2600      	movs	r6, #0
    c3f4:	0309      	lsls	r1, r1, #12
    c3f6:	4c13      	ldr	r4, [pc, #76]	; (c444 <__aeabi_dadd+0x650>)
    c3f8:	2500      	movs	r5, #0
    c3fa:	e5bb      	b.n	bf74 <__aeabi_dadd+0x180>
    c3fc:	430d      	orrs	r5, r1
    c3fe:	1e69      	subs	r1, r5, #1
    c400:	418d      	sbcs	r5, r1
    c402:	2100      	movs	r1, #0
    c404:	b2ed      	uxtb	r5, r5
    c406:	e769      	b.n	c2dc <__aeabi_dadd+0x4e8>
    c408:	0001      	movs	r1, r0
    c40a:	0015      	movs	r5, r2
    c40c:	4c0d      	ldr	r4, [pc, #52]	; (c444 <__aeabi_dadd+0x650>)
    c40e:	e51a      	b.n	be46 <__aeabi_dadd+0x52>
    c410:	0001      	movs	r1, r0
    c412:	0015      	movs	r5, r2
    c414:	e517      	b.n	be46 <__aeabi_dadd+0x52>
    c416:	001c      	movs	r4, r3
    c418:	000f      	movs	r7, r1
    c41a:	3c20      	subs	r4, #32
    c41c:	40e7      	lsrs	r7, r4
    c41e:	003c      	movs	r4, r7
    c420:	2b20      	cmp	r3, #32
    c422:	d00c      	beq.n	c43e <__aeabi_dadd+0x64a>
    c424:	2740      	movs	r7, #64	; 0x40
    c426:	1afb      	subs	r3, r7, r3
    c428:	4099      	lsls	r1, r3
    c42a:	430d      	orrs	r5, r1
    c42c:	1e69      	subs	r1, r5, #1
    c42e:	418d      	sbcs	r5, r1
    c430:	2100      	movs	r1, #0
    c432:	4325      	orrs	r5, r4
    c434:	e752      	b.n	c2dc <__aeabi_dadd+0x4e8>
    c436:	2100      	movs	r1, #0
    c438:	e7d4      	b.n	c3e4 <__aeabi_dadd+0x5f0>
    c43a:	001d      	movs	r5, r3
    c43c:	e592      	b.n	bf64 <__aeabi_dadd+0x170>
    c43e:	2100      	movs	r1, #0
    c440:	e7f3      	b.n	c42a <__aeabi_dadd+0x636>
    c442:	46c0      	nop			; (mov r8, r8)
    c444:	000007ff 	.word	0x000007ff
    c448:	ff7fffff 	.word	0xff7fffff

0000c44c <__aeabi_ddiv>:
    c44c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c44e:	4656      	mov	r6, sl
    c450:	464d      	mov	r5, r9
    c452:	4644      	mov	r4, r8
    c454:	465f      	mov	r7, fp
    c456:	b4f0      	push	{r4, r5, r6, r7}
    c458:	001d      	movs	r5, r3
    c45a:	030e      	lsls	r6, r1, #12
    c45c:	004c      	lsls	r4, r1, #1
    c45e:	0fcb      	lsrs	r3, r1, #31
    c460:	b087      	sub	sp, #28
    c462:	0007      	movs	r7, r0
    c464:	4692      	mov	sl, r2
    c466:	4681      	mov	r9, r0
    c468:	0b36      	lsrs	r6, r6, #12
    c46a:	0d64      	lsrs	r4, r4, #21
    c46c:	4698      	mov	r8, r3
    c46e:	d06a      	beq.n	c546 <__aeabi_ddiv+0xfa>
    c470:	4b6d      	ldr	r3, [pc, #436]	; (c628 <__aeabi_ddiv+0x1dc>)
    c472:	429c      	cmp	r4, r3
    c474:	d035      	beq.n	c4e2 <__aeabi_ddiv+0x96>
    c476:	2280      	movs	r2, #128	; 0x80
    c478:	0f43      	lsrs	r3, r0, #29
    c47a:	0412      	lsls	r2, r2, #16
    c47c:	4313      	orrs	r3, r2
    c47e:	00f6      	lsls	r6, r6, #3
    c480:	431e      	orrs	r6, r3
    c482:	00c3      	lsls	r3, r0, #3
    c484:	4699      	mov	r9, r3
    c486:	4b69      	ldr	r3, [pc, #420]	; (c62c <__aeabi_ddiv+0x1e0>)
    c488:	2700      	movs	r7, #0
    c48a:	469c      	mov	ip, r3
    c48c:	2300      	movs	r3, #0
    c48e:	4464      	add	r4, ip
    c490:	9302      	str	r3, [sp, #8]
    c492:	032b      	lsls	r3, r5, #12
    c494:	0068      	lsls	r0, r5, #1
    c496:	0b1b      	lsrs	r3, r3, #12
    c498:	0fed      	lsrs	r5, r5, #31
    c49a:	4651      	mov	r1, sl
    c49c:	469b      	mov	fp, r3
    c49e:	0d40      	lsrs	r0, r0, #21
    c4a0:	9500      	str	r5, [sp, #0]
    c4a2:	d100      	bne.n	c4a6 <__aeabi_ddiv+0x5a>
    c4a4:	e078      	b.n	c598 <__aeabi_ddiv+0x14c>
    c4a6:	4b60      	ldr	r3, [pc, #384]	; (c628 <__aeabi_ddiv+0x1dc>)
    c4a8:	4298      	cmp	r0, r3
    c4aa:	d06c      	beq.n	c586 <__aeabi_ddiv+0x13a>
    c4ac:	465b      	mov	r3, fp
    c4ae:	00da      	lsls	r2, r3, #3
    c4b0:	0f4b      	lsrs	r3, r1, #29
    c4b2:	2180      	movs	r1, #128	; 0x80
    c4b4:	0409      	lsls	r1, r1, #16
    c4b6:	430b      	orrs	r3, r1
    c4b8:	4313      	orrs	r3, r2
    c4ba:	469b      	mov	fp, r3
    c4bc:	4653      	mov	r3, sl
    c4be:	00d9      	lsls	r1, r3, #3
    c4c0:	4b5a      	ldr	r3, [pc, #360]	; (c62c <__aeabi_ddiv+0x1e0>)
    c4c2:	469c      	mov	ip, r3
    c4c4:	2300      	movs	r3, #0
    c4c6:	4460      	add	r0, ip
    c4c8:	4642      	mov	r2, r8
    c4ca:	1a20      	subs	r0, r4, r0
    c4cc:	406a      	eors	r2, r5
    c4ce:	4692      	mov	sl, r2
    c4d0:	9001      	str	r0, [sp, #4]
    c4d2:	431f      	orrs	r7, r3
    c4d4:	2f0f      	cmp	r7, #15
    c4d6:	d900      	bls.n	c4da <__aeabi_ddiv+0x8e>
    c4d8:	e0b0      	b.n	c63c <__aeabi_ddiv+0x1f0>
    c4da:	4855      	ldr	r0, [pc, #340]	; (c630 <__aeabi_ddiv+0x1e4>)
    c4dc:	00bf      	lsls	r7, r7, #2
    c4de:	59c0      	ldr	r0, [r0, r7]
    c4e0:	4687      	mov	pc, r0
    c4e2:	4337      	orrs	r7, r6
    c4e4:	d000      	beq.n	c4e8 <__aeabi_ddiv+0x9c>
    c4e6:	e088      	b.n	c5fa <__aeabi_ddiv+0x1ae>
    c4e8:	2300      	movs	r3, #0
    c4ea:	4699      	mov	r9, r3
    c4ec:	3302      	adds	r3, #2
    c4ee:	2708      	movs	r7, #8
    c4f0:	2600      	movs	r6, #0
    c4f2:	9302      	str	r3, [sp, #8]
    c4f4:	e7cd      	b.n	c492 <__aeabi_ddiv+0x46>
    c4f6:	4643      	mov	r3, r8
    c4f8:	46b3      	mov	fp, r6
    c4fa:	4649      	mov	r1, r9
    c4fc:	9300      	str	r3, [sp, #0]
    c4fe:	9b02      	ldr	r3, [sp, #8]
    c500:	9a00      	ldr	r2, [sp, #0]
    c502:	4692      	mov	sl, r2
    c504:	2b02      	cmp	r3, #2
    c506:	d000      	beq.n	c50a <__aeabi_ddiv+0xbe>
    c508:	e1bf      	b.n	c88a <__aeabi_ddiv+0x43e>
    c50a:	2100      	movs	r1, #0
    c50c:	4653      	mov	r3, sl
    c50e:	2201      	movs	r2, #1
    c510:	2600      	movs	r6, #0
    c512:	4689      	mov	r9, r1
    c514:	401a      	ands	r2, r3
    c516:	4b44      	ldr	r3, [pc, #272]	; (c628 <__aeabi_ddiv+0x1dc>)
    c518:	2100      	movs	r1, #0
    c51a:	0336      	lsls	r6, r6, #12
    c51c:	0d0c      	lsrs	r4, r1, #20
    c51e:	0524      	lsls	r4, r4, #20
    c520:	0b36      	lsrs	r6, r6, #12
    c522:	4326      	orrs	r6, r4
    c524:	4c43      	ldr	r4, [pc, #268]	; (c634 <__aeabi_ddiv+0x1e8>)
    c526:	051b      	lsls	r3, r3, #20
    c528:	4026      	ands	r6, r4
    c52a:	431e      	orrs	r6, r3
    c52c:	0076      	lsls	r6, r6, #1
    c52e:	07d2      	lsls	r2, r2, #31
    c530:	0876      	lsrs	r6, r6, #1
    c532:	4316      	orrs	r6, r2
    c534:	4648      	mov	r0, r9
    c536:	0031      	movs	r1, r6
    c538:	b007      	add	sp, #28
    c53a:	bc3c      	pop	{r2, r3, r4, r5}
    c53c:	4690      	mov	r8, r2
    c53e:	4699      	mov	r9, r3
    c540:	46a2      	mov	sl, r4
    c542:	46ab      	mov	fp, r5
    c544:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c546:	0033      	movs	r3, r6
    c548:	4303      	orrs	r3, r0
    c54a:	d04f      	beq.n	c5ec <__aeabi_ddiv+0x1a0>
    c54c:	2e00      	cmp	r6, #0
    c54e:	d100      	bne.n	c552 <__aeabi_ddiv+0x106>
    c550:	e1bc      	b.n	c8cc <__aeabi_ddiv+0x480>
    c552:	0030      	movs	r0, r6
    c554:	f7fa fb8a 	bl	6c6c <__clzsi2>
    c558:	0003      	movs	r3, r0
    c55a:	3b0b      	subs	r3, #11
    c55c:	2b1c      	cmp	r3, #28
    c55e:	dd00      	ble.n	c562 <__aeabi_ddiv+0x116>
    c560:	e1ad      	b.n	c8be <__aeabi_ddiv+0x472>
    c562:	221d      	movs	r2, #29
    c564:	0001      	movs	r1, r0
    c566:	1ad3      	subs	r3, r2, r3
    c568:	3908      	subs	r1, #8
    c56a:	003a      	movs	r2, r7
    c56c:	408f      	lsls	r7, r1
    c56e:	408e      	lsls	r6, r1
    c570:	40da      	lsrs	r2, r3
    c572:	46b9      	mov	r9, r7
    c574:	4316      	orrs	r6, r2
    c576:	4b30      	ldr	r3, [pc, #192]	; (c638 <__aeabi_ddiv+0x1ec>)
    c578:	2700      	movs	r7, #0
    c57a:	469c      	mov	ip, r3
    c57c:	2300      	movs	r3, #0
    c57e:	4460      	add	r0, ip
    c580:	4244      	negs	r4, r0
    c582:	9302      	str	r3, [sp, #8]
    c584:	e785      	b.n	c492 <__aeabi_ddiv+0x46>
    c586:	4653      	mov	r3, sl
    c588:	465a      	mov	r2, fp
    c58a:	4313      	orrs	r3, r2
    c58c:	d12c      	bne.n	c5e8 <__aeabi_ddiv+0x19c>
    c58e:	2300      	movs	r3, #0
    c590:	2100      	movs	r1, #0
    c592:	469b      	mov	fp, r3
    c594:	3302      	adds	r3, #2
    c596:	e797      	b.n	c4c8 <__aeabi_ddiv+0x7c>
    c598:	430b      	orrs	r3, r1
    c59a:	d020      	beq.n	c5de <__aeabi_ddiv+0x192>
    c59c:	465b      	mov	r3, fp
    c59e:	2b00      	cmp	r3, #0
    c5a0:	d100      	bne.n	c5a4 <__aeabi_ddiv+0x158>
    c5a2:	e19e      	b.n	c8e2 <__aeabi_ddiv+0x496>
    c5a4:	4658      	mov	r0, fp
    c5a6:	f7fa fb61 	bl	6c6c <__clzsi2>
    c5aa:	0003      	movs	r3, r0
    c5ac:	3b0b      	subs	r3, #11
    c5ae:	2b1c      	cmp	r3, #28
    c5b0:	dd00      	ble.n	c5b4 <__aeabi_ddiv+0x168>
    c5b2:	e18f      	b.n	c8d4 <__aeabi_ddiv+0x488>
    c5b4:	0002      	movs	r2, r0
    c5b6:	4659      	mov	r1, fp
    c5b8:	3a08      	subs	r2, #8
    c5ba:	4091      	lsls	r1, r2
    c5bc:	468b      	mov	fp, r1
    c5be:	211d      	movs	r1, #29
    c5c0:	1acb      	subs	r3, r1, r3
    c5c2:	4651      	mov	r1, sl
    c5c4:	40d9      	lsrs	r1, r3
    c5c6:	000b      	movs	r3, r1
    c5c8:	4659      	mov	r1, fp
    c5ca:	430b      	orrs	r3, r1
    c5cc:	4651      	mov	r1, sl
    c5ce:	469b      	mov	fp, r3
    c5d0:	4091      	lsls	r1, r2
    c5d2:	4b19      	ldr	r3, [pc, #100]	; (c638 <__aeabi_ddiv+0x1ec>)
    c5d4:	469c      	mov	ip, r3
    c5d6:	4460      	add	r0, ip
    c5d8:	4240      	negs	r0, r0
    c5da:	2300      	movs	r3, #0
    c5dc:	e774      	b.n	c4c8 <__aeabi_ddiv+0x7c>
    c5de:	2300      	movs	r3, #0
    c5e0:	2100      	movs	r1, #0
    c5e2:	469b      	mov	fp, r3
    c5e4:	3301      	adds	r3, #1
    c5e6:	e76f      	b.n	c4c8 <__aeabi_ddiv+0x7c>
    c5e8:	2303      	movs	r3, #3
    c5ea:	e76d      	b.n	c4c8 <__aeabi_ddiv+0x7c>
    c5ec:	2300      	movs	r3, #0
    c5ee:	4699      	mov	r9, r3
    c5f0:	3301      	adds	r3, #1
    c5f2:	2704      	movs	r7, #4
    c5f4:	2600      	movs	r6, #0
    c5f6:	9302      	str	r3, [sp, #8]
    c5f8:	e74b      	b.n	c492 <__aeabi_ddiv+0x46>
    c5fa:	2303      	movs	r3, #3
    c5fc:	270c      	movs	r7, #12
    c5fe:	9302      	str	r3, [sp, #8]
    c600:	e747      	b.n	c492 <__aeabi_ddiv+0x46>
    c602:	2201      	movs	r2, #1
    c604:	1ad5      	subs	r5, r2, r3
    c606:	2d38      	cmp	r5, #56	; 0x38
    c608:	dc00      	bgt.n	c60c <__aeabi_ddiv+0x1c0>
    c60a:	e1b0      	b.n	c96e <__aeabi_ddiv+0x522>
    c60c:	4653      	mov	r3, sl
    c60e:	401a      	ands	r2, r3
    c610:	2100      	movs	r1, #0
    c612:	2300      	movs	r3, #0
    c614:	2600      	movs	r6, #0
    c616:	4689      	mov	r9, r1
    c618:	e77e      	b.n	c518 <__aeabi_ddiv+0xcc>
    c61a:	2300      	movs	r3, #0
    c61c:	2680      	movs	r6, #128	; 0x80
    c61e:	4699      	mov	r9, r3
    c620:	2200      	movs	r2, #0
    c622:	0336      	lsls	r6, r6, #12
    c624:	4b00      	ldr	r3, [pc, #0]	; (c628 <__aeabi_ddiv+0x1dc>)
    c626:	e777      	b.n	c518 <__aeabi_ddiv+0xcc>
    c628:	000007ff 	.word	0x000007ff
    c62c:	fffffc01 	.word	0xfffffc01
    c630:	0000e0e4 	.word	0x0000e0e4
    c634:	800fffff 	.word	0x800fffff
    c638:	000003f3 	.word	0x000003f3
    c63c:	455e      	cmp	r6, fp
    c63e:	d900      	bls.n	c642 <__aeabi_ddiv+0x1f6>
    c640:	e172      	b.n	c928 <__aeabi_ddiv+0x4dc>
    c642:	d100      	bne.n	c646 <__aeabi_ddiv+0x1fa>
    c644:	e16d      	b.n	c922 <__aeabi_ddiv+0x4d6>
    c646:	9b01      	ldr	r3, [sp, #4]
    c648:	464d      	mov	r5, r9
    c64a:	3b01      	subs	r3, #1
    c64c:	9301      	str	r3, [sp, #4]
    c64e:	2300      	movs	r3, #0
    c650:	0034      	movs	r4, r6
    c652:	9302      	str	r3, [sp, #8]
    c654:	465b      	mov	r3, fp
    c656:	021e      	lsls	r6, r3, #8
    c658:	0e0b      	lsrs	r3, r1, #24
    c65a:	431e      	orrs	r6, r3
    c65c:	020b      	lsls	r3, r1, #8
    c65e:	9303      	str	r3, [sp, #12]
    c660:	0c33      	lsrs	r3, r6, #16
    c662:	4699      	mov	r9, r3
    c664:	0433      	lsls	r3, r6, #16
    c666:	0c1b      	lsrs	r3, r3, #16
    c668:	4649      	mov	r1, r9
    c66a:	0020      	movs	r0, r4
    c66c:	9300      	str	r3, [sp, #0]
    c66e:	f7f9 fea9 	bl	63c4 <__aeabi_uidiv>
    c672:	9b00      	ldr	r3, [sp, #0]
    c674:	0037      	movs	r7, r6
    c676:	4343      	muls	r3, r0
    c678:	0006      	movs	r6, r0
    c67a:	4649      	mov	r1, r9
    c67c:	0020      	movs	r0, r4
    c67e:	4698      	mov	r8, r3
    c680:	f7f9 ff26 	bl	64d0 <__aeabi_uidivmod>
    c684:	0c2c      	lsrs	r4, r5, #16
    c686:	0409      	lsls	r1, r1, #16
    c688:	430c      	orrs	r4, r1
    c68a:	45a0      	cmp	r8, r4
    c68c:	d909      	bls.n	c6a2 <__aeabi_ddiv+0x256>
    c68e:	19e4      	adds	r4, r4, r7
    c690:	1e73      	subs	r3, r6, #1
    c692:	42a7      	cmp	r7, r4
    c694:	d900      	bls.n	c698 <__aeabi_ddiv+0x24c>
    c696:	e15c      	b.n	c952 <__aeabi_ddiv+0x506>
    c698:	45a0      	cmp	r8, r4
    c69a:	d800      	bhi.n	c69e <__aeabi_ddiv+0x252>
    c69c:	e159      	b.n	c952 <__aeabi_ddiv+0x506>
    c69e:	3e02      	subs	r6, #2
    c6a0:	19e4      	adds	r4, r4, r7
    c6a2:	4643      	mov	r3, r8
    c6a4:	1ae4      	subs	r4, r4, r3
    c6a6:	4649      	mov	r1, r9
    c6a8:	0020      	movs	r0, r4
    c6aa:	f7f9 fe8b 	bl	63c4 <__aeabi_uidiv>
    c6ae:	0003      	movs	r3, r0
    c6b0:	9a00      	ldr	r2, [sp, #0]
    c6b2:	4680      	mov	r8, r0
    c6b4:	4353      	muls	r3, r2
    c6b6:	4649      	mov	r1, r9
    c6b8:	0020      	movs	r0, r4
    c6ba:	469b      	mov	fp, r3
    c6bc:	f7f9 ff08 	bl	64d0 <__aeabi_uidivmod>
    c6c0:	042a      	lsls	r2, r5, #16
    c6c2:	0409      	lsls	r1, r1, #16
    c6c4:	0c12      	lsrs	r2, r2, #16
    c6c6:	430a      	orrs	r2, r1
    c6c8:	4593      	cmp	fp, r2
    c6ca:	d90d      	bls.n	c6e8 <__aeabi_ddiv+0x29c>
    c6cc:	4643      	mov	r3, r8
    c6ce:	19d2      	adds	r2, r2, r7
    c6d0:	3b01      	subs	r3, #1
    c6d2:	4297      	cmp	r7, r2
    c6d4:	d900      	bls.n	c6d8 <__aeabi_ddiv+0x28c>
    c6d6:	e13a      	b.n	c94e <__aeabi_ddiv+0x502>
    c6d8:	4593      	cmp	fp, r2
    c6da:	d800      	bhi.n	c6de <__aeabi_ddiv+0x292>
    c6dc:	e137      	b.n	c94e <__aeabi_ddiv+0x502>
    c6de:	2302      	movs	r3, #2
    c6e0:	425b      	negs	r3, r3
    c6e2:	469c      	mov	ip, r3
    c6e4:	19d2      	adds	r2, r2, r7
    c6e6:	44e0      	add	r8, ip
    c6e8:	465b      	mov	r3, fp
    c6ea:	1ad2      	subs	r2, r2, r3
    c6ec:	4643      	mov	r3, r8
    c6ee:	0436      	lsls	r6, r6, #16
    c6f0:	4333      	orrs	r3, r6
    c6f2:	469b      	mov	fp, r3
    c6f4:	9903      	ldr	r1, [sp, #12]
    c6f6:	0c18      	lsrs	r0, r3, #16
    c6f8:	0c0b      	lsrs	r3, r1, #16
    c6fa:	001d      	movs	r5, r3
    c6fc:	9305      	str	r3, [sp, #20]
    c6fe:	0409      	lsls	r1, r1, #16
    c700:	465b      	mov	r3, fp
    c702:	0c09      	lsrs	r1, r1, #16
    c704:	000c      	movs	r4, r1
    c706:	041b      	lsls	r3, r3, #16
    c708:	0c1b      	lsrs	r3, r3, #16
    c70a:	4344      	muls	r4, r0
    c70c:	9104      	str	r1, [sp, #16]
    c70e:	4359      	muls	r1, r3
    c710:	436b      	muls	r3, r5
    c712:	4368      	muls	r0, r5
    c714:	191b      	adds	r3, r3, r4
    c716:	0c0d      	lsrs	r5, r1, #16
    c718:	18eb      	adds	r3, r5, r3
    c71a:	429c      	cmp	r4, r3
    c71c:	d903      	bls.n	c726 <__aeabi_ddiv+0x2da>
    c71e:	2480      	movs	r4, #128	; 0x80
    c720:	0264      	lsls	r4, r4, #9
    c722:	46a4      	mov	ip, r4
    c724:	4460      	add	r0, ip
    c726:	0c1c      	lsrs	r4, r3, #16
    c728:	0409      	lsls	r1, r1, #16
    c72a:	041b      	lsls	r3, r3, #16
    c72c:	0c09      	lsrs	r1, r1, #16
    c72e:	1820      	adds	r0, r4, r0
    c730:	185d      	adds	r5, r3, r1
    c732:	4282      	cmp	r2, r0
    c734:	d200      	bcs.n	c738 <__aeabi_ddiv+0x2ec>
    c736:	e0de      	b.n	c8f6 <__aeabi_ddiv+0x4aa>
    c738:	d100      	bne.n	c73c <__aeabi_ddiv+0x2f0>
    c73a:	e0d7      	b.n	c8ec <__aeabi_ddiv+0x4a0>
    c73c:	1a16      	subs	r6, r2, r0
    c73e:	9b02      	ldr	r3, [sp, #8]
    c740:	469c      	mov	ip, r3
    c742:	1b5d      	subs	r5, r3, r5
    c744:	45ac      	cmp	ip, r5
    c746:	419b      	sbcs	r3, r3
    c748:	425b      	negs	r3, r3
    c74a:	1af6      	subs	r6, r6, r3
    c74c:	42b7      	cmp	r7, r6
    c74e:	d100      	bne.n	c752 <__aeabi_ddiv+0x306>
    c750:	e106      	b.n	c960 <__aeabi_ddiv+0x514>
    c752:	4649      	mov	r1, r9
    c754:	0030      	movs	r0, r6
    c756:	f7f9 fe35 	bl	63c4 <__aeabi_uidiv>
    c75a:	9b00      	ldr	r3, [sp, #0]
    c75c:	0004      	movs	r4, r0
    c75e:	4343      	muls	r3, r0
    c760:	4649      	mov	r1, r9
    c762:	0030      	movs	r0, r6
    c764:	4698      	mov	r8, r3
    c766:	f7f9 feb3 	bl	64d0 <__aeabi_uidivmod>
    c76a:	0c2e      	lsrs	r6, r5, #16
    c76c:	0409      	lsls	r1, r1, #16
    c76e:	430e      	orrs	r6, r1
    c770:	45b0      	cmp	r8, r6
    c772:	d909      	bls.n	c788 <__aeabi_ddiv+0x33c>
    c774:	19f6      	adds	r6, r6, r7
    c776:	1e63      	subs	r3, r4, #1
    c778:	42b7      	cmp	r7, r6
    c77a:	d900      	bls.n	c77e <__aeabi_ddiv+0x332>
    c77c:	e0f3      	b.n	c966 <__aeabi_ddiv+0x51a>
    c77e:	45b0      	cmp	r8, r6
    c780:	d800      	bhi.n	c784 <__aeabi_ddiv+0x338>
    c782:	e0f0      	b.n	c966 <__aeabi_ddiv+0x51a>
    c784:	3c02      	subs	r4, #2
    c786:	19f6      	adds	r6, r6, r7
    c788:	4643      	mov	r3, r8
    c78a:	1af3      	subs	r3, r6, r3
    c78c:	4649      	mov	r1, r9
    c78e:	0018      	movs	r0, r3
    c790:	9302      	str	r3, [sp, #8]
    c792:	f7f9 fe17 	bl	63c4 <__aeabi_uidiv>
    c796:	9b00      	ldr	r3, [sp, #0]
    c798:	0006      	movs	r6, r0
    c79a:	4343      	muls	r3, r0
    c79c:	4649      	mov	r1, r9
    c79e:	9802      	ldr	r0, [sp, #8]
    c7a0:	4698      	mov	r8, r3
    c7a2:	f7f9 fe95 	bl	64d0 <__aeabi_uidivmod>
    c7a6:	042d      	lsls	r5, r5, #16
    c7a8:	0409      	lsls	r1, r1, #16
    c7aa:	0c2d      	lsrs	r5, r5, #16
    c7ac:	430d      	orrs	r5, r1
    c7ae:	45a8      	cmp	r8, r5
    c7b0:	d909      	bls.n	c7c6 <__aeabi_ddiv+0x37a>
    c7b2:	19ed      	adds	r5, r5, r7
    c7b4:	1e73      	subs	r3, r6, #1
    c7b6:	42af      	cmp	r7, r5
    c7b8:	d900      	bls.n	c7bc <__aeabi_ddiv+0x370>
    c7ba:	e0d6      	b.n	c96a <__aeabi_ddiv+0x51e>
    c7bc:	45a8      	cmp	r8, r5
    c7be:	d800      	bhi.n	c7c2 <__aeabi_ddiv+0x376>
    c7c0:	e0d3      	b.n	c96a <__aeabi_ddiv+0x51e>
    c7c2:	3e02      	subs	r6, #2
    c7c4:	19ed      	adds	r5, r5, r7
    c7c6:	0424      	lsls	r4, r4, #16
    c7c8:	0021      	movs	r1, r4
    c7ca:	4643      	mov	r3, r8
    c7cc:	4331      	orrs	r1, r6
    c7ce:	9e04      	ldr	r6, [sp, #16]
    c7d0:	9a05      	ldr	r2, [sp, #20]
    c7d2:	0030      	movs	r0, r6
    c7d4:	1aed      	subs	r5, r5, r3
    c7d6:	040b      	lsls	r3, r1, #16
    c7d8:	0c0c      	lsrs	r4, r1, #16
    c7da:	0c1b      	lsrs	r3, r3, #16
    c7dc:	4358      	muls	r0, r3
    c7de:	4366      	muls	r6, r4
    c7e0:	4353      	muls	r3, r2
    c7e2:	4354      	muls	r4, r2
    c7e4:	199a      	adds	r2, r3, r6
    c7e6:	0c03      	lsrs	r3, r0, #16
    c7e8:	189b      	adds	r3, r3, r2
    c7ea:	429e      	cmp	r6, r3
    c7ec:	d903      	bls.n	c7f6 <__aeabi_ddiv+0x3aa>
    c7ee:	2280      	movs	r2, #128	; 0x80
    c7f0:	0252      	lsls	r2, r2, #9
    c7f2:	4694      	mov	ip, r2
    c7f4:	4464      	add	r4, ip
    c7f6:	0c1a      	lsrs	r2, r3, #16
    c7f8:	0400      	lsls	r0, r0, #16
    c7fa:	041b      	lsls	r3, r3, #16
    c7fc:	0c00      	lsrs	r0, r0, #16
    c7fe:	1914      	adds	r4, r2, r4
    c800:	181b      	adds	r3, r3, r0
    c802:	42a5      	cmp	r5, r4
    c804:	d350      	bcc.n	c8a8 <__aeabi_ddiv+0x45c>
    c806:	d04d      	beq.n	c8a4 <__aeabi_ddiv+0x458>
    c808:	2301      	movs	r3, #1
    c80a:	4319      	orrs	r1, r3
    c80c:	4a96      	ldr	r2, [pc, #600]	; (ca68 <__aeabi_ddiv+0x61c>)
    c80e:	9b01      	ldr	r3, [sp, #4]
    c810:	4694      	mov	ip, r2
    c812:	4463      	add	r3, ip
    c814:	2b00      	cmp	r3, #0
    c816:	dc00      	bgt.n	c81a <__aeabi_ddiv+0x3ce>
    c818:	e6f3      	b.n	c602 <__aeabi_ddiv+0x1b6>
    c81a:	074a      	lsls	r2, r1, #29
    c81c:	d009      	beq.n	c832 <__aeabi_ddiv+0x3e6>
    c81e:	220f      	movs	r2, #15
    c820:	400a      	ands	r2, r1
    c822:	2a04      	cmp	r2, #4
    c824:	d005      	beq.n	c832 <__aeabi_ddiv+0x3e6>
    c826:	1d0a      	adds	r2, r1, #4
    c828:	428a      	cmp	r2, r1
    c82a:	4189      	sbcs	r1, r1
    c82c:	4249      	negs	r1, r1
    c82e:	448b      	add	fp, r1
    c830:	0011      	movs	r1, r2
    c832:	465a      	mov	r2, fp
    c834:	01d2      	lsls	r2, r2, #7
    c836:	d508      	bpl.n	c84a <__aeabi_ddiv+0x3fe>
    c838:	465a      	mov	r2, fp
    c83a:	4b8c      	ldr	r3, [pc, #560]	; (ca6c <__aeabi_ddiv+0x620>)
    c83c:	401a      	ands	r2, r3
    c83e:	4693      	mov	fp, r2
    c840:	2280      	movs	r2, #128	; 0x80
    c842:	00d2      	lsls	r2, r2, #3
    c844:	4694      	mov	ip, r2
    c846:	9b01      	ldr	r3, [sp, #4]
    c848:	4463      	add	r3, ip
    c84a:	4a89      	ldr	r2, [pc, #548]	; (ca70 <__aeabi_ddiv+0x624>)
    c84c:	4293      	cmp	r3, r2
    c84e:	dd00      	ble.n	c852 <__aeabi_ddiv+0x406>
    c850:	e65b      	b.n	c50a <__aeabi_ddiv+0xbe>
    c852:	465a      	mov	r2, fp
    c854:	08c9      	lsrs	r1, r1, #3
    c856:	0750      	lsls	r0, r2, #29
    c858:	4308      	orrs	r0, r1
    c85a:	0256      	lsls	r6, r2, #9
    c85c:	4651      	mov	r1, sl
    c85e:	2201      	movs	r2, #1
    c860:	055b      	lsls	r3, r3, #21
    c862:	4681      	mov	r9, r0
    c864:	0b36      	lsrs	r6, r6, #12
    c866:	0d5b      	lsrs	r3, r3, #21
    c868:	400a      	ands	r2, r1
    c86a:	e655      	b.n	c518 <__aeabi_ddiv+0xcc>
    c86c:	2380      	movs	r3, #128	; 0x80
    c86e:	031b      	lsls	r3, r3, #12
    c870:	421e      	tst	r6, r3
    c872:	d011      	beq.n	c898 <__aeabi_ddiv+0x44c>
    c874:	465a      	mov	r2, fp
    c876:	421a      	tst	r2, r3
    c878:	d10e      	bne.n	c898 <__aeabi_ddiv+0x44c>
    c87a:	465e      	mov	r6, fp
    c87c:	431e      	orrs	r6, r3
    c87e:	0336      	lsls	r6, r6, #12
    c880:	0b36      	lsrs	r6, r6, #12
    c882:	002a      	movs	r2, r5
    c884:	4689      	mov	r9, r1
    c886:	4b7b      	ldr	r3, [pc, #492]	; (ca74 <__aeabi_ddiv+0x628>)
    c888:	e646      	b.n	c518 <__aeabi_ddiv+0xcc>
    c88a:	2b03      	cmp	r3, #3
    c88c:	d100      	bne.n	c890 <__aeabi_ddiv+0x444>
    c88e:	e0e1      	b.n	ca54 <__aeabi_ddiv+0x608>
    c890:	2b01      	cmp	r3, #1
    c892:	d1bb      	bne.n	c80c <__aeabi_ddiv+0x3c0>
    c894:	401a      	ands	r2, r3
    c896:	e6bb      	b.n	c610 <__aeabi_ddiv+0x1c4>
    c898:	431e      	orrs	r6, r3
    c89a:	0336      	lsls	r6, r6, #12
    c89c:	0b36      	lsrs	r6, r6, #12
    c89e:	4642      	mov	r2, r8
    c8a0:	4b74      	ldr	r3, [pc, #464]	; (ca74 <__aeabi_ddiv+0x628>)
    c8a2:	e639      	b.n	c518 <__aeabi_ddiv+0xcc>
    c8a4:	2b00      	cmp	r3, #0
    c8a6:	d0b1      	beq.n	c80c <__aeabi_ddiv+0x3c0>
    c8a8:	197d      	adds	r5, r7, r5
    c8aa:	1e4a      	subs	r2, r1, #1
    c8ac:	42af      	cmp	r7, r5
    c8ae:	d952      	bls.n	c956 <__aeabi_ddiv+0x50a>
    c8b0:	0011      	movs	r1, r2
    c8b2:	42a5      	cmp	r5, r4
    c8b4:	d1a8      	bne.n	c808 <__aeabi_ddiv+0x3bc>
    c8b6:	9a03      	ldr	r2, [sp, #12]
    c8b8:	429a      	cmp	r2, r3
    c8ba:	d1a5      	bne.n	c808 <__aeabi_ddiv+0x3bc>
    c8bc:	e7a6      	b.n	c80c <__aeabi_ddiv+0x3c0>
    c8be:	0003      	movs	r3, r0
    c8c0:	003e      	movs	r6, r7
    c8c2:	3b28      	subs	r3, #40	; 0x28
    c8c4:	409e      	lsls	r6, r3
    c8c6:	2300      	movs	r3, #0
    c8c8:	4699      	mov	r9, r3
    c8ca:	e654      	b.n	c576 <__aeabi_ddiv+0x12a>
    c8cc:	f7fa f9ce 	bl	6c6c <__clzsi2>
    c8d0:	3020      	adds	r0, #32
    c8d2:	e641      	b.n	c558 <__aeabi_ddiv+0x10c>
    c8d4:	0003      	movs	r3, r0
    c8d6:	4652      	mov	r2, sl
    c8d8:	3b28      	subs	r3, #40	; 0x28
    c8da:	409a      	lsls	r2, r3
    c8dc:	2100      	movs	r1, #0
    c8de:	4693      	mov	fp, r2
    c8e0:	e677      	b.n	c5d2 <__aeabi_ddiv+0x186>
    c8e2:	4650      	mov	r0, sl
    c8e4:	f7fa f9c2 	bl	6c6c <__clzsi2>
    c8e8:	3020      	adds	r0, #32
    c8ea:	e65e      	b.n	c5aa <__aeabi_ddiv+0x15e>
    c8ec:	9b02      	ldr	r3, [sp, #8]
    c8ee:	2600      	movs	r6, #0
    c8f0:	42ab      	cmp	r3, r5
    c8f2:	d300      	bcc.n	c8f6 <__aeabi_ddiv+0x4aa>
    c8f4:	e723      	b.n	c73e <__aeabi_ddiv+0x2f2>
    c8f6:	9e03      	ldr	r6, [sp, #12]
    c8f8:	9902      	ldr	r1, [sp, #8]
    c8fa:	46b4      	mov	ip, r6
    c8fc:	4461      	add	r1, ip
    c8fe:	4688      	mov	r8, r1
    c900:	45b0      	cmp	r8, r6
    c902:	41b6      	sbcs	r6, r6
    c904:	465b      	mov	r3, fp
    c906:	4276      	negs	r6, r6
    c908:	19f6      	adds	r6, r6, r7
    c90a:	18b2      	adds	r2, r6, r2
    c90c:	3b01      	subs	r3, #1
    c90e:	9102      	str	r1, [sp, #8]
    c910:	4297      	cmp	r7, r2
    c912:	d213      	bcs.n	c93c <__aeabi_ddiv+0x4f0>
    c914:	4290      	cmp	r0, r2
    c916:	d84f      	bhi.n	c9b8 <__aeabi_ddiv+0x56c>
    c918:	d100      	bne.n	c91c <__aeabi_ddiv+0x4d0>
    c91a:	e08e      	b.n	ca3a <__aeabi_ddiv+0x5ee>
    c91c:	1a16      	subs	r6, r2, r0
    c91e:	469b      	mov	fp, r3
    c920:	e70d      	b.n	c73e <__aeabi_ddiv+0x2f2>
    c922:	4589      	cmp	r9, r1
    c924:	d200      	bcs.n	c928 <__aeabi_ddiv+0x4dc>
    c926:	e68e      	b.n	c646 <__aeabi_ddiv+0x1fa>
    c928:	0874      	lsrs	r4, r6, #1
    c92a:	464b      	mov	r3, r9
    c92c:	07f6      	lsls	r6, r6, #31
    c92e:	0035      	movs	r5, r6
    c930:	085b      	lsrs	r3, r3, #1
    c932:	431d      	orrs	r5, r3
    c934:	464b      	mov	r3, r9
    c936:	07db      	lsls	r3, r3, #31
    c938:	9302      	str	r3, [sp, #8]
    c93a:	e68b      	b.n	c654 <__aeabi_ddiv+0x208>
    c93c:	4297      	cmp	r7, r2
    c93e:	d1ed      	bne.n	c91c <__aeabi_ddiv+0x4d0>
    c940:	9903      	ldr	r1, [sp, #12]
    c942:	9c02      	ldr	r4, [sp, #8]
    c944:	42a1      	cmp	r1, r4
    c946:	d9e5      	bls.n	c914 <__aeabi_ddiv+0x4c8>
    c948:	1a3e      	subs	r6, r7, r0
    c94a:	469b      	mov	fp, r3
    c94c:	e6f7      	b.n	c73e <__aeabi_ddiv+0x2f2>
    c94e:	4698      	mov	r8, r3
    c950:	e6ca      	b.n	c6e8 <__aeabi_ddiv+0x29c>
    c952:	001e      	movs	r6, r3
    c954:	e6a5      	b.n	c6a2 <__aeabi_ddiv+0x256>
    c956:	42ac      	cmp	r4, r5
    c958:	d83e      	bhi.n	c9d8 <__aeabi_ddiv+0x58c>
    c95a:	d074      	beq.n	ca46 <__aeabi_ddiv+0x5fa>
    c95c:	0011      	movs	r1, r2
    c95e:	e753      	b.n	c808 <__aeabi_ddiv+0x3bc>
    c960:	2101      	movs	r1, #1
    c962:	4249      	negs	r1, r1
    c964:	e752      	b.n	c80c <__aeabi_ddiv+0x3c0>
    c966:	001c      	movs	r4, r3
    c968:	e70e      	b.n	c788 <__aeabi_ddiv+0x33c>
    c96a:	001e      	movs	r6, r3
    c96c:	e72b      	b.n	c7c6 <__aeabi_ddiv+0x37a>
    c96e:	2d1f      	cmp	r5, #31
    c970:	dc3c      	bgt.n	c9ec <__aeabi_ddiv+0x5a0>
    c972:	2320      	movs	r3, #32
    c974:	000a      	movs	r2, r1
    c976:	4658      	mov	r0, fp
    c978:	1b5b      	subs	r3, r3, r5
    c97a:	4098      	lsls	r0, r3
    c97c:	40ea      	lsrs	r2, r5
    c97e:	4099      	lsls	r1, r3
    c980:	4302      	orrs	r2, r0
    c982:	1e48      	subs	r0, r1, #1
    c984:	4181      	sbcs	r1, r0
    c986:	465e      	mov	r6, fp
    c988:	4311      	orrs	r1, r2
    c98a:	40ee      	lsrs	r6, r5
    c98c:	074b      	lsls	r3, r1, #29
    c98e:	d009      	beq.n	c9a4 <__aeabi_ddiv+0x558>
    c990:	230f      	movs	r3, #15
    c992:	400b      	ands	r3, r1
    c994:	2b04      	cmp	r3, #4
    c996:	d005      	beq.n	c9a4 <__aeabi_ddiv+0x558>
    c998:	000b      	movs	r3, r1
    c99a:	1d19      	adds	r1, r3, #4
    c99c:	4299      	cmp	r1, r3
    c99e:	419b      	sbcs	r3, r3
    c9a0:	425b      	negs	r3, r3
    c9a2:	18f6      	adds	r6, r6, r3
    c9a4:	0233      	lsls	r3, r6, #8
    c9a6:	d53c      	bpl.n	ca22 <__aeabi_ddiv+0x5d6>
    c9a8:	4653      	mov	r3, sl
    c9aa:	2201      	movs	r2, #1
    c9ac:	2100      	movs	r1, #0
    c9ae:	401a      	ands	r2, r3
    c9b0:	2600      	movs	r6, #0
    c9b2:	2301      	movs	r3, #1
    c9b4:	4689      	mov	r9, r1
    c9b6:	e5af      	b.n	c518 <__aeabi_ddiv+0xcc>
    c9b8:	2302      	movs	r3, #2
    c9ba:	425b      	negs	r3, r3
    c9bc:	469c      	mov	ip, r3
    c9be:	9c03      	ldr	r4, [sp, #12]
    c9c0:	44e3      	add	fp, ip
    c9c2:	46a4      	mov	ip, r4
    c9c4:	9b02      	ldr	r3, [sp, #8]
    c9c6:	4463      	add	r3, ip
    c9c8:	4698      	mov	r8, r3
    c9ca:	45a0      	cmp	r8, r4
    c9cc:	41b6      	sbcs	r6, r6
    c9ce:	4276      	negs	r6, r6
    c9d0:	19f6      	adds	r6, r6, r7
    c9d2:	9302      	str	r3, [sp, #8]
    c9d4:	18b2      	adds	r2, r6, r2
    c9d6:	e6b1      	b.n	c73c <__aeabi_ddiv+0x2f0>
    c9d8:	9803      	ldr	r0, [sp, #12]
    c9da:	1e8a      	subs	r2, r1, #2
    c9dc:	0041      	lsls	r1, r0, #1
    c9de:	4281      	cmp	r1, r0
    c9e0:	41b6      	sbcs	r6, r6
    c9e2:	4276      	negs	r6, r6
    c9e4:	19f6      	adds	r6, r6, r7
    c9e6:	19ad      	adds	r5, r5, r6
    c9e8:	9103      	str	r1, [sp, #12]
    c9ea:	e761      	b.n	c8b0 <__aeabi_ddiv+0x464>
    c9ec:	221f      	movs	r2, #31
    c9ee:	4252      	negs	r2, r2
    c9f0:	1ad3      	subs	r3, r2, r3
    c9f2:	465a      	mov	r2, fp
    c9f4:	40da      	lsrs	r2, r3
    c9f6:	0013      	movs	r3, r2
    c9f8:	2d20      	cmp	r5, #32
    c9fa:	d029      	beq.n	ca50 <__aeabi_ddiv+0x604>
    c9fc:	2240      	movs	r2, #64	; 0x40
    c9fe:	4658      	mov	r0, fp
    ca00:	1b55      	subs	r5, r2, r5
    ca02:	40a8      	lsls	r0, r5
    ca04:	4301      	orrs	r1, r0
    ca06:	1e48      	subs	r0, r1, #1
    ca08:	4181      	sbcs	r1, r0
    ca0a:	2007      	movs	r0, #7
    ca0c:	430b      	orrs	r3, r1
    ca0e:	4018      	ands	r0, r3
    ca10:	2600      	movs	r6, #0
    ca12:	2800      	cmp	r0, #0
    ca14:	d009      	beq.n	ca2a <__aeabi_ddiv+0x5de>
    ca16:	220f      	movs	r2, #15
    ca18:	2600      	movs	r6, #0
    ca1a:	401a      	ands	r2, r3
    ca1c:	0019      	movs	r1, r3
    ca1e:	2a04      	cmp	r2, #4
    ca20:	d1bb      	bne.n	c99a <__aeabi_ddiv+0x54e>
    ca22:	000b      	movs	r3, r1
    ca24:	0770      	lsls	r0, r6, #29
    ca26:	0276      	lsls	r6, r6, #9
    ca28:	0b36      	lsrs	r6, r6, #12
    ca2a:	08db      	lsrs	r3, r3, #3
    ca2c:	4303      	orrs	r3, r0
    ca2e:	4699      	mov	r9, r3
    ca30:	2201      	movs	r2, #1
    ca32:	4653      	mov	r3, sl
    ca34:	401a      	ands	r2, r3
    ca36:	2300      	movs	r3, #0
    ca38:	e56e      	b.n	c518 <__aeabi_ddiv+0xcc>
    ca3a:	9902      	ldr	r1, [sp, #8]
    ca3c:	428d      	cmp	r5, r1
    ca3e:	d8bb      	bhi.n	c9b8 <__aeabi_ddiv+0x56c>
    ca40:	469b      	mov	fp, r3
    ca42:	2600      	movs	r6, #0
    ca44:	e67b      	b.n	c73e <__aeabi_ddiv+0x2f2>
    ca46:	9803      	ldr	r0, [sp, #12]
    ca48:	4298      	cmp	r0, r3
    ca4a:	d3c5      	bcc.n	c9d8 <__aeabi_ddiv+0x58c>
    ca4c:	0011      	movs	r1, r2
    ca4e:	e732      	b.n	c8b6 <__aeabi_ddiv+0x46a>
    ca50:	2000      	movs	r0, #0
    ca52:	e7d7      	b.n	ca04 <__aeabi_ddiv+0x5b8>
    ca54:	2680      	movs	r6, #128	; 0x80
    ca56:	465b      	mov	r3, fp
    ca58:	0336      	lsls	r6, r6, #12
    ca5a:	431e      	orrs	r6, r3
    ca5c:	0336      	lsls	r6, r6, #12
    ca5e:	0b36      	lsrs	r6, r6, #12
    ca60:	9a00      	ldr	r2, [sp, #0]
    ca62:	4689      	mov	r9, r1
    ca64:	4b03      	ldr	r3, [pc, #12]	; (ca74 <__aeabi_ddiv+0x628>)
    ca66:	e557      	b.n	c518 <__aeabi_ddiv+0xcc>
    ca68:	000003ff 	.word	0x000003ff
    ca6c:	feffffff 	.word	0xfeffffff
    ca70:	000007fe 	.word	0x000007fe
    ca74:	000007ff 	.word	0x000007ff

0000ca78 <__eqdf2>:
    ca78:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca7a:	465f      	mov	r7, fp
    ca7c:	4656      	mov	r6, sl
    ca7e:	464d      	mov	r5, r9
    ca80:	4644      	mov	r4, r8
    ca82:	b4f0      	push	{r4, r5, r6, r7}
    ca84:	031f      	lsls	r7, r3, #12
    ca86:	005c      	lsls	r4, r3, #1
    ca88:	0fdb      	lsrs	r3, r3, #31
    ca8a:	469a      	mov	sl, r3
    ca8c:	4b19      	ldr	r3, [pc, #100]	; (caf4 <__eqdf2+0x7c>)
    ca8e:	030e      	lsls	r6, r1, #12
    ca90:	004d      	lsls	r5, r1, #1
    ca92:	0fc9      	lsrs	r1, r1, #31
    ca94:	4680      	mov	r8, r0
    ca96:	0b36      	lsrs	r6, r6, #12
    ca98:	0d6d      	lsrs	r5, r5, #21
    ca9a:	468b      	mov	fp, r1
    ca9c:	4691      	mov	r9, r2
    ca9e:	0b3f      	lsrs	r7, r7, #12
    caa0:	0d64      	lsrs	r4, r4, #21
    caa2:	429d      	cmp	r5, r3
    caa4:	d019      	beq.n	cada <__eqdf2+0x62>
    caa6:	4b13      	ldr	r3, [pc, #76]	; (caf4 <__eqdf2+0x7c>)
    caa8:	429c      	cmp	r4, r3
    caaa:	d01b      	beq.n	cae4 <__eqdf2+0x6c>
    caac:	2301      	movs	r3, #1
    caae:	42a5      	cmp	r5, r4
    cab0:	d006      	beq.n	cac0 <__eqdf2+0x48>
    cab2:	0018      	movs	r0, r3
    cab4:	bc3c      	pop	{r2, r3, r4, r5}
    cab6:	4690      	mov	r8, r2
    cab8:	4699      	mov	r9, r3
    caba:	46a2      	mov	sl, r4
    cabc:	46ab      	mov	fp, r5
    cabe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cac0:	42be      	cmp	r6, r7
    cac2:	d1f6      	bne.n	cab2 <__eqdf2+0x3a>
    cac4:	45c8      	cmp	r8, r9
    cac6:	d1f4      	bne.n	cab2 <__eqdf2+0x3a>
    cac8:	45d3      	cmp	fp, sl
    caca:	d010      	beq.n	caee <__eqdf2+0x76>
    cacc:	2d00      	cmp	r5, #0
    cace:	d1f0      	bne.n	cab2 <__eqdf2+0x3a>
    cad0:	4330      	orrs	r0, r6
    cad2:	0003      	movs	r3, r0
    cad4:	1e5a      	subs	r2, r3, #1
    cad6:	4193      	sbcs	r3, r2
    cad8:	e7eb      	b.n	cab2 <__eqdf2+0x3a>
    cada:	0031      	movs	r1, r6
    cadc:	2301      	movs	r3, #1
    cade:	4301      	orrs	r1, r0
    cae0:	d1e7      	bne.n	cab2 <__eqdf2+0x3a>
    cae2:	e7e0      	b.n	caa6 <__eqdf2+0x2e>
    cae4:	433a      	orrs	r2, r7
    cae6:	2301      	movs	r3, #1
    cae8:	2a00      	cmp	r2, #0
    caea:	d1e2      	bne.n	cab2 <__eqdf2+0x3a>
    caec:	e7de      	b.n	caac <__eqdf2+0x34>
    caee:	2300      	movs	r3, #0
    caf0:	e7df      	b.n	cab2 <__eqdf2+0x3a>
    caf2:	46c0      	nop			; (mov r8, r8)
    caf4:	000007ff 	.word	0x000007ff

0000caf8 <__gedf2>:
    caf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cafa:	465f      	mov	r7, fp
    cafc:	4644      	mov	r4, r8
    cafe:	4656      	mov	r6, sl
    cb00:	464d      	mov	r5, r9
    cb02:	b4f0      	push	{r4, r5, r6, r7}
    cb04:	031f      	lsls	r7, r3, #12
    cb06:	0b3c      	lsrs	r4, r7, #12
    cb08:	4f2c      	ldr	r7, [pc, #176]	; (cbbc <__gedf2+0xc4>)
    cb0a:	030e      	lsls	r6, r1, #12
    cb0c:	004d      	lsls	r5, r1, #1
    cb0e:	46a3      	mov	fp, r4
    cb10:	005c      	lsls	r4, r3, #1
    cb12:	4684      	mov	ip, r0
    cb14:	0b36      	lsrs	r6, r6, #12
    cb16:	0d6d      	lsrs	r5, r5, #21
    cb18:	0fc9      	lsrs	r1, r1, #31
    cb1a:	4690      	mov	r8, r2
    cb1c:	0d64      	lsrs	r4, r4, #21
    cb1e:	0fdb      	lsrs	r3, r3, #31
    cb20:	42bd      	cmp	r5, r7
    cb22:	d02b      	beq.n	cb7c <__gedf2+0x84>
    cb24:	4f25      	ldr	r7, [pc, #148]	; (cbbc <__gedf2+0xc4>)
    cb26:	42bc      	cmp	r4, r7
    cb28:	d02e      	beq.n	cb88 <__gedf2+0x90>
    cb2a:	2d00      	cmp	r5, #0
    cb2c:	d10e      	bne.n	cb4c <__gedf2+0x54>
    cb2e:	4330      	orrs	r0, r6
    cb30:	0007      	movs	r7, r0
    cb32:	4681      	mov	r9, r0
    cb34:	4278      	negs	r0, r7
    cb36:	4178      	adcs	r0, r7
    cb38:	2c00      	cmp	r4, #0
    cb3a:	d117      	bne.n	cb6c <__gedf2+0x74>
    cb3c:	465f      	mov	r7, fp
    cb3e:	433a      	orrs	r2, r7
    cb40:	d114      	bne.n	cb6c <__gedf2+0x74>
    cb42:	464b      	mov	r3, r9
    cb44:	2000      	movs	r0, #0
    cb46:	2b00      	cmp	r3, #0
    cb48:	d00a      	beq.n	cb60 <__gedf2+0x68>
    cb4a:	e006      	b.n	cb5a <__gedf2+0x62>
    cb4c:	2c00      	cmp	r4, #0
    cb4e:	d102      	bne.n	cb56 <__gedf2+0x5e>
    cb50:	4658      	mov	r0, fp
    cb52:	4302      	orrs	r2, r0
    cb54:	d001      	beq.n	cb5a <__gedf2+0x62>
    cb56:	4299      	cmp	r1, r3
    cb58:	d01a      	beq.n	cb90 <__gedf2+0x98>
    cb5a:	2301      	movs	r3, #1
    cb5c:	4248      	negs	r0, r1
    cb5e:	4318      	orrs	r0, r3
    cb60:	bc3c      	pop	{r2, r3, r4, r5}
    cb62:	4690      	mov	r8, r2
    cb64:	4699      	mov	r9, r3
    cb66:	46a2      	mov	sl, r4
    cb68:	46ab      	mov	fp, r5
    cb6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cb6c:	2800      	cmp	r0, #0
    cb6e:	d0f2      	beq.n	cb56 <__gedf2+0x5e>
    cb70:	4258      	negs	r0, r3
    cb72:	4158      	adcs	r0, r3
    cb74:	2201      	movs	r2, #1
    cb76:	4240      	negs	r0, r0
    cb78:	4310      	orrs	r0, r2
    cb7a:	e7f1      	b.n	cb60 <__gedf2+0x68>
    cb7c:	0037      	movs	r7, r6
    cb7e:	4307      	orrs	r7, r0
    cb80:	d0d0      	beq.n	cb24 <__gedf2+0x2c>
    cb82:	2002      	movs	r0, #2
    cb84:	4240      	negs	r0, r0
    cb86:	e7eb      	b.n	cb60 <__gedf2+0x68>
    cb88:	465f      	mov	r7, fp
    cb8a:	4317      	orrs	r7, r2
    cb8c:	d0cd      	beq.n	cb2a <__gedf2+0x32>
    cb8e:	e7f8      	b.n	cb82 <__gedf2+0x8a>
    cb90:	42a5      	cmp	r5, r4
    cb92:	dce2      	bgt.n	cb5a <__gedf2+0x62>
    cb94:	db05      	blt.n	cba2 <__gedf2+0xaa>
    cb96:	455e      	cmp	r6, fp
    cb98:	d8df      	bhi.n	cb5a <__gedf2+0x62>
    cb9a:	d008      	beq.n	cbae <__gedf2+0xb6>
    cb9c:	2000      	movs	r0, #0
    cb9e:	455e      	cmp	r6, fp
    cba0:	d2de      	bcs.n	cb60 <__gedf2+0x68>
    cba2:	4248      	negs	r0, r1
    cba4:	4148      	adcs	r0, r1
    cba6:	2301      	movs	r3, #1
    cba8:	4240      	negs	r0, r0
    cbaa:	4318      	orrs	r0, r3
    cbac:	e7d8      	b.n	cb60 <__gedf2+0x68>
    cbae:	45c4      	cmp	ip, r8
    cbb0:	d8d3      	bhi.n	cb5a <__gedf2+0x62>
    cbb2:	2000      	movs	r0, #0
    cbb4:	45c4      	cmp	ip, r8
    cbb6:	d3f4      	bcc.n	cba2 <__gedf2+0xaa>
    cbb8:	e7d2      	b.n	cb60 <__gedf2+0x68>
    cbba:	46c0      	nop			; (mov r8, r8)
    cbbc:	000007ff 	.word	0x000007ff

0000cbc0 <__ledf2>:
    cbc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbc2:	465f      	mov	r7, fp
    cbc4:	464d      	mov	r5, r9
    cbc6:	4644      	mov	r4, r8
    cbc8:	4656      	mov	r6, sl
    cbca:	b4f0      	push	{r4, r5, r6, r7}
    cbcc:	031c      	lsls	r4, r3, #12
    cbce:	0b24      	lsrs	r4, r4, #12
    cbd0:	46a4      	mov	ip, r4
    cbd2:	4c2f      	ldr	r4, [pc, #188]	; (cc90 <__ledf2+0xd0>)
    cbd4:	030f      	lsls	r7, r1, #12
    cbd6:	004d      	lsls	r5, r1, #1
    cbd8:	005e      	lsls	r6, r3, #1
    cbda:	0fc9      	lsrs	r1, r1, #31
    cbdc:	4680      	mov	r8, r0
    cbde:	0b3f      	lsrs	r7, r7, #12
    cbe0:	0d6d      	lsrs	r5, r5, #21
    cbe2:	468b      	mov	fp, r1
    cbe4:	4691      	mov	r9, r2
    cbe6:	0d76      	lsrs	r6, r6, #21
    cbe8:	0fdb      	lsrs	r3, r3, #31
    cbea:	42a5      	cmp	r5, r4
    cbec:	d020      	beq.n	cc30 <__ledf2+0x70>
    cbee:	4c28      	ldr	r4, [pc, #160]	; (cc90 <__ledf2+0xd0>)
    cbf0:	42a6      	cmp	r6, r4
    cbf2:	d022      	beq.n	cc3a <__ledf2+0x7a>
    cbf4:	2d00      	cmp	r5, #0
    cbf6:	d112      	bne.n	cc1e <__ledf2+0x5e>
    cbf8:	4338      	orrs	r0, r7
    cbfa:	4244      	negs	r4, r0
    cbfc:	4144      	adcs	r4, r0
    cbfe:	2e00      	cmp	r6, #0
    cc00:	d020      	beq.n	cc44 <__ledf2+0x84>
    cc02:	2c00      	cmp	r4, #0
    cc04:	d00d      	beq.n	cc22 <__ledf2+0x62>
    cc06:	425c      	negs	r4, r3
    cc08:	4163      	adcs	r3, r4
    cc0a:	2401      	movs	r4, #1
    cc0c:	425b      	negs	r3, r3
    cc0e:	431c      	orrs	r4, r3
    cc10:	0020      	movs	r0, r4
    cc12:	bc3c      	pop	{r2, r3, r4, r5}
    cc14:	4690      	mov	r8, r2
    cc16:	4699      	mov	r9, r3
    cc18:	46a2      	mov	sl, r4
    cc1a:	46ab      	mov	fp, r5
    cc1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cc1e:	2e00      	cmp	r6, #0
    cc20:	d017      	beq.n	cc52 <__ledf2+0x92>
    cc22:	455b      	cmp	r3, fp
    cc24:	d019      	beq.n	cc5a <__ledf2+0x9a>
    cc26:	465b      	mov	r3, fp
    cc28:	425c      	negs	r4, r3
    cc2a:	2301      	movs	r3, #1
    cc2c:	431c      	orrs	r4, r3
    cc2e:	e7ef      	b.n	cc10 <__ledf2+0x50>
    cc30:	0039      	movs	r1, r7
    cc32:	2402      	movs	r4, #2
    cc34:	4301      	orrs	r1, r0
    cc36:	d1eb      	bne.n	cc10 <__ledf2+0x50>
    cc38:	e7d9      	b.n	cbee <__ledf2+0x2e>
    cc3a:	4661      	mov	r1, ip
    cc3c:	2402      	movs	r4, #2
    cc3e:	4311      	orrs	r1, r2
    cc40:	d1e6      	bne.n	cc10 <__ledf2+0x50>
    cc42:	e7d7      	b.n	cbf4 <__ledf2+0x34>
    cc44:	4661      	mov	r1, ip
    cc46:	430a      	orrs	r2, r1
    cc48:	d1db      	bne.n	cc02 <__ledf2+0x42>
    cc4a:	2400      	movs	r4, #0
    cc4c:	2800      	cmp	r0, #0
    cc4e:	d0df      	beq.n	cc10 <__ledf2+0x50>
    cc50:	e7e9      	b.n	cc26 <__ledf2+0x66>
    cc52:	4661      	mov	r1, ip
    cc54:	430a      	orrs	r2, r1
    cc56:	d1e4      	bne.n	cc22 <__ledf2+0x62>
    cc58:	e7e5      	b.n	cc26 <__ledf2+0x66>
    cc5a:	42b5      	cmp	r5, r6
    cc5c:	dd03      	ble.n	cc66 <__ledf2+0xa6>
    cc5e:	2201      	movs	r2, #1
    cc60:	425c      	negs	r4, r3
    cc62:	4314      	orrs	r4, r2
    cc64:	e7d4      	b.n	cc10 <__ledf2+0x50>
    cc66:	42b5      	cmp	r5, r6
    cc68:	dbcd      	blt.n	cc06 <__ledf2+0x46>
    cc6a:	4567      	cmp	r7, ip
    cc6c:	d8db      	bhi.n	cc26 <__ledf2+0x66>
    cc6e:	d009      	beq.n	cc84 <__ledf2+0xc4>
    cc70:	2400      	movs	r4, #0
    cc72:	4567      	cmp	r7, ip
    cc74:	d2cc      	bcs.n	cc10 <__ledf2+0x50>
    cc76:	4659      	mov	r1, fp
    cc78:	424c      	negs	r4, r1
    cc7a:	4161      	adcs	r1, r4
    cc7c:	2401      	movs	r4, #1
    cc7e:	4249      	negs	r1, r1
    cc80:	430c      	orrs	r4, r1
    cc82:	e7c5      	b.n	cc10 <__ledf2+0x50>
    cc84:	45c8      	cmp	r8, r9
    cc86:	d8ce      	bhi.n	cc26 <__ledf2+0x66>
    cc88:	2400      	movs	r4, #0
    cc8a:	45c8      	cmp	r8, r9
    cc8c:	d3f3      	bcc.n	cc76 <__ledf2+0xb6>
    cc8e:	e7bf      	b.n	cc10 <__ledf2+0x50>
    cc90:	000007ff 	.word	0x000007ff

0000cc94 <__aeabi_dsub>:
    cc94:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc96:	4657      	mov	r7, sl
    cc98:	464e      	mov	r6, r9
    cc9a:	4645      	mov	r5, r8
    cc9c:	b4e0      	push	{r5, r6, r7}
    cc9e:	000e      	movs	r6, r1
    cca0:	0011      	movs	r1, r2
    cca2:	0ff2      	lsrs	r2, r6, #31
    cca4:	4692      	mov	sl, r2
    cca6:	00c5      	lsls	r5, r0, #3
    cca8:	0f42      	lsrs	r2, r0, #29
    ccaa:	0318      	lsls	r0, r3, #12
    ccac:	0337      	lsls	r7, r6, #12
    ccae:	0074      	lsls	r4, r6, #1
    ccb0:	0a40      	lsrs	r0, r0, #9
    ccb2:	0f4e      	lsrs	r6, r1, #29
    ccb4:	0a7f      	lsrs	r7, r7, #9
    ccb6:	4330      	orrs	r0, r6
    ccb8:	4ecf      	ldr	r6, [pc, #828]	; (cff8 <__aeabi_dsub+0x364>)
    ccba:	4317      	orrs	r7, r2
    ccbc:	005a      	lsls	r2, r3, #1
    ccbe:	0d64      	lsrs	r4, r4, #21
    ccc0:	0d52      	lsrs	r2, r2, #21
    ccc2:	0fdb      	lsrs	r3, r3, #31
    ccc4:	00c9      	lsls	r1, r1, #3
    ccc6:	42b2      	cmp	r2, r6
    ccc8:	d100      	bne.n	cccc <__aeabi_dsub+0x38>
    ccca:	e0e5      	b.n	ce98 <__aeabi_dsub+0x204>
    cccc:	2601      	movs	r6, #1
    ccce:	4073      	eors	r3, r6
    ccd0:	1aa6      	subs	r6, r4, r2
    ccd2:	46b4      	mov	ip, r6
    ccd4:	4553      	cmp	r3, sl
    ccd6:	d100      	bne.n	ccda <__aeabi_dsub+0x46>
    ccd8:	e0af      	b.n	ce3a <__aeabi_dsub+0x1a6>
    ccda:	2e00      	cmp	r6, #0
    ccdc:	dc00      	bgt.n	cce0 <__aeabi_dsub+0x4c>
    ccde:	e10d      	b.n	cefc <__aeabi_dsub+0x268>
    cce0:	2a00      	cmp	r2, #0
    cce2:	d13a      	bne.n	cd5a <__aeabi_dsub+0xc6>
    cce4:	0003      	movs	r3, r0
    cce6:	430b      	orrs	r3, r1
    cce8:	d000      	beq.n	ccec <__aeabi_dsub+0x58>
    ccea:	e0e4      	b.n	ceb6 <__aeabi_dsub+0x222>
    ccec:	076b      	lsls	r3, r5, #29
    ccee:	d009      	beq.n	cd04 <__aeabi_dsub+0x70>
    ccf0:	230f      	movs	r3, #15
    ccf2:	402b      	ands	r3, r5
    ccf4:	2b04      	cmp	r3, #4
    ccf6:	d005      	beq.n	cd04 <__aeabi_dsub+0x70>
    ccf8:	1d2b      	adds	r3, r5, #4
    ccfa:	42ab      	cmp	r3, r5
    ccfc:	41ad      	sbcs	r5, r5
    ccfe:	426d      	negs	r5, r5
    cd00:	197f      	adds	r7, r7, r5
    cd02:	001d      	movs	r5, r3
    cd04:	023b      	lsls	r3, r7, #8
    cd06:	d400      	bmi.n	cd0a <__aeabi_dsub+0x76>
    cd08:	e088      	b.n	ce1c <__aeabi_dsub+0x188>
    cd0a:	4bbb      	ldr	r3, [pc, #748]	; (cff8 <__aeabi_dsub+0x364>)
    cd0c:	3401      	adds	r4, #1
    cd0e:	429c      	cmp	r4, r3
    cd10:	d100      	bne.n	cd14 <__aeabi_dsub+0x80>
    cd12:	e110      	b.n	cf36 <__aeabi_dsub+0x2a2>
    cd14:	003a      	movs	r2, r7
    cd16:	4bb9      	ldr	r3, [pc, #740]	; (cffc <__aeabi_dsub+0x368>)
    cd18:	4651      	mov	r1, sl
    cd1a:	401a      	ands	r2, r3
    cd1c:	2301      	movs	r3, #1
    cd1e:	0750      	lsls	r0, r2, #29
    cd20:	08ed      	lsrs	r5, r5, #3
    cd22:	0252      	lsls	r2, r2, #9
    cd24:	0564      	lsls	r4, r4, #21
    cd26:	4305      	orrs	r5, r0
    cd28:	0b12      	lsrs	r2, r2, #12
    cd2a:	0d64      	lsrs	r4, r4, #21
    cd2c:	400b      	ands	r3, r1
    cd2e:	2100      	movs	r1, #0
    cd30:	0028      	movs	r0, r5
    cd32:	0312      	lsls	r2, r2, #12
    cd34:	0d0d      	lsrs	r5, r1, #20
    cd36:	0b12      	lsrs	r2, r2, #12
    cd38:	0564      	lsls	r4, r4, #21
    cd3a:	052d      	lsls	r5, r5, #20
    cd3c:	4315      	orrs	r5, r2
    cd3e:	0862      	lsrs	r2, r4, #1
    cd40:	4caf      	ldr	r4, [pc, #700]	; (d000 <__aeabi_dsub+0x36c>)
    cd42:	07db      	lsls	r3, r3, #31
    cd44:	402c      	ands	r4, r5
    cd46:	4314      	orrs	r4, r2
    cd48:	0064      	lsls	r4, r4, #1
    cd4a:	0864      	lsrs	r4, r4, #1
    cd4c:	431c      	orrs	r4, r3
    cd4e:	0021      	movs	r1, r4
    cd50:	bc1c      	pop	{r2, r3, r4}
    cd52:	4690      	mov	r8, r2
    cd54:	4699      	mov	r9, r3
    cd56:	46a2      	mov	sl, r4
    cd58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd5a:	4ba7      	ldr	r3, [pc, #668]	; (cff8 <__aeabi_dsub+0x364>)
    cd5c:	429c      	cmp	r4, r3
    cd5e:	d0c5      	beq.n	ccec <__aeabi_dsub+0x58>
    cd60:	2380      	movs	r3, #128	; 0x80
    cd62:	041b      	lsls	r3, r3, #16
    cd64:	4318      	orrs	r0, r3
    cd66:	4663      	mov	r3, ip
    cd68:	2b38      	cmp	r3, #56	; 0x38
    cd6a:	dd00      	ble.n	cd6e <__aeabi_dsub+0xda>
    cd6c:	e0fd      	b.n	cf6a <__aeabi_dsub+0x2d6>
    cd6e:	2b1f      	cmp	r3, #31
    cd70:	dd00      	ble.n	cd74 <__aeabi_dsub+0xe0>
    cd72:	e130      	b.n	cfd6 <__aeabi_dsub+0x342>
    cd74:	4662      	mov	r2, ip
    cd76:	2320      	movs	r3, #32
    cd78:	1a9b      	subs	r3, r3, r2
    cd7a:	0002      	movs	r2, r0
    cd7c:	409a      	lsls	r2, r3
    cd7e:	4666      	mov	r6, ip
    cd80:	4690      	mov	r8, r2
    cd82:	000a      	movs	r2, r1
    cd84:	4099      	lsls	r1, r3
    cd86:	40f2      	lsrs	r2, r6
    cd88:	4646      	mov	r6, r8
    cd8a:	1e4b      	subs	r3, r1, #1
    cd8c:	4199      	sbcs	r1, r3
    cd8e:	4332      	orrs	r2, r6
    cd90:	4311      	orrs	r1, r2
    cd92:	4663      	mov	r3, ip
    cd94:	0002      	movs	r2, r0
    cd96:	40da      	lsrs	r2, r3
    cd98:	1a69      	subs	r1, r5, r1
    cd9a:	428d      	cmp	r5, r1
    cd9c:	419b      	sbcs	r3, r3
    cd9e:	000d      	movs	r5, r1
    cda0:	1aba      	subs	r2, r7, r2
    cda2:	425b      	negs	r3, r3
    cda4:	1ad7      	subs	r7, r2, r3
    cda6:	023b      	lsls	r3, r7, #8
    cda8:	d535      	bpl.n	ce16 <__aeabi_dsub+0x182>
    cdaa:	027a      	lsls	r2, r7, #9
    cdac:	0a53      	lsrs	r3, r2, #9
    cdae:	4698      	mov	r8, r3
    cdb0:	4643      	mov	r3, r8
    cdb2:	2b00      	cmp	r3, #0
    cdb4:	d100      	bne.n	cdb8 <__aeabi_dsub+0x124>
    cdb6:	e0c4      	b.n	cf42 <__aeabi_dsub+0x2ae>
    cdb8:	4640      	mov	r0, r8
    cdba:	f7f9 ff57 	bl	6c6c <__clzsi2>
    cdbe:	0003      	movs	r3, r0
    cdc0:	3b08      	subs	r3, #8
    cdc2:	2b1f      	cmp	r3, #31
    cdc4:	dd00      	ble.n	cdc8 <__aeabi_dsub+0x134>
    cdc6:	e0c5      	b.n	cf54 <__aeabi_dsub+0x2c0>
    cdc8:	2220      	movs	r2, #32
    cdca:	0029      	movs	r1, r5
    cdcc:	1ad2      	subs	r2, r2, r3
    cdce:	4647      	mov	r7, r8
    cdd0:	40d1      	lsrs	r1, r2
    cdd2:	409f      	lsls	r7, r3
    cdd4:	000a      	movs	r2, r1
    cdd6:	409d      	lsls	r5, r3
    cdd8:	433a      	orrs	r2, r7
    cdda:	429c      	cmp	r4, r3
    cddc:	dd00      	ble.n	cde0 <__aeabi_dsub+0x14c>
    cdde:	e0c0      	b.n	cf62 <__aeabi_dsub+0x2ce>
    cde0:	1b1c      	subs	r4, r3, r4
    cde2:	1c63      	adds	r3, r4, #1
    cde4:	2b1f      	cmp	r3, #31
    cde6:	dd00      	ble.n	cdea <__aeabi_dsub+0x156>
    cde8:	e0e4      	b.n	cfb4 <__aeabi_dsub+0x320>
    cdea:	2120      	movs	r1, #32
    cdec:	0014      	movs	r4, r2
    cdee:	0028      	movs	r0, r5
    cdf0:	1ac9      	subs	r1, r1, r3
    cdf2:	40d8      	lsrs	r0, r3
    cdf4:	408c      	lsls	r4, r1
    cdf6:	408d      	lsls	r5, r1
    cdf8:	4304      	orrs	r4, r0
    cdfa:	40da      	lsrs	r2, r3
    cdfc:	1e68      	subs	r0, r5, #1
    cdfe:	4185      	sbcs	r5, r0
    ce00:	0017      	movs	r7, r2
    ce02:	4325      	orrs	r5, r4
    ce04:	2400      	movs	r4, #0
    ce06:	e771      	b.n	ccec <__aeabi_dsub+0x58>
    ce08:	4642      	mov	r2, r8
    ce0a:	4663      	mov	r3, ip
    ce0c:	431a      	orrs	r2, r3
    ce0e:	d100      	bne.n	ce12 <__aeabi_dsub+0x17e>
    ce10:	e24c      	b.n	d2ac <__aeabi_dsub+0x618>
    ce12:	4667      	mov	r7, ip
    ce14:	4645      	mov	r5, r8
    ce16:	076b      	lsls	r3, r5, #29
    ce18:	d000      	beq.n	ce1c <__aeabi_dsub+0x188>
    ce1a:	e769      	b.n	ccf0 <__aeabi_dsub+0x5c>
    ce1c:	2301      	movs	r3, #1
    ce1e:	4651      	mov	r1, sl
    ce20:	0778      	lsls	r0, r7, #29
    ce22:	08ed      	lsrs	r5, r5, #3
    ce24:	08fa      	lsrs	r2, r7, #3
    ce26:	400b      	ands	r3, r1
    ce28:	4305      	orrs	r5, r0
    ce2a:	4973      	ldr	r1, [pc, #460]	; (cff8 <__aeabi_dsub+0x364>)
    ce2c:	428c      	cmp	r4, r1
    ce2e:	d038      	beq.n	cea2 <__aeabi_dsub+0x20e>
    ce30:	0312      	lsls	r2, r2, #12
    ce32:	0564      	lsls	r4, r4, #21
    ce34:	0b12      	lsrs	r2, r2, #12
    ce36:	0d64      	lsrs	r4, r4, #21
    ce38:	e779      	b.n	cd2e <__aeabi_dsub+0x9a>
    ce3a:	2e00      	cmp	r6, #0
    ce3c:	dc00      	bgt.n	ce40 <__aeabi_dsub+0x1ac>
    ce3e:	e09a      	b.n	cf76 <__aeabi_dsub+0x2e2>
    ce40:	2a00      	cmp	r2, #0
    ce42:	d047      	beq.n	ced4 <__aeabi_dsub+0x240>
    ce44:	4a6c      	ldr	r2, [pc, #432]	; (cff8 <__aeabi_dsub+0x364>)
    ce46:	4294      	cmp	r4, r2
    ce48:	d100      	bne.n	ce4c <__aeabi_dsub+0x1b8>
    ce4a:	e74f      	b.n	ccec <__aeabi_dsub+0x58>
    ce4c:	2280      	movs	r2, #128	; 0x80
    ce4e:	0412      	lsls	r2, r2, #16
    ce50:	4310      	orrs	r0, r2
    ce52:	4662      	mov	r2, ip
    ce54:	2a38      	cmp	r2, #56	; 0x38
    ce56:	dc00      	bgt.n	ce5a <__aeabi_dsub+0x1c6>
    ce58:	e108      	b.n	d06c <__aeabi_dsub+0x3d8>
    ce5a:	4301      	orrs	r1, r0
    ce5c:	1e48      	subs	r0, r1, #1
    ce5e:	4181      	sbcs	r1, r0
    ce60:	2200      	movs	r2, #0
    ce62:	b2c9      	uxtb	r1, r1
    ce64:	1949      	adds	r1, r1, r5
    ce66:	19d2      	adds	r2, r2, r7
    ce68:	42a9      	cmp	r1, r5
    ce6a:	41bf      	sbcs	r7, r7
    ce6c:	000d      	movs	r5, r1
    ce6e:	427f      	negs	r7, r7
    ce70:	18bf      	adds	r7, r7, r2
    ce72:	023a      	lsls	r2, r7, #8
    ce74:	d400      	bmi.n	ce78 <__aeabi_dsub+0x1e4>
    ce76:	e142      	b.n	d0fe <__aeabi_dsub+0x46a>
    ce78:	4a5f      	ldr	r2, [pc, #380]	; (cff8 <__aeabi_dsub+0x364>)
    ce7a:	3401      	adds	r4, #1
    ce7c:	4294      	cmp	r4, r2
    ce7e:	d100      	bne.n	ce82 <__aeabi_dsub+0x1ee>
    ce80:	e14e      	b.n	d120 <__aeabi_dsub+0x48c>
    ce82:	2001      	movs	r0, #1
    ce84:	4a5d      	ldr	r2, [pc, #372]	; (cffc <__aeabi_dsub+0x368>)
    ce86:	0869      	lsrs	r1, r5, #1
    ce88:	403a      	ands	r2, r7
    ce8a:	4028      	ands	r0, r5
    ce8c:	4308      	orrs	r0, r1
    ce8e:	07d5      	lsls	r5, r2, #31
    ce90:	4305      	orrs	r5, r0
    ce92:	0857      	lsrs	r7, r2, #1
    ce94:	469a      	mov	sl, r3
    ce96:	e729      	b.n	ccec <__aeabi_dsub+0x58>
    ce98:	0006      	movs	r6, r0
    ce9a:	430e      	orrs	r6, r1
    ce9c:	d000      	beq.n	cea0 <__aeabi_dsub+0x20c>
    ce9e:	e717      	b.n	ccd0 <__aeabi_dsub+0x3c>
    cea0:	e714      	b.n	cccc <__aeabi_dsub+0x38>
    cea2:	0029      	movs	r1, r5
    cea4:	4311      	orrs	r1, r2
    cea6:	d100      	bne.n	ceaa <__aeabi_dsub+0x216>
    cea8:	e1f9      	b.n	d29e <__aeabi_dsub+0x60a>
    ceaa:	2180      	movs	r1, #128	; 0x80
    ceac:	0309      	lsls	r1, r1, #12
    ceae:	430a      	orrs	r2, r1
    ceb0:	0312      	lsls	r2, r2, #12
    ceb2:	0b12      	lsrs	r2, r2, #12
    ceb4:	e73b      	b.n	cd2e <__aeabi_dsub+0x9a>
    ceb6:	2301      	movs	r3, #1
    ceb8:	425b      	negs	r3, r3
    ceba:	4698      	mov	r8, r3
    cebc:	44c4      	add	ip, r8
    cebe:	4663      	mov	r3, ip
    cec0:	2b00      	cmp	r3, #0
    cec2:	d172      	bne.n	cfaa <__aeabi_dsub+0x316>
    cec4:	1a69      	subs	r1, r5, r1
    cec6:	428d      	cmp	r5, r1
    cec8:	419b      	sbcs	r3, r3
    ceca:	1a3f      	subs	r7, r7, r0
    cecc:	425b      	negs	r3, r3
    cece:	1aff      	subs	r7, r7, r3
    ced0:	000d      	movs	r5, r1
    ced2:	e768      	b.n	cda6 <__aeabi_dsub+0x112>
    ced4:	0002      	movs	r2, r0
    ced6:	430a      	orrs	r2, r1
    ced8:	d100      	bne.n	cedc <__aeabi_dsub+0x248>
    ceda:	e707      	b.n	ccec <__aeabi_dsub+0x58>
    cedc:	2201      	movs	r2, #1
    cede:	4252      	negs	r2, r2
    cee0:	4690      	mov	r8, r2
    cee2:	44c4      	add	ip, r8
    cee4:	4662      	mov	r2, ip
    cee6:	2a00      	cmp	r2, #0
    cee8:	d000      	beq.n	ceec <__aeabi_dsub+0x258>
    ceea:	e0e6      	b.n	d0ba <__aeabi_dsub+0x426>
    ceec:	1869      	adds	r1, r5, r1
    ceee:	42a9      	cmp	r1, r5
    cef0:	41b6      	sbcs	r6, r6
    cef2:	183f      	adds	r7, r7, r0
    cef4:	4276      	negs	r6, r6
    cef6:	19f7      	adds	r7, r6, r7
    cef8:	000d      	movs	r5, r1
    cefa:	e7ba      	b.n	ce72 <__aeabi_dsub+0x1de>
    cefc:	2e00      	cmp	r6, #0
    cefe:	d000      	beq.n	cf02 <__aeabi_dsub+0x26e>
    cf00:	e080      	b.n	d004 <__aeabi_dsub+0x370>
    cf02:	1c62      	adds	r2, r4, #1
    cf04:	0552      	lsls	r2, r2, #21
    cf06:	0d52      	lsrs	r2, r2, #21
    cf08:	2a01      	cmp	r2, #1
    cf0a:	dc00      	bgt.n	cf0e <__aeabi_dsub+0x27a>
    cf0c:	e0f9      	b.n	d102 <__aeabi_dsub+0x46e>
    cf0e:	1a6a      	subs	r2, r5, r1
    cf10:	4691      	mov	r9, r2
    cf12:	454d      	cmp	r5, r9
    cf14:	41b6      	sbcs	r6, r6
    cf16:	1a3a      	subs	r2, r7, r0
    cf18:	4276      	negs	r6, r6
    cf1a:	1b92      	subs	r2, r2, r6
    cf1c:	4690      	mov	r8, r2
    cf1e:	0212      	lsls	r2, r2, #8
    cf20:	d400      	bmi.n	cf24 <__aeabi_dsub+0x290>
    cf22:	e099      	b.n	d058 <__aeabi_dsub+0x3c4>
    cf24:	1b4d      	subs	r5, r1, r5
    cf26:	42a9      	cmp	r1, r5
    cf28:	4189      	sbcs	r1, r1
    cf2a:	1bc7      	subs	r7, r0, r7
    cf2c:	4249      	negs	r1, r1
    cf2e:	1a7a      	subs	r2, r7, r1
    cf30:	4690      	mov	r8, r2
    cf32:	469a      	mov	sl, r3
    cf34:	e73c      	b.n	cdb0 <__aeabi_dsub+0x11c>
    cf36:	4652      	mov	r2, sl
    cf38:	2301      	movs	r3, #1
    cf3a:	2500      	movs	r5, #0
    cf3c:	4013      	ands	r3, r2
    cf3e:	2200      	movs	r2, #0
    cf40:	e6f5      	b.n	cd2e <__aeabi_dsub+0x9a>
    cf42:	0028      	movs	r0, r5
    cf44:	f7f9 fe92 	bl	6c6c <__clzsi2>
    cf48:	3020      	adds	r0, #32
    cf4a:	0003      	movs	r3, r0
    cf4c:	3b08      	subs	r3, #8
    cf4e:	2b1f      	cmp	r3, #31
    cf50:	dc00      	bgt.n	cf54 <__aeabi_dsub+0x2c0>
    cf52:	e739      	b.n	cdc8 <__aeabi_dsub+0x134>
    cf54:	002a      	movs	r2, r5
    cf56:	3828      	subs	r0, #40	; 0x28
    cf58:	4082      	lsls	r2, r0
    cf5a:	2500      	movs	r5, #0
    cf5c:	429c      	cmp	r4, r3
    cf5e:	dc00      	bgt.n	cf62 <__aeabi_dsub+0x2ce>
    cf60:	e73e      	b.n	cde0 <__aeabi_dsub+0x14c>
    cf62:	4f26      	ldr	r7, [pc, #152]	; (cffc <__aeabi_dsub+0x368>)
    cf64:	1ae4      	subs	r4, r4, r3
    cf66:	4017      	ands	r7, r2
    cf68:	e6c0      	b.n	ccec <__aeabi_dsub+0x58>
    cf6a:	4301      	orrs	r1, r0
    cf6c:	1e48      	subs	r0, r1, #1
    cf6e:	4181      	sbcs	r1, r0
    cf70:	2200      	movs	r2, #0
    cf72:	b2c9      	uxtb	r1, r1
    cf74:	e710      	b.n	cd98 <__aeabi_dsub+0x104>
    cf76:	2e00      	cmp	r6, #0
    cf78:	d000      	beq.n	cf7c <__aeabi_dsub+0x2e8>
    cf7a:	e0f1      	b.n	d160 <__aeabi_dsub+0x4cc>
    cf7c:	1c62      	adds	r2, r4, #1
    cf7e:	4694      	mov	ip, r2
    cf80:	0552      	lsls	r2, r2, #21
    cf82:	0d52      	lsrs	r2, r2, #21
    cf84:	2a01      	cmp	r2, #1
    cf86:	dc00      	bgt.n	cf8a <__aeabi_dsub+0x2f6>
    cf88:	e0a0      	b.n	d0cc <__aeabi_dsub+0x438>
    cf8a:	4a1b      	ldr	r2, [pc, #108]	; (cff8 <__aeabi_dsub+0x364>)
    cf8c:	4594      	cmp	ip, r2
    cf8e:	d100      	bne.n	cf92 <__aeabi_dsub+0x2fe>
    cf90:	e0c5      	b.n	d11e <__aeabi_dsub+0x48a>
    cf92:	1869      	adds	r1, r5, r1
    cf94:	42a9      	cmp	r1, r5
    cf96:	4192      	sbcs	r2, r2
    cf98:	183f      	adds	r7, r7, r0
    cf9a:	4252      	negs	r2, r2
    cf9c:	19d2      	adds	r2, r2, r7
    cf9e:	0849      	lsrs	r1, r1, #1
    cfa0:	07d5      	lsls	r5, r2, #31
    cfa2:	430d      	orrs	r5, r1
    cfa4:	0857      	lsrs	r7, r2, #1
    cfa6:	4664      	mov	r4, ip
    cfa8:	e6a0      	b.n	ccec <__aeabi_dsub+0x58>
    cfaa:	4b13      	ldr	r3, [pc, #76]	; (cff8 <__aeabi_dsub+0x364>)
    cfac:	429c      	cmp	r4, r3
    cfae:	d000      	beq.n	cfb2 <__aeabi_dsub+0x31e>
    cfb0:	e6d9      	b.n	cd66 <__aeabi_dsub+0xd2>
    cfb2:	e69b      	b.n	ccec <__aeabi_dsub+0x58>
    cfb4:	0011      	movs	r1, r2
    cfb6:	3c1f      	subs	r4, #31
    cfb8:	40e1      	lsrs	r1, r4
    cfba:	000c      	movs	r4, r1
    cfbc:	2b20      	cmp	r3, #32
    cfbe:	d100      	bne.n	cfc2 <__aeabi_dsub+0x32e>
    cfc0:	e080      	b.n	d0c4 <__aeabi_dsub+0x430>
    cfc2:	2140      	movs	r1, #64	; 0x40
    cfc4:	1acb      	subs	r3, r1, r3
    cfc6:	409a      	lsls	r2, r3
    cfc8:	4315      	orrs	r5, r2
    cfca:	1e6a      	subs	r2, r5, #1
    cfcc:	4195      	sbcs	r5, r2
    cfce:	2700      	movs	r7, #0
    cfd0:	4325      	orrs	r5, r4
    cfd2:	2400      	movs	r4, #0
    cfd4:	e71f      	b.n	ce16 <__aeabi_dsub+0x182>
    cfd6:	4663      	mov	r3, ip
    cfd8:	0002      	movs	r2, r0
    cfda:	3b20      	subs	r3, #32
    cfdc:	40da      	lsrs	r2, r3
    cfde:	4663      	mov	r3, ip
    cfe0:	2b20      	cmp	r3, #32
    cfe2:	d071      	beq.n	d0c8 <__aeabi_dsub+0x434>
    cfe4:	2340      	movs	r3, #64	; 0x40
    cfe6:	4666      	mov	r6, ip
    cfe8:	1b9b      	subs	r3, r3, r6
    cfea:	4098      	lsls	r0, r3
    cfec:	4301      	orrs	r1, r0
    cfee:	1e48      	subs	r0, r1, #1
    cff0:	4181      	sbcs	r1, r0
    cff2:	4311      	orrs	r1, r2
    cff4:	2200      	movs	r2, #0
    cff6:	e6cf      	b.n	cd98 <__aeabi_dsub+0x104>
    cff8:	000007ff 	.word	0x000007ff
    cffc:	ff7fffff 	.word	0xff7fffff
    d000:	800fffff 	.word	0x800fffff
    d004:	2c00      	cmp	r4, #0
    d006:	d048      	beq.n	d09a <__aeabi_dsub+0x406>
    d008:	4cca      	ldr	r4, [pc, #808]	; (d334 <__aeabi_dsub+0x6a0>)
    d00a:	42a2      	cmp	r2, r4
    d00c:	d100      	bne.n	d010 <__aeabi_dsub+0x37c>
    d00e:	e0a2      	b.n	d156 <__aeabi_dsub+0x4c2>
    d010:	4274      	negs	r4, r6
    d012:	46a1      	mov	r9, r4
    d014:	2480      	movs	r4, #128	; 0x80
    d016:	0424      	lsls	r4, r4, #16
    d018:	4327      	orrs	r7, r4
    d01a:	464c      	mov	r4, r9
    d01c:	2c38      	cmp	r4, #56	; 0x38
    d01e:	dd00      	ble.n	d022 <__aeabi_dsub+0x38e>
    d020:	e0db      	b.n	d1da <__aeabi_dsub+0x546>
    d022:	2c1f      	cmp	r4, #31
    d024:	dd00      	ble.n	d028 <__aeabi_dsub+0x394>
    d026:	e144      	b.n	d2b2 <__aeabi_dsub+0x61e>
    d028:	464e      	mov	r6, r9
    d02a:	2420      	movs	r4, #32
    d02c:	1ba4      	subs	r4, r4, r6
    d02e:	003e      	movs	r6, r7
    d030:	40a6      	lsls	r6, r4
    d032:	46a2      	mov	sl, r4
    d034:	46b0      	mov	r8, r6
    d036:	464c      	mov	r4, r9
    d038:	002e      	movs	r6, r5
    d03a:	40e6      	lsrs	r6, r4
    d03c:	46b4      	mov	ip, r6
    d03e:	4646      	mov	r6, r8
    d040:	4664      	mov	r4, ip
    d042:	4326      	orrs	r6, r4
    d044:	4654      	mov	r4, sl
    d046:	40a5      	lsls	r5, r4
    d048:	1e6c      	subs	r4, r5, #1
    d04a:	41a5      	sbcs	r5, r4
    d04c:	0034      	movs	r4, r6
    d04e:	432c      	orrs	r4, r5
    d050:	464d      	mov	r5, r9
    d052:	40ef      	lsrs	r7, r5
    d054:	1b0d      	subs	r5, r1, r4
    d056:	e028      	b.n	d0aa <__aeabi_dsub+0x416>
    d058:	464a      	mov	r2, r9
    d05a:	4643      	mov	r3, r8
    d05c:	464d      	mov	r5, r9
    d05e:	431a      	orrs	r2, r3
    d060:	d000      	beq.n	d064 <__aeabi_dsub+0x3d0>
    d062:	e6a5      	b.n	cdb0 <__aeabi_dsub+0x11c>
    d064:	2300      	movs	r3, #0
    d066:	2400      	movs	r4, #0
    d068:	2500      	movs	r5, #0
    d06a:	e6de      	b.n	ce2a <__aeabi_dsub+0x196>
    d06c:	2a1f      	cmp	r2, #31
    d06e:	dc5a      	bgt.n	d126 <__aeabi_dsub+0x492>
    d070:	4666      	mov	r6, ip
    d072:	2220      	movs	r2, #32
    d074:	1b92      	subs	r2, r2, r6
    d076:	0006      	movs	r6, r0
    d078:	4096      	lsls	r6, r2
    d07a:	4691      	mov	r9, r2
    d07c:	46b0      	mov	r8, r6
    d07e:	4662      	mov	r2, ip
    d080:	000e      	movs	r6, r1
    d082:	40d6      	lsrs	r6, r2
    d084:	4642      	mov	r2, r8
    d086:	4316      	orrs	r6, r2
    d088:	464a      	mov	r2, r9
    d08a:	4091      	lsls	r1, r2
    d08c:	1e4a      	subs	r2, r1, #1
    d08e:	4191      	sbcs	r1, r2
    d090:	0002      	movs	r2, r0
    d092:	4660      	mov	r0, ip
    d094:	4331      	orrs	r1, r6
    d096:	40c2      	lsrs	r2, r0
    d098:	e6e4      	b.n	ce64 <__aeabi_dsub+0x1d0>
    d09a:	003c      	movs	r4, r7
    d09c:	432c      	orrs	r4, r5
    d09e:	d05a      	beq.n	d156 <__aeabi_dsub+0x4c2>
    d0a0:	43f4      	mvns	r4, r6
    d0a2:	46a1      	mov	r9, r4
    d0a4:	2c00      	cmp	r4, #0
    d0a6:	d152      	bne.n	d14e <__aeabi_dsub+0x4ba>
    d0a8:	1b4d      	subs	r5, r1, r5
    d0aa:	42a9      	cmp	r1, r5
    d0ac:	4189      	sbcs	r1, r1
    d0ae:	1bc7      	subs	r7, r0, r7
    d0b0:	4249      	negs	r1, r1
    d0b2:	1a7f      	subs	r7, r7, r1
    d0b4:	0014      	movs	r4, r2
    d0b6:	469a      	mov	sl, r3
    d0b8:	e675      	b.n	cda6 <__aeabi_dsub+0x112>
    d0ba:	4a9e      	ldr	r2, [pc, #632]	; (d334 <__aeabi_dsub+0x6a0>)
    d0bc:	4294      	cmp	r4, r2
    d0be:	d000      	beq.n	d0c2 <__aeabi_dsub+0x42e>
    d0c0:	e6c7      	b.n	ce52 <__aeabi_dsub+0x1be>
    d0c2:	e613      	b.n	ccec <__aeabi_dsub+0x58>
    d0c4:	2200      	movs	r2, #0
    d0c6:	e77f      	b.n	cfc8 <__aeabi_dsub+0x334>
    d0c8:	2000      	movs	r0, #0
    d0ca:	e78f      	b.n	cfec <__aeabi_dsub+0x358>
    d0cc:	2c00      	cmp	r4, #0
    d0ce:	d000      	beq.n	d0d2 <__aeabi_dsub+0x43e>
    d0d0:	e0c8      	b.n	d264 <__aeabi_dsub+0x5d0>
    d0d2:	003b      	movs	r3, r7
    d0d4:	432b      	orrs	r3, r5
    d0d6:	d100      	bne.n	d0da <__aeabi_dsub+0x446>
    d0d8:	e10f      	b.n	d2fa <__aeabi_dsub+0x666>
    d0da:	0003      	movs	r3, r0
    d0dc:	430b      	orrs	r3, r1
    d0de:	d100      	bne.n	d0e2 <__aeabi_dsub+0x44e>
    d0e0:	e604      	b.n	ccec <__aeabi_dsub+0x58>
    d0e2:	1869      	adds	r1, r5, r1
    d0e4:	42a9      	cmp	r1, r5
    d0e6:	419b      	sbcs	r3, r3
    d0e8:	183f      	adds	r7, r7, r0
    d0ea:	425b      	negs	r3, r3
    d0ec:	19df      	adds	r7, r3, r7
    d0ee:	023b      	lsls	r3, r7, #8
    d0f0:	d400      	bmi.n	d0f4 <__aeabi_dsub+0x460>
    d0f2:	e11a      	b.n	d32a <__aeabi_dsub+0x696>
    d0f4:	4b90      	ldr	r3, [pc, #576]	; (d338 <__aeabi_dsub+0x6a4>)
    d0f6:	000d      	movs	r5, r1
    d0f8:	401f      	ands	r7, r3
    d0fa:	4664      	mov	r4, ip
    d0fc:	e5f6      	b.n	ccec <__aeabi_dsub+0x58>
    d0fe:	469a      	mov	sl, r3
    d100:	e689      	b.n	ce16 <__aeabi_dsub+0x182>
    d102:	003a      	movs	r2, r7
    d104:	432a      	orrs	r2, r5
    d106:	2c00      	cmp	r4, #0
    d108:	d15c      	bne.n	d1c4 <__aeabi_dsub+0x530>
    d10a:	2a00      	cmp	r2, #0
    d10c:	d175      	bne.n	d1fa <__aeabi_dsub+0x566>
    d10e:	0002      	movs	r2, r0
    d110:	430a      	orrs	r2, r1
    d112:	d100      	bne.n	d116 <__aeabi_dsub+0x482>
    d114:	e0ca      	b.n	d2ac <__aeabi_dsub+0x618>
    d116:	0007      	movs	r7, r0
    d118:	000d      	movs	r5, r1
    d11a:	469a      	mov	sl, r3
    d11c:	e5e6      	b.n	ccec <__aeabi_dsub+0x58>
    d11e:	4664      	mov	r4, ip
    d120:	2200      	movs	r2, #0
    d122:	2500      	movs	r5, #0
    d124:	e681      	b.n	ce2a <__aeabi_dsub+0x196>
    d126:	4662      	mov	r2, ip
    d128:	0006      	movs	r6, r0
    d12a:	3a20      	subs	r2, #32
    d12c:	40d6      	lsrs	r6, r2
    d12e:	4662      	mov	r2, ip
    d130:	46b0      	mov	r8, r6
    d132:	2a20      	cmp	r2, #32
    d134:	d100      	bne.n	d138 <__aeabi_dsub+0x4a4>
    d136:	e0b7      	b.n	d2a8 <__aeabi_dsub+0x614>
    d138:	2240      	movs	r2, #64	; 0x40
    d13a:	4666      	mov	r6, ip
    d13c:	1b92      	subs	r2, r2, r6
    d13e:	4090      	lsls	r0, r2
    d140:	4301      	orrs	r1, r0
    d142:	4642      	mov	r2, r8
    d144:	1e48      	subs	r0, r1, #1
    d146:	4181      	sbcs	r1, r0
    d148:	4311      	orrs	r1, r2
    d14a:	2200      	movs	r2, #0
    d14c:	e68a      	b.n	ce64 <__aeabi_dsub+0x1d0>
    d14e:	4c79      	ldr	r4, [pc, #484]	; (d334 <__aeabi_dsub+0x6a0>)
    d150:	42a2      	cmp	r2, r4
    d152:	d000      	beq.n	d156 <__aeabi_dsub+0x4c2>
    d154:	e761      	b.n	d01a <__aeabi_dsub+0x386>
    d156:	0007      	movs	r7, r0
    d158:	000d      	movs	r5, r1
    d15a:	0014      	movs	r4, r2
    d15c:	469a      	mov	sl, r3
    d15e:	e5c5      	b.n	ccec <__aeabi_dsub+0x58>
    d160:	2c00      	cmp	r4, #0
    d162:	d141      	bne.n	d1e8 <__aeabi_dsub+0x554>
    d164:	003c      	movs	r4, r7
    d166:	432c      	orrs	r4, r5
    d168:	d078      	beq.n	d25c <__aeabi_dsub+0x5c8>
    d16a:	43f4      	mvns	r4, r6
    d16c:	46a1      	mov	r9, r4
    d16e:	2c00      	cmp	r4, #0
    d170:	d020      	beq.n	d1b4 <__aeabi_dsub+0x520>
    d172:	4c70      	ldr	r4, [pc, #448]	; (d334 <__aeabi_dsub+0x6a0>)
    d174:	42a2      	cmp	r2, r4
    d176:	d071      	beq.n	d25c <__aeabi_dsub+0x5c8>
    d178:	464c      	mov	r4, r9
    d17a:	2c38      	cmp	r4, #56	; 0x38
    d17c:	dd00      	ble.n	d180 <__aeabi_dsub+0x4ec>
    d17e:	e0b2      	b.n	d2e6 <__aeabi_dsub+0x652>
    d180:	2c1f      	cmp	r4, #31
    d182:	dd00      	ble.n	d186 <__aeabi_dsub+0x4f2>
    d184:	e0bc      	b.n	d300 <__aeabi_dsub+0x66c>
    d186:	2620      	movs	r6, #32
    d188:	1b34      	subs	r4, r6, r4
    d18a:	46a2      	mov	sl, r4
    d18c:	003c      	movs	r4, r7
    d18e:	4656      	mov	r6, sl
    d190:	40b4      	lsls	r4, r6
    d192:	464e      	mov	r6, r9
    d194:	46a0      	mov	r8, r4
    d196:	002c      	movs	r4, r5
    d198:	40f4      	lsrs	r4, r6
    d19a:	46a4      	mov	ip, r4
    d19c:	4644      	mov	r4, r8
    d19e:	4666      	mov	r6, ip
    d1a0:	4334      	orrs	r4, r6
    d1a2:	46a4      	mov	ip, r4
    d1a4:	4654      	mov	r4, sl
    d1a6:	40a5      	lsls	r5, r4
    d1a8:	4664      	mov	r4, ip
    d1aa:	1e6e      	subs	r6, r5, #1
    d1ac:	41b5      	sbcs	r5, r6
    d1ae:	4325      	orrs	r5, r4
    d1b0:	464c      	mov	r4, r9
    d1b2:	40e7      	lsrs	r7, r4
    d1b4:	186d      	adds	r5, r5, r1
    d1b6:	428d      	cmp	r5, r1
    d1b8:	4189      	sbcs	r1, r1
    d1ba:	183f      	adds	r7, r7, r0
    d1bc:	4249      	negs	r1, r1
    d1be:	19cf      	adds	r7, r1, r7
    d1c0:	0014      	movs	r4, r2
    d1c2:	e656      	b.n	ce72 <__aeabi_dsub+0x1de>
    d1c4:	2a00      	cmp	r2, #0
    d1c6:	d12f      	bne.n	d228 <__aeabi_dsub+0x594>
    d1c8:	0002      	movs	r2, r0
    d1ca:	430a      	orrs	r2, r1
    d1cc:	d100      	bne.n	d1d0 <__aeabi_dsub+0x53c>
    d1ce:	e084      	b.n	d2da <__aeabi_dsub+0x646>
    d1d0:	0007      	movs	r7, r0
    d1d2:	000d      	movs	r5, r1
    d1d4:	469a      	mov	sl, r3
    d1d6:	4c57      	ldr	r4, [pc, #348]	; (d334 <__aeabi_dsub+0x6a0>)
    d1d8:	e588      	b.n	ccec <__aeabi_dsub+0x58>
    d1da:	433d      	orrs	r5, r7
    d1dc:	1e6f      	subs	r7, r5, #1
    d1de:	41bd      	sbcs	r5, r7
    d1e0:	b2ec      	uxtb	r4, r5
    d1e2:	2700      	movs	r7, #0
    d1e4:	1b0d      	subs	r5, r1, r4
    d1e6:	e760      	b.n	d0aa <__aeabi_dsub+0x416>
    d1e8:	4c52      	ldr	r4, [pc, #328]	; (d334 <__aeabi_dsub+0x6a0>)
    d1ea:	42a2      	cmp	r2, r4
    d1ec:	d036      	beq.n	d25c <__aeabi_dsub+0x5c8>
    d1ee:	4274      	negs	r4, r6
    d1f0:	2680      	movs	r6, #128	; 0x80
    d1f2:	0436      	lsls	r6, r6, #16
    d1f4:	46a1      	mov	r9, r4
    d1f6:	4337      	orrs	r7, r6
    d1f8:	e7be      	b.n	d178 <__aeabi_dsub+0x4e4>
    d1fa:	0002      	movs	r2, r0
    d1fc:	430a      	orrs	r2, r1
    d1fe:	d100      	bne.n	d202 <__aeabi_dsub+0x56e>
    d200:	e574      	b.n	ccec <__aeabi_dsub+0x58>
    d202:	1a6a      	subs	r2, r5, r1
    d204:	4690      	mov	r8, r2
    d206:	4545      	cmp	r5, r8
    d208:	41b6      	sbcs	r6, r6
    d20a:	1a3a      	subs	r2, r7, r0
    d20c:	4276      	negs	r6, r6
    d20e:	1b92      	subs	r2, r2, r6
    d210:	4694      	mov	ip, r2
    d212:	0212      	lsls	r2, r2, #8
    d214:	d400      	bmi.n	d218 <__aeabi_dsub+0x584>
    d216:	e5f7      	b.n	ce08 <__aeabi_dsub+0x174>
    d218:	1b4d      	subs	r5, r1, r5
    d21a:	42a9      	cmp	r1, r5
    d21c:	4189      	sbcs	r1, r1
    d21e:	1bc7      	subs	r7, r0, r7
    d220:	4249      	negs	r1, r1
    d222:	1a7f      	subs	r7, r7, r1
    d224:	469a      	mov	sl, r3
    d226:	e561      	b.n	ccec <__aeabi_dsub+0x58>
    d228:	0002      	movs	r2, r0
    d22a:	430a      	orrs	r2, r1
    d22c:	d03a      	beq.n	d2a4 <__aeabi_dsub+0x610>
    d22e:	08ed      	lsrs	r5, r5, #3
    d230:	077c      	lsls	r4, r7, #29
    d232:	432c      	orrs	r4, r5
    d234:	2580      	movs	r5, #128	; 0x80
    d236:	08fa      	lsrs	r2, r7, #3
    d238:	032d      	lsls	r5, r5, #12
    d23a:	422a      	tst	r2, r5
    d23c:	d008      	beq.n	d250 <__aeabi_dsub+0x5bc>
    d23e:	08c7      	lsrs	r7, r0, #3
    d240:	422f      	tst	r7, r5
    d242:	d105      	bne.n	d250 <__aeabi_dsub+0x5bc>
    d244:	0745      	lsls	r5, r0, #29
    d246:	002c      	movs	r4, r5
    d248:	003a      	movs	r2, r7
    d24a:	469a      	mov	sl, r3
    d24c:	08c9      	lsrs	r1, r1, #3
    d24e:	430c      	orrs	r4, r1
    d250:	0f67      	lsrs	r7, r4, #29
    d252:	00d2      	lsls	r2, r2, #3
    d254:	00e5      	lsls	r5, r4, #3
    d256:	4317      	orrs	r7, r2
    d258:	4c36      	ldr	r4, [pc, #216]	; (d334 <__aeabi_dsub+0x6a0>)
    d25a:	e547      	b.n	ccec <__aeabi_dsub+0x58>
    d25c:	0007      	movs	r7, r0
    d25e:	000d      	movs	r5, r1
    d260:	0014      	movs	r4, r2
    d262:	e543      	b.n	ccec <__aeabi_dsub+0x58>
    d264:	003a      	movs	r2, r7
    d266:	432a      	orrs	r2, r5
    d268:	d043      	beq.n	d2f2 <__aeabi_dsub+0x65e>
    d26a:	0002      	movs	r2, r0
    d26c:	430a      	orrs	r2, r1
    d26e:	d019      	beq.n	d2a4 <__aeabi_dsub+0x610>
    d270:	08ed      	lsrs	r5, r5, #3
    d272:	077c      	lsls	r4, r7, #29
    d274:	432c      	orrs	r4, r5
    d276:	2580      	movs	r5, #128	; 0x80
    d278:	08fa      	lsrs	r2, r7, #3
    d27a:	032d      	lsls	r5, r5, #12
    d27c:	422a      	tst	r2, r5
    d27e:	d007      	beq.n	d290 <__aeabi_dsub+0x5fc>
    d280:	08c6      	lsrs	r6, r0, #3
    d282:	422e      	tst	r6, r5
    d284:	d104      	bne.n	d290 <__aeabi_dsub+0x5fc>
    d286:	0747      	lsls	r7, r0, #29
    d288:	003c      	movs	r4, r7
    d28a:	0032      	movs	r2, r6
    d28c:	08c9      	lsrs	r1, r1, #3
    d28e:	430c      	orrs	r4, r1
    d290:	00d7      	lsls	r7, r2, #3
    d292:	0f62      	lsrs	r2, r4, #29
    d294:	00e5      	lsls	r5, r4, #3
    d296:	4317      	orrs	r7, r2
    d298:	469a      	mov	sl, r3
    d29a:	4c26      	ldr	r4, [pc, #152]	; (d334 <__aeabi_dsub+0x6a0>)
    d29c:	e526      	b.n	ccec <__aeabi_dsub+0x58>
    d29e:	2200      	movs	r2, #0
    d2a0:	2500      	movs	r5, #0
    d2a2:	e544      	b.n	cd2e <__aeabi_dsub+0x9a>
    d2a4:	4c23      	ldr	r4, [pc, #140]	; (d334 <__aeabi_dsub+0x6a0>)
    d2a6:	e521      	b.n	ccec <__aeabi_dsub+0x58>
    d2a8:	2000      	movs	r0, #0
    d2aa:	e749      	b.n	d140 <__aeabi_dsub+0x4ac>
    d2ac:	2300      	movs	r3, #0
    d2ae:	2500      	movs	r5, #0
    d2b0:	e5bb      	b.n	ce2a <__aeabi_dsub+0x196>
    d2b2:	464c      	mov	r4, r9
    d2b4:	003e      	movs	r6, r7
    d2b6:	3c20      	subs	r4, #32
    d2b8:	40e6      	lsrs	r6, r4
    d2ba:	464c      	mov	r4, r9
    d2bc:	46b4      	mov	ip, r6
    d2be:	2c20      	cmp	r4, #32
    d2c0:	d031      	beq.n	d326 <__aeabi_dsub+0x692>
    d2c2:	2440      	movs	r4, #64	; 0x40
    d2c4:	464e      	mov	r6, r9
    d2c6:	1ba6      	subs	r6, r4, r6
    d2c8:	40b7      	lsls	r7, r6
    d2ca:	433d      	orrs	r5, r7
    d2cc:	1e6c      	subs	r4, r5, #1
    d2ce:	41a5      	sbcs	r5, r4
    d2d0:	4664      	mov	r4, ip
    d2d2:	432c      	orrs	r4, r5
    d2d4:	2700      	movs	r7, #0
    d2d6:	1b0d      	subs	r5, r1, r4
    d2d8:	e6e7      	b.n	d0aa <__aeabi_dsub+0x416>
    d2da:	2280      	movs	r2, #128	; 0x80
    d2dc:	2300      	movs	r3, #0
    d2de:	0312      	lsls	r2, r2, #12
    d2e0:	4c14      	ldr	r4, [pc, #80]	; (d334 <__aeabi_dsub+0x6a0>)
    d2e2:	2500      	movs	r5, #0
    d2e4:	e5a1      	b.n	ce2a <__aeabi_dsub+0x196>
    d2e6:	433d      	orrs	r5, r7
    d2e8:	1e6f      	subs	r7, r5, #1
    d2ea:	41bd      	sbcs	r5, r7
    d2ec:	2700      	movs	r7, #0
    d2ee:	b2ed      	uxtb	r5, r5
    d2f0:	e760      	b.n	d1b4 <__aeabi_dsub+0x520>
    d2f2:	0007      	movs	r7, r0
    d2f4:	000d      	movs	r5, r1
    d2f6:	4c0f      	ldr	r4, [pc, #60]	; (d334 <__aeabi_dsub+0x6a0>)
    d2f8:	e4f8      	b.n	ccec <__aeabi_dsub+0x58>
    d2fa:	0007      	movs	r7, r0
    d2fc:	000d      	movs	r5, r1
    d2fe:	e4f5      	b.n	ccec <__aeabi_dsub+0x58>
    d300:	464e      	mov	r6, r9
    d302:	003c      	movs	r4, r7
    d304:	3e20      	subs	r6, #32
    d306:	40f4      	lsrs	r4, r6
    d308:	46a0      	mov	r8, r4
    d30a:	464c      	mov	r4, r9
    d30c:	2c20      	cmp	r4, #32
    d30e:	d00e      	beq.n	d32e <__aeabi_dsub+0x69a>
    d310:	2440      	movs	r4, #64	; 0x40
    d312:	464e      	mov	r6, r9
    d314:	1ba4      	subs	r4, r4, r6
    d316:	40a7      	lsls	r7, r4
    d318:	433d      	orrs	r5, r7
    d31a:	1e6f      	subs	r7, r5, #1
    d31c:	41bd      	sbcs	r5, r7
    d31e:	4644      	mov	r4, r8
    d320:	2700      	movs	r7, #0
    d322:	4325      	orrs	r5, r4
    d324:	e746      	b.n	d1b4 <__aeabi_dsub+0x520>
    d326:	2700      	movs	r7, #0
    d328:	e7cf      	b.n	d2ca <__aeabi_dsub+0x636>
    d32a:	000d      	movs	r5, r1
    d32c:	e573      	b.n	ce16 <__aeabi_dsub+0x182>
    d32e:	2700      	movs	r7, #0
    d330:	e7f2      	b.n	d318 <__aeabi_dsub+0x684>
    d332:	46c0      	nop			; (mov r8, r8)
    d334:	000007ff 	.word	0x000007ff
    d338:	ff7fffff 	.word	0xff7fffff

0000d33c <__aeabi_dcmpun>:
    d33c:	b570      	push	{r4, r5, r6, lr}
    d33e:	4e0e      	ldr	r6, [pc, #56]	; (d378 <__aeabi_dcmpun+0x3c>)
    d340:	030c      	lsls	r4, r1, #12
    d342:	031d      	lsls	r5, r3, #12
    d344:	0049      	lsls	r1, r1, #1
    d346:	005b      	lsls	r3, r3, #1
    d348:	0b24      	lsrs	r4, r4, #12
    d34a:	0d49      	lsrs	r1, r1, #21
    d34c:	0b2d      	lsrs	r5, r5, #12
    d34e:	0d5b      	lsrs	r3, r3, #21
    d350:	42b1      	cmp	r1, r6
    d352:	d004      	beq.n	d35e <__aeabi_dcmpun+0x22>
    d354:	4908      	ldr	r1, [pc, #32]	; (d378 <__aeabi_dcmpun+0x3c>)
    d356:	2000      	movs	r0, #0
    d358:	428b      	cmp	r3, r1
    d35a:	d008      	beq.n	d36e <__aeabi_dcmpun+0x32>
    d35c:	bd70      	pop	{r4, r5, r6, pc}
    d35e:	4304      	orrs	r4, r0
    d360:	2001      	movs	r0, #1
    d362:	2c00      	cmp	r4, #0
    d364:	d1fa      	bne.n	d35c <__aeabi_dcmpun+0x20>
    d366:	4904      	ldr	r1, [pc, #16]	; (d378 <__aeabi_dcmpun+0x3c>)
    d368:	2000      	movs	r0, #0
    d36a:	428b      	cmp	r3, r1
    d36c:	d1f6      	bne.n	d35c <__aeabi_dcmpun+0x20>
    d36e:	4315      	orrs	r5, r2
    d370:	0028      	movs	r0, r5
    d372:	1e45      	subs	r5, r0, #1
    d374:	41a8      	sbcs	r0, r5
    d376:	e7f1      	b.n	d35c <__aeabi_dcmpun+0x20>
    d378:	000007ff 	.word	0x000007ff

0000d37c <__aeabi_d2iz>:
    d37c:	030b      	lsls	r3, r1, #12
    d37e:	b530      	push	{r4, r5, lr}
    d380:	4d13      	ldr	r5, [pc, #76]	; (d3d0 <__aeabi_d2iz+0x54>)
    d382:	0b1a      	lsrs	r2, r3, #12
    d384:	004b      	lsls	r3, r1, #1
    d386:	0d5b      	lsrs	r3, r3, #21
    d388:	0fc9      	lsrs	r1, r1, #31
    d38a:	2400      	movs	r4, #0
    d38c:	42ab      	cmp	r3, r5
    d38e:	dd11      	ble.n	d3b4 <__aeabi_d2iz+0x38>
    d390:	4c10      	ldr	r4, [pc, #64]	; (d3d4 <__aeabi_d2iz+0x58>)
    d392:	42a3      	cmp	r3, r4
    d394:	dc10      	bgt.n	d3b8 <__aeabi_d2iz+0x3c>
    d396:	2480      	movs	r4, #128	; 0x80
    d398:	0364      	lsls	r4, r4, #13
    d39a:	4322      	orrs	r2, r4
    d39c:	4c0e      	ldr	r4, [pc, #56]	; (d3d8 <__aeabi_d2iz+0x5c>)
    d39e:	1ae4      	subs	r4, r4, r3
    d3a0:	2c1f      	cmp	r4, #31
    d3a2:	dd0c      	ble.n	d3be <__aeabi_d2iz+0x42>
    d3a4:	480d      	ldr	r0, [pc, #52]	; (d3dc <__aeabi_d2iz+0x60>)
    d3a6:	1ac3      	subs	r3, r0, r3
    d3a8:	40da      	lsrs	r2, r3
    d3aa:	0013      	movs	r3, r2
    d3ac:	425c      	negs	r4, r3
    d3ae:	2900      	cmp	r1, #0
    d3b0:	d100      	bne.n	d3b4 <__aeabi_d2iz+0x38>
    d3b2:	001c      	movs	r4, r3
    d3b4:	0020      	movs	r0, r4
    d3b6:	bd30      	pop	{r4, r5, pc}
    d3b8:	4b09      	ldr	r3, [pc, #36]	; (d3e0 <__aeabi_d2iz+0x64>)
    d3ba:	18cc      	adds	r4, r1, r3
    d3bc:	e7fa      	b.n	d3b4 <__aeabi_d2iz+0x38>
    d3be:	40e0      	lsrs	r0, r4
    d3c0:	4c08      	ldr	r4, [pc, #32]	; (d3e4 <__aeabi_d2iz+0x68>)
    d3c2:	46a4      	mov	ip, r4
    d3c4:	4463      	add	r3, ip
    d3c6:	409a      	lsls	r2, r3
    d3c8:	0013      	movs	r3, r2
    d3ca:	4303      	orrs	r3, r0
    d3cc:	e7ee      	b.n	d3ac <__aeabi_d2iz+0x30>
    d3ce:	46c0      	nop			; (mov r8, r8)
    d3d0:	000003fe 	.word	0x000003fe
    d3d4:	0000041d 	.word	0x0000041d
    d3d8:	00000433 	.word	0x00000433
    d3dc:	00000413 	.word	0x00000413
    d3e0:	7fffffff 	.word	0x7fffffff
    d3e4:	fffffbed 	.word	0xfffffbed

0000d3e8 <__aeabi_ui2d>:
    d3e8:	b570      	push	{r4, r5, r6, lr}
    d3ea:	1e05      	subs	r5, r0, #0
    d3ec:	d028      	beq.n	d440 <__aeabi_ui2d+0x58>
    d3ee:	f7f9 fc3d 	bl	6c6c <__clzsi2>
    d3f2:	4b15      	ldr	r3, [pc, #84]	; (d448 <__aeabi_ui2d+0x60>)
    d3f4:	4a15      	ldr	r2, [pc, #84]	; (d44c <__aeabi_ui2d+0x64>)
    d3f6:	1a1b      	subs	r3, r3, r0
    d3f8:	1ad2      	subs	r2, r2, r3
    d3fa:	2a1f      	cmp	r2, #31
    d3fc:	dd16      	ble.n	d42c <__aeabi_ui2d+0x44>
    d3fe:	002c      	movs	r4, r5
    d400:	4a13      	ldr	r2, [pc, #76]	; (d450 <__aeabi_ui2d+0x68>)
    d402:	2500      	movs	r5, #0
    d404:	1ad2      	subs	r2, r2, r3
    d406:	4094      	lsls	r4, r2
    d408:	055a      	lsls	r2, r3, #21
    d40a:	0324      	lsls	r4, r4, #12
    d40c:	0b24      	lsrs	r4, r4, #12
    d40e:	0d52      	lsrs	r2, r2, #21
    d410:	2100      	movs	r1, #0
    d412:	0324      	lsls	r4, r4, #12
    d414:	0d0b      	lsrs	r3, r1, #20
    d416:	0b24      	lsrs	r4, r4, #12
    d418:	051b      	lsls	r3, r3, #20
    d41a:	4323      	orrs	r3, r4
    d41c:	4c0d      	ldr	r4, [pc, #52]	; (d454 <__aeabi_ui2d+0x6c>)
    d41e:	0512      	lsls	r2, r2, #20
    d420:	4023      	ands	r3, r4
    d422:	4313      	orrs	r3, r2
    d424:	005b      	lsls	r3, r3, #1
    d426:	0028      	movs	r0, r5
    d428:	0859      	lsrs	r1, r3, #1
    d42a:	bd70      	pop	{r4, r5, r6, pc}
    d42c:	210b      	movs	r1, #11
    d42e:	002c      	movs	r4, r5
    d430:	1a08      	subs	r0, r1, r0
    d432:	40c4      	lsrs	r4, r0
    d434:	4095      	lsls	r5, r2
    d436:	0324      	lsls	r4, r4, #12
    d438:	055a      	lsls	r2, r3, #21
    d43a:	0b24      	lsrs	r4, r4, #12
    d43c:	0d52      	lsrs	r2, r2, #21
    d43e:	e7e7      	b.n	d410 <__aeabi_ui2d+0x28>
    d440:	2200      	movs	r2, #0
    d442:	2400      	movs	r4, #0
    d444:	e7e4      	b.n	d410 <__aeabi_ui2d+0x28>
    d446:	46c0      	nop			; (mov r8, r8)
    d448:	0000041e 	.word	0x0000041e
    d44c:	00000433 	.word	0x00000433
    d450:	00000413 	.word	0x00000413
    d454:	800fffff 	.word	0x800fffff
    d458:	000006d6 	.word	0x000006d6
    d45c:	00000786 	.word	0x00000786
    d460:	00000846 	.word	0x00000846
    d464:	000008a2 	.word	0x000008a2
    d468:	00000a00 	.word	0x00000a00
    d46c:	50504128 	.word	0x50504128
    d470:	52452829 	.word	0x52452829
    d474:	255b2952 	.word	0x255b2952
    d478:	255b5d73 	.word	0x255b5d73
    d47c:	00005d64 	.word	0x00005d64
    d480:	6c696146 	.word	0x6c696146
    d484:	74206465 	.word	0x74206465
    d488:	7570206f 	.word	0x7570206f
    d48c:	68742074 	.word	0x68742074
    d490:	69572065 	.word	0x69572065
    d494:	43206946 	.word	0x43206946
    d498:	20706968 	.word	0x20706968
    d49c:	64206e69 	.word	0x64206e69
    d4a0:	6c6e776f 	.word	0x6c6e776f
    d4a4:	2064616f 	.word	0x2064616f
    d4a8:	65646f6d 	.word	0x65646f6d
    d4ac:	00000000 	.word	0x00000000
    d4b0:	00000c96 	.word	0x00000c96
    d4b4:	00000cf0 	.word	0x00000cf0
    d4b8:	00000d30 	.word	0x00000d30
    d4bc:	00000d6e 	.word	0x00000d6e
    d4c0:	00000e08 	.word	0x00000e08
    d4c4:	00000db0 	.word	0x00000db0
    d4c8:	00000e08 	.word	0x00000e08
    d4cc:	00000e08 	.word	0x00000e08
    d4d0:	00000e08 	.word	0x00000e08
    d4d4:	00000e08 	.word	0x00000e08
    d4d8:	00000dd0 	.word	0x00000dd0

0000d4dc <__FUNCTION__.14497>:
    d4dc:	65746e65 69775f72 665f6966 776d7269     enter_wifi_firmw
    d4ec:	5f657261 6e776f64 64616f6c 00000000     are_download....
    d4fc:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    d50c:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
    d51c:	6320746c 0000646d                       lt cmd..

0000d524 <__FUNCTION__.13940>:
    d524:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    d534:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    d544:	00005d64 696d6e5b 61747320 3a5d7472     d]..[nmi start]:
    d554:	69616620 6e69206c 62207469 00007375      fail init bus..
    d564:	50504128 4e492829 00294f46 70696843     (APP)(INFO).Chip
    d574:	20444920 0a786c25 00000000 696d6e5b      ID %lx.....[nmi
    d584:	61747320 3a5d7472 69616620 6863206c      start]: fail ch
    d594:	775f7069 75656b61 00000070 6c696166     ip_wakeup...fail
    d5a4:	74206465 6e65206f 656c6261 746e6920     ed to enable int
    d5b4:	75727265 2e737470 0000002e 6d726946     errupts.....Firm
    d5c4:	65726177 72657620 3a202020 2e752520     ware ver   : %u.
    d5d4:	252e7525 00000a75 206e694d 76697264     %u.%u...Min driv
    d5e4:	76207265 3a207265 2e752520 252e7525     er ver : %u.%u.%
    d5f4:	00000a75 72727543 69726420 20726576     u...Curr driver 
    d604:	3a726576 2e752520 252e7525 00000a75     ver: %u.%u.%u...
    d614:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
    d624:	65562065 6f697372 0000006e 696d6e5b     e Version...[nmi
    d634:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
    d644:	2074696e 6c696166 00000000 696d6e5b     nit fail....[nmi
    d654:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
    d664:	75622074 00000073                       t bus...

0000d66c <__FUNCTION__.12649>:
    d66c:	645f6d6e 695f7672 5f74696e 6e776f64     nm_drv_init_down
    d67c:	64616f6c 646f6d5f 00000065              load_mode...

0000d688 <crc7_syndrome_table>:
    d688:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    d698:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    d6a8:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    d6b8:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    d6c8:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    d6d8:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    d6e8:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    d6f8:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    d708:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    d718:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    d728:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    d738:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    d748:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    d758:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    d768:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    d778:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    d788:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    d798:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
    d7a8:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    d7b8:	73756220 72726520 2e2e726f 0000002e      bus error......
    d7c8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    d7d8:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    d7e8:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    d7f8:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d808:	656c6961 61642064 72206174 6f707365     ailed data respo
    d818:	2065736e 64616572 7562202c 72652073     nse read, bus er
    d828:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    d838:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    d848:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    d858:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    d868:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    d878:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    d888:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    d898:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    d8a8:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    d8b8:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    d8c8:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    d8d8:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
    d8e8:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    d8f8:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d908:	656c6961 61642064 62206174 6b636f6c     ailed data block
    d918:	69727720 202c6574 20737562 6f727265      write, bus erro
    d928:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
    d938:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    d948:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
    d958:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    d968:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    d978:	6d632064 77202c64 65746972 67657220     d cmd, write reg
    d988:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    d998:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    d9a8:	65722064 6e6f7073 202c6573 74697277     d response, writ
    d9b8:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
    d9c8:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d9d8:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
    d9e8:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
    d9f8:	0000000a 696d6e5b 69707320 203a5d20     ....[nmi spi ]: 
    da08:	6c696146 63206465 7220646d 6f707365     Failed cmd respo
    da18:	2c65736e 69727720 62206574 6b636f6c     nse, write block
    da28:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    da38:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    da48:	206b636f 61746164 69727720 2e2e6574     ock data write..
    da58:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    da68:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    da78:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
    da88:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    da98:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    daa8:	64616572 67657220 30252820 2e297838     read reg (%08x).
    dab8:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    dac8:	656c6961 61642064 72206174 2e646165     ailed data read.
    dad8:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    dae8:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    daf8:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    db08:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    db18:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    db28:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    db38:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    db48:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    db58:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    db68:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    db78:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    db88:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
    db98:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
    dba8:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
    dbb8:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    dbc8:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    dbd8:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
    dbe8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    dbf8:	6e692064 6e726574 77206c61 65746972     d internal write
    dc08:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
    dc18:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    dc28:	206c6961 20646d63 64616572 69686320     ail cmd read chi
    dc38:	64692070 002e2e2e 00001ed4 00001ed4     p id............
    dc48:	00001f64 00001e28 00001e6e 00001e90     d...(...n.......
    dc58:	00001f16 00001f16 00001fd0 00001dfc     ................
    dc68:	0000202a 0000202a 0000202a 0000202a     * ..* ..* ..* ..
    dc78:	00001eb2                                ....

0000dc7c <__FUNCTION__.12052>:
    dc7c:	5f697073 00646d63                       spi_cmd.

0000dc84 <__FUNCTION__.12060>:
    dc84:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0000dc90 <__FUNCTION__.12076>:
    dc90:	5f697073 61746164 6165725f 00000064     spi_data_read...

0000dca0 <__FUNCTION__.12091>:
    dca0:	5f697073 61746164 6972775f 00006574     spi_data_write..

0000dcb0 <__FUNCTION__.12101>:
    dcb0:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0000dcc0 <__FUNCTION__.12109>:
    dcc0:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0000dcd0 <__FUNCTION__.12118>:
    dcd0:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0000dce0 <__FUNCTION__.12126>:
    dce0:	735f6d6e 725f6970 00646165              nm_spi_read.

0000dcec <__FUNCTION__.12143>:
    dcec:	735f6d6e 695f6970 0074696e              nm_spi_init.

0000dcf8 <_tcc_intflag>:
    dcf8:	00000001 00000002 00000004 00000008     ................
    dd08:	00001000 00002000 00004000 00008000     ..... ...@......
    dd18:	00010000 00020000 00040000 00080000     ................
    dd28:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    dd38:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
    dd48:	00005616 0000568e 0000568e 00005634     .V...V...V..4V..
    dd58:	0000562e 0000563a 0000561c 00005640     .V..:V...V..@V..
    dd68:	00005674 000058e8 00005938 00005938     tV...X..8Y..8Y..
    dd78:	00005934 000058da 000058fa 000058ca     4Y...X...X...X..
    dd88:	0000590c 0000591e 00005982 000059b0     .Y...Y...Y...Y..
    dd98:	000059b0 000059ac 0000597c 00005988     .Y...Y..|Y...Y..
    dda8:	00005976 0000598e 00005994 000068e4     vY...Y...Y...h..
    ddb8:	000067a4 000067a4 000067a2 000068bc     .g...g...g...h..
    ddc8:	000068bc 000068ae 000067a2 000068bc     .h...h...g...h..
    ddd8:	000068ae 000068bc 000067a2 000068c4     .h...h...g...h..
    dde8:	000068c4 000068c4 00006ac4 00000043     .h...h...j..C...

0000ddf8 <_global_impure_ptr>:
    ddf8:	20000010 0000000a 0000787a 000078de     ... ....zx...x..
    de08:	000078de 00007888 000078de 000078de     .x...x...x...x..
    de18:	000078de 000078de 000078de 000078de     .x...x...x...x..
    de28:	000072a4 00007894 000078de 000071d2     .r...x...x...q..
    de38:	000072b8 000078de 00007308 00007314     .r...x...s...s..
    de48:	00007314 00007314 00007314 00007314     .s...s...s...s..
    de58:	00007314 00007314 00007314 00007314     .s...s...s...s..
    de68:	000078de 000078de 000078de 000078de     .x...x...x...x..
    de78:	000078de 000078de 000078de 000078de     .x...x...x...x..
    de88:	000078de 000078de 0000733c 000073fc     .x...x..<s...s..
    de98:	000078de 000073fc 000078de 000078de     .x...s...x...x..
    dea8:	000078de 000078de 00007494 000078de     .x...x...t...x..
    deb8:	000078de 000074a0 000078de 000078de     .x...t...x...x..
    dec8:	000078de 000078de 000078de 0000760a     .x...x...x...v..
    ded8:	000078de 000078de 00007744 000078de     .x...x..Dw...x..
    dee8:	000078de 000078de 000078de 000078de     .x...x...x...x..
    def8:	000078de 000078de 000078de 000078de     .x...x...x...x..
    df08:	000078de 0000789c 000076e0 000073fc     .x...x...v...s..
    df18:	000073fc 000073fc 000076f0 000076e0     .s...s...v...v..
    df28:	000078de 000078de 000076fc 000078de     .x...x...v...x..
    df38:	00007710 0000766c 000071de 0000767c     .w..lv...q..|v..
    df48:	000078de 00007688 000078de 000077fc     .x...v...x...w..
    df58:	000078de 000078de 0000780c              .x...x...x..

0000df64 <zeroes.7050>:
    df64:	30303030 30303030 30303030 30303030     0000000000000000
    df74:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
    df84:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    df94:	00000000 33323130 37363534 62613938     ....0123456789ab
    dfa4:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
    dfb4:	00000030                                0...

0000dfb8 <blanks.7049>:
    dfb8:	20202020 20202020 20202020 20202020                     
    dfc8:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
    dfd8:	49534f50 00000058 0000002e 00000000     POSIX...........

0000dfe8 <__mprec_tens>:
    dfe8:	00000000 3ff00000 00000000 40240000     .......?......$@
    dff8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    e008:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    e018:	00000000 412e8480 00000000 416312d0     .......A......cA
    e028:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    e038:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    e048:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    e058:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    e068:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    e078:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    e088:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    e098:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    e0a8:	79d99db4 44ea7843                       ...yCx.D

0000e0b0 <__mprec_bigtens>:
    e0b0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    e0c0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    e0d0:	7f73bf3c 75154fdd                       <.s..O.u

0000e0d8 <p05.5373>:
    e0d8:	00000005 00000019 0000007d 0000c63c     ........}...<...
    e0e8:	0000c50a 0000c610 0000c500 0000c610     ................
    e0f8:	0000c61a 0000c610 0000c500 0000c50a     ................
    e108:	0000c50a 0000c61a 0000c500 0000c4f6     ................
    e118:	0000c4f6 0000c4f6 0000c86c              ........l...

0000e124 <_init>:
    e124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e126:	46c0      	nop			; (mov r8, r8)
    e128:	bcf8      	pop	{r3, r4, r5, r6, r7}
    e12a:	bc08      	pop	{r3}
    e12c:	469e      	mov	lr, r3
    e12e:	4770      	bx	lr

0000e130 <__init_array_start>:
    e130:	00008a21 	.word	0x00008a21

0000e134 <__frame_dummy_init_array_entry>:
    e134:	000000d9                                ....

0000e138 <_fini>:
    e138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e13a:	46c0      	nop			; (mov r8, r8)
    e13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    e13e:	bc08      	pop	{r3}
    e140:	469e      	mov	lr, r3
    e142:	4770      	bx	lr

0000e144 <__fini_array_start>:
    e144:	000000b1 	.word	0x000000b1
