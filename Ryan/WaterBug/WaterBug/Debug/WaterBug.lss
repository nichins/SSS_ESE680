
WaterBug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a64  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00000a64  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000054  20000004  00000a68  00020004  2**2
                  ALLOC
  3 .stack        00002000  20000058  00000abc  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000d6c9  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016ec  00000000  00000000  0002d74e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001bee  00000000  00000000  0002ee3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000278  00000000  00000000  00030a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000220  00000000  00000000  00030ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00003e0e  00000000  00000000  00030ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000063f8  00000000  00000000  00034cce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000868aa  00000000  00000000  0003b0c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000594  00000000  00000000  000c1970  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20002058 	.word	0x20002058
   4:	000008b5 	.word	0x000008b5
   8:	000008b1 	.word	0x000008b1
   c:	000008b1 	.word	0x000008b1
	...
  2c:	000008b1 	.word	0x000008b1
	...
  38:	000008b1 	.word	0x000008b1
  3c:	000008b1 	.word	0x000008b1
  40:	000008b1 	.word	0x000008b1
  44:	000008b1 	.word	0x000008b1
  48:	000008b1 	.word	0x000008b1
  4c:	000008b1 	.word	0x000008b1
  50:	000008b1 	.word	0x000008b1
  54:	000008b1 	.word	0x000008b1
  58:	000008b1 	.word	0x000008b1
  5c:	000008b1 	.word	0x000008b1
  60:	000008b1 	.word	0x000008b1
  64:	00000115 	.word	0x00000115
  68:	00000125 	.word	0x00000125
  6c:	00000135 	.word	0x00000135
  70:	00000145 	.word	0x00000145
  74:	00000155 	.word	0x00000155
  78:	00000165 	.word	0x00000165
  7c:	000008b1 	.word	0x000008b1
  80:	000008b1 	.word	0x000008b1
  84:	000008b1 	.word	0x000008b1
  88:	000008b1 	.word	0x000008b1
  8c:	000008b1 	.word	0x000008b1
  90:	000008b1 	.word	0x000008b1
	...
  9c:	000008b1 	.word	0x000008b1
  a0:	000008b1 	.word	0x000008b1
  a4:	000008b1 	.word	0x000008b1
  a8:	000008b1 	.word	0x000008b1
  ac:	000008b1 	.word	0x000008b1
  b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000004 	.word	0x20000004
  d4:	00000000 	.word	0x00000000
  d8:	00000a64 	.word	0x00000a64

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000008 	.word	0x20000008
 108:	00000a64 	.word	0x00000a64
 10c:	00000a64 	.word	0x00000a64
 110:	00000000 	.word	0x00000000

00000114 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
 114:	b510      	push	{r4, lr}
 116:	4b02      	ldr	r3, [pc, #8]	; (120 <SERCOM0_Handler+0xc>)
 118:	681b      	ldr	r3, [r3, #0]
 11a:	2000      	movs	r0, #0
 11c:	4798      	blx	r3
 11e:	bd10      	pop	{r4, pc}
 120:	20000020 	.word	0x20000020

00000124 <SERCOM1_Handler>:
 124:	b510      	push	{r4, lr}
 126:	4b02      	ldr	r3, [pc, #8]	; (130 <SERCOM1_Handler+0xc>)
 128:	685b      	ldr	r3, [r3, #4]
 12a:	2001      	movs	r0, #1
 12c:	4798      	blx	r3
 12e:	bd10      	pop	{r4, pc}
 130:	20000020 	.word	0x20000020

00000134 <SERCOM2_Handler>:
 134:	b510      	push	{r4, lr}
 136:	4b02      	ldr	r3, [pc, #8]	; (140 <SERCOM2_Handler+0xc>)
 138:	689b      	ldr	r3, [r3, #8]
 13a:	2002      	movs	r0, #2
 13c:	4798      	blx	r3
 13e:	bd10      	pop	{r4, pc}
 140:	20000020 	.word	0x20000020

00000144 <SERCOM3_Handler>:
 144:	b510      	push	{r4, lr}
 146:	4b02      	ldr	r3, [pc, #8]	; (150 <SERCOM3_Handler+0xc>)
 148:	68db      	ldr	r3, [r3, #12]
 14a:	2003      	movs	r0, #3
 14c:	4798      	blx	r3
 14e:	bd10      	pop	{r4, pc}
 150:	20000020 	.word	0x20000020

00000154 <SERCOM4_Handler>:
 154:	b510      	push	{r4, lr}
 156:	4b02      	ldr	r3, [pc, #8]	; (160 <SERCOM4_Handler+0xc>)
 158:	691b      	ldr	r3, [r3, #16]
 15a:	2004      	movs	r0, #4
 15c:	4798      	blx	r3
 15e:	bd10      	pop	{r4, pc}
 160:	20000020 	.word	0x20000020

00000164 <SERCOM5_Handler>:
 164:	b510      	push	{r4, lr}
 166:	4b02      	ldr	r3, [pc, #8]	; (170 <SERCOM5_Handler+0xc>)
 168:	695b      	ldr	r3, [r3, #20]
 16a:	2005      	movs	r0, #5
 16c:	4798      	blx	r3
 16e:	bd10      	pop	{r4, pc}
 170:	20000020 	.word	0x20000020

00000174 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 174:	4b0c      	ldr	r3, [pc, #48]	; (1a8 <cpu_irq_enter_critical+0x34>)
 176:	681b      	ldr	r3, [r3, #0]
 178:	2b00      	cmp	r3, #0
 17a:	d110      	bne.n	19e <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 17c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 180:	2b00      	cmp	r3, #0
 182:	d109      	bne.n	198 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 184:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 186:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 18a:	2200      	movs	r2, #0
 18c:	4b07      	ldr	r3, [pc, #28]	; (1ac <cpu_irq_enter_critical+0x38>)
 18e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 190:	3201      	adds	r2, #1
 192:	4b07      	ldr	r3, [pc, #28]	; (1b0 <cpu_irq_enter_critical+0x3c>)
 194:	701a      	strb	r2, [r3, #0]
 196:	e002      	b.n	19e <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 198:	2200      	movs	r2, #0
 19a:	4b05      	ldr	r3, [pc, #20]	; (1b0 <cpu_irq_enter_critical+0x3c>)
 19c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 19e:	4a02      	ldr	r2, [pc, #8]	; (1a8 <cpu_irq_enter_critical+0x34>)
 1a0:	6813      	ldr	r3, [r2, #0]
 1a2:	3301      	adds	r3, #1
 1a4:	6013      	str	r3, [r2, #0]
}
 1a6:	4770      	bx	lr
 1a8:	20000038 	.word	0x20000038
 1ac:	20000000 	.word	0x20000000
 1b0:	2000003c 	.word	0x2000003c

000001b4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 1b4:	4b08      	ldr	r3, [pc, #32]	; (1d8 <cpu_irq_leave_critical+0x24>)
 1b6:	681a      	ldr	r2, [r3, #0]
 1b8:	3a01      	subs	r2, #1
 1ba:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 1bc:	681b      	ldr	r3, [r3, #0]
 1be:	2b00      	cmp	r3, #0
 1c0:	d109      	bne.n	1d6 <cpu_irq_leave_critical+0x22>
 1c2:	4b06      	ldr	r3, [pc, #24]	; (1dc <cpu_irq_leave_critical+0x28>)
 1c4:	781b      	ldrb	r3, [r3, #0]
 1c6:	2b00      	cmp	r3, #0
 1c8:	d005      	beq.n	1d6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 1ca:	2201      	movs	r2, #1
 1cc:	4b04      	ldr	r3, [pc, #16]	; (1e0 <cpu_irq_leave_critical+0x2c>)
 1ce:	701a      	strb	r2, [r3, #0]
 1d0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 1d4:	b662      	cpsie	i
	}
}
 1d6:	4770      	bx	lr
 1d8:	20000038 	.word	0x20000038
 1dc:	2000003c 	.word	0x2000003c
 1e0:	20000000 	.word	0x20000000

000001e4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
 1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 1e6:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 1e8:	ac01      	add	r4, sp, #4
 1ea:	2501      	movs	r5, #1
 1ec:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
 1ee:	2700      	movs	r7, #0
 1f0:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 1f2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
 1f4:	0021      	movs	r1, r4
 1f6:	2017      	movs	r0, #23
 1f8:	4e06      	ldr	r6, [pc, #24]	; (214 <system_board_init+0x30>)
 1fa:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 1fc:	2280      	movs	r2, #128	; 0x80
 1fe:	0412      	lsls	r2, r2, #16
 200:	4b05      	ldr	r3, [pc, #20]	; (218 <system_board_init+0x34>)
 202:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
 204:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
 206:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
 208:	0021      	movs	r1, r4
 20a:	2037      	movs	r0, #55	; 0x37
 20c:	47b0      	blx	r6
}
 20e:	b003      	add	sp, #12
 210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 212:	46c0      	nop			; (mov r8, r8)
 214:	0000021d 	.word	0x0000021d
 218:	41004400 	.word	0x41004400

0000021c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 21c:	b500      	push	{lr}
 21e:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
 220:	ab01      	add	r3, sp, #4
 222:	2280      	movs	r2, #128	; 0x80
 224:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 226:	780a      	ldrb	r2, [r1, #0]
 228:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 22a:	784a      	ldrb	r2, [r1, #1]
 22c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 22e:	788a      	ldrb	r2, [r1, #2]
 230:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 232:	0019      	movs	r1, r3
 234:	4b01      	ldr	r3, [pc, #4]	; (23c <port_pin_set_config+0x20>)
 236:	4798      	blx	r3
}
 238:	b003      	add	sp, #12
 23a:	bd00      	pop	{pc}
 23c:	00000851 	.word	0x00000851

00000240 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 240:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 242:	4c0c      	ldr	r4, [pc, #48]	; (274 <system_clock_source_osc8m_set_config+0x34>)
 244:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 246:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 248:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 24a:	7842      	ldrb	r2, [r0, #1]
 24c:	2001      	movs	r0, #1
 24e:	4002      	ands	r2, r0
 250:	0192      	lsls	r2, r2, #6
 252:	2640      	movs	r6, #64	; 0x40
 254:	43b3      	bics	r3, r6
 256:	4313      	orrs	r3, r2
 258:	0002      	movs	r2, r0
 25a:	402a      	ands	r2, r5
 25c:	01d2      	lsls	r2, r2, #7
 25e:	307f      	adds	r0, #127	; 0x7f
 260:	4383      	bics	r3, r0
 262:	4313      	orrs	r3, r2
 264:	2203      	movs	r2, #3
 266:	400a      	ands	r2, r1
 268:	0212      	lsls	r2, r2, #8
 26a:	4903      	ldr	r1, [pc, #12]	; (278 <system_clock_source_osc8m_set_config+0x38>)
 26c:	400b      	ands	r3, r1
 26e:	4313      	orrs	r3, r2
 270:	6223      	str	r3, [r4, #32]
}
 272:	bd70      	pop	{r4, r5, r6, pc}
 274:	40000800 	.word	0x40000800
 278:	fffffcff 	.word	0xfffffcff

0000027c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
 27c:	b5f0      	push	{r4, r5, r6, r7, lr}
 27e:	465f      	mov	r7, fp
 280:	4656      	mov	r6, sl
 282:	464d      	mov	r5, r9
 284:	4644      	mov	r4, r8
 286:	b4f0      	push	{r4, r5, r6, r7}
 288:	b083      	sub	sp, #12
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
 28a:	4e2e      	ldr	r6, [pc, #184]	; (344 <system_clock_source_xosc32k_set_config+0xc8>)
 28c:	8ab3      	ldrh	r3, [r6, #20]
 28e:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
 290:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
 292:	7803      	ldrb	r3, [r0, #0]
 294:	425a      	negs	r2, r3
 296:	415a      	adcs	r2, r3
 298:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
 29a:	7883      	ldrb	r3, [r0, #2]
 29c:	469b      	mov	fp, r3
	temp.bit.EN1K = config->enable_1khz_output;
 29e:	78c3      	ldrb	r3, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
 2a0:	7902      	ldrb	r2, [r0, #4]
 2a2:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
 2a4:	7b47      	ldrb	r7, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
 2a6:	7b02      	ldrb	r2, [r0, #12]
 2a8:	9201      	str	r2, [sp, #4]
	temp.bit.WRTLOCK  = config->write_once;
 2aa:	7b84      	ldrb	r4, [r0, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
 2ac:	6882      	ldr	r2, [r0, #8]
 2ae:	4826      	ldr	r0, [pc, #152]	; (348 <system_clock_source_xosc32k_set_config+0xcc>)
 2b0:	6142      	str	r2, [r0, #20]

	SYSCTRL->XOSC32K = temp;
 2b2:	2001      	movs	r0, #1
 2b4:	464a      	mov	r2, r9
 2b6:	0092      	lsls	r2, r2, #2
 2b8:	4691      	mov	r9, r2
 2ba:	2204      	movs	r2, #4
 2bc:	4692      	mov	sl, r2
 2be:	4662      	mov	r2, ip
 2c0:	4651      	mov	r1, sl
 2c2:	438a      	bics	r2, r1
 2c4:	4694      	mov	ip, r2
 2c6:	464a      	mov	r2, r9
 2c8:	4661      	mov	r1, ip
 2ca:	430a      	orrs	r2, r1
 2cc:	4694      	mov	ip, r2
 2ce:	4642      	mov	r2, r8
 2d0:	4002      	ands	r2, r0
 2d2:	00d2      	lsls	r2, r2, #3
 2d4:	4690      	mov	r8, r2
 2d6:	2208      	movs	r2, #8
 2d8:	4691      	mov	r9, r2
 2da:	4662      	mov	r2, ip
 2dc:	4649      	mov	r1, r9
 2de:	438a      	bics	r2, r1
 2e0:	4694      	mov	ip, r2
 2e2:	4642      	mov	r2, r8
 2e4:	4661      	mov	r1, ip
 2e6:	430a      	orrs	r2, r1
 2e8:	4694      	mov	ip, r2
 2ea:	4003      	ands	r3, r0
 2ec:	011b      	lsls	r3, r3, #4
 2ee:	2210      	movs	r2, #16
 2f0:	4690      	mov	r8, r2
 2f2:	4662      	mov	r2, ip
 2f4:	4641      	mov	r1, r8
 2f6:	438a      	bics	r2, r1
 2f8:	4313      	orrs	r3, r2
 2fa:	4659      	mov	r1, fp
 2fc:	4001      	ands	r1, r0
 2fe:	0149      	lsls	r1, r1, #5
 300:	2220      	movs	r2, #32
 302:	4393      	bics	r3, r2
 304:	430b      	orrs	r3, r1
 306:	9a01      	ldr	r2, [sp, #4]
 308:	4002      	ands	r2, r0
 30a:	0192      	lsls	r2, r2, #6
 30c:	2140      	movs	r1, #64	; 0x40
 30e:	438b      	bics	r3, r1
 310:	4313      	orrs	r3, r2
 312:	4007      	ands	r7, r0
 314:	01ff      	lsls	r7, r7, #7
 316:	2280      	movs	r2, #128	; 0x80
 318:	4393      	bics	r3, r2
 31a:	433b      	orrs	r3, r7
 31c:	3a79      	subs	r2, #121	; 0x79
 31e:	4015      	ands	r5, r2
 320:	022d      	lsls	r5, r5, #8
 322:	4f0a      	ldr	r7, [pc, #40]	; (34c <system_clock_source_xosc32k_set_config+0xd0>)
 324:	403b      	ands	r3, r7
 326:	432b      	orrs	r3, r5
 328:	4004      	ands	r4, r0
 32a:	0320      	lsls	r0, r4, #12
 32c:	4c08      	ldr	r4, [pc, #32]	; (350 <system_clock_source_xosc32k_set_config+0xd4>)
 32e:	401c      	ands	r4, r3
 330:	4304      	orrs	r4, r0
 332:	82b4      	strh	r4, [r6, #20]
}
 334:	b003      	add	sp, #12
 336:	bc3c      	pop	{r2, r3, r4, r5}
 338:	4690      	mov	r8, r2
 33a:	4699      	mov	r9, r3
 33c:	46a2      	mov	sl, r4
 33e:	46ab      	mov	fp, r5
 340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 342:	46c0      	nop			; (mov r8, r8)
 344:	40000800 	.word	0x40000800
 348:	20000040 	.word	0x20000040
 34c:	fffff8ff 	.word	0xfffff8ff
 350:	ffffefff 	.word	0xffffefff

00000354 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
 354:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
 356:	7a03      	ldrb	r3, [r0, #8]
 358:	069b      	lsls	r3, r3, #26
 35a:	0c1a      	lsrs	r2, r3, #16
 35c:	8943      	ldrh	r3, [r0, #10]
 35e:	059b      	lsls	r3, r3, #22
 360:	0d9b      	lsrs	r3, r3, #22
 362:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
 364:	4c19      	ldr	r4, [pc, #100]	; (3cc <system_clock_source_dfll_set_config+0x78>)
 366:	6063      	str	r3, [r4, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
 368:	7981      	ldrb	r1, [r0, #6]
 36a:	79c3      	ldrb	r3, [r0, #7]
 36c:	4319      	orrs	r1, r3
 36e:	8843      	ldrh	r3, [r0, #2]
 370:	8882      	ldrh	r2, [r0, #4]
 372:	4313      	orrs	r3, r2
 374:	430b      	orrs	r3, r1
 376:	7842      	ldrb	r2, [r0, #1]
 378:	01d2      	lsls	r2, r2, #7
 37a:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
 37c:	6023      	str	r3, [r4, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
 37e:	7803      	ldrb	r3, [r0, #0]
 380:	2b04      	cmp	r3, #4
 382:	d10f      	bne.n	3a4 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
 384:	7b03      	ldrb	r3, [r0, #12]
 386:	069b      	lsls	r3, r3, #26
 388:	8a02      	ldrh	r2, [r0, #16]
 38a:	4313      	orrs	r3, r2
 38c:	0019      	movs	r1, r3
 38e:	89c3      	ldrh	r3, [r0, #14]
 390:	041b      	lsls	r3, r3, #16
 392:	4a0f      	ldr	r2, [pc, #60]	; (3d0 <system_clock_source_dfll_set_config+0x7c>)
 394:	4013      	ands	r3, r2
 396:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
 398:	60a3      	str	r3, [r4, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
 39a:	6821      	ldr	r1, [r4, #0]
 39c:	2304      	movs	r3, #4
 39e:	430b      	orrs	r3, r1
 3a0:	6023      	str	r3, [r4, #0]
 3a2:	e011      	b.n	3c8 <system_clock_source_dfll_set_config+0x74>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
 3a4:	2b20      	cmp	r3, #32
 3a6:	d10f      	bne.n	3c8 <system_clock_source_dfll_set_config+0x74>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
 3a8:	7b03      	ldrb	r3, [r0, #12]
 3aa:	069b      	lsls	r3, r3, #26
 3ac:	8a02      	ldrh	r2, [r0, #16]
 3ae:	4313      	orrs	r3, r2
 3b0:	0019      	movs	r1, r3
 3b2:	89c3      	ldrh	r3, [r0, #14]
 3b4:	041b      	lsls	r3, r3, #16
 3b6:	4a06      	ldr	r2, [pc, #24]	; (3d0 <system_clock_source_dfll_set_config+0x7c>)
 3b8:	4013      	ands	r3, r2
 3ba:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
 3bc:	4a03      	ldr	r2, [pc, #12]	; (3cc <system_clock_source_dfll_set_config+0x78>)
 3be:	6093      	str	r3, [r2, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
 3c0:	6813      	ldr	r3, [r2, #0]
 3c2:	4904      	ldr	r1, [pc, #16]	; (3d4 <system_clock_source_dfll_set_config+0x80>)
 3c4:	430b      	orrs	r3, r1
 3c6:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
 3c8:	bd10      	pop	{r4, pc}
 3ca:	46c0      	nop			; (mov r8, r8)
 3cc:	20000040 	.word	0x20000040
 3d0:	03ff0000 	.word	0x03ff0000
 3d4:	00000424 	.word	0x00000424

000003d8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 3d8:	2808      	cmp	r0, #8
 3da:	d803      	bhi.n	3e4 <system_clock_source_enable+0xc>
 3dc:	0080      	lsls	r0, r0, #2
 3de:	4b25      	ldr	r3, [pc, #148]	; (474 <system_clock_source_enable+0x9c>)
 3e0:	581b      	ldr	r3, [r3, r0]
 3e2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 3e4:	2017      	movs	r0, #23
 3e6:	e044      	b.n	472 <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 3e8:	4a23      	ldr	r2, [pc, #140]	; (478 <system_clock_source_enable+0xa0>)
 3ea:	6a11      	ldr	r1, [r2, #32]
 3ec:	2302      	movs	r3, #2
 3ee:	430b      	orrs	r3, r1
 3f0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
 3f2:	2000      	movs	r0, #0
 3f4:	e03d      	b.n	472 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 3f6:	4a20      	ldr	r2, [pc, #128]	; (478 <system_clock_source_enable+0xa0>)
 3f8:	6991      	ldr	r1, [r2, #24]
 3fa:	2302      	movs	r3, #2
 3fc:	430b      	orrs	r3, r1
 3fe:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 400:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
 402:	e036      	b.n	472 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 404:	4a1c      	ldr	r2, [pc, #112]	; (478 <system_clock_source_enable+0xa0>)
 406:	8a11      	ldrh	r1, [r2, #16]
 408:	2302      	movs	r3, #2
 40a:	430b      	orrs	r3, r1
 40c:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 40e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
 410:	e02f      	b.n	472 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 412:	4a19      	ldr	r2, [pc, #100]	; (478 <system_clock_source_enable+0xa0>)
 414:	8a91      	ldrh	r1, [r2, #20]
 416:	2302      	movs	r3, #2
 418:	430b      	orrs	r3, r1
 41a:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 41c:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
 41e:	e028      	b.n	472 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 420:	4916      	ldr	r1, [pc, #88]	; (47c <system_clock_source_enable+0xa4>)
 422:	680b      	ldr	r3, [r1, #0]
 424:	2202      	movs	r2, #2
 426:	4313      	orrs	r3, r2
 428:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
 42a:	4b13      	ldr	r3, [pc, #76]	; (478 <system_clock_source_enable+0xa0>)
 42c:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 42e:	0019      	movs	r1, r3
 430:	320e      	adds	r2, #14
 432:	68cb      	ldr	r3, [r1, #12]
 434:	421a      	tst	r2, r3
 436:	d0fc      	beq.n	432 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 438:	4a10      	ldr	r2, [pc, #64]	; (47c <system_clock_source_enable+0xa4>)
 43a:	6891      	ldr	r1, [r2, #8]
 43c:	4b0e      	ldr	r3, [pc, #56]	; (478 <system_clock_source_enable+0xa0>)
 43e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 440:	6852      	ldr	r2, [r2, #4]
 442:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
 444:	2200      	movs	r2, #0
 446:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 448:	0019      	movs	r1, r3
 44a:	3210      	adds	r2, #16
 44c:	68cb      	ldr	r3, [r1, #12]
 44e:	421a      	tst	r2, r3
 450:	d0fc      	beq.n	44c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 452:	4b0a      	ldr	r3, [pc, #40]	; (47c <system_clock_source_enable+0xa4>)
 454:	681b      	ldr	r3, [r3, #0]
 456:	b29b      	uxth	r3, r3
 458:	4a07      	ldr	r2, [pc, #28]	; (478 <system_clock_source_enable+0xa0>)
 45a:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 45c:	2000      	movs	r0, #0
 45e:	e008      	b.n	472 <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
 460:	4905      	ldr	r1, [pc, #20]	; (478 <system_clock_source_enable+0xa0>)
 462:	2244      	movs	r2, #68	; 0x44
 464:	5c88      	ldrb	r0, [r1, r2]
 466:	2302      	movs	r3, #2
 468:	4303      	orrs	r3, r0
 46a:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 46c:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
 46e:	e000      	b.n	472 <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
 470:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
 472:	4770      	bx	lr
 474:	00000a20 	.word	0x00000a20
 478:	40000800 	.word	0x40000800
 47c:	20000040 	.word	0x20000040

00000480 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 480:	b5f0      	push	{r4, r5, r6, r7, lr}
 482:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 484:	22c2      	movs	r2, #194	; 0xc2
 486:	00d2      	lsls	r2, r2, #3
 488:	4b47      	ldr	r3, [pc, #284]	; (5a8 <system_clock_init+0x128>)
 48a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 48c:	4947      	ldr	r1, [pc, #284]	; (5ac <system_clock_init+0x12c>)
 48e:	684b      	ldr	r3, [r1, #4]
 490:	221e      	movs	r2, #30
 492:	4393      	bics	r3, r2
 494:	3a1a      	subs	r2, #26
 496:	4313      	orrs	r3, r2
 498:	604b      	str	r3, [r1, #4]
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
 49a:	3a02      	subs	r2, #2
 49c:	ab01      	add	r3, sp, #4
 49e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 4a0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 4a2:	4d43      	ldr	r5, [pc, #268]	; (5b0 <system_clock_init+0x130>)
 4a4:	b2e0      	uxtb	r0, r4
 4a6:	a901      	add	r1, sp, #4
 4a8:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 4aa:	3401      	adds	r4, #1
 4ac:	2c25      	cmp	r4, #37	; 0x25
 4ae:	d1f9      	bne.n	4a4 <system_clock_init+0x24>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
 4b0:	a80a      	add	r0, sp, #40	; 0x28
 4b2:	2300      	movs	r3, #0
 4b4:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
 4b6:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
 4b8:	2280      	movs	r2, #128	; 0x80
 4ba:	0212      	lsls	r2, r2, #8
 4bc:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
 4be:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
 4c0:	2201      	movs	r2, #1
 4c2:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
 4c4:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
 4c6:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
 4c8:	3202      	adds	r2, #2
 4ca:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
 4cc:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
 4ce:	4b39      	ldr	r3, [pc, #228]	; (5b4 <system_clock_init+0x134>)
 4d0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
 4d2:	2005      	movs	r0, #5
 4d4:	4b38      	ldr	r3, [pc, #224]	; (5b8 <system_clock_init+0x138>)
 4d6:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
 4d8:	4933      	ldr	r1, [pc, #204]	; (5a8 <system_clock_init+0x128>)
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
 4da:	2202      	movs	r2, #2

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
 4dc:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
 4de:	421a      	tst	r2, r3
 4e0:	d0fc      	beq.n	4dc <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
 4e2:	4a31      	ldr	r2, [pc, #196]	; (5a8 <system_clock_init+0x128>)
 4e4:	8a91      	ldrh	r1, [r2, #20]
 4e6:	2380      	movs	r3, #128	; 0x80
 4e8:	430b      	orrs	r3, r1
 4ea:	8293      	strh	r3, [r2, #20]
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
 4ec:	ab05      	add	r3, sp, #20
 4ee:	2100      	movs	r1, #0
 4f0:	2200      	movs	r2, #0
 4f2:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
 4f4:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
 4f6:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
 4f8:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
	config->fine_value      = 0xff / 4; /* Midpoint */
 4fa:	313f      	adds	r1, #63	; 0x3f
 4fc:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
 4fe:	393b      	subs	r1, #59	; 0x3b
 500:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
 502:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
 504:	4b2d      	ldr	r3, [pc, #180]	; (5bc <system_clock_init+0x13c>)
 506:	681b      	ldr	r3, [r3, #0]
 508:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
 50a:	2b3f      	cmp	r3, #63	; 0x3f
 50c:	d100      	bne.n	510 <system_clock_init+0x90>
		coarse = 0x1f;
 50e:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
 510:	a805      	add	r0, sp, #20
 512:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
 514:	4b2a      	ldr	r3, [pc, #168]	; (5c0 <system_clock_init+0x140>)
 516:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
 518:	2307      	movs	r3, #7
 51a:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
 51c:	3338      	adds	r3, #56	; 0x38
 51e:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
 520:	4b28      	ldr	r3, [pc, #160]	; (5c4 <system_clock_init+0x144>)
 522:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
 524:	a804      	add	r0, sp, #16
 526:	2500      	movs	r5, #0
 528:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
 52a:	2601      	movs	r6, #1
 52c:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 52e:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 530:	4b25      	ldr	r3, [pc, #148]	; (5c8 <system_clock_init+0x148>)
 532:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 534:	2006      	movs	r0, #6
 536:	4f20      	ldr	r7, [pc, #128]	; (5b8 <system_clock_init+0x138>)
 538:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 53a:	4b24      	ldr	r3, [pc, #144]	; (5cc <system_clock_init+0x14c>)
 53c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 53e:	ac01      	add	r4, sp, #4
 540:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
 542:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
 544:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
 546:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
 548:	2305      	movs	r3, #5
 54a:	7023      	strb	r3, [r4, #0]
 54c:	0021      	movs	r1, r4
 54e:	2001      	movs	r0, #1
 550:	4b1f      	ldr	r3, [pc, #124]	; (5d0 <system_clock_init+0x150>)
 552:	4798      	blx	r3
 554:	2001      	movs	r0, #1
 556:	4b1f      	ldr	r3, [pc, #124]	; (5d4 <system_clock_init+0x154>)
 558:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
 55a:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
 55c:	0021      	movs	r1, r4
 55e:	2000      	movs	r0, #0
 560:	4b13      	ldr	r3, [pc, #76]	; (5b0 <system_clock_init+0x130>)
 562:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
 564:	2000      	movs	r0, #0
 566:	4b1c      	ldr	r3, [pc, #112]	; (5d8 <system_clock_init+0x158>)
 568:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
 56a:	2007      	movs	r0, #7
 56c:	47b8      	blx	r7

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
 56e:	490e      	ldr	r1, [pc, #56]	; (5a8 <system_clock_init+0x128>)


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
 570:	22d0      	movs	r2, #208	; 0xd0

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
 572:	68cb      	ldr	r3, [r1, #12]


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
 574:	4013      	ands	r3, r2
 576:	2bd0      	cmp	r3, #208	; 0xd0
 578:	d1fb      	bne.n	572 <system_clock_init+0xf2>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
 57a:	4a18      	ldr	r2, [pc, #96]	; (5dc <system_clock_init+0x15c>)
 57c:	2300      	movs	r3, #0
 57e:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
 580:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
 582:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
 584:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 586:	a901      	add	r1, sp, #4
 588:	2201      	movs	r2, #1
 58a:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
 58c:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
 58e:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
 590:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 592:	3307      	adds	r3, #7
 594:	700b      	strb	r3, [r1, #0]
 596:	2000      	movs	r0, #0
 598:	4b0d      	ldr	r3, [pc, #52]	; (5d0 <system_clock_init+0x150>)
 59a:	4798      	blx	r3
 59c:	2000      	movs	r0, #0
 59e:	4b0d      	ldr	r3, [pc, #52]	; (5d4 <system_clock_init+0x154>)
 5a0:	4798      	blx	r3
#endif
}
 5a2:	b00f      	add	sp, #60	; 0x3c
 5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 5a6:	46c0      	nop			; (mov r8, r8)
 5a8:	40000800 	.word	0x40000800
 5ac:	41004000 	.word	0x41004000
 5b0:	0000078d 	.word	0x0000078d
 5b4:	0000027d 	.word	0x0000027d
 5b8:	000003d9 	.word	0x000003d9
 5bc:	00806024 	.word	0x00806024
 5c0:	000005b9 	.word	0x000005b9
 5c4:	00000355 	.word	0x00000355
 5c8:	00000241 	.word	0x00000241
 5cc:	000005e1 	.word	0x000005e1
 5d0:	00000605 	.word	0x00000605
 5d4:	000006bd 	.word	0x000006bd
 5d8:	00000701 	.word	0x00000701
 5dc:	40000400 	.word	0x40000400

000005e0 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
 5e0:	4a06      	ldr	r2, [pc, #24]	; (5fc <system_gclk_init+0x1c>)
 5e2:	6991      	ldr	r1, [r2, #24]
 5e4:	2308      	movs	r3, #8
 5e6:	430b      	orrs	r3, r1
 5e8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 5ea:	2201      	movs	r2, #1
 5ec:	4b04      	ldr	r3, [pc, #16]	; (600 <system_gclk_init+0x20>)
 5ee:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 5f0:	0019      	movs	r1, r3
 5f2:	780b      	ldrb	r3, [r1, #0]
 5f4:	4213      	tst	r3, r2
 5f6:	d1fc      	bne.n	5f2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 5f8:	4770      	bx	lr
 5fa:	46c0      	nop			; (mov r8, r8)
 5fc:	40000400 	.word	0x40000400
 600:	40000c00 	.word	0x40000c00

00000604 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 604:	b570      	push	{r4, r5, r6, lr}
 606:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 608:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 60a:	780c      	ldrb	r4, [r1, #0]
 60c:	0224      	lsls	r4, r4, #8
 60e:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 610:	784b      	ldrb	r3, [r1, #1]
 612:	2b00      	cmp	r3, #0
 614:	d002      	beq.n	61c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 616:	2380      	movs	r3, #128	; 0x80
 618:	02db      	lsls	r3, r3, #11
 61a:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 61c:	7a4b      	ldrb	r3, [r1, #9]
 61e:	2b00      	cmp	r3, #0
 620:	d002      	beq.n	628 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 622:	2380      	movs	r3, #128	; 0x80
 624:	031b      	lsls	r3, r3, #12
 626:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 628:	6848      	ldr	r0, [r1, #4]
 62a:	2801      	cmp	r0, #1
 62c:	d918      	bls.n	660 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 62e:	1e43      	subs	r3, r0, #1
 630:	4218      	tst	r0, r3
 632:	d110      	bne.n	656 <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 634:	2802      	cmp	r0, #2
 636:	d906      	bls.n	646 <system_gclk_gen_set_config+0x42>
 638:	2302      	movs	r3, #2
 63a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 63c:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
 63e:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 640:	4298      	cmp	r0, r3
 642:	d8fb      	bhi.n	63c <system_gclk_gen_set_config+0x38>
 644:	e000      	b.n	648 <system_gclk_gen_set_config+0x44>
 646:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 648:	0212      	lsls	r2, r2, #8
 64a:	4332      	orrs	r2, r6
 64c:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 64e:	2380      	movs	r3, #128	; 0x80
 650:	035b      	lsls	r3, r3, #13
 652:	431c      	orrs	r4, r3
 654:	e004      	b.n	660 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
 656:	0205      	lsls	r5, r0, #8
 658:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 65a:	2380      	movs	r3, #128	; 0x80
 65c:	029b      	lsls	r3, r3, #10
 65e:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 660:	7a0b      	ldrb	r3, [r1, #8]
 662:	2b00      	cmp	r3, #0
 664:	d002      	beq.n	66c <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 666:	2380      	movs	r3, #128	; 0x80
 668:	039b      	lsls	r3, r3, #14
 66a:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 66c:	4a0f      	ldr	r2, [pc, #60]	; (6ac <system_gclk_gen_set_config+0xa8>)
 66e:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
 670:	b25b      	sxtb	r3, r3
 672:	2b00      	cmp	r3, #0
 674:	dbfb      	blt.n	66e <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 676:	4b0e      	ldr	r3, [pc, #56]	; (6b0 <system_gclk_gen_set_config+0xac>)
 678:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 67a:	4b0e      	ldr	r3, [pc, #56]	; (6b4 <system_gclk_gen_set_config+0xb0>)
 67c:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 67e:	4a0b      	ldr	r2, [pc, #44]	; (6ac <system_gclk_gen_set_config+0xa8>)
 680:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 682:	b25b      	sxtb	r3, r3
 684:	2b00      	cmp	r3, #0
 686:	dbfb      	blt.n	680 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 688:	4b08      	ldr	r3, [pc, #32]	; (6ac <system_gclk_gen_set_config+0xa8>)
 68a:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 68c:	001a      	movs	r2, r3
 68e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
 690:	b25b      	sxtb	r3, r3
 692:	2b00      	cmp	r3, #0
 694:	dbfb      	blt.n	68e <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 696:	4a05      	ldr	r2, [pc, #20]	; (6ac <system_gclk_gen_set_config+0xa8>)
 698:	6851      	ldr	r1, [r2, #4]
 69a:	2380      	movs	r3, #128	; 0x80
 69c:	025b      	lsls	r3, r3, #9
 69e:	400b      	ands	r3, r1
 6a0:	431c      	orrs	r4, r3
 6a2:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 6a4:	4b04      	ldr	r3, [pc, #16]	; (6b8 <system_gclk_gen_set_config+0xb4>)
 6a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 6a8:	bd70      	pop	{r4, r5, r6, pc}
 6aa:	46c0      	nop			; (mov r8, r8)
 6ac:	40000c00 	.word	0x40000c00
 6b0:	00000175 	.word	0x00000175
 6b4:	40000c08 	.word	0x40000c08
 6b8:	000001b5 	.word	0x000001b5

000006bc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 6bc:	b510      	push	{r4, lr}
 6be:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 6c0:	4a0b      	ldr	r2, [pc, #44]	; (6f0 <system_gclk_gen_enable+0x34>)
 6c2:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
 6c4:	b25b      	sxtb	r3, r3
 6c6:	2b00      	cmp	r3, #0
 6c8:	dbfb      	blt.n	6c2 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 6ca:	4b0a      	ldr	r3, [pc, #40]	; (6f4 <system_gclk_gen_enable+0x38>)
 6cc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 6ce:	4b0a      	ldr	r3, [pc, #40]	; (6f8 <system_gclk_gen_enable+0x3c>)
 6d0:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 6d2:	4a07      	ldr	r2, [pc, #28]	; (6f0 <system_gclk_gen_enable+0x34>)
 6d4:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
 6d6:	b25b      	sxtb	r3, r3
 6d8:	2b00      	cmp	r3, #0
 6da:	dbfb      	blt.n	6d4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 6dc:	4a04      	ldr	r2, [pc, #16]	; (6f0 <system_gclk_gen_enable+0x34>)
 6de:	6853      	ldr	r3, [r2, #4]
 6e0:	2180      	movs	r1, #128	; 0x80
 6e2:	0249      	lsls	r1, r1, #9
 6e4:	430b      	orrs	r3, r1
 6e6:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 6e8:	4b04      	ldr	r3, [pc, #16]	; (6fc <system_gclk_gen_enable+0x40>)
 6ea:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 6ec:	bd10      	pop	{r4, pc}
 6ee:	46c0      	nop			; (mov r8, r8)
 6f0:	40000c00 	.word	0x40000c00
 6f4:	00000175 	.word	0x00000175
 6f8:	40000c04 	.word	0x40000c04
 6fc:	000001b5 	.word	0x000001b5

00000700 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
 700:	b510      	push	{r4, lr}
 702:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 704:	4b06      	ldr	r3, [pc, #24]	; (720 <system_gclk_chan_enable+0x20>)
 706:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 708:	4b06      	ldr	r3, [pc, #24]	; (724 <system_gclk_chan_enable+0x24>)
 70a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
 70c:	4a06      	ldr	r2, [pc, #24]	; (728 <system_gclk_chan_enable+0x28>)
 70e:	8851      	ldrh	r1, [r2, #2]
 710:	2380      	movs	r3, #128	; 0x80
 712:	01db      	lsls	r3, r3, #7
 714:	430b      	orrs	r3, r1
 716:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 718:	4b04      	ldr	r3, [pc, #16]	; (72c <system_gclk_chan_enable+0x2c>)
 71a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 71c:	bd10      	pop	{r4, pc}
 71e:	46c0      	nop			; (mov r8, r8)
 720:	00000175 	.word	0x00000175
 724:	40000c02 	.word	0x40000c02
 728:	40000c00 	.word	0x40000c00
 72c:	000001b5 	.word	0x000001b5

00000730 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 730:	b510      	push	{r4, lr}
 732:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 734:	4b0f      	ldr	r3, [pc, #60]	; (774 <system_gclk_chan_disable+0x44>)
 736:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 738:	4b0f      	ldr	r3, [pc, #60]	; (778 <system_gclk_chan_disable+0x48>)
 73a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 73c:	4b0f      	ldr	r3, [pc, #60]	; (77c <system_gclk_chan_disable+0x4c>)
 73e:	885a      	ldrh	r2, [r3, #2]
 740:	0512      	lsls	r2, r2, #20
 742:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 744:	8859      	ldrh	r1, [r3, #2]
 746:	4a0e      	ldr	r2, [pc, #56]	; (780 <system_gclk_chan_disable+0x50>)
 748:	400a      	ands	r2, r1
 74a:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 74c:	8859      	ldrh	r1, [r3, #2]
 74e:	4a0d      	ldr	r2, [pc, #52]	; (784 <system_gclk_chan_disable+0x54>)
 750:	400a      	ands	r2, r1
 752:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 754:	0019      	movs	r1, r3
 756:	2280      	movs	r2, #128	; 0x80
 758:	01d2      	lsls	r2, r2, #7
 75a:	884b      	ldrh	r3, [r1, #2]
 75c:	4213      	tst	r3, r2
 75e:	d1fc      	bne.n	75a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 760:	4906      	ldr	r1, [pc, #24]	; (77c <system_gclk_chan_disable+0x4c>)
 762:	884c      	ldrh	r4, [r1, #2]
 764:	0202      	lsls	r2, r0, #8
 766:	4b06      	ldr	r3, [pc, #24]	; (780 <system_gclk_chan_disable+0x50>)
 768:	4023      	ands	r3, r4
 76a:	4313      	orrs	r3, r2
 76c:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 76e:	4b06      	ldr	r3, [pc, #24]	; (788 <system_gclk_chan_disable+0x58>)
 770:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 772:	bd10      	pop	{r4, pc}
 774:	00000175 	.word	0x00000175
 778:	40000c02 	.word	0x40000c02
 77c:	40000c00 	.word	0x40000c00
 780:	fffff0ff 	.word	0xfffff0ff
 784:	ffffbfff 	.word	0xffffbfff
 788:	000001b5 	.word	0x000001b5

0000078c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
 78c:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 78e:	780c      	ldrb	r4, [r1, #0]
 790:	0224      	lsls	r4, r4, #8
 792:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
 794:	4b02      	ldr	r3, [pc, #8]	; (7a0 <system_gclk_chan_set_config+0x14>)
 796:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 798:	b2a4      	uxth	r4, r4
 79a:	4b02      	ldr	r3, [pc, #8]	; (7a4 <system_gclk_chan_set_config+0x18>)
 79c:	805c      	strh	r4, [r3, #2]
}
 79e:	bd10      	pop	{r4, pc}
 7a0:	00000731 	.word	0x00000731
 7a4:	40000c00 	.word	0x40000c00

000007a8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 7a8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 7aa:	78d3      	ldrb	r3, [r2, #3]
 7ac:	2b00      	cmp	r3, #0
 7ae:	d11e      	bne.n	7ee <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 7b0:	7813      	ldrb	r3, [r2, #0]
 7b2:	2b80      	cmp	r3, #128	; 0x80
 7b4:	d004      	beq.n	7c0 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 7b6:	061b      	lsls	r3, r3, #24
 7b8:	2480      	movs	r4, #128	; 0x80
 7ba:	0264      	lsls	r4, r4, #9
 7bc:	4323      	orrs	r3, r4
 7be:	e000      	b.n	7c2 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
 7c0:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 7c2:	7854      	ldrb	r4, [r2, #1]
 7c4:	2502      	movs	r5, #2
 7c6:	43ac      	bics	r4, r5
 7c8:	d10a      	bne.n	7e0 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 7ca:	7894      	ldrb	r4, [r2, #2]
 7cc:	2c00      	cmp	r4, #0
 7ce:	d103      	bne.n	7d8 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
 7d0:	2480      	movs	r4, #128	; 0x80
 7d2:	02a4      	lsls	r4, r4, #10
 7d4:	4323      	orrs	r3, r4
 7d6:	e002      	b.n	7de <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 7d8:	24c0      	movs	r4, #192	; 0xc0
 7da:	02e4      	lsls	r4, r4, #11
 7dc:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 7de:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 7e0:	7854      	ldrb	r4, [r2, #1]
 7e2:	3c01      	subs	r4, #1
 7e4:	2c01      	cmp	r4, #1
 7e6:	d812      	bhi.n	80e <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 7e8:	4c18      	ldr	r4, [pc, #96]	; (84c <_system_pinmux_config+0xa4>)
 7ea:	4023      	ands	r3, r4
 7ec:	e00f      	b.n	80e <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
 7ee:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 7f0:	040b      	lsls	r3, r1, #16
 7f2:	0c1b      	lsrs	r3, r3, #16
 7f4:	24a0      	movs	r4, #160	; 0xa0
 7f6:	05e4      	lsls	r4, r4, #23
 7f8:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 7fa:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 7fc:	0c0b      	lsrs	r3, r1, #16
 7fe:	24d0      	movs	r4, #208	; 0xd0
 800:	0624      	lsls	r4, r4, #24
 802:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 804:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 806:	78d3      	ldrb	r3, [r2, #3]
 808:	2b00      	cmp	r3, #0
 80a:	d018      	beq.n	83e <_system_pinmux_config+0x96>
 80c:	e01c      	b.n	848 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 80e:	040c      	lsls	r4, r1, #16
 810:	0c24      	lsrs	r4, r4, #16
 812:	25a0      	movs	r5, #160	; 0xa0
 814:	05ed      	lsls	r5, r5, #23
 816:	432c      	orrs	r4, r5
 818:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 81a:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 81c:	0c0c      	lsrs	r4, r1, #16
 81e:	25d0      	movs	r5, #208	; 0xd0
 820:	062d      	lsls	r5, r5, #24
 822:	432c      	orrs	r4, r5
 824:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 826:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 828:	78d4      	ldrb	r4, [r2, #3]
 82a:	2c00      	cmp	r4, #0
 82c:	d10c      	bne.n	848 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 82e:	035b      	lsls	r3, r3, #13
 830:	d505      	bpl.n	83e <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 832:	7893      	ldrb	r3, [r2, #2]
 834:	2b01      	cmp	r3, #1
 836:	d101      	bne.n	83c <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
 838:	6181      	str	r1, [r0, #24]
 83a:	e000      	b.n	83e <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
 83c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 83e:	7853      	ldrb	r3, [r2, #1]
 840:	3b01      	subs	r3, #1
 842:	2b01      	cmp	r3, #1
 844:	d800      	bhi.n	848 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
 846:	6081      	str	r1, [r0, #8]
		}
	}
}
 848:	bd30      	pop	{r4, r5, pc}
 84a:	46c0      	nop			; (mov r8, r8)
 84c:	fffbffff 	.word	0xfffbffff

00000850 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 850:	b510      	push	{r4, lr}
 852:	0003      	movs	r3, r0
 854:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 856:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 858:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 85a:	2900      	cmp	r1, #0
 85c:	d104      	bne.n	868 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
 85e:	0958      	lsrs	r0, r3, #5
 860:	01c0      	lsls	r0, r0, #7
 862:	4905      	ldr	r1, [pc, #20]	; (878 <system_pinmux_pin_set_config+0x28>)
 864:	468c      	mov	ip, r1
 866:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
 868:	211f      	movs	r1, #31
 86a:	400b      	ands	r3, r1
 86c:	391e      	subs	r1, #30
 86e:	4099      	lsls	r1, r3
 870:	4b02      	ldr	r3, [pc, #8]	; (87c <system_pinmux_pin_set_config+0x2c>)
 872:	4798      	blx	r3
}
 874:	bd10      	pop	{r4, pc}
 876:	46c0      	nop			; (mov r8, r8)
 878:	41004400 	.word	0x41004400
 87c:	000007a9 	.word	0x000007a9

00000880 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 880:	4770      	bx	lr
 882:	46c0      	nop			; (mov r8, r8)

00000884 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 884:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 886:	4b05      	ldr	r3, [pc, #20]	; (89c <system_init+0x18>)
 888:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 88a:	4b05      	ldr	r3, [pc, #20]	; (8a0 <system_init+0x1c>)
 88c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 88e:	4b05      	ldr	r3, [pc, #20]	; (8a4 <system_init+0x20>)
 890:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 892:	4b05      	ldr	r3, [pc, #20]	; (8a8 <system_init+0x24>)
 894:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 896:	4b05      	ldr	r3, [pc, #20]	; (8ac <system_init+0x28>)
 898:	4798      	blx	r3
}
 89a:	bd10      	pop	{r4, pc}
 89c:	00000481 	.word	0x00000481
 8a0:	000001e5 	.word	0x000001e5
 8a4:	00000881 	.word	0x00000881
 8a8:	00000881 	.word	0x00000881
 8ac:	00000881 	.word	0x00000881

000008b0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 8b0:	e7fe      	b.n	8b0 <Dummy_Handler>
 8b2:	46c0      	nop			; (mov r8, r8)

000008b4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 8b4:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
 8b6:	4b2e      	ldr	r3, [pc, #184]	; (970 <Reset_Handler+0xbc>)
 8b8:	4a2e      	ldr	r2, [pc, #184]	; (974 <Reset_Handler+0xc0>)
 8ba:	429a      	cmp	r2, r3
 8bc:	d003      	beq.n	8c6 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
 8be:	4b2e      	ldr	r3, [pc, #184]	; (978 <Reset_Handler+0xc4>)
 8c0:	4a2b      	ldr	r2, [pc, #172]	; (970 <Reset_Handler+0xbc>)
 8c2:	429a      	cmp	r2, r3
 8c4:	d304      	bcc.n	8d0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 8c6:	4b2d      	ldr	r3, [pc, #180]	; (97c <Reset_Handler+0xc8>)
 8c8:	4a2d      	ldr	r2, [pc, #180]	; (980 <Reset_Handler+0xcc>)
 8ca:	429a      	cmp	r2, r3
 8cc:	d310      	bcc.n	8f0 <Reset_Handler+0x3c>
 8ce:	e01e      	b.n	90e <Reset_Handler+0x5a>
 8d0:	4a2c      	ldr	r2, [pc, #176]	; (984 <Reset_Handler+0xd0>)
 8d2:	4b29      	ldr	r3, [pc, #164]	; (978 <Reset_Handler+0xc4>)
 8d4:	3303      	adds	r3, #3
 8d6:	1a9b      	subs	r3, r3, r2
 8d8:	089b      	lsrs	r3, r3, #2
 8da:	3301      	adds	r3, #1
 8dc:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 8de:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 8e0:	4823      	ldr	r0, [pc, #140]	; (970 <Reset_Handler+0xbc>)
 8e2:	4924      	ldr	r1, [pc, #144]	; (974 <Reset_Handler+0xc0>)
 8e4:	588c      	ldr	r4, [r1, r2]
 8e6:	5084      	str	r4, [r0, r2]
 8e8:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 8ea:	429a      	cmp	r2, r3
 8ec:	d1fa      	bne.n	8e4 <Reset_Handler+0x30>
 8ee:	e7ea      	b.n	8c6 <Reset_Handler+0x12>
 8f0:	4a25      	ldr	r2, [pc, #148]	; (988 <Reset_Handler+0xd4>)
 8f2:	4b22      	ldr	r3, [pc, #136]	; (97c <Reset_Handler+0xc8>)
 8f4:	3303      	adds	r3, #3
 8f6:	1a9b      	subs	r3, r3, r2
 8f8:	089b      	lsrs	r3, r3, #2
 8fa:	3301      	adds	r3, #1
 8fc:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 8fe:	2200      	movs	r2, #0
                *pDest++ = 0;
 900:	481f      	ldr	r0, [pc, #124]	; (980 <Reset_Handler+0xcc>)
 902:	2100      	movs	r1, #0
 904:	1814      	adds	r4, r2, r0
 906:	6021      	str	r1, [r4, #0]
 908:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 90a:	429a      	cmp	r2, r3
 90c:	d1fa      	bne.n	904 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 90e:	4a1f      	ldr	r2, [pc, #124]	; (98c <Reset_Handler+0xd8>)
 910:	21ff      	movs	r1, #255	; 0xff
 912:	4b1f      	ldr	r3, [pc, #124]	; (990 <Reset_Handler+0xdc>)
 914:	438b      	bics	r3, r1
 916:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 918:	39fd      	subs	r1, #253	; 0xfd
 91a:	2390      	movs	r3, #144	; 0x90
 91c:	005b      	lsls	r3, r3, #1
 91e:	4a1d      	ldr	r2, [pc, #116]	; (994 <Reset_Handler+0xe0>)
 920:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 922:	481d      	ldr	r0, [pc, #116]	; (998 <Reset_Handler+0xe4>)
 924:	78c3      	ldrb	r3, [r0, #3]
 926:	2403      	movs	r4, #3
 928:	43a3      	bics	r3, r4
 92a:	2202      	movs	r2, #2
 92c:	4313      	orrs	r3, r2
 92e:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 930:	78c3      	ldrb	r3, [r0, #3]
 932:	260c      	movs	r6, #12
 934:	43b3      	bics	r3, r6
 936:	2108      	movs	r1, #8
 938:	430b      	orrs	r3, r1
 93a:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 93c:	4b17      	ldr	r3, [pc, #92]	; (99c <Reset_Handler+0xe8>)
 93e:	7b98      	ldrb	r0, [r3, #14]
 940:	2530      	movs	r5, #48	; 0x30
 942:	43a8      	bics	r0, r5
 944:	0005      	movs	r5, r0
 946:	2020      	movs	r0, #32
 948:	4328      	orrs	r0, r5
 94a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 94c:	7b98      	ldrb	r0, [r3, #14]
 94e:	43b0      	bics	r0, r6
 950:	4301      	orrs	r1, r0
 952:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 954:	7b99      	ldrb	r1, [r3, #14]
 956:	43a1      	bics	r1, r4
 958:	430a      	orrs	r2, r1
 95a:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 95c:	4a10      	ldr	r2, [pc, #64]	; (9a0 <Reset_Handler+0xec>)
 95e:	6851      	ldr	r1, [r2, #4]
 960:	2380      	movs	r3, #128	; 0x80
 962:	430b      	orrs	r3, r1
 964:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 966:	4b0f      	ldr	r3, [pc, #60]	; (9a4 <Reset_Handler+0xf0>)
 968:	4798      	blx	r3

        /* Branch to main function */
        main();
 96a:	4b0f      	ldr	r3, [pc, #60]	; (9a8 <Reset_Handler+0xf4>)
 96c:	4798      	blx	r3
 96e:	e7fe      	b.n	96e <Reset_Handler+0xba>
 970:	20000000 	.word	0x20000000
 974:	00000a64 	.word	0x00000a64
 978:	20000004 	.word	0x20000004
 97c:	20000058 	.word	0x20000058
 980:	20000004 	.word	0x20000004
 984:	20000004 	.word	0x20000004
 988:	20000008 	.word	0x20000008
 98c:	e000ed00 	.word	0xe000ed00
 990:	00000000 	.word	0x00000000
 994:	41007000 	.word	0x41007000
 998:	41005000 	.word	0x41005000
 99c:	41004800 	.word	0x41004800
 9a0:	41004000 	.word	0x41004000
 9a4:	000009d5 	.word	0x000009d5
 9a8:	000009ad 	.word	0x000009ad

000009ac <main>:
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
#include <asf.h>

int main (void)
{
 9ac:	b510      	push	{r4, lr}
	system_init();
 9ae:	4b07      	ldr	r3, [pc, #28]	; (9cc <main+0x20>)
 9b0:	4798      	blx	r3
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
 9b2:	4907      	ldr	r1, [pc, #28]	; (9d0 <main+0x24>)
 9b4:	0008      	movs	r0, r1
 9b6:	3080      	adds	r0, #128	; 0x80
	/* Insert application code here, after the board has been initialized. */

	/* This skeleton code simply sets the LED to the state of the button. */
	while (1) {
		/* Is button pressed? */
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
 9b8:	2380      	movs	r3, #128	; 0x80
 9ba:	041b      	lsls	r3, r3, #16
 9bc:	6a02      	ldr	r2, [r0, #32]
 9be:	421a      	tst	r2, r3
 9c0:	d101      	bne.n	9c6 <main+0x1a>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
 9c2:	614b      	str	r3, [r1, #20]
 9c4:	e7fa      	b.n	9bc <main+0x10>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 9c6:	618b      	str	r3, [r1, #24]
 9c8:	e7f8      	b.n	9bc <main+0x10>
 9ca:	46c0      	nop			; (mov r8, r8)
 9cc:	00000885 	.word	0x00000885
 9d0:	41004400 	.word	0x41004400

000009d4 <__libc_init_array>:
 9d4:	4b0e      	ldr	r3, [pc, #56]	; (a10 <__libc_init_array+0x3c>)
 9d6:	b570      	push	{r4, r5, r6, lr}
 9d8:	2500      	movs	r5, #0
 9da:	001e      	movs	r6, r3
 9dc:	4c0d      	ldr	r4, [pc, #52]	; (a14 <__libc_init_array+0x40>)
 9de:	1ae4      	subs	r4, r4, r3
 9e0:	10a4      	asrs	r4, r4, #2
 9e2:	42a5      	cmp	r5, r4
 9e4:	d004      	beq.n	9f0 <__libc_init_array+0x1c>
 9e6:	00ab      	lsls	r3, r5, #2
 9e8:	58f3      	ldr	r3, [r6, r3]
 9ea:	4798      	blx	r3
 9ec:	3501      	adds	r5, #1
 9ee:	e7f8      	b.n	9e2 <__libc_init_array+0xe>
 9f0:	f000 f828 	bl	a44 <_init>
 9f4:	4b08      	ldr	r3, [pc, #32]	; (a18 <__libc_init_array+0x44>)
 9f6:	2500      	movs	r5, #0
 9f8:	001e      	movs	r6, r3
 9fa:	4c08      	ldr	r4, [pc, #32]	; (a1c <__libc_init_array+0x48>)
 9fc:	1ae4      	subs	r4, r4, r3
 9fe:	10a4      	asrs	r4, r4, #2
 a00:	42a5      	cmp	r5, r4
 a02:	d004      	beq.n	a0e <__libc_init_array+0x3a>
 a04:	00ab      	lsls	r3, r5, #2
 a06:	58f3      	ldr	r3, [r6, r3]
 a08:	4798      	blx	r3
 a0a:	3501      	adds	r5, #1
 a0c:	e7f8      	b.n	a00 <__libc_init_array+0x2c>
 a0e:	bd70      	pop	{r4, r5, r6, pc}
 a10:	00000a50 	.word	0x00000a50
 a14:	00000a50 	.word	0x00000a50
 a18:	00000a50 	.word	0x00000a50
 a1c:	00000a54 	.word	0x00000a54
 a20:	00000404 	.word	0x00000404
 a24:	000003e4 	.word	0x000003e4
 a28:	000003e4 	.word	0x000003e4
 a2c:	00000470 	.word	0x00000470
 a30:	000003f6 	.word	0x000003f6
 a34:	00000412 	.word	0x00000412
 a38:	000003e8 	.word	0x000003e8
 a3c:	00000420 	.word	0x00000420
 a40:	00000460 	.word	0x00000460

00000a44 <_init>:
 a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 a46:	46c0      	nop			; (mov r8, r8)
 a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 a4a:	bc08      	pop	{r3}
 a4c:	469e      	mov	lr, r3
 a4e:	4770      	bx	lr

00000a50 <__init_array_start>:
 a50:	000000dd 	.word	0x000000dd

00000a54 <_fini>:
 a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 a56:	46c0      	nop			; (mov r8, r8)
 a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 a5a:	bc08      	pop	{r3}
 a5c:	469e      	mov	lr, r3
 a5e:	4770      	bx	lr

00000a60 <__fini_array_start>:
 a60:	000000b5 	.word	0x000000b5
