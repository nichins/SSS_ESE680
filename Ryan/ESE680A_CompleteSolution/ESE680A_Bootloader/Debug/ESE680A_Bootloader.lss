
ESE680A_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004680  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00004680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c8  20000070  000046f0  00020070  2**2
                  ALLOC
  3 .stack        00002000  20000138  000047b8  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   00023ec6  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000308d  00000000  00000000  00043fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001fa7  00000000  00000000  00047044  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000660  00000000  00000000  00048feb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000540  00000000  00000000  0004964b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019d2e  00000000  00000000  00049b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bf54  00000000  00000000  000638b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00087952  00000000  00000000  0006f80d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001be4  00000000  00000000  000f7160  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 21 00 20 a5 27 00 00 9d 28 00 00 9d 28 00 00     8!. .'...(...(..
	...
      2c:	9d 28 00 00 00 00 00 00 00 00 00 00 9d 28 00 00     .(...........(..
      3c:	9d 28 00 00 9d 28 00 00 9d 28 00 00 9d 28 00 00     .(...(...(...(..
      4c:	9d 28 00 00 9d 28 00 00 9d 28 00 00 9d 28 00 00     .(...(...(...(..
      5c:	9d 28 00 00 9d 28 00 00 f5 0d 00 00 0d 0e 00 00     .(...(..........
      6c:	25 0e 00 00 3d 0e 00 00 55 0e 00 00 6d 0e 00 00     %...=...U...m...
      7c:	9d 28 00 00 9d 28 00 00 9d 28 00 00 9d 28 00 00     .(...(...(...(..
      8c:	9d 28 00 00 9d 28 00 00 00 00 00 00 00 00 00 00     .(...(..........
      9c:	9d 28 00 00 9d 28 00 00 9d 28 00 00 9d 28 00 00     .(...(...(...(..
      ac:	9d 28 00 00 00 00 00 00                             .(......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00004680 	.word	0x00004680

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00004680 	.word	0x00004680
     10c:	00004680 	.word	0x00004680
     110:	00000000 	.word	0x00000000

00000114 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     118:	46c0      	nop			; (mov r8, r8)
     11a:	46bd      	mov	sp, r7
     11c:	bd80      	pop	{r7, pc}
	...

00000120 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     120:	b580      	push	{r7, lr}
     122:	b082      	sub	sp, #8
     124:	af00      	add	r7, sp, #0
     126:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     128:	687b      	ldr	r3, [r7, #4]
     12a:	2b00      	cmp	r3, #0
     12c:	d00c      	beq.n	148 <delay_cycles+0x28>
		SysTick->LOAD = n;
     12e:	4b08      	ldr	r3, [pc, #32]	; (150 <delay_cycles+0x30>)
     130:	687a      	ldr	r2, [r7, #4]
     132:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     134:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_cycles+0x30>)
     136:	2200      	movs	r2, #0
     138:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	4b04      	ldr	r3, [pc, #16]	; (150 <delay_cycles+0x30>)
     13e:	681a      	ldr	r2, [r3, #0]
     140:	2380      	movs	r3, #128	; 0x80
     142:	025b      	lsls	r3, r3, #9
     144:	4013      	ands	r3, r2
     146:	d0f9      	beq.n	13c <delay_cycles+0x1c>
		};
	}
}
     148:	46c0      	nop			; (mov r8, r8)
     14a:	46bd      	mov	sp, r7
     14c:	b002      	add	sp, #8
     14e:	bd80      	pop	{r7, pc}
     150:	e000e010 	.word	0xe000e010

00000154 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     154:	b580      	push	{r7, lr}
     156:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     158:	2000      	movs	r0, #0
     15a:	4b0f      	ldr	r3, [pc, #60]	; (198 <delay_init+0x44>)
     15c:	4798      	blx	r3
     15e:	0002      	movs	r2, r0
     160:	4b0e      	ldr	r3, [pc, #56]	; (19c <delay_init+0x48>)
     162:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     164:	4b0d      	ldr	r3, [pc, #52]	; (19c <delay_init+0x48>)
     166:	6818      	ldr	r0, [r3, #0]
     168:	4b0d      	ldr	r3, [pc, #52]	; (1a0 <delay_init+0x4c>)
     16a:	22fa      	movs	r2, #250	; 0xfa
     16c:	0091      	lsls	r1, r2, #2
     16e:	4798      	blx	r3
     170:	0003      	movs	r3, r0
     172:	001a      	movs	r2, r3
     174:	4b09      	ldr	r3, [pc, #36]	; (19c <delay_init+0x48>)
     176:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     178:	4b08      	ldr	r3, [pc, #32]	; (19c <delay_init+0x48>)
     17a:	6818      	ldr	r0, [r3, #0]
     17c:	4b08      	ldr	r3, [pc, #32]	; (1a0 <delay_init+0x4c>)
     17e:	22fa      	movs	r2, #250	; 0xfa
     180:	0091      	lsls	r1, r2, #2
     182:	4798      	blx	r3
     184:	0003      	movs	r3, r0
     186:	001a      	movs	r2, r3
     188:	4b06      	ldr	r3, [pc, #24]	; (1a4 <delay_init+0x50>)
     18a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     18c:	4b06      	ldr	r3, [pc, #24]	; (1a8 <delay_init+0x54>)
     18e:	2205      	movs	r2, #5
     190:	601a      	str	r2, [r3, #0]
}
     192:	46c0      	nop			; (mov r8, r8)
     194:	46bd      	mov	sp, r7
     196:	bd80      	pop	{r7, pc}
     198:	00002359 	.word	0x00002359
     19c:	20000000 	.word	0x20000000
     1a0:	0000311d 	.word	0x0000311d
     1a4:	20000004 	.word	0x20000004
     1a8:	e000e010 	.word	0xe000e010

000001ac <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1ac:	b580      	push	{r7, lr}
     1ae:	b082      	sub	sp, #8
     1b0:	af00      	add	r7, sp, #0
     1b2:	6078      	str	r0, [r7, #4]
	while (n--) {
     1b4:	e004      	b.n	1c0 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1b6:	4b07      	ldr	r3, [pc, #28]	; (1d4 <delay_cycles_ms+0x28>)
     1b8:	681b      	ldr	r3, [r3, #0]
     1ba:	0018      	movs	r0, r3
     1bc:	4b06      	ldr	r3, [pc, #24]	; (1d8 <delay_cycles_ms+0x2c>)
     1be:	4798      	blx	r3
	while (n--) {
     1c0:	687b      	ldr	r3, [r7, #4]
     1c2:	1e5a      	subs	r2, r3, #1
     1c4:	607a      	str	r2, [r7, #4]
     1c6:	2b00      	cmp	r3, #0
     1c8:	d1f5      	bne.n	1b6 <delay_cycles_ms+0xa>
	}
}
     1ca:	46c0      	nop			; (mov r8, r8)
     1cc:	46bd      	mov	sp, r7
     1ce:	b002      	add	sp, #8
     1d0:	bd80      	pop	{r7, pc}
     1d2:	46c0      	nop			; (mov r8, r8)
     1d4:	20000000 	.word	0x20000000
     1d8:	00000121 	.word	0x00000121

000001dc <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     1dc:	b580      	push	{r7, lr}
     1de:	b082      	sub	sp, #8
     1e0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     1e2:	4b10      	ldr	r3, [pc, #64]	; (224 <cpu_irq_enter_critical+0x48>)
     1e4:	681b      	ldr	r3, [r3, #0]
     1e6:	2b00      	cmp	r3, #0
     1e8:	d112      	bne.n	210 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     1ea:	f3ef 8310 	mrs	r3, PRIMASK
     1ee:	607b      	str	r3, [r7, #4]
  return(result);
     1f0:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     1f2:	2b00      	cmp	r3, #0
     1f4:	d109      	bne.n	20a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
     1f6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1f8:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1fc:	4b0a      	ldr	r3, [pc, #40]	; (228 <cpu_irq_enter_critical+0x4c>)
     1fe:	2200      	movs	r2, #0
     200:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     202:	4b0a      	ldr	r3, [pc, #40]	; (22c <cpu_irq_enter_critical+0x50>)
     204:	2201      	movs	r2, #1
     206:	701a      	strb	r2, [r3, #0]
     208:	e002      	b.n	210 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     20a:	4b08      	ldr	r3, [pc, #32]	; (22c <cpu_irq_enter_critical+0x50>)
     20c:	2200      	movs	r2, #0
     20e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     210:	4b04      	ldr	r3, [pc, #16]	; (224 <cpu_irq_enter_critical+0x48>)
     212:	681b      	ldr	r3, [r3, #0]
     214:	1c5a      	adds	r2, r3, #1
     216:	4b03      	ldr	r3, [pc, #12]	; (224 <cpu_irq_enter_critical+0x48>)
     218:	601a      	str	r2, [r3, #0]
}
     21a:	46c0      	nop			; (mov r8, r8)
     21c:	46bd      	mov	sp, r7
     21e:	b002      	add	sp, #8
     220:	bd80      	pop	{r7, pc}
     222:	46c0      	nop			; (mov r8, r8)
     224:	2000008c 	.word	0x2000008c
     228:	20000008 	.word	0x20000008
     22c:	20000090 	.word	0x20000090

00000230 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     230:	b580      	push	{r7, lr}
     232:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     234:	4b0b      	ldr	r3, [pc, #44]	; (264 <cpu_irq_leave_critical+0x34>)
     236:	681b      	ldr	r3, [r3, #0]
     238:	1e5a      	subs	r2, r3, #1
     23a:	4b0a      	ldr	r3, [pc, #40]	; (264 <cpu_irq_leave_critical+0x34>)
     23c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     23e:	4b09      	ldr	r3, [pc, #36]	; (264 <cpu_irq_leave_critical+0x34>)
     240:	681b      	ldr	r3, [r3, #0]
     242:	2b00      	cmp	r3, #0
     244:	d10a      	bne.n	25c <cpu_irq_leave_critical+0x2c>
     246:	4b08      	ldr	r3, [pc, #32]	; (268 <cpu_irq_leave_critical+0x38>)
     248:	781b      	ldrb	r3, [r3, #0]
     24a:	b2db      	uxtb	r3, r3
     24c:	2b00      	cmp	r3, #0
     24e:	d005      	beq.n	25c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     250:	4b06      	ldr	r3, [pc, #24]	; (26c <cpu_irq_leave_critical+0x3c>)
     252:	2201      	movs	r2, #1
     254:	701a      	strb	r2, [r3, #0]
     256:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     25a:	b662      	cpsie	i
	}
}
     25c:	46c0      	nop			; (mov r8, r8)
     25e:	46bd      	mov	sp, r7
     260:	bd80      	pop	{r7, pc}
     262:	46c0      	nop			; (mov r8, r8)
     264:	2000008c 	.word	0x2000008c
     268:	20000090 	.word	0x20000090
     26c:	20000008 	.word	0x20000008

00000270 <nvm_is_ready>:
	error_code = nvm_execute_command(NVM_COMMAND_ERASE_AUX_ROW,NVMCTRL_AUX0_ADDRESS,0);
	if (error_code != STATUS_OK) {
		return error_code;
	}

	error_code = nvm_execute_command(NVM_COMMAND_PAGE_BUFFER_CLEAR,NVMCTRL_AUX0_ADDRESS,0);
     270:	b580      	push	{r7, lr}
     272:	b082      	sub	sp, #8
     274:	af00      	add	r7, sp, #0
     276:	4b07      	ldr	r3, [pc, #28]	; (294 <nvm_is_ready+0x24>)
     278:	607b      	str	r3, [r7, #4]
     27a:	687b      	ldr	r3, [r7, #4]
     27c:	7d1b      	ldrb	r3, [r3, #20]
	if (error_code != STATUS_OK) {
     27e:	b2db      	uxtb	r3, r3
     280:	001a      	movs	r2, r3
     282:	2301      	movs	r3, #1
     284:	4013      	ands	r3, r2
     286:	1e5a      	subs	r2, r3, #1
		return error_code;
     288:	4193      	sbcs	r3, r2
     28a:	b2db      	uxtb	r3, r3
     28c:	0018      	movs	r0, r3
     28e:	46bd      	mov	sp, r7
	}

	*((uint32_t *)NVMCTRL_AUX0_ADDRESS) = fusebits[0];
     290:	b002      	add	sp, #8
     292:	bd80      	pop	{r7, pc}
     294:	41004000 	.word	0x41004000

00000298 <system_apb_clock_set_mask>:
     298:	b580      	push	{r7, lr}
    *(((uint32_t *)NVMCTRL_AUX0_ADDRESS) + 1) = fusebits[1];
     29a:	b082      	sub	sp, #8
     29c:	af00      	add	r7, sp, #0
     29e:	0002      	movs	r2, r0
     2a0:	6039      	str	r1, [r7, #0]
     2a2:	1dfb      	adds	r3, r7, #7

	error_code = nvm_execute_command(NVM_COMMAND_WRITE_AUX_ROW,NVMCTRL_AUX0_ADDRESS,0);
     2a4:	701a      	strb	r2, [r3, #0]
     2a6:	1dfb      	adds	r3, r7, #7
     2a8:	781b      	ldrb	r3, [r3, #0]
     2aa:	2b01      	cmp	r3, #1
     2ac:	d00a      	beq.n	2c4 <system_apb_clock_set_mask+0x2c>
     2ae:	2b02      	cmp	r3, #2
     2b0:	d00f      	beq.n	2d2 <system_apb_clock_set_mask+0x3a>
     2b2:	2b00      	cmp	r3, #0
     2b4:	d114      	bne.n	2e0 <system_apb_clock_set_mask+0x48>
     2b6:	4b0e      	ldr	r3, [pc, #56]	; (2f0 <system_apb_clock_set_mask+0x58>)
	if (error_code != STATUS_OK) {
     2b8:	4a0d      	ldr	r2, [pc, #52]	; (2f0 <system_apb_clock_set_mask+0x58>)
     2ba:	6991      	ldr	r1, [r2, #24]
     2bc:	683a      	ldr	r2, [r7, #0]
     2be:	430a      	orrs	r2, r1
     2c0:	619a      	str	r2, [r3, #24]
		return error_code;
     2c2:	e00f      	b.n	2e4 <system_apb_clock_set_mask+0x4c>
     2c4:	4b0a      	ldr	r3, [pc, #40]	; (2f0 <system_apb_clock_set_mask+0x58>)
     2c6:	4a0a      	ldr	r2, [pc, #40]	; (2f0 <system_apb_clock_set_mask+0x58>)
     2c8:	69d1      	ldr	r1, [r2, #28]
	}

	return error_code;
     2ca:	683a      	ldr	r2, [r7, #0]
     2cc:	430a      	orrs	r2, r1
     2ce:	61da      	str	r2, [r3, #28]
}
     2d0:	e008      	b.n	2e4 <system_apb_clock_set_mask+0x4c>
     2d2:	4b07      	ldr	r3, [pc, #28]	; (2f0 <system_apb_clock_set_mask+0x58>)
     2d4:	4a06      	ldr	r2, [pc, #24]	; (2f0 <system_apb_clock_set_mask+0x58>)
     2d6:	6a11      	ldr	r1, [r2, #32]
     2d8:	683a      	ldr	r2, [r7, #0]
     2da:	430a      	orrs	r2, r1
     2dc:	621a      	str	r2, [r3, #32]
     2de:	e001      	b.n	2e4 <system_apb_clock_set_mask+0x4c>
     2e0:	2317      	movs	r3, #23
     2e2:	e000      	b.n	2e6 <system_apb_clock_set_mask+0x4e>
     2e4:	2300      	movs	r3, #0
     2e6:	0018      	movs	r0, r3
     2e8:	46bd      	mov	sp, r7
     2ea:	b002      	add	sp, #8
     2ec:	bd80      	pop	{r7, pc}
     2ee:	46c0      	nop			; (mov r8, r8)
     2f0:	40000400 	.word	0x40000400

000002f4 <nvm_set_config>:
     2f4:	b580      	push	{r7, lr}
     2f6:	b084      	sub	sp, #16
     2f8:	af00      	add	r7, sp, #0
     2fa:	6078      	str	r0, [r7, #4]
     2fc:	4b31      	ldr	r3, [pc, #196]	; (3c4 <nvm_set_config+0xd0>)
     2fe:	60fb      	str	r3, [r7, #12]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
     300:	2104      	movs	r1, #4
     302:	2001      	movs	r0, #1
     304:	4b30      	ldr	r3, [pc, #192]	; (3c8 <nvm_set_config+0xd4>)
     306:	4798      	blx	r3
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
     308:	68fb      	ldr	r3, [r7, #12]
     30a:	8b1b      	ldrh	r3, [r3, #24]
     30c:	b29b      	uxth	r3, r3
     30e:	2220      	movs	r2, #32
     310:	32ff      	adds	r2, #255	; 0xff
     312:	4313      	orrs	r3, r2
     314:	b29a      	uxth	r2, r3
     316:	68fb      	ldr	r3, [r7, #12]
     318:	831a      	strh	r2, [r3, #24]
	if (!nvm_is_ready()) {
     31a:	4b2c      	ldr	r3, [pc, #176]	; (3cc <nvm_set_config+0xd8>)
     31c:	4798      	blx	r3
     31e:	0003      	movs	r3, r0
     320:	001a      	movs	r2, r3
     322:	2301      	movs	r3, #1
     324:	4053      	eors	r3, r2
     326:	b2db      	uxtb	r3, r3
     328:	2b00      	cmp	r3, #0
     32a:	d001      	beq.n	330 <nvm_set_config+0x3c>
		return STATUS_BUSY;
     32c:	2305      	movs	r3, #5
     32e:	e045      	b.n	3bc <nvm_set_config+0xc8>
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     330:	687b      	ldr	r3, [r7, #4]
     332:	781b      	ldrb	r3, [r3, #0]
     334:	021b      	lsls	r3, r3, #8
     336:	001a      	movs	r2, r3
     338:	23c0      	movs	r3, #192	; 0xc0
     33a:	009b      	lsls	r3, r3, #2
     33c:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     33e:	687b      	ldr	r3, [r7, #4]
     340:	785b      	ldrb	r3, [r3, #1]
     342:	01db      	lsls	r3, r3, #7
     344:	0019      	movs	r1, r3
     346:	23ff      	movs	r3, #255	; 0xff
     348:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     34a:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     34c:	687b      	ldr	r3, [r7, #4]
     34e:	789b      	ldrb	r3, [r3, #2]
     350:	005b      	lsls	r3, r3, #1
     352:	0019      	movs	r1, r3
     354:	231e      	movs	r3, #30
     356:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     358:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     35a:	687b      	ldr	r3, [r7, #4]
     35c:	78db      	ldrb	r3, [r3, #3]
     35e:	049b      	lsls	r3, r3, #18
     360:	0019      	movs	r1, r3
     362:	2380      	movs	r3, #128	; 0x80
     364:	02db      	lsls	r3, r3, #11
     366:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     368:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     36a:	687b      	ldr	r3, [r7, #4]
     36c:	791b      	ldrb	r3, [r3, #4]
     36e:	041b      	lsls	r3, r3, #16
     370:	0019      	movs	r1, r3
     372:	23c0      	movs	r3, #192	; 0xc0
     374:	029b      	lsls	r3, r3, #10
     376:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     378:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
     37a:	68fb      	ldr	r3, [r7, #12]
     37c:	605a      	str	r2, [r3, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     37e:	68fb      	ldr	r3, [r7, #12]
     380:	689b      	ldr	r3, [r3, #8]
     382:	035b      	lsls	r3, r3, #13
     384:	0f5b      	lsrs	r3, r3, #29
     386:	b2db      	uxtb	r3, r3
     388:	001a      	movs	r2, r3
     38a:	2308      	movs	r3, #8
     38c:	4093      	lsls	r3, r2
     38e:	b29a      	uxth	r2, r3
     390:	4b0f      	ldr	r3, [pc, #60]	; (3d0 <nvm_set_config+0xdc>)
     392:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     394:	68fb      	ldr	r3, [r7, #12]
     396:	689b      	ldr	r3, [r3, #8]
     398:	b29a      	uxth	r2, r3
     39a:	4b0d      	ldr	r3, [pc, #52]	; (3d0 <nvm_set_config+0xdc>)
     39c:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     39e:	687b      	ldr	r3, [r7, #4]
     3a0:	785a      	ldrb	r2, [r3, #1]
     3a2:	4b0b      	ldr	r3, [pc, #44]	; (3d0 <nvm_set_config+0xdc>)
     3a4:	711a      	strb	r2, [r3, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     3a6:	68fb      	ldr	r3, [r7, #12]
     3a8:	8b1b      	ldrh	r3, [r3, #24]
     3aa:	b29b      	uxth	r3, r3
     3ac:	001a      	movs	r2, r3
     3ae:	2380      	movs	r3, #128	; 0x80
     3b0:	005b      	lsls	r3, r3, #1
     3b2:	4013      	ands	r3, r2
     3b4:	d001      	beq.n	3ba <nvm_set_config+0xc6>
		return STATUS_ERR_IO;
     3b6:	2310      	movs	r3, #16
     3b8:	e000      	b.n	3bc <nvm_set_config+0xc8>
	return STATUS_OK;
     3ba:	2300      	movs	r3, #0
}
     3bc:	0018      	movs	r0, r3
     3be:	46bd      	mov	sp, r7
     3c0:	b004      	add	sp, #16
     3c2:	bd80      	pop	{r7, pc}
     3c4:	41004000 	.word	0x41004000
     3c8:	00000299 	.word	0x00000299
     3cc:	00000271 	.word	0x00000271
     3d0:	20000094 	.word	0x20000094

000003d4 <nvm_execute_command>:
{
     3d4:	b580      	push	{r7, lr}
     3d6:	b086      	sub	sp, #24
     3d8:	af00      	add	r7, sp, #0
     3da:	60b9      	str	r1, [r7, #8]
     3dc:	607a      	str	r2, [r7, #4]
     3de:	230f      	movs	r3, #15
     3e0:	18fb      	adds	r3, r7, r3
     3e2:	1c02      	adds	r2, r0, #0
     3e4:	701a      	strb	r2, [r3, #0]
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     3e6:	4b38      	ldr	r3, [pc, #224]	; (4c8 <nvm_execute_command+0xf4>)
     3e8:	881b      	ldrh	r3, [r3, #0]
     3ea:	001a      	movs	r2, r3
     3ec:	4b36      	ldr	r3, [pc, #216]	; (4c8 <nvm_execute_command+0xf4>)
     3ee:	885b      	ldrh	r3, [r3, #2]
     3f0:	435a      	muls	r2, r3
     3f2:	68bb      	ldr	r3, [r7, #8]
     3f4:	429a      	cmp	r2, r3
     3f6:	d209      	bcs.n	40c <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     3f8:	68bb      	ldr	r3, [r7, #8]
     3fa:	4a34      	ldr	r2, [pc, #208]	; (4cc <nvm_execute_command+0xf8>)
     3fc:	4293      	cmp	r3, r2
     3fe:	d903      	bls.n	408 <nvm_execute_command+0x34>
     400:	68bb      	ldr	r3, [r7, #8]
     402:	4a33      	ldr	r2, [pc, #204]	; (4d0 <nvm_execute_command+0xfc>)
     404:	4293      	cmp	r3, r2
     406:	d901      	bls.n	40c <nvm_execute_command+0x38>
		return STATUS_ERR_BAD_ADDRESS;
     408:	2318      	movs	r3, #24
     40a:	e058      	b.n	4be <nvm_execute_command+0xea>
	Nvmctrl *const nvm_module = NVMCTRL;
     40c:	4b31      	ldr	r3, [pc, #196]	; (4d4 <nvm_execute_command+0x100>)
     40e:	617b      	str	r3, [r7, #20]
	temp = nvm_module->CTRLB.reg;
     410:	697b      	ldr	r3, [r7, #20]
     412:	685b      	ldr	r3, [r3, #4]
     414:	613b      	str	r3, [r7, #16]
	nvm_module->CTRLB.reg = temp | NVMCTRL_CTRLB_CACHEDIS;
     416:	693b      	ldr	r3, [r7, #16]
     418:	2280      	movs	r2, #128	; 0x80
     41a:	02d2      	lsls	r2, r2, #11
     41c:	431a      	orrs	r2, r3
     41e:	697b      	ldr	r3, [r7, #20]
     420:	605a      	str	r2, [r3, #4]
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
     422:	697b      	ldr	r3, [r7, #20]
     424:	8b1b      	ldrh	r3, [r3, #24]
     426:	b29b      	uxth	r3, r3
     428:	2220      	movs	r2, #32
     42a:	32ff      	adds	r2, #255	; 0xff
     42c:	4313      	orrs	r3, r2
     42e:	b29a      	uxth	r2, r3
     430:	697b      	ldr	r3, [r7, #20]
     432:	831a      	strh	r2, [r3, #24]
	if (!nvm_is_ready()) {
     434:	4b28      	ldr	r3, [pc, #160]	; (4d8 <nvm_execute_command+0x104>)
     436:	4798      	blx	r3
     438:	0003      	movs	r3, r0
     43a:	001a      	movs	r2, r3
     43c:	2301      	movs	r3, #1
     43e:	4053      	eors	r3, r2
     440:	b2db      	uxtb	r3, r3
     442:	2b00      	cmp	r3, #0
     444:	d001      	beq.n	44a <nvm_execute_command+0x76>
		return STATUS_BUSY;
     446:	2305      	movs	r3, #5
     448:	e039      	b.n	4be <nvm_execute_command+0xea>
	switch (command) {
     44a:	230f      	movs	r3, #15
     44c:	18fb      	adds	r3, r7, r3
     44e:	781b      	ldrb	r3, [r3, #0]
     450:	2b45      	cmp	r3, #69	; 0x45
     452:	d81a      	bhi.n	48a <nvm_execute_command+0xb6>
     454:	009a      	lsls	r2, r3, #2
     456:	4b21      	ldr	r3, [pc, #132]	; (4dc <nvm_execute_command+0x108>)
     458:	18d3      	adds	r3, r2, r3
     45a:	681b      	ldr	r3, [r3, #0]
     45c:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     45e:	697b      	ldr	r3, [r7, #20]
     460:	8b1b      	ldrh	r3, [r3, #24]
     462:	b29b      	uxth	r3, r3
     464:	001a      	movs	r2, r3
     466:	2380      	movs	r3, #128	; 0x80
     468:	005b      	lsls	r3, r3, #1
     46a:	4013      	ands	r3, r2
     46c:	d001      	beq.n	472 <nvm_execute_command+0x9e>
				return STATUS_ERR_IO;
     46e:	2310      	movs	r3, #16
     470:	e025      	b.n	4be <nvm_execute_command+0xea>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     472:	68bb      	ldr	r3, [r7, #8]
     474:	089b      	lsrs	r3, r3, #2
     476:	005a      	lsls	r2, r3, #1
     478:	697b      	ldr	r3, [r7, #20]
     47a:	61da      	str	r2, [r3, #28]
			break;
     47c:	e008      	b.n	490 <nvm_execute_command+0xbc>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     47e:	68bb      	ldr	r3, [r7, #8]
     480:	089b      	lsrs	r3, r3, #2
     482:	005a      	lsls	r2, r3, #1
     484:	697b      	ldr	r3, [r7, #20]
     486:	61da      	str	r2, [r3, #28]
			break;
     488:	e002      	b.n	490 <nvm_execute_command+0xbc>
			return STATUS_ERR_INVALID_ARG;
     48a:	2317      	movs	r3, #23
     48c:	e017      	b.n	4be <nvm_execute_command+0xea>
			break;
     48e:	46c0      	nop			; (mov r8, r8)
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     490:	230f      	movs	r3, #15
     492:	18fb      	adds	r3, r7, r3
     494:	781b      	ldrb	r3, [r3, #0]
     496:	b29b      	uxth	r3, r3
     498:	4a11      	ldr	r2, [pc, #68]	; (4e0 <nvm_execute_command+0x10c>)
     49a:	4313      	orrs	r3, r2
     49c:	b29a      	uxth	r2, r3
     49e:	697b      	ldr	r3, [r7, #20]
     4a0:	801a      	strh	r2, [r3, #0]
	while (!nvm_is_ready()) {
     4a2:	46c0      	nop			; (mov r8, r8)
     4a4:	4b0c      	ldr	r3, [pc, #48]	; (4d8 <nvm_execute_command+0x104>)
     4a6:	4798      	blx	r3
     4a8:	0003      	movs	r3, r0
     4aa:	001a      	movs	r2, r3
     4ac:	2301      	movs	r3, #1
     4ae:	4053      	eors	r3, r2
     4b0:	b2db      	uxtb	r3, r3
     4b2:	2b00      	cmp	r3, #0
     4b4:	d1f6      	bne.n	4a4 <nvm_execute_command+0xd0>
	nvm_module->CTRLB.reg = temp;
     4b6:	697b      	ldr	r3, [r7, #20]
     4b8:	693a      	ldr	r2, [r7, #16]
     4ba:	605a      	str	r2, [r3, #4]
	return STATUS_OK;
     4bc:	2300      	movs	r3, #0
}
     4be:	0018      	movs	r0, r3
     4c0:	46bd      	mov	sp, r7
     4c2:	b006      	add	sp, #24
     4c4:	bd80      	pop	{r7, pc}
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	20000094 	.word	0x20000094
     4cc:	00803fff 	.word	0x00803fff
     4d0:	00806000 	.word	0x00806000
     4d4:	41004000 	.word	0x41004000
     4d8:	00000271 	.word	0x00000271
     4dc:	000043a0 	.word	0x000043a0
     4e0:	ffffa500 	.word	0xffffa500

000004e4 <nvm_write_buffer>:
{
     4e4:	b580      	push	{r7, lr}
     4e6:	b088      	sub	sp, #32
     4e8:	af00      	add	r7, sp, #0
     4ea:	60f8      	str	r0, [r7, #12]
     4ec:	60b9      	str	r1, [r7, #8]
     4ee:	1dbb      	adds	r3, r7, #6
     4f0:	801a      	strh	r2, [r3, #0]
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     4f2:	4b4c      	ldr	r3, [pc, #304]	; (624 <nvm_write_buffer+0x140>)
     4f4:	881b      	ldrh	r3, [r3, #0]
     4f6:	001a      	movs	r2, r3
     4f8:	4b4a      	ldr	r3, [pc, #296]	; (624 <nvm_write_buffer+0x140>)
     4fa:	885b      	ldrh	r3, [r3, #2]
     4fc:	435a      	muls	r2, r3
	if (destination_address >
     4fe:	68fb      	ldr	r3, [r7, #12]
     500:	429a      	cmp	r2, r3
     502:	d201      	bcs.n	508 <nvm_write_buffer+0x24>
		return STATUS_ERR_BAD_ADDRESS;
     504:	2318      	movs	r3, #24
     506:	e089      	b.n	61c <nvm_write_buffer+0x138>
	if (destination_address & (_nvm_dev.page_size - 1)) {
     508:	4b46      	ldr	r3, [pc, #280]	; (624 <nvm_write_buffer+0x140>)
     50a:	881b      	ldrh	r3, [r3, #0]
     50c:	3b01      	subs	r3, #1
     50e:	001a      	movs	r2, r3
     510:	68fb      	ldr	r3, [r7, #12]
     512:	4013      	ands	r3, r2
     514:	d001      	beq.n	51a <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
     516:	2318      	movs	r3, #24
     518:	e080      	b.n	61c <nvm_write_buffer+0x138>
	if (length > _nvm_dev.page_size) {
     51a:	4b42      	ldr	r3, [pc, #264]	; (624 <nvm_write_buffer+0x140>)
     51c:	881b      	ldrh	r3, [r3, #0]
     51e:	1dba      	adds	r2, r7, #6
     520:	8812      	ldrh	r2, [r2, #0]
     522:	429a      	cmp	r2, r3
     524:	d901      	bls.n	52a <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
     526:	2317      	movs	r3, #23
     528:	e078      	b.n	61c <nvm_write_buffer+0x138>
	Nvmctrl *const nvm_module = NVMCTRL;
     52a:	4b3f      	ldr	r3, [pc, #252]	; (628 <nvm_write_buffer+0x144>)
     52c:	617b      	str	r3, [r7, #20]
	if (!nvm_is_ready()) {
     52e:	4b3f      	ldr	r3, [pc, #252]	; (62c <nvm_write_buffer+0x148>)
     530:	4798      	blx	r3
     532:	0003      	movs	r3, r0
     534:	001a      	movs	r2, r3
     536:	2301      	movs	r3, #1
     538:	4053      	eors	r3, r2
     53a:	b2db      	uxtb	r3, r3
     53c:	2b00      	cmp	r3, #0
     53e:	d001      	beq.n	544 <nvm_write_buffer+0x60>
		return STATUS_BUSY;
     540:	2305      	movs	r3, #5
     542:	e06b      	b.n	61c <nvm_write_buffer+0x138>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     544:	697b      	ldr	r3, [r7, #20]
     546:	4a3a      	ldr	r2, [pc, #232]	; (630 <nvm_write_buffer+0x14c>)
     548:	801a      	strh	r2, [r3, #0]
	while (!nvm_is_ready()) {
     54a:	46c0      	nop			; (mov r8, r8)
     54c:	4b37      	ldr	r3, [pc, #220]	; (62c <nvm_write_buffer+0x148>)
     54e:	4798      	blx	r3
     550:	0003      	movs	r3, r0
     552:	001a      	movs	r2, r3
     554:	2301      	movs	r3, #1
     556:	4053      	eors	r3, r2
     558:	b2db      	uxtb	r3, r3
     55a:	2b00      	cmp	r3, #0
     55c:	d1f6      	bne.n	54c <nvm_write_buffer+0x68>
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
     55e:	697b      	ldr	r3, [r7, #20]
     560:	8b1b      	ldrh	r3, [r3, #24]
     562:	b29b      	uxth	r3, r3
     564:	2220      	movs	r2, #32
     566:	32ff      	adds	r2, #255	; 0xff
     568:	4313      	orrs	r3, r2
     56a:	b29a      	uxth	r2, r3
     56c:	697b      	ldr	r3, [r7, #20]
     56e:	831a      	strh	r2, [r3, #24]
	uint32_t nvm_address = destination_address / 2;
     570:	68fb      	ldr	r3, [r7, #12]
     572:	085b      	lsrs	r3, r3, #1
     574:	61fb      	str	r3, [r7, #28]
	for (uint16_t i = 0; i < length; i += 2) {
     576:	231a      	movs	r3, #26
     578:	18fb      	adds	r3, r7, r3
     57a:	2200      	movs	r2, #0
     57c:	801a      	strh	r2, [r3, #0]
     57e:	e032      	b.n	5e6 <nvm_write_buffer+0x102>
		data = buffer[i];
     580:	231a      	movs	r3, #26
     582:	18fb      	adds	r3, r7, r3
     584:	881b      	ldrh	r3, [r3, #0]
     586:	68ba      	ldr	r2, [r7, #8]
     588:	18d3      	adds	r3, r2, r3
     58a:	781a      	ldrb	r2, [r3, #0]
     58c:	2318      	movs	r3, #24
     58e:	18fb      	adds	r3, r7, r3
     590:	801a      	strh	r2, [r3, #0]
		if (i < (length - 1)) {
     592:	231a      	movs	r3, #26
     594:	18fb      	adds	r3, r7, r3
     596:	881a      	ldrh	r2, [r3, #0]
     598:	1dbb      	adds	r3, r7, #6
     59a:	881b      	ldrh	r3, [r3, #0]
     59c:	3b01      	subs	r3, #1
     59e:	429a      	cmp	r2, r3
     5a0:	da11      	bge.n	5c6 <nvm_write_buffer+0xe2>
			data |= (buffer[i + 1] << 8);
     5a2:	231a      	movs	r3, #26
     5a4:	18fb      	adds	r3, r7, r3
     5a6:	881b      	ldrh	r3, [r3, #0]
     5a8:	3301      	adds	r3, #1
     5aa:	68ba      	ldr	r2, [r7, #8]
     5ac:	18d3      	adds	r3, r2, r3
     5ae:	781b      	ldrb	r3, [r3, #0]
     5b0:	021b      	lsls	r3, r3, #8
     5b2:	b21a      	sxth	r2, r3
     5b4:	2318      	movs	r3, #24
     5b6:	18fb      	adds	r3, r7, r3
     5b8:	2100      	movs	r1, #0
     5ba:	5e5b      	ldrsh	r3, [r3, r1]
     5bc:	4313      	orrs	r3, r2
     5be:	b21a      	sxth	r2, r3
     5c0:	2318      	movs	r3, #24
     5c2:	18fb      	adds	r3, r7, r3
     5c4:	801a      	strh	r2, [r3, #0]
		NVM_MEMORY[nvm_address++] = data;
     5c6:	69fb      	ldr	r3, [r7, #28]
     5c8:	1c5a      	adds	r2, r3, #1
     5ca:	61fa      	str	r2, [r7, #28]
     5cc:	005b      	lsls	r3, r3, #1
     5ce:	001a      	movs	r2, r3
     5d0:	2318      	movs	r3, #24
     5d2:	18fb      	adds	r3, r7, r3
     5d4:	881b      	ldrh	r3, [r3, #0]
     5d6:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     5d8:	231a      	movs	r3, #26
     5da:	18fb      	adds	r3, r7, r3
     5dc:	221a      	movs	r2, #26
     5de:	18ba      	adds	r2, r7, r2
     5e0:	8812      	ldrh	r2, [r2, #0]
     5e2:	3202      	adds	r2, #2
     5e4:	801a      	strh	r2, [r3, #0]
     5e6:	231a      	movs	r3, #26
     5e8:	18fa      	adds	r2, r7, r3
     5ea:	1dbb      	adds	r3, r7, #6
     5ec:	8812      	ldrh	r2, [r2, #0]
     5ee:	881b      	ldrh	r3, [r3, #0]
     5f0:	429a      	cmp	r2, r3
     5f2:	d3c5      	bcc.n	580 <nvm_write_buffer+0x9c>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     5f4:	4b0b      	ldr	r3, [pc, #44]	; (624 <nvm_write_buffer+0x140>)
     5f6:	791b      	ldrb	r3, [r3, #4]
     5f8:	2201      	movs	r2, #1
     5fa:	4053      	eors	r3, r2
     5fc:	b2db      	uxtb	r3, r3
     5fe:	2b00      	cmp	r3, #0
     600:	d00b      	beq.n	61a <nvm_write_buffer+0x136>
     602:	1dbb      	adds	r3, r7, #6
     604:	881b      	ldrh	r3, [r3, #0]
     606:	2b3f      	cmp	r3, #63	; 0x3f
     608:	d807      	bhi.n	61a <nvm_write_buffer+0x136>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
     60a:	68fb      	ldr	r3, [r7, #12]
     60c:	2200      	movs	r2, #0
     60e:	0019      	movs	r1, r3
     610:	2004      	movs	r0, #4
     612:	4b08      	ldr	r3, [pc, #32]	; (634 <nvm_write_buffer+0x150>)
     614:	4798      	blx	r3
     616:	0003      	movs	r3, r0
     618:	e000      	b.n	61c <nvm_write_buffer+0x138>
	return STATUS_OK;
     61a:	2300      	movs	r3, #0
}
     61c:	0018      	movs	r0, r3
     61e:	46bd      	mov	sp, r7
     620:	b008      	add	sp, #32
     622:	bd80      	pop	{r7, pc}
     624:	20000094 	.word	0x20000094
     628:	41004000 	.word	0x41004000
     62c:	00000271 	.word	0x00000271
     630:	ffffa544 	.word	0xffffa544
     634:	000003d5 	.word	0x000003d5

00000638 <nvm_erase_row>:
{
     638:	b580      	push	{r7, lr}
     63a:	b084      	sub	sp, #16
     63c:	af00      	add	r7, sp, #0
     63e:	6078      	str	r0, [r7, #4]
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     640:	4b20      	ldr	r3, [pc, #128]	; (6c4 <nvm_erase_row+0x8c>)
     642:	881b      	ldrh	r3, [r3, #0]
     644:	001a      	movs	r2, r3
     646:	4b1f      	ldr	r3, [pc, #124]	; (6c4 <nvm_erase_row+0x8c>)
     648:	885b      	ldrh	r3, [r3, #2]
     64a:	435a      	muls	r2, r3
	if (row_address >
     64c:	687b      	ldr	r3, [r7, #4]
     64e:	429a      	cmp	r2, r3
     650:	d201      	bcs.n	656 <nvm_erase_row+0x1e>
		return STATUS_ERR_BAD_ADDRESS;
     652:	2318      	movs	r3, #24
     654:	e032      	b.n	6bc <nvm_erase_row+0x84>
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     656:	4b1b      	ldr	r3, [pc, #108]	; (6c4 <nvm_erase_row+0x8c>)
     658:	881b      	ldrh	r3, [r3, #0]
     65a:	009b      	lsls	r3, r3, #2
     65c:	3b01      	subs	r3, #1
     65e:	001a      	movs	r2, r3
     660:	687b      	ldr	r3, [r7, #4]
     662:	4013      	ands	r3, r2
     664:	d001      	beq.n	66a <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
     666:	2318      	movs	r3, #24
     668:	e028      	b.n	6bc <nvm_erase_row+0x84>
	Nvmctrl *const nvm_module = NVMCTRL;
     66a:	4b17      	ldr	r3, [pc, #92]	; (6c8 <nvm_erase_row+0x90>)
     66c:	60fb      	str	r3, [r7, #12]
	if (!nvm_is_ready()) {
     66e:	4b17      	ldr	r3, [pc, #92]	; (6cc <nvm_erase_row+0x94>)
     670:	4798      	blx	r3
     672:	0003      	movs	r3, r0
     674:	001a      	movs	r2, r3
     676:	2301      	movs	r3, #1
     678:	4053      	eors	r3, r2
     67a:	b2db      	uxtb	r3, r3
     67c:	2b00      	cmp	r3, #0
     67e:	d001      	beq.n	684 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
     680:	2305      	movs	r3, #5
     682:	e01b      	b.n	6bc <nvm_erase_row+0x84>
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
     684:	68fb      	ldr	r3, [r7, #12]
     686:	8b1b      	ldrh	r3, [r3, #24]
     688:	b29b      	uxth	r3, r3
     68a:	2220      	movs	r2, #32
     68c:	32ff      	adds	r2, #255	; 0xff
     68e:	4313      	orrs	r3, r2
     690:	b29a      	uxth	r2, r3
     692:	68fb      	ldr	r3, [r7, #12]
     694:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     696:	687b      	ldr	r3, [r7, #4]
     698:	089b      	lsrs	r3, r3, #2
     69a:	005a      	lsls	r2, r3, #1
     69c:	68fb      	ldr	r3, [r7, #12]
     69e:	61da      	str	r2, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     6a0:	68fb      	ldr	r3, [r7, #12]
     6a2:	4a0b      	ldr	r2, [pc, #44]	; (6d0 <nvm_erase_row+0x98>)
     6a4:	801a      	strh	r2, [r3, #0]
	while (!nvm_is_ready()) {
     6a6:	46c0      	nop			; (mov r8, r8)
     6a8:	4b08      	ldr	r3, [pc, #32]	; (6cc <nvm_erase_row+0x94>)
     6aa:	4798      	blx	r3
     6ac:	0003      	movs	r3, r0
     6ae:	001a      	movs	r2, r3
     6b0:	2301      	movs	r3, #1
     6b2:	4053      	eors	r3, r2
     6b4:	b2db      	uxtb	r3, r3
     6b6:	2b00      	cmp	r3, #0
     6b8:	d1f6      	bne.n	6a8 <nvm_erase_row+0x70>
	return STATUS_OK;
     6ba:	2300      	movs	r3, #0
}
     6bc:	0018      	movs	r0, r3
     6be:	46bd      	mov	sp, r7
     6c0:	b004      	add	sp, #16
     6c2:	bd80      	pop	{r7, pc}
     6c4:	20000094 	.word	0x20000094
     6c8:	41004000 	.word	0x41004000
     6cc:	00000271 	.word	0x00000271
     6d0:	ffffa502 	.word	0xffffa502

000006d4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     6d4:	b580      	push	{r7, lr}
     6d6:	b082      	sub	sp, #8
     6d8:	af00      	add	r7, sp, #0
     6da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     6dc:	687b      	ldr	r3, [r7, #4]
     6de:	2280      	movs	r2, #128	; 0x80
     6e0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     6e2:	687b      	ldr	r3, [r7, #4]
     6e4:	2200      	movs	r2, #0
     6e6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     6e8:	687b      	ldr	r3, [r7, #4]
     6ea:	2201      	movs	r2, #1
     6ec:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     6ee:	687b      	ldr	r3, [r7, #4]
     6f0:	2200      	movs	r2, #0
     6f2:	70da      	strb	r2, [r3, #3]
}
     6f4:	46c0      	nop			; (mov r8, r8)
     6f6:	46bd      	mov	sp, r7
     6f8:	b002      	add	sp, #8
     6fa:	bd80      	pop	{r7, pc}

000006fc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     6fc:	b580      	push	{r7, lr}
     6fe:	b084      	sub	sp, #16
     700:	af00      	add	r7, sp, #0
     702:	0002      	movs	r2, r0
     704:	6039      	str	r1, [r7, #0]
     706:	1dfb      	adds	r3, r7, #7
     708:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     70a:	230c      	movs	r3, #12
     70c:	18fb      	adds	r3, r7, r3
     70e:	0018      	movs	r0, r3
     710:	4b10      	ldr	r3, [pc, #64]	; (754 <port_pin_set_config+0x58>)
     712:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     714:	230c      	movs	r3, #12
     716:	18fb      	adds	r3, r7, r3
     718:	2280      	movs	r2, #128	; 0x80
     71a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     71c:	683b      	ldr	r3, [r7, #0]
     71e:	781a      	ldrb	r2, [r3, #0]
     720:	230c      	movs	r3, #12
     722:	18fb      	adds	r3, r7, r3
     724:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     726:	683b      	ldr	r3, [r7, #0]
     728:	785a      	ldrb	r2, [r3, #1]
     72a:	230c      	movs	r3, #12
     72c:	18fb      	adds	r3, r7, r3
     72e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     730:	683b      	ldr	r3, [r7, #0]
     732:	789a      	ldrb	r2, [r3, #2]
     734:	230c      	movs	r3, #12
     736:	18fb      	adds	r3, r7, r3
     738:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     73a:	230c      	movs	r3, #12
     73c:	18fa      	adds	r2, r7, r3
     73e:	1dfb      	adds	r3, r7, #7
     740:	781b      	ldrb	r3, [r3, #0]
     742:	0011      	movs	r1, r2
     744:	0018      	movs	r0, r3
     746:	4b04      	ldr	r3, [pc, #16]	; (758 <port_pin_set_config+0x5c>)
     748:	4798      	blx	r3
}
     74a:	46c0      	nop			; (mov r8, r8)
     74c:	46bd      	mov	sp, r7
     74e:	b004      	add	sp, #16
     750:	bd80      	pop	{r7, pc}
     752:	46c0      	nop			; (mov r8, r8)
     754:	000006d5 	.word	0x000006d5
     758:	0000271d 	.word	0x0000271d

0000075c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     75c:	b580      	push	{r7, lr}
     75e:	b082      	sub	sp, #8
     760:	af00      	add	r7, sp, #0
     762:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     764:	687b      	ldr	r3, [r7, #4]
     766:	2200      	movs	r2, #0
     768:	701a      	strb	r2, [r3, #0]
}
     76a:	46c0      	nop			; (mov r8, r8)
     76c:	46bd      	mov	sp, r7
     76e:	b002      	add	sp, #8
     770:	bd80      	pop	{r7, pc}

00000772 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     772:	b5f0      	push	{r4, r5, r6, r7, lr}
     774:	b08d      	sub	sp, #52	; 0x34
     776:	af00      	add	r7, sp, #0
     778:	60b8      	str	r0, [r7, #8]
     77a:	60f9      	str	r1, [r7, #12]
     77c:	603a      	str	r2, [r7, #0]
     77e:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     780:	2300      	movs	r3, #0
     782:	2400      	movs	r4, #0
     784:	623b      	str	r3, [r7, #32]
     786:	627c      	str	r4, [r7, #36]	; 0x24
     788:	2300      	movs	r3, #0
     78a:	2400      	movs	r4, #0
     78c:	61bb      	str	r3, [r7, #24]
     78e:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
     790:	233f      	movs	r3, #63	; 0x3f
     792:	62fb      	str	r3, [r7, #44]	; 0x2c
     794:	e053      	b.n	83e <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
     796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     798:	3b20      	subs	r3, #32
     79a:	2b00      	cmp	r3, #0
     79c:	db04      	blt.n	7a8 <long_division+0x36>
     79e:	2201      	movs	r2, #1
     7a0:	409a      	lsls	r2, r3
     7a2:	0013      	movs	r3, r2
     7a4:	617b      	str	r3, [r7, #20]
     7a6:	e00b      	b.n	7c0 <long_division+0x4e>
     7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     7aa:	2220      	movs	r2, #32
     7ac:	1ad3      	subs	r3, r2, r3
     7ae:	2201      	movs	r2, #1
     7b0:	40da      	lsrs	r2, r3
     7b2:	0013      	movs	r3, r2
     7b4:	2100      	movs	r1, #0
     7b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     7b8:	4091      	lsls	r1, r2
     7ba:	000a      	movs	r2, r1
     7bc:	4313      	orrs	r3, r2
     7be:	617b      	str	r3, [r7, #20]
     7c0:	2201      	movs	r2, #1
     7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     7c4:	409a      	lsls	r2, r3
     7c6:	0013      	movs	r3, r2
     7c8:	613b      	str	r3, [r7, #16]

		r = r << 1;
     7ca:	69bb      	ldr	r3, [r7, #24]
     7cc:	69fc      	ldr	r4, [r7, #28]
     7ce:	18db      	adds	r3, r3, r3
     7d0:	4164      	adcs	r4, r4
     7d2:	61bb      	str	r3, [r7, #24]
     7d4:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
     7d6:	68bb      	ldr	r3, [r7, #8]
     7d8:	693a      	ldr	r2, [r7, #16]
     7da:	401a      	ands	r2, r3
     7dc:	0015      	movs	r5, r2
     7de:	68fb      	ldr	r3, [r7, #12]
     7e0:	697a      	ldr	r2, [r7, #20]
     7e2:	401a      	ands	r2, r3
     7e4:	0016      	movs	r6, r2
     7e6:	002b      	movs	r3, r5
     7e8:	4333      	orrs	r3, r6
     7ea:	d007      	beq.n	7fc <long_division+0x8a>
			r |= 0x01;
     7ec:	69bb      	ldr	r3, [r7, #24]
     7ee:	2201      	movs	r2, #1
     7f0:	4313      	orrs	r3, r2
     7f2:	61bb      	str	r3, [r7, #24]
     7f4:	69fb      	ldr	r3, [r7, #28]
     7f6:	2200      	movs	r2, #0
     7f8:	4313      	orrs	r3, r2
     7fa:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
     7fc:	687a      	ldr	r2, [r7, #4]
     7fe:	69fb      	ldr	r3, [r7, #28]
     800:	429a      	cmp	r2, r3
     802:	d819      	bhi.n	838 <long_division+0xc6>
     804:	687a      	ldr	r2, [r7, #4]
     806:	69fb      	ldr	r3, [r7, #28]
     808:	429a      	cmp	r2, r3
     80a:	d103      	bne.n	814 <long_division+0xa2>
     80c:	683a      	ldr	r2, [r7, #0]
     80e:	69bb      	ldr	r3, [r7, #24]
     810:	429a      	cmp	r2, r3
     812:	d811      	bhi.n	838 <long_division+0xc6>
			r = r - d;
     814:	69b9      	ldr	r1, [r7, #24]
     816:	69fa      	ldr	r2, [r7, #28]
     818:	683b      	ldr	r3, [r7, #0]
     81a:	687c      	ldr	r4, [r7, #4]
     81c:	1ac9      	subs	r1, r1, r3
     81e:	41a2      	sbcs	r2, r4
     820:	000b      	movs	r3, r1
     822:	0014      	movs	r4, r2
     824:	61bb      	str	r3, [r7, #24]
     826:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
     828:	6a3a      	ldr	r2, [r7, #32]
     82a:	693b      	ldr	r3, [r7, #16]
     82c:	4313      	orrs	r3, r2
     82e:	623b      	str	r3, [r7, #32]
     830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     832:	697b      	ldr	r3, [r7, #20]
     834:	4313      	orrs	r3, r2
     836:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
     838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     83a:	3b01      	subs	r3, #1
     83c:	62fb      	str	r3, [r7, #44]	; 0x2c
     83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     840:	2b00      	cmp	r3, #0
     842:	daa8      	bge.n	796 <long_division+0x24>
		}
	}

	return q;
     844:	6a3b      	ldr	r3, [r7, #32]
     846:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
     848:	0018      	movs	r0, r3
     84a:	0021      	movs	r1, r4
     84c:	46bd      	mov	sp, r7
     84e:	b00d      	add	sp, #52	; 0x34
     850:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000852 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     852:	b580      	push	{r7, lr}
     854:	b086      	sub	sp, #24
     856:	af00      	add	r7, sp, #0
     858:	60f8      	str	r0, [r7, #12]
     85a:	60b9      	str	r1, [r7, #8]
     85c:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     85e:	2316      	movs	r3, #22
     860:	18fb      	adds	r3, r7, r3
     862:	2200      	movs	r2, #0
     864:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     866:	68bb      	ldr	r3, [r7, #8]
     868:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     86a:	68bb      	ldr	r3, [r7, #8]
     86c:	085a      	lsrs	r2, r3, #1
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	429a      	cmp	r2, r3
     872:	d201      	bcs.n	878 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     874:	2340      	movs	r3, #64	; 0x40
     876:	e026      	b.n	8c6 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     878:	68bb      	ldr	r3, [r7, #8]
     87a:	085b      	lsrs	r3, r3, #1
     87c:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     87e:	e00a      	b.n	896 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     880:	693a      	ldr	r2, [r7, #16]
     882:	68fb      	ldr	r3, [r7, #12]
     884:	1ad3      	subs	r3, r2, r3
     886:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     888:	2316      	movs	r3, #22
     88a:	18fb      	adds	r3, r7, r3
     88c:	881a      	ldrh	r2, [r3, #0]
     88e:	2316      	movs	r3, #22
     890:	18fb      	adds	r3, r7, r3
     892:	3201      	adds	r2, #1
     894:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
     896:	693a      	ldr	r2, [r7, #16]
     898:	68fb      	ldr	r3, [r7, #12]
     89a:	429a      	cmp	r2, r3
     89c:	d2f0      	bcs.n	880 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
     89e:	2316      	movs	r3, #22
     8a0:	18fb      	adds	r3, r7, r3
     8a2:	2216      	movs	r2, #22
     8a4:	18ba      	adds	r2, r7, r2
     8a6:	8812      	ldrh	r2, [r2, #0]
     8a8:	3a01      	subs	r2, #1
     8aa:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     8ac:	2316      	movs	r3, #22
     8ae:	18fb      	adds	r3, r7, r3
     8b0:	881b      	ldrh	r3, [r3, #0]
     8b2:	2bff      	cmp	r3, #255	; 0xff
     8b4:	d901      	bls.n	8ba <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8b6:	2340      	movs	r3, #64	; 0x40
     8b8:	e005      	b.n	8c6 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     8ba:	687b      	ldr	r3, [r7, #4]
     8bc:	2216      	movs	r2, #22
     8be:	18ba      	adds	r2, r7, r2
     8c0:	8812      	ldrh	r2, [r2, #0]
     8c2:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     8c4:	2300      	movs	r3, #0
	}
}
     8c6:	0018      	movs	r0, r3
     8c8:	46bd      	mov	sp, r7
     8ca:	b006      	add	sp, #24
     8cc:	bd80      	pop	{r7, pc}
	...

000008d0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     8d2:	b0a1      	sub	sp, #132	; 0x84
     8d4:	af00      	add	r7, sp, #0
     8d6:	64f8      	str	r0, [r7, #76]	; 0x4c
     8d8:	64b9      	str	r1, [r7, #72]	; 0x48
     8da:	647a      	str	r2, [r7, #68]	; 0x44
     8dc:	2243      	movs	r2, #67	; 0x43
     8de:	18ba      	adds	r2, r7, r2
     8e0:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
     8e2:	2300      	movs	r3, #0
     8e4:	2400      	movs	r4, #0
     8e6:	673b      	str	r3, [r7, #112]	; 0x70
     8e8:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
     8ea:	2300      	movs	r3, #0
     8ec:	2400      	movs	r4, #0
     8ee:	66bb      	str	r3, [r7, #104]	; 0x68
     8f0:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
     8f2:	2300      	movs	r3, #0
     8f4:	2400      	movs	r4, #0
     8f6:	67bb      	str	r3, [r7, #120]	; 0x78
     8f8:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
     8fa:	2300      	movs	r3, #0
     8fc:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     8fe:	2358      	movs	r3, #88	; 0x58
     900:	2240      	movs	r2, #64	; 0x40
     902:	4694      	mov	ip, r2
     904:	44bc      	add	ip, r7
     906:	4463      	add	r3, ip
     908:	781a      	ldrb	r2, [r3, #0]
     90a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     90c:	435a      	muls	r2, r3
     90e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     910:	429a      	cmp	r2, r3
     912:	d901      	bls.n	918 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     914:	2340      	movs	r3, #64	; 0x40
     916:	e0b3      	b.n	a80 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     918:	2343      	movs	r3, #67	; 0x43
     91a:	18fb      	adds	r3, r7, r3
     91c:	781b      	ldrb	r3, [r3, #0]
     91e:	2b00      	cmp	r3, #0
     920:	d13d      	bne.n	99e <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     922:	2358      	movs	r3, #88	; 0x58
     924:	2240      	movs	r2, #64	; 0x40
     926:	4694      	mov	ip, r2
     928:	44bc      	add	ip, r7
     92a:	4463      	add	r3, ip
     92c:	781b      	ldrb	r3, [r3, #0]
     92e:	b2db      	uxtb	r3, r3
     930:	613b      	str	r3, [r7, #16]
     932:	2300      	movs	r3, #0
     934:	617b      	str	r3, [r7, #20]
     936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     938:	60bb      	str	r3, [r7, #8]
     93a:	2300      	movs	r3, #0
     93c:	60fb      	str	r3, [r7, #12]
     93e:	4c52      	ldr	r4, [pc, #328]	; (a88 <_sercom_get_async_baud_val+0x1b8>)
     940:	68ba      	ldr	r2, [r7, #8]
     942:	68fb      	ldr	r3, [r7, #12]
     944:	6938      	ldr	r0, [r7, #16]
     946:	6979      	ldr	r1, [r7, #20]
     948:	47a0      	blx	r4
     94a:	0003      	movs	r3, r0
     94c:	000c      	movs	r4, r1
     94e:	001b      	movs	r3, r3
     950:	65fb      	str	r3, [r7, #92]	; 0x5c
     952:	2300      	movs	r3, #0
     954:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
     956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     958:	603b      	str	r3, [r7, #0]
     95a:	2300      	movs	r3, #0
     95c:	607b      	str	r3, [r7, #4]
     95e:	6db8      	ldr	r0, [r7, #88]	; 0x58
     960:	6df9      	ldr	r1, [r7, #92]	; 0x5c
     962:	683a      	ldr	r2, [r7, #0]
     964:	687b      	ldr	r3, [r7, #4]
     966:	4c49      	ldr	r4, [pc, #292]	; (a8c <_sercom_get_async_baud_val+0x1bc>)
     968:	47a0      	blx	r4
     96a:	0003      	movs	r3, r0
     96c:	000c      	movs	r4, r1
     96e:	673b      	str	r3, [r7, #112]	; 0x70
     970:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
     972:	2100      	movs	r1, #0
     974:	2201      	movs	r2, #1
     976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     978:	6f7c      	ldr	r4, [r7, #116]	; 0x74
     97a:	1ac9      	subs	r1, r1, r3
     97c:	41a2      	sbcs	r2, r4
     97e:	000b      	movs	r3, r1
     980:	0014      	movs	r4, r2
     982:	66bb      	str	r3, [r7, #104]	; 0x68
     984:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
     986:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     988:	0c1b      	lsrs	r3, r3, #16
     98a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     98c:	0416      	lsls	r6, r2, #16
     98e:	431e      	orrs	r6, r3
     990:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     992:	041d      	lsls	r5, r3, #16
     994:	0033      	movs	r3, r6
     996:	67bb      	str	r3, [r7, #120]	; 0x78
     998:	2300      	movs	r3, #0
     99a:	67fb      	str	r3, [r7, #124]	; 0x7c
     99c:	e06a      	b.n	a74 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     99e:	2343      	movs	r3, #67	; 0x43
     9a0:	18fb      	adds	r3, r7, r3
     9a2:	781b      	ldrb	r3, [r3, #0]
     9a4:	2b01      	cmp	r3, #1
     9a6:	d165      	bne.n	a74 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
     9a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     9aa:	633b      	str	r3, [r7, #48]	; 0x30
     9ac:	2300      	movs	r3, #0
     9ae:	637b      	str	r3, [r7, #52]	; 0x34
     9b0:	2358      	movs	r3, #88	; 0x58
     9b2:	2240      	movs	r2, #64	; 0x40
     9b4:	4694      	mov	ip, r2
     9b6:	44bc      	add	ip, r7
     9b8:	4463      	add	r3, ip
     9ba:	781b      	ldrb	r3, [r3, #0]
     9bc:	b2db      	uxtb	r3, r3
     9be:	62bb      	str	r3, [r7, #40]	; 0x28
     9c0:	2300      	movs	r3, #0
     9c2:	62fb      	str	r3, [r7, #44]	; 0x2c
     9c4:	4c30      	ldr	r4, [pc, #192]	; (a88 <_sercom_get_async_baud_val+0x1b8>)
     9c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
     9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     9ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
     9cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
     9ce:	47a0      	blx	r4
     9d0:	0003      	movs	r3, r0
     9d2:	000c      	movs	r4, r1
     9d4:	65bb      	str	r3, [r7, #88]	; 0x58
     9d6:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
     9d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     9da:	623b      	str	r3, [r7, #32]
     9dc:	2300      	movs	r3, #0
     9de:	627b      	str	r3, [r7, #36]	; 0x24
     9e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     9e2:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     9e4:	001a      	movs	r2, r3
     9e6:	0023      	movs	r3, r4
     9e8:	6a38      	ldr	r0, [r7, #32]
     9ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
     9ec:	4c27      	ldr	r4, [pc, #156]	; (a8c <_sercom_get_async_baud_val+0x1bc>)
     9ee:	47a0      	blx	r4
     9f0:	0003      	movs	r3, r0
     9f2:	000c      	movs	r4, r1
     9f4:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
     9f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
     9f8:	2380      	movs	r3, #128	; 0x80
     9fa:	019b      	lsls	r3, r3, #6
     9fc:	429a      	cmp	r2, r3
     9fe:	d901      	bls.n	a04 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a00:	2340      	movs	r3, #64	; 0x40
     a02:	e03d      	b.n	a80 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     a06:	61bb      	str	r3, [r7, #24]
     a08:	2300      	movs	r3, #0
     a0a:	61fb      	str	r3, [r7, #28]
     a0c:	69b9      	ldr	r1, [r7, #24]
     a0e:	69fa      	ldr	r2, [r7, #28]
     a10:	000b      	movs	r3, r1
     a12:	0f5b      	lsrs	r3, r3, #29
     a14:	0010      	movs	r0, r2
     a16:	00c0      	lsls	r0, r0, #3
     a18:	63f8      	str	r0, [r7, #60]	; 0x3c
     a1a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
     a1c:	4318      	orrs	r0, r3
     a1e:	63f8      	str	r0, [r7, #60]	; 0x3c
     a20:	000b      	movs	r3, r1
     a22:	00db      	lsls	r3, r3, #3
     a24:	63bb      	str	r3, [r7, #56]	; 0x38
     a26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     a28:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     a2a:	001a      	movs	r2, r3
     a2c:	0023      	movs	r3, r4
     a2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     a30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
     a32:	4c16      	ldr	r4, [pc, #88]	; (a8c <_sercom_get_async_baud_val+0x1bc>)
     a34:	47a0      	blx	r4
     a36:	0003      	movs	r3, r0
     a38:	000c      	movs	r4, r1
     a3a:	65bb      	str	r3, [r7, #88]	; 0x58
     a3c:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
     a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     a40:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     a42:	b2d9      	uxtb	r1, r3
     a44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     a46:	b2db      	uxtb	r3, r3
     a48:	00db      	lsls	r3, r3, #3
     a4a:	b2da      	uxtb	r2, r3
     a4c:	2317      	movs	r3, #23
     a4e:	2040      	movs	r0, #64	; 0x40
     a50:	4684      	mov	ip, r0
     a52:	44bc      	add	ip, r7
     a54:	4463      	add	r3, ip
     a56:	1a8a      	subs	r2, r1, r2
     a58:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
     a5a:	2317      	movs	r3, #23
     a5c:	2240      	movs	r2, #64	; 0x40
     a5e:	4694      	mov	ip, r2
     a60:	44bc      	add	ip, r7
     a62:	4463      	add	r3, ip
     a64:	781b      	ldrb	r3, [r3, #0]
     a66:	035b      	lsls	r3, r3, #13
     a68:	001a      	movs	r2, r3
     a6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     a6c:	4313      	orrs	r3, r2
     a6e:	67bb      	str	r3, [r7, #120]	; 0x78
     a70:	2300      	movs	r3, #0
     a72:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
     a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     a76:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
     a78:	b29a      	uxth	r2, r3
     a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     a7c:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     a7e:	2300      	movs	r3, #0
}
     a80:	0018      	movs	r0, r3
     a82:	46bd      	mov	sp, r7
     a84:	b021      	add	sp, #132	; 0x84
     a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a88:	00003235 	.word	0x00003235
     a8c:	00000773 	.word	0x00000773

00000a90 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     a90:	b580      	push	{r7, lr}
     a92:	b084      	sub	sp, #16
     a94:	af00      	add	r7, sp, #0
     a96:	0002      	movs	r2, r0
     a98:	1dfb      	adds	r3, r7, #7
     a9a:	701a      	strb	r2, [r3, #0]
     a9c:	1dbb      	adds	r3, r7, #6
     a9e:	1c0a      	adds	r2, r1, #0
     aa0:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     aa2:	4b1a      	ldr	r3, [pc, #104]	; (b0c <sercom_set_gclk_generator+0x7c>)
     aa4:	781b      	ldrb	r3, [r3, #0]
     aa6:	2201      	movs	r2, #1
     aa8:	4053      	eors	r3, r2
     aaa:	b2db      	uxtb	r3, r3
     aac:	2b00      	cmp	r3, #0
     aae:	d103      	bne.n	ab8 <sercom_set_gclk_generator+0x28>
     ab0:	1dbb      	adds	r3, r7, #6
     ab2:	781b      	ldrb	r3, [r3, #0]
     ab4:	2b00      	cmp	r3, #0
     ab6:	d01b      	beq.n	af0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     ab8:	230c      	movs	r3, #12
     aba:	18fb      	adds	r3, r7, r3
     abc:	0018      	movs	r0, r3
     abe:	4b14      	ldr	r3, [pc, #80]	; (b10 <sercom_set_gclk_generator+0x80>)
     ac0:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     ac2:	230c      	movs	r3, #12
     ac4:	18fb      	adds	r3, r7, r3
     ac6:	1dfa      	adds	r2, r7, #7
     ac8:	7812      	ldrb	r2, [r2, #0]
     aca:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     acc:	230c      	movs	r3, #12
     ace:	18fb      	adds	r3, r7, r3
     ad0:	0019      	movs	r1, r3
     ad2:	2013      	movs	r0, #19
     ad4:	4b0f      	ldr	r3, [pc, #60]	; (b14 <sercom_set_gclk_generator+0x84>)
     ad6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     ad8:	2013      	movs	r0, #19
     ada:	4b0f      	ldr	r3, [pc, #60]	; (b18 <sercom_set_gclk_generator+0x88>)
     adc:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     ade:	4b0b      	ldr	r3, [pc, #44]	; (b0c <sercom_set_gclk_generator+0x7c>)
     ae0:	1dfa      	adds	r2, r7, #7
     ae2:	7812      	ldrb	r2, [r2, #0]
     ae4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     ae6:	4b09      	ldr	r3, [pc, #36]	; (b0c <sercom_set_gclk_generator+0x7c>)
     ae8:	2201      	movs	r2, #1
     aea:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     aec:	2300      	movs	r3, #0
     aee:	e008      	b.n	b02 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     af0:	4b06      	ldr	r3, [pc, #24]	; (b0c <sercom_set_gclk_generator+0x7c>)
     af2:	785b      	ldrb	r3, [r3, #1]
     af4:	1dfa      	adds	r2, r7, #7
     af6:	7812      	ldrb	r2, [r2, #0]
     af8:	429a      	cmp	r2, r3
     afa:	d101      	bne.n	b00 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     afc:	2300      	movs	r3, #0
     afe:	e000      	b.n	b02 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     b00:	231d      	movs	r3, #29
}
     b02:	0018      	movs	r0, r3
     b04:	46bd      	mov	sp, r7
     b06:	b004      	add	sp, #16
     b08:	bd80      	pop	{r7, pc}
     b0a:	46c0      	nop			; (mov r8, r8)
     b0c:	2000009c 	.word	0x2000009c
     b10:	0000075d 	.word	0x0000075d
     b14:	00002431 	.word	0x00002431
     b18:	00002475 	.word	0x00002475

00000b1c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     b1c:	b580      	push	{r7, lr}
     b1e:	b082      	sub	sp, #8
     b20:	af00      	add	r7, sp, #0
     b22:	6078      	str	r0, [r7, #4]
     b24:	000a      	movs	r2, r1
     b26:	1cfb      	adds	r3, r7, #3
     b28:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     b2a:	687b      	ldr	r3, [r7, #4]
     b2c:	4a4d      	ldr	r2, [pc, #308]	; (c64 <_sercom_get_default_pad+0x148>)
     b2e:	4293      	cmp	r3, r2
     b30:	d03f      	beq.n	bb2 <_sercom_get_default_pad+0x96>
     b32:	4a4c      	ldr	r2, [pc, #304]	; (c64 <_sercom_get_default_pad+0x148>)
     b34:	4293      	cmp	r3, r2
     b36:	d806      	bhi.n	b46 <_sercom_get_default_pad+0x2a>
     b38:	4a4b      	ldr	r2, [pc, #300]	; (c68 <_sercom_get_default_pad+0x14c>)
     b3a:	4293      	cmp	r3, r2
     b3c:	d00f      	beq.n	b5e <_sercom_get_default_pad+0x42>
     b3e:	4a4b      	ldr	r2, [pc, #300]	; (c6c <_sercom_get_default_pad+0x150>)
     b40:	4293      	cmp	r3, r2
     b42:	d021      	beq.n	b88 <_sercom_get_default_pad+0x6c>
     b44:	e089      	b.n	c5a <_sercom_get_default_pad+0x13e>
     b46:	4a4a      	ldr	r2, [pc, #296]	; (c70 <_sercom_get_default_pad+0x154>)
     b48:	4293      	cmp	r3, r2
     b4a:	d100      	bne.n	b4e <_sercom_get_default_pad+0x32>
     b4c:	e05b      	b.n	c06 <_sercom_get_default_pad+0xea>
     b4e:	4a49      	ldr	r2, [pc, #292]	; (c74 <_sercom_get_default_pad+0x158>)
     b50:	4293      	cmp	r3, r2
     b52:	d100      	bne.n	b56 <_sercom_get_default_pad+0x3a>
     b54:	e06c      	b.n	c30 <_sercom_get_default_pad+0x114>
     b56:	4a48      	ldr	r2, [pc, #288]	; (c78 <_sercom_get_default_pad+0x15c>)
     b58:	4293      	cmp	r3, r2
     b5a:	d03f      	beq.n	bdc <_sercom_get_default_pad+0xc0>
     b5c:	e07d      	b.n	c5a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b5e:	1cfb      	adds	r3, r7, #3
     b60:	781b      	ldrb	r3, [r3, #0]
     b62:	2b01      	cmp	r3, #1
     b64:	d00a      	beq.n	b7c <_sercom_get_default_pad+0x60>
     b66:	dc02      	bgt.n	b6e <_sercom_get_default_pad+0x52>
     b68:	2b00      	cmp	r3, #0
     b6a:	d005      	beq.n	b78 <_sercom_get_default_pad+0x5c>
     b6c:	e075      	b.n	c5a <_sercom_get_default_pad+0x13e>
     b6e:	2b02      	cmp	r3, #2
     b70:	d006      	beq.n	b80 <_sercom_get_default_pad+0x64>
     b72:	2b03      	cmp	r3, #3
     b74:	d006      	beq.n	b84 <_sercom_get_default_pad+0x68>
     b76:	e070      	b.n	c5a <_sercom_get_default_pad+0x13e>
     b78:	4b40      	ldr	r3, [pc, #256]	; (c7c <_sercom_get_default_pad+0x160>)
     b7a:	e06f      	b.n	c5c <_sercom_get_default_pad+0x140>
     b7c:	4b40      	ldr	r3, [pc, #256]	; (c80 <_sercom_get_default_pad+0x164>)
     b7e:	e06d      	b.n	c5c <_sercom_get_default_pad+0x140>
     b80:	4b40      	ldr	r3, [pc, #256]	; (c84 <_sercom_get_default_pad+0x168>)
     b82:	e06b      	b.n	c5c <_sercom_get_default_pad+0x140>
     b84:	4b40      	ldr	r3, [pc, #256]	; (c88 <_sercom_get_default_pad+0x16c>)
     b86:	e069      	b.n	c5c <_sercom_get_default_pad+0x140>
     b88:	1cfb      	adds	r3, r7, #3
     b8a:	781b      	ldrb	r3, [r3, #0]
     b8c:	2b01      	cmp	r3, #1
     b8e:	d00a      	beq.n	ba6 <_sercom_get_default_pad+0x8a>
     b90:	dc02      	bgt.n	b98 <_sercom_get_default_pad+0x7c>
     b92:	2b00      	cmp	r3, #0
     b94:	d005      	beq.n	ba2 <_sercom_get_default_pad+0x86>
     b96:	e060      	b.n	c5a <_sercom_get_default_pad+0x13e>
     b98:	2b02      	cmp	r3, #2
     b9a:	d006      	beq.n	baa <_sercom_get_default_pad+0x8e>
     b9c:	2b03      	cmp	r3, #3
     b9e:	d006      	beq.n	bae <_sercom_get_default_pad+0x92>
     ba0:	e05b      	b.n	c5a <_sercom_get_default_pad+0x13e>
     ba2:	2303      	movs	r3, #3
     ba4:	e05a      	b.n	c5c <_sercom_get_default_pad+0x140>
     ba6:	4b39      	ldr	r3, [pc, #228]	; (c8c <_sercom_get_default_pad+0x170>)
     ba8:	e058      	b.n	c5c <_sercom_get_default_pad+0x140>
     baa:	4b39      	ldr	r3, [pc, #228]	; (c90 <_sercom_get_default_pad+0x174>)
     bac:	e056      	b.n	c5c <_sercom_get_default_pad+0x140>
     bae:	4b39      	ldr	r3, [pc, #228]	; (c94 <_sercom_get_default_pad+0x178>)
     bb0:	e054      	b.n	c5c <_sercom_get_default_pad+0x140>
     bb2:	1cfb      	adds	r3, r7, #3
     bb4:	781b      	ldrb	r3, [r3, #0]
     bb6:	2b01      	cmp	r3, #1
     bb8:	d00a      	beq.n	bd0 <_sercom_get_default_pad+0xb4>
     bba:	dc02      	bgt.n	bc2 <_sercom_get_default_pad+0xa6>
     bbc:	2b00      	cmp	r3, #0
     bbe:	d005      	beq.n	bcc <_sercom_get_default_pad+0xb0>
     bc0:	e04b      	b.n	c5a <_sercom_get_default_pad+0x13e>
     bc2:	2b02      	cmp	r3, #2
     bc4:	d006      	beq.n	bd4 <_sercom_get_default_pad+0xb8>
     bc6:	2b03      	cmp	r3, #3
     bc8:	d006      	beq.n	bd8 <_sercom_get_default_pad+0xbc>
     bca:	e046      	b.n	c5a <_sercom_get_default_pad+0x13e>
     bcc:	4b32      	ldr	r3, [pc, #200]	; (c98 <_sercom_get_default_pad+0x17c>)
     bce:	e045      	b.n	c5c <_sercom_get_default_pad+0x140>
     bd0:	4b32      	ldr	r3, [pc, #200]	; (c9c <_sercom_get_default_pad+0x180>)
     bd2:	e043      	b.n	c5c <_sercom_get_default_pad+0x140>
     bd4:	4b32      	ldr	r3, [pc, #200]	; (ca0 <_sercom_get_default_pad+0x184>)
     bd6:	e041      	b.n	c5c <_sercom_get_default_pad+0x140>
     bd8:	4b32      	ldr	r3, [pc, #200]	; (ca4 <_sercom_get_default_pad+0x188>)
     bda:	e03f      	b.n	c5c <_sercom_get_default_pad+0x140>
     bdc:	1cfb      	adds	r3, r7, #3
     bde:	781b      	ldrb	r3, [r3, #0]
     be0:	2b01      	cmp	r3, #1
     be2:	d00a      	beq.n	bfa <_sercom_get_default_pad+0xde>
     be4:	dc02      	bgt.n	bec <_sercom_get_default_pad+0xd0>
     be6:	2b00      	cmp	r3, #0
     be8:	d005      	beq.n	bf6 <_sercom_get_default_pad+0xda>
     bea:	e036      	b.n	c5a <_sercom_get_default_pad+0x13e>
     bec:	2b02      	cmp	r3, #2
     bee:	d006      	beq.n	bfe <_sercom_get_default_pad+0xe2>
     bf0:	2b03      	cmp	r3, #3
     bf2:	d006      	beq.n	c02 <_sercom_get_default_pad+0xe6>
     bf4:	e031      	b.n	c5a <_sercom_get_default_pad+0x13e>
     bf6:	4b2c      	ldr	r3, [pc, #176]	; (ca8 <_sercom_get_default_pad+0x18c>)
     bf8:	e030      	b.n	c5c <_sercom_get_default_pad+0x140>
     bfa:	4b2c      	ldr	r3, [pc, #176]	; (cac <_sercom_get_default_pad+0x190>)
     bfc:	e02e      	b.n	c5c <_sercom_get_default_pad+0x140>
     bfe:	4b2c      	ldr	r3, [pc, #176]	; (cb0 <_sercom_get_default_pad+0x194>)
     c00:	e02c      	b.n	c5c <_sercom_get_default_pad+0x140>
     c02:	4b2c      	ldr	r3, [pc, #176]	; (cb4 <_sercom_get_default_pad+0x198>)
     c04:	e02a      	b.n	c5c <_sercom_get_default_pad+0x140>
     c06:	1cfb      	adds	r3, r7, #3
     c08:	781b      	ldrb	r3, [r3, #0]
     c0a:	2b01      	cmp	r3, #1
     c0c:	d00a      	beq.n	c24 <_sercom_get_default_pad+0x108>
     c0e:	dc02      	bgt.n	c16 <_sercom_get_default_pad+0xfa>
     c10:	2b00      	cmp	r3, #0
     c12:	d005      	beq.n	c20 <_sercom_get_default_pad+0x104>
     c14:	e021      	b.n	c5a <_sercom_get_default_pad+0x13e>
     c16:	2b02      	cmp	r3, #2
     c18:	d006      	beq.n	c28 <_sercom_get_default_pad+0x10c>
     c1a:	2b03      	cmp	r3, #3
     c1c:	d006      	beq.n	c2c <_sercom_get_default_pad+0x110>
     c1e:	e01c      	b.n	c5a <_sercom_get_default_pad+0x13e>
     c20:	4b25      	ldr	r3, [pc, #148]	; (cb8 <_sercom_get_default_pad+0x19c>)
     c22:	e01b      	b.n	c5c <_sercom_get_default_pad+0x140>
     c24:	4b25      	ldr	r3, [pc, #148]	; (cbc <_sercom_get_default_pad+0x1a0>)
     c26:	e019      	b.n	c5c <_sercom_get_default_pad+0x140>
     c28:	4b25      	ldr	r3, [pc, #148]	; (cc0 <_sercom_get_default_pad+0x1a4>)
     c2a:	e017      	b.n	c5c <_sercom_get_default_pad+0x140>
     c2c:	4b25      	ldr	r3, [pc, #148]	; (cc4 <_sercom_get_default_pad+0x1a8>)
     c2e:	e015      	b.n	c5c <_sercom_get_default_pad+0x140>
     c30:	1cfb      	adds	r3, r7, #3
     c32:	781b      	ldrb	r3, [r3, #0]
     c34:	2b01      	cmp	r3, #1
     c36:	d00a      	beq.n	c4e <_sercom_get_default_pad+0x132>
     c38:	dc02      	bgt.n	c40 <_sercom_get_default_pad+0x124>
     c3a:	2b00      	cmp	r3, #0
     c3c:	d005      	beq.n	c4a <_sercom_get_default_pad+0x12e>
     c3e:	e00c      	b.n	c5a <_sercom_get_default_pad+0x13e>
     c40:	2b02      	cmp	r3, #2
     c42:	d006      	beq.n	c52 <_sercom_get_default_pad+0x136>
     c44:	2b03      	cmp	r3, #3
     c46:	d006      	beq.n	c56 <_sercom_get_default_pad+0x13a>
     c48:	e007      	b.n	c5a <_sercom_get_default_pad+0x13e>
     c4a:	4b1f      	ldr	r3, [pc, #124]	; (cc8 <_sercom_get_default_pad+0x1ac>)
     c4c:	e006      	b.n	c5c <_sercom_get_default_pad+0x140>
     c4e:	4b1f      	ldr	r3, [pc, #124]	; (ccc <_sercom_get_default_pad+0x1b0>)
     c50:	e004      	b.n	c5c <_sercom_get_default_pad+0x140>
     c52:	4b1f      	ldr	r3, [pc, #124]	; (cd0 <_sercom_get_default_pad+0x1b4>)
     c54:	e002      	b.n	c5c <_sercom_get_default_pad+0x140>
     c56:	4b1f      	ldr	r3, [pc, #124]	; (cd4 <_sercom_get_default_pad+0x1b8>)
     c58:	e000      	b.n	c5c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     c5a:	2300      	movs	r3, #0
}
     c5c:	0018      	movs	r0, r3
     c5e:	46bd      	mov	sp, r7
     c60:	b002      	add	sp, #8
     c62:	bd80      	pop	{r7, pc}
     c64:	42001000 	.word	0x42001000
     c68:	42000800 	.word	0x42000800
     c6c:	42000c00 	.word	0x42000c00
     c70:	42001800 	.word	0x42001800
     c74:	42001c00 	.word	0x42001c00
     c78:	42001400 	.word	0x42001400
     c7c:	00040003 	.word	0x00040003
     c80:	00050003 	.word	0x00050003
     c84:	00060003 	.word	0x00060003
     c88:	00070003 	.word	0x00070003
     c8c:	00010003 	.word	0x00010003
     c90:	001e0003 	.word	0x001e0003
     c94:	001f0003 	.word	0x001f0003
     c98:	00080003 	.word	0x00080003
     c9c:	00090003 	.word	0x00090003
     ca0:	000a0003 	.word	0x000a0003
     ca4:	000b0003 	.word	0x000b0003
     ca8:	00100003 	.word	0x00100003
     cac:	00110003 	.word	0x00110003
     cb0:	00120003 	.word	0x00120003
     cb4:	00130003 	.word	0x00130003
     cb8:	000c0003 	.word	0x000c0003
     cbc:	000d0003 	.word	0x000d0003
     cc0:	000e0003 	.word	0x000e0003
     cc4:	000f0003 	.word	0x000f0003
     cc8:	00160003 	.word	0x00160003
     ccc:	00170003 	.word	0x00170003
     cd0:	00180003 	.word	0x00180003
     cd4:	00190003 	.word	0x00190003

00000cd8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     cd8:	b590      	push	{r4, r7, lr}
     cda:	b08b      	sub	sp, #44	; 0x2c
     cdc:	af00      	add	r7, sp, #0
     cde:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     ce0:	230c      	movs	r3, #12
     ce2:	18fb      	adds	r3, r7, r3
     ce4:	4a0f      	ldr	r2, [pc, #60]	; (d24 <_sercom_get_sercom_inst_index+0x4c>)
     ce6:	ca13      	ldmia	r2!, {r0, r1, r4}
     ce8:	c313      	stmia	r3!, {r0, r1, r4}
     cea:	ca13      	ldmia	r2!, {r0, r1, r4}
     cec:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     cee:	2300      	movs	r3, #0
     cf0:	627b      	str	r3, [r7, #36]	; 0x24
     cf2:	e00e      	b.n	d12 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     cf4:	230c      	movs	r3, #12
     cf6:	18fb      	adds	r3, r7, r3
     cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     cfa:	0092      	lsls	r2, r2, #2
     cfc:	58d3      	ldr	r3, [r2, r3]
     cfe:	001a      	movs	r2, r3
     d00:	687b      	ldr	r3, [r7, #4]
     d02:	429a      	cmp	r2, r3
     d04:	d102      	bne.n	d0c <_sercom_get_sercom_inst_index+0x34>
			return i;
     d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d08:	b2db      	uxtb	r3, r3
     d0a:	e006      	b.n	d1a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d0e:	3301      	adds	r3, #1
     d10:	627b      	str	r3, [r7, #36]	; 0x24
     d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d14:	2b05      	cmp	r3, #5
     d16:	d9ed      	bls.n	cf4 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     d18:	2300      	movs	r3, #0
}
     d1a:	0018      	movs	r0, r3
     d1c:	46bd      	mov	sp, r7
     d1e:	b00b      	add	sp, #44	; 0x2c
     d20:	bd90      	pop	{r4, r7, pc}
     d22:	46c0      	nop			; (mov r8, r8)
     d24:	000044b8 	.word	0x000044b8

00000d28 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
     d28:	b580      	push	{r7, lr}
     d2a:	b082      	sub	sp, #8
     d2c:	af00      	add	r7, sp, #0
     d2e:	0002      	movs	r2, r0
     d30:	1dfb      	adds	r3, r7, #7
     d32:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
     d34:	46c0      	nop			; (mov r8, r8)
     d36:	46bd      	mov	sp, r7
     d38:	b002      	add	sp, #8
     d3a:	bd80      	pop	{r7, pc}

00000d3c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     d3c:	b580      	push	{r7, lr}
     d3e:	b084      	sub	sp, #16
     d40:	af00      	add	r7, sp, #0
     d42:	0002      	movs	r2, r0
     d44:	6039      	str	r1, [r7, #0]
     d46:	1dfb      	adds	r3, r7, #7
     d48:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     d4a:	4b13      	ldr	r3, [pc, #76]	; (d98 <_sercom_set_handler+0x5c>)
     d4c:	781b      	ldrb	r3, [r3, #0]
     d4e:	2201      	movs	r2, #1
     d50:	4053      	eors	r3, r2
     d52:	b2db      	uxtb	r3, r3
     d54:	2b00      	cmp	r3, #0
     d56:	d015      	beq.n	d84 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d58:	2300      	movs	r3, #0
     d5a:	60fb      	str	r3, [r7, #12]
     d5c:	e00c      	b.n	d78 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     d5e:	4b0f      	ldr	r3, [pc, #60]	; (d9c <_sercom_set_handler+0x60>)
     d60:	68fa      	ldr	r2, [r7, #12]
     d62:	0092      	lsls	r2, r2, #2
     d64:	490e      	ldr	r1, [pc, #56]	; (da0 <_sercom_set_handler+0x64>)
     d66:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
     d68:	4b0e      	ldr	r3, [pc, #56]	; (da4 <_sercom_set_handler+0x68>)
     d6a:	68fa      	ldr	r2, [r7, #12]
     d6c:	0092      	lsls	r2, r2, #2
     d6e:	2100      	movs	r1, #0
     d70:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d72:	68fb      	ldr	r3, [r7, #12]
     d74:	3301      	adds	r3, #1
     d76:	60fb      	str	r3, [r7, #12]
     d78:	68fb      	ldr	r3, [r7, #12]
     d7a:	2b05      	cmp	r3, #5
     d7c:	d9ef      	bls.n	d5e <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
     d7e:	4b06      	ldr	r3, [pc, #24]	; (d98 <_sercom_set_handler+0x5c>)
     d80:	2201      	movs	r2, #1
     d82:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     d84:	1dfb      	adds	r3, r7, #7
     d86:	781a      	ldrb	r2, [r3, #0]
     d88:	4b04      	ldr	r3, [pc, #16]	; (d9c <_sercom_set_handler+0x60>)
     d8a:	0092      	lsls	r2, r2, #2
     d8c:	6839      	ldr	r1, [r7, #0]
     d8e:	50d1      	str	r1, [r2, r3]
}
     d90:	46c0      	nop			; (mov r8, r8)
     d92:	46bd      	mov	sp, r7
     d94:	b004      	add	sp, #16
     d96:	bd80      	pop	{r7, pc}
     d98:	2000009e 	.word	0x2000009e
     d9c:	200000a0 	.word	0x200000a0
     da0:	00000d29 	.word	0x00000d29
     da4:	200000dc 	.word	0x200000dc

00000da8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     da8:	b590      	push	{r4, r7, lr}
     daa:	b085      	sub	sp, #20
     dac:	af00      	add	r7, sp, #0
     dae:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     db0:	2308      	movs	r3, #8
     db2:	18fa      	adds	r2, r7, r3
     db4:	4b0c      	ldr	r3, [pc, #48]	; (de8 <_sercom_get_interrupt_vector+0x40>)
     db6:	0010      	movs	r0, r2
     db8:	0019      	movs	r1, r3
     dba:	2306      	movs	r3, #6
     dbc:	001a      	movs	r2, r3
     dbe:	4b0b      	ldr	r3, [pc, #44]	; (dec <_sercom_get_interrupt_vector+0x44>)
     dc0:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     dc2:	230f      	movs	r3, #15
     dc4:	18fc      	adds	r4, r7, r3
     dc6:	687b      	ldr	r3, [r7, #4]
     dc8:	0018      	movs	r0, r3
     dca:	4b09      	ldr	r3, [pc, #36]	; (df0 <_sercom_get_interrupt_vector+0x48>)
     dcc:	4798      	blx	r3
     dce:	0003      	movs	r3, r0
     dd0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     dd2:	230f      	movs	r3, #15
     dd4:	18fb      	adds	r3, r7, r3
     dd6:	781b      	ldrb	r3, [r3, #0]
     dd8:	2208      	movs	r2, #8
     dda:	18ba      	adds	r2, r7, r2
     ddc:	5cd3      	ldrb	r3, [r2, r3]
     dde:	b25b      	sxtb	r3, r3
}
     de0:	0018      	movs	r0, r3
     de2:	46bd      	mov	sp, r7
     de4:	b005      	add	sp, #20
     de6:	bd90      	pop	{r4, r7, pc}
     de8:	000044d0 	.word	0x000044d0
     dec:	000032d1 	.word	0x000032d1
     df0:	00000cd9 	.word	0x00000cd9

00000df4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     df4:	b580      	push	{r7, lr}
     df6:	af00      	add	r7, sp, #0
     df8:	4b03      	ldr	r3, [pc, #12]	; (e08 <SERCOM0_Handler+0x14>)
     dfa:	681b      	ldr	r3, [r3, #0]
     dfc:	2000      	movs	r0, #0
     dfe:	4798      	blx	r3
     e00:	46c0      	nop			; (mov r8, r8)
     e02:	46bd      	mov	sp, r7
     e04:	bd80      	pop	{r7, pc}
     e06:	46c0      	nop			; (mov r8, r8)
     e08:	200000a0 	.word	0x200000a0

00000e0c <SERCOM1_Handler>:
     e0c:	b580      	push	{r7, lr}
     e0e:	af00      	add	r7, sp, #0
     e10:	4b03      	ldr	r3, [pc, #12]	; (e20 <SERCOM1_Handler+0x14>)
     e12:	685b      	ldr	r3, [r3, #4]
     e14:	2001      	movs	r0, #1
     e16:	4798      	blx	r3
     e18:	46c0      	nop			; (mov r8, r8)
     e1a:	46bd      	mov	sp, r7
     e1c:	bd80      	pop	{r7, pc}
     e1e:	46c0      	nop			; (mov r8, r8)
     e20:	200000a0 	.word	0x200000a0

00000e24 <SERCOM2_Handler>:
     e24:	b580      	push	{r7, lr}
     e26:	af00      	add	r7, sp, #0
     e28:	4b03      	ldr	r3, [pc, #12]	; (e38 <SERCOM2_Handler+0x14>)
     e2a:	689b      	ldr	r3, [r3, #8]
     e2c:	2002      	movs	r0, #2
     e2e:	4798      	blx	r3
     e30:	46c0      	nop			; (mov r8, r8)
     e32:	46bd      	mov	sp, r7
     e34:	bd80      	pop	{r7, pc}
     e36:	46c0      	nop			; (mov r8, r8)
     e38:	200000a0 	.word	0x200000a0

00000e3c <SERCOM3_Handler>:
     e3c:	b580      	push	{r7, lr}
     e3e:	af00      	add	r7, sp, #0
     e40:	4b03      	ldr	r3, [pc, #12]	; (e50 <SERCOM3_Handler+0x14>)
     e42:	68db      	ldr	r3, [r3, #12]
     e44:	2003      	movs	r0, #3
     e46:	4798      	blx	r3
     e48:	46c0      	nop			; (mov r8, r8)
     e4a:	46bd      	mov	sp, r7
     e4c:	bd80      	pop	{r7, pc}
     e4e:	46c0      	nop			; (mov r8, r8)
     e50:	200000a0 	.word	0x200000a0

00000e54 <SERCOM4_Handler>:
     e54:	b580      	push	{r7, lr}
     e56:	af00      	add	r7, sp, #0
     e58:	4b03      	ldr	r3, [pc, #12]	; (e68 <SERCOM4_Handler+0x14>)
     e5a:	691b      	ldr	r3, [r3, #16]
     e5c:	2004      	movs	r0, #4
     e5e:	4798      	blx	r3
     e60:	46c0      	nop			; (mov r8, r8)
     e62:	46bd      	mov	sp, r7
     e64:	bd80      	pop	{r7, pc}
     e66:	46c0      	nop			; (mov r8, r8)
     e68:	200000a0 	.word	0x200000a0

00000e6c <SERCOM5_Handler>:
     e6c:	b580      	push	{r7, lr}
     e6e:	af00      	add	r7, sp, #0
     e70:	4b03      	ldr	r3, [pc, #12]	; (e80 <SERCOM5_Handler+0x14>)
     e72:	695b      	ldr	r3, [r3, #20]
     e74:	2005      	movs	r0, #5
     e76:	4798      	blx	r3
     e78:	46c0      	nop			; (mov r8, r8)
     e7a:	46bd      	mov	sp, r7
     e7c:	bd80      	pop	{r7, pc}
     e7e:	46c0      	nop			; (mov r8, r8)
     e80:	200000a0 	.word	0x200000a0

00000e84 <system_gclk_chan_get_config_defaults>:
{
     e84:	b580      	push	{r7, lr}
     e86:	b082      	sub	sp, #8
     e88:	af00      	add	r7, sp, #0
     e8a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     e8c:	687b      	ldr	r3, [r7, #4]
     e8e:	2200      	movs	r2, #0
     e90:	701a      	strb	r2, [r3, #0]
}
     e92:	46c0      	nop			; (mov r8, r8)
     e94:	46bd      	mov	sp, r7
     e96:	b002      	add	sp, #8
     e98:	bd80      	pop	{r7, pc}
	...

00000e9c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     e9c:	b580      	push	{r7, lr}
     e9e:	b082      	sub	sp, #8
     ea0:	af00      	add	r7, sp, #0
     ea2:	0002      	movs	r2, r0
     ea4:	6039      	str	r1, [r7, #0]
     ea6:	1dfb      	adds	r3, r7, #7
     ea8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     eaa:	1dfb      	adds	r3, r7, #7
     eac:	781b      	ldrb	r3, [r3, #0]
     eae:	2b01      	cmp	r3, #1
     eb0:	d00a      	beq.n	ec8 <system_apb_clock_set_mask+0x2c>
     eb2:	2b02      	cmp	r3, #2
     eb4:	d00f      	beq.n	ed6 <system_apb_clock_set_mask+0x3a>
     eb6:	2b00      	cmp	r3, #0
     eb8:	d114      	bne.n	ee4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     eba:	4b0e      	ldr	r3, [pc, #56]	; (ef4 <system_apb_clock_set_mask+0x58>)
     ebc:	4a0d      	ldr	r2, [pc, #52]	; (ef4 <system_apb_clock_set_mask+0x58>)
     ebe:	6991      	ldr	r1, [r2, #24]
     ec0:	683a      	ldr	r2, [r7, #0]
     ec2:	430a      	orrs	r2, r1
     ec4:	619a      	str	r2, [r3, #24]
			break;
     ec6:	e00f      	b.n	ee8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     ec8:	4b0a      	ldr	r3, [pc, #40]	; (ef4 <system_apb_clock_set_mask+0x58>)
     eca:	4a0a      	ldr	r2, [pc, #40]	; (ef4 <system_apb_clock_set_mask+0x58>)
     ecc:	69d1      	ldr	r1, [r2, #28]
     ece:	683a      	ldr	r2, [r7, #0]
     ed0:	430a      	orrs	r2, r1
     ed2:	61da      	str	r2, [r3, #28]
			break;
     ed4:	e008      	b.n	ee8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     ed6:	4b07      	ldr	r3, [pc, #28]	; (ef4 <system_apb_clock_set_mask+0x58>)
     ed8:	4a06      	ldr	r2, [pc, #24]	; (ef4 <system_apb_clock_set_mask+0x58>)
     eda:	6a11      	ldr	r1, [r2, #32]
     edc:	683a      	ldr	r2, [r7, #0]
     ede:	430a      	orrs	r2, r1
     ee0:	621a      	str	r2, [r3, #32]
			break;
     ee2:	e001      	b.n	ee8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     ee4:	2317      	movs	r3, #23
     ee6:	e000      	b.n	eea <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     ee8:	2300      	movs	r3, #0
}
     eea:	0018      	movs	r0, r3
     eec:	46bd      	mov	sp, r7
     eee:	b002      	add	sp, #8
     ef0:	bd80      	pop	{r7, pc}
     ef2:	46c0      	nop			; (mov r8, r8)
     ef4:	40000400 	.word	0x40000400

00000ef8 <system_pinmux_get_config_defaults>:
{
     ef8:	b580      	push	{r7, lr}
     efa:	b082      	sub	sp, #8
     efc:	af00      	add	r7, sp, #0
     efe:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f00:	687b      	ldr	r3, [r7, #4]
     f02:	2280      	movs	r2, #128	; 0x80
     f04:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f06:	687b      	ldr	r3, [r7, #4]
     f08:	2200      	movs	r2, #0
     f0a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     f0c:	687b      	ldr	r3, [r7, #4]
     f0e:	2201      	movs	r2, #1
     f10:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     f12:	687b      	ldr	r3, [r7, #4]
     f14:	2200      	movs	r2, #0
     f16:	70da      	strb	r2, [r3, #3]
}
     f18:	46c0      	nop			; (mov r8, r8)
     f1a:	46bd      	mov	sp, r7
     f1c:	b002      	add	sp, #8
     f1e:	bd80      	pop	{r7, pc}

00000f20 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     f20:	b580      	push	{r7, lr}
     f22:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     f24:	4b05      	ldr	r3, [pc, #20]	; (f3c <system_is_debugger_present+0x1c>)
     f26:	789b      	ldrb	r3, [r3, #2]
     f28:	b2db      	uxtb	r3, r3
     f2a:	001a      	movs	r2, r3
     f2c:	2302      	movs	r3, #2
     f2e:	4013      	ands	r3, r2
     f30:	1e5a      	subs	r2, r3, #1
     f32:	4193      	sbcs	r3, r2
     f34:	b2db      	uxtb	r3, r3
}
     f36:	0018      	movs	r0, r3
     f38:	46bd      	mov	sp, r7
     f3a:	bd80      	pop	{r7, pc}
     f3c:	41002000 	.word	0x41002000

00000f40 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     f40:	b580      	push	{r7, lr}
     f42:	b084      	sub	sp, #16
     f44:	af00      	add	r7, sp, #0
     f46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     f48:	687b      	ldr	r3, [r7, #4]
     f4a:	681b      	ldr	r3, [r3, #0]
     f4c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f4e:	68fb      	ldr	r3, [r7, #12]
     f50:	69db      	ldr	r3, [r3, #28]
     f52:	1e5a      	subs	r2, r3, #1
     f54:	4193      	sbcs	r3, r2
     f56:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     f58:	0018      	movs	r0, r3
     f5a:	46bd      	mov	sp, r7
     f5c:	b004      	add	sp, #16
     f5e:	bd80      	pop	{r7, pc}

00000f60 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     f60:	b580      	push	{r7, lr}
     f62:	b082      	sub	sp, #8
     f64:	af00      	add	r7, sp, #0
     f66:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     f68:	46c0      	nop			; (mov r8, r8)
     f6a:	687b      	ldr	r3, [r7, #4]
     f6c:	0018      	movs	r0, r3
     f6e:	4b04      	ldr	r3, [pc, #16]	; (f80 <_usart_wait_for_sync+0x20>)
     f70:	4798      	blx	r3
     f72:	1e03      	subs	r3, r0, #0
     f74:	d1f9      	bne.n	f6a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     f76:	46c0      	nop			; (mov r8, r8)
     f78:	46bd      	mov	sp, r7
     f7a:	b002      	add	sp, #8
     f7c:	bd80      	pop	{r7, pc}
     f7e:	46c0      	nop			; (mov r8, r8)
     f80:	00000f41 	.word	0x00000f41

00000f84 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
     f84:	b5b0      	push	{r4, r5, r7, lr}
     f86:	b08c      	sub	sp, #48	; 0x30
     f88:	af02      	add	r7, sp, #8
     f8a:	6078      	str	r0, [r7, #4]
     f8c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     f8e:	687b      	ldr	r3, [r7, #4]
     f90:	681b      	ldr	r3, [r3, #0]
     f92:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f94:	687b      	ldr	r3, [r7, #4]
     f96:	681b      	ldr	r3, [r3, #0]
     f98:	0018      	movs	r0, r3
     f9a:	4bab      	ldr	r3, [pc, #684]	; (1248 <_usart_set_config+0x2c4>)
     f9c:	4798      	blx	r3
     f9e:	0003      	movs	r3, r0
     fa0:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     fa2:	697b      	ldr	r3, [r7, #20]
     fa4:	3314      	adds	r3, #20
     fa6:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
     fa8:	2300      	movs	r3, #0
     faa:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
     fac:	2300      	movs	r3, #0
     fae:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     fb0:	230a      	movs	r3, #10
     fb2:	18fb      	adds	r3, r7, r3
     fb4:	2200      	movs	r2, #0
     fb6:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     fb8:	231f      	movs	r3, #31
     fba:	18fb      	adds	r3, r7, r3
     fbc:	2200      	movs	r2, #0
     fbe:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     fc0:	231e      	movs	r3, #30
     fc2:	18fb      	adds	r3, r7, r3
     fc4:	2210      	movs	r2, #16
     fc6:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     fc8:	683b      	ldr	r3, [r7, #0]
     fca:	8a1b      	ldrh	r3, [r3, #16]
     fcc:	2280      	movs	r2, #128	; 0x80
     fce:	01d2      	lsls	r2, r2, #7
     fd0:	4293      	cmp	r3, r2
     fd2:	d01c      	beq.n	100e <_usart_set_config+0x8a>
     fd4:	2280      	movs	r2, #128	; 0x80
     fd6:	01d2      	lsls	r2, r2, #7
     fd8:	4293      	cmp	r3, r2
     fda:	dc06      	bgt.n	fea <_usart_set_config+0x66>
     fdc:	2b00      	cmp	r3, #0
     fde:	d00d      	beq.n	ffc <_usart_set_config+0x78>
     fe0:	2280      	movs	r2, #128	; 0x80
     fe2:	0192      	lsls	r2, r2, #6
     fe4:	4293      	cmp	r3, r2
     fe6:	d024      	beq.n	1032 <_usart_set_config+0xae>
     fe8:	e035      	b.n	1056 <_usart_set_config+0xd2>
     fea:	22c0      	movs	r2, #192	; 0xc0
     fec:	01d2      	lsls	r2, r2, #7
     fee:	4293      	cmp	r3, r2
     ff0:	d028      	beq.n	1044 <_usart_set_config+0xc0>
     ff2:	2280      	movs	r2, #128	; 0x80
     ff4:	0212      	lsls	r2, r2, #8
     ff6:	4293      	cmp	r3, r2
     ff8:	d012      	beq.n	1020 <_usart_set_config+0x9c>
     ffa:	e02c      	b.n	1056 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     ffc:	231f      	movs	r3, #31
     ffe:	18fb      	adds	r3, r7, r3
    1000:	2200      	movs	r2, #0
    1002:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1004:	231e      	movs	r3, #30
    1006:	18fb      	adds	r3, r7, r3
    1008:	2210      	movs	r2, #16
    100a:	701a      	strb	r2, [r3, #0]
			break;
    100c:	e023      	b.n	1056 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    100e:	231f      	movs	r3, #31
    1010:	18fb      	adds	r3, r7, r3
    1012:	2200      	movs	r2, #0
    1014:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1016:	231e      	movs	r3, #30
    1018:	18fb      	adds	r3, r7, r3
    101a:	2208      	movs	r2, #8
    101c:	701a      	strb	r2, [r3, #0]
			break;
    101e:	e01a      	b.n	1056 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1020:	231f      	movs	r3, #31
    1022:	18fb      	adds	r3, r7, r3
    1024:	2200      	movs	r2, #0
    1026:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1028:	231e      	movs	r3, #30
    102a:	18fb      	adds	r3, r7, r3
    102c:	2203      	movs	r2, #3
    102e:	701a      	strb	r2, [r3, #0]
			break;
    1030:	e011      	b.n	1056 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1032:	231f      	movs	r3, #31
    1034:	18fb      	adds	r3, r7, r3
    1036:	2201      	movs	r2, #1
    1038:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    103a:	231e      	movs	r3, #30
    103c:	18fb      	adds	r3, r7, r3
    103e:	2210      	movs	r2, #16
    1040:	701a      	strb	r2, [r3, #0]
			break;
    1042:	e008      	b.n	1056 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1044:	231f      	movs	r3, #31
    1046:	18fb      	adds	r3, r7, r3
    1048:	2201      	movs	r2, #1
    104a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    104c:	231e      	movs	r3, #30
    104e:	18fb      	adds	r3, r7, r3
    1050:	2208      	movs	r2, #8
    1052:	701a      	strb	r2, [r3, #0]
			break;
    1054:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1056:	683b      	ldr	r3, [r7, #0]
    1058:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    105a:	683b      	ldr	r3, [r7, #0]
    105c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    105e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1060:	683b      	ldr	r3, [r7, #0]
    1062:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    1064:	4313      	orrs	r3, r2
		config->sample_rate |
    1066:	683a      	ldr	r2, [r7, #0]
    1068:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    106a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    106c:	683a      	ldr	r2, [r7, #0]
    106e:	7e12      	ldrb	r2, [r2, #24]
    1070:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    1072:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1074:	683a      	ldr	r2, [r7, #0]
    1076:	2126      	movs	r1, #38	; 0x26
    1078:	5c52      	ldrb	r2, [r2, r1]
    107a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    107c:	4313      	orrs	r3, r2
    107e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    1080:	231d      	movs	r3, #29
    1082:	18fb      	adds	r3, r7, r3
    1084:	2200      	movs	r2, #0
    1086:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    1088:	683b      	ldr	r3, [r7, #0]
    108a:	685b      	ldr	r3, [r3, #4]
    108c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    108e:	68fb      	ldr	r3, [r7, #12]
    1090:	2b00      	cmp	r3, #0
    1092:	d01e      	beq.n	10d2 <_usart_set_config+0x14e>
    1094:	2280      	movs	r2, #128	; 0x80
    1096:	0552      	lsls	r2, r2, #21
    1098:	4293      	cmp	r3, r2
    109a:	d14f      	bne.n	113c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    109c:	683b      	ldr	r3, [r7, #0]
    109e:	2227      	movs	r2, #39	; 0x27
    10a0:	5c9b      	ldrb	r3, [r3, r2]
    10a2:	2201      	movs	r2, #1
    10a4:	4053      	eors	r3, r2
    10a6:	b2db      	uxtb	r3, r3
    10a8:	2b00      	cmp	r3, #0
    10aa:	d046      	beq.n	113a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    10ac:	683b      	ldr	r3, [r7, #0]
    10ae:	6a1d      	ldr	r5, [r3, #32]
    10b0:	693b      	ldr	r3, [r7, #16]
    10b2:	b2db      	uxtb	r3, r3
    10b4:	0018      	movs	r0, r3
    10b6:	4b65      	ldr	r3, [pc, #404]	; (124c <_usart_set_config+0x2c8>)
    10b8:	4798      	blx	r3
    10ba:	0001      	movs	r1, r0
    10bc:	231d      	movs	r3, #29
    10be:	18fc      	adds	r4, r7, r3
    10c0:	230a      	movs	r3, #10
    10c2:	18fb      	adds	r3, r7, r3
    10c4:	001a      	movs	r2, r3
    10c6:	0028      	movs	r0, r5
    10c8:	4b61      	ldr	r3, [pc, #388]	; (1250 <_usart_set_config+0x2cc>)
    10ca:	4798      	blx	r3
    10cc:	0003      	movs	r3, r0
    10ce:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    10d0:	e033      	b.n	113a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    10d2:	683b      	ldr	r3, [r7, #0]
    10d4:	2227      	movs	r2, #39	; 0x27
    10d6:	5c9b      	ldrb	r3, [r3, r2]
    10d8:	2b00      	cmp	r3, #0
    10da:	d014      	beq.n	1106 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    10dc:	683b      	ldr	r3, [r7, #0]
    10de:	6a18      	ldr	r0, [r3, #32]
    10e0:	683b      	ldr	r3, [r7, #0]
    10e2:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    10e4:	231d      	movs	r3, #29
    10e6:	18fc      	adds	r4, r7, r3
    10e8:	231f      	movs	r3, #31
    10ea:	18fb      	adds	r3, r7, r3
    10ec:	781d      	ldrb	r5, [r3, #0]
    10ee:	230a      	movs	r3, #10
    10f0:	18fa      	adds	r2, r7, r3
    10f2:	231e      	movs	r3, #30
    10f4:	18fb      	adds	r3, r7, r3
    10f6:	781b      	ldrb	r3, [r3, #0]
    10f8:	9300      	str	r3, [sp, #0]
    10fa:	002b      	movs	r3, r5
    10fc:	4d55      	ldr	r5, [pc, #340]	; (1254 <_usart_set_config+0x2d0>)
    10fe:	47a8      	blx	r5
    1100:	0003      	movs	r3, r0
    1102:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    1104:	e01a      	b.n	113c <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    1106:	683b      	ldr	r3, [r7, #0]
    1108:	6a1d      	ldr	r5, [r3, #32]
    110a:	693b      	ldr	r3, [r7, #16]
    110c:	b2db      	uxtb	r3, r3
    110e:	0018      	movs	r0, r3
    1110:	4b4e      	ldr	r3, [pc, #312]	; (124c <_usart_set_config+0x2c8>)
    1112:	4798      	blx	r3
				status_code =
    1114:	231d      	movs	r3, #29
    1116:	18fc      	adds	r4, r7, r3
    1118:	231f      	movs	r3, #31
    111a:	18fb      	adds	r3, r7, r3
    111c:	7819      	ldrb	r1, [r3, #0]
    111e:	230a      	movs	r3, #10
    1120:	18fa      	adds	r2, r7, r3
    1122:	231e      	movs	r3, #30
    1124:	18fb      	adds	r3, r7, r3
    1126:	781b      	ldrb	r3, [r3, #0]
    1128:	9300      	str	r3, [sp, #0]
    112a:	000b      	movs	r3, r1
    112c:	0001      	movs	r1, r0
    112e:	0028      	movs	r0, r5
    1130:	4d48      	ldr	r5, [pc, #288]	; (1254 <_usart_set_config+0x2d0>)
    1132:	47a8      	blx	r5
    1134:	0003      	movs	r3, r0
    1136:	7023      	strb	r3, [r4, #0]
			break;
    1138:	e000      	b.n	113c <_usart_set_config+0x1b8>
			break;
    113a:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    113c:	231d      	movs	r3, #29
    113e:	18fb      	adds	r3, r7, r3
    1140:	781b      	ldrb	r3, [r3, #0]
    1142:	2b00      	cmp	r3, #0
    1144:	d003      	beq.n	114e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    1146:	231d      	movs	r3, #29
    1148:	18fb      	adds	r3, r7, r3
    114a:	781b      	ldrb	r3, [r3, #0]
    114c:	e077      	b.n	123e <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    114e:	683b      	ldr	r3, [r7, #0]
    1150:	7e5b      	ldrb	r3, [r3, #25]
    1152:	2b00      	cmp	r3, #0
    1154:	d003      	beq.n	115e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1156:	683b      	ldr	r3, [r7, #0]
    1158:	7e9a      	ldrb	r2, [r3, #26]
    115a:	69bb      	ldr	r3, [r7, #24]
    115c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    115e:	687b      	ldr	r3, [r7, #4]
    1160:	0018      	movs	r0, r3
    1162:	4b3d      	ldr	r3, [pc, #244]	; (1258 <_usart_set_config+0x2d4>)
    1164:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    1166:	230a      	movs	r3, #10
    1168:	18fb      	adds	r3, r7, r3
    116a:	881a      	ldrh	r2, [r3, #0]
    116c:	69bb      	ldr	r3, [r7, #24]
    116e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    1170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1172:	68fb      	ldr	r3, [r7, #12]
    1174:	4313      	orrs	r3, r2
    1176:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    1178:	683b      	ldr	r3, [r7, #0]
    117a:	2227      	movs	r2, #39	; 0x27
    117c:	5c9b      	ldrb	r3, [r3, r2]
    117e:	2201      	movs	r2, #1
    1180:	4053      	eors	r3, r2
    1182:	b2db      	uxtb	r3, r3
    1184:	2b00      	cmp	r3, #0
    1186:	d003      	beq.n	1190 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    118a:	2204      	movs	r2, #4
    118c:	4313      	orrs	r3, r2
    118e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1190:	683b      	ldr	r3, [r7, #0]
    1192:	7e5b      	ldrb	r3, [r3, #25]
    1194:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1196:	683b      	ldr	r3, [r7, #0]
    1198:	7f1b      	ldrb	r3, [r3, #28]
    119a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    119c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    119e:	683b      	ldr	r3, [r7, #0]
    11a0:	7f5b      	ldrb	r3, [r3, #29]
    11a2:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    11a4:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    11a6:	683b      	ldr	r3, [r7, #0]
    11a8:	2124      	movs	r1, #36	; 0x24
    11aa:	5c5b      	ldrb	r3, [r3, r1]
    11ac:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    11ae:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    11b0:	683b      	ldr	r3, [r7, #0]
    11b2:	2125      	movs	r1, #37	; 0x25
    11b4:	5c5b      	ldrb	r3, [r3, r1]
    11b6:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    11b8:	4313      	orrs	r3, r2
	ctrlb =  
    11ba:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    11bc:	683b      	ldr	r3, [r7, #0]
    11be:	7a9b      	ldrb	r3, [r3, #10]
    11c0:	001a      	movs	r2, r3
    11c2:	6a3b      	ldr	r3, [r7, #32]
    11c4:	4313      	orrs	r3, r2
    11c6:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    11c8:	683b      	ldr	r3, [r7, #0]
    11ca:	7adb      	ldrb	r3, [r3, #11]
    11cc:	001a      	movs	r2, r3
    11ce:	6a3b      	ldr	r3, [r7, #32]
    11d0:	4313      	orrs	r3, r2
    11d2:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    11d4:	683b      	ldr	r3, [r7, #0]
    11d6:	891b      	ldrh	r3, [r3, #8]
    11d8:	2bff      	cmp	r3, #255	; 0xff
    11da:	d00b      	beq.n	11f4 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    11dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    11de:	2280      	movs	r2, #128	; 0x80
    11e0:	0452      	lsls	r2, r2, #17
    11e2:	4313      	orrs	r3, r2
    11e4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    11e6:	683b      	ldr	r3, [r7, #0]
    11e8:	891b      	ldrh	r3, [r3, #8]
    11ea:	001a      	movs	r2, r3
    11ec:	6a3b      	ldr	r3, [r7, #32]
    11ee:	4313      	orrs	r3, r2
    11f0:	623b      	str	r3, [r7, #32]
    11f2:	e008      	b.n	1206 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    11f4:	683b      	ldr	r3, [r7, #0]
    11f6:	7edb      	ldrb	r3, [r3, #27]
    11f8:	2b00      	cmp	r3, #0
    11fa:	d004      	beq.n	1206 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    11fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    11fe:	2280      	movs	r2, #128	; 0x80
    1200:	04d2      	lsls	r2, r2, #19
    1202:	4313      	orrs	r3, r2
    1204:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	222c      	movs	r2, #44	; 0x2c
    120a:	5c9b      	ldrb	r3, [r3, r2]
    120c:	2b00      	cmp	r3, #0
    120e:	d103      	bne.n	1218 <_usart_set_config+0x294>
    1210:	4b12      	ldr	r3, [pc, #72]	; (125c <_usart_set_config+0x2d8>)
    1212:	4798      	blx	r3
    1214:	1e03      	subs	r3, r0, #0
    1216:	d003      	beq.n	1220 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    121a:	2280      	movs	r2, #128	; 0x80
    121c:	4313      	orrs	r3, r2
    121e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1220:	687b      	ldr	r3, [r7, #4]
    1222:	0018      	movs	r0, r3
    1224:	4b0c      	ldr	r3, [pc, #48]	; (1258 <_usart_set_config+0x2d4>)
    1226:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1228:	69bb      	ldr	r3, [r7, #24]
    122a:	6a3a      	ldr	r2, [r7, #32]
    122c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    122e:	687b      	ldr	r3, [r7, #4]
    1230:	0018      	movs	r0, r3
    1232:	4b09      	ldr	r3, [pc, #36]	; (1258 <_usart_set_config+0x2d4>)
    1234:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    1236:	69bb      	ldr	r3, [r7, #24]
    1238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    123a:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    123c:	2300      	movs	r3, #0
}
    123e:	0018      	movs	r0, r3
    1240:	46bd      	mov	sp, r7
    1242:	b00a      	add	sp, #40	; 0x28
    1244:	bdb0      	pop	{r4, r5, r7, pc}
    1246:	46c0      	nop			; (mov r8, r8)
    1248:	00000cd9 	.word	0x00000cd9
    124c:	00002555 	.word	0x00002555
    1250:	00000853 	.word	0x00000853
    1254:	000008d1 	.word	0x000008d1
    1258:	00000f61 	.word	0x00000f61
    125c:	00000f21 	.word	0x00000f21

00001260 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1260:	b590      	push	{r4, r7, lr}
    1262:	b093      	sub	sp, #76	; 0x4c
    1264:	af00      	add	r7, sp, #0
    1266:	60f8      	str	r0, [r7, #12]
    1268:	60b9      	str	r1, [r7, #8]
    126a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    126c:	233b      	movs	r3, #59	; 0x3b
    126e:	18fb      	adds	r3, r7, r3
    1270:	2200      	movs	r2, #0
    1272:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1274:	68fb      	ldr	r3, [r7, #12]
    1276:	68ba      	ldr	r2, [r7, #8]
    1278:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    127a:	68fb      	ldr	r3, [r7, #12]
    127c:	681b      	ldr	r3, [r3, #0]
    127e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1280:	68fb      	ldr	r3, [r7, #12]
    1282:	681b      	ldr	r3, [r3, #0]
    1284:	0018      	movs	r0, r3
    1286:	4b86      	ldr	r3, [pc, #536]	; (14a0 <usart_init+0x240>)
    1288:	4798      	blx	r3
    128a:	0003      	movs	r3, r0
    128c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    128e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1290:	3302      	adds	r3, #2
    1292:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1296:	3314      	adds	r3, #20
    1298:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    129a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    129c:	681b      	ldr	r3, [r3, #0]
    129e:	2201      	movs	r2, #1
    12a0:	4013      	ands	r3, r2
    12a2:	d001      	beq.n	12a8 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    12a4:	2305      	movs	r3, #5
    12a6:	e0f6      	b.n	1496 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    12a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12aa:	681b      	ldr	r3, [r3, #0]
    12ac:	2202      	movs	r2, #2
    12ae:	4013      	ands	r3, r2
    12b0:	d001      	beq.n	12b6 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    12b2:	231c      	movs	r3, #28
    12b4:	e0ef      	b.n	1496 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    12b6:	2201      	movs	r2, #1
    12b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    12ba:	409a      	lsls	r2, r3
    12bc:	0013      	movs	r3, r2
    12be:	0019      	movs	r1, r3
    12c0:	2002      	movs	r0, #2
    12c2:	4b78      	ldr	r3, [pc, #480]	; (14a4 <usart_init+0x244>)
    12c4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    12c6:	2324      	movs	r3, #36	; 0x24
    12c8:	18fb      	adds	r3, r7, r3
    12ca:	0018      	movs	r0, r3
    12cc:	4b76      	ldr	r3, [pc, #472]	; (14a8 <usart_init+0x248>)
    12ce:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    12d0:	687b      	ldr	r3, [r7, #4]
    12d2:	222d      	movs	r2, #45	; 0x2d
    12d4:	5c9a      	ldrb	r2, [r3, r2]
    12d6:	2324      	movs	r3, #36	; 0x24
    12d8:	18fb      	adds	r3, r7, r3
    12da:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    12dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    12de:	b2db      	uxtb	r3, r3
    12e0:	2224      	movs	r2, #36	; 0x24
    12e2:	18ba      	adds	r2, r7, r2
    12e4:	0011      	movs	r1, r2
    12e6:	0018      	movs	r0, r3
    12e8:	4b70      	ldr	r3, [pc, #448]	; (14ac <usart_init+0x24c>)
    12ea:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    12ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    12ee:	b2db      	uxtb	r3, r3
    12f0:	0018      	movs	r0, r3
    12f2:	4b6f      	ldr	r3, [pc, #444]	; (14b0 <usart_init+0x250>)
    12f4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	222d      	movs	r2, #45	; 0x2d
    12fa:	5c9b      	ldrb	r3, [r3, r2]
    12fc:	2100      	movs	r1, #0
    12fe:	0018      	movs	r0, r3
    1300:	4b6c      	ldr	r3, [pc, #432]	; (14b4 <usart_init+0x254>)
    1302:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    1304:	687b      	ldr	r3, [r7, #4]
    1306:	7ada      	ldrb	r2, [r3, #11]
    1308:	68fb      	ldr	r3, [r7, #12]
    130a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    130c:	687b      	ldr	r3, [r7, #4]
    130e:	2224      	movs	r2, #36	; 0x24
    1310:	5c9a      	ldrb	r2, [r3, r2]
    1312:	68fb      	ldr	r3, [r7, #12]
    1314:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1316:	687b      	ldr	r3, [r7, #4]
    1318:	2225      	movs	r2, #37	; 0x25
    131a:	5c9a      	ldrb	r2, [r3, r2]
    131c:	68fb      	ldr	r3, [r7, #12]
    131e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1320:	687b      	ldr	r3, [r7, #4]
    1322:	7eda      	ldrb	r2, [r3, #27]
    1324:	68fb      	ldr	r3, [r7, #12]
    1326:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1328:	687b      	ldr	r3, [r7, #4]
    132a:	7f1a      	ldrb	r2, [r3, #28]
    132c:	68fb      	ldr	r3, [r7, #12]
    132e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    1330:	233b      	movs	r3, #59	; 0x3b
    1332:	18fc      	adds	r4, r7, r3
    1334:	687a      	ldr	r2, [r7, #4]
    1336:	68fb      	ldr	r3, [r7, #12]
    1338:	0011      	movs	r1, r2
    133a:	0018      	movs	r0, r3
    133c:	4b5e      	ldr	r3, [pc, #376]	; (14b8 <usart_init+0x258>)
    133e:	4798      	blx	r3
    1340:	0003      	movs	r3, r0
    1342:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    1344:	233b      	movs	r3, #59	; 0x3b
    1346:	18fb      	adds	r3, r7, r3
    1348:	781b      	ldrb	r3, [r3, #0]
    134a:	2b00      	cmp	r3, #0
    134c:	d003      	beq.n	1356 <usart_init+0xf6>
		return status_code;
    134e:	233b      	movs	r3, #59	; 0x3b
    1350:	18fb      	adds	r3, r7, r3
    1352:	781b      	ldrb	r3, [r3, #0]
    1354:	e09f      	b.n	1496 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    1356:	2320      	movs	r3, #32
    1358:	18fb      	adds	r3, r7, r3
    135a:	0018      	movs	r0, r3
    135c:	4b57      	ldr	r3, [pc, #348]	; (14bc <usart_init+0x25c>)
    135e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1360:	2320      	movs	r3, #32
    1362:	18fb      	adds	r3, r7, r3
    1364:	2200      	movs	r2, #0
    1366:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1368:	2320      	movs	r3, #32
    136a:	18fb      	adds	r3, r7, r3
    136c:	2200      	movs	r2, #0
    136e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    1370:	687b      	ldr	r3, [r7, #4]
    1372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    1374:	2310      	movs	r3, #16
    1376:	18fb      	adds	r3, r7, r3
    1378:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    137a:	687b      	ldr	r3, [r7, #4]
    137c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    137e:	2310      	movs	r3, #16
    1380:	18fb      	adds	r3, r7, r3
    1382:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    1384:	687b      	ldr	r3, [r7, #4]
    1386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    1388:	2310      	movs	r3, #16
    138a:	18fb      	adds	r3, r7, r3
    138c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    138e:	687b      	ldr	r3, [r7, #4]
    1390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    1392:	2310      	movs	r3, #16
    1394:	18fb      	adds	r3, r7, r3
    1396:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1398:	2347      	movs	r3, #71	; 0x47
    139a:	18fb      	adds	r3, r7, r3
    139c:	2200      	movs	r2, #0
    139e:	701a      	strb	r2, [r3, #0]
    13a0:	e02c      	b.n	13fc <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    13a2:	2347      	movs	r3, #71	; 0x47
    13a4:	18fb      	adds	r3, r7, r3
    13a6:	781a      	ldrb	r2, [r3, #0]
    13a8:	2310      	movs	r3, #16
    13aa:	18fb      	adds	r3, r7, r3
    13ac:	0092      	lsls	r2, r2, #2
    13ae:	58d3      	ldr	r3, [r2, r3]
    13b0:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    13b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    13b4:	2b00      	cmp	r3, #0
    13b6:	d109      	bne.n	13cc <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    13b8:	2347      	movs	r3, #71	; 0x47
    13ba:	18fb      	adds	r3, r7, r3
    13bc:	781a      	ldrb	r2, [r3, #0]
    13be:	68bb      	ldr	r3, [r7, #8]
    13c0:	0011      	movs	r1, r2
    13c2:	0018      	movs	r0, r3
    13c4:	4b3e      	ldr	r3, [pc, #248]	; (14c0 <usart_init+0x260>)
    13c6:	4798      	blx	r3
    13c8:	0003      	movs	r3, r0
    13ca:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    13cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    13ce:	3301      	adds	r3, #1
    13d0:	d00d      	beq.n	13ee <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    13d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    13d4:	b2da      	uxtb	r2, r3
    13d6:	2320      	movs	r3, #32
    13d8:	18fb      	adds	r3, r7, r3
    13da:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    13dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    13de:	0c1b      	lsrs	r3, r3, #16
    13e0:	b2db      	uxtb	r3, r3
    13e2:	2220      	movs	r2, #32
    13e4:	18ba      	adds	r2, r7, r2
    13e6:	0011      	movs	r1, r2
    13e8:	0018      	movs	r0, r3
    13ea:	4b36      	ldr	r3, [pc, #216]	; (14c4 <usart_init+0x264>)
    13ec:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    13ee:	2347      	movs	r3, #71	; 0x47
    13f0:	18fb      	adds	r3, r7, r3
    13f2:	781a      	ldrb	r2, [r3, #0]
    13f4:	2347      	movs	r3, #71	; 0x47
    13f6:	18fb      	adds	r3, r7, r3
    13f8:	3201      	adds	r2, #1
    13fa:	701a      	strb	r2, [r3, #0]
    13fc:	2347      	movs	r3, #71	; 0x47
    13fe:	18fb      	adds	r3, r7, r3
    1400:	781b      	ldrb	r3, [r3, #0]
    1402:	2b03      	cmp	r3, #3
    1404:	d9cd      	bls.n	13a2 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    1406:	2300      	movs	r3, #0
    1408:	63fb      	str	r3, [r7, #60]	; 0x3c
    140a:	e00a      	b.n	1422 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    140c:	68fa      	ldr	r2, [r7, #12]
    140e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1410:	3302      	adds	r3, #2
    1412:	009b      	lsls	r3, r3, #2
    1414:	18d3      	adds	r3, r2, r3
    1416:	3304      	adds	r3, #4
    1418:	2200      	movs	r2, #0
    141a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    141c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    141e:	3301      	adds	r3, #1
    1420:	63fb      	str	r3, [r7, #60]	; 0x3c
    1422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1424:	2b05      	cmp	r3, #5
    1426:	d9f1      	bls.n	140c <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    1428:	68fb      	ldr	r3, [r7, #12]
    142a:	2200      	movs	r2, #0
    142c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    142e:	68fb      	ldr	r3, [r7, #12]
    1430:	2200      	movs	r2, #0
    1432:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1434:	68fb      	ldr	r3, [r7, #12]
    1436:	2200      	movs	r2, #0
    1438:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    143a:	68fb      	ldr	r3, [r7, #12]
    143c:	2200      	movs	r2, #0
    143e:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1440:	68fb      	ldr	r3, [r7, #12]
    1442:	2230      	movs	r2, #48	; 0x30
    1444:	2100      	movs	r1, #0
    1446:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    1448:	68fb      	ldr	r3, [r7, #12]
    144a:	2231      	movs	r2, #49	; 0x31
    144c:	2100      	movs	r1, #0
    144e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    1450:	68fb      	ldr	r3, [r7, #12]
    1452:	2232      	movs	r2, #50	; 0x32
    1454:	2100      	movs	r1, #0
    1456:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    1458:	68fb      	ldr	r3, [r7, #12]
    145a:	2233      	movs	r2, #51	; 0x33
    145c:	2100      	movs	r1, #0
    145e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1460:	68fb      	ldr	r3, [r7, #12]
    1462:	681b      	ldr	r3, [r3, #0]
    1464:	2227      	movs	r2, #39	; 0x27
    1466:	18bc      	adds	r4, r7, r2
    1468:	0018      	movs	r0, r3
    146a:	4b0d      	ldr	r3, [pc, #52]	; (14a0 <usart_init+0x240>)
    146c:	4798      	blx	r3
    146e:	0003      	movs	r3, r0
    1470:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1472:	4a15      	ldr	r2, [pc, #84]	; (14c8 <usart_init+0x268>)
    1474:	2327      	movs	r3, #39	; 0x27
    1476:	18fb      	adds	r3, r7, r3
    1478:	781b      	ldrb	r3, [r3, #0]
    147a:	0011      	movs	r1, r2
    147c:	0018      	movs	r0, r3
    147e:	4b13      	ldr	r3, [pc, #76]	; (14cc <usart_init+0x26c>)
    1480:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1482:	2327      	movs	r3, #39	; 0x27
    1484:	18fb      	adds	r3, r7, r3
    1486:	781a      	ldrb	r2, [r3, #0]
    1488:	4b11      	ldr	r3, [pc, #68]	; (14d0 <usart_init+0x270>)
    148a:	0092      	lsls	r2, r2, #2
    148c:	68f9      	ldr	r1, [r7, #12]
    148e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    1490:	233b      	movs	r3, #59	; 0x3b
    1492:	18fb      	adds	r3, r7, r3
    1494:	781b      	ldrb	r3, [r3, #0]
}
    1496:	0018      	movs	r0, r3
    1498:	46bd      	mov	sp, r7
    149a:	b013      	add	sp, #76	; 0x4c
    149c:	bd90      	pop	{r4, r7, pc}
    149e:	46c0      	nop			; (mov r8, r8)
    14a0:	00000cd9 	.word	0x00000cd9
    14a4:	00000e9d 	.word	0x00000e9d
    14a8:	00000e85 	.word	0x00000e85
    14ac:	00002431 	.word	0x00002431
    14b0:	00002475 	.word	0x00002475
    14b4:	00000a91 	.word	0x00000a91
    14b8:	00000f85 	.word	0x00000f85
    14bc:	00000ef9 	.word	0x00000ef9
    14c0:	00000b1d 	.word	0x00000b1d
    14c4:	0000271d 	.word	0x0000271d
    14c8:	00001669 	.word	0x00001669
    14cc:	00000d3d 	.word	0x00000d3d
    14d0:	200000dc 	.word	0x200000dc

000014d4 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    14d4:	b580      	push	{r7, lr}
    14d6:	b084      	sub	sp, #16
    14d8:	af00      	add	r7, sp, #0
    14da:	6078      	str	r0, [r7, #4]
    14dc:	000a      	movs	r2, r1
    14de:	1cbb      	adds	r3, r7, #2
    14e0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    14e2:	687b      	ldr	r3, [r7, #4]
    14e4:	681b      	ldr	r3, [r3, #0]
    14e6:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    14e8:	687b      	ldr	r3, [r7, #4]
    14ea:	79db      	ldrb	r3, [r3, #7]
    14ec:	2201      	movs	r2, #1
    14ee:	4053      	eors	r3, r2
    14f0:	b2db      	uxtb	r3, r3
    14f2:	2b00      	cmp	r3, #0
    14f4:	d001      	beq.n	14fa <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    14f6:	231c      	movs	r3, #28
    14f8:	e017      	b.n	152a <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    14fa:	687b      	ldr	r3, [r7, #4]
    14fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    14fe:	b29b      	uxth	r3, r3
    1500:	2b00      	cmp	r3, #0
    1502:	d001      	beq.n	1508 <usart_write_wait+0x34>
		return STATUS_BUSY;
    1504:	2305      	movs	r3, #5
    1506:	e010      	b.n	152a <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1508:	687b      	ldr	r3, [r7, #4]
    150a:	0018      	movs	r0, r3
    150c:	4b09      	ldr	r3, [pc, #36]	; (1534 <usart_write_wait+0x60>)
    150e:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    1510:	68fb      	ldr	r3, [r7, #12]
    1512:	1cba      	adds	r2, r7, #2
    1514:	8812      	ldrh	r2, [r2, #0]
    1516:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1518:	46c0      	nop			; (mov r8, r8)
    151a:	68fb      	ldr	r3, [r7, #12]
    151c:	7e1b      	ldrb	r3, [r3, #24]
    151e:	b2db      	uxtb	r3, r3
    1520:	001a      	movs	r2, r3
    1522:	2302      	movs	r3, #2
    1524:	4013      	ands	r3, r2
    1526:	d0f8      	beq.n	151a <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1528:	2300      	movs	r3, #0
}
    152a:	0018      	movs	r0, r3
    152c:	46bd      	mov	sp, r7
    152e:	b004      	add	sp, #16
    1530:	bd80      	pop	{r7, pc}
    1532:	46c0      	nop			; (mov r8, r8)
    1534:	00000f61 	.word	0x00000f61

00001538 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    1538:	b580      	push	{r7, lr}
    153a:	b084      	sub	sp, #16
    153c:	af00      	add	r7, sp, #0
    153e:	6078      	str	r0, [r7, #4]
    1540:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1542:	687b      	ldr	r3, [r7, #4]
    1544:	681b      	ldr	r3, [r3, #0]
    1546:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1548:	687b      	ldr	r3, [r7, #4]
    154a:	799b      	ldrb	r3, [r3, #6]
    154c:	2201      	movs	r2, #1
    154e:	4053      	eors	r3, r2
    1550:	b2db      	uxtb	r3, r3
    1552:	2b00      	cmp	r3, #0
    1554:	d001      	beq.n	155a <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    1556:	231c      	movs	r3, #28
    1558:	e05e      	b.n	1618 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    155a:	687b      	ldr	r3, [r7, #4]
    155c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    155e:	b29b      	uxth	r3, r3
    1560:	2b00      	cmp	r3, #0
    1562:	d001      	beq.n	1568 <usart_read_wait+0x30>
		return STATUS_BUSY;
    1564:	2305      	movs	r3, #5
    1566:	e057      	b.n	1618 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1568:	68fb      	ldr	r3, [r7, #12]
    156a:	7e1b      	ldrb	r3, [r3, #24]
    156c:	b2db      	uxtb	r3, r3
    156e:	001a      	movs	r2, r3
    1570:	2304      	movs	r3, #4
    1572:	4013      	ands	r3, r2
    1574:	d101      	bne.n	157a <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    1576:	2305      	movs	r3, #5
    1578:	e04e      	b.n	1618 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    157a:	687b      	ldr	r3, [r7, #4]
    157c:	0018      	movs	r0, r3
    157e:	4b28      	ldr	r3, [pc, #160]	; (1620 <usart_read_wait+0xe8>)
    1580:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1582:	68fb      	ldr	r3, [r7, #12]
    1584:	8b5b      	ldrh	r3, [r3, #26]
    1586:	b29b      	uxth	r3, r3
    1588:	b2da      	uxtb	r2, r3
    158a:	230b      	movs	r3, #11
    158c:	18fb      	adds	r3, r7, r3
    158e:	213f      	movs	r1, #63	; 0x3f
    1590:	400a      	ands	r2, r1
    1592:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    1594:	230b      	movs	r3, #11
    1596:	18fb      	adds	r3, r7, r3
    1598:	781b      	ldrb	r3, [r3, #0]
    159a:	2b00      	cmp	r3, #0
    159c:	d036      	beq.n	160c <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    159e:	230b      	movs	r3, #11
    15a0:	18fb      	adds	r3, r7, r3
    15a2:	781b      	ldrb	r3, [r3, #0]
    15a4:	2202      	movs	r2, #2
    15a6:	4013      	ands	r3, r2
    15a8:	d004      	beq.n	15b4 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    15aa:	68fb      	ldr	r3, [r7, #12]
    15ac:	2202      	movs	r2, #2
    15ae:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    15b0:	231a      	movs	r3, #26
    15b2:	e031      	b.n	1618 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    15b4:	230b      	movs	r3, #11
    15b6:	18fb      	adds	r3, r7, r3
    15b8:	781b      	ldrb	r3, [r3, #0]
    15ba:	2204      	movs	r2, #4
    15bc:	4013      	ands	r3, r2
    15be:	d004      	beq.n	15ca <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    15c0:	68fb      	ldr	r3, [r7, #12]
    15c2:	2204      	movs	r2, #4
    15c4:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    15c6:	231e      	movs	r3, #30
    15c8:	e026      	b.n	1618 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    15ca:	230b      	movs	r3, #11
    15cc:	18fb      	adds	r3, r7, r3
    15ce:	781b      	ldrb	r3, [r3, #0]
    15d0:	2201      	movs	r2, #1
    15d2:	4013      	ands	r3, r2
    15d4:	d004      	beq.n	15e0 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    15d6:	68fb      	ldr	r3, [r7, #12]
    15d8:	2201      	movs	r2, #1
    15da:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    15dc:	2313      	movs	r3, #19
    15de:	e01b      	b.n	1618 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    15e0:	230b      	movs	r3, #11
    15e2:	18fb      	adds	r3, r7, r3
    15e4:	781b      	ldrb	r3, [r3, #0]
    15e6:	2210      	movs	r2, #16
    15e8:	4013      	ands	r3, r2
    15ea:	d004      	beq.n	15f6 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    15ec:	68fb      	ldr	r3, [r7, #12]
    15ee:	2210      	movs	r2, #16
    15f0:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    15f2:	2342      	movs	r3, #66	; 0x42
    15f4:	e010      	b.n	1618 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    15f6:	230b      	movs	r3, #11
    15f8:	18fb      	adds	r3, r7, r3
    15fa:	781b      	ldrb	r3, [r3, #0]
    15fc:	2220      	movs	r2, #32
    15fe:	4013      	ands	r3, r2
    1600:	d004      	beq.n	160c <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1602:	68fb      	ldr	r3, [r7, #12]
    1604:	2220      	movs	r2, #32
    1606:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    1608:	2341      	movs	r3, #65	; 0x41
    160a:	e005      	b.n	1618 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    160c:	68fb      	ldr	r3, [r7, #12]
    160e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1610:	b29a      	uxth	r2, r3
    1612:	683b      	ldr	r3, [r7, #0]
    1614:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    1616:	2300      	movs	r3, #0
}
    1618:	0018      	movs	r0, r3
    161a:	46bd      	mov	sp, r7
    161c:	b004      	add	sp, #16
    161e:	bd80      	pop	{r7, pc}
    1620:	00000f61 	.word	0x00000f61

00001624 <usart_is_syncing>:
{
    1624:	b580      	push	{r7, lr}
    1626:	b084      	sub	sp, #16
    1628:	af00      	add	r7, sp, #0
    162a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    162c:	687b      	ldr	r3, [r7, #4]
    162e:	681b      	ldr	r3, [r3, #0]
    1630:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    1632:	68fb      	ldr	r3, [r7, #12]
    1634:	69db      	ldr	r3, [r3, #28]
    1636:	1e5a      	subs	r2, r3, #1
    1638:	4193      	sbcs	r3, r2
    163a:	b2db      	uxtb	r3, r3
}
    163c:	0018      	movs	r0, r3
    163e:	46bd      	mov	sp, r7
    1640:	b004      	add	sp, #16
    1642:	bd80      	pop	{r7, pc}

00001644 <_usart_wait_for_sync>:
{
    1644:	b580      	push	{r7, lr}
    1646:	b082      	sub	sp, #8
    1648:	af00      	add	r7, sp, #0
    164a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    164c:	46c0      	nop			; (mov r8, r8)
    164e:	687b      	ldr	r3, [r7, #4]
    1650:	0018      	movs	r0, r3
    1652:	4b04      	ldr	r3, [pc, #16]	; (1664 <_usart_wait_for_sync+0x20>)
    1654:	4798      	blx	r3
    1656:	1e03      	subs	r3, r0, #0
    1658:	d1f9      	bne.n	164e <_usart_wait_for_sync+0xa>
}
    165a:	46c0      	nop			; (mov r8, r8)
    165c:	46bd      	mov	sp, r7
    165e:	b002      	add	sp, #8
    1660:	bd80      	pop	{r7, pc}
    1662:	46c0      	nop			; (mov r8, r8)
    1664:	00001625 	.word	0x00001625

00001668 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1668:	b580      	push	{r7, lr}
    166a:	b088      	sub	sp, #32
    166c:	af00      	add	r7, sp, #0
    166e:	0002      	movs	r2, r0
    1670:	1dfb      	adds	r3, r7, #7
    1672:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    1674:	1dfb      	adds	r3, r7, #7
    1676:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    1678:	4ba3      	ldr	r3, [pc, #652]	; (1908 <_usart_interrupt_handler+0x2a0>)
    167a:	0092      	lsls	r2, r2, #2
    167c:	58d3      	ldr	r3, [r2, r3]
    167e:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1680:	69bb      	ldr	r3, [r7, #24]
    1682:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    1684:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    1686:	69bb      	ldr	r3, [r7, #24]
    1688:	0018      	movs	r0, r3
    168a:	4ba0      	ldr	r3, [pc, #640]	; (190c <_usart_interrupt_handler+0x2a4>)
    168c:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    168e:	697b      	ldr	r3, [r7, #20]
    1690:	7e1b      	ldrb	r3, [r3, #24]
    1692:	b2da      	uxtb	r2, r3
    1694:	2312      	movs	r3, #18
    1696:	18fb      	adds	r3, r7, r3
    1698:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    169a:	697b      	ldr	r3, [r7, #20]
    169c:	7d9b      	ldrb	r3, [r3, #22]
    169e:	b2db      	uxtb	r3, r3
    16a0:	b29a      	uxth	r2, r3
    16a2:	2312      	movs	r3, #18
    16a4:	18fb      	adds	r3, r7, r3
    16a6:	2112      	movs	r1, #18
    16a8:	1879      	adds	r1, r7, r1
    16aa:	8809      	ldrh	r1, [r1, #0]
    16ac:	400a      	ands	r2, r1
    16ae:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    16b0:	69bb      	ldr	r3, [r7, #24]
    16b2:	2230      	movs	r2, #48	; 0x30
    16b4:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    16b6:	69ba      	ldr	r2, [r7, #24]
    16b8:	2131      	movs	r1, #49	; 0x31
    16ba:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    16bc:	4013      	ands	r3, r2
    16be:	b2da      	uxtb	r2, r3
    16c0:	2310      	movs	r3, #16
    16c2:	18fb      	adds	r3, r7, r3
    16c4:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    16c6:	2312      	movs	r3, #18
    16c8:	18fb      	adds	r3, r7, r3
    16ca:	881b      	ldrh	r3, [r3, #0]
    16cc:	2201      	movs	r2, #1
    16ce:	4013      	ands	r3, r2
    16d0:	d044      	beq.n	175c <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    16d2:	69bb      	ldr	r3, [r7, #24]
    16d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    16d6:	b29b      	uxth	r3, r3
    16d8:	2b00      	cmp	r3, #0
    16da:	d03c      	beq.n	1756 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    16dc:	69bb      	ldr	r3, [r7, #24]
    16de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16e0:	781b      	ldrb	r3, [r3, #0]
    16e2:	b2da      	uxtb	r2, r3
    16e4:	231c      	movs	r3, #28
    16e6:	18fb      	adds	r3, r7, r3
    16e8:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    16ea:	69bb      	ldr	r3, [r7, #24]
    16ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16ee:	1c5a      	adds	r2, r3, #1
    16f0:	69bb      	ldr	r3, [r7, #24]
    16f2:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    16f4:	69bb      	ldr	r3, [r7, #24]
    16f6:	795b      	ldrb	r3, [r3, #5]
    16f8:	2b01      	cmp	r3, #1
    16fa:	d113      	bne.n	1724 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    16fc:	69bb      	ldr	r3, [r7, #24]
    16fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1700:	781b      	ldrb	r3, [r3, #0]
    1702:	b2db      	uxtb	r3, r3
    1704:	021b      	lsls	r3, r3, #8
    1706:	b21a      	sxth	r2, r3
    1708:	231c      	movs	r3, #28
    170a:	18fb      	adds	r3, r7, r3
    170c:	2100      	movs	r1, #0
    170e:	5e5b      	ldrsh	r3, [r3, r1]
    1710:	4313      	orrs	r3, r2
    1712:	b21a      	sxth	r2, r3
    1714:	231c      	movs	r3, #28
    1716:	18fb      	adds	r3, r7, r3
    1718:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    171a:	69bb      	ldr	r3, [r7, #24]
    171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    171e:	1c5a      	adds	r2, r3, #1
    1720:	69bb      	ldr	r3, [r7, #24]
    1722:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1724:	231c      	movs	r3, #28
    1726:	18fb      	adds	r3, r7, r3
    1728:	881b      	ldrh	r3, [r3, #0]
    172a:	05db      	lsls	r3, r3, #23
    172c:	0ddb      	lsrs	r3, r3, #23
    172e:	b29a      	uxth	r2, r3
    1730:	697b      	ldr	r3, [r7, #20]
    1732:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1734:	69bb      	ldr	r3, [r7, #24]
    1736:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1738:	b29b      	uxth	r3, r3
    173a:	3b01      	subs	r3, #1
    173c:	b29b      	uxth	r3, r3
    173e:	69ba      	ldr	r2, [r7, #24]
    1740:	1c19      	adds	r1, r3, #0
    1742:	85d1      	strh	r1, [r2, #46]	; 0x2e
    1744:	2b00      	cmp	r3, #0
    1746:	d109      	bne.n	175c <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1748:	697b      	ldr	r3, [r7, #20]
    174a:	2201      	movs	r2, #1
    174c:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    174e:	697b      	ldr	r3, [r7, #20]
    1750:	2202      	movs	r2, #2
    1752:	759a      	strb	r2, [r3, #22]
    1754:	e002      	b.n	175c <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1756:	697b      	ldr	r3, [r7, #20]
    1758:	2201      	movs	r2, #1
    175a:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    175c:	2312      	movs	r3, #18
    175e:	18fb      	adds	r3, r7, r3
    1760:	881b      	ldrh	r3, [r3, #0]
    1762:	2202      	movs	r2, #2
    1764:	4013      	ands	r3, r2
    1766:	d011      	beq.n	178c <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1768:	697b      	ldr	r3, [r7, #20]
    176a:	2202      	movs	r2, #2
    176c:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    176e:	69bb      	ldr	r3, [r7, #24]
    1770:	2233      	movs	r2, #51	; 0x33
    1772:	2100      	movs	r1, #0
    1774:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1776:	2310      	movs	r3, #16
    1778:	18fb      	adds	r3, r7, r3
    177a:	881b      	ldrh	r3, [r3, #0]
    177c:	2201      	movs	r2, #1
    177e:	4013      	ands	r3, r2
    1780:	d004      	beq.n	178c <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1782:	69bb      	ldr	r3, [r7, #24]
    1784:	68db      	ldr	r3, [r3, #12]
    1786:	69ba      	ldr	r2, [r7, #24]
    1788:	0010      	movs	r0, r2
    178a:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    178c:	2312      	movs	r3, #18
    178e:	18fb      	adds	r3, r7, r3
    1790:	881b      	ldrh	r3, [r3, #0]
    1792:	2204      	movs	r2, #4
    1794:	4013      	ands	r3, r2
    1796:	d100      	bne.n	179a <_usart_interrupt_handler+0x132>
    1798:	e0bd      	b.n	1916 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    179a:	69bb      	ldr	r3, [r7, #24]
    179c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    179e:	b29b      	uxth	r3, r3
    17a0:	2b00      	cmp	r3, #0
    17a2:	d100      	bne.n	17a6 <_usart_interrupt_handler+0x13e>
    17a4:	e0b4      	b.n	1910 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    17a6:	697b      	ldr	r3, [r7, #20]
    17a8:	8b5b      	ldrh	r3, [r3, #26]
    17aa:	b29b      	uxth	r3, r3
    17ac:	b2da      	uxtb	r2, r3
    17ae:	231f      	movs	r3, #31
    17b0:	18fb      	adds	r3, r7, r3
    17b2:	213f      	movs	r1, #63	; 0x3f
    17b4:	400a      	ands	r2, r1
    17b6:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    17b8:	231f      	movs	r3, #31
    17ba:	18fb      	adds	r3, r7, r3
    17bc:	781b      	ldrb	r3, [r3, #0]
    17be:	2208      	movs	r2, #8
    17c0:	4013      	ands	r3, r2
    17c2:	d007      	beq.n	17d4 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    17c4:	231f      	movs	r3, #31
    17c6:	18fb      	adds	r3, r7, r3
    17c8:	221f      	movs	r2, #31
    17ca:	18ba      	adds	r2, r7, r2
    17cc:	7812      	ldrb	r2, [r2, #0]
    17ce:	2108      	movs	r1, #8
    17d0:	438a      	bics	r2, r1
    17d2:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    17d4:	231f      	movs	r3, #31
    17d6:	18fb      	adds	r3, r7, r3
    17d8:	781b      	ldrb	r3, [r3, #0]
    17da:	2b00      	cmp	r3, #0
    17dc:	d050      	beq.n	1880 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    17de:	231f      	movs	r3, #31
    17e0:	18fb      	adds	r3, r7, r3
    17e2:	781b      	ldrb	r3, [r3, #0]
    17e4:	2202      	movs	r2, #2
    17e6:	4013      	ands	r3, r2
    17e8:	d007      	beq.n	17fa <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    17ea:	69bb      	ldr	r3, [r7, #24]
    17ec:	2232      	movs	r2, #50	; 0x32
    17ee:	211a      	movs	r1, #26
    17f0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    17f2:	697b      	ldr	r3, [r7, #20]
    17f4:	2202      	movs	r2, #2
    17f6:	835a      	strh	r2, [r3, #26]
    17f8:	e036      	b.n	1868 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    17fa:	231f      	movs	r3, #31
    17fc:	18fb      	adds	r3, r7, r3
    17fe:	781b      	ldrb	r3, [r3, #0]
    1800:	2204      	movs	r2, #4
    1802:	4013      	ands	r3, r2
    1804:	d007      	beq.n	1816 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1806:	69bb      	ldr	r3, [r7, #24]
    1808:	2232      	movs	r2, #50	; 0x32
    180a:	211e      	movs	r1, #30
    180c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    180e:	697b      	ldr	r3, [r7, #20]
    1810:	2204      	movs	r2, #4
    1812:	835a      	strh	r2, [r3, #26]
    1814:	e028      	b.n	1868 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1816:	231f      	movs	r3, #31
    1818:	18fb      	adds	r3, r7, r3
    181a:	781b      	ldrb	r3, [r3, #0]
    181c:	2201      	movs	r2, #1
    181e:	4013      	ands	r3, r2
    1820:	d007      	beq.n	1832 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1822:	69bb      	ldr	r3, [r7, #24]
    1824:	2232      	movs	r2, #50	; 0x32
    1826:	2113      	movs	r1, #19
    1828:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    182a:	697b      	ldr	r3, [r7, #20]
    182c:	2201      	movs	r2, #1
    182e:	835a      	strh	r2, [r3, #26]
    1830:	e01a      	b.n	1868 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1832:	231f      	movs	r3, #31
    1834:	18fb      	adds	r3, r7, r3
    1836:	781b      	ldrb	r3, [r3, #0]
    1838:	2210      	movs	r2, #16
    183a:	4013      	ands	r3, r2
    183c:	d007      	beq.n	184e <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    183e:	69bb      	ldr	r3, [r7, #24]
    1840:	2232      	movs	r2, #50	; 0x32
    1842:	2142      	movs	r1, #66	; 0x42
    1844:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1846:	697b      	ldr	r3, [r7, #20]
    1848:	2210      	movs	r2, #16
    184a:	835a      	strh	r2, [r3, #26]
    184c:	e00c      	b.n	1868 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    184e:	231f      	movs	r3, #31
    1850:	18fb      	adds	r3, r7, r3
    1852:	781b      	ldrb	r3, [r3, #0]
    1854:	2220      	movs	r2, #32
    1856:	4013      	ands	r3, r2
    1858:	d006      	beq.n	1868 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    185a:	69bb      	ldr	r3, [r7, #24]
    185c:	2232      	movs	r2, #50	; 0x32
    185e:	2141      	movs	r1, #65	; 0x41
    1860:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1862:	697b      	ldr	r3, [r7, #20]
    1864:	2220      	movs	r2, #32
    1866:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    1868:	2310      	movs	r3, #16
    186a:	18fb      	adds	r3, r7, r3
    186c:	881b      	ldrh	r3, [r3, #0]
    186e:	2204      	movs	r2, #4
    1870:	4013      	ands	r3, r2
				if (callback_status
    1872:	d050      	beq.n	1916 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1874:	69bb      	ldr	r3, [r7, #24]
    1876:	695b      	ldr	r3, [r3, #20]
    1878:	69ba      	ldr	r2, [r7, #24]
    187a:	0010      	movs	r0, r2
    187c:	4798      	blx	r3
    187e:	e04a      	b.n	1916 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1880:	697b      	ldr	r3, [r7, #20]
    1882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1884:	b29a      	uxth	r2, r3
    1886:	230e      	movs	r3, #14
    1888:	18fb      	adds	r3, r7, r3
    188a:	05d2      	lsls	r2, r2, #23
    188c:	0dd2      	lsrs	r2, r2, #23
    188e:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1890:	69bb      	ldr	r3, [r7, #24]
    1892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1894:	220e      	movs	r2, #14
    1896:	18ba      	adds	r2, r7, r2
    1898:	8812      	ldrh	r2, [r2, #0]
    189a:	b2d2      	uxtb	r2, r2
    189c:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    189e:	69bb      	ldr	r3, [r7, #24]
    18a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    18a2:	1c5a      	adds	r2, r3, #1
    18a4:	69bb      	ldr	r3, [r7, #24]
    18a6:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    18a8:	69bb      	ldr	r3, [r7, #24]
    18aa:	795b      	ldrb	r3, [r3, #5]
    18ac:	2b01      	cmp	r3, #1
    18ae:	d10d      	bne.n	18cc <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    18b0:	69bb      	ldr	r3, [r7, #24]
    18b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    18b4:	220e      	movs	r2, #14
    18b6:	18ba      	adds	r2, r7, r2
    18b8:	8812      	ldrh	r2, [r2, #0]
    18ba:	0a12      	lsrs	r2, r2, #8
    18bc:	b292      	uxth	r2, r2
    18be:	b2d2      	uxtb	r2, r2
    18c0:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    18c2:	69bb      	ldr	r3, [r7, #24]
    18c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    18c6:	1c5a      	adds	r2, r3, #1
    18c8:	69bb      	ldr	r3, [r7, #24]
    18ca:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    18cc:	69bb      	ldr	r3, [r7, #24]
    18ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    18d0:	b29b      	uxth	r3, r3
    18d2:	3b01      	subs	r3, #1
    18d4:	b29b      	uxth	r3, r3
    18d6:	69ba      	ldr	r2, [r7, #24]
    18d8:	1c19      	adds	r1, r3, #0
    18da:	8591      	strh	r1, [r2, #44]	; 0x2c
    18dc:	2b00      	cmp	r3, #0
    18de:	d11a      	bne.n	1916 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    18e0:	697b      	ldr	r3, [r7, #20]
    18e2:	2204      	movs	r2, #4
    18e4:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    18e6:	69bb      	ldr	r3, [r7, #24]
    18e8:	2232      	movs	r2, #50	; 0x32
    18ea:	2100      	movs	r1, #0
    18ec:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    18ee:	2310      	movs	r3, #16
    18f0:	18fb      	adds	r3, r7, r3
    18f2:	881b      	ldrh	r3, [r3, #0]
    18f4:	2202      	movs	r2, #2
    18f6:	4013      	ands	r3, r2
					if (callback_status
    18f8:	d00d      	beq.n	1916 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    18fa:	69bb      	ldr	r3, [r7, #24]
    18fc:	691b      	ldr	r3, [r3, #16]
    18fe:	69ba      	ldr	r2, [r7, #24]
    1900:	0010      	movs	r0, r2
    1902:	4798      	blx	r3
    1904:	e007      	b.n	1916 <_usart_interrupt_handler+0x2ae>
    1906:	46c0      	nop			; (mov r8, r8)
    1908:	200000dc 	.word	0x200000dc
    190c:	00001645 	.word	0x00001645
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1910:	697b      	ldr	r3, [r7, #20]
    1912:	2204      	movs	r2, #4
    1914:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1916:	2312      	movs	r3, #18
    1918:	18fb      	adds	r3, r7, r3
    191a:	881b      	ldrh	r3, [r3, #0]
    191c:	2210      	movs	r2, #16
    191e:	4013      	ands	r3, r2
    1920:	d010      	beq.n	1944 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1922:	697b      	ldr	r3, [r7, #20]
    1924:	2210      	movs	r2, #16
    1926:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1928:	697b      	ldr	r3, [r7, #20]
    192a:	2210      	movs	r2, #16
    192c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    192e:	2310      	movs	r3, #16
    1930:	18fb      	adds	r3, r7, r3
    1932:	881b      	ldrh	r3, [r3, #0]
    1934:	2210      	movs	r2, #16
    1936:	4013      	ands	r3, r2
    1938:	d004      	beq.n	1944 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    193a:	69bb      	ldr	r3, [r7, #24]
    193c:	69db      	ldr	r3, [r3, #28]
    193e:	69ba      	ldr	r2, [r7, #24]
    1940:	0010      	movs	r0, r2
    1942:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1944:	2312      	movs	r3, #18
    1946:	18fb      	adds	r3, r7, r3
    1948:	881b      	ldrh	r3, [r3, #0]
    194a:	2220      	movs	r2, #32
    194c:	4013      	ands	r3, r2
    194e:	d010      	beq.n	1972 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1950:	697b      	ldr	r3, [r7, #20]
    1952:	2220      	movs	r2, #32
    1954:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1956:	697b      	ldr	r3, [r7, #20]
    1958:	2220      	movs	r2, #32
    195a:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    195c:	2310      	movs	r3, #16
    195e:	18fb      	adds	r3, r7, r3
    1960:	881b      	ldrh	r3, [r3, #0]
    1962:	2208      	movs	r2, #8
    1964:	4013      	ands	r3, r2
    1966:	d004      	beq.n	1972 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1968:	69bb      	ldr	r3, [r7, #24]
    196a:	699b      	ldr	r3, [r3, #24]
    196c:	69ba      	ldr	r2, [r7, #24]
    196e:	0010      	movs	r0, r2
    1970:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1972:	2312      	movs	r3, #18
    1974:	18fb      	adds	r3, r7, r3
    1976:	881b      	ldrh	r3, [r3, #0]
    1978:	2208      	movs	r2, #8
    197a:	4013      	ands	r3, r2
    197c:	d010      	beq.n	19a0 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    197e:	697b      	ldr	r3, [r7, #20]
    1980:	2208      	movs	r2, #8
    1982:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1984:	697b      	ldr	r3, [r7, #20]
    1986:	2208      	movs	r2, #8
    1988:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    198a:	2310      	movs	r3, #16
    198c:	18fb      	adds	r3, r7, r3
    198e:	881b      	ldrh	r3, [r3, #0]
    1990:	2220      	movs	r2, #32
    1992:	4013      	ands	r3, r2
    1994:	d004      	beq.n	19a0 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1996:	69bb      	ldr	r3, [r7, #24]
    1998:	6a1b      	ldr	r3, [r3, #32]
    199a:	69ba      	ldr	r2, [r7, #24]
    199c:	0010      	movs	r0, r2
    199e:	4798      	blx	r3
		}
	}
#endif
}
    19a0:	46c0      	nop			; (mov r8, r8)
    19a2:	46bd      	mov	sp, r7
    19a4:	b008      	add	sp, #32
    19a6:	bd80      	pop	{r7, pc}

000019a8 <system_gclk_gen_get_config_defaults>:
{
    19a8:	b580      	push	{r7, lr}
    19aa:	b082      	sub	sp, #8
    19ac:	af00      	add	r7, sp, #0
    19ae:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    19b0:	687b      	ldr	r3, [r7, #4]
    19b2:	2201      	movs	r2, #1
    19b4:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    19b6:	687b      	ldr	r3, [r7, #4]
    19b8:	2200      	movs	r2, #0
    19ba:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    19bc:	687b      	ldr	r3, [r7, #4]
    19be:	2206      	movs	r2, #6
    19c0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    19c2:	687b      	ldr	r3, [r7, #4]
    19c4:	2200      	movs	r2, #0
    19c6:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    19c8:	687b      	ldr	r3, [r7, #4]
    19ca:	2200      	movs	r2, #0
    19cc:	725a      	strb	r2, [r3, #9]
}
    19ce:	46c0      	nop			; (mov r8, r8)
    19d0:	46bd      	mov	sp, r7
    19d2:	b002      	add	sp, #8
    19d4:	bd80      	pop	{r7, pc}

000019d6 <system_gclk_chan_get_config_defaults>:
{
    19d6:	b580      	push	{r7, lr}
    19d8:	b082      	sub	sp, #8
    19da:	af00      	add	r7, sp, #0
    19dc:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    19de:	687b      	ldr	r3, [r7, #4]
    19e0:	2200      	movs	r2, #0
    19e2:	701a      	strb	r2, [r3, #0]
}
    19e4:	46c0      	nop			; (mov r8, r8)
    19e6:	46bd      	mov	sp, r7
    19e8:	b002      	add	sp, #8
    19ea:	bd80      	pop	{r7, pc}

000019ec <system_clock_source_osc8m_get_config_defaults>:
{
    19ec:	b580      	push	{r7, lr}
    19ee:	b082      	sub	sp, #8
    19f0:	af00      	add	r7, sp, #0
    19f2:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    19f4:	687b      	ldr	r3, [r7, #4]
    19f6:	2203      	movs	r2, #3
    19f8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    19fa:	687b      	ldr	r3, [r7, #4]
    19fc:	2200      	movs	r2, #0
    19fe:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    1a00:	687b      	ldr	r3, [r7, #4]
    1a02:	2201      	movs	r2, #1
    1a04:	709a      	strb	r2, [r3, #2]
}
    1a06:	46c0      	nop			; (mov r8, r8)
    1a08:	46bd      	mov	sp, r7
    1a0a:	b002      	add	sp, #8
    1a0c:	bd80      	pop	{r7, pc}
	...

00001a10 <system_cpu_clock_set_divider>:
{
    1a10:	b580      	push	{r7, lr}
    1a12:	b082      	sub	sp, #8
    1a14:	af00      	add	r7, sp, #0
    1a16:	0002      	movs	r2, r0
    1a18:	1dfb      	adds	r3, r7, #7
    1a1a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    1a1c:	4a03      	ldr	r2, [pc, #12]	; (1a2c <system_cpu_clock_set_divider+0x1c>)
    1a1e:	1dfb      	adds	r3, r7, #7
    1a20:	781b      	ldrb	r3, [r3, #0]
    1a22:	7213      	strb	r3, [r2, #8]
}
    1a24:	46c0      	nop			; (mov r8, r8)
    1a26:	46bd      	mov	sp, r7
    1a28:	b002      	add	sp, #8
    1a2a:	bd80      	pop	{r7, pc}
    1a2c:	40000400 	.word	0x40000400

00001a30 <system_apb_clock_set_divider>:
{
    1a30:	b580      	push	{r7, lr}
    1a32:	b082      	sub	sp, #8
    1a34:	af00      	add	r7, sp, #0
    1a36:	0002      	movs	r2, r0
    1a38:	1dfb      	adds	r3, r7, #7
    1a3a:	701a      	strb	r2, [r3, #0]
    1a3c:	1dbb      	adds	r3, r7, #6
    1a3e:	1c0a      	adds	r2, r1, #0
    1a40:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1a42:	1dfb      	adds	r3, r7, #7
    1a44:	781b      	ldrb	r3, [r3, #0]
    1a46:	2b01      	cmp	r3, #1
    1a48:	d008      	beq.n	1a5c <system_apb_clock_set_divider+0x2c>
    1a4a:	2b02      	cmp	r3, #2
    1a4c:	d00b      	beq.n	1a66 <system_apb_clock_set_divider+0x36>
    1a4e:	2b00      	cmp	r3, #0
    1a50:	d10e      	bne.n	1a70 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    1a52:	4a0b      	ldr	r2, [pc, #44]	; (1a80 <system_apb_clock_set_divider+0x50>)
    1a54:	1dbb      	adds	r3, r7, #6
    1a56:	781b      	ldrb	r3, [r3, #0]
    1a58:	7253      	strb	r3, [r2, #9]
			break;
    1a5a:	e00b      	b.n	1a74 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    1a5c:	4a08      	ldr	r2, [pc, #32]	; (1a80 <system_apb_clock_set_divider+0x50>)
    1a5e:	1dbb      	adds	r3, r7, #6
    1a60:	781b      	ldrb	r3, [r3, #0]
    1a62:	7293      	strb	r3, [r2, #10]
			break;
    1a64:	e006      	b.n	1a74 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    1a66:	4a06      	ldr	r2, [pc, #24]	; (1a80 <system_apb_clock_set_divider+0x50>)
    1a68:	1dbb      	adds	r3, r7, #6
    1a6a:	781b      	ldrb	r3, [r3, #0]
    1a6c:	72d3      	strb	r3, [r2, #11]
			break;
    1a6e:	e001      	b.n	1a74 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    1a70:	2317      	movs	r3, #23
    1a72:	e000      	b.n	1a76 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    1a74:	2300      	movs	r3, #0
}
    1a76:	0018      	movs	r0, r3
    1a78:	46bd      	mov	sp, r7
    1a7a:	b002      	add	sp, #8
    1a7c:	bd80      	pop	{r7, pc}
    1a7e:	46c0      	nop			; (mov r8, r8)
    1a80:	40000400 	.word	0x40000400

00001a84 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
    1a84:	b580      	push	{r7, lr}
    1a86:	b082      	sub	sp, #8
    1a88:	af00      	add	r7, sp, #0
    1a8a:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
    1a8c:	687b      	ldr	r3, [r7, #4]
    1a8e:	2201      	movs	r2, #1
    1a90:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
    1a92:	687b      	ldr	r3, [r7, #4]
    1a94:	2200      	movs	r2, #0
    1a96:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	2200      	movs	r2, #0
    1a9c:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
    1a9e:	687b      	ldr	r3, [r7, #4]
    1aa0:	2200      	movs	r2, #0
    1aa2:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	2200      	movs	r2, #0
    1aa8:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
    1aaa:	687b      	ldr	r3, [r7, #4]
    1aac:	4a0a      	ldr	r2, [pc, #40]	; (1ad8 <system_clock_source_dpll_get_config_defaults+0x54>)
    1aae:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
    1ab0:	687b      	ldr	r3, [r7, #4]
    1ab2:	2280      	movs	r2, #128	; 0x80
    1ab4:	0212      	lsls	r2, r2, #8
    1ab6:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
    1ab8:	687b      	ldr	r3, [r7, #4]
    1aba:	2201      	movs	r2, #1
    1abc:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
    1abe:	687b      	ldr	r3, [r7, #4]
    1ac0:	2200      	movs	r2, #0
    1ac2:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    1ac4:	687b      	ldr	r3, [r7, #4]
    1ac6:	2200      	movs	r2, #0
    1ac8:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    1aca:	687b      	ldr	r3, [r7, #4]
    1acc:	2200      	movs	r2, #0
    1ace:	749a      	strb	r2, [r3, #18]
};
    1ad0:	46c0      	nop			; (mov r8, r8)
    1ad2:	46bd      	mov	sp, r7
    1ad4:	b002      	add	sp, #8
    1ad6:	bd80      	pop	{r7, pc}
    1ad8:	02dc6c00 	.word	0x02dc6c00

00001adc <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    1adc:	b580      	push	{r7, lr}
    1ade:	b082      	sub	sp, #8
    1ae0:	af00      	add	r7, sp, #0
    1ae2:	0002      	movs	r2, r0
    1ae4:	1dfb      	adds	r3, r7, #7
    1ae6:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1ae8:	4a08      	ldr	r2, [pc, #32]	; (1b0c <system_flash_set_waitstates+0x30>)
    1aea:	1dfb      	adds	r3, r7, #7
    1aec:	781b      	ldrb	r3, [r3, #0]
    1aee:	210f      	movs	r1, #15
    1af0:	400b      	ands	r3, r1
    1af2:	b2d9      	uxtb	r1, r3
    1af4:	6853      	ldr	r3, [r2, #4]
    1af6:	200f      	movs	r0, #15
    1af8:	4001      	ands	r1, r0
    1afa:	0049      	lsls	r1, r1, #1
    1afc:	201e      	movs	r0, #30
    1afe:	4383      	bics	r3, r0
    1b00:	430b      	orrs	r3, r1
    1b02:	6053      	str	r3, [r2, #4]
}
    1b04:	46c0      	nop			; (mov r8, r8)
    1b06:	46bd      	mov	sp, r7
    1b08:	b002      	add	sp, #8
    1b0a:	bd80      	pop	{r7, pc}
    1b0c:	41004000 	.word	0x41004000

00001b10 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    1b10:	b580      	push	{r7, lr}
    1b12:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1b14:	46c0      	nop			; (mov r8, r8)
    1b16:	4b04      	ldr	r3, [pc, #16]	; (1b28 <_system_dfll_wait_for_sync+0x18>)
    1b18:	68db      	ldr	r3, [r3, #12]
    1b1a:	2210      	movs	r2, #16
    1b1c:	4013      	ands	r3, r2
    1b1e:	d0fa      	beq.n	1b16 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    1b20:	46c0      	nop			; (mov r8, r8)
    1b22:	46bd      	mov	sp, r7
    1b24:	bd80      	pop	{r7, pc}
    1b26:	46c0      	nop			; (mov r8, r8)
    1b28:	40000800 	.word	0x40000800

00001b2c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    1b2c:	b580      	push	{r7, lr}
    1b2e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1b30:	4b0c      	ldr	r3, [pc, #48]	; (1b64 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1b32:	2202      	movs	r2, #2
    1b34:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1b36:	4b0c      	ldr	r3, [pc, #48]	; (1b68 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1b38:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1b3a:	4a0a      	ldr	r2, [pc, #40]	; (1b64 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1b3c:	4b0b      	ldr	r3, [pc, #44]	; (1b6c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1b3e:	689b      	ldr	r3, [r3, #8]
    1b40:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1b42:	4a08      	ldr	r2, [pc, #32]	; (1b64 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1b44:	4b09      	ldr	r3, [pc, #36]	; (1b6c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1b46:	685b      	ldr	r3, [r3, #4]
    1b48:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1b4a:	4b06      	ldr	r3, [pc, #24]	; (1b64 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1b4c:	2200      	movs	r2, #0
    1b4e:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1b50:	4b05      	ldr	r3, [pc, #20]	; (1b68 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1b52:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1b54:	4a03      	ldr	r2, [pc, #12]	; (1b64 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1b56:	4b05      	ldr	r3, [pc, #20]	; (1b6c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1b58:	681b      	ldr	r3, [r3, #0]
    1b5a:	b29b      	uxth	r3, r3
    1b5c:	8493      	strh	r3, [r2, #36]	; 0x24
}
    1b5e:	46c0      	nop			; (mov r8, r8)
    1b60:	46bd      	mov	sp, r7
    1b62:	bd80      	pop	{r7, pc}
    1b64:	40000800 	.word	0x40000800
    1b68:	00001b11 	.word	0x00001b11
    1b6c:	200000b8 	.word	0x200000b8

00001b70 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1b70:	b580      	push	{r7, lr}
    1b72:	b082      	sub	sp, #8
    1b74:	af00      	add	r7, sp, #0
    1b76:	0002      	movs	r2, r0
    1b78:	1dfb      	adds	r3, r7, #7
    1b7a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    1b7c:	1dfb      	adds	r3, r7, #7
    1b7e:	781b      	ldrb	r3, [r3, #0]
    1b80:	2b08      	cmp	r3, #8
    1b82:	d840      	bhi.n	1c06 <system_clock_source_get_hz+0x96>
    1b84:	009a      	lsls	r2, r3, #2
    1b86:	4b22      	ldr	r3, [pc, #136]	; (1c10 <system_clock_source_get_hz+0xa0>)
    1b88:	18d3      	adds	r3, r2, r3
    1b8a:	681b      	ldr	r3, [r3, #0]
    1b8c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1b8e:	4b21      	ldr	r3, [pc, #132]	; (1c14 <system_clock_source_get_hz+0xa4>)
    1b90:	691b      	ldr	r3, [r3, #16]
    1b92:	e039      	b.n	1c08 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1b94:	4b20      	ldr	r3, [pc, #128]	; (1c18 <system_clock_source_get_hz+0xa8>)
    1b96:	6a1b      	ldr	r3, [r3, #32]
    1b98:	059b      	lsls	r3, r3, #22
    1b9a:	0f9b      	lsrs	r3, r3, #30
    1b9c:	b2db      	uxtb	r3, r3
    1b9e:	001a      	movs	r2, r3
    1ba0:	4b1e      	ldr	r3, [pc, #120]	; (1c1c <system_clock_source_get_hz+0xac>)
    1ba2:	40d3      	lsrs	r3, r2
    1ba4:	e030      	b.n	1c08 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1ba6:	2380      	movs	r3, #128	; 0x80
    1ba8:	021b      	lsls	r3, r3, #8
    1baa:	e02d      	b.n	1c08 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    1bac:	2380      	movs	r3, #128	; 0x80
    1bae:	021b      	lsls	r3, r3, #8
    1bb0:	e02a      	b.n	1c08 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1bb2:	4b18      	ldr	r3, [pc, #96]	; (1c14 <system_clock_source_get_hz+0xa4>)
    1bb4:	695b      	ldr	r3, [r3, #20]
    1bb6:	e027      	b.n	1c08 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1bb8:	4b16      	ldr	r3, [pc, #88]	; (1c14 <system_clock_source_get_hz+0xa4>)
    1bba:	681b      	ldr	r3, [r3, #0]
    1bbc:	2202      	movs	r2, #2
    1bbe:	4013      	ands	r3, r2
    1bc0:	d101      	bne.n	1bc6 <system_clock_source_get_hz+0x56>
			return 0;
    1bc2:	2300      	movs	r3, #0
    1bc4:	e020      	b.n	1c08 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    1bc6:	4b16      	ldr	r3, [pc, #88]	; (1c20 <system_clock_source_get_hz+0xb0>)
    1bc8:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1bca:	4b12      	ldr	r3, [pc, #72]	; (1c14 <system_clock_source_get_hz+0xa4>)
    1bcc:	681b      	ldr	r3, [r3, #0]
    1bce:	2204      	movs	r2, #4
    1bd0:	4013      	ands	r3, r2
    1bd2:	d009      	beq.n	1be8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1bd4:	2000      	movs	r0, #0
    1bd6:	4b13      	ldr	r3, [pc, #76]	; (1c24 <system_clock_source_get_hz+0xb4>)
    1bd8:	4798      	blx	r3
    1bda:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    1bdc:	4b0d      	ldr	r3, [pc, #52]	; (1c14 <system_clock_source_get_hz+0xa4>)
    1bde:	689b      	ldr	r3, [r3, #8]
    1be0:	041b      	lsls	r3, r3, #16
    1be2:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1be4:	4353      	muls	r3, r2
    1be6:	e00f      	b.n	1c08 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    1be8:	4b0f      	ldr	r3, [pc, #60]	; (1c28 <system_clock_source_get_hz+0xb8>)
    1bea:	e00d      	b.n	1c08 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1bec:	4a0a      	ldr	r2, [pc, #40]	; (1c18 <system_clock_source_get_hz+0xa8>)
    1bee:	2350      	movs	r3, #80	; 0x50
    1bf0:	5cd3      	ldrb	r3, [r2, r3]
    1bf2:	b2db      	uxtb	r3, r3
    1bf4:	001a      	movs	r2, r3
    1bf6:	2304      	movs	r3, #4
    1bf8:	4013      	ands	r3, r2
    1bfa:	d101      	bne.n	1c00 <system_clock_source_get_hz+0x90>
			return 0;
    1bfc:	2300      	movs	r3, #0
    1bfe:	e003      	b.n	1c08 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    1c00:	4b04      	ldr	r3, [pc, #16]	; (1c14 <system_clock_source_get_hz+0xa4>)
    1c02:	68db      	ldr	r3, [r3, #12]
    1c04:	e000      	b.n	1c08 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    1c06:	2300      	movs	r3, #0
	}
}
    1c08:	0018      	movs	r0, r3
    1c0a:	46bd      	mov	sp, r7
    1c0c:	b002      	add	sp, #8
    1c0e:	bd80      	pop	{r7, pc}
    1c10:	000044d8 	.word	0x000044d8
    1c14:	200000b8 	.word	0x200000b8
    1c18:	40000800 	.word	0x40000800
    1c1c:	007a1200 	.word	0x007a1200
    1c20:	00001b11 	.word	0x00001b11
    1c24:	00002555 	.word	0x00002555
    1c28:	02dc6c00 	.word	0x02dc6c00

00001c2c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1c2c:	b580      	push	{r7, lr}
    1c2e:	b084      	sub	sp, #16
    1c30:	af00      	add	r7, sp, #0
    1c32:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1c34:	4b1a      	ldr	r3, [pc, #104]	; (1ca0 <system_clock_source_osc8m_set_config+0x74>)
    1c36:	6a1b      	ldr	r3, [r3, #32]
    1c38:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1c3a:	687b      	ldr	r3, [r7, #4]
    1c3c:	781b      	ldrb	r3, [r3, #0]
    1c3e:	1c1a      	adds	r2, r3, #0
    1c40:	2303      	movs	r3, #3
    1c42:	4013      	ands	r3, r2
    1c44:	b2da      	uxtb	r2, r3
    1c46:	230d      	movs	r3, #13
    1c48:	18fb      	adds	r3, r7, r3
    1c4a:	2103      	movs	r1, #3
    1c4c:	400a      	ands	r2, r1
    1c4e:	0010      	movs	r0, r2
    1c50:	781a      	ldrb	r2, [r3, #0]
    1c52:	2103      	movs	r1, #3
    1c54:	438a      	bics	r2, r1
    1c56:	1c11      	adds	r1, r2, #0
    1c58:	1c02      	adds	r2, r0, #0
    1c5a:	430a      	orrs	r2, r1
    1c5c:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1c5e:	687b      	ldr	r3, [r7, #4]
    1c60:	789a      	ldrb	r2, [r3, #2]
    1c62:	230c      	movs	r3, #12
    1c64:	18fb      	adds	r3, r7, r3
    1c66:	01d0      	lsls	r0, r2, #7
    1c68:	781a      	ldrb	r2, [r3, #0]
    1c6a:	217f      	movs	r1, #127	; 0x7f
    1c6c:	400a      	ands	r2, r1
    1c6e:	1c11      	adds	r1, r2, #0
    1c70:	1c02      	adds	r2, r0, #0
    1c72:	430a      	orrs	r2, r1
    1c74:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1c76:	687b      	ldr	r3, [r7, #4]
    1c78:	785a      	ldrb	r2, [r3, #1]
    1c7a:	230c      	movs	r3, #12
    1c7c:	18fb      	adds	r3, r7, r3
    1c7e:	2101      	movs	r1, #1
    1c80:	400a      	ands	r2, r1
    1c82:	0190      	lsls	r0, r2, #6
    1c84:	781a      	ldrb	r2, [r3, #0]
    1c86:	2140      	movs	r1, #64	; 0x40
    1c88:	438a      	bics	r2, r1
    1c8a:	1c11      	adds	r1, r2, #0
    1c8c:	1c02      	adds	r2, r0, #0
    1c8e:	430a      	orrs	r2, r1
    1c90:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    1c92:	4b03      	ldr	r3, [pc, #12]	; (1ca0 <system_clock_source_osc8m_set_config+0x74>)
    1c94:	68fa      	ldr	r2, [r7, #12]
    1c96:	621a      	str	r2, [r3, #32]
}
    1c98:	46c0      	nop			; (mov r8, r8)
    1c9a:	46bd      	mov	sp, r7
    1c9c:	b004      	add	sp, #16
    1c9e:	bd80      	pop	{r7, pc}
    1ca0:	40000800 	.word	0x40000800

00001ca4 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    1ca4:	b580      	push	{r7, lr}
    1ca6:	b086      	sub	sp, #24
    1ca8:	af00      	add	r7, sp, #0
    1caa:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    1cac:	687b      	ldr	r3, [r7, #4]
    1cae:	68db      	ldr	r3, [r3, #12]
    1cb0:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    1cb2:	687b      	ldr	r3, [r7, #4]
    1cb4:	7d1b      	ldrb	r3, [r3, #20]
    1cb6:	2b01      	cmp	r3, #1
    1cb8:	d10a      	bne.n	1cd0 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
    1cba:	687b      	ldr	r3, [r7, #4]
    1cbc:	8a1b      	ldrh	r3, [r3, #16]
    1cbe:	3301      	adds	r3, #1
    1cc0:	005b      	lsls	r3, r3, #1
    1cc2:	001a      	movs	r2, r3
    1cc4:	4b36      	ldr	r3, [pc, #216]	; (1da0 <system_clock_source_dpll_set_config+0xfc>)
    1cc6:	0011      	movs	r1, r2
    1cc8:	6978      	ldr	r0, [r7, #20]
    1cca:	4798      	blx	r3
    1ccc:	0003      	movs	r3, r0
    1cce:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    1cd0:	687b      	ldr	r3, [r7, #4]
    1cd2:	689b      	ldr	r3, [r3, #8]
    1cd4:	011a      	lsls	r2, r3, #4
    1cd6:	4b32      	ldr	r3, [pc, #200]	; (1da0 <system_clock_source_dpll_set_config+0xfc>)
    1cd8:	6979      	ldr	r1, [r7, #20]
    1cda:	0010      	movs	r0, r2
    1cdc:	4798      	blx	r3
    1cde:	0003      	movs	r3, r0
    1ce0:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
    1ce2:	693b      	ldr	r3, [r7, #16]
    1ce4:	b2da      	uxtb	r2, r3
    1ce6:	230f      	movs	r3, #15
    1ce8:	18fb      	adds	r3, r7, r3
    1cea:	210f      	movs	r1, #15
    1cec:	400a      	ands	r2, r1
    1cee:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
    1cf0:	693b      	ldr	r3, [r7, #16]
    1cf2:	091b      	lsrs	r3, r3, #4
    1cf4:	3b01      	subs	r3, #1
    1cf6:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
    1cf8:	492a      	ldr	r1, [pc, #168]	; (1da4 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    1cfa:	687b      	ldr	r3, [r7, #4]
    1cfc:	781b      	ldrb	r3, [r3, #0]
    1cfe:	01db      	lsls	r3, r3, #7
    1d00:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    1d02:	687b      	ldr	r3, [r7, #4]
    1d04:	785b      	ldrb	r3, [r3, #1]
    1d06:	019b      	lsls	r3, r3, #6
    1d08:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    1d0a:	4313      	orrs	r3, r2
    1d0c:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
    1d0e:	2344      	movs	r3, #68	; 0x44
    1d10:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
    1d12:	4b24      	ldr	r3, [pc, #144]	; (1da4 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    1d14:	220f      	movs	r2, #15
    1d16:	18ba      	adds	r2, r7, r2
    1d18:	7812      	ldrb	r2, [r2, #0]
    1d1a:	0412      	lsls	r2, r2, #16
    1d1c:	0011      	movs	r1, r2
    1d1e:	22f0      	movs	r2, #240	; 0xf0
    1d20:	0312      	lsls	r2, r2, #12
    1d22:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
    1d24:	693a      	ldr	r2, [r7, #16]
    1d26:	0512      	lsls	r2, r2, #20
    1d28:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    1d2a:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
    1d2c:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
    1d2e:	4b1d      	ldr	r3, [pc, #116]	; (1da4 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    1d30:	687a      	ldr	r2, [r7, #4]
    1d32:	8a12      	ldrh	r2, [r2, #16]
    1d34:	0412      	lsls	r2, r2, #16
    1d36:	0011      	movs	r1, r2
    1d38:	4a1b      	ldr	r2, [pc, #108]	; (1da8 <system_clock_source_dpll_set_config+0x104>)
    1d3a:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    1d3c:	687a      	ldr	r2, [r7, #4]
    1d3e:	7892      	ldrb	r2, [r2, #2]
    1d40:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    1d42:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    1d44:	687a      	ldr	r2, [r7, #4]
    1d46:	7cd2      	ldrb	r2, [r2, #19]
    1d48:	0212      	lsls	r2, r2, #8
    1d4a:	0010      	movs	r0, r2
    1d4c:	22e0      	movs	r2, #224	; 0xe0
    1d4e:	00d2      	lsls	r2, r2, #3
    1d50:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    1d52:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    1d54:	687a      	ldr	r2, [r7, #4]
    1d56:	7d12      	ldrb	r2, [r2, #20]
    1d58:	0112      	lsls	r2, r2, #4
    1d5a:	0010      	movs	r0, r2
    1d5c:	2230      	movs	r2, #48	; 0x30
    1d5e:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    1d60:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    1d62:	687a      	ldr	r2, [r7, #4]
    1d64:	78d2      	ldrb	r2, [r2, #3]
    1d66:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    1d68:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    1d6a:	687a      	ldr	r2, [r7, #4]
    1d6c:	7912      	ldrb	r2, [r2, #4]
    1d6e:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    1d70:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
    1d72:	687a      	ldr	r2, [r7, #4]
    1d74:	7c92      	ldrb	r2, [r2, #18]
    1d76:	0010      	movs	r0, r2
    1d78:	2203      	movs	r2, #3
    1d7a:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    1d7c:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
    1d7e:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
    1d80:	693b      	ldr	r3, [r7, #16]
    1d82:	3301      	adds	r3, #1
    1d84:	011a      	lsls	r2, r3, #4
    1d86:	230f      	movs	r3, #15
    1d88:	18fb      	adds	r3, r7, r3
    1d8a:	781b      	ldrb	r3, [r3, #0]
    1d8c:	18d3      	adds	r3, r2, r3
    1d8e:	697a      	ldr	r2, [r7, #20]
    1d90:	4353      	muls	r3, r2
    1d92:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
    1d94:	4b05      	ldr	r3, [pc, #20]	; (1dac <system_clock_source_dpll_set_config+0x108>)
    1d96:	60da      	str	r2, [r3, #12]
}
    1d98:	46c0      	nop			; (mov r8, r8)
    1d9a:	46bd      	mov	sp, r7
    1d9c:	b006      	add	sp, #24
    1d9e:	bd80      	pop	{r7, pc}
    1da0:	0000311d 	.word	0x0000311d
    1da4:	40000800 	.word	0x40000800
    1da8:	07ff0000 	.word	0x07ff0000
    1dac:	200000b8 	.word	0x200000b8

00001db0 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    1db0:	b580      	push	{r7, lr}
    1db2:	b082      	sub	sp, #8
    1db4:	af00      	add	r7, sp, #0
    1db6:	0002      	movs	r2, r0
    1db8:	1dfb      	adds	r3, r7, #7
    1dba:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    1dbc:	1dfb      	adds	r3, r7, #7
    1dbe:	781b      	ldrb	r3, [r3, #0]
    1dc0:	2b08      	cmp	r3, #8
    1dc2:	d83b      	bhi.n	1e3c <system_clock_source_enable+0x8c>
    1dc4:	009a      	lsls	r2, r3, #2
    1dc6:	4b21      	ldr	r3, [pc, #132]	; (1e4c <system_clock_source_enable+0x9c>)
    1dc8:	18d3      	adds	r3, r2, r3
    1dca:	681b      	ldr	r3, [r3, #0]
    1dcc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1dce:	4b20      	ldr	r3, [pc, #128]	; (1e50 <system_clock_source_enable+0xa0>)
    1dd0:	4a1f      	ldr	r2, [pc, #124]	; (1e50 <system_clock_source_enable+0xa0>)
    1dd2:	6a12      	ldr	r2, [r2, #32]
    1dd4:	2102      	movs	r1, #2
    1dd6:	430a      	orrs	r2, r1
    1dd8:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    1dda:	2300      	movs	r3, #0
    1ddc:	e031      	b.n	1e42 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1dde:	4b1c      	ldr	r3, [pc, #112]	; (1e50 <system_clock_source_enable+0xa0>)
    1de0:	4a1b      	ldr	r2, [pc, #108]	; (1e50 <system_clock_source_enable+0xa0>)
    1de2:	6992      	ldr	r2, [r2, #24]
    1de4:	2102      	movs	r1, #2
    1de6:	430a      	orrs	r2, r1
    1de8:	619a      	str	r2, [r3, #24]
		break;
    1dea:	e029      	b.n	1e40 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1dec:	4a18      	ldr	r2, [pc, #96]	; (1e50 <system_clock_source_enable+0xa0>)
    1dee:	4b18      	ldr	r3, [pc, #96]	; (1e50 <system_clock_source_enable+0xa0>)
    1df0:	8a1b      	ldrh	r3, [r3, #16]
    1df2:	b29b      	uxth	r3, r3
    1df4:	2102      	movs	r1, #2
    1df6:	430b      	orrs	r3, r1
    1df8:	b29b      	uxth	r3, r3
    1dfa:	8213      	strh	r3, [r2, #16]
		break;
    1dfc:	e020      	b.n	1e40 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1dfe:	4a14      	ldr	r2, [pc, #80]	; (1e50 <system_clock_source_enable+0xa0>)
    1e00:	4b13      	ldr	r3, [pc, #76]	; (1e50 <system_clock_source_enable+0xa0>)
    1e02:	8a9b      	ldrh	r3, [r3, #20]
    1e04:	b29b      	uxth	r3, r3
    1e06:	2102      	movs	r1, #2
    1e08:	430b      	orrs	r3, r1
    1e0a:	b29b      	uxth	r3, r3
    1e0c:	8293      	strh	r3, [r2, #20]
		break;
    1e0e:	e017      	b.n	1e40 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1e10:	4b10      	ldr	r3, [pc, #64]	; (1e54 <system_clock_source_enable+0xa4>)
    1e12:	681b      	ldr	r3, [r3, #0]
    1e14:	2202      	movs	r2, #2
    1e16:	431a      	orrs	r2, r3
    1e18:	4b0e      	ldr	r3, [pc, #56]	; (1e54 <system_clock_source_enable+0xa4>)
    1e1a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    1e1c:	4b0e      	ldr	r3, [pc, #56]	; (1e58 <system_clock_source_enable+0xa8>)
    1e1e:	4798      	blx	r3
		break;
    1e20:	e00e      	b.n	1e40 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1e22:	4a0b      	ldr	r2, [pc, #44]	; (1e50 <system_clock_source_enable+0xa0>)
    1e24:	490a      	ldr	r1, [pc, #40]	; (1e50 <system_clock_source_enable+0xa0>)
    1e26:	2344      	movs	r3, #68	; 0x44
    1e28:	5ccb      	ldrb	r3, [r1, r3]
    1e2a:	b2db      	uxtb	r3, r3
    1e2c:	2102      	movs	r1, #2
    1e2e:	430b      	orrs	r3, r1
    1e30:	b2d9      	uxtb	r1, r3
    1e32:	2344      	movs	r3, #68	; 0x44
    1e34:	54d1      	strb	r1, [r2, r3]
		break;
    1e36:	e003      	b.n	1e40 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1e38:	2300      	movs	r3, #0
    1e3a:	e002      	b.n	1e42 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1e3c:	2317      	movs	r3, #23
    1e3e:	e000      	b.n	1e42 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    1e40:	2300      	movs	r3, #0
}
    1e42:	0018      	movs	r0, r3
    1e44:	46bd      	mov	sp, r7
    1e46:	b002      	add	sp, #8
    1e48:	bd80      	pop	{r7, pc}
    1e4a:	46c0      	nop			; (mov r8, r8)
    1e4c:	000044fc 	.word	0x000044fc
    1e50:	40000800 	.word	0x40000800
    1e54:	200000b8 	.word	0x200000b8
    1e58:	00001b2d 	.word	0x00001b2d

00001e5c <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    1e5c:	b580      	push	{r7, lr}
    1e5e:	b084      	sub	sp, #16
    1e60:	af00      	add	r7, sp, #0
    1e62:	0002      	movs	r2, r0
    1e64:	1dfb      	adds	r3, r7, #7
    1e66:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    1e68:	2300      	movs	r3, #0
    1e6a:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    1e6c:	1dfb      	adds	r3, r7, #7
    1e6e:	781b      	ldrb	r3, [r3, #0]
    1e70:	2b08      	cmp	r3, #8
    1e72:	d821      	bhi.n	1eb8 <system_clock_source_is_ready+0x5c>
    1e74:	009a      	lsls	r2, r3, #2
    1e76:	4b18      	ldr	r3, [pc, #96]	; (1ed8 <system_clock_source_is_ready+0x7c>)
    1e78:	18d3      	adds	r3, r2, r3
    1e7a:	681b      	ldr	r3, [r3, #0]
    1e7c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    1e7e:	2308      	movs	r3, #8
    1e80:	60fb      	str	r3, [r7, #12]
		break;
    1e82:	e01b      	b.n	1ebc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    1e84:	2304      	movs	r3, #4
    1e86:	60fb      	str	r3, [r7, #12]
		break;
    1e88:	e018      	b.n	1ebc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    1e8a:	2301      	movs	r3, #1
    1e8c:	60fb      	str	r3, [r7, #12]
		break;
    1e8e:	e015      	b.n	1ebc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    1e90:	2302      	movs	r3, #2
    1e92:	60fb      	str	r3, [r7, #12]
		break;
    1e94:	e012      	b.n	1ebc <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    1e96:	2310      	movs	r3, #16
    1e98:	60fb      	str	r3, [r7, #12]
		}
		break;
    1e9a:	e00f      	b.n	1ebc <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    1e9c:	4a0f      	ldr	r2, [pc, #60]	; (1edc <system_clock_source_is_ready+0x80>)
    1e9e:	2350      	movs	r3, #80	; 0x50
    1ea0:	5cd3      	ldrb	r3, [r2, r3]
    1ea2:	b2db      	uxtb	r3, r3
    1ea4:	001a      	movs	r2, r3
    1ea6:	2303      	movs	r3, #3
    1ea8:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    1eaa:	3b03      	subs	r3, #3
    1eac:	425a      	negs	r2, r3
    1eae:	4153      	adcs	r3, r2
    1eb0:	b2db      	uxtb	r3, r3
    1eb2:	e00c      	b.n	1ece <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    1eb4:	2301      	movs	r3, #1
    1eb6:	e00a      	b.n	1ece <system_clock_source_is_ready+0x72>

	default:
		return false;
    1eb8:	2300      	movs	r3, #0
    1eba:	e008      	b.n	1ece <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1ebc:	4b07      	ldr	r3, [pc, #28]	; (1edc <system_clock_source_is_ready+0x80>)
    1ebe:	68db      	ldr	r3, [r3, #12]
    1ec0:	68fa      	ldr	r2, [r7, #12]
    1ec2:	401a      	ands	r2, r3
    1ec4:	68fb      	ldr	r3, [r7, #12]
    1ec6:	1ad3      	subs	r3, r2, r3
    1ec8:	425a      	negs	r2, r3
    1eca:	4153      	adcs	r3, r2
    1ecc:	b2db      	uxtb	r3, r3
}
    1ece:	0018      	movs	r0, r3
    1ed0:	46bd      	mov	sp, r7
    1ed2:	b004      	add	sp, #16
    1ed4:	bd80      	pop	{r7, pc}
    1ed6:	46c0      	nop			; (mov r8, r8)
    1ed8:	00004520 	.word	0x00004520
    1edc:	40000800 	.word	0x40000800

00001ee0 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    1ee0:	b580      	push	{r7, lr}
    1ee2:	b082      	sub	sp, #8
    1ee4:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1ee6:	003b      	movs	r3, r7
    1ee8:	2202      	movs	r2, #2
    1eea:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1eec:	2300      	movs	r3, #0
    1eee:	607b      	str	r3, [r7, #4]
    1ef0:	e009      	b.n	1f06 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1ef2:	687b      	ldr	r3, [r7, #4]
    1ef4:	b2db      	uxtb	r3, r3
    1ef6:	003a      	movs	r2, r7
    1ef8:	0011      	movs	r1, r2
    1efa:	0018      	movs	r0, r3
    1efc:	4b05      	ldr	r3, [pc, #20]	; (1f14 <_switch_peripheral_gclk+0x34>)
    1efe:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1f00:	687b      	ldr	r3, [r7, #4]
    1f02:	3301      	adds	r3, #1
    1f04:	607b      	str	r3, [r7, #4]
    1f06:	687b      	ldr	r3, [r7, #4]
    1f08:	2b24      	cmp	r3, #36	; 0x24
    1f0a:	d9f2      	bls.n	1ef2 <_switch_peripheral_gclk+0x12>
	}
}
    1f0c:	46c0      	nop			; (mov r8, r8)
    1f0e:	46bd      	mov	sp, r7
    1f10:	b002      	add	sp, #8
    1f12:	bd80      	pop	{r7, pc}
    1f14:	00002431 	.word	0x00002431

00001f18 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1f18:	b580      	push	{r7, lr}
    1f1a:	b0a6      	sub	sp, #152	; 0x98
    1f1c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1f1e:	4b65      	ldr	r3, [pc, #404]	; (20b4 <STACK_SIZE+0xb4>)
    1f20:	22c2      	movs	r2, #194	; 0xc2
    1f22:	00d2      	lsls	r2, r2, #3
    1f24:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    1f26:	2001      	movs	r0, #1
    1f28:	4b63      	ldr	r3, [pc, #396]	; (20b8 <STACK_SIZE+0xb8>)
    1f2a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    1f2c:	4b63      	ldr	r3, [pc, #396]	; (20bc <STACK_SIZE+0xbc>)
    1f2e:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    1f30:	2394      	movs	r3, #148	; 0x94
    1f32:	18fb      	adds	r3, r7, r3
    1f34:	0018      	movs	r0, r3
    1f36:	4b62      	ldr	r3, [pc, #392]	; (20c0 <STACK_SIZE+0xc0>)
    1f38:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1f3a:	2394      	movs	r3, #148	; 0x94
    1f3c:	18fb      	adds	r3, r7, r3
    1f3e:	2200      	movs	r2, #0
    1f40:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1f42:	2394      	movs	r3, #148	; 0x94
    1f44:	18fb      	adds	r3, r7, r3
    1f46:	2201      	movs	r2, #1
    1f48:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    1f4a:	2394      	movs	r3, #148	; 0x94
    1f4c:	18fb      	adds	r3, r7, r3
    1f4e:	2200      	movs	r2, #0
    1f50:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1f52:	2394      	movs	r3, #148	; 0x94
    1f54:	18fb      	adds	r3, r7, r3
    1f56:	0018      	movs	r0, r3
    1f58:	4b5a      	ldr	r3, [pc, #360]	; (20c4 <STACK_SIZE+0xc4>)
    1f5a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1f5c:	2006      	movs	r0, #6
    1f5e:	4b5a      	ldr	r3, [pc, #360]	; (20c8 <STACK_SIZE+0xc8>)
    1f60:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1f62:	4b5a      	ldr	r3, [pc, #360]	; (20cc <STACK_SIZE+0xcc>)
    1f64:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1f66:	2360      	movs	r3, #96	; 0x60
    1f68:	18fb      	adds	r3, r7, r3
    1f6a:	0018      	movs	r0, r3
    1f6c:	4b58      	ldr	r3, [pc, #352]	; (20d0 <STACK_SIZE+0xd0>)
    1f6e:	4798      	blx	r3
    1f70:	2360      	movs	r3, #96	; 0x60
    1f72:	18fb      	adds	r3, r7, r3
    1f74:	2206      	movs	r2, #6
    1f76:	701a      	strb	r2, [r3, #0]
    1f78:	2360      	movs	r3, #96	; 0x60
    1f7a:	18fb      	adds	r3, r7, r3
    1f7c:	2208      	movs	r2, #8
    1f7e:	605a      	str	r2, [r3, #4]
    1f80:	2360      	movs	r3, #96	; 0x60
    1f82:	18fb      	adds	r3, r7, r3
    1f84:	2200      	movs	r2, #0
    1f86:	721a      	strb	r2, [r3, #8]
    1f88:	2360      	movs	r3, #96	; 0x60
    1f8a:	18fb      	adds	r3, r7, r3
    1f8c:	2200      	movs	r2, #0
    1f8e:	725a      	strb	r2, [r3, #9]
    1f90:	2360      	movs	r3, #96	; 0x60
    1f92:	18fb      	adds	r3, r7, r3
    1f94:	0019      	movs	r1, r3
    1f96:	2001      	movs	r0, #1
    1f98:	4b4e      	ldr	r3, [pc, #312]	; (20d4 <STACK_SIZE+0xd4>)
    1f9a:	4798      	blx	r3
    1f9c:	2001      	movs	r0, #1
    1f9e:	4b4e      	ldr	r3, [pc, #312]	; (20d8 <STACK_SIZE+0xd8>)
    1fa0:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
    1fa2:	2390      	movs	r3, #144	; 0x90
    1fa4:	18fb      	adds	r3, r7, r3
    1fa6:	0018      	movs	r0, r3
    1fa8:	4b4c      	ldr	r3, [pc, #304]	; (20dc <STACK_SIZE+0xdc>)
    1faa:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
    1fac:	2390      	movs	r3, #144	; 0x90
    1fae:	18fb      	adds	r3, r7, r3
    1fb0:	2201      	movs	r2, #1
    1fb2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
    1fb4:	2390      	movs	r3, #144	; 0x90
    1fb6:	18fb      	adds	r3, r7, r3
    1fb8:	0019      	movs	r1, r3
    1fba:	2001      	movs	r0, #1
    1fbc:	4b48      	ldr	r3, [pc, #288]	; (20e0 <STACK_SIZE+0xe0>)
    1fbe:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
    1fc0:	2001      	movs	r0, #1
    1fc2:	4b48      	ldr	r3, [pc, #288]	; (20e4 <STACK_SIZE+0xe4>)
    1fc4:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
    1fc6:	2378      	movs	r3, #120	; 0x78
    1fc8:	18fb      	adds	r3, r7, r3
    1fca:	0018      	movs	r0, r3
    1fcc:	4b46      	ldr	r3, [pc, #280]	; (20e8 <STACK_SIZE+0xe8>)
    1fce:	4798      	blx	r3

	dpll_config.on_demand        = false;
    1fd0:	2378      	movs	r3, #120	; 0x78
    1fd2:	18fb      	adds	r3, r7, r3
    1fd4:	2200      	movs	r2, #0
    1fd6:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
    1fd8:	2378      	movs	r3, #120	; 0x78
    1fda:	18fb      	adds	r3, r7, r3
    1fdc:	2200      	movs	r2, #0
    1fde:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
    1fe0:	2378      	movs	r3, #120	; 0x78
    1fe2:	18fb      	adds	r3, r7, r3
    1fe4:	2200      	movs	r2, #0
    1fe6:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
    1fe8:	2378      	movs	r3, #120	; 0x78
    1fea:	18fb      	adds	r3, r7, r3
    1fec:	2200      	movs	r2, #0
    1fee:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
    1ff0:	2378      	movs	r3, #120	; 0x78
    1ff2:	18fb      	adds	r3, r7, r3
    1ff4:	2200      	movs	r2, #0
    1ff6:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
    1ff8:	2378      	movs	r3, #120	; 0x78
    1ffa:	18fb      	adds	r3, r7, r3
    1ffc:	2200      	movs	r2, #0
    1ffe:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
    2000:	2378      	movs	r3, #120	; 0x78
    2002:	18fb      	adds	r3, r7, r3
    2004:	2200      	movs	r2, #0
    2006:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    2008:	2378      	movs	r3, #120	; 0x78
    200a:	18fb      	adds	r3, r7, r3
    200c:	2202      	movs	r2, #2
    200e:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    2010:	2378      	movs	r3, #120	; 0x78
    2012:	18fb      	adds	r3, r7, r3
    2014:	4a35      	ldr	r2, [pc, #212]	; (20ec <STACK_SIZE+0xec>)
    2016:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
    2018:	2378      	movs	r3, #120	; 0x78
    201a:	18fb      	adds	r3, r7, r3
    201c:	2201      	movs	r2, #1
    201e:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
    2020:	2378      	movs	r3, #120	; 0x78
    2022:	18fb      	adds	r3, r7, r3
    2024:	4a32      	ldr	r2, [pc, #200]	; (20f0 <STACK_SIZE+0xf0>)
    2026:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
    2028:	2378      	movs	r3, #120	; 0x78
    202a:	18fb      	adds	r3, r7, r3
    202c:	0018      	movs	r0, r3
    202e:	4b31      	ldr	r3, [pc, #196]	; (20f4 <STACK_SIZE+0xf4>)
    2030:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    2032:	2008      	movs	r0, #8
    2034:	4b24      	ldr	r3, [pc, #144]	; (20c8 <STACK_SIZE+0xc8>)
    2036:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    2038:	46c0      	nop			; (mov r8, r8)
    203a:	2008      	movs	r0, #8
    203c:	4b2e      	ldr	r3, [pc, #184]	; (20f8 <STACK_SIZE+0xf8>)
    203e:	4798      	blx	r3
    2040:	0003      	movs	r3, r0
    2042:	001a      	movs	r2, r3
    2044:	2301      	movs	r3, #1
    2046:	4053      	eors	r3, r2
    2048:	b2db      	uxtb	r3, r3
    204a:	2b00      	cmp	r3, #0
    204c:	d1f5      	bne.n	203a <STACK_SIZE+0x3a>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    204e:	4919      	ldr	r1, [pc, #100]	; (20b4 <STACK_SIZE+0xb4>)
    2050:	2244      	movs	r2, #68	; 0x44
    2052:	5c8b      	ldrb	r3, [r1, r2]
    2054:	2080      	movs	r0, #128	; 0x80
    2056:	4240      	negs	r0, r0
    2058:	4303      	orrs	r3, r0
    205a:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    205c:	2000      	movs	r0, #0
    205e:	4b27      	ldr	r3, [pc, #156]	; (20fc <STACK_SIZE+0xfc>)
    2060:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    2062:	2100      	movs	r1, #0
    2064:	2000      	movs	r0, #0
    2066:	4b26      	ldr	r3, [pc, #152]	; (2100 <STACK_SIZE+0x100>)
    2068:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    206a:	2100      	movs	r1, #0
    206c:	2001      	movs	r0, #1
    206e:	4b24      	ldr	r3, [pc, #144]	; (2100 <STACK_SIZE+0x100>)
    2070:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    2072:	2100      	movs	r1, #0
    2074:	2002      	movs	r0, #2
    2076:	4b22      	ldr	r3, [pc, #136]	; (2100 <STACK_SIZE+0x100>)
    2078:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    207a:	003b      	movs	r3, r7
    207c:	0018      	movs	r0, r3
    207e:	4b14      	ldr	r3, [pc, #80]	; (20d0 <STACK_SIZE+0xd0>)
    2080:	4798      	blx	r3
    2082:	003b      	movs	r3, r7
    2084:	2206      	movs	r2, #6
    2086:	701a      	strb	r2, [r3, #0]
    2088:	003b      	movs	r3, r7
    208a:	2201      	movs	r2, #1
    208c:	605a      	str	r2, [r3, #4]
    208e:	003b      	movs	r3, r7
    2090:	2200      	movs	r2, #0
    2092:	721a      	strb	r2, [r3, #8]
    2094:	003b      	movs	r3, r7
    2096:	2200      	movs	r2, #0
    2098:	725a      	strb	r2, [r3, #9]
    209a:	003b      	movs	r3, r7
    209c:	0019      	movs	r1, r3
    209e:	2000      	movs	r0, #0
    20a0:	4b0c      	ldr	r3, [pc, #48]	; (20d4 <STACK_SIZE+0xd4>)
    20a2:	4798      	blx	r3
    20a4:	2000      	movs	r0, #0
    20a6:	4b0c      	ldr	r3, [pc, #48]	; (20d8 <STACK_SIZE+0xd8>)
    20a8:	4798      	blx	r3
#endif
}
    20aa:	46c0      	nop			; (mov r8, r8)
    20ac:	46bd      	mov	sp, r7
    20ae:	b026      	add	sp, #152	; 0x98
    20b0:	bd80      	pop	{r7, pc}
    20b2:	46c0      	nop			; (mov r8, r8)
    20b4:	40000800 	.word	0x40000800
    20b8:	00001add 	.word	0x00001add
    20bc:	00001ee1 	.word	0x00001ee1
    20c0:	000019ed 	.word	0x000019ed
    20c4:	00001c2d 	.word	0x00001c2d
    20c8:	00001db1 	.word	0x00001db1
    20cc:	000021a9 	.word	0x000021a9
    20d0:	000019a9 	.word	0x000019a9
    20d4:	000021d9 	.word	0x000021d9
    20d8:	000022fd 	.word	0x000022fd
    20dc:	000019d7 	.word	0x000019d7
    20e0:	00002431 	.word	0x00002431
    20e4:	00002475 	.word	0x00002475
    20e8:	00001a85 	.word	0x00001a85
    20ec:	000f4240 	.word	0x000f4240
    20f0:	02dc6c00 	.word	0x02dc6c00
    20f4:	00001ca5 	.word	0x00001ca5
    20f8:	00001e5d 	.word	0x00001e5d
    20fc:	00001a11 	.word	0x00001a11
    2100:	00001a31 	.word	0x00001a31

00002104 <system_apb_clock_set_mask>:
{
    2104:	b580      	push	{r7, lr}
    2106:	b082      	sub	sp, #8
    2108:	af00      	add	r7, sp, #0
    210a:	0002      	movs	r2, r0
    210c:	6039      	str	r1, [r7, #0]
    210e:	1dfb      	adds	r3, r7, #7
    2110:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2112:	1dfb      	adds	r3, r7, #7
    2114:	781b      	ldrb	r3, [r3, #0]
    2116:	2b01      	cmp	r3, #1
    2118:	d00a      	beq.n	2130 <system_apb_clock_set_mask+0x2c>
    211a:	2b02      	cmp	r3, #2
    211c:	d00f      	beq.n	213e <system_apb_clock_set_mask+0x3a>
    211e:	2b00      	cmp	r3, #0
    2120:	d114      	bne.n	214c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    2122:	4b0e      	ldr	r3, [pc, #56]	; (215c <system_apb_clock_set_mask+0x58>)
    2124:	4a0d      	ldr	r2, [pc, #52]	; (215c <system_apb_clock_set_mask+0x58>)
    2126:	6991      	ldr	r1, [r2, #24]
    2128:	683a      	ldr	r2, [r7, #0]
    212a:	430a      	orrs	r2, r1
    212c:	619a      	str	r2, [r3, #24]
			break;
    212e:	e00f      	b.n	2150 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    2130:	4b0a      	ldr	r3, [pc, #40]	; (215c <system_apb_clock_set_mask+0x58>)
    2132:	4a0a      	ldr	r2, [pc, #40]	; (215c <system_apb_clock_set_mask+0x58>)
    2134:	69d1      	ldr	r1, [r2, #28]
    2136:	683a      	ldr	r2, [r7, #0]
    2138:	430a      	orrs	r2, r1
    213a:	61da      	str	r2, [r3, #28]
			break;
    213c:	e008      	b.n	2150 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    213e:	4b07      	ldr	r3, [pc, #28]	; (215c <system_apb_clock_set_mask+0x58>)
    2140:	4a06      	ldr	r2, [pc, #24]	; (215c <system_apb_clock_set_mask+0x58>)
    2142:	6a11      	ldr	r1, [r2, #32]
    2144:	683a      	ldr	r2, [r7, #0]
    2146:	430a      	orrs	r2, r1
    2148:	621a      	str	r2, [r3, #32]
			break;
    214a:	e001      	b.n	2150 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    214c:	2317      	movs	r3, #23
    214e:	e000      	b.n	2152 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    2150:	2300      	movs	r3, #0
}
    2152:	0018      	movs	r0, r3
    2154:	46bd      	mov	sp, r7
    2156:	b002      	add	sp, #8
    2158:	bd80      	pop	{r7, pc}
    215a:	46c0      	nop			; (mov r8, r8)
    215c:	40000400 	.word	0x40000400

00002160 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    2160:	b580      	push	{r7, lr}
    2162:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    2164:	4b02      	ldr	r3, [pc, #8]	; (2170 <system_interrupt_enter_critical_section+0x10>)
    2166:	4798      	blx	r3
}
    2168:	46c0      	nop			; (mov r8, r8)
    216a:	46bd      	mov	sp, r7
    216c:	bd80      	pop	{r7, pc}
    216e:	46c0      	nop			; (mov r8, r8)
    2170:	000001dd 	.word	0x000001dd

00002174 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    2174:	b580      	push	{r7, lr}
    2176:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    2178:	4b02      	ldr	r3, [pc, #8]	; (2184 <system_interrupt_leave_critical_section+0x10>)
    217a:	4798      	blx	r3
}
    217c:	46c0      	nop			; (mov r8, r8)
    217e:	46bd      	mov	sp, r7
    2180:	bd80      	pop	{r7, pc}
    2182:	46c0      	nop			; (mov r8, r8)
    2184:	00000231 	.word	0x00000231

00002188 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    2188:	b580      	push	{r7, lr}
    218a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    218c:	4b05      	ldr	r3, [pc, #20]	; (21a4 <system_gclk_is_syncing+0x1c>)
    218e:	785b      	ldrb	r3, [r3, #1]
    2190:	b2db      	uxtb	r3, r3
    2192:	b25b      	sxtb	r3, r3
    2194:	2b00      	cmp	r3, #0
    2196:	da01      	bge.n	219c <system_gclk_is_syncing+0x14>
		return true;
    2198:	2301      	movs	r3, #1
    219a:	e000      	b.n	219e <system_gclk_is_syncing+0x16>
	}

	return false;
    219c:	2300      	movs	r3, #0
}
    219e:	0018      	movs	r0, r3
    21a0:	46bd      	mov	sp, r7
    21a2:	bd80      	pop	{r7, pc}
    21a4:	40000c00 	.word	0x40000c00

000021a8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    21a8:	b580      	push	{r7, lr}
    21aa:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    21ac:	2108      	movs	r1, #8
    21ae:	2000      	movs	r0, #0
    21b0:	4b07      	ldr	r3, [pc, #28]	; (21d0 <system_gclk_init+0x28>)
    21b2:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    21b4:	4b07      	ldr	r3, [pc, #28]	; (21d4 <system_gclk_init+0x2c>)
    21b6:	2201      	movs	r2, #1
    21b8:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    21ba:	46c0      	nop			; (mov r8, r8)
    21bc:	4b05      	ldr	r3, [pc, #20]	; (21d4 <system_gclk_init+0x2c>)
    21be:	781b      	ldrb	r3, [r3, #0]
    21c0:	b2db      	uxtb	r3, r3
    21c2:	001a      	movs	r2, r3
    21c4:	2301      	movs	r3, #1
    21c6:	4013      	ands	r3, r2
    21c8:	d1f8      	bne.n	21bc <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    21ca:	46c0      	nop			; (mov r8, r8)
    21cc:	46bd      	mov	sp, r7
    21ce:	bd80      	pop	{r7, pc}
    21d0:	00002105 	.word	0x00002105
    21d4:	40000c00 	.word	0x40000c00

000021d8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    21d8:	b580      	push	{r7, lr}
    21da:	b086      	sub	sp, #24
    21dc:	af00      	add	r7, sp, #0
    21de:	0002      	movs	r2, r0
    21e0:	6039      	str	r1, [r7, #0]
    21e2:	1dfb      	adds	r3, r7, #7
    21e4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    21e6:	1dfb      	adds	r3, r7, #7
    21e8:	781b      	ldrb	r3, [r3, #0]
    21ea:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    21ec:	1dfb      	adds	r3, r7, #7
    21ee:	781b      	ldrb	r3, [r3, #0]
    21f0:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    21f2:	683b      	ldr	r3, [r7, #0]
    21f4:	781b      	ldrb	r3, [r3, #0]
    21f6:	021b      	lsls	r3, r3, #8
    21f8:	001a      	movs	r2, r3
    21fa:	697b      	ldr	r3, [r7, #20]
    21fc:	4313      	orrs	r3, r2
    21fe:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2200:	683b      	ldr	r3, [r7, #0]
    2202:	785b      	ldrb	r3, [r3, #1]
    2204:	2b00      	cmp	r3, #0
    2206:	d004      	beq.n	2212 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2208:	697b      	ldr	r3, [r7, #20]
    220a:	2280      	movs	r2, #128	; 0x80
    220c:	02d2      	lsls	r2, r2, #11
    220e:	4313      	orrs	r3, r2
    2210:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2212:	683b      	ldr	r3, [r7, #0]
    2214:	7a5b      	ldrb	r3, [r3, #9]
    2216:	2b00      	cmp	r3, #0
    2218:	d004      	beq.n	2224 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    221a:	697b      	ldr	r3, [r7, #20]
    221c:	2280      	movs	r2, #128	; 0x80
    221e:	0312      	lsls	r2, r2, #12
    2220:	4313      	orrs	r3, r2
    2222:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2224:	683b      	ldr	r3, [r7, #0]
    2226:	685b      	ldr	r3, [r3, #4]
    2228:	2b01      	cmp	r3, #1
    222a:	d92c      	bls.n	2286 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    222c:	683b      	ldr	r3, [r7, #0]
    222e:	685a      	ldr	r2, [r3, #4]
    2230:	683b      	ldr	r3, [r7, #0]
    2232:	685b      	ldr	r3, [r3, #4]
    2234:	3b01      	subs	r3, #1
    2236:	4013      	ands	r3, r2
    2238:	d11a      	bne.n	2270 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    223a:	2300      	movs	r3, #0
    223c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    223e:	2302      	movs	r3, #2
    2240:	60bb      	str	r3, [r7, #8]
    2242:	e005      	b.n	2250 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    2244:	68fb      	ldr	r3, [r7, #12]
    2246:	3301      	adds	r3, #1
    2248:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    224a:	68bb      	ldr	r3, [r7, #8]
    224c:	005b      	lsls	r3, r3, #1
    224e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    2250:	683b      	ldr	r3, [r7, #0]
    2252:	685a      	ldr	r2, [r3, #4]
    2254:	68bb      	ldr	r3, [r7, #8]
    2256:	429a      	cmp	r2, r3
    2258:	d8f4      	bhi.n	2244 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    225a:	68fb      	ldr	r3, [r7, #12]
    225c:	021b      	lsls	r3, r3, #8
    225e:	693a      	ldr	r2, [r7, #16]
    2260:	4313      	orrs	r3, r2
    2262:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2264:	697b      	ldr	r3, [r7, #20]
    2266:	2280      	movs	r2, #128	; 0x80
    2268:	0352      	lsls	r2, r2, #13
    226a:	4313      	orrs	r3, r2
    226c:	617b      	str	r3, [r7, #20]
    226e:	e00a      	b.n	2286 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2270:	683b      	ldr	r3, [r7, #0]
    2272:	685b      	ldr	r3, [r3, #4]
    2274:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    2276:	693a      	ldr	r2, [r7, #16]
    2278:	4313      	orrs	r3, r2
    227a:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    227c:	697b      	ldr	r3, [r7, #20]
    227e:	2280      	movs	r2, #128	; 0x80
    2280:	0292      	lsls	r2, r2, #10
    2282:	4313      	orrs	r3, r2
    2284:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2286:	683b      	ldr	r3, [r7, #0]
    2288:	7a1b      	ldrb	r3, [r3, #8]
    228a:	2b00      	cmp	r3, #0
    228c:	d004      	beq.n	2298 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    228e:	697b      	ldr	r3, [r7, #20]
    2290:	2280      	movs	r2, #128	; 0x80
    2292:	0392      	lsls	r2, r2, #14
    2294:	4313      	orrs	r3, r2
    2296:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    2298:	46c0      	nop			; (mov r8, r8)
    229a:	4b13      	ldr	r3, [pc, #76]	; (22e8 <system_gclk_gen_set_config+0x110>)
    229c:	4798      	blx	r3
    229e:	1e03      	subs	r3, r0, #0
    22a0:	d1fb      	bne.n	229a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    22a2:	4b12      	ldr	r3, [pc, #72]	; (22ec <system_gclk_gen_set_config+0x114>)
    22a4:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    22a6:	4a12      	ldr	r2, [pc, #72]	; (22f0 <system_gclk_gen_set_config+0x118>)
    22a8:	1dfb      	adds	r3, r7, #7
    22aa:	781b      	ldrb	r3, [r3, #0]
    22ac:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    22ae:	46c0      	nop			; (mov r8, r8)
    22b0:	4b0d      	ldr	r3, [pc, #52]	; (22e8 <system_gclk_gen_set_config+0x110>)
    22b2:	4798      	blx	r3
    22b4:	1e03      	subs	r3, r0, #0
    22b6:	d1fb      	bne.n	22b0 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    22b8:	4b0e      	ldr	r3, [pc, #56]	; (22f4 <system_gclk_gen_set_config+0x11c>)
    22ba:	693a      	ldr	r2, [r7, #16]
    22bc:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	4b09      	ldr	r3, [pc, #36]	; (22e8 <system_gclk_gen_set_config+0x110>)
    22c2:	4798      	blx	r3
    22c4:	1e03      	subs	r3, r0, #0
    22c6:	d1fb      	bne.n	22c0 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    22c8:	4b0a      	ldr	r3, [pc, #40]	; (22f4 <system_gclk_gen_set_config+0x11c>)
    22ca:	4a0a      	ldr	r2, [pc, #40]	; (22f4 <system_gclk_gen_set_config+0x11c>)
    22cc:	6851      	ldr	r1, [r2, #4]
    22ce:	2280      	movs	r2, #128	; 0x80
    22d0:	0252      	lsls	r2, r2, #9
    22d2:	4011      	ands	r1, r2
    22d4:	697a      	ldr	r2, [r7, #20]
    22d6:	430a      	orrs	r2, r1
    22d8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    22da:	4b07      	ldr	r3, [pc, #28]	; (22f8 <system_gclk_gen_set_config+0x120>)
    22dc:	4798      	blx	r3
}
    22de:	46c0      	nop			; (mov r8, r8)
    22e0:	46bd      	mov	sp, r7
    22e2:	b006      	add	sp, #24
    22e4:	bd80      	pop	{r7, pc}
    22e6:	46c0      	nop			; (mov r8, r8)
    22e8:	00002189 	.word	0x00002189
    22ec:	00002161 	.word	0x00002161
    22f0:	40000c08 	.word	0x40000c08
    22f4:	40000c00 	.word	0x40000c00
    22f8:	00002175 	.word	0x00002175

000022fc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    22fc:	b580      	push	{r7, lr}
    22fe:	b082      	sub	sp, #8
    2300:	af00      	add	r7, sp, #0
    2302:	0002      	movs	r2, r0
    2304:	1dfb      	adds	r3, r7, #7
    2306:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    2308:	46c0      	nop			; (mov r8, r8)
    230a:	4b0e      	ldr	r3, [pc, #56]	; (2344 <system_gclk_gen_enable+0x48>)
    230c:	4798      	blx	r3
    230e:	1e03      	subs	r3, r0, #0
    2310:	d1fb      	bne.n	230a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2312:	4b0d      	ldr	r3, [pc, #52]	; (2348 <system_gclk_gen_enable+0x4c>)
    2314:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2316:	4a0d      	ldr	r2, [pc, #52]	; (234c <system_gclk_gen_enable+0x50>)
    2318:	1dfb      	adds	r3, r7, #7
    231a:	781b      	ldrb	r3, [r3, #0]
    231c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	4b08      	ldr	r3, [pc, #32]	; (2344 <system_gclk_gen_enable+0x48>)
    2322:	4798      	blx	r3
    2324:	1e03      	subs	r3, r0, #0
    2326:	d1fb      	bne.n	2320 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2328:	4b09      	ldr	r3, [pc, #36]	; (2350 <system_gclk_gen_enable+0x54>)
    232a:	4a09      	ldr	r2, [pc, #36]	; (2350 <system_gclk_gen_enable+0x54>)
    232c:	6852      	ldr	r2, [r2, #4]
    232e:	2180      	movs	r1, #128	; 0x80
    2330:	0249      	lsls	r1, r1, #9
    2332:	430a      	orrs	r2, r1
    2334:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    2336:	4b07      	ldr	r3, [pc, #28]	; (2354 <system_gclk_gen_enable+0x58>)
    2338:	4798      	blx	r3
}
    233a:	46c0      	nop			; (mov r8, r8)
    233c:	46bd      	mov	sp, r7
    233e:	b002      	add	sp, #8
    2340:	bd80      	pop	{r7, pc}
    2342:	46c0      	nop			; (mov r8, r8)
    2344:	00002189 	.word	0x00002189
    2348:	00002161 	.word	0x00002161
    234c:	40000c04 	.word	0x40000c04
    2350:	40000c00 	.word	0x40000c00
    2354:	00002175 	.word	0x00002175

00002358 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2358:	b580      	push	{r7, lr}
    235a:	b086      	sub	sp, #24
    235c:	af00      	add	r7, sp, #0
    235e:	0002      	movs	r2, r0
    2360:	1dfb      	adds	r3, r7, #7
    2362:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    2364:	46c0      	nop			; (mov r8, r8)
    2366:	4b2a      	ldr	r3, [pc, #168]	; (2410 <system_gclk_gen_get_hz+0xb8>)
    2368:	4798      	blx	r3
    236a:	1e03      	subs	r3, r0, #0
    236c:	d1fb      	bne.n	2366 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    236e:	4b29      	ldr	r3, [pc, #164]	; (2414 <system_gclk_gen_get_hz+0xbc>)
    2370:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2372:	4a29      	ldr	r2, [pc, #164]	; (2418 <system_gclk_gen_get_hz+0xc0>)
    2374:	1dfb      	adds	r3, r7, #7
    2376:	781b      	ldrb	r3, [r3, #0]
    2378:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    237a:	46c0      	nop			; (mov r8, r8)
    237c:	4b24      	ldr	r3, [pc, #144]	; (2410 <system_gclk_gen_get_hz+0xb8>)
    237e:	4798      	blx	r3
    2380:	1e03      	subs	r3, r0, #0
    2382:	d1fb      	bne.n	237c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2384:	4b25      	ldr	r3, [pc, #148]	; (241c <system_gclk_gen_get_hz+0xc4>)
    2386:	685b      	ldr	r3, [r3, #4]
    2388:	04db      	lsls	r3, r3, #19
    238a:	0edb      	lsrs	r3, r3, #27
    238c:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    238e:	0018      	movs	r0, r3
    2390:	4b23      	ldr	r3, [pc, #140]	; (2420 <system_gclk_gen_get_hz+0xc8>)
    2392:	4798      	blx	r3
    2394:	0003      	movs	r3, r0
    2396:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2398:	4a1f      	ldr	r2, [pc, #124]	; (2418 <system_gclk_gen_get_hz+0xc0>)
    239a:	1dfb      	adds	r3, r7, #7
    239c:	781b      	ldrb	r3, [r3, #0]
    239e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    23a0:	4b1e      	ldr	r3, [pc, #120]	; (241c <system_gclk_gen_get_hz+0xc4>)
    23a2:	685b      	ldr	r3, [r3, #4]
    23a4:	02db      	lsls	r3, r3, #11
    23a6:	0fdb      	lsrs	r3, r3, #31
    23a8:	b2da      	uxtb	r2, r3
    23aa:	2313      	movs	r3, #19
    23ac:	18fb      	adds	r3, r7, r3
    23ae:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    23b0:	4a1c      	ldr	r2, [pc, #112]	; (2424 <system_gclk_gen_get_hz+0xcc>)
    23b2:	1dfb      	adds	r3, r7, #7
    23b4:	781b      	ldrb	r3, [r3, #0]
    23b6:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    23b8:	46c0      	nop			; (mov r8, r8)
    23ba:	4b15      	ldr	r3, [pc, #84]	; (2410 <system_gclk_gen_get_hz+0xb8>)
    23bc:	4798      	blx	r3
    23be:	1e03      	subs	r3, r0, #0
    23c0:	d1fb      	bne.n	23ba <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    23c2:	4b16      	ldr	r3, [pc, #88]	; (241c <system_gclk_gen_get_hz+0xc4>)
    23c4:	689b      	ldr	r3, [r3, #8]
    23c6:	021b      	lsls	r3, r3, #8
    23c8:	0c1b      	lsrs	r3, r3, #16
    23ca:	b29b      	uxth	r3, r3
    23cc:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    23ce:	4b16      	ldr	r3, [pc, #88]	; (2428 <system_gclk_gen_get_hz+0xd0>)
    23d0:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    23d2:	2313      	movs	r3, #19
    23d4:	18fb      	adds	r3, r7, r3
    23d6:	781b      	ldrb	r3, [r3, #0]
    23d8:	2b00      	cmp	r3, #0
    23da:	d109      	bne.n	23f0 <system_gclk_gen_get_hz+0x98>
    23dc:	68fb      	ldr	r3, [r7, #12]
    23de:	2b01      	cmp	r3, #1
    23e0:	d906      	bls.n	23f0 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    23e2:	4b12      	ldr	r3, [pc, #72]	; (242c <system_gclk_gen_get_hz+0xd4>)
    23e4:	68f9      	ldr	r1, [r7, #12]
    23e6:	6978      	ldr	r0, [r7, #20]
    23e8:	4798      	blx	r3
    23ea:	0003      	movs	r3, r0
    23ec:	617b      	str	r3, [r7, #20]
    23ee:	e00a      	b.n	2406 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    23f0:	2313      	movs	r3, #19
    23f2:	18fb      	adds	r3, r7, r3
    23f4:	781b      	ldrb	r3, [r3, #0]
    23f6:	2b00      	cmp	r3, #0
    23f8:	d005      	beq.n	2406 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    23fa:	68fb      	ldr	r3, [r7, #12]
    23fc:	3301      	adds	r3, #1
    23fe:	697a      	ldr	r2, [r7, #20]
    2400:	40da      	lsrs	r2, r3
    2402:	0013      	movs	r3, r2
    2404:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    2406:	697b      	ldr	r3, [r7, #20]
}
    2408:	0018      	movs	r0, r3
    240a:	46bd      	mov	sp, r7
    240c:	b006      	add	sp, #24
    240e:	bd80      	pop	{r7, pc}
    2410:	00002189 	.word	0x00002189
    2414:	00002161 	.word	0x00002161
    2418:	40000c04 	.word	0x40000c04
    241c:	40000c00 	.word	0x40000c00
    2420:	00001b71 	.word	0x00001b71
    2424:	40000c08 	.word	0x40000c08
    2428:	00002175 	.word	0x00002175
    242c:	0000311d 	.word	0x0000311d

00002430 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    2430:	b580      	push	{r7, lr}
    2432:	b084      	sub	sp, #16
    2434:	af00      	add	r7, sp, #0
    2436:	0002      	movs	r2, r0
    2438:	6039      	str	r1, [r7, #0]
    243a:	1dfb      	adds	r3, r7, #7
    243c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    243e:	1dfb      	adds	r3, r7, #7
    2440:	781b      	ldrb	r3, [r3, #0]
    2442:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2444:	683b      	ldr	r3, [r7, #0]
    2446:	781b      	ldrb	r3, [r3, #0]
    2448:	021b      	lsls	r3, r3, #8
    244a:	001a      	movs	r2, r3
    244c:	68fb      	ldr	r3, [r7, #12]
    244e:	4313      	orrs	r3, r2
    2450:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    2452:	1dfb      	adds	r3, r7, #7
    2454:	781b      	ldrb	r3, [r3, #0]
    2456:	0018      	movs	r0, r3
    2458:	4b04      	ldr	r3, [pc, #16]	; (246c <system_gclk_chan_set_config+0x3c>)
    245a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    245c:	4b04      	ldr	r3, [pc, #16]	; (2470 <system_gclk_chan_set_config+0x40>)
    245e:	68fa      	ldr	r2, [r7, #12]
    2460:	b292      	uxth	r2, r2
    2462:	805a      	strh	r2, [r3, #2]
}
    2464:	46c0      	nop			; (mov r8, r8)
    2466:	46bd      	mov	sp, r7
    2468:	b004      	add	sp, #16
    246a:	bd80      	pop	{r7, pc}
    246c:	000024bd 	.word	0x000024bd
    2470:	40000c00 	.word	0x40000c00

00002474 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2474:	b580      	push	{r7, lr}
    2476:	b082      	sub	sp, #8
    2478:	af00      	add	r7, sp, #0
    247a:	0002      	movs	r2, r0
    247c:	1dfb      	adds	r3, r7, #7
    247e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    2480:	4b0a      	ldr	r3, [pc, #40]	; (24ac <system_gclk_chan_enable+0x38>)
    2482:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2484:	4a0a      	ldr	r2, [pc, #40]	; (24b0 <system_gclk_chan_enable+0x3c>)
    2486:	1dfb      	adds	r3, r7, #7
    2488:	781b      	ldrb	r3, [r3, #0]
    248a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    248c:	4909      	ldr	r1, [pc, #36]	; (24b4 <system_gclk_chan_enable+0x40>)
    248e:	4b09      	ldr	r3, [pc, #36]	; (24b4 <system_gclk_chan_enable+0x40>)
    2490:	885b      	ldrh	r3, [r3, #2]
    2492:	b29b      	uxth	r3, r3
    2494:	2280      	movs	r2, #128	; 0x80
    2496:	01d2      	lsls	r2, r2, #7
    2498:	4313      	orrs	r3, r2
    249a:	b29b      	uxth	r3, r3
    249c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    249e:	4b06      	ldr	r3, [pc, #24]	; (24b8 <system_gclk_chan_enable+0x44>)
    24a0:	4798      	blx	r3
}
    24a2:	46c0      	nop			; (mov r8, r8)
    24a4:	46bd      	mov	sp, r7
    24a6:	b002      	add	sp, #8
    24a8:	bd80      	pop	{r7, pc}
    24aa:	46c0      	nop			; (mov r8, r8)
    24ac:	00002161 	.word	0x00002161
    24b0:	40000c02 	.word	0x40000c02
    24b4:	40000c00 	.word	0x40000c00
    24b8:	00002175 	.word	0x00002175

000024bc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    24bc:	b580      	push	{r7, lr}
    24be:	b084      	sub	sp, #16
    24c0:	af00      	add	r7, sp, #0
    24c2:	0002      	movs	r2, r0
    24c4:	1dfb      	adds	r3, r7, #7
    24c6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    24c8:	4b1c      	ldr	r3, [pc, #112]	; (253c <system_gclk_chan_disable+0x80>)
    24ca:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    24cc:	4a1c      	ldr	r2, [pc, #112]	; (2540 <system_gclk_chan_disable+0x84>)
    24ce:	1dfb      	adds	r3, r7, #7
    24d0:	781b      	ldrb	r3, [r3, #0]
    24d2:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    24d4:	4b1b      	ldr	r3, [pc, #108]	; (2544 <system_gclk_chan_disable+0x88>)
    24d6:	885b      	ldrh	r3, [r3, #2]
    24d8:	051b      	lsls	r3, r3, #20
    24da:	0f1b      	lsrs	r3, r3, #28
    24dc:	b2db      	uxtb	r3, r3
    24de:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    24e0:	4a18      	ldr	r2, [pc, #96]	; (2544 <system_gclk_chan_disable+0x88>)
    24e2:	8853      	ldrh	r3, [r2, #2]
    24e4:	4918      	ldr	r1, [pc, #96]	; (2548 <system_gclk_chan_disable+0x8c>)
    24e6:	400b      	ands	r3, r1
    24e8:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    24ea:	4a16      	ldr	r2, [pc, #88]	; (2544 <system_gclk_chan_disable+0x88>)
    24ec:	4b15      	ldr	r3, [pc, #84]	; (2544 <system_gclk_chan_disable+0x88>)
    24ee:	885b      	ldrh	r3, [r3, #2]
    24f0:	b29b      	uxth	r3, r3
    24f2:	4916      	ldr	r1, [pc, #88]	; (254c <system_gclk_chan_disable+0x90>)
    24f4:	400b      	ands	r3, r1
    24f6:	b29b      	uxth	r3, r3
    24f8:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    24fa:	46c0      	nop			; (mov r8, r8)
    24fc:	4b11      	ldr	r3, [pc, #68]	; (2544 <system_gclk_chan_disable+0x88>)
    24fe:	885b      	ldrh	r3, [r3, #2]
    2500:	b29b      	uxth	r3, r3
    2502:	001a      	movs	r2, r3
    2504:	2380      	movs	r3, #128	; 0x80
    2506:	01db      	lsls	r3, r3, #7
    2508:	4013      	ands	r3, r2
    250a:	d1f7      	bne.n	24fc <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    250c:	4a0d      	ldr	r2, [pc, #52]	; (2544 <system_gclk_chan_disable+0x88>)
    250e:	68fb      	ldr	r3, [r7, #12]
    2510:	b2db      	uxtb	r3, r3
    2512:	1c19      	adds	r1, r3, #0
    2514:	230f      	movs	r3, #15
    2516:	400b      	ands	r3, r1
    2518:	b2d9      	uxtb	r1, r3
    251a:	8853      	ldrh	r3, [r2, #2]
    251c:	1c08      	adds	r0, r1, #0
    251e:	210f      	movs	r1, #15
    2520:	4001      	ands	r1, r0
    2522:	0208      	lsls	r0, r1, #8
    2524:	4908      	ldr	r1, [pc, #32]	; (2548 <system_gclk_chan_disable+0x8c>)
    2526:	400b      	ands	r3, r1
    2528:	1c19      	adds	r1, r3, #0
    252a:	1c03      	adds	r3, r0, #0
    252c:	430b      	orrs	r3, r1
    252e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    2530:	4b07      	ldr	r3, [pc, #28]	; (2550 <system_gclk_chan_disable+0x94>)
    2532:	4798      	blx	r3
}
    2534:	46c0      	nop			; (mov r8, r8)
    2536:	46bd      	mov	sp, r7
    2538:	b004      	add	sp, #16
    253a:	bd80      	pop	{r7, pc}
    253c:	00002161 	.word	0x00002161
    2540:	40000c02 	.word	0x40000c02
    2544:	40000c00 	.word	0x40000c00
    2548:	fffff0ff 	.word	0xfffff0ff
    254c:	ffffbfff 	.word	0xffffbfff
    2550:	00002175 	.word	0x00002175

00002554 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2554:	b580      	push	{r7, lr}
    2556:	b084      	sub	sp, #16
    2558:	af00      	add	r7, sp, #0
    255a:	0002      	movs	r2, r0
    255c:	1dfb      	adds	r3, r7, #7
    255e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    2560:	4b0d      	ldr	r3, [pc, #52]	; (2598 <system_gclk_chan_get_hz+0x44>)
    2562:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2564:	4a0d      	ldr	r2, [pc, #52]	; (259c <system_gclk_chan_get_hz+0x48>)
    2566:	1dfb      	adds	r3, r7, #7
    2568:	781b      	ldrb	r3, [r3, #0]
    256a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    256c:	4b0c      	ldr	r3, [pc, #48]	; (25a0 <system_gclk_chan_get_hz+0x4c>)
    256e:	885b      	ldrh	r3, [r3, #2]
    2570:	051b      	lsls	r3, r3, #20
    2572:	0f1b      	lsrs	r3, r3, #28
    2574:	b2da      	uxtb	r2, r3
    2576:	230f      	movs	r3, #15
    2578:	18fb      	adds	r3, r7, r3
    257a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    257c:	4b09      	ldr	r3, [pc, #36]	; (25a4 <system_gclk_chan_get_hz+0x50>)
    257e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2580:	230f      	movs	r3, #15
    2582:	18fb      	adds	r3, r7, r3
    2584:	781b      	ldrb	r3, [r3, #0]
    2586:	0018      	movs	r0, r3
    2588:	4b07      	ldr	r3, [pc, #28]	; (25a8 <system_gclk_chan_get_hz+0x54>)
    258a:	4798      	blx	r3
    258c:	0003      	movs	r3, r0
}
    258e:	0018      	movs	r0, r3
    2590:	46bd      	mov	sp, r7
    2592:	b004      	add	sp, #16
    2594:	bd80      	pop	{r7, pc}
    2596:	46c0      	nop			; (mov r8, r8)
    2598:	00002161 	.word	0x00002161
    259c:	40000c02 	.word	0x40000c02
    25a0:	40000c00 	.word	0x40000c00
    25a4:	00002175 	.word	0x00002175
    25a8:	00002359 	.word	0x00002359

000025ac <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    25ac:	b580      	push	{r7, lr}
    25ae:	b084      	sub	sp, #16
    25b0:	af00      	add	r7, sp, #0
    25b2:	0002      	movs	r2, r0
    25b4:	1dfb      	adds	r3, r7, #7
    25b6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    25b8:	230f      	movs	r3, #15
    25ba:	18fb      	adds	r3, r7, r3
    25bc:	1dfa      	adds	r2, r7, #7
    25be:	7812      	ldrb	r2, [r2, #0]
    25c0:	09d2      	lsrs	r2, r2, #7
    25c2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    25c4:	230e      	movs	r3, #14
    25c6:	18fb      	adds	r3, r7, r3
    25c8:	1dfa      	adds	r2, r7, #7
    25ca:	7812      	ldrb	r2, [r2, #0]
    25cc:	0952      	lsrs	r2, r2, #5
    25ce:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    25d0:	4b0d      	ldr	r3, [pc, #52]	; (2608 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    25d2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    25d4:	230f      	movs	r3, #15
    25d6:	18fb      	adds	r3, r7, r3
    25d8:	781b      	ldrb	r3, [r3, #0]
    25da:	2b00      	cmp	r3, #0
    25dc:	d10f      	bne.n	25fe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    25de:	230f      	movs	r3, #15
    25e0:	18fb      	adds	r3, r7, r3
    25e2:	781b      	ldrb	r3, [r3, #0]
    25e4:	009b      	lsls	r3, r3, #2
    25e6:	2210      	movs	r2, #16
    25e8:	4694      	mov	ip, r2
    25ea:	44bc      	add	ip, r7
    25ec:	4463      	add	r3, ip
    25ee:	3b08      	subs	r3, #8
    25f0:	681a      	ldr	r2, [r3, #0]
    25f2:	230e      	movs	r3, #14
    25f4:	18fb      	adds	r3, r7, r3
    25f6:	781b      	ldrb	r3, [r3, #0]
    25f8:	01db      	lsls	r3, r3, #7
    25fa:	18d3      	adds	r3, r2, r3
    25fc:	e000      	b.n	2600 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    25fe:	2300      	movs	r3, #0
	}
}
    2600:	0018      	movs	r0, r3
    2602:	46bd      	mov	sp, r7
    2604:	b004      	add	sp, #16
    2606:	bd80      	pop	{r7, pc}
    2608:	41004400 	.word	0x41004400

0000260c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    260c:	b580      	push	{r7, lr}
    260e:	b088      	sub	sp, #32
    2610:	af00      	add	r7, sp, #0
    2612:	60f8      	str	r0, [r7, #12]
    2614:	60b9      	str	r1, [r7, #8]
    2616:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    2618:	2300      	movs	r3, #0
    261a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    261c:	687b      	ldr	r3, [r7, #4]
    261e:	78db      	ldrb	r3, [r3, #3]
    2620:	2201      	movs	r2, #1
    2622:	4053      	eors	r3, r2
    2624:	b2db      	uxtb	r3, r3
    2626:	2b00      	cmp	r3, #0
    2628:	d035      	beq.n	2696 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    262a:	687b      	ldr	r3, [r7, #4]
    262c:	781b      	ldrb	r3, [r3, #0]
    262e:	2b80      	cmp	r3, #128	; 0x80
    2630:	d00b      	beq.n	264a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    2632:	69fb      	ldr	r3, [r7, #28]
    2634:	2280      	movs	r2, #128	; 0x80
    2636:	0252      	lsls	r2, r2, #9
    2638:	4313      	orrs	r3, r2
    263a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    263c:	687b      	ldr	r3, [r7, #4]
    263e:	781b      	ldrb	r3, [r3, #0]
    2640:	061b      	lsls	r3, r3, #24
    2642:	001a      	movs	r2, r3
    2644:	69fb      	ldr	r3, [r7, #28]
    2646:	4313      	orrs	r3, r2
    2648:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    264a:	687b      	ldr	r3, [r7, #4]
    264c:	785b      	ldrb	r3, [r3, #1]
    264e:	2b00      	cmp	r3, #0
    2650:	d003      	beq.n	265a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2652:	687b      	ldr	r3, [r7, #4]
    2654:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2656:	2b02      	cmp	r3, #2
    2658:	d110      	bne.n	267c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    265a:	69fb      	ldr	r3, [r7, #28]
    265c:	2280      	movs	r2, #128	; 0x80
    265e:	0292      	lsls	r2, r2, #10
    2660:	4313      	orrs	r3, r2
    2662:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2664:	687b      	ldr	r3, [r7, #4]
    2666:	789b      	ldrb	r3, [r3, #2]
    2668:	2b00      	cmp	r3, #0
    266a:	d004      	beq.n	2676 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    266c:	69fb      	ldr	r3, [r7, #28]
    266e:	2280      	movs	r2, #128	; 0x80
    2670:	02d2      	lsls	r2, r2, #11
    2672:	4313      	orrs	r3, r2
    2674:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2676:	68fb      	ldr	r3, [r7, #12]
    2678:	68ba      	ldr	r2, [r7, #8]
    267a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    267c:	687b      	ldr	r3, [r7, #4]
    267e:	785b      	ldrb	r3, [r3, #1]
    2680:	2b01      	cmp	r3, #1
    2682:	d003      	beq.n	268c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2684:	687b      	ldr	r3, [r7, #4]
    2686:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2688:	2b02      	cmp	r3, #2
    268a:	d107      	bne.n	269c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    268c:	69fb      	ldr	r3, [r7, #28]
    268e:	4a22      	ldr	r2, [pc, #136]	; (2718 <_system_pinmux_config+0x10c>)
    2690:	4013      	ands	r3, r2
    2692:	61fb      	str	r3, [r7, #28]
    2694:	e002      	b.n	269c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    2696:	68fb      	ldr	r3, [r7, #12]
    2698:	68ba      	ldr	r2, [r7, #8]
    269a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    269c:	68bb      	ldr	r3, [r7, #8]
    269e:	041b      	lsls	r3, r3, #16
    26a0:	0c1b      	lsrs	r3, r3, #16
    26a2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    26a4:	68bb      	ldr	r3, [r7, #8]
    26a6:	0c1b      	lsrs	r3, r3, #16
    26a8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    26aa:	69ba      	ldr	r2, [r7, #24]
    26ac:	69fb      	ldr	r3, [r7, #28]
    26ae:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    26b0:	22a0      	movs	r2, #160	; 0xa0
    26b2:	05d2      	lsls	r2, r2, #23
    26b4:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    26b6:	68fb      	ldr	r3, [r7, #12]
    26b8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    26ba:	697a      	ldr	r2, [r7, #20]
    26bc:	69fb      	ldr	r3, [r7, #28]
    26be:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    26c0:	22d0      	movs	r2, #208	; 0xd0
    26c2:	0612      	lsls	r2, r2, #24
    26c4:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    26c6:	68fb      	ldr	r3, [r7, #12]
    26c8:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    26ca:	687b      	ldr	r3, [r7, #4]
    26cc:	78db      	ldrb	r3, [r3, #3]
    26ce:	2201      	movs	r2, #1
    26d0:	4053      	eors	r3, r2
    26d2:	b2db      	uxtb	r3, r3
    26d4:	2b00      	cmp	r3, #0
    26d6:	d01a      	beq.n	270e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    26d8:	69fa      	ldr	r2, [r7, #28]
    26da:	2380      	movs	r3, #128	; 0x80
    26dc:	02db      	lsls	r3, r3, #11
    26de:	4013      	ands	r3, r2
    26e0:	d00a      	beq.n	26f8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    26e2:	687b      	ldr	r3, [r7, #4]
    26e4:	789b      	ldrb	r3, [r3, #2]
    26e6:	2b01      	cmp	r3, #1
    26e8:	d103      	bne.n	26f2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    26ea:	68fb      	ldr	r3, [r7, #12]
    26ec:	68ba      	ldr	r2, [r7, #8]
    26ee:	619a      	str	r2, [r3, #24]
    26f0:	e002      	b.n	26f8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    26f2:	68fb      	ldr	r3, [r7, #12]
    26f4:	68ba      	ldr	r2, [r7, #8]
    26f6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    26f8:	687b      	ldr	r3, [r7, #4]
    26fa:	785b      	ldrb	r3, [r3, #1]
    26fc:	2b01      	cmp	r3, #1
    26fe:	d003      	beq.n	2708 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2700:	687b      	ldr	r3, [r7, #4]
    2702:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2704:	2b02      	cmp	r3, #2
    2706:	d102      	bne.n	270e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    2708:	68fb      	ldr	r3, [r7, #12]
    270a:	68ba      	ldr	r2, [r7, #8]
    270c:	609a      	str	r2, [r3, #8]
		}
	}
}
    270e:	46c0      	nop			; (mov r8, r8)
    2710:	46bd      	mov	sp, r7
    2712:	b008      	add	sp, #32
    2714:	bd80      	pop	{r7, pc}
    2716:	46c0      	nop			; (mov r8, r8)
    2718:	fffbffff 	.word	0xfffbffff

0000271c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    271c:	b580      	push	{r7, lr}
    271e:	b084      	sub	sp, #16
    2720:	af00      	add	r7, sp, #0
    2722:	0002      	movs	r2, r0
    2724:	6039      	str	r1, [r7, #0]
    2726:	1dfb      	adds	r3, r7, #7
    2728:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    272a:	1dfb      	adds	r3, r7, #7
    272c:	781b      	ldrb	r3, [r3, #0]
    272e:	0018      	movs	r0, r3
    2730:	4b0a      	ldr	r3, [pc, #40]	; (275c <system_pinmux_pin_set_config+0x40>)
    2732:	4798      	blx	r3
    2734:	0003      	movs	r3, r0
    2736:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2738:	1dfb      	adds	r3, r7, #7
    273a:	781b      	ldrb	r3, [r3, #0]
    273c:	221f      	movs	r2, #31
    273e:	4013      	ands	r3, r2
    2740:	2201      	movs	r2, #1
    2742:	409a      	lsls	r2, r3
    2744:	0013      	movs	r3, r2
    2746:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    2748:	683a      	ldr	r2, [r7, #0]
    274a:	68b9      	ldr	r1, [r7, #8]
    274c:	68fb      	ldr	r3, [r7, #12]
    274e:	0018      	movs	r0, r3
    2750:	4b03      	ldr	r3, [pc, #12]	; (2760 <system_pinmux_pin_set_config+0x44>)
    2752:	4798      	blx	r3
}
    2754:	46c0      	nop			; (mov r8, r8)
    2756:	46bd      	mov	sp, r7
    2758:	b004      	add	sp, #16
    275a:	bd80      	pop	{r7, pc}
    275c:	000025ad 	.word	0x000025ad
    2760:	0000260d 	.word	0x0000260d

00002764 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    2764:	b580      	push	{r7, lr}
    2766:	af00      	add	r7, sp, #0
	return;
    2768:	46c0      	nop			; (mov r8, r8)
}
    276a:	46bd      	mov	sp, r7
    276c:	bd80      	pop	{r7, pc}
	...

00002770 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2770:	b580      	push	{r7, lr}
    2772:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2774:	4b06      	ldr	r3, [pc, #24]	; (2790 <system_init+0x20>)
    2776:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2778:	4b06      	ldr	r3, [pc, #24]	; (2794 <system_init+0x24>)
    277a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    277c:	4b06      	ldr	r3, [pc, #24]	; (2798 <system_init+0x28>)
    277e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2780:	4b06      	ldr	r3, [pc, #24]	; (279c <system_init+0x2c>)
    2782:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2784:	4b06      	ldr	r3, [pc, #24]	; (27a0 <system_init+0x30>)
    2786:	4798      	blx	r3
}
    2788:	46c0      	nop			; (mov r8, r8)
    278a:	46bd      	mov	sp, r7
    278c:	bd80      	pop	{r7, pc}
    278e:	46c0      	nop			; (mov r8, r8)
    2790:	00001f19 	.word	0x00001f19
    2794:	00000115 	.word	0x00000115
    2798:	00002765 	.word	0x00002765
    279c:	00002765 	.word	0x00002765
    27a0:	00002765 	.word	0x00002765

000027a4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    27a4:	b580      	push	{r7, lr}
    27a6:	b082      	sub	sp, #8
    27a8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    27aa:	4b2f      	ldr	r3, [pc, #188]	; (2868 <Reset_Handler+0xc4>)
    27ac:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    27ae:	4b2f      	ldr	r3, [pc, #188]	; (286c <Reset_Handler+0xc8>)
    27b0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    27b2:	687a      	ldr	r2, [r7, #4]
    27b4:	683b      	ldr	r3, [r7, #0]
    27b6:	429a      	cmp	r2, r3
    27b8:	d00c      	beq.n	27d4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    27ba:	e007      	b.n	27cc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    27bc:	683b      	ldr	r3, [r7, #0]
    27be:	1d1a      	adds	r2, r3, #4
    27c0:	603a      	str	r2, [r7, #0]
    27c2:	687a      	ldr	r2, [r7, #4]
    27c4:	1d11      	adds	r1, r2, #4
    27c6:	6079      	str	r1, [r7, #4]
    27c8:	6812      	ldr	r2, [r2, #0]
    27ca:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    27cc:	683a      	ldr	r2, [r7, #0]
    27ce:	4b28      	ldr	r3, [pc, #160]	; (2870 <Reset_Handler+0xcc>)
    27d0:	429a      	cmp	r2, r3
    27d2:	d3f3      	bcc.n	27bc <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    27d4:	4b27      	ldr	r3, [pc, #156]	; (2874 <Reset_Handler+0xd0>)
    27d6:	603b      	str	r3, [r7, #0]
    27d8:	e004      	b.n	27e4 <Reset_Handler+0x40>
                *pDest++ = 0;
    27da:	683b      	ldr	r3, [r7, #0]
    27dc:	1d1a      	adds	r2, r3, #4
    27de:	603a      	str	r2, [r7, #0]
    27e0:	2200      	movs	r2, #0
    27e2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    27e4:	683a      	ldr	r2, [r7, #0]
    27e6:	4b24      	ldr	r3, [pc, #144]	; (2878 <Reset_Handler+0xd4>)
    27e8:	429a      	cmp	r2, r3
    27ea:	d3f6      	bcc.n	27da <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    27ec:	4b23      	ldr	r3, [pc, #140]	; (287c <Reset_Handler+0xd8>)
    27ee:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    27f0:	4b23      	ldr	r3, [pc, #140]	; (2880 <Reset_Handler+0xdc>)
    27f2:	687a      	ldr	r2, [r7, #4]
    27f4:	21ff      	movs	r1, #255	; 0xff
    27f6:	438a      	bics	r2, r1
    27f8:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    27fa:	4a22      	ldr	r2, [pc, #136]	; (2884 <Reset_Handler+0xe0>)
    27fc:	2390      	movs	r3, #144	; 0x90
    27fe:	005b      	lsls	r3, r3, #1
    2800:	2102      	movs	r1, #2
    2802:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2804:	4a20      	ldr	r2, [pc, #128]	; (2888 <Reset_Handler+0xe4>)
    2806:	78d3      	ldrb	r3, [r2, #3]
    2808:	2103      	movs	r1, #3
    280a:	438b      	bics	r3, r1
    280c:	1c19      	adds	r1, r3, #0
    280e:	2302      	movs	r3, #2
    2810:	430b      	orrs	r3, r1
    2812:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2814:	4a1c      	ldr	r2, [pc, #112]	; (2888 <Reset_Handler+0xe4>)
    2816:	78d3      	ldrb	r3, [r2, #3]
    2818:	210c      	movs	r1, #12
    281a:	438b      	bics	r3, r1
    281c:	1c19      	adds	r1, r3, #0
    281e:	2308      	movs	r3, #8
    2820:	430b      	orrs	r3, r1
    2822:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    2824:	4a19      	ldr	r2, [pc, #100]	; (288c <Reset_Handler+0xe8>)
    2826:	7b93      	ldrb	r3, [r2, #14]
    2828:	2130      	movs	r1, #48	; 0x30
    282a:	438b      	bics	r3, r1
    282c:	1c19      	adds	r1, r3, #0
    282e:	2320      	movs	r3, #32
    2830:	430b      	orrs	r3, r1
    2832:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2834:	4a15      	ldr	r2, [pc, #84]	; (288c <Reset_Handler+0xe8>)
    2836:	7b93      	ldrb	r3, [r2, #14]
    2838:	210c      	movs	r1, #12
    283a:	438b      	bics	r3, r1
    283c:	1c19      	adds	r1, r3, #0
    283e:	2308      	movs	r3, #8
    2840:	430b      	orrs	r3, r1
    2842:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2844:	4a11      	ldr	r2, [pc, #68]	; (288c <Reset_Handler+0xe8>)
    2846:	7b93      	ldrb	r3, [r2, #14]
    2848:	2103      	movs	r1, #3
    284a:	438b      	bics	r3, r1
    284c:	1c19      	adds	r1, r3, #0
    284e:	2302      	movs	r3, #2
    2850:	430b      	orrs	r3, r1
    2852:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    2854:	4a0e      	ldr	r2, [pc, #56]	; (2890 <Reset_Handler+0xec>)
    2856:	6853      	ldr	r3, [r2, #4]
    2858:	2180      	movs	r1, #128	; 0x80
    285a:	430b      	orrs	r3, r1
    285c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    285e:	4b0d      	ldr	r3, [pc, #52]	; (2894 <Reset_Handler+0xf0>)
    2860:	4798      	blx	r3

        /* Branch to main function */
        main();
    2862:	4b0d      	ldr	r3, [pc, #52]	; (2898 <Reset_Handler+0xf4>)
    2864:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    2866:	e7fe      	b.n	2866 <Reset_Handler+0xc2>
    2868:	00004680 	.word	0x00004680
    286c:	20000000 	.word	0x20000000
    2870:	20000070 	.word	0x20000070
    2874:	20000070 	.word	0x20000070
    2878:	20000138 	.word	0x20000138
    287c:	00000000 	.word	0x00000000
    2880:	e000ed00 	.word	0xe000ed00
    2884:	41007000 	.word	0x41007000
    2888:	41005000 	.word	0x41005000
    288c:	41004800 	.word	0x41004800
    2890:	41004000 	.word	0x41004000
    2894:	00003289 	.word	0x00003289
    2898:	00002fa1 	.word	0x00002fa1

0000289c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    289c:	b580      	push	{r7, lr}
    289e:	af00      	add	r7, sp, #0
        while (1) {
    28a0:	e7fe      	b.n	28a0 <Dummy_Handler+0x4>
	...

000028a4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    28a4:	b580      	push	{r7, lr}
    28a6:	b086      	sub	sp, #24
    28a8:	af00      	add	r7, sp, #0
    28aa:	60f8      	str	r0, [r7, #12]
    28ac:	60b9      	str	r1, [r7, #8]
    28ae:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    28b0:	2300      	movs	r3, #0
    28b2:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    28b4:	68fb      	ldr	r3, [r7, #12]
    28b6:	2b00      	cmp	r3, #0
    28b8:	d012      	beq.n	28e0 <_read+0x3c>
		return -1;
    28ba:	2301      	movs	r3, #1
    28bc:	425b      	negs	r3, r3
    28be:	e013      	b.n	28e8 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    28c0:	4b0b      	ldr	r3, [pc, #44]	; (28f0 <_read+0x4c>)
    28c2:	681a      	ldr	r2, [r3, #0]
    28c4:	4b0b      	ldr	r3, [pc, #44]	; (28f4 <_read+0x50>)
    28c6:	681b      	ldr	r3, [r3, #0]
    28c8:	68b9      	ldr	r1, [r7, #8]
    28ca:	0018      	movs	r0, r3
    28cc:	4790      	blx	r2
		ptr++;
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3301      	adds	r3, #1
    28d2:	60bb      	str	r3, [r7, #8]
		nChars++;
    28d4:	697b      	ldr	r3, [r7, #20]
    28d6:	3301      	adds	r3, #1
    28d8:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    28da:	687b      	ldr	r3, [r7, #4]
    28dc:	3b01      	subs	r3, #1
    28de:	607b      	str	r3, [r7, #4]
    28e0:	687b      	ldr	r3, [r7, #4]
    28e2:	2b00      	cmp	r3, #0
    28e4:	dcec      	bgt.n	28c0 <_read+0x1c>
	}
	return nChars;
    28e6:	697b      	ldr	r3, [r7, #20]
}
    28e8:	0018      	movs	r0, r3
    28ea:	46bd      	mov	sp, r7
    28ec:	b006      	add	sp, #24
    28ee:	bd80      	pop	{r7, pc}
    28f0:	200000f4 	.word	0x200000f4
    28f4:	200000fc 	.word	0x200000fc

000028f8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    28f8:	b580      	push	{r7, lr}
    28fa:	b086      	sub	sp, #24
    28fc:	af00      	add	r7, sp, #0
    28fe:	60f8      	str	r0, [r7, #12]
    2900:	60b9      	str	r1, [r7, #8]
    2902:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    2904:	2300      	movs	r3, #0
    2906:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    2908:	68fb      	ldr	r3, [r7, #12]
    290a:	2b01      	cmp	r3, #1
    290c:	d01d      	beq.n	294a <_write+0x52>
    290e:	68fb      	ldr	r3, [r7, #12]
    2910:	2b02      	cmp	r3, #2
    2912:	d01a      	beq.n	294a <_write+0x52>
    2914:	68fb      	ldr	r3, [r7, #12]
    2916:	2b03      	cmp	r3, #3
    2918:	d017      	beq.n	294a <_write+0x52>
		return -1;
    291a:	2301      	movs	r3, #1
    291c:	425b      	negs	r3, r3
    291e:	e018      	b.n	2952 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2920:	4b0e      	ldr	r3, [pc, #56]	; (295c <_write+0x64>)
    2922:	681a      	ldr	r2, [r3, #0]
    2924:	4b0e      	ldr	r3, [pc, #56]	; (2960 <_write+0x68>)
    2926:	6818      	ldr	r0, [r3, #0]
    2928:	68bb      	ldr	r3, [r7, #8]
    292a:	1c59      	adds	r1, r3, #1
    292c:	60b9      	str	r1, [r7, #8]
    292e:	781b      	ldrb	r3, [r3, #0]
    2930:	0019      	movs	r1, r3
    2932:	4790      	blx	r2
    2934:	1e03      	subs	r3, r0, #0
    2936:	da02      	bge.n	293e <_write+0x46>
			return -1;
    2938:	2301      	movs	r3, #1
    293a:	425b      	negs	r3, r3
    293c:	e009      	b.n	2952 <_write+0x5a>
		}
		++nChars;
    293e:	697b      	ldr	r3, [r7, #20]
    2940:	3301      	adds	r3, #1
    2942:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    2944:	687b      	ldr	r3, [r7, #4]
    2946:	3b01      	subs	r3, #1
    2948:	607b      	str	r3, [r7, #4]
    294a:	687b      	ldr	r3, [r7, #4]
    294c:	2b00      	cmp	r3, #0
    294e:	d1e7      	bne.n	2920 <_write+0x28>
	}
	return nChars;
    2950:	697b      	ldr	r3, [r7, #20]
}
    2952:	0018      	movs	r0, r3
    2954:	46bd      	mov	sp, r7
    2956:	b006      	add	sp, #24
    2958:	bd80      	pop	{r7, pc}
    295a:	46c0      	nop			; (mov r8, r8)
    295c:	200000f8 	.word	0x200000f8
    2960:	200000fc 	.word	0x200000fc

00002964 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2964:	b580      	push	{r7, lr}
    2966:	b084      	sub	sp, #16
    2968:	af00      	add	r7, sp, #0
    296a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    296c:	4b0a      	ldr	r3, [pc, #40]	; (2998 <_sbrk+0x34>)
    296e:	681b      	ldr	r3, [r3, #0]
    2970:	2b00      	cmp	r3, #0
    2972:	d102      	bne.n	297a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    2974:	4b08      	ldr	r3, [pc, #32]	; (2998 <_sbrk+0x34>)
    2976:	4a09      	ldr	r2, [pc, #36]	; (299c <_sbrk+0x38>)
    2978:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    297a:	4b07      	ldr	r3, [pc, #28]	; (2998 <_sbrk+0x34>)
    297c:	681b      	ldr	r3, [r3, #0]
    297e:	60fb      	str	r3, [r7, #12]

	heap += incr;
    2980:	4b05      	ldr	r3, [pc, #20]	; (2998 <_sbrk+0x34>)
    2982:	681a      	ldr	r2, [r3, #0]
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	18d2      	adds	r2, r2, r3
    2988:	4b03      	ldr	r3, [pc, #12]	; (2998 <_sbrk+0x34>)
    298a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    298c:	68fb      	ldr	r3, [r7, #12]
}
    298e:	0018      	movs	r0, r3
    2990:	46bd      	mov	sp, r7
    2992:	b004      	add	sp, #16
    2994:	bd80      	pop	{r7, pc}
    2996:	46c0      	nop			; (mov r8, r8)
    2998:	200000d0 	.word	0x200000d0
    299c:	20002138 	.word	0x20002138

000029a0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    29a0:	b580      	push	{r7, lr}
    29a2:	b082      	sub	sp, #8
    29a4:	af00      	add	r7, sp, #0
    29a6:	6078      	str	r0, [r7, #4]
	return -1;
    29a8:	2301      	movs	r3, #1
    29aa:	425b      	negs	r3, r3
}
    29ac:	0018      	movs	r0, r3
    29ae:	46bd      	mov	sp, r7
    29b0:	b002      	add	sp, #8
    29b2:	bd80      	pop	{r7, pc}

000029b4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    29b4:	b580      	push	{r7, lr}
    29b6:	b082      	sub	sp, #8
    29b8:	af00      	add	r7, sp, #0
    29ba:	6078      	str	r0, [r7, #4]
    29bc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    29be:	683b      	ldr	r3, [r7, #0]
    29c0:	2280      	movs	r2, #128	; 0x80
    29c2:	0192      	lsls	r2, r2, #6
    29c4:	605a      	str	r2, [r3, #4]

	return 0;
    29c6:	2300      	movs	r3, #0
}
    29c8:	0018      	movs	r0, r3
    29ca:	46bd      	mov	sp, r7
    29cc:	b002      	add	sp, #8
    29ce:	bd80      	pop	{r7, pc}

000029d0 <_isatty>:

extern int _isatty(int file)
{
    29d0:	b580      	push	{r7, lr}
    29d2:	b082      	sub	sp, #8
    29d4:	af00      	add	r7, sp, #0
    29d6:	6078      	str	r0, [r7, #4]
	return 1;
    29d8:	2301      	movs	r3, #1
}
    29da:	0018      	movs	r0, r3
    29dc:	46bd      	mov	sp, r7
    29de:	b002      	add	sp, #8
    29e0:	bd80      	pop	{r7, pc}

000029e2 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    29e2:	b580      	push	{r7, lr}
    29e4:	b084      	sub	sp, #16
    29e6:	af00      	add	r7, sp, #0
    29e8:	60f8      	str	r0, [r7, #12]
    29ea:	60b9      	str	r1, [r7, #8]
    29ec:	607a      	str	r2, [r7, #4]
	return 0;
    29ee:	2300      	movs	r3, #0
}
    29f0:	0018      	movs	r0, r3
    29f2:	46bd      	mov	sp, r7
    29f4:	b004      	add	sp, #16
    29f6:	bd80      	pop	{r7, pc}

000029f8 <nvm_get_config_defaults>:
 * \param[out] config  Configuration structure to initialize to default values
 *
 */
static inline void nvm_get_config_defaults(
		struct nvm_config *const config)
{
    29f8:	b580      	push	{r7, lr}
    29fa:	b082      	sub	sp, #8
    29fc:	af00      	add	r7, sp, #0
    29fe:	6078      	str	r0, [r7, #4]
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    2a00:	687b      	ldr	r3, [r7, #4]
    2a02:	2200      	movs	r2, #0
    2a04:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    2a06:	687b      	ldr	r3, [r7, #4]
    2a08:	2201      	movs	r2, #1
    2a0a:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    2a0c:	4b08      	ldr	r3, [pc, #32]	; (2a30 <nvm_get_config_defaults+0x38>)
    2a0e:	685b      	ldr	r3, [r3, #4]
    2a10:	06db      	lsls	r3, r3, #27
    2a12:	0f1b      	lsrs	r3, r3, #28
    2a14:	b2db      	uxtb	r3, r3
    2a16:	001a      	movs	r2, r3
    2a18:	687b      	ldr	r3, [r7, #4]
    2a1a:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    2a1c:	687b      	ldr	r3, [r7, #4]
    2a1e:	2200      	movs	r2, #0
    2a20:	70da      	strb	r2, [r3, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    2a22:	687b      	ldr	r3, [r7, #4]
    2a24:	2200      	movs	r2, #0
    2a26:	711a      	strb	r2, [r3, #4]
}
    2a28:	46c0      	nop			; (mov r8, r8)
    2a2a:	46bd      	mov	sp, r7
    2a2c:	b002      	add	sp, #8
    2a2e:	bd80      	pop	{r7, pc}
    2a30:	41004000 	.word	0x41004000

00002a34 <system_pinmux_get_group_from_gpio_pin>:
{
    2a34:	b580      	push	{r7, lr}
    2a36:	b084      	sub	sp, #16
    2a38:	af00      	add	r7, sp, #0
    2a3a:	0002      	movs	r2, r0
    2a3c:	1dfb      	adds	r3, r7, #7
    2a3e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2a40:	230f      	movs	r3, #15
    2a42:	18fb      	adds	r3, r7, r3
    2a44:	1dfa      	adds	r2, r7, #7
    2a46:	7812      	ldrb	r2, [r2, #0]
    2a48:	09d2      	lsrs	r2, r2, #7
    2a4a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2a4c:	230e      	movs	r3, #14
    2a4e:	18fb      	adds	r3, r7, r3
    2a50:	1dfa      	adds	r2, r7, #7
    2a52:	7812      	ldrb	r2, [r2, #0]
    2a54:	0952      	lsrs	r2, r2, #5
    2a56:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2a58:	4b0d      	ldr	r3, [pc, #52]	; (2a90 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2a5a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    2a5c:	230f      	movs	r3, #15
    2a5e:	18fb      	adds	r3, r7, r3
    2a60:	781b      	ldrb	r3, [r3, #0]
    2a62:	2b00      	cmp	r3, #0
    2a64:	d10f      	bne.n	2a86 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2a66:	230f      	movs	r3, #15
    2a68:	18fb      	adds	r3, r7, r3
    2a6a:	781b      	ldrb	r3, [r3, #0]
    2a6c:	009b      	lsls	r3, r3, #2
    2a6e:	2210      	movs	r2, #16
    2a70:	4694      	mov	ip, r2
    2a72:	44bc      	add	ip, r7
    2a74:	4463      	add	r3, ip
    2a76:	3b08      	subs	r3, #8
    2a78:	681a      	ldr	r2, [r3, #0]
    2a7a:	230e      	movs	r3, #14
    2a7c:	18fb      	adds	r3, r7, r3
    2a7e:	781b      	ldrb	r3, [r3, #0]
    2a80:	01db      	lsls	r3, r3, #7
    2a82:	18d3      	adds	r3, r2, r3
    2a84:	e000      	b.n	2a88 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    2a86:	2300      	movs	r3, #0
}
    2a88:	0018      	movs	r0, r3
    2a8a:	46bd      	mov	sp, r7
    2a8c:	b004      	add	sp, #16
    2a8e:	bd80      	pop	{r7, pc}
    2a90:	41004400 	.word	0x41004400

00002a94 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2a94:	b580      	push	{r7, lr}
    2a96:	b082      	sub	sp, #8
    2a98:	af00      	add	r7, sp, #0
    2a9a:	0002      	movs	r2, r0
    2a9c:	1dfb      	adds	r3, r7, #7
    2a9e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2aa0:	1dfb      	adds	r3, r7, #7
    2aa2:	781b      	ldrb	r3, [r3, #0]
    2aa4:	0018      	movs	r0, r3
    2aa6:	4b03      	ldr	r3, [pc, #12]	; (2ab4 <port_get_group_from_gpio_pin+0x20>)
    2aa8:	4798      	blx	r3
    2aaa:	0003      	movs	r3, r0
}
    2aac:	0018      	movs	r0, r3
    2aae:	46bd      	mov	sp, r7
    2ab0:	b002      	add	sp, #8
    2ab2:	bd80      	pop	{r7, pc}
    2ab4:	00002a35 	.word	0x00002a35

00002ab8 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    2ab8:	b580      	push	{r7, lr}
    2aba:	b082      	sub	sp, #8
    2abc:	af00      	add	r7, sp, #0
    2abe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    2ac0:	687b      	ldr	r3, [r7, #4]
    2ac2:	2200      	movs	r2, #0
    2ac4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2ac6:	687b      	ldr	r3, [r7, #4]
    2ac8:	2201      	movs	r2, #1
    2aca:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    2acc:	687b      	ldr	r3, [r7, #4]
    2ace:	2200      	movs	r2, #0
    2ad0:	709a      	strb	r2, [r3, #2]
}
    2ad2:	46c0      	nop			; (mov r8, r8)
    2ad4:	46bd      	mov	sp, r7
    2ad6:	b002      	add	sp, #8
    2ad8:	bd80      	pop	{r7, pc}
	...

00002adc <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    2adc:	b580      	push	{r7, lr}
    2ade:	b084      	sub	sp, #16
    2ae0:	af00      	add	r7, sp, #0
    2ae2:	0002      	movs	r2, r0
    2ae4:	1dfb      	adds	r3, r7, #7
    2ae6:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2ae8:	1dfb      	adds	r3, r7, #7
    2aea:	781b      	ldrb	r3, [r3, #0]
    2aec:	0018      	movs	r0, r3
    2aee:	4b0b      	ldr	r3, [pc, #44]	; (2b1c <port_pin_get_input_level+0x40>)
    2af0:	4798      	blx	r3
    2af2:	0003      	movs	r3, r0
    2af4:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2af6:	1dfb      	adds	r3, r7, #7
    2af8:	781b      	ldrb	r3, [r3, #0]
    2afa:	221f      	movs	r2, #31
    2afc:	4013      	ands	r3, r2
    2afe:	2201      	movs	r2, #1
    2b00:	409a      	lsls	r2, r3
    2b02:	0013      	movs	r3, r2
    2b04:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    2b06:	68fb      	ldr	r3, [r7, #12]
    2b08:	6a1b      	ldr	r3, [r3, #32]
    2b0a:	68ba      	ldr	r2, [r7, #8]
    2b0c:	4013      	ands	r3, r2
    2b0e:	1e5a      	subs	r2, r3, #1
    2b10:	4193      	sbcs	r3, r2
    2b12:	b2db      	uxtb	r3, r3
}
    2b14:	0018      	movs	r0, r3
    2b16:	46bd      	mov	sp, r7
    2b18:	b004      	add	sp, #16
    2b1a:	bd80      	pop	{r7, pc}
    2b1c:	00002a95 	.word	0x00002a95

00002b20 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    2b20:	b580      	push	{r7, lr}
    2b22:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    2b24:	4b04      	ldr	r3, [pc, #16]	; (2b38 <system_interrupt_enable_global+0x18>)
    2b26:	2201      	movs	r2, #1
    2b28:	701a      	strb	r2, [r3, #0]
    2b2a:	f3bf 8f5f 	dmb	sy
    2b2e:	b662      	cpsie	i
}
    2b30:	46c0      	nop			; (mov r8, r8)
    2b32:	46bd      	mov	sp, r7
    2b34:	bd80      	pop	{r7, pc}
    2b36:	46c0      	nop			; (mov r8, r8)
    2b38:	20000008 	.word	0x20000008

00002b3c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    2b3c:	b580      	push	{r7, lr}
    2b3e:	b082      	sub	sp, #8
    2b40:	af00      	add	r7, sp, #0
    2b42:	0002      	movs	r2, r0
    2b44:	1dfb      	adds	r3, r7, #7
    2b46:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2b48:	4b06      	ldr	r3, [pc, #24]	; (2b64 <system_interrupt_enable+0x28>)
    2b4a:	1dfa      	adds	r2, r7, #7
    2b4c:	7812      	ldrb	r2, [r2, #0]
    2b4e:	0011      	movs	r1, r2
    2b50:	221f      	movs	r2, #31
    2b52:	400a      	ands	r2, r1
    2b54:	2101      	movs	r1, #1
    2b56:	4091      	lsls	r1, r2
    2b58:	000a      	movs	r2, r1
    2b5a:	601a      	str	r2, [r3, #0]
}
    2b5c:	46c0      	nop			; (mov r8, r8)
    2b5e:	46bd      	mov	sp, r7
    2b60:	b002      	add	sp, #8
    2b62:	bd80      	pop	{r7, pc}
    2b64:	e000e100 	.word	0xe000e100

00002b68 <usart_is_syncing>:
{
    2b68:	b580      	push	{r7, lr}
    2b6a:	b084      	sub	sp, #16
    2b6c:	af00      	add	r7, sp, #0
    2b6e:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2b70:	687b      	ldr	r3, [r7, #4]
    2b72:	681b      	ldr	r3, [r3, #0]
    2b74:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    2b76:	68fb      	ldr	r3, [r7, #12]
    2b78:	69db      	ldr	r3, [r3, #28]
    2b7a:	1e5a      	subs	r2, r3, #1
    2b7c:	4193      	sbcs	r3, r2
    2b7e:	b2db      	uxtb	r3, r3
}
    2b80:	0018      	movs	r0, r3
    2b82:	46bd      	mov	sp, r7
    2b84:	b004      	add	sp, #16
    2b86:	bd80      	pop	{r7, pc}

00002b88 <_usart_wait_for_sync>:
{
    2b88:	b580      	push	{r7, lr}
    2b8a:	b082      	sub	sp, #8
    2b8c:	af00      	add	r7, sp, #0
    2b8e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    2b90:	46c0      	nop			; (mov r8, r8)
    2b92:	687b      	ldr	r3, [r7, #4]
    2b94:	0018      	movs	r0, r3
    2b96:	4b04      	ldr	r3, [pc, #16]	; (2ba8 <_usart_wait_for_sync+0x20>)
    2b98:	4798      	blx	r3
    2b9a:	1e03      	subs	r3, r0, #0
    2b9c:	d1f9      	bne.n	2b92 <_usart_wait_for_sync+0xa>
}
    2b9e:	46c0      	nop			; (mov r8, r8)
    2ba0:	46bd      	mov	sp, r7
    2ba2:	b002      	add	sp, #8
    2ba4:	bd80      	pop	{r7, pc}
    2ba6:	46c0      	nop			; (mov r8, r8)
    2ba8:	00002b69 	.word	0x00002b69

00002bac <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    2bac:	b580      	push	{r7, lr}
    2bae:	b082      	sub	sp, #8
    2bb0:	af00      	add	r7, sp, #0
    2bb2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2bb4:	687b      	ldr	r3, [r7, #4]
    2bb6:	2280      	movs	r2, #128	; 0x80
    2bb8:	05d2      	lsls	r2, r2, #23
    2bba:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2bbc:	687b      	ldr	r3, [r7, #4]
    2bbe:	2200      	movs	r2, #0
    2bc0:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    2bc2:	687b      	ldr	r3, [r7, #4]
    2bc4:	22ff      	movs	r2, #255	; 0xff
    2bc6:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    2bc8:	687b      	ldr	r3, [r7, #4]
    2bca:	2200      	movs	r2, #0
    2bcc:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2bce:	687b      	ldr	r3, [r7, #4]
    2bd0:	2200      	movs	r2, #0
    2bd2:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    2bd4:	687b      	ldr	r3, [r7, #4]
    2bd6:	2296      	movs	r2, #150	; 0x96
    2bd8:	0192      	lsls	r2, r2, #6
    2bda:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    2bdc:	687b      	ldr	r3, [r7, #4]
    2bde:	2224      	movs	r2, #36	; 0x24
    2be0:	2101      	movs	r1, #1
    2be2:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    2be4:	687b      	ldr	r3, [r7, #4]
    2be6:	2225      	movs	r2, #37	; 0x25
    2be8:	2101      	movs	r1, #1
    2bea:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    2bec:	687b      	ldr	r3, [r7, #4]
    2bee:	2226      	movs	r2, #38	; 0x26
    2bf0:	2100      	movs	r1, #0
    2bf2:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    2bf4:	687b      	ldr	r3, [r7, #4]
    2bf6:	2227      	movs	r2, #39	; 0x27
    2bf8:	2100      	movs	r1, #0
    2bfa:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    2bfc:	687b      	ldr	r3, [r7, #4]
    2bfe:	2200      	movs	r2, #0
    2c00:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    2c02:	687b      	ldr	r3, [r7, #4]
    2c04:	2288      	movs	r2, #136	; 0x88
    2c06:	0352      	lsls	r2, r2, #13
    2c08:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    2c0a:	687b      	ldr	r3, [r7, #4]
    2c0c:	222c      	movs	r2, #44	; 0x2c
    2c0e:	2100      	movs	r1, #0
    2c10:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    2c12:	687b      	ldr	r3, [r7, #4]
    2c14:	222d      	movs	r2, #45	; 0x2d
    2c16:	2100      	movs	r1, #0
    2c18:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    2c1a:	687b      	ldr	r3, [r7, #4]
    2c1c:	2200      	movs	r2, #0
    2c1e:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    2c20:	687b      	ldr	r3, [r7, #4]
    2c22:	2200      	movs	r2, #0
    2c24:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    2c26:	687b      	ldr	r3, [r7, #4]
    2c28:	2200      	movs	r2, #0
    2c2a:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    2c2c:	687b      	ldr	r3, [r7, #4]
    2c2e:	2200      	movs	r2, #0
    2c30:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2c32:	687b      	ldr	r3, [r7, #4]
    2c34:	2200      	movs	r2, #0
    2c36:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2c38:	687b      	ldr	r3, [r7, #4]
    2c3a:	2200      	movs	r2, #0
    2c3c:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2c3e:	687b      	ldr	r3, [r7, #4]
    2c40:	2200      	movs	r2, #0
    2c42:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2c44:	687b      	ldr	r3, [r7, #4]
    2c46:	2200      	movs	r2, #0
    2c48:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2c4a:	687b      	ldr	r3, [r7, #4]
    2c4c:	2200      	movs	r2, #0
    2c4e:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2c50:	687b      	ldr	r3, [r7, #4]
    2c52:	2200      	movs	r2, #0
    2c54:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    2c56:	687b      	ldr	r3, [r7, #4]
    2c58:	2213      	movs	r2, #19
    2c5a:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2c5c:	687b      	ldr	r3, [r7, #4]
    2c5e:	2200      	movs	r2, #0
    2c60:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    2c62:	46c0      	nop			; (mov r8, r8)
    2c64:	46bd      	mov	sp, r7
    2c66:	b002      	add	sp, #8
    2c68:	bd80      	pop	{r7, pc}
	...

00002c6c <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    2c6c:	b580      	push	{r7, lr}
    2c6e:	b084      	sub	sp, #16
    2c70:	af00      	add	r7, sp, #0
    2c72:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2c74:	687b      	ldr	r3, [r7, #4]
    2c76:	681b      	ldr	r3, [r3, #0]
    2c78:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2c7a:	687b      	ldr	r3, [r7, #4]
    2c7c:	681b      	ldr	r3, [r3, #0]
    2c7e:	0018      	movs	r0, r3
    2c80:	4b09      	ldr	r3, [pc, #36]	; (2ca8 <usart_enable+0x3c>)
    2c82:	4798      	blx	r3
    2c84:	0003      	movs	r3, r0
    2c86:	0018      	movs	r0, r3
    2c88:	4b08      	ldr	r3, [pc, #32]	; (2cac <usart_enable+0x40>)
    2c8a:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2c8c:	687b      	ldr	r3, [r7, #4]
    2c8e:	0018      	movs	r0, r3
    2c90:	4b07      	ldr	r3, [pc, #28]	; (2cb0 <usart_enable+0x44>)
    2c92:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2c94:	68fb      	ldr	r3, [r7, #12]
    2c96:	681b      	ldr	r3, [r3, #0]
    2c98:	2202      	movs	r2, #2
    2c9a:	431a      	orrs	r2, r3
    2c9c:	68fb      	ldr	r3, [r7, #12]
    2c9e:	601a      	str	r2, [r3, #0]
}
    2ca0:	46c0      	nop			; (mov r8, r8)
    2ca2:	46bd      	mov	sp, r7
    2ca4:	b004      	add	sp, #16
    2ca6:	bd80      	pop	{r7, pc}
    2ca8:	00000da9 	.word	0x00000da9
    2cac:	00002b3d 	.word	0x00002b3d
    2cb0:	00002b89 	.word	0x00002b89

00002cb4 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    2cb4:	b580      	push	{r7, lr}
    2cb6:	b084      	sub	sp, #16
    2cb8:	af00      	add	r7, sp, #0
    2cba:	60f8      	str	r0, [r7, #12]
    2cbc:	60b9      	str	r1, [r7, #8]
    2cbe:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    2cc0:	687a      	ldr	r2, [r7, #4]
    2cc2:	68b9      	ldr	r1, [r7, #8]
    2cc4:	68fb      	ldr	r3, [r7, #12]
    2cc6:	0018      	movs	r0, r3
    2cc8:	4b05      	ldr	r3, [pc, #20]	; (2ce0 <usart_serial_init+0x2c>)
    2cca:	4798      	blx	r3
    2ccc:	1e03      	subs	r3, r0, #0
    2cce:	d101      	bne.n	2cd4 <usart_serial_init+0x20>
		return true;
    2cd0:	2301      	movs	r3, #1
    2cd2:	e000      	b.n	2cd6 <usart_serial_init+0x22>
	}
	else {
		return false;
    2cd4:	2300      	movs	r3, #0
	}
}
    2cd6:	0018      	movs	r0, r3
    2cd8:	46bd      	mov	sp, r7
    2cda:	b004      	add	sp, #16
    2cdc:	bd80      	pop	{r7, pc}
    2cde:	46c0      	nop			; (mov r8, r8)
    2ce0:	00001261 	.word	0x00001261

00002ce4 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    2ce4:	b580      	push	{r7, lr}
    2ce6:	b082      	sub	sp, #8
    2ce8:	af00      	add	r7, sp, #0
    2cea:	6078      	str	r0, [r7, #4]
    2cec:	000a      	movs	r2, r1
    2cee:	1cfb      	adds	r3, r7, #3
    2cf0:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    2cf2:	46c0      	nop			; (mov r8, r8)
    2cf4:	1cfb      	adds	r3, r7, #3
    2cf6:	781b      	ldrb	r3, [r3, #0]
    2cf8:	b29a      	uxth	r2, r3
    2cfa:	687b      	ldr	r3, [r7, #4]
    2cfc:	0011      	movs	r1, r2
    2cfe:	0018      	movs	r0, r3
    2d00:	4b04      	ldr	r3, [pc, #16]	; (2d14 <usart_serial_putchar+0x30>)
    2d02:	4798      	blx	r3
    2d04:	1e03      	subs	r3, r0, #0
    2d06:	d1f5      	bne.n	2cf4 <usart_serial_putchar+0x10>

	return STATUS_OK;
    2d08:	2300      	movs	r3, #0
}
    2d0a:	0018      	movs	r0, r3
    2d0c:	46bd      	mov	sp, r7
    2d0e:	b002      	add	sp, #8
    2d10:	bd80      	pop	{r7, pc}
    2d12:	46c0      	nop			; (mov r8, r8)
    2d14:	000014d5 	.word	0x000014d5

00002d18 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2d18:	b580      	push	{r7, lr}
    2d1a:	b084      	sub	sp, #16
    2d1c:	af00      	add	r7, sp, #0
    2d1e:	6078      	str	r0, [r7, #4]
    2d20:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    2d22:	230e      	movs	r3, #14
    2d24:	18fb      	adds	r3, r7, r3
    2d26:	2200      	movs	r2, #0
    2d28:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2d2a:	46c0      	nop			; (mov r8, r8)
    2d2c:	230e      	movs	r3, #14
    2d2e:	18fa      	adds	r2, r7, r3
    2d30:	687b      	ldr	r3, [r7, #4]
    2d32:	0011      	movs	r1, r2
    2d34:	0018      	movs	r0, r3
    2d36:	4b07      	ldr	r3, [pc, #28]	; (2d54 <usart_serial_getchar+0x3c>)
    2d38:	4798      	blx	r3
    2d3a:	1e03      	subs	r3, r0, #0
    2d3c:	d1f6      	bne.n	2d2c <usart_serial_getchar+0x14>

	*c = temp;
    2d3e:	230e      	movs	r3, #14
    2d40:	18fb      	adds	r3, r7, r3
    2d42:	881b      	ldrh	r3, [r3, #0]
    2d44:	b2da      	uxtb	r2, r3
    2d46:	683b      	ldr	r3, [r7, #0]
    2d48:	701a      	strb	r2, [r3, #0]
}
    2d4a:	46c0      	nop			; (mov r8, r8)
    2d4c:	46bd      	mov	sp, r7
    2d4e:	b004      	add	sp, #16
    2d50:	bd80      	pop	{r7, pc}
    2d52:	46c0      	nop			; (mov r8, r8)
    2d54:	00001539 	.word	0x00001539

00002d58 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    2d58:	b580      	push	{r7, lr}
    2d5a:	b084      	sub	sp, #16
    2d5c:	af00      	add	r7, sp, #0
    2d5e:	60f8      	str	r0, [r7, #12]
    2d60:	60b9      	str	r1, [r7, #8]
    2d62:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    2d64:	4b10      	ldr	r3, [pc, #64]	; (2da8 <stdio_serial_init+0x50>)
    2d66:	68fa      	ldr	r2, [r7, #12]
    2d68:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2d6a:	4b10      	ldr	r3, [pc, #64]	; (2dac <stdio_serial_init+0x54>)
    2d6c:	4a10      	ldr	r2, [pc, #64]	; (2db0 <stdio_serial_init+0x58>)
    2d6e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2d70:	4b10      	ldr	r3, [pc, #64]	; (2db4 <stdio_serial_init+0x5c>)
    2d72:	4a11      	ldr	r2, [pc, #68]	; (2db8 <stdio_serial_init+0x60>)
    2d74:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    2d76:	687a      	ldr	r2, [r7, #4]
    2d78:	68b9      	ldr	r1, [r7, #8]
    2d7a:	68fb      	ldr	r3, [r7, #12]
    2d7c:	0018      	movs	r0, r3
    2d7e:	4b0f      	ldr	r3, [pc, #60]	; (2dbc <stdio_serial_init+0x64>)
    2d80:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2d82:	4b0f      	ldr	r3, [pc, #60]	; (2dc0 <stdio_serial_init+0x68>)
    2d84:	681b      	ldr	r3, [r3, #0]
    2d86:	689b      	ldr	r3, [r3, #8]
    2d88:	2100      	movs	r1, #0
    2d8a:	0018      	movs	r0, r3
    2d8c:	4b0d      	ldr	r3, [pc, #52]	; (2dc4 <stdio_serial_init+0x6c>)
    2d8e:	4798      	blx	r3
	setbuf(stdin, NULL);
    2d90:	4b0b      	ldr	r3, [pc, #44]	; (2dc0 <stdio_serial_init+0x68>)
    2d92:	681b      	ldr	r3, [r3, #0]
    2d94:	685b      	ldr	r3, [r3, #4]
    2d96:	2100      	movs	r1, #0
    2d98:	0018      	movs	r0, r3
    2d9a:	4b0a      	ldr	r3, [pc, #40]	; (2dc4 <stdio_serial_init+0x6c>)
    2d9c:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    2d9e:	46c0      	nop			; (mov r8, r8)
    2da0:	46bd      	mov	sp, r7
    2da2:	b004      	add	sp, #16
    2da4:	bd80      	pop	{r7, pc}
    2da6:	46c0      	nop			; (mov r8, r8)
    2da8:	200000fc 	.word	0x200000fc
    2dac:	200000f8 	.word	0x200000f8
    2db0:	00002ce5 	.word	0x00002ce5
    2db4:	200000f4 	.word	0x200000f4
    2db8:	00002d19 	.word	0x00002d19
    2dbc:	00002cb5 	.word	0x00002cb5
    2dc0:	2000000c 	.word	0x2000000c
    2dc4:	000033fd 	.word	0x000033fd

00002dc8 <configure_console>:
#define EDBG_CDC_SERCOM_PINMUX_PAD3  PINMUX_PB11D_SERCOM4_PAD3
#define APP_START_ADDRESS			0x8000
#define FW_STAT						0x7F00
#define BOOT_PIN					PIN_PB23 //pin tied to button for stay in boot mode
static void configure_console(void)
{
    2dc8:	b580      	push	{r7, lr}
    2dca:	b090      	sub	sp, #64	; 0x40
    2dcc:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    2dce:	003b      	movs	r3, r7
    2dd0:	0018      	movs	r0, r3
    2dd2:	4b13      	ldr	r3, [pc, #76]	; (2e20 <configure_console+0x58>)
    2dd4:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    2dd6:	003b      	movs	r3, r7
    2dd8:	22c4      	movs	r2, #196	; 0xc4
    2dda:	0392      	lsls	r2, r2, #14
    2ddc:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    2dde:	003b      	movs	r3, r7
    2de0:	2201      	movs	r2, #1
    2de2:	4252      	negs	r2, r2
    2de4:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    2de6:	003b      	movs	r3, r7
    2de8:	2201      	movs	r2, #1
    2dea:	4252      	negs	r2, r2
    2dec:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    2dee:	003b      	movs	r3, r7
    2df0:	4a0c      	ldr	r2, [pc, #48]	; (2e24 <configure_console+0x5c>)
    2df2:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    2df4:	003b      	movs	r3, r7
    2df6:	4a0c      	ldr	r2, [pc, #48]	; (2e28 <configure_console+0x60>)
    2df8:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    2dfa:	003b      	movs	r3, r7
    2dfc:	22e1      	movs	r2, #225	; 0xe1
    2dfe:	0252      	lsls	r2, r2, #9
    2e00:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &usart_conf);
    2e02:	003a      	movs	r2, r7
    2e04:	4909      	ldr	r1, [pc, #36]	; (2e2c <configure_console+0x64>)
    2e06:	4b0a      	ldr	r3, [pc, #40]	; (2e30 <configure_console+0x68>)
    2e08:	0018      	movs	r0, r3
    2e0a:	4b0a      	ldr	r3, [pc, #40]	; (2e34 <configure_console+0x6c>)
    2e0c:	4798      	blx	r3
	usart_enable(&usart_instance);
    2e0e:	4b08      	ldr	r3, [pc, #32]	; (2e30 <configure_console+0x68>)
    2e10:	0018      	movs	r0, r3
    2e12:	4b09      	ldr	r3, [pc, #36]	; (2e38 <configure_console+0x70>)
    2e14:	4798      	blx	r3
}
    2e16:	46c0      	nop			; (mov r8, r8)
    2e18:	46bd      	mov	sp, r7
    2e1a:	b010      	add	sp, #64	; 0x40
    2e1c:	bd80      	pop	{r7, pc}
    2e1e:	46c0      	nop			; (mov r8, r8)
    2e20:	00002bad 	.word	0x00002bad
    2e24:	002a0003 	.word	0x002a0003
    2e28:	002b0003 	.word	0x002b0003
    2e2c:	42001800 	.word	0x42001800
    2e30:	20000100 	.word	0x20000100
    2e34:	00002d59 	.word	0x00002d59
    2e38:	00002c6d 	.word	0x00002c6d

00002e3c <getFWStat>:


static Firmware_Status_t getFWStat() {
    2e3c:	b580      	push	{r7, lr}
    2e3e:	b086      	sub	sp, #24
    2e40:	af00      	add	r7, sp, #0
    2e42:	6078      	str	r0, [r7, #4]
	Firmware_Status_t *fm_nvm = (unsigned int*)FW_STAT;			// Pointer to FW_STAT
    2e44:	23fe      	movs	r3, #254	; 0xfe
    2e46:	01db      	lsls	r3, r3, #7
    2e48:	617b      	str	r3, [r7, #20]
	Firmware_Status_t thisFW = *fm_nvm;				// Read contents of FW_STAT
    2e4a:	230c      	movs	r3, #12
    2e4c:	18fa      	adds	r2, r7, r3
    2e4e:	697b      	ldr	r3, [r7, #20]
    2e50:	0010      	movs	r0, r2
    2e52:	0019      	movs	r1, r3
    2e54:	2307      	movs	r3, #7
    2e56:	001a      	movs	r2, r3
    2e58:	4b07      	ldr	r3, [pc, #28]	; (2e78 <getFWStat+0x3c>)
    2e5a:	4798      	blx	r3
	return thisFW;
    2e5c:	687a      	ldr	r2, [r7, #4]
    2e5e:	230c      	movs	r3, #12
    2e60:	18fb      	adds	r3, r7, r3
    2e62:	0010      	movs	r0, r2
    2e64:	0019      	movs	r1, r3
    2e66:	2307      	movs	r3, #7
    2e68:	001a      	movs	r2, r3
    2e6a:	4b03      	ldr	r3, [pc, #12]	; (2e78 <getFWStat+0x3c>)
    2e6c:	4798      	blx	r3
}
    2e6e:	6878      	ldr	r0, [r7, #4]
    2e70:	46bd      	mov	sp, r7
    2e72:	b006      	add	sp, #24
    2e74:	bd80      	pop	{r7, pc}
    2e76:	46c0      	nop			; (mov r8, r8)
    2e78:	000032d1 	.word	0x000032d1

00002e7c <writeFWStat>:

static void writeFWStat(Firmware_Status_t thisFW) {
    2e7c:	b590      	push	{r4, r7, lr}
    2e7e:	b095      	sub	sp, #84	; 0x54
    2e80:	af00      	add	r7, sp, #0
    2e82:	003b      	movs	r3, r7
    2e84:	6018      	str	r0, [r3, #0]
    2e86:	6059      	str	r1, [r3, #4]
	uint8_t page_buffer[NVMCTRL_PAGE_SIZE];
	page_buffer[0] = thisFW.signature[0];
    2e88:	003b      	movs	r3, r7
    2e8a:	781a      	ldrb	r2, [r3, #0]
    2e8c:	230c      	movs	r3, #12
    2e8e:	18fb      	adds	r3, r7, r3
    2e90:	701a      	strb	r2, [r3, #0]
	page_buffer[1] = thisFW.signature[1];
    2e92:	003b      	movs	r3, r7
    2e94:	785a      	ldrb	r2, [r3, #1]
    2e96:	230c      	movs	r3, #12
    2e98:	18fb      	adds	r3, r7, r3
    2e9a:	705a      	strb	r2, [r3, #1]
	page_buffer[2] = thisFW.signature[2];
    2e9c:	003b      	movs	r3, r7
    2e9e:	789a      	ldrb	r2, [r3, #2]
    2ea0:	230c      	movs	r3, #12
    2ea2:	18fb      	adds	r3, r7, r3
    2ea4:	709a      	strb	r2, [r3, #2]
	page_buffer[3] = thisFW.signature[3];
    2ea6:	003b      	movs	r3, r7
    2ea8:	78da      	ldrb	r2, [r3, #3]
    2eaa:	230c      	movs	r3, #12
    2eac:	18fb      	adds	r3, r7, r3
    2eae:	70da      	strb	r2, [r3, #3]
	page_buffer[4] = thisFW.executing_image;
    2eb0:	003b      	movs	r3, r7
    2eb2:	791a      	ldrb	r2, [r3, #4]
    2eb4:	230c      	movs	r3, #12
    2eb6:	18fb      	adds	r3, r7, r3
    2eb8:	711a      	strb	r2, [r3, #4]
	page_buffer[5] = thisFW.downloaded_image;
    2eba:	003b      	movs	r3, r7
    2ebc:	795a      	ldrb	r2, [r3, #5]
    2ebe:	230c      	movs	r3, #12
    2ec0:	18fb      	adds	r3, r7, r3
    2ec2:	715a      	strb	r2, [r3, #5]
	page_buffer[6] = thisFW.writenew_image;
    2ec4:	003b      	movs	r3, r7
    2ec6:	799a      	ldrb	r2, [r3, #6]
    2ec8:	230c      	movs	r3, #12
    2eca:	18fb      	adds	r3, r7, r3
    2ecc:	719a      	strb	r2, [r3, #6]
	
	enum status_code error_code;
	do
	{
		error_code = nvm_erase_row(FW_STAT);			// Erase FW stat row
    2ece:	234f      	movs	r3, #79	; 0x4f
    2ed0:	18fc      	adds	r4, r7, r3
    2ed2:	23fe      	movs	r3, #254	; 0xfe
    2ed4:	01db      	lsls	r3, r3, #7
    2ed6:	0018      	movs	r0, r3
    2ed8:	4b0e      	ldr	r3, [pc, #56]	; (2f14 <writeFWStat+0x98>)
    2eda:	4798      	blx	r3
    2edc:	0003      	movs	r3, r0
    2ede:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    2ee0:	234f      	movs	r3, #79	; 0x4f
    2ee2:	18fb      	adds	r3, r7, r3
    2ee4:	781b      	ldrb	r3, [r3, #0]
    2ee6:	2b05      	cmp	r3, #5
    2ee8:	d0f1      	beq.n	2ece <writeFWStat+0x52>
	
	do 
	{ 
		error_code = nvm_write_buffer(FW_STAT, page_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
    2eea:	234f      	movs	r3, #79	; 0x4f
    2eec:	18fc      	adds	r4, r7, r3
    2eee:	230c      	movs	r3, #12
    2ef0:	18f9      	adds	r1, r7, r3
    2ef2:	23fe      	movs	r3, #254	; 0xfe
    2ef4:	01db      	lsls	r3, r3, #7
    2ef6:	2240      	movs	r2, #64	; 0x40
    2ef8:	0018      	movs	r0, r3
    2efa:	4b07      	ldr	r3, [pc, #28]	; (2f18 <writeFWStat+0x9c>)
    2efc:	4798      	blx	r3
    2efe:	0003      	movs	r3, r0
    2f00:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    2f02:	234f      	movs	r3, #79	; 0x4f
    2f04:	18fb      	adds	r3, r7, r3
    2f06:	781b      	ldrb	r3, [r3, #0]
    2f08:	2b05      	cmp	r3, #5
    2f0a:	d0ee      	beq.n	2eea <writeFWStat+0x6e>
}
    2f0c:	46c0      	nop			; (mov r8, r8)
    2f0e:	46bd      	mov	sp, r7
    2f10:	b015      	add	sp, #84	; 0x54
    2f12:	bd90      	pop	{r4, r7, pc}
    2f14:	00000639 	.word	0x00000639
    2f18:	000004e5 	.word	0x000004e5

00002f1c <upgradeFW>:

static void upgradeFW(Firmware_Status_t thisFW){
    2f1c:	b580      	push	{r7, lr}
    2f1e:	b082      	sub	sp, #8
    2f20:	af00      	add	r7, sp, #0
    2f22:	003b      	movs	r3, r7
    2f24:	6018      	str	r0, [r3, #0]
    2f26:	6059      	str	r1, [r3, #4]
	printf("Upgrading firmware from location %d.\n", thisFW.downloaded_image);
    2f28:	003b      	movs	r3, r7
    2f2a:	795b      	ldrb	r3, [r3, #5]
    2f2c:	001a      	movs	r2, r3
    2f2e:	4b0c      	ldr	r3, [pc, #48]	; (2f60 <upgradeFW+0x44>)
    2f30:	0011      	movs	r1, r2
    2f32:	0018      	movs	r0, r3
    2f34:	4b0b      	ldr	r3, [pc, #44]	; (2f64 <upgradeFW+0x48>)
    2f36:	4798      	blx	r3
	// write new firmware
	
	//...................
	thisFW.executing_image = thisFW.downloaded_image;
    2f38:	003b      	movs	r3, r7
    2f3a:	795a      	ldrb	r2, [r3, #5]
    2f3c:	003b      	movs	r3, r7
    2f3e:	711a      	strb	r2, [r3, #4]
	thisFW.writenew_image = 0;
    2f40:	003b      	movs	r3, r7
    2f42:	2200      	movs	r2, #0
    2f44:	719a      	strb	r2, [r3, #6]
	writeFWStat(thisFW);
    2f46:	003b      	movs	r3, r7
    2f48:	6818      	ldr	r0, [r3, #0]
    2f4a:	6859      	ldr	r1, [r3, #4]
    2f4c:	4b06      	ldr	r3, [pc, #24]	; (2f68 <upgradeFW+0x4c>)
    2f4e:	4798      	blx	r3
	printf("Upgrade complete\n");
    2f50:	4b06      	ldr	r3, [pc, #24]	; (2f6c <upgradeFW+0x50>)
    2f52:	0018      	movs	r0, r3
    2f54:	4b06      	ldr	r3, [pc, #24]	; (2f70 <upgradeFW+0x54>)
    2f56:	4798      	blx	r3
}
    2f58:	46c0      	nop			; (mov r8, r8)
    2f5a:	46bd      	mov	sp, r7
    2f5c:	b002      	add	sp, #8
    2f5e:	bd80      	pop	{r7, pc}
    2f60:	00004544 	.word	0x00004544
    2f64:	000032f5 	.word	0x000032f5
    2f68:	00002e7d 	.word	0x00002e7d
    2f6c:	0000456c 	.word	0x0000456c
    2f70:	000033e9 	.word	0x000033e9

00002f74 <configure_nvm>:

static void configure_nvm() {
    2f74:	b580      	push	{r7, lr}
    2f76:	b082      	sub	sp, #8
    2f78:	af00      	add	r7, sp, #0
	struct nvm_config config;
	nvm_get_config_defaults(&config);
    2f7a:	003b      	movs	r3, r7
    2f7c:	0018      	movs	r0, r3
    2f7e:	4b06      	ldr	r3, [pc, #24]	; (2f98 <configure_nvm+0x24>)
    2f80:	4798      	blx	r3
	config.manual_page_write = false;
    2f82:	003b      	movs	r3, r7
    2f84:	2200      	movs	r2, #0
    2f86:	705a      	strb	r2, [r3, #1]
	nvm_set_config(&config);
    2f88:	003b      	movs	r3, r7
    2f8a:	0018      	movs	r0, r3
    2f8c:	4b03      	ldr	r3, [pc, #12]	; (2f9c <configure_nvm+0x28>)
    2f8e:	4798      	blx	r3
}
    2f90:	46c0      	nop			; (mov r8, r8)
    2f92:	46bd      	mov	sp, r7
    2f94:	b002      	add	sp, #8
    2f96:	bd80      	pop	{r7, pc}
    2f98:	000029f9 	.word	0x000029f9
    2f9c:	000002f5 	.word	0x000002f5

00002fa0 <main>:

int main (void)
{
    2fa0:	b580      	push	{r7, lr}
    2fa2:	b086      	sub	sp, #24
    2fa4:	af00      	add	r7, sp, #0
	
	system_init();
    2fa6:	4b48      	ldr	r3, [pc, #288]	; (30c8 <main+0x128>)
    2fa8:	4798      	blx	r3
	system_interrupt_enable_global();
    2faa:	4b48      	ldr	r3, [pc, #288]	; (30cc <main+0x12c>)
    2fac:	4798      	blx	r3
	delay_init();
    2fae:	4b48      	ldr	r3, [pc, #288]	; (30d0 <main+0x130>)
    2fb0:	4798      	blx	r3
	configure_console();
    2fb2:	4b48      	ldr	r3, [pc, #288]	; (30d4 <main+0x134>)
    2fb4:	4798      	blx	r3
	configure_nvm();
    2fb6:	4b48      	ldr	r3, [pc, #288]	; (30d8 <main+0x138>)
    2fb8:	4798      	blx	r3
	// boot pin config
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2fba:	230c      	movs	r3, #12
    2fbc:	18fb      	adds	r3, r7, r3
    2fbe:	0018      	movs	r0, r3
    2fc0:	4b46      	ldr	r3, [pc, #280]	; (30dc <main+0x13c>)
    2fc2:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_INPUT;
    2fc4:	230c      	movs	r3, #12
    2fc6:	18fb      	adds	r3, r7, r3
    2fc8:	2200      	movs	r2, #0
    2fca:	701a      	strb	r2, [r3, #0]
	 port_pin_set_config(BOOT_PIN, &pin_conf);
    2fcc:	230c      	movs	r3, #12
    2fce:	18fb      	adds	r3, r7, r3
    2fd0:	0019      	movs	r1, r3
    2fd2:	2037      	movs	r0, #55	; 0x37
    2fd4:	4b42      	ldr	r3, [pc, #264]	; (30e0 <main+0x140>)
    2fd6:	4798      	blx	r3
	printf("Init done.\n");
    2fd8:	4b42      	ldr	r3, [pc, #264]	; (30e4 <main+0x144>)
    2fda:	0018      	movs	r0, r3
    2fdc:	4b42      	ldr	r3, [pc, #264]	; (30e8 <main+0x148>)
    2fde:	4798      	blx	r3

	
	
	
	Firmware_Status_t thisFW = getFWStat();
    2fe0:	1d3b      	adds	r3, r7, #4
    2fe2:	0018      	movs	r0, r3
    2fe4:	4b41      	ldr	r3, [pc, #260]	; (30ec <main+0x14c>)
    2fe6:	4798      	blx	r3
	if (thisFW.signature[0] == NULL) {
    2fe8:	1d3b      	adds	r3, r7, #4
    2fea:	781b      	ldrb	r3, [r3, #0]
    2fec:	2b00      	cmp	r3, #0
    2fee:	d11d      	bne.n	302c <main+0x8c>
		printf("Invalid FW stat, writing default\n");
    2ff0:	4b3f      	ldr	r3, [pc, #252]	; (30f0 <main+0x150>)
    2ff2:	0018      	movs	r0, r3
    2ff4:	4b3c      	ldr	r3, [pc, #240]	; (30e8 <main+0x148>)
    2ff6:	4798      	blx	r3
		thisFW.signature[0] = 1;
    2ff8:	1d3b      	adds	r3, r7, #4
    2ffa:	2201      	movs	r2, #1
    2ffc:	701a      	strb	r2, [r3, #0]
		thisFW.signature[1] = 2;
    2ffe:	1d3b      	adds	r3, r7, #4
    3000:	2202      	movs	r2, #2
    3002:	705a      	strb	r2, [r3, #1]
		thisFW.signature[2] = 3;
    3004:	1d3b      	adds	r3, r7, #4
    3006:	2203      	movs	r2, #3
    3008:	709a      	strb	r2, [r3, #2]
		thisFW.signature[3] = 4;
    300a:	1d3b      	adds	r3, r7, #4
    300c:	2204      	movs	r2, #4
    300e:	70da      	strb	r2, [r3, #3]
		thisFW.executing_image = 1;
    3010:	1d3b      	adds	r3, r7, #4
    3012:	2201      	movs	r2, #1
    3014:	711a      	strb	r2, [r3, #4]
		thisFW.downloaded_image = 2;
    3016:	1d3b      	adds	r3, r7, #4
    3018:	2202      	movs	r2, #2
    301a:	715a      	strb	r2, [r3, #5]
		thisFW.writenew_image = 0;
    301c:	1d3b      	adds	r3, r7, #4
    301e:	2200      	movs	r2, #0
    3020:	719a      	strb	r2, [r3, #6]
		writeFWStat(thisFW);
    3022:	1d3b      	adds	r3, r7, #4
    3024:	6818      	ldr	r0, [r3, #0]
    3026:	6859      	ldr	r1, [r3, #4]
    3028:	4b32      	ldr	r3, [pc, #200]	; (30f4 <main+0x154>)
    302a:	4798      	blx	r3
	//thisFW.writenew_image = 1;
	//thisFW.downloaded_image = 1;
	//writeFWStat(thisFW);

	void (*app_code_entry)(void);
	uint16_t n=0; uint8_t remain_in_boot = 0;
    302c:	2316      	movs	r3, #22
    302e:	18fb      	adds	r3, r7, r3
    3030:	2200      	movs	r2, #0
    3032:	801a      	strh	r2, [r3, #0]
    3034:	2315      	movs	r3, #21
    3036:	18fb      	adds	r3, r7, r3
    3038:	2200      	movs	r2, #0
    303a:	701a      	strb	r2, [r3, #0]
	//check if button is pressed to lock in boot
	while(n++ < 1000)
    303c:	e00e      	b.n	305c <main+0xbc>
	{
		if(!port_pin_get_input_level(BOOT_PIN))
    303e:	2037      	movs	r0, #55	; 0x37
    3040:	4b2d      	ldr	r3, [pc, #180]	; (30f8 <main+0x158>)
    3042:	4798      	blx	r3
    3044:	0003      	movs	r3, r0
    3046:	001a      	movs	r2, r3
    3048:	2301      	movs	r3, #1
    304a:	4053      	eors	r3, r2
    304c:	b2db      	uxtb	r3, r3
    304e:	2b00      	cmp	r3, #0
    3050:	d004      	beq.n	305c <main+0xbc>
		{
			remain_in_boot = 1;
    3052:	2315      	movs	r3, #21
    3054:	18fb      	adds	r3, r7, r3
    3056:	2201      	movs	r2, #1
    3058:	701a      	strb	r2, [r3, #0]
			break;
    305a:	e009      	b.n	3070 <main+0xd0>
	while(n++ < 1000)
    305c:	2316      	movs	r3, #22
    305e:	18fb      	adds	r3, r7, r3
    3060:	881b      	ldrh	r3, [r3, #0]
    3062:	2216      	movs	r2, #22
    3064:	18ba      	adds	r2, r7, r2
    3066:	1c59      	adds	r1, r3, #1
    3068:	8011      	strh	r1, [r2, #0]
    306a:	4a24      	ldr	r2, [pc, #144]	; (30fc <main+0x15c>)
    306c:	4293      	cmp	r3, r2
    306e:	d9e6      	bls.n	303e <main+0x9e>
		}
	}
	while(1) {
		if(!remain_in_boot)
    3070:	2315      	movs	r3, #21
    3072:	18fb      	adds	r3, r7, r3
    3074:	781b      	ldrb	r3, [r3, #0]
    3076:	2b00      	cmp	r3, #0
    3078:	d115      	bne.n	30a6 <main+0x106>
		{
			// check for firmware download requested
			if(thisFW.writenew_image)
    307a:	1d3b      	adds	r3, r7, #4
    307c:	799b      	ldrb	r3, [r3, #6]
    307e:	2b00      	cmp	r3, #0
    3080:	d004      	beq.n	308c <main+0xec>
			{
				upgradeFW(thisFW);
    3082:	1d3b      	adds	r3, r7, #4
    3084:	6818      	ldr	r0, [r3, #0]
    3086:	6859      	ldr	r1, [r3, #4]
    3088:	4b1d      	ldr	r3, [pc, #116]	; (3100 <main+0x160>)
    308a:	4798      	blx	r3
			}
			
			// vector table rebasing
			SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    308c:	4b1d      	ldr	r3, [pc, #116]	; (3104 <main+0x164>)
    308e:	2280      	movs	r2, #128	; 0x80
    3090:	0212      	lsls	r2, r2, #8
    3092:	609a      	str	r2, [r3, #8]

			// jump to reset handler
			app_code_entry =  (void(*)(void))(*(unsigned int*)(APP_START_ADDRESS+4));
    3094:	4b1c      	ldr	r3, [pc, #112]	; (3108 <main+0x168>)
    3096:	681b      	ldr	r3, [r3, #0]
    3098:	613b      	str	r3, [r7, #16]
			// jump
			printf("Starting app\n");
    309a:	4b1c      	ldr	r3, [pc, #112]	; (310c <main+0x16c>)
    309c:	0018      	movs	r0, r3
    309e:	4b12      	ldr	r3, [pc, #72]	; (30e8 <main+0x148>)
    30a0:	4798      	blx	r3
			app_code_entry();
    30a2:	693b      	ldr	r3, [r7, #16]
    30a4:	4798      	blx	r3
		}
		printf("in boot");
    30a6:	4b1a      	ldr	r3, [pc, #104]	; (3110 <main+0x170>)
    30a8:	0018      	movs	r0, r3
    30aa:	4b1a      	ldr	r3, [pc, #104]	; (3114 <main+0x174>)
    30ac:	4798      	blx	r3
		delay_ms(500);
    30ae:	23fa      	movs	r3, #250	; 0xfa
    30b0:	005b      	lsls	r3, r3, #1
    30b2:	0018      	movs	r0, r3
    30b4:	4b18      	ldr	r3, [pc, #96]	; (3118 <main+0x178>)
    30b6:	4798      	blx	r3
    30b8:	2315      	movs	r3, #21
    30ba:	18fb      	adds	r3, r7, r3
    30bc:	2215      	movs	r2, #21
    30be:	18ba      	adds	r2, r7, r2
    30c0:	7812      	ldrb	r2, [r2, #0]
    30c2:	701a      	strb	r2, [r3, #0]
		if(!remain_in_boot)
    30c4:	e7d4      	b.n	3070 <main+0xd0>
    30c6:	46c0      	nop			; (mov r8, r8)
    30c8:	00002771 	.word	0x00002771
    30cc:	00002b21 	.word	0x00002b21
    30d0:	00000155 	.word	0x00000155
    30d4:	00002dc9 	.word	0x00002dc9
    30d8:	00002f75 	.word	0x00002f75
    30dc:	00002ab9 	.word	0x00002ab9
    30e0:	000006fd 	.word	0x000006fd
    30e4:	00004580 	.word	0x00004580
    30e8:	000033e9 	.word	0x000033e9
    30ec:	00002e3d 	.word	0x00002e3d
    30f0:	0000458c 	.word	0x0000458c
    30f4:	00002e7d 	.word	0x00002e7d
    30f8:	00002add 	.word	0x00002add
    30fc:	000003e7 	.word	0x000003e7
    3100:	00002f1d 	.word	0x00002f1d
    3104:	e000ed00 	.word	0xe000ed00
    3108:	00008004 	.word	0x00008004
    310c:	000045b0 	.word	0x000045b0
    3110:	000045c0 	.word	0x000045c0
    3114:	000032f5 	.word	0x000032f5
    3118:	000001ad 	.word	0x000001ad

0000311c <__udivsi3>:
    311c:	2200      	movs	r2, #0
    311e:	0843      	lsrs	r3, r0, #1
    3120:	428b      	cmp	r3, r1
    3122:	d374      	bcc.n	320e <__udivsi3+0xf2>
    3124:	0903      	lsrs	r3, r0, #4
    3126:	428b      	cmp	r3, r1
    3128:	d35f      	bcc.n	31ea <__udivsi3+0xce>
    312a:	0a03      	lsrs	r3, r0, #8
    312c:	428b      	cmp	r3, r1
    312e:	d344      	bcc.n	31ba <__udivsi3+0x9e>
    3130:	0b03      	lsrs	r3, r0, #12
    3132:	428b      	cmp	r3, r1
    3134:	d328      	bcc.n	3188 <__udivsi3+0x6c>
    3136:	0c03      	lsrs	r3, r0, #16
    3138:	428b      	cmp	r3, r1
    313a:	d30d      	bcc.n	3158 <__udivsi3+0x3c>
    313c:	22ff      	movs	r2, #255	; 0xff
    313e:	0209      	lsls	r1, r1, #8
    3140:	ba12      	rev	r2, r2
    3142:	0c03      	lsrs	r3, r0, #16
    3144:	428b      	cmp	r3, r1
    3146:	d302      	bcc.n	314e <__udivsi3+0x32>
    3148:	1212      	asrs	r2, r2, #8
    314a:	0209      	lsls	r1, r1, #8
    314c:	d065      	beq.n	321a <__udivsi3+0xfe>
    314e:	0b03      	lsrs	r3, r0, #12
    3150:	428b      	cmp	r3, r1
    3152:	d319      	bcc.n	3188 <__udivsi3+0x6c>
    3154:	e000      	b.n	3158 <__udivsi3+0x3c>
    3156:	0a09      	lsrs	r1, r1, #8
    3158:	0bc3      	lsrs	r3, r0, #15
    315a:	428b      	cmp	r3, r1
    315c:	d301      	bcc.n	3162 <__udivsi3+0x46>
    315e:	03cb      	lsls	r3, r1, #15
    3160:	1ac0      	subs	r0, r0, r3
    3162:	4152      	adcs	r2, r2
    3164:	0b83      	lsrs	r3, r0, #14
    3166:	428b      	cmp	r3, r1
    3168:	d301      	bcc.n	316e <__udivsi3+0x52>
    316a:	038b      	lsls	r3, r1, #14
    316c:	1ac0      	subs	r0, r0, r3
    316e:	4152      	adcs	r2, r2
    3170:	0b43      	lsrs	r3, r0, #13
    3172:	428b      	cmp	r3, r1
    3174:	d301      	bcc.n	317a <__udivsi3+0x5e>
    3176:	034b      	lsls	r3, r1, #13
    3178:	1ac0      	subs	r0, r0, r3
    317a:	4152      	adcs	r2, r2
    317c:	0b03      	lsrs	r3, r0, #12
    317e:	428b      	cmp	r3, r1
    3180:	d301      	bcc.n	3186 <__udivsi3+0x6a>
    3182:	030b      	lsls	r3, r1, #12
    3184:	1ac0      	subs	r0, r0, r3
    3186:	4152      	adcs	r2, r2
    3188:	0ac3      	lsrs	r3, r0, #11
    318a:	428b      	cmp	r3, r1
    318c:	d301      	bcc.n	3192 <__udivsi3+0x76>
    318e:	02cb      	lsls	r3, r1, #11
    3190:	1ac0      	subs	r0, r0, r3
    3192:	4152      	adcs	r2, r2
    3194:	0a83      	lsrs	r3, r0, #10
    3196:	428b      	cmp	r3, r1
    3198:	d301      	bcc.n	319e <__udivsi3+0x82>
    319a:	028b      	lsls	r3, r1, #10
    319c:	1ac0      	subs	r0, r0, r3
    319e:	4152      	adcs	r2, r2
    31a0:	0a43      	lsrs	r3, r0, #9
    31a2:	428b      	cmp	r3, r1
    31a4:	d301      	bcc.n	31aa <__udivsi3+0x8e>
    31a6:	024b      	lsls	r3, r1, #9
    31a8:	1ac0      	subs	r0, r0, r3
    31aa:	4152      	adcs	r2, r2
    31ac:	0a03      	lsrs	r3, r0, #8
    31ae:	428b      	cmp	r3, r1
    31b0:	d301      	bcc.n	31b6 <__udivsi3+0x9a>
    31b2:	020b      	lsls	r3, r1, #8
    31b4:	1ac0      	subs	r0, r0, r3
    31b6:	4152      	adcs	r2, r2
    31b8:	d2cd      	bcs.n	3156 <__udivsi3+0x3a>
    31ba:	09c3      	lsrs	r3, r0, #7
    31bc:	428b      	cmp	r3, r1
    31be:	d301      	bcc.n	31c4 <__udivsi3+0xa8>
    31c0:	01cb      	lsls	r3, r1, #7
    31c2:	1ac0      	subs	r0, r0, r3
    31c4:	4152      	adcs	r2, r2
    31c6:	0983      	lsrs	r3, r0, #6
    31c8:	428b      	cmp	r3, r1
    31ca:	d301      	bcc.n	31d0 <__udivsi3+0xb4>
    31cc:	018b      	lsls	r3, r1, #6
    31ce:	1ac0      	subs	r0, r0, r3
    31d0:	4152      	adcs	r2, r2
    31d2:	0943      	lsrs	r3, r0, #5
    31d4:	428b      	cmp	r3, r1
    31d6:	d301      	bcc.n	31dc <__udivsi3+0xc0>
    31d8:	014b      	lsls	r3, r1, #5
    31da:	1ac0      	subs	r0, r0, r3
    31dc:	4152      	adcs	r2, r2
    31de:	0903      	lsrs	r3, r0, #4
    31e0:	428b      	cmp	r3, r1
    31e2:	d301      	bcc.n	31e8 <__udivsi3+0xcc>
    31e4:	010b      	lsls	r3, r1, #4
    31e6:	1ac0      	subs	r0, r0, r3
    31e8:	4152      	adcs	r2, r2
    31ea:	08c3      	lsrs	r3, r0, #3
    31ec:	428b      	cmp	r3, r1
    31ee:	d301      	bcc.n	31f4 <__udivsi3+0xd8>
    31f0:	00cb      	lsls	r3, r1, #3
    31f2:	1ac0      	subs	r0, r0, r3
    31f4:	4152      	adcs	r2, r2
    31f6:	0883      	lsrs	r3, r0, #2
    31f8:	428b      	cmp	r3, r1
    31fa:	d301      	bcc.n	3200 <__udivsi3+0xe4>
    31fc:	008b      	lsls	r3, r1, #2
    31fe:	1ac0      	subs	r0, r0, r3
    3200:	4152      	adcs	r2, r2
    3202:	0843      	lsrs	r3, r0, #1
    3204:	428b      	cmp	r3, r1
    3206:	d301      	bcc.n	320c <__udivsi3+0xf0>
    3208:	004b      	lsls	r3, r1, #1
    320a:	1ac0      	subs	r0, r0, r3
    320c:	4152      	adcs	r2, r2
    320e:	1a41      	subs	r1, r0, r1
    3210:	d200      	bcs.n	3214 <__udivsi3+0xf8>
    3212:	4601      	mov	r1, r0
    3214:	4152      	adcs	r2, r2
    3216:	4610      	mov	r0, r2
    3218:	4770      	bx	lr
    321a:	e7ff      	b.n	321c <__udivsi3+0x100>
    321c:	b501      	push	{r0, lr}
    321e:	2000      	movs	r0, #0
    3220:	f000 f806 	bl	3230 <__aeabi_idiv0>
    3224:	bd02      	pop	{r1, pc}
    3226:	46c0      	nop			; (mov r8, r8)

00003228 <__aeabi_uidivmod>:
    3228:	2900      	cmp	r1, #0
    322a:	d0f7      	beq.n	321c <__udivsi3+0x100>
    322c:	e776      	b.n	311c <__udivsi3>
    322e:	4770      	bx	lr

00003230 <__aeabi_idiv0>:
    3230:	4770      	bx	lr
    3232:	46c0      	nop			; (mov r8, r8)

00003234 <__aeabi_lmul>:
    3234:	b5f0      	push	{r4, r5, r6, r7, lr}
    3236:	46ce      	mov	lr, r9
    3238:	4647      	mov	r7, r8
    323a:	0415      	lsls	r5, r2, #16
    323c:	0c2d      	lsrs	r5, r5, #16
    323e:	002e      	movs	r6, r5
    3240:	b580      	push	{r7, lr}
    3242:	0407      	lsls	r7, r0, #16
    3244:	0c14      	lsrs	r4, r2, #16
    3246:	0c3f      	lsrs	r7, r7, #16
    3248:	4699      	mov	r9, r3
    324a:	0c03      	lsrs	r3, r0, #16
    324c:	437e      	muls	r6, r7
    324e:	435d      	muls	r5, r3
    3250:	4367      	muls	r7, r4
    3252:	4363      	muls	r3, r4
    3254:	197f      	adds	r7, r7, r5
    3256:	0c34      	lsrs	r4, r6, #16
    3258:	19e4      	adds	r4, r4, r7
    325a:	469c      	mov	ip, r3
    325c:	42a5      	cmp	r5, r4
    325e:	d903      	bls.n	3268 <__aeabi_lmul+0x34>
    3260:	2380      	movs	r3, #128	; 0x80
    3262:	025b      	lsls	r3, r3, #9
    3264:	4698      	mov	r8, r3
    3266:	44c4      	add	ip, r8
    3268:	464b      	mov	r3, r9
    326a:	4351      	muls	r1, r2
    326c:	4343      	muls	r3, r0
    326e:	0436      	lsls	r6, r6, #16
    3270:	0c36      	lsrs	r6, r6, #16
    3272:	0c25      	lsrs	r5, r4, #16
    3274:	0424      	lsls	r4, r4, #16
    3276:	4465      	add	r5, ip
    3278:	19a4      	adds	r4, r4, r6
    327a:	1859      	adds	r1, r3, r1
    327c:	1949      	adds	r1, r1, r5
    327e:	0020      	movs	r0, r4
    3280:	bc0c      	pop	{r2, r3}
    3282:	4690      	mov	r8, r2
    3284:	4699      	mov	r9, r3
    3286:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003288 <__libc_init_array>:
    3288:	b570      	push	{r4, r5, r6, lr}
    328a:	2600      	movs	r6, #0
    328c:	4d0c      	ldr	r5, [pc, #48]	; (32c0 <__libc_init_array+0x38>)
    328e:	4c0d      	ldr	r4, [pc, #52]	; (32c4 <__libc_init_array+0x3c>)
    3290:	1b64      	subs	r4, r4, r5
    3292:	10a4      	asrs	r4, r4, #2
    3294:	42a6      	cmp	r6, r4
    3296:	d109      	bne.n	32ac <__libc_init_array+0x24>
    3298:	2600      	movs	r6, #0
    329a:	f001 f9e1 	bl	4660 <_init>
    329e:	4d0a      	ldr	r5, [pc, #40]	; (32c8 <__libc_init_array+0x40>)
    32a0:	4c0a      	ldr	r4, [pc, #40]	; (32cc <__libc_init_array+0x44>)
    32a2:	1b64      	subs	r4, r4, r5
    32a4:	10a4      	asrs	r4, r4, #2
    32a6:	42a6      	cmp	r6, r4
    32a8:	d105      	bne.n	32b6 <__libc_init_array+0x2e>
    32aa:	bd70      	pop	{r4, r5, r6, pc}
    32ac:	00b3      	lsls	r3, r6, #2
    32ae:	58eb      	ldr	r3, [r5, r3]
    32b0:	4798      	blx	r3
    32b2:	3601      	adds	r6, #1
    32b4:	e7ee      	b.n	3294 <__libc_init_array+0xc>
    32b6:	00b3      	lsls	r3, r6, #2
    32b8:	58eb      	ldr	r3, [r5, r3]
    32ba:	4798      	blx	r3
    32bc:	3601      	adds	r6, #1
    32be:	e7f2      	b.n	32a6 <__libc_init_array+0x1e>
    32c0:	0000466c 	.word	0x0000466c
    32c4:	0000466c 	.word	0x0000466c
    32c8:	0000466c 	.word	0x0000466c
    32cc:	00004670 	.word	0x00004670

000032d0 <memcpy>:
    32d0:	2300      	movs	r3, #0
    32d2:	b510      	push	{r4, lr}
    32d4:	429a      	cmp	r2, r3
    32d6:	d100      	bne.n	32da <memcpy+0xa>
    32d8:	bd10      	pop	{r4, pc}
    32da:	5ccc      	ldrb	r4, [r1, r3]
    32dc:	54c4      	strb	r4, [r0, r3]
    32de:	3301      	adds	r3, #1
    32e0:	e7f8      	b.n	32d4 <memcpy+0x4>

000032e2 <memset>:
    32e2:	0003      	movs	r3, r0
    32e4:	1882      	adds	r2, r0, r2
    32e6:	4293      	cmp	r3, r2
    32e8:	d100      	bne.n	32ec <memset+0xa>
    32ea:	4770      	bx	lr
    32ec:	7019      	strb	r1, [r3, #0]
    32ee:	3301      	adds	r3, #1
    32f0:	e7f9      	b.n	32e6 <memset+0x4>
	...

000032f4 <iprintf>:
    32f4:	b40f      	push	{r0, r1, r2, r3}
    32f6:	4b0b      	ldr	r3, [pc, #44]	; (3324 <iprintf+0x30>)
    32f8:	b513      	push	{r0, r1, r4, lr}
    32fa:	681c      	ldr	r4, [r3, #0]
    32fc:	2c00      	cmp	r4, #0
    32fe:	d005      	beq.n	330c <iprintf+0x18>
    3300:	69a3      	ldr	r3, [r4, #24]
    3302:	2b00      	cmp	r3, #0
    3304:	d102      	bne.n	330c <iprintf+0x18>
    3306:	0020      	movs	r0, r4
    3308:	f000 faf2 	bl	38f0 <__sinit>
    330c:	ab05      	add	r3, sp, #20
    330e:	9a04      	ldr	r2, [sp, #16]
    3310:	68a1      	ldr	r1, [r4, #8]
    3312:	0020      	movs	r0, r4
    3314:	9301      	str	r3, [sp, #4]
    3316:	f000 fcc1 	bl	3c9c <_vfiprintf_r>
    331a:	bc16      	pop	{r1, r2, r4}
    331c:	bc08      	pop	{r3}
    331e:	b004      	add	sp, #16
    3320:	4718      	bx	r3
    3322:	46c0      	nop			; (mov r8, r8)
    3324:	2000000c 	.word	0x2000000c

00003328 <_puts_r>:
    3328:	b570      	push	{r4, r5, r6, lr}
    332a:	0005      	movs	r5, r0
    332c:	000e      	movs	r6, r1
    332e:	2800      	cmp	r0, #0
    3330:	d004      	beq.n	333c <_puts_r+0x14>
    3332:	6983      	ldr	r3, [r0, #24]
    3334:	2b00      	cmp	r3, #0
    3336:	d101      	bne.n	333c <_puts_r+0x14>
    3338:	f000 fada 	bl	38f0 <__sinit>
    333c:	69ab      	ldr	r3, [r5, #24]
    333e:	68ac      	ldr	r4, [r5, #8]
    3340:	2b00      	cmp	r3, #0
    3342:	d102      	bne.n	334a <_puts_r+0x22>
    3344:	0028      	movs	r0, r5
    3346:	f000 fad3 	bl	38f0 <__sinit>
    334a:	4b24      	ldr	r3, [pc, #144]	; (33dc <_puts_r+0xb4>)
    334c:	429c      	cmp	r4, r3
    334e:	d10f      	bne.n	3370 <_puts_r+0x48>
    3350:	686c      	ldr	r4, [r5, #4]
    3352:	89a3      	ldrh	r3, [r4, #12]
    3354:	071b      	lsls	r3, r3, #28
    3356:	d502      	bpl.n	335e <_puts_r+0x36>
    3358:	6923      	ldr	r3, [r4, #16]
    335a:	2b00      	cmp	r3, #0
    335c:	d120      	bne.n	33a0 <_puts_r+0x78>
    335e:	0021      	movs	r1, r4
    3360:	0028      	movs	r0, r5
    3362:	f000 f957 	bl	3614 <__swsetup_r>
    3366:	2800      	cmp	r0, #0
    3368:	d01a      	beq.n	33a0 <_puts_r+0x78>
    336a:	2001      	movs	r0, #1
    336c:	4240      	negs	r0, r0
    336e:	bd70      	pop	{r4, r5, r6, pc}
    3370:	4b1b      	ldr	r3, [pc, #108]	; (33e0 <_puts_r+0xb8>)
    3372:	429c      	cmp	r4, r3
    3374:	d101      	bne.n	337a <_puts_r+0x52>
    3376:	68ac      	ldr	r4, [r5, #8]
    3378:	e7eb      	b.n	3352 <_puts_r+0x2a>
    337a:	4b1a      	ldr	r3, [pc, #104]	; (33e4 <_puts_r+0xbc>)
    337c:	429c      	cmp	r4, r3
    337e:	d1e8      	bne.n	3352 <_puts_r+0x2a>
    3380:	68ec      	ldr	r4, [r5, #12]
    3382:	e7e6      	b.n	3352 <_puts_r+0x2a>
    3384:	3b01      	subs	r3, #1
    3386:	3601      	adds	r6, #1
    3388:	60a3      	str	r3, [r4, #8]
    338a:	2b00      	cmp	r3, #0
    338c:	da04      	bge.n	3398 <_puts_r+0x70>
    338e:	69a2      	ldr	r2, [r4, #24]
    3390:	4293      	cmp	r3, r2
    3392:	db16      	blt.n	33c2 <_puts_r+0x9a>
    3394:	290a      	cmp	r1, #10
    3396:	d014      	beq.n	33c2 <_puts_r+0x9a>
    3398:	6823      	ldr	r3, [r4, #0]
    339a:	1c5a      	adds	r2, r3, #1
    339c:	6022      	str	r2, [r4, #0]
    339e:	7019      	strb	r1, [r3, #0]
    33a0:	7831      	ldrb	r1, [r6, #0]
    33a2:	68a3      	ldr	r3, [r4, #8]
    33a4:	2900      	cmp	r1, #0
    33a6:	d1ed      	bne.n	3384 <_puts_r+0x5c>
    33a8:	3b01      	subs	r3, #1
    33aa:	60a3      	str	r3, [r4, #8]
    33ac:	2b00      	cmp	r3, #0
    33ae:	da0f      	bge.n	33d0 <_puts_r+0xa8>
    33b0:	0022      	movs	r2, r4
    33b2:	310a      	adds	r1, #10
    33b4:	0028      	movs	r0, r5
    33b6:	f000 f8d7 	bl	3568 <__swbuf_r>
    33ba:	1c43      	adds	r3, r0, #1
    33bc:	d0d5      	beq.n	336a <_puts_r+0x42>
    33be:	200a      	movs	r0, #10
    33c0:	e7d5      	b.n	336e <_puts_r+0x46>
    33c2:	0022      	movs	r2, r4
    33c4:	0028      	movs	r0, r5
    33c6:	f000 f8cf 	bl	3568 <__swbuf_r>
    33ca:	1c43      	adds	r3, r0, #1
    33cc:	d1e8      	bne.n	33a0 <_puts_r+0x78>
    33ce:	e7cc      	b.n	336a <_puts_r+0x42>
    33d0:	200a      	movs	r0, #10
    33d2:	6823      	ldr	r3, [r4, #0]
    33d4:	1c5a      	adds	r2, r3, #1
    33d6:	6022      	str	r2, [r4, #0]
    33d8:	7018      	strb	r0, [r3, #0]
    33da:	e7c8      	b.n	336e <_puts_r+0x46>
    33dc:	000045ec 	.word	0x000045ec
    33e0:	0000460c 	.word	0x0000460c
    33e4:	000045cc 	.word	0x000045cc

000033e8 <puts>:
    33e8:	b510      	push	{r4, lr}
    33ea:	4b03      	ldr	r3, [pc, #12]	; (33f8 <puts+0x10>)
    33ec:	0001      	movs	r1, r0
    33ee:	6818      	ldr	r0, [r3, #0]
    33f0:	f7ff ff9a 	bl	3328 <_puts_r>
    33f4:	bd10      	pop	{r4, pc}
    33f6:	46c0      	nop			; (mov r8, r8)
    33f8:	2000000c 	.word	0x2000000c

000033fc <setbuf>:
    33fc:	424a      	negs	r2, r1
    33fe:	414a      	adcs	r2, r1
    3400:	2380      	movs	r3, #128	; 0x80
    3402:	b510      	push	{r4, lr}
    3404:	0052      	lsls	r2, r2, #1
    3406:	00db      	lsls	r3, r3, #3
    3408:	f000 f802 	bl	3410 <setvbuf>
    340c:	bd10      	pop	{r4, pc}
	...

00003410 <setvbuf>:
    3410:	b5f0      	push	{r4, r5, r6, r7, lr}
    3412:	001d      	movs	r5, r3
    3414:	4b4f      	ldr	r3, [pc, #316]	; (3554 <setvbuf+0x144>)
    3416:	b085      	sub	sp, #20
    3418:	681e      	ldr	r6, [r3, #0]
    341a:	0004      	movs	r4, r0
    341c:	000f      	movs	r7, r1
    341e:	9200      	str	r2, [sp, #0]
    3420:	2e00      	cmp	r6, #0
    3422:	d005      	beq.n	3430 <setvbuf+0x20>
    3424:	69b3      	ldr	r3, [r6, #24]
    3426:	2b00      	cmp	r3, #0
    3428:	d102      	bne.n	3430 <setvbuf+0x20>
    342a:	0030      	movs	r0, r6
    342c:	f000 fa60 	bl	38f0 <__sinit>
    3430:	4b49      	ldr	r3, [pc, #292]	; (3558 <setvbuf+0x148>)
    3432:	429c      	cmp	r4, r3
    3434:	d150      	bne.n	34d8 <setvbuf+0xc8>
    3436:	6874      	ldr	r4, [r6, #4]
    3438:	9b00      	ldr	r3, [sp, #0]
    343a:	2b02      	cmp	r3, #2
    343c:	d005      	beq.n	344a <setvbuf+0x3a>
    343e:	2b01      	cmp	r3, #1
    3440:	d900      	bls.n	3444 <setvbuf+0x34>
    3442:	e084      	b.n	354e <setvbuf+0x13e>
    3444:	2d00      	cmp	r5, #0
    3446:	da00      	bge.n	344a <setvbuf+0x3a>
    3448:	e081      	b.n	354e <setvbuf+0x13e>
    344a:	0021      	movs	r1, r4
    344c:	0030      	movs	r0, r6
    344e:	f000 f9e1 	bl	3814 <_fflush_r>
    3452:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3454:	2900      	cmp	r1, #0
    3456:	d008      	beq.n	346a <setvbuf+0x5a>
    3458:	0023      	movs	r3, r4
    345a:	3344      	adds	r3, #68	; 0x44
    345c:	4299      	cmp	r1, r3
    345e:	d002      	beq.n	3466 <setvbuf+0x56>
    3460:	0030      	movs	r0, r6
    3462:	f000 fb4b 	bl	3afc <_free_r>
    3466:	2300      	movs	r3, #0
    3468:	6363      	str	r3, [r4, #52]	; 0x34
    346a:	2300      	movs	r3, #0
    346c:	61a3      	str	r3, [r4, #24]
    346e:	6063      	str	r3, [r4, #4]
    3470:	89a3      	ldrh	r3, [r4, #12]
    3472:	061b      	lsls	r3, r3, #24
    3474:	d503      	bpl.n	347e <setvbuf+0x6e>
    3476:	6921      	ldr	r1, [r4, #16]
    3478:	0030      	movs	r0, r6
    347a:	f000 fb3f 	bl	3afc <_free_r>
    347e:	89a3      	ldrh	r3, [r4, #12]
    3480:	4a36      	ldr	r2, [pc, #216]	; (355c <setvbuf+0x14c>)
    3482:	4013      	ands	r3, r2
    3484:	81a3      	strh	r3, [r4, #12]
    3486:	9b00      	ldr	r3, [sp, #0]
    3488:	2b02      	cmp	r3, #2
    348a:	d05a      	beq.n	3542 <setvbuf+0x132>
    348c:	ab03      	add	r3, sp, #12
    348e:	aa02      	add	r2, sp, #8
    3490:	0021      	movs	r1, r4
    3492:	0030      	movs	r0, r6
    3494:	f000 fac2 	bl	3a1c <__swhatbuf_r>
    3498:	89a3      	ldrh	r3, [r4, #12]
    349a:	4318      	orrs	r0, r3
    349c:	81a0      	strh	r0, [r4, #12]
    349e:	2d00      	cmp	r5, #0
    34a0:	d124      	bne.n	34ec <setvbuf+0xdc>
    34a2:	9d02      	ldr	r5, [sp, #8]
    34a4:	0028      	movs	r0, r5
    34a6:	f000 fb1f 	bl	3ae8 <malloc>
    34aa:	9501      	str	r5, [sp, #4]
    34ac:	1e07      	subs	r7, r0, #0
    34ae:	d142      	bne.n	3536 <setvbuf+0x126>
    34b0:	9b02      	ldr	r3, [sp, #8]
    34b2:	9301      	str	r3, [sp, #4]
    34b4:	42ab      	cmp	r3, r5
    34b6:	d139      	bne.n	352c <setvbuf+0x11c>
    34b8:	2001      	movs	r0, #1
    34ba:	4240      	negs	r0, r0
    34bc:	2302      	movs	r3, #2
    34be:	89a2      	ldrh	r2, [r4, #12]
    34c0:	4313      	orrs	r3, r2
    34c2:	81a3      	strh	r3, [r4, #12]
    34c4:	2300      	movs	r3, #0
    34c6:	60a3      	str	r3, [r4, #8]
    34c8:	0023      	movs	r3, r4
    34ca:	3347      	adds	r3, #71	; 0x47
    34cc:	6023      	str	r3, [r4, #0]
    34ce:	6123      	str	r3, [r4, #16]
    34d0:	2301      	movs	r3, #1
    34d2:	6163      	str	r3, [r4, #20]
    34d4:	b005      	add	sp, #20
    34d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34d8:	4b21      	ldr	r3, [pc, #132]	; (3560 <setvbuf+0x150>)
    34da:	429c      	cmp	r4, r3
    34dc:	d101      	bne.n	34e2 <setvbuf+0xd2>
    34de:	68b4      	ldr	r4, [r6, #8]
    34e0:	e7aa      	b.n	3438 <setvbuf+0x28>
    34e2:	4b20      	ldr	r3, [pc, #128]	; (3564 <setvbuf+0x154>)
    34e4:	429c      	cmp	r4, r3
    34e6:	d1a7      	bne.n	3438 <setvbuf+0x28>
    34e8:	68f4      	ldr	r4, [r6, #12]
    34ea:	e7a5      	b.n	3438 <setvbuf+0x28>
    34ec:	2f00      	cmp	r7, #0
    34ee:	d0d9      	beq.n	34a4 <setvbuf+0x94>
    34f0:	69b3      	ldr	r3, [r6, #24]
    34f2:	2b00      	cmp	r3, #0
    34f4:	d102      	bne.n	34fc <setvbuf+0xec>
    34f6:	0030      	movs	r0, r6
    34f8:	f000 f9fa 	bl	38f0 <__sinit>
    34fc:	9b00      	ldr	r3, [sp, #0]
    34fe:	2b01      	cmp	r3, #1
    3500:	d103      	bne.n	350a <setvbuf+0xfa>
    3502:	89a3      	ldrh	r3, [r4, #12]
    3504:	9a00      	ldr	r2, [sp, #0]
    3506:	431a      	orrs	r2, r3
    3508:	81a2      	strh	r2, [r4, #12]
    350a:	2008      	movs	r0, #8
    350c:	89a3      	ldrh	r3, [r4, #12]
    350e:	6027      	str	r7, [r4, #0]
    3510:	6127      	str	r7, [r4, #16]
    3512:	6165      	str	r5, [r4, #20]
    3514:	4018      	ands	r0, r3
    3516:	d018      	beq.n	354a <setvbuf+0x13a>
    3518:	2001      	movs	r0, #1
    351a:	4018      	ands	r0, r3
    351c:	2300      	movs	r3, #0
    351e:	4298      	cmp	r0, r3
    3520:	d011      	beq.n	3546 <setvbuf+0x136>
    3522:	426d      	negs	r5, r5
    3524:	60a3      	str	r3, [r4, #8]
    3526:	61a5      	str	r5, [r4, #24]
    3528:	0018      	movs	r0, r3
    352a:	e7d3      	b.n	34d4 <setvbuf+0xc4>
    352c:	9801      	ldr	r0, [sp, #4]
    352e:	f000 fadb 	bl	3ae8 <malloc>
    3532:	1e07      	subs	r7, r0, #0
    3534:	d0c0      	beq.n	34b8 <setvbuf+0xa8>
    3536:	2380      	movs	r3, #128	; 0x80
    3538:	89a2      	ldrh	r2, [r4, #12]
    353a:	9d01      	ldr	r5, [sp, #4]
    353c:	4313      	orrs	r3, r2
    353e:	81a3      	strh	r3, [r4, #12]
    3540:	e7d6      	b.n	34f0 <setvbuf+0xe0>
    3542:	2000      	movs	r0, #0
    3544:	e7ba      	b.n	34bc <setvbuf+0xac>
    3546:	60a5      	str	r5, [r4, #8]
    3548:	e7c4      	b.n	34d4 <setvbuf+0xc4>
    354a:	60a0      	str	r0, [r4, #8]
    354c:	e7c2      	b.n	34d4 <setvbuf+0xc4>
    354e:	2001      	movs	r0, #1
    3550:	4240      	negs	r0, r0
    3552:	e7bf      	b.n	34d4 <setvbuf+0xc4>
    3554:	2000000c 	.word	0x2000000c
    3558:	000045ec 	.word	0x000045ec
    355c:	fffff35c 	.word	0xfffff35c
    3560:	0000460c 	.word	0x0000460c
    3564:	000045cc 	.word	0x000045cc

00003568 <__swbuf_r>:
    3568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    356a:	0005      	movs	r5, r0
    356c:	000e      	movs	r6, r1
    356e:	0014      	movs	r4, r2
    3570:	2800      	cmp	r0, #0
    3572:	d004      	beq.n	357e <__swbuf_r+0x16>
    3574:	6983      	ldr	r3, [r0, #24]
    3576:	2b00      	cmp	r3, #0
    3578:	d101      	bne.n	357e <__swbuf_r+0x16>
    357a:	f000 f9b9 	bl	38f0 <__sinit>
    357e:	4b22      	ldr	r3, [pc, #136]	; (3608 <__swbuf_r+0xa0>)
    3580:	429c      	cmp	r4, r3
    3582:	d12d      	bne.n	35e0 <__swbuf_r+0x78>
    3584:	686c      	ldr	r4, [r5, #4]
    3586:	69a3      	ldr	r3, [r4, #24]
    3588:	60a3      	str	r3, [r4, #8]
    358a:	89a3      	ldrh	r3, [r4, #12]
    358c:	071b      	lsls	r3, r3, #28
    358e:	d531      	bpl.n	35f4 <__swbuf_r+0x8c>
    3590:	6923      	ldr	r3, [r4, #16]
    3592:	2b00      	cmp	r3, #0
    3594:	d02e      	beq.n	35f4 <__swbuf_r+0x8c>
    3596:	6823      	ldr	r3, [r4, #0]
    3598:	6922      	ldr	r2, [r4, #16]
    359a:	b2f7      	uxtb	r7, r6
    359c:	1a98      	subs	r0, r3, r2
    359e:	6963      	ldr	r3, [r4, #20]
    35a0:	b2f6      	uxtb	r6, r6
    35a2:	4298      	cmp	r0, r3
    35a4:	db05      	blt.n	35b2 <__swbuf_r+0x4a>
    35a6:	0021      	movs	r1, r4
    35a8:	0028      	movs	r0, r5
    35aa:	f000 f933 	bl	3814 <_fflush_r>
    35ae:	2800      	cmp	r0, #0
    35b0:	d126      	bne.n	3600 <__swbuf_r+0x98>
    35b2:	68a3      	ldr	r3, [r4, #8]
    35b4:	3001      	adds	r0, #1
    35b6:	3b01      	subs	r3, #1
    35b8:	60a3      	str	r3, [r4, #8]
    35ba:	6823      	ldr	r3, [r4, #0]
    35bc:	1c5a      	adds	r2, r3, #1
    35be:	6022      	str	r2, [r4, #0]
    35c0:	701f      	strb	r7, [r3, #0]
    35c2:	6963      	ldr	r3, [r4, #20]
    35c4:	4298      	cmp	r0, r3
    35c6:	d004      	beq.n	35d2 <__swbuf_r+0x6a>
    35c8:	89a3      	ldrh	r3, [r4, #12]
    35ca:	07db      	lsls	r3, r3, #31
    35cc:	d51a      	bpl.n	3604 <__swbuf_r+0x9c>
    35ce:	2e0a      	cmp	r6, #10
    35d0:	d118      	bne.n	3604 <__swbuf_r+0x9c>
    35d2:	0021      	movs	r1, r4
    35d4:	0028      	movs	r0, r5
    35d6:	f000 f91d 	bl	3814 <_fflush_r>
    35da:	2800      	cmp	r0, #0
    35dc:	d012      	beq.n	3604 <__swbuf_r+0x9c>
    35de:	e00f      	b.n	3600 <__swbuf_r+0x98>
    35e0:	4b0a      	ldr	r3, [pc, #40]	; (360c <__swbuf_r+0xa4>)
    35e2:	429c      	cmp	r4, r3
    35e4:	d101      	bne.n	35ea <__swbuf_r+0x82>
    35e6:	68ac      	ldr	r4, [r5, #8]
    35e8:	e7cd      	b.n	3586 <__swbuf_r+0x1e>
    35ea:	4b09      	ldr	r3, [pc, #36]	; (3610 <__swbuf_r+0xa8>)
    35ec:	429c      	cmp	r4, r3
    35ee:	d1ca      	bne.n	3586 <__swbuf_r+0x1e>
    35f0:	68ec      	ldr	r4, [r5, #12]
    35f2:	e7c8      	b.n	3586 <__swbuf_r+0x1e>
    35f4:	0021      	movs	r1, r4
    35f6:	0028      	movs	r0, r5
    35f8:	f000 f80c 	bl	3614 <__swsetup_r>
    35fc:	2800      	cmp	r0, #0
    35fe:	d0ca      	beq.n	3596 <__swbuf_r+0x2e>
    3600:	2601      	movs	r6, #1
    3602:	4276      	negs	r6, r6
    3604:	0030      	movs	r0, r6
    3606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3608:	000045ec 	.word	0x000045ec
    360c:	0000460c 	.word	0x0000460c
    3610:	000045cc 	.word	0x000045cc

00003614 <__swsetup_r>:
    3614:	4b36      	ldr	r3, [pc, #216]	; (36f0 <__swsetup_r+0xdc>)
    3616:	b570      	push	{r4, r5, r6, lr}
    3618:	681d      	ldr	r5, [r3, #0]
    361a:	0006      	movs	r6, r0
    361c:	000c      	movs	r4, r1
    361e:	2d00      	cmp	r5, #0
    3620:	d005      	beq.n	362e <__swsetup_r+0x1a>
    3622:	69ab      	ldr	r3, [r5, #24]
    3624:	2b00      	cmp	r3, #0
    3626:	d102      	bne.n	362e <__swsetup_r+0x1a>
    3628:	0028      	movs	r0, r5
    362a:	f000 f961 	bl	38f0 <__sinit>
    362e:	4b31      	ldr	r3, [pc, #196]	; (36f4 <__swsetup_r+0xe0>)
    3630:	429c      	cmp	r4, r3
    3632:	d10f      	bne.n	3654 <__swsetup_r+0x40>
    3634:	686c      	ldr	r4, [r5, #4]
    3636:	230c      	movs	r3, #12
    3638:	5ee2      	ldrsh	r2, [r4, r3]
    363a:	b293      	uxth	r3, r2
    363c:	0719      	lsls	r1, r3, #28
    363e:	d42d      	bmi.n	369c <__swsetup_r+0x88>
    3640:	06d9      	lsls	r1, r3, #27
    3642:	d411      	bmi.n	3668 <__swsetup_r+0x54>
    3644:	2309      	movs	r3, #9
    3646:	2001      	movs	r0, #1
    3648:	6033      	str	r3, [r6, #0]
    364a:	3337      	adds	r3, #55	; 0x37
    364c:	4313      	orrs	r3, r2
    364e:	81a3      	strh	r3, [r4, #12]
    3650:	4240      	negs	r0, r0
    3652:	bd70      	pop	{r4, r5, r6, pc}
    3654:	4b28      	ldr	r3, [pc, #160]	; (36f8 <__swsetup_r+0xe4>)
    3656:	429c      	cmp	r4, r3
    3658:	d101      	bne.n	365e <__swsetup_r+0x4a>
    365a:	68ac      	ldr	r4, [r5, #8]
    365c:	e7eb      	b.n	3636 <__swsetup_r+0x22>
    365e:	4b27      	ldr	r3, [pc, #156]	; (36fc <__swsetup_r+0xe8>)
    3660:	429c      	cmp	r4, r3
    3662:	d1e8      	bne.n	3636 <__swsetup_r+0x22>
    3664:	68ec      	ldr	r4, [r5, #12]
    3666:	e7e6      	b.n	3636 <__swsetup_r+0x22>
    3668:	075b      	lsls	r3, r3, #29
    366a:	d513      	bpl.n	3694 <__swsetup_r+0x80>
    366c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    366e:	2900      	cmp	r1, #0
    3670:	d008      	beq.n	3684 <__swsetup_r+0x70>
    3672:	0023      	movs	r3, r4
    3674:	3344      	adds	r3, #68	; 0x44
    3676:	4299      	cmp	r1, r3
    3678:	d002      	beq.n	3680 <__swsetup_r+0x6c>
    367a:	0030      	movs	r0, r6
    367c:	f000 fa3e 	bl	3afc <_free_r>
    3680:	2300      	movs	r3, #0
    3682:	6363      	str	r3, [r4, #52]	; 0x34
    3684:	2224      	movs	r2, #36	; 0x24
    3686:	89a3      	ldrh	r3, [r4, #12]
    3688:	4393      	bics	r3, r2
    368a:	81a3      	strh	r3, [r4, #12]
    368c:	2300      	movs	r3, #0
    368e:	6063      	str	r3, [r4, #4]
    3690:	6923      	ldr	r3, [r4, #16]
    3692:	6023      	str	r3, [r4, #0]
    3694:	2308      	movs	r3, #8
    3696:	89a2      	ldrh	r2, [r4, #12]
    3698:	4313      	orrs	r3, r2
    369a:	81a3      	strh	r3, [r4, #12]
    369c:	6923      	ldr	r3, [r4, #16]
    369e:	2b00      	cmp	r3, #0
    36a0:	d10b      	bne.n	36ba <__swsetup_r+0xa6>
    36a2:	21a0      	movs	r1, #160	; 0xa0
    36a4:	2280      	movs	r2, #128	; 0x80
    36a6:	89a3      	ldrh	r3, [r4, #12]
    36a8:	0089      	lsls	r1, r1, #2
    36aa:	0092      	lsls	r2, r2, #2
    36ac:	400b      	ands	r3, r1
    36ae:	4293      	cmp	r3, r2
    36b0:	d003      	beq.n	36ba <__swsetup_r+0xa6>
    36b2:	0021      	movs	r1, r4
    36b4:	0030      	movs	r0, r6
    36b6:	f000 f9d9 	bl	3a6c <__smakebuf_r>
    36ba:	2301      	movs	r3, #1
    36bc:	89a2      	ldrh	r2, [r4, #12]
    36be:	4013      	ands	r3, r2
    36c0:	d011      	beq.n	36e6 <__swsetup_r+0xd2>
    36c2:	2300      	movs	r3, #0
    36c4:	60a3      	str	r3, [r4, #8]
    36c6:	6963      	ldr	r3, [r4, #20]
    36c8:	425b      	negs	r3, r3
    36ca:	61a3      	str	r3, [r4, #24]
    36cc:	2000      	movs	r0, #0
    36ce:	6923      	ldr	r3, [r4, #16]
    36d0:	4283      	cmp	r3, r0
    36d2:	d1be      	bne.n	3652 <__swsetup_r+0x3e>
    36d4:	230c      	movs	r3, #12
    36d6:	5ee2      	ldrsh	r2, [r4, r3]
    36d8:	0613      	lsls	r3, r2, #24
    36da:	d5ba      	bpl.n	3652 <__swsetup_r+0x3e>
    36dc:	2340      	movs	r3, #64	; 0x40
    36de:	4313      	orrs	r3, r2
    36e0:	81a3      	strh	r3, [r4, #12]
    36e2:	3801      	subs	r0, #1
    36e4:	e7b5      	b.n	3652 <__swsetup_r+0x3e>
    36e6:	0792      	lsls	r2, r2, #30
    36e8:	d400      	bmi.n	36ec <__swsetup_r+0xd8>
    36ea:	6963      	ldr	r3, [r4, #20]
    36ec:	60a3      	str	r3, [r4, #8]
    36ee:	e7ed      	b.n	36cc <__swsetup_r+0xb8>
    36f0:	2000000c 	.word	0x2000000c
    36f4:	000045ec 	.word	0x000045ec
    36f8:	0000460c 	.word	0x0000460c
    36fc:	000045cc 	.word	0x000045cc

00003700 <__sflush_r>:
    3700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3702:	898a      	ldrh	r2, [r1, #12]
    3704:	0005      	movs	r5, r0
    3706:	000c      	movs	r4, r1
    3708:	0713      	lsls	r3, r2, #28
    370a:	d460      	bmi.n	37ce <__sflush_r+0xce>
    370c:	684b      	ldr	r3, [r1, #4]
    370e:	2b00      	cmp	r3, #0
    3710:	dc04      	bgt.n	371c <__sflush_r+0x1c>
    3712:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3714:	2b00      	cmp	r3, #0
    3716:	dc01      	bgt.n	371c <__sflush_r+0x1c>
    3718:	2000      	movs	r0, #0
    371a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    371c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    371e:	2f00      	cmp	r7, #0
    3720:	d0fa      	beq.n	3718 <__sflush_r+0x18>
    3722:	2300      	movs	r3, #0
    3724:	682e      	ldr	r6, [r5, #0]
    3726:	602b      	str	r3, [r5, #0]
    3728:	2380      	movs	r3, #128	; 0x80
    372a:	015b      	lsls	r3, r3, #5
    372c:	401a      	ands	r2, r3
    372e:	d034      	beq.n	379a <__sflush_r+0x9a>
    3730:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3732:	89a3      	ldrh	r3, [r4, #12]
    3734:	075b      	lsls	r3, r3, #29
    3736:	d506      	bpl.n	3746 <__sflush_r+0x46>
    3738:	6863      	ldr	r3, [r4, #4]
    373a:	1ac0      	subs	r0, r0, r3
    373c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    373e:	2b00      	cmp	r3, #0
    3740:	d001      	beq.n	3746 <__sflush_r+0x46>
    3742:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3744:	1ac0      	subs	r0, r0, r3
    3746:	0002      	movs	r2, r0
    3748:	6a21      	ldr	r1, [r4, #32]
    374a:	2300      	movs	r3, #0
    374c:	0028      	movs	r0, r5
    374e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3750:	47b8      	blx	r7
    3752:	89a1      	ldrh	r1, [r4, #12]
    3754:	1c43      	adds	r3, r0, #1
    3756:	d106      	bne.n	3766 <__sflush_r+0x66>
    3758:	682b      	ldr	r3, [r5, #0]
    375a:	2b1d      	cmp	r3, #29
    375c:	d831      	bhi.n	37c2 <__sflush_r+0xc2>
    375e:	4a2c      	ldr	r2, [pc, #176]	; (3810 <__sflush_r+0x110>)
    3760:	40da      	lsrs	r2, r3
    3762:	07d3      	lsls	r3, r2, #31
    3764:	d52d      	bpl.n	37c2 <__sflush_r+0xc2>
    3766:	2300      	movs	r3, #0
    3768:	6063      	str	r3, [r4, #4]
    376a:	6923      	ldr	r3, [r4, #16]
    376c:	6023      	str	r3, [r4, #0]
    376e:	04cb      	lsls	r3, r1, #19
    3770:	d505      	bpl.n	377e <__sflush_r+0x7e>
    3772:	1c43      	adds	r3, r0, #1
    3774:	d102      	bne.n	377c <__sflush_r+0x7c>
    3776:	682b      	ldr	r3, [r5, #0]
    3778:	2b00      	cmp	r3, #0
    377a:	d100      	bne.n	377e <__sflush_r+0x7e>
    377c:	6560      	str	r0, [r4, #84]	; 0x54
    377e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3780:	602e      	str	r6, [r5, #0]
    3782:	2900      	cmp	r1, #0
    3784:	d0c8      	beq.n	3718 <__sflush_r+0x18>
    3786:	0023      	movs	r3, r4
    3788:	3344      	adds	r3, #68	; 0x44
    378a:	4299      	cmp	r1, r3
    378c:	d002      	beq.n	3794 <__sflush_r+0x94>
    378e:	0028      	movs	r0, r5
    3790:	f000 f9b4 	bl	3afc <_free_r>
    3794:	2000      	movs	r0, #0
    3796:	6360      	str	r0, [r4, #52]	; 0x34
    3798:	e7bf      	b.n	371a <__sflush_r+0x1a>
    379a:	2301      	movs	r3, #1
    379c:	6a21      	ldr	r1, [r4, #32]
    379e:	0028      	movs	r0, r5
    37a0:	47b8      	blx	r7
    37a2:	1c43      	adds	r3, r0, #1
    37a4:	d1c5      	bne.n	3732 <__sflush_r+0x32>
    37a6:	682b      	ldr	r3, [r5, #0]
    37a8:	2b00      	cmp	r3, #0
    37aa:	d0c2      	beq.n	3732 <__sflush_r+0x32>
    37ac:	2b1d      	cmp	r3, #29
    37ae:	d001      	beq.n	37b4 <__sflush_r+0xb4>
    37b0:	2b16      	cmp	r3, #22
    37b2:	d101      	bne.n	37b8 <__sflush_r+0xb8>
    37b4:	602e      	str	r6, [r5, #0]
    37b6:	e7af      	b.n	3718 <__sflush_r+0x18>
    37b8:	2340      	movs	r3, #64	; 0x40
    37ba:	89a2      	ldrh	r2, [r4, #12]
    37bc:	4313      	orrs	r3, r2
    37be:	81a3      	strh	r3, [r4, #12]
    37c0:	e7ab      	b.n	371a <__sflush_r+0x1a>
    37c2:	2340      	movs	r3, #64	; 0x40
    37c4:	430b      	orrs	r3, r1
    37c6:	2001      	movs	r0, #1
    37c8:	81a3      	strh	r3, [r4, #12]
    37ca:	4240      	negs	r0, r0
    37cc:	e7a5      	b.n	371a <__sflush_r+0x1a>
    37ce:	690f      	ldr	r7, [r1, #16]
    37d0:	2f00      	cmp	r7, #0
    37d2:	d0a1      	beq.n	3718 <__sflush_r+0x18>
    37d4:	680b      	ldr	r3, [r1, #0]
    37d6:	600f      	str	r7, [r1, #0]
    37d8:	1bdb      	subs	r3, r3, r7
    37da:	9301      	str	r3, [sp, #4]
    37dc:	2300      	movs	r3, #0
    37de:	0792      	lsls	r2, r2, #30
    37e0:	d100      	bne.n	37e4 <__sflush_r+0xe4>
    37e2:	694b      	ldr	r3, [r1, #20]
    37e4:	60a3      	str	r3, [r4, #8]
    37e6:	9b01      	ldr	r3, [sp, #4]
    37e8:	2b00      	cmp	r3, #0
    37ea:	dc00      	bgt.n	37ee <__sflush_r+0xee>
    37ec:	e794      	b.n	3718 <__sflush_r+0x18>
    37ee:	9b01      	ldr	r3, [sp, #4]
    37f0:	003a      	movs	r2, r7
    37f2:	6a21      	ldr	r1, [r4, #32]
    37f4:	0028      	movs	r0, r5
    37f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    37f8:	47b0      	blx	r6
    37fa:	2800      	cmp	r0, #0
    37fc:	dc03      	bgt.n	3806 <__sflush_r+0x106>
    37fe:	2340      	movs	r3, #64	; 0x40
    3800:	89a2      	ldrh	r2, [r4, #12]
    3802:	4313      	orrs	r3, r2
    3804:	e7df      	b.n	37c6 <__sflush_r+0xc6>
    3806:	9b01      	ldr	r3, [sp, #4]
    3808:	183f      	adds	r7, r7, r0
    380a:	1a1b      	subs	r3, r3, r0
    380c:	9301      	str	r3, [sp, #4]
    380e:	e7ea      	b.n	37e6 <__sflush_r+0xe6>
    3810:	20400001 	.word	0x20400001

00003814 <_fflush_r>:
    3814:	690b      	ldr	r3, [r1, #16]
    3816:	b570      	push	{r4, r5, r6, lr}
    3818:	0005      	movs	r5, r0
    381a:	000c      	movs	r4, r1
    381c:	2b00      	cmp	r3, #0
    381e:	d101      	bne.n	3824 <_fflush_r+0x10>
    3820:	2000      	movs	r0, #0
    3822:	bd70      	pop	{r4, r5, r6, pc}
    3824:	2800      	cmp	r0, #0
    3826:	d004      	beq.n	3832 <_fflush_r+0x1e>
    3828:	6983      	ldr	r3, [r0, #24]
    382a:	2b00      	cmp	r3, #0
    382c:	d101      	bne.n	3832 <_fflush_r+0x1e>
    382e:	f000 f85f 	bl	38f0 <__sinit>
    3832:	4b0b      	ldr	r3, [pc, #44]	; (3860 <_fflush_r+0x4c>)
    3834:	429c      	cmp	r4, r3
    3836:	d109      	bne.n	384c <_fflush_r+0x38>
    3838:	686c      	ldr	r4, [r5, #4]
    383a:	220c      	movs	r2, #12
    383c:	5ea3      	ldrsh	r3, [r4, r2]
    383e:	2b00      	cmp	r3, #0
    3840:	d0ee      	beq.n	3820 <_fflush_r+0xc>
    3842:	0021      	movs	r1, r4
    3844:	0028      	movs	r0, r5
    3846:	f7ff ff5b 	bl	3700 <__sflush_r>
    384a:	e7ea      	b.n	3822 <_fflush_r+0xe>
    384c:	4b05      	ldr	r3, [pc, #20]	; (3864 <_fflush_r+0x50>)
    384e:	429c      	cmp	r4, r3
    3850:	d101      	bne.n	3856 <_fflush_r+0x42>
    3852:	68ac      	ldr	r4, [r5, #8]
    3854:	e7f1      	b.n	383a <_fflush_r+0x26>
    3856:	4b04      	ldr	r3, [pc, #16]	; (3868 <_fflush_r+0x54>)
    3858:	429c      	cmp	r4, r3
    385a:	d1ee      	bne.n	383a <_fflush_r+0x26>
    385c:	68ec      	ldr	r4, [r5, #12]
    385e:	e7ec      	b.n	383a <_fflush_r+0x26>
    3860:	000045ec 	.word	0x000045ec
    3864:	0000460c 	.word	0x0000460c
    3868:	000045cc 	.word	0x000045cc

0000386c <_cleanup_r>:
    386c:	b510      	push	{r4, lr}
    386e:	4902      	ldr	r1, [pc, #8]	; (3878 <_cleanup_r+0xc>)
    3870:	f000 f8b2 	bl	39d8 <_fwalk_reent>
    3874:	bd10      	pop	{r4, pc}
    3876:	46c0      	nop			; (mov r8, r8)
    3878:	00003815 	.word	0x00003815

0000387c <std.isra.0>:
    387c:	2300      	movs	r3, #0
    387e:	b510      	push	{r4, lr}
    3880:	0004      	movs	r4, r0
    3882:	6003      	str	r3, [r0, #0]
    3884:	6043      	str	r3, [r0, #4]
    3886:	6083      	str	r3, [r0, #8]
    3888:	8181      	strh	r1, [r0, #12]
    388a:	6643      	str	r3, [r0, #100]	; 0x64
    388c:	81c2      	strh	r2, [r0, #14]
    388e:	6103      	str	r3, [r0, #16]
    3890:	6143      	str	r3, [r0, #20]
    3892:	6183      	str	r3, [r0, #24]
    3894:	0019      	movs	r1, r3
    3896:	2208      	movs	r2, #8
    3898:	305c      	adds	r0, #92	; 0x5c
    389a:	f7ff fd22 	bl	32e2 <memset>
    389e:	4b05      	ldr	r3, [pc, #20]	; (38b4 <std.isra.0+0x38>)
    38a0:	6224      	str	r4, [r4, #32]
    38a2:	6263      	str	r3, [r4, #36]	; 0x24
    38a4:	4b04      	ldr	r3, [pc, #16]	; (38b8 <std.isra.0+0x3c>)
    38a6:	62a3      	str	r3, [r4, #40]	; 0x28
    38a8:	4b04      	ldr	r3, [pc, #16]	; (38bc <std.isra.0+0x40>)
    38aa:	62e3      	str	r3, [r4, #44]	; 0x2c
    38ac:	4b04      	ldr	r3, [pc, #16]	; (38c0 <std.isra.0+0x44>)
    38ae:	6323      	str	r3, [r4, #48]	; 0x30
    38b0:	bd10      	pop	{r4, pc}
    38b2:	46c0      	nop			; (mov r8, r8)
    38b4:	00004209 	.word	0x00004209
    38b8:	00004231 	.word	0x00004231
    38bc:	00004269 	.word	0x00004269
    38c0:	00004295 	.word	0x00004295

000038c4 <__sfmoreglue>:
    38c4:	b570      	push	{r4, r5, r6, lr}
    38c6:	2568      	movs	r5, #104	; 0x68
    38c8:	1e4a      	subs	r2, r1, #1
    38ca:	4355      	muls	r5, r2
    38cc:	000e      	movs	r6, r1
    38ce:	0029      	movs	r1, r5
    38d0:	3174      	adds	r1, #116	; 0x74
    38d2:	f000 f95d 	bl	3b90 <_malloc_r>
    38d6:	1e04      	subs	r4, r0, #0
    38d8:	d008      	beq.n	38ec <__sfmoreglue+0x28>
    38da:	2100      	movs	r1, #0
    38dc:	002a      	movs	r2, r5
    38de:	6001      	str	r1, [r0, #0]
    38e0:	6046      	str	r6, [r0, #4]
    38e2:	300c      	adds	r0, #12
    38e4:	60a0      	str	r0, [r4, #8]
    38e6:	3268      	adds	r2, #104	; 0x68
    38e8:	f7ff fcfb 	bl	32e2 <memset>
    38ec:	0020      	movs	r0, r4
    38ee:	bd70      	pop	{r4, r5, r6, pc}

000038f0 <__sinit>:
    38f0:	6983      	ldr	r3, [r0, #24]
    38f2:	b513      	push	{r0, r1, r4, lr}
    38f4:	0004      	movs	r4, r0
    38f6:	2b00      	cmp	r3, #0
    38f8:	d128      	bne.n	394c <__sinit+0x5c>
    38fa:	6483      	str	r3, [r0, #72]	; 0x48
    38fc:	64c3      	str	r3, [r0, #76]	; 0x4c
    38fe:	6503      	str	r3, [r0, #80]	; 0x50
    3900:	4b13      	ldr	r3, [pc, #76]	; (3950 <__sinit+0x60>)
    3902:	4a14      	ldr	r2, [pc, #80]	; (3954 <__sinit+0x64>)
    3904:	681b      	ldr	r3, [r3, #0]
    3906:	6282      	str	r2, [r0, #40]	; 0x28
    3908:	9301      	str	r3, [sp, #4]
    390a:	4298      	cmp	r0, r3
    390c:	d101      	bne.n	3912 <__sinit+0x22>
    390e:	2301      	movs	r3, #1
    3910:	6183      	str	r3, [r0, #24]
    3912:	0020      	movs	r0, r4
    3914:	f000 f820 	bl	3958 <__sfp>
    3918:	6060      	str	r0, [r4, #4]
    391a:	0020      	movs	r0, r4
    391c:	f000 f81c 	bl	3958 <__sfp>
    3920:	60a0      	str	r0, [r4, #8]
    3922:	0020      	movs	r0, r4
    3924:	f000 f818 	bl	3958 <__sfp>
    3928:	2200      	movs	r2, #0
    392a:	60e0      	str	r0, [r4, #12]
    392c:	2104      	movs	r1, #4
    392e:	6860      	ldr	r0, [r4, #4]
    3930:	f7ff ffa4 	bl	387c <std.isra.0>
    3934:	2201      	movs	r2, #1
    3936:	2109      	movs	r1, #9
    3938:	68a0      	ldr	r0, [r4, #8]
    393a:	f7ff ff9f 	bl	387c <std.isra.0>
    393e:	2202      	movs	r2, #2
    3940:	2112      	movs	r1, #18
    3942:	68e0      	ldr	r0, [r4, #12]
    3944:	f7ff ff9a 	bl	387c <std.isra.0>
    3948:	2301      	movs	r3, #1
    394a:	61a3      	str	r3, [r4, #24]
    394c:	bd13      	pop	{r0, r1, r4, pc}
    394e:	46c0      	nop			; (mov r8, r8)
    3950:	000045c8 	.word	0x000045c8
    3954:	0000386d 	.word	0x0000386d

00003958 <__sfp>:
    3958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    395a:	4b1e      	ldr	r3, [pc, #120]	; (39d4 <__sfp+0x7c>)
    395c:	0007      	movs	r7, r0
    395e:	681e      	ldr	r6, [r3, #0]
    3960:	69b3      	ldr	r3, [r6, #24]
    3962:	2b00      	cmp	r3, #0
    3964:	d102      	bne.n	396c <__sfp+0x14>
    3966:	0030      	movs	r0, r6
    3968:	f7ff ffc2 	bl	38f0 <__sinit>
    396c:	3648      	adds	r6, #72	; 0x48
    396e:	68b4      	ldr	r4, [r6, #8]
    3970:	6873      	ldr	r3, [r6, #4]
    3972:	3b01      	subs	r3, #1
    3974:	d504      	bpl.n	3980 <__sfp+0x28>
    3976:	6833      	ldr	r3, [r6, #0]
    3978:	2b00      	cmp	r3, #0
    397a:	d007      	beq.n	398c <__sfp+0x34>
    397c:	6836      	ldr	r6, [r6, #0]
    397e:	e7f6      	b.n	396e <__sfp+0x16>
    3980:	220c      	movs	r2, #12
    3982:	5ea5      	ldrsh	r5, [r4, r2]
    3984:	2d00      	cmp	r5, #0
    3986:	d00d      	beq.n	39a4 <__sfp+0x4c>
    3988:	3468      	adds	r4, #104	; 0x68
    398a:	e7f2      	b.n	3972 <__sfp+0x1a>
    398c:	2104      	movs	r1, #4
    398e:	0038      	movs	r0, r7
    3990:	f7ff ff98 	bl	38c4 <__sfmoreglue>
    3994:	6030      	str	r0, [r6, #0]
    3996:	2800      	cmp	r0, #0
    3998:	d1f0      	bne.n	397c <__sfp+0x24>
    399a:	230c      	movs	r3, #12
    399c:	0004      	movs	r4, r0
    399e:	603b      	str	r3, [r7, #0]
    39a0:	0020      	movs	r0, r4
    39a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    39a4:	2301      	movs	r3, #1
    39a6:	0020      	movs	r0, r4
    39a8:	425b      	negs	r3, r3
    39aa:	81e3      	strh	r3, [r4, #14]
    39ac:	3302      	adds	r3, #2
    39ae:	81a3      	strh	r3, [r4, #12]
    39b0:	6665      	str	r5, [r4, #100]	; 0x64
    39b2:	6025      	str	r5, [r4, #0]
    39b4:	60a5      	str	r5, [r4, #8]
    39b6:	6065      	str	r5, [r4, #4]
    39b8:	6125      	str	r5, [r4, #16]
    39ba:	6165      	str	r5, [r4, #20]
    39bc:	61a5      	str	r5, [r4, #24]
    39be:	2208      	movs	r2, #8
    39c0:	0029      	movs	r1, r5
    39c2:	305c      	adds	r0, #92	; 0x5c
    39c4:	f7ff fc8d 	bl	32e2 <memset>
    39c8:	6365      	str	r5, [r4, #52]	; 0x34
    39ca:	63a5      	str	r5, [r4, #56]	; 0x38
    39cc:	64a5      	str	r5, [r4, #72]	; 0x48
    39ce:	64e5      	str	r5, [r4, #76]	; 0x4c
    39d0:	e7e6      	b.n	39a0 <__sfp+0x48>
    39d2:	46c0      	nop			; (mov r8, r8)
    39d4:	000045c8 	.word	0x000045c8

000039d8 <_fwalk_reent>:
    39d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    39da:	0004      	movs	r4, r0
    39dc:	0007      	movs	r7, r0
    39de:	2600      	movs	r6, #0
    39e0:	9101      	str	r1, [sp, #4]
    39e2:	3448      	adds	r4, #72	; 0x48
    39e4:	2c00      	cmp	r4, #0
    39e6:	d101      	bne.n	39ec <_fwalk_reent+0x14>
    39e8:	0030      	movs	r0, r6
    39ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    39ec:	6863      	ldr	r3, [r4, #4]
    39ee:	68a5      	ldr	r5, [r4, #8]
    39f0:	9300      	str	r3, [sp, #0]
    39f2:	9b00      	ldr	r3, [sp, #0]
    39f4:	3b01      	subs	r3, #1
    39f6:	9300      	str	r3, [sp, #0]
    39f8:	d501      	bpl.n	39fe <_fwalk_reent+0x26>
    39fa:	6824      	ldr	r4, [r4, #0]
    39fc:	e7f2      	b.n	39e4 <_fwalk_reent+0xc>
    39fe:	89ab      	ldrh	r3, [r5, #12]
    3a00:	2b01      	cmp	r3, #1
    3a02:	d908      	bls.n	3a16 <_fwalk_reent+0x3e>
    3a04:	220e      	movs	r2, #14
    3a06:	5eab      	ldrsh	r3, [r5, r2]
    3a08:	3301      	adds	r3, #1
    3a0a:	d004      	beq.n	3a16 <_fwalk_reent+0x3e>
    3a0c:	0029      	movs	r1, r5
    3a0e:	0038      	movs	r0, r7
    3a10:	9b01      	ldr	r3, [sp, #4]
    3a12:	4798      	blx	r3
    3a14:	4306      	orrs	r6, r0
    3a16:	3568      	adds	r5, #104	; 0x68
    3a18:	e7eb      	b.n	39f2 <_fwalk_reent+0x1a>
	...

00003a1c <__swhatbuf_r>:
    3a1c:	b570      	push	{r4, r5, r6, lr}
    3a1e:	000e      	movs	r6, r1
    3a20:	001d      	movs	r5, r3
    3a22:	230e      	movs	r3, #14
    3a24:	5ec9      	ldrsh	r1, [r1, r3]
    3a26:	b090      	sub	sp, #64	; 0x40
    3a28:	0014      	movs	r4, r2
    3a2a:	2900      	cmp	r1, #0
    3a2c:	da07      	bge.n	3a3e <__swhatbuf_r+0x22>
    3a2e:	2300      	movs	r3, #0
    3a30:	602b      	str	r3, [r5, #0]
    3a32:	89b3      	ldrh	r3, [r6, #12]
    3a34:	061b      	lsls	r3, r3, #24
    3a36:	d411      	bmi.n	3a5c <__swhatbuf_r+0x40>
    3a38:	2380      	movs	r3, #128	; 0x80
    3a3a:	00db      	lsls	r3, r3, #3
    3a3c:	e00f      	b.n	3a5e <__swhatbuf_r+0x42>
    3a3e:	aa01      	add	r2, sp, #4
    3a40:	f000 fc54 	bl	42ec <_fstat_r>
    3a44:	2800      	cmp	r0, #0
    3a46:	dbf2      	blt.n	3a2e <__swhatbuf_r+0x12>
    3a48:	22f0      	movs	r2, #240	; 0xf0
    3a4a:	9b02      	ldr	r3, [sp, #8]
    3a4c:	0212      	lsls	r2, r2, #8
    3a4e:	4013      	ands	r3, r2
    3a50:	4a05      	ldr	r2, [pc, #20]	; (3a68 <__swhatbuf_r+0x4c>)
    3a52:	189b      	adds	r3, r3, r2
    3a54:	425a      	negs	r2, r3
    3a56:	4153      	adcs	r3, r2
    3a58:	602b      	str	r3, [r5, #0]
    3a5a:	e7ed      	b.n	3a38 <__swhatbuf_r+0x1c>
    3a5c:	2340      	movs	r3, #64	; 0x40
    3a5e:	2000      	movs	r0, #0
    3a60:	6023      	str	r3, [r4, #0]
    3a62:	b010      	add	sp, #64	; 0x40
    3a64:	bd70      	pop	{r4, r5, r6, pc}
    3a66:	46c0      	nop			; (mov r8, r8)
    3a68:	ffffe000 	.word	0xffffe000

00003a6c <__smakebuf_r>:
    3a6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3a6e:	2602      	movs	r6, #2
    3a70:	898b      	ldrh	r3, [r1, #12]
    3a72:	0005      	movs	r5, r0
    3a74:	000c      	movs	r4, r1
    3a76:	4233      	tst	r3, r6
    3a78:	d006      	beq.n	3a88 <__smakebuf_r+0x1c>
    3a7a:	0023      	movs	r3, r4
    3a7c:	3347      	adds	r3, #71	; 0x47
    3a7e:	6023      	str	r3, [r4, #0]
    3a80:	6123      	str	r3, [r4, #16]
    3a82:	2301      	movs	r3, #1
    3a84:	6163      	str	r3, [r4, #20]
    3a86:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3a88:	ab01      	add	r3, sp, #4
    3a8a:	466a      	mov	r2, sp
    3a8c:	f7ff ffc6 	bl	3a1c <__swhatbuf_r>
    3a90:	9900      	ldr	r1, [sp, #0]
    3a92:	0007      	movs	r7, r0
    3a94:	0028      	movs	r0, r5
    3a96:	f000 f87b 	bl	3b90 <_malloc_r>
    3a9a:	2800      	cmp	r0, #0
    3a9c:	d106      	bne.n	3aac <__smakebuf_r+0x40>
    3a9e:	220c      	movs	r2, #12
    3aa0:	5ea3      	ldrsh	r3, [r4, r2]
    3aa2:	059a      	lsls	r2, r3, #22
    3aa4:	d4ef      	bmi.n	3a86 <__smakebuf_r+0x1a>
    3aa6:	431e      	orrs	r6, r3
    3aa8:	81a6      	strh	r6, [r4, #12]
    3aaa:	e7e6      	b.n	3a7a <__smakebuf_r+0xe>
    3aac:	4b0d      	ldr	r3, [pc, #52]	; (3ae4 <__smakebuf_r+0x78>)
    3aae:	62ab      	str	r3, [r5, #40]	; 0x28
    3ab0:	2380      	movs	r3, #128	; 0x80
    3ab2:	89a2      	ldrh	r2, [r4, #12]
    3ab4:	6020      	str	r0, [r4, #0]
    3ab6:	4313      	orrs	r3, r2
    3ab8:	81a3      	strh	r3, [r4, #12]
    3aba:	9b00      	ldr	r3, [sp, #0]
    3abc:	6120      	str	r0, [r4, #16]
    3abe:	6163      	str	r3, [r4, #20]
    3ac0:	9b01      	ldr	r3, [sp, #4]
    3ac2:	2b00      	cmp	r3, #0
    3ac4:	d00a      	beq.n	3adc <__smakebuf_r+0x70>
    3ac6:	230e      	movs	r3, #14
    3ac8:	5ee1      	ldrsh	r1, [r4, r3]
    3aca:	0028      	movs	r0, r5
    3acc:	f000 fc20 	bl	4310 <_isatty_r>
    3ad0:	2800      	cmp	r0, #0
    3ad2:	d003      	beq.n	3adc <__smakebuf_r+0x70>
    3ad4:	2301      	movs	r3, #1
    3ad6:	89a2      	ldrh	r2, [r4, #12]
    3ad8:	4313      	orrs	r3, r2
    3ada:	81a3      	strh	r3, [r4, #12]
    3adc:	89a0      	ldrh	r0, [r4, #12]
    3ade:	4338      	orrs	r0, r7
    3ae0:	81a0      	strh	r0, [r4, #12]
    3ae2:	e7d0      	b.n	3a86 <__smakebuf_r+0x1a>
    3ae4:	0000386d 	.word	0x0000386d

00003ae8 <malloc>:
    3ae8:	b510      	push	{r4, lr}
    3aea:	4b03      	ldr	r3, [pc, #12]	; (3af8 <malloc+0x10>)
    3aec:	0001      	movs	r1, r0
    3aee:	6818      	ldr	r0, [r3, #0]
    3af0:	f000 f84e 	bl	3b90 <_malloc_r>
    3af4:	bd10      	pop	{r4, pc}
    3af6:	46c0      	nop			; (mov r8, r8)
    3af8:	2000000c 	.word	0x2000000c

00003afc <_free_r>:
    3afc:	b570      	push	{r4, r5, r6, lr}
    3afe:	0005      	movs	r5, r0
    3b00:	2900      	cmp	r1, #0
    3b02:	d010      	beq.n	3b26 <_free_r+0x2a>
    3b04:	1f0c      	subs	r4, r1, #4
    3b06:	6823      	ldr	r3, [r4, #0]
    3b08:	2b00      	cmp	r3, #0
    3b0a:	da00      	bge.n	3b0e <_free_r+0x12>
    3b0c:	18e4      	adds	r4, r4, r3
    3b0e:	0028      	movs	r0, r5
    3b10:	f000 fc2f 	bl	4372 <__malloc_lock>
    3b14:	4a1d      	ldr	r2, [pc, #116]	; (3b8c <_free_r+0x90>)
    3b16:	6813      	ldr	r3, [r2, #0]
    3b18:	2b00      	cmp	r3, #0
    3b1a:	d105      	bne.n	3b28 <_free_r+0x2c>
    3b1c:	6063      	str	r3, [r4, #4]
    3b1e:	6014      	str	r4, [r2, #0]
    3b20:	0028      	movs	r0, r5
    3b22:	f000 fc27 	bl	4374 <__malloc_unlock>
    3b26:	bd70      	pop	{r4, r5, r6, pc}
    3b28:	42a3      	cmp	r3, r4
    3b2a:	d909      	bls.n	3b40 <_free_r+0x44>
    3b2c:	6821      	ldr	r1, [r4, #0]
    3b2e:	1860      	adds	r0, r4, r1
    3b30:	4283      	cmp	r3, r0
    3b32:	d1f3      	bne.n	3b1c <_free_r+0x20>
    3b34:	6818      	ldr	r0, [r3, #0]
    3b36:	685b      	ldr	r3, [r3, #4]
    3b38:	1841      	adds	r1, r0, r1
    3b3a:	6021      	str	r1, [r4, #0]
    3b3c:	e7ee      	b.n	3b1c <_free_r+0x20>
    3b3e:	0013      	movs	r3, r2
    3b40:	685a      	ldr	r2, [r3, #4]
    3b42:	2a00      	cmp	r2, #0
    3b44:	d001      	beq.n	3b4a <_free_r+0x4e>
    3b46:	42a2      	cmp	r2, r4
    3b48:	d9f9      	bls.n	3b3e <_free_r+0x42>
    3b4a:	6819      	ldr	r1, [r3, #0]
    3b4c:	1858      	adds	r0, r3, r1
    3b4e:	42a0      	cmp	r0, r4
    3b50:	d10b      	bne.n	3b6a <_free_r+0x6e>
    3b52:	6820      	ldr	r0, [r4, #0]
    3b54:	1809      	adds	r1, r1, r0
    3b56:	1858      	adds	r0, r3, r1
    3b58:	6019      	str	r1, [r3, #0]
    3b5a:	4282      	cmp	r2, r0
    3b5c:	d1e0      	bne.n	3b20 <_free_r+0x24>
    3b5e:	6810      	ldr	r0, [r2, #0]
    3b60:	6852      	ldr	r2, [r2, #4]
    3b62:	1841      	adds	r1, r0, r1
    3b64:	6019      	str	r1, [r3, #0]
    3b66:	605a      	str	r2, [r3, #4]
    3b68:	e7da      	b.n	3b20 <_free_r+0x24>
    3b6a:	42a0      	cmp	r0, r4
    3b6c:	d902      	bls.n	3b74 <_free_r+0x78>
    3b6e:	230c      	movs	r3, #12
    3b70:	602b      	str	r3, [r5, #0]
    3b72:	e7d5      	b.n	3b20 <_free_r+0x24>
    3b74:	6821      	ldr	r1, [r4, #0]
    3b76:	1860      	adds	r0, r4, r1
    3b78:	4282      	cmp	r2, r0
    3b7a:	d103      	bne.n	3b84 <_free_r+0x88>
    3b7c:	6810      	ldr	r0, [r2, #0]
    3b7e:	6852      	ldr	r2, [r2, #4]
    3b80:	1841      	adds	r1, r0, r1
    3b82:	6021      	str	r1, [r4, #0]
    3b84:	6062      	str	r2, [r4, #4]
    3b86:	605c      	str	r4, [r3, #4]
    3b88:	e7ca      	b.n	3b20 <_free_r+0x24>
    3b8a:	46c0      	nop			; (mov r8, r8)
    3b8c:	200000d4 	.word	0x200000d4

00003b90 <_malloc_r>:
    3b90:	2303      	movs	r3, #3
    3b92:	b570      	push	{r4, r5, r6, lr}
    3b94:	1ccd      	adds	r5, r1, #3
    3b96:	439d      	bics	r5, r3
    3b98:	3508      	adds	r5, #8
    3b9a:	0006      	movs	r6, r0
    3b9c:	2d0c      	cmp	r5, #12
    3b9e:	d21e      	bcs.n	3bde <_malloc_r+0x4e>
    3ba0:	250c      	movs	r5, #12
    3ba2:	42a9      	cmp	r1, r5
    3ba4:	d81d      	bhi.n	3be2 <_malloc_r+0x52>
    3ba6:	0030      	movs	r0, r6
    3ba8:	f000 fbe3 	bl	4372 <__malloc_lock>
    3bac:	4a25      	ldr	r2, [pc, #148]	; (3c44 <_malloc_r+0xb4>)
    3bae:	6814      	ldr	r4, [r2, #0]
    3bb0:	0021      	movs	r1, r4
    3bb2:	2900      	cmp	r1, #0
    3bb4:	d119      	bne.n	3bea <_malloc_r+0x5a>
    3bb6:	4c24      	ldr	r4, [pc, #144]	; (3c48 <_malloc_r+0xb8>)
    3bb8:	6823      	ldr	r3, [r4, #0]
    3bba:	2b00      	cmp	r3, #0
    3bbc:	d103      	bne.n	3bc6 <_malloc_r+0x36>
    3bbe:	0030      	movs	r0, r6
    3bc0:	f000 fb10 	bl	41e4 <_sbrk_r>
    3bc4:	6020      	str	r0, [r4, #0]
    3bc6:	0029      	movs	r1, r5
    3bc8:	0030      	movs	r0, r6
    3bca:	f000 fb0b 	bl	41e4 <_sbrk_r>
    3bce:	1c43      	adds	r3, r0, #1
    3bd0:	d12c      	bne.n	3c2c <_malloc_r+0x9c>
    3bd2:	230c      	movs	r3, #12
    3bd4:	0030      	movs	r0, r6
    3bd6:	6033      	str	r3, [r6, #0]
    3bd8:	f000 fbcc 	bl	4374 <__malloc_unlock>
    3bdc:	e003      	b.n	3be6 <_malloc_r+0x56>
    3bde:	2d00      	cmp	r5, #0
    3be0:	dadf      	bge.n	3ba2 <_malloc_r+0x12>
    3be2:	230c      	movs	r3, #12
    3be4:	6033      	str	r3, [r6, #0]
    3be6:	2000      	movs	r0, #0
    3be8:	bd70      	pop	{r4, r5, r6, pc}
    3bea:	680b      	ldr	r3, [r1, #0]
    3bec:	1b5b      	subs	r3, r3, r5
    3bee:	d41a      	bmi.n	3c26 <_malloc_r+0x96>
    3bf0:	2b0b      	cmp	r3, #11
    3bf2:	d903      	bls.n	3bfc <_malloc_r+0x6c>
    3bf4:	600b      	str	r3, [r1, #0]
    3bf6:	18cc      	adds	r4, r1, r3
    3bf8:	6025      	str	r5, [r4, #0]
    3bfa:	e003      	b.n	3c04 <_malloc_r+0x74>
    3bfc:	428c      	cmp	r4, r1
    3bfe:	d10e      	bne.n	3c1e <_malloc_r+0x8e>
    3c00:	6863      	ldr	r3, [r4, #4]
    3c02:	6013      	str	r3, [r2, #0]
    3c04:	0030      	movs	r0, r6
    3c06:	f000 fbb5 	bl	4374 <__malloc_unlock>
    3c0a:	0020      	movs	r0, r4
    3c0c:	2207      	movs	r2, #7
    3c0e:	300b      	adds	r0, #11
    3c10:	1d23      	adds	r3, r4, #4
    3c12:	4390      	bics	r0, r2
    3c14:	1ac3      	subs	r3, r0, r3
    3c16:	d0e7      	beq.n	3be8 <_malloc_r+0x58>
    3c18:	425a      	negs	r2, r3
    3c1a:	50e2      	str	r2, [r4, r3]
    3c1c:	e7e4      	b.n	3be8 <_malloc_r+0x58>
    3c1e:	684b      	ldr	r3, [r1, #4]
    3c20:	6063      	str	r3, [r4, #4]
    3c22:	000c      	movs	r4, r1
    3c24:	e7ee      	b.n	3c04 <_malloc_r+0x74>
    3c26:	000c      	movs	r4, r1
    3c28:	6849      	ldr	r1, [r1, #4]
    3c2a:	e7c2      	b.n	3bb2 <_malloc_r+0x22>
    3c2c:	2303      	movs	r3, #3
    3c2e:	1cc4      	adds	r4, r0, #3
    3c30:	439c      	bics	r4, r3
    3c32:	42a0      	cmp	r0, r4
    3c34:	d0e0      	beq.n	3bf8 <_malloc_r+0x68>
    3c36:	1a21      	subs	r1, r4, r0
    3c38:	0030      	movs	r0, r6
    3c3a:	f000 fad3 	bl	41e4 <_sbrk_r>
    3c3e:	1c43      	adds	r3, r0, #1
    3c40:	d1da      	bne.n	3bf8 <_malloc_r+0x68>
    3c42:	e7c6      	b.n	3bd2 <_malloc_r+0x42>
    3c44:	200000d4 	.word	0x200000d4
    3c48:	200000d8 	.word	0x200000d8

00003c4c <__sfputc_r>:
    3c4c:	6893      	ldr	r3, [r2, #8]
    3c4e:	b510      	push	{r4, lr}
    3c50:	3b01      	subs	r3, #1
    3c52:	6093      	str	r3, [r2, #8]
    3c54:	2b00      	cmp	r3, #0
    3c56:	da05      	bge.n	3c64 <__sfputc_r+0x18>
    3c58:	6994      	ldr	r4, [r2, #24]
    3c5a:	42a3      	cmp	r3, r4
    3c5c:	db08      	blt.n	3c70 <__sfputc_r+0x24>
    3c5e:	b2cb      	uxtb	r3, r1
    3c60:	2b0a      	cmp	r3, #10
    3c62:	d005      	beq.n	3c70 <__sfputc_r+0x24>
    3c64:	6813      	ldr	r3, [r2, #0]
    3c66:	1c58      	adds	r0, r3, #1
    3c68:	6010      	str	r0, [r2, #0]
    3c6a:	7019      	strb	r1, [r3, #0]
    3c6c:	b2c8      	uxtb	r0, r1
    3c6e:	bd10      	pop	{r4, pc}
    3c70:	f7ff fc7a 	bl	3568 <__swbuf_r>
    3c74:	e7fb      	b.n	3c6e <__sfputc_r+0x22>

00003c76 <__sfputs_r>:
    3c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c78:	0006      	movs	r6, r0
    3c7a:	000f      	movs	r7, r1
    3c7c:	0014      	movs	r4, r2
    3c7e:	18d5      	adds	r5, r2, r3
    3c80:	42ac      	cmp	r4, r5
    3c82:	d101      	bne.n	3c88 <__sfputs_r+0x12>
    3c84:	2000      	movs	r0, #0
    3c86:	e007      	b.n	3c98 <__sfputs_r+0x22>
    3c88:	7821      	ldrb	r1, [r4, #0]
    3c8a:	003a      	movs	r2, r7
    3c8c:	0030      	movs	r0, r6
    3c8e:	f7ff ffdd 	bl	3c4c <__sfputc_r>
    3c92:	3401      	adds	r4, #1
    3c94:	1c43      	adds	r3, r0, #1
    3c96:	d1f3      	bne.n	3c80 <__sfputs_r+0xa>
    3c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00003c9c <_vfiprintf_r>:
    3c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c9e:	b09f      	sub	sp, #124	; 0x7c
    3ca0:	0006      	movs	r6, r0
    3ca2:	000f      	movs	r7, r1
    3ca4:	0014      	movs	r4, r2
    3ca6:	9305      	str	r3, [sp, #20]
    3ca8:	2800      	cmp	r0, #0
    3caa:	d004      	beq.n	3cb6 <_vfiprintf_r+0x1a>
    3cac:	6983      	ldr	r3, [r0, #24]
    3cae:	2b00      	cmp	r3, #0
    3cb0:	d101      	bne.n	3cb6 <_vfiprintf_r+0x1a>
    3cb2:	f7ff fe1d 	bl	38f0 <__sinit>
    3cb6:	4b7f      	ldr	r3, [pc, #508]	; (3eb4 <_vfiprintf_r+0x218>)
    3cb8:	429f      	cmp	r7, r3
    3cba:	d15c      	bne.n	3d76 <_vfiprintf_r+0xda>
    3cbc:	6877      	ldr	r7, [r6, #4]
    3cbe:	89bb      	ldrh	r3, [r7, #12]
    3cc0:	071b      	lsls	r3, r3, #28
    3cc2:	d562      	bpl.n	3d8a <_vfiprintf_r+0xee>
    3cc4:	693b      	ldr	r3, [r7, #16]
    3cc6:	2b00      	cmp	r3, #0
    3cc8:	d05f      	beq.n	3d8a <_vfiprintf_r+0xee>
    3cca:	2300      	movs	r3, #0
    3ccc:	ad06      	add	r5, sp, #24
    3cce:	616b      	str	r3, [r5, #20]
    3cd0:	3320      	adds	r3, #32
    3cd2:	766b      	strb	r3, [r5, #25]
    3cd4:	3310      	adds	r3, #16
    3cd6:	76ab      	strb	r3, [r5, #26]
    3cd8:	9402      	str	r4, [sp, #8]
    3cda:	9c02      	ldr	r4, [sp, #8]
    3cdc:	7823      	ldrb	r3, [r4, #0]
    3cde:	2b00      	cmp	r3, #0
    3ce0:	d15d      	bne.n	3d9e <_vfiprintf_r+0x102>
    3ce2:	9b02      	ldr	r3, [sp, #8]
    3ce4:	1ae3      	subs	r3, r4, r3
    3ce6:	9304      	str	r3, [sp, #16]
    3ce8:	d00d      	beq.n	3d06 <_vfiprintf_r+0x6a>
    3cea:	9b04      	ldr	r3, [sp, #16]
    3cec:	9a02      	ldr	r2, [sp, #8]
    3cee:	0039      	movs	r1, r7
    3cf0:	0030      	movs	r0, r6
    3cf2:	f7ff ffc0 	bl	3c76 <__sfputs_r>
    3cf6:	1c43      	adds	r3, r0, #1
    3cf8:	d100      	bne.n	3cfc <_vfiprintf_r+0x60>
    3cfa:	e0cc      	b.n	3e96 <_vfiprintf_r+0x1fa>
    3cfc:	696a      	ldr	r2, [r5, #20]
    3cfe:	9b04      	ldr	r3, [sp, #16]
    3d00:	4694      	mov	ip, r2
    3d02:	4463      	add	r3, ip
    3d04:	616b      	str	r3, [r5, #20]
    3d06:	7823      	ldrb	r3, [r4, #0]
    3d08:	2b00      	cmp	r3, #0
    3d0a:	d100      	bne.n	3d0e <_vfiprintf_r+0x72>
    3d0c:	e0c3      	b.n	3e96 <_vfiprintf_r+0x1fa>
    3d0e:	2201      	movs	r2, #1
    3d10:	2300      	movs	r3, #0
    3d12:	4252      	negs	r2, r2
    3d14:	606a      	str	r2, [r5, #4]
    3d16:	a902      	add	r1, sp, #8
    3d18:	3254      	adds	r2, #84	; 0x54
    3d1a:	1852      	adds	r2, r2, r1
    3d1c:	3401      	adds	r4, #1
    3d1e:	602b      	str	r3, [r5, #0]
    3d20:	60eb      	str	r3, [r5, #12]
    3d22:	60ab      	str	r3, [r5, #8]
    3d24:	7013      	strb	r3, [r2, #0]
    3d26:	65ab      	str	r3, [r5, #88]	; 0x58
    3d28:	7821      	ldrb	r1, [r4, #0]
    3d2a:	2205      	movs	r2, #5
    3d2c:	4862      	ldr	r0, [pc, #392]	; (3eb8 <_vfiprintf_r+0x21c>)
    3d2e:	f000 fb15 	bl	435c <memchr>
    3d32:	1c63      	adds	r3, r4, #1
    3d34:	469c      	mov	ip, r3
    3d36:	2800      	cmp	r0, #0
    3d38:	d135      	bne.n	3da6 <_vfiprintf_r+0x10a>
    3d3a:	6829      	ldr	r1, [r5, #0]
    3d3c:	06cb      	lsls	r3, r1, #27
    3d3e:	d504      	bpl.n	3d4a <_vfiprintf_r+0xae>
    3d40:	2353      	movs	r3, #83	; 0x53
    3d42:	aa02      	add	r2, sp, #8
    3d44:	3020      	adds	r0, #32
    3d46:	189b      	adds	r3, r3, r2
    3d48:	7018      	strb	r0, [r3, #0]
    3d4a:	070b      	lsls	r3, r1, #28
    3d4c:	d504      	bpl.n	3d58 <_vfiprintf_r+0xbc>
    3d4e:	2353      	movs	r3, #83	; 0x53
    3d50:	202b      	movs	r0, #43	; 0x2b
    3d52:	aa02      	add	r2, sp, #8
    3d54:	189b      	adds	r3, r3, r2
    3d56:	7018      	strb	r0, [r3, #0]
    3d58:	7823      	ldrb	r3, [r4, #0]
    3d5a:	2b2a      	cmp	r3, #42	; 0x2a
    3d5c:	d02c      	beq.n	3db8 <_vfiprintf_r+0x11c>
    3d5e:	2000      	movs	r0, #0
    3d60:	210a      	movs	r1, #10
    3d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3d64:	7822      	ldrb	r2, [r4, #0]
    3d66:	3a30      	subs	r2, #48	; 0x30
    3d68:	2a09      	cmp	r2, #9
    3d6a:	d800      	bhi.n	3d6e <_vfiprintf_r+0xd2>
    3d6c:	e06b      	b.n	3e46 <_vfiprintf_r+0x1aa>
    3d6e:	2800      	cmp	r0, #0
    3d70:	d02a      	beq.n	3dc8 <_vfiprintf_r+0x12c>
    3d72:	9309      	str	r3, [sp, #36]	; 0x24
    3d74:	e028      	b.n	3dc8 <_vfiprintf_r+0x12c>
    3d76:	4b51      	ldr	r3, [pc, #324]	; (3ebc <_vfiprintf_r+0x220>)
    3d78:	429f      	cmp	r7, r3
    3d7a:	d101      	bne.n	3d80 <_vfiprintf_r+0xe4>
    3d7c:	68b7      	ldr	r7, [r6, #8]
    3d7e:	e79e      	b.n	3cbe <_vfiprintf_r+0x22>
    3d80:	4b4f      	ldr	r3, [pc, #316]	; (3ec0 <_vfiprintf_r+0x224>)
    3d82:	429f      	cmp	r7, r3
    3d84:	d19b      	bne.n	3cbe <_vfiprintf_r+0x22>
    3d86:	68f7      	ldr	r7, [r6, #12]
    3d88:	e799      	b.n	3cbe <_vfiprintf_r+0x22>
    3d8a:	0039      	movs	r1, r7
    3d8c:	0030      	movs	r0, r6
    3d8e:	f7ff fc41 	bl	3614 <__swsetup_r>
    3d92:	2800      	cmp	r0, #0
    3d94:	d099      	beq.n	3cca <_vfiprintf_r+0x2e>
    3d96:	2001      	movs	r0, #1
    3d98:	4240      	negs	r0, r0
    3d9a:	b01f      	add	sp, #124	; 0x7c
    3d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d9e:	2b25      	cmp	r3, #37	; 0x25
    3da0:	d09f      	beq.n	3ce2 <_vfiprintf_r+0x46>
    3da2:	3401      	adds	r4, #1
    3da4:	e79a      	b.n	3cdc <_vfiprintf_r+0x40>
    3da6:	4b44      	ldr	r3, [pc, #272]	; (3eb8 <_vfiprintf_r+0x21c>)
    3da8:	6829      	ldr	r1, [r5, #0]
    3daa:	1ac0      	subs	r0, r0, r3
    3dac:	2301      	movs	r3, #1
    3dae:	4083      	lsls	r3, r0
    3db0:	430b      	orrs	r3, r1
    3db2:	602b      	str	r3, [r5, #0]
    3db4:	4664      	mov	r4, ip
    3db6:	e7b7      	b.n	3d28 <_vfiprintf_r+0x8c>
    3db8:	9b05      	ldr	r3, [sp, #20]
    3dba:	1d18      	adds	r0, r3, #4
    3dbc:	681b      	ldr	r3, [r3, #0]
    3dbe:	9005      	str	r0, [sp, #20]
    3dc0:	2b00      	cmp	r3, #0
    3dc2:	db3a      	blt.n	3e3a <_vfiprintf_r+0x19e>
    3dc4:	9309      	str	r3, [sp, #36]	; 0x24
    3dc6:	4664      	mov	r4, ip
    3dc8:	7823      	ldrb	r3, [r4, #0]
    3dca:	2b2e      	cmp	r3, #46	; 0x2e
    3dcc:	d10b      	bne.n	3de6 <_vfiprintf_r+0x14a>
    3dce:	7863      	ldrb	r3, [r4, #1]
    3dd0:	1c62      	adds	r2, r4, #1
    3dd2:	2b2a      	cmp	r3, #42	; 0x2a
    3dd4:	d13f      	bne.n	3e56 <_vfiprintf_r+0x1ba>
    3dd6:	9b05      	ldr	r3, [sp, #20]
    3dd8:	3402      	adds	r4, #2
    3dda:	1d1a      	adds	r2, r3, #4
    3ddc:	681b      	ldr	r3, [r3, #0]
    3dde:	9205      	str	r2, [sp, #20]
    3de0:	2b00      	cmp	r3, #0
    3de2:	db35      	blt.n	3e50 <_vfiprintf_r+0x1b4>
    3de4:	9307      	str	r3, [sp, #28]
    3de6:	7821      	ldrb	r1, [r4, #0]
    3de8:	2203      	movs	r2, #3
    3dea:	4836      	ldr	r0, [pc, #216]	; (3ec4 <_vfiprintf_r+0x228>)
    3dec:	f000 fab6 	bl	435c <memchr>
    3df0:	2800      	cmp	r0, #0
    3df2:	d007      	beq.n	3e04 <_vfiprintf_r+0x168>
    3df4:	4b33      	ldr	r3, [pc, #204]	; (3ec4 <_vfiprintf_r+0x228>)
    3df6:	682a      	ldr	r2, [r5, #0]
    3df8:	1ac0      	subs	r0, r0, r3
    3dfa:	2340      	movs	r3, #64	; 0x40
    3dfc:	4083      	lsls	r3, r0
    3dfe:	4313      	orrs	r3, r2
    3e00:	602b      	str	r3, [r5, #0]
    3e02:	3401      	adds	r4, #1
    3e04:	7821      	ldrb	r1, [r4, #0]
    3e06:	1c63      	adds	r3, r4, #1
    3e08:	2206      	movs	r2, #6
    3e0a:	482f      	ldr	r0, [pc, #188]	; (3ec8 <_vfiprintf_r+0x22c>)
    3e0c:	9302      	str	r3, [sp, #8]
    3e0e:	7629      	strb	r1, [r5, #24]
    3e10:	f000 faa4 	bl	435c <memchr>
    3e14:	2800      	cmp	r0, #0
    3e16:	d044      	beq.n	3ea2 <_vfiprintf_r+0x206>
    3e18:	4b2c      	ldr	r3, [pc, #176]	; (3ecc <_vfiprintf_r+0x230>)
    3e1a:	2b00      	cmp	r3, #0
    3e1c:	d12f      	bne.n	3e7e <_vfiprintf_r+0x1e2>
    3e1e:	6829      	ldr	r1, [r5, #0]
    3e20:	9b05      	ldr	r3, [sp, #20]
    3e22:	2207      	movs	r2, #7
    3e24:	05c9      	lsls	r1, r1, #23
    3e26:	d528      	bpl.n	3e7a <_vfiprintf_r+0x1de>
    3e28:	189b      	adds	r3, r3, r2
    3e2a:	4393      	bics	r3, r2
    3e2c:	3308      	adds	r3, #8
    3e2e:	9305      	str	r3, [sp, #20]
    3e30:	696b      	ldr	r3, [r5, #20]
    3e32:	9a03      	ldr	r2, [sp, #12]
    3e34:	189b      	adds	r3, r3, r2
    3e36:	616b      	str	r3, [r5, #20]
    3e38:	e74f      	b.n	3cda <_vfiprintf_r+0x3e>
    3e3a:	425b      	negs	r3, r3
    3e3c:	60eb      	str	r3, [r5, #12]
    3e3e:	2302      	movs	r3, #2
    3e40:	430b      	orrs	r3, r1
    3e42:	602b      	str	r3, [r5, #0]
    3e44:	e7bf      	b.n	3dc6 <_vfiprintf_r+0x12a>
    3e46:	434b      	muls	r3, r1
    3e48:	3401      	adds	r4, #1
    3e4a:	189b      	adds	r3, r3, r2
    3e4c:	2001      	movs	r0, #1
    3e4e:	e789      	b.n	3d64 <_vfiprintf_r+0xc8>
    3e50:	2301      	movs	r3, #1
    3e52:	425b      	negs	r3, r3
    3e54:	e7c6      	b.n	3de4 <_vfiprintf_r+0x148>
    3e56:	2300      	movs	r3, #0
    3e58:	0014      	movs	r4, r2
    3e5a:	200a      	movs	r0, #10
    3e5c:	001a      	movs	r2, r3
    3e5e:	606b      	str	r3, [r5, #4]
    3e60:	7821      	ldrb	r1, [r4, #0]
    3e62:	3930      	subs	r1, #48	; 0x30
    3e64:	2909      	cmp	r1, #9
    3e66:	d903      	bls.n	3e70 <_vfiprintf_r+0x1d4>
    3e68:	2b00      	cmp	r3, #0
    3e6a:	d0bc      	beq.n	3de6 <_vfiprintf_r+0x14a>
    3e6c:	9207      	str	r2, [sp, #28]
    3e6e:	e7ba      	b.n	3de6 <_vfiprintf_r+0x14a>
    3e70:	4342      	muls	r2, r0
    3e72:	3401      	adds	r4, #1
    3e74:	1852      	adds	r2, r2, r1
    3e76:	2301      	movs	r3, #1
    3e78:	e7f2      	b.n	3e60 <_vfiprintf_r+0x1c4>
    3e7a:	3307      	adds	r3, #7
    3e7c:	e7d5      	b.n	3e2a <_vfiprintf_r+0x18e>
    3e7e:	ab05      	add	r3, sp, #20
    3e80:	9300      	str	r3, [sp, #0]
    3e82:	003a      	movs	r2, r7
    3e84:	4b12      	ldr	r3, [pc, #72]	; (3ed0 <_vfiprintf_r+0x234>)
    3e86:	0029      	movs	r1, r5
    3e88:	0030      	movs	r0, r6
    3e8a:	e000      	b.n	3e8e <_vfiprintf_r+0x1f2>
    3e8c:	bf00      	nop
    3e8e:	9003      	str	r0, [sp, #12]
    3e90:	9b03      	ldr	r3, [sp, #12]
    3e92:	3301      	adds	r3, #1
    3e94:	d1cc      	bne.n	3e30 <_vfiprintf_r+0x194>
    3e96:	89bb      	ldrh	r3, [r7, #12]
    3e98:	065b      	lsls	r3, r3, #25
    3e9a:	d500      	bpl.n	3e9e <_vfiprintf_r+0x202>
    3e9c:	e77b      	b.n	3d96 <_vfiprintf_r+0xfa>
    3e9e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3ea0:	e77b      	b.n	3d9a <_vfiprintf_r+0xfe>
    3ea2:	ab05      	add	r3, sp, #20
    3ea4:	9300      	str	r3, [sp, #0]
    3ea6:	003a      	movs	r2, r7
    3ea8:	4b09      	ldr	r3, [pc, #36]	; (3ed0 <_vfiprintf_r+0x234>)
    3eaa:	0029      	movs	r1, r5
    3eac:	0030      	movs	r0, r6
    3eae:	f000 f87f 	bl	3fb0 <_printf_i>
    3eb2:	e7ec      	b.n	3e8e <_vfiprintf_r+0x1f2>
    3eb4:	000045ec 	.word	0x000045ec
    3eb8:	0000462c 	.word	0x0000462c
    3ebc:	0000460c 	.word	0x0000460c
    3ec0:	000045cc 	.word	0x000045cc
    3ec4:	00004632 	.word	0x00004632
    3ec8:	00004636 	.word	0x00004636
    3ecc:	00000000 	.word	0x00000000
    3ed0:	00003c77 	.word	0x00003c77

00003ed4 <_printf_common>:
    3ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3ed6:	0015      	movs	r5, r2
    3ed8:	9301      	str	r3, [sp, #4]
    3eda:	688a      	ldr	r2, [r1, #8]
    3edc:	690b      	ldr	r3, [r1, #16]
    3ede:	9000      	str	r0, [sp, #0]
    3ee0:	000c      	movs	r4, r1
    3ee2:	4293      	cmp	r3, r2
    3ee4:	da00      	bge.n	3ee8 <_printf_common+0x14>
    3ee6:	0013      	movs	r3, r2
    3ee8:	0022      	movs	r2, r4
    3eea:	602b      	str	r3, [r5, #0]
    3eec:	3243      	adds	r2, #67	; 0x43
    3eee:	7812      	ldrb	r2, [r2, #0]
    3ef0:	2a00      	cmp	r2, #0
    3ef2:	d001      	beq.n	3ef8 <_printf_common+0x24>
    3ef4:	3301      	adds	r3, #1
    3ef6:	602b      	str	r3, [r5, #0]
    3ef8:	6823      	ldr	r3, [r4, #0]
    3efa:	069b      	lsls	r3, r3, #26
    3efc:	d502      	bpl.n	3f04 <_printf_common+0x30>
    3efe:	682b      	ldr	r3, [r5, #0]
    3f00:	3302      	adds	r3, #2
    3f02:	602b      	str	r3, [r5, #0]
    3f04:	2706      	movs	r7, #6
    3f06:	6823      	ldr	r3, [r4, #0]
    3f08:	401f      	ands	r7, r3
    3f0a:	d027      	beq.n	3f5c <_printf_common+0x88>
    3f0c:	0023      	movs	r3, r4
    3f0e:	3343      	adds	r3, #67	; 0x43
    3f10:	781b      	ldrb	r3, [r3, #0]
    3f12:	1e5a      	subs	r2, r3, #1
    3f14:	4193      	sbcs	r3, r2
    3f16:	6822      	ldr	r2, [r4, #0]
    3f18:	0692      	lsls	r2, r2, #26
    3f1a:	d430      	bmi.n	3f7e <_printf_common+0xaa>
    3f1c:	0022      	movs	r2, r4
    3f1e:	9901      	ldr	r1, [sp, #4]
    3f20:	3243      	adds	r2, #67	; 0x43
    3f22:	9800      	ldr	r0, [sp, #0]
    3f24:	9e08      	ldr	r6, [sp, #32]
    3f26:	47b0      	blx	r6
    3f28:	1c43      	adds	r3, r0, #1
    3f2a:	d025      	beq.n	3f78 <_printf_common+0xa4>
    3f2c:	2306      	movs	r3, #6
    3f2e:	6820      	ldr	r0, [r4, #0]
    3f30:	682a      	ldr	r2, [r5, #0]
    3f32:	68e1      	ldr	r1, [r4, #12]
    3f34:	4003      	ands	r3, r0
    3f36:	2500      	movs	r5, #0
    3f38:	2b04      	cmp	r3, #4
    3f3a:	d103      	bne.n	3f44 <_printf_common+0x70>
    3f3c:	1a8d      	subs	r5, r1, r2
    3f3e:	43eb      	mvns	r3, r5
    3f40:	17db      	asrs	r3, r3, #31
    3f42:	401d      	ands	r5, r3
    3f44:	68a3      	ldr	r3, [r4, #8]
    3f46:	6922      	ldr	r2, [r4, #16]
    3f48:	4293      	cmp	r3, r2
    3f4a:	dd01      	ble.n	3f50 <_printf_common+0x7c>
    3f4c:	1a9b      	subs	r3, r3, r2
    3f4e:	18ed      	adds	r5, r5, r3
    3f50:	2700      	movs	r7, #0
    3f52:	42bd      	cmp	r5, r7
    3f54:	d120      	bne.n	3f98 <_printf_common+0xc4>
    3f56:	2000      	movs	r0, #0
    3f58:	e010      	b.n	3f7c <_printf_common+0xa8>
    3f5a:	3701      	adds	r7, #1
    3f5c:	68e3      	ldr	r3, [r4, #12]
    3f5e:	682a      	ldr	r2, [r5, #0]
    3f60:	1a9b      	subs	r3, r3, r2
    3f62:	429f      	cmp	r7, r3
    3f64:	dad2      	bge.n	3f0c <_printf_common+0x38>
    3f66:	0022      	movs	r2, r4
    3f68:	2301      	movs	r3, #1
    3f6a:	3219      	adds	r2, #25
    3f6c:	9901      	ldr	r1, [sp, #4]
    3f6e:	9800      	ldr	r0, [sp, #0]
    3f70:	9e08      	ldr	r6, [sp, #32]
    3f72:	47b0      	blx	r6
    3f74:	1c43      	adds	r3, r0, #1
    3f76:	d1f0      	bne.n	3f5a <_printf_common+0x86>
    3f78:	2001      	movs	r0, #1
    3f7a:	4240      	negs	r0, r0
    3f7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3f7e:	2030      	movs	r0, #48	; 0x30
    3f80:	18e1      	adds	r1, r4, r3
    3f82:	3143      	adds	r1, #67	; 0x43
    3f84:	7008      	strb	r0, [r1, #0]
    3f86:	0021      	movs	r1, r4
    3f88:	1c5a      	adds	r2, r3, #1
    3f8a:	3145      	adds	r1, #69	; 0x45
    3f8c:	7809      	ldrb	r1, [r1, #0]
    3f8e:	18a2      	adds	r2, r4, r2
    3f90:	3243      	adds	r2, #67	; 0x43
    3f92:	3302      	adds	r3, #2
    3f94:	7011      	strb	r1, [r2, #0]
    3f96:	e7c1      	b.n	3f1c <_printf_common+0x48>
    3f98:	0022      	movs	r2, r4
    3f9a:	2301      	movs	r3, #1
    3f9c:	321a      	adds	r2, #26
    3f9e:	9901      	ldr	r1, [sp, #4]
    3fa0:	9800      	ldr	r0, [sp, #0]
    3fa2:	9e08      	ldr	r6, [sp, #32]
    3fa4:	47b0      	blx	r6
    3fa6:	1c43      	adds	r3, r0, #1
    3fa8:	d0e6      	beq.n	3f78 <_printf_common+0xa4>
    3faa:	3701      	adds	r7, #1
    3fac:	e7d1      	b.n	3f52 <_printf_common+0x7e>
	...

00003fb0 <_printf_i>:
    3fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fb2:	b08b      	sub	sp, #44	; 0x2c
    3fb4:	9206      	str	r2, [sp, #24]
    3fb6:	000a      	movs	r2, r1
    3fb8:	3243      	adds	r2, #67	; 0x43
    3fba:	9307      	str	r3, [sp, #28]
    3fbc:	9005      	str	r0, [sp, #20]
    3fbe:	9204      	str	r2, [sp, #16]
    3fc0:	7e0a      	ldrb	r2, [r1, #24]
    3fc2:	000c      	movs	r4, r1
    3fc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3fc6:	2a6e      	cmp	r2, #110	; 0x6e
    3fc8:	d100      	bne.n	3fcc <_printf_i+0x1c>
    3fca:	e08f      	b.n	40ec <_printf_i+0x13c>
    3fcc:	d817      	bhi.n	3ffe <_printf_i+0x4e>
    3fce:	2a63      	cmp	r2, #99	; 0x63
    3fd0:	d02c      	beq.n	402c <_printf_i+0x7c>
    3fd2:	d808      	bhi.n	3fe6 <_printf_i+0x36>
    3fd4:	2a00      	cmp	r2, #0
    3fd6:	d100      	bne.n	3fda <_printf_i+0x2a>
    3fd8:	e099      	b.n	410e <_printf_i+0x15e>
    3fda:	2a58      	cmp	r2, #88	; 0x58
    3fdc:	d054      	beq.n	4088 <_printf_i+0xd8>
    3fde:	0026      	movs	r6, r4
    3fe0:	3642      	adds	r6, #66	; 0x42
    3fe2:	7032      	strb	r2, [r6, #0]
    3fe4:	e029      	b.n	403a <_printf_i+0x8a>
    3fe6:	2a64      	cmp	r2, #100	; 0x64
    3fe8:	d001      	beq.n	3fee <_printf_i+0x3e>
    3fea:	2a69      	cmp	r2, #105	; 0x69
    3fec:	d1f7      	bne.n	3fde <_printf_i+0x2e>
    3fee:	6821      	ldr	r1, [r4, #0]
    3ff0:	681a      	ldr	r2, [r3, #0]
    3ff2:	0608      	lsls	r0, r1, #24
    3ff4:	d523      	bpl.n	403e <_printf_i+0x8e>
    3ff6:	1d11      	adds	r1, r2, #4
    3ff8:	6019      	str	r1, [r3, #0]
    3ffa:	6815      	ldr	r5, [r2, #0]
    3ffc:	e025      	b.n	404a <_printf_i+0x9a>
    3ffe:	2a73      	cmp	r2, #115	; 0x73
    4000:	d100      	bne.n	4004 <_printf_i+0x54>
    4002:	e088      	b.n	4116 <_printf_i+0x166>
    4004:	d808      	bhi.n	4018 <_printf_i+0x68>
    4006:	2a6f      	cmp	r2, #111	; 0x6f
    4008:	d029      	beq.n	405e <_printf_i+0xae>
    400a:	2a70      	cmp	r2, #112	; 0x70
    400c:	d1e7      	bne.n	3fde <_printf_i+0x2e>
    400e:	2220      	movs	r2, #32
    4010:	6809      	ldr	r1, [r1, #0]
    4012:	430a      	orrs	r2, r1
    4014:	6022      	str	r2, [r4, #0]
    4016:	e003      	b.n	4020 <_printf_i+0x70>
    4018:	2a75      	cmp	r2, #117	; 0x75
    401a:	d020      	beq.n	405e <_printf_i+0xae>
    401c:	2a78      	cmp	r2, #120	; 0x78
    401e:	d1de      	bne.n	3fde <_printf_i+0x2e>
    4020:	0022      	movs	r2, r4
    4022:	2178      	movs	r1, #120	; 0x78
    4024:	3245      	adds	r2, #69	; 0x45
    4026:	7011      	strb	r1, [r2, #0]
    4028:	4a6c      	ldr	r2, [pc, #432]	; (41dc <_printf_i+0x22c>)
    402a:	e030      	b.n	408e <_printf_i+0xde>
    402c:	000e      	movs	r6, r1
    402e:	681a      	ldr	r2, [r3, #0]
    4030:	3642      	adds	r6, #66	; 0x42
    4032:	1d11      	adds	r1, r2, #4
    4034:	6019      	str	r1, [r3, #0]
    4036:	6813      	ldr	r3, [r2, #0]
    4038:	7033      	strb	r3, [r6, #0]
    403a:	2301      	movs	r3, #1
    403c:	e079      	b.n	4132 <_printf_i+0x182>
    403e:	0649      	lsls	r1, r1, #25
    4040:	d5d9      	bpl.n	3ff6 <_printf_i+0x46>
    4042:	1d11      	adds	r1, r2, #4
    4044:	6019      	str	r1, [r3, #0]
    4046:	2300      	movs	r3, #0
    4048:	5ed5      	ldrsh	r5, [r2, r3]
    404a:	2d00      	cmp	r5, #0
    404c:	da03      	bge.n	4056 <_printf_i+0xa6>
    404e:	232d      	movs	r3, #45	; 0x2d
    4050:	9a04      	ldr	r2, [sp, #16]
    4052:	426d      	negs	r5, r5
    4054:	7013      	strb	r3, [r2, #0]
    4056:	4b62      	ldr	r3, [pc, #392]	; (41e0 <_printf_i+0x230>)
    4058:	270a      	movs	r7, #10
    405a:	9303      	str	r3, [sp, #12]
    405c:	e02f      	b.n	40be <_printf_i+0x10e>
    405e:	6820      	ldr	r0, [r4, #0]
    4060:	6819      	ldr	r1, [r3, #0]
    4062:	0605      	lsls	r5, r0, #24
    4064:	d503      	bpl.n	406e <_printf_i+0xbe>
    4066:	1d08      	adds	r0, r1, #4
    4068:	6018      	str	r0, [r3, #0]
    406a:	680d      	ldr	r5, [r1, #0]
    406c:	e005      	b.n	407a <_printf_i+0xca>
    406e:	0640      	lsls	r0, r0, #25
    4070:	d5f9      	bpl.n	4066 <_printf_i+0xb6>
    4072:	680d      	ldr	r5, [r1, #0]
    4074:	1d08      	adds	r0, r1, #4
    4076:	6018      	str	r0, [r3, #0]
    4078:	b2ad      	uxth	r5, r5
    407a:	4b59      	ldr	r3, [pc, #356]	; (41e0 <_printf_i+0x230>)
    407c:	2708      	movs	r7, #8
    407e:	9303      	str	r3, [sp, #12]
    4080:	2a6f      	cmp	r2, #111	; 0x6f
    4082:	d018      	beq.n	40b6 <_printf_i+0x106>
    4084:	270a      	movs	r7, #10
    4086:	e016      	b.n	40b6 <_printf_i+0x106>
    4088:	3145      	adds	r1, #69	; 0x45
    408a:	700a      	strb	r2, [r1, #0]
    408c:	4a54      	ldr	r2, [pc, #336]	; (41e0 <_printf_i+0x230>)
    408e:	9203      	str	r2, [sp, #12]
    4090:	681a      	ldr	r2, [r3, #0]
    4092:	6821      	ldr	r1, [r4, #0]
    4094:	1d10      	adds	r0, r2, #4
    4096:	6018      	str	r0, [r3, #0]
    4098:	6815      	ldr	r5, [r2, #0]
    409a:	0608      	lsls	r0, r1, #24
    409c:	d522      	bpl.n	40e4 <_printf_i+0x134>
    409e:	07cb      	lsls	r3, r1, #31
    40a0:	d502      	bpl.n	40a8 <_printf_i+0xf8>
    40a2:	2320      	movs	r3, #32
    40a4:	4319      	orrs	r1, r3
    40a6:	6021      	str	r1, [r4, #0]
    40a8:	2710      	movs	r7, #16
    40aa:	2d00      	cmp	r5, #0
    40ac:	d103      	bne.n	40b6 <_printf_i+0x106>
    40ae:	2320      	movs	r3, #32
    40b0:	6822      	ldr	r2, [r4, #0]
    40b2:	439a      	bics	r2, r3
    40b4:	6022      	str	r2, [r4, #0]
    40b6:	0023      	movs	r3, r4
    40b8:	2200      	movs	r2, #0
    40ba:	3343      	adds	r3, #67	; 0x43
    40bc:	701a      	strb	r2, [r3, #0]
    40be:	6863      	ldr	r3, [r4, #4]
    40c0:	60a3      	str	r3, [r4, #8]
    40c2:	2b00      	cmp	r3, #0
    40c4:	db5c      	blt.n	4180 <_printf_i+0x1d0>
    40c6:	2204      	movs	r2, #4
    40c8:	6821      	ldr	r1, [r4, #0]
    40ca:	4391      	bics	r1, r2
    40cc:	6021      	str	r1, [r4, #0]
    40ce:	2d00      	cmp	r5, #0
    40d0:	d158      	bne.n	4184 <_printf_i+0x1d4>
    40d2:	9e04      	ldr	r6, [sp, #16]
    40d4:	2b00      	cmp	r3, #0
    40d6:	d064      	beq.n	41a2 <_printf_i+0x1f2>
    40d8:	0026      	movs	r6, r4
    40da:	9b03      	ldr	r3, [sp, #12]
    40dc:	3642      	adds	r6, #66	; 0x42
    40de:	781b      	ldrb	r3, [r3, #0]
    40e0:	7033      	strb	r3, [r6, #0]
    40e2:	e05e      	b.n	41a2 <_printf_i+0x1f2>
    40e4:	0648      	lsls	r0, r1, #25
    40e6:	d5da      	bpl.n	409e <_printf_i+0xee>
    40e8:	b2ad      	uxth	r5, r5
    40ea:	e7d8      	b.n	409e <_printf_i+0xee>
    40ec:	6809      	ldr	r1, [r1, #0]
    40ee:	681a      	ldr	r2, [r3, #0]
    40f0:	0608      	lsls	r0, r1, #24
    40f2:	d505      	bpl.n	4100 <_printf_i+0x150>
    40f4:	1d11      	adds	r1, r2, #4
    40f6:	6019      	str	r1, [r3, #0]
    40f8:	6813      	ldr	r3, [r2, #0]
    40fa:	6962      	ldr	r2, [r4, #20]
    40fc:	601a      	str	r2, [r3, #0]
    40fe:	e006      	b.n	410e <_printf_i+0x15e>
    4100:	0649      	lsls	r1, r1, #25
    4102:	d5f7      	bpl.n	40f4 <_printf_i+0x144>
    4104:	1d11      	adds	r1, r2, #4
    4106:	6019      	str	r1, [r3, #0]
    4108:	6813      	ldr	r3, [r2, #0]
    410a:	8aa2      	ldrh	r2, [r4, #20]
    410c:	801a      	strh	r2, [r3, #0]
    410e:	2300      	movs	r3, #0
    4110:	9e04      	ldr	r6, [sp, #16]
    4112:	6123      	str	r3, [r4, #16]
    4114:	e054      	b.n	41c0 <_printf_i+0x210>
    4116:	681a      	ldr	r2, [r3, #0]
    4118:	1d11      	adds	r1, r2, #4
    411a:	6019      	str	r1, [r3, #0]
    411c:	6816      	ldr	r6, [r2, #0]
    411e:	2100      	movs	r1, #0
    4120:	6862      	ldr	r2, [r4, #4]
    4122:	0030      	movs	r0, r6
    4124:	f000 f91a 	bl	435c <memchr>
    4128:	2800      	cmp	r0, #0
    412a:	d001      	beq.n	4130 <_printf_i+0x180>
    412c:	1b80      	subs	r0, r0, r6
    412e:	6060      	str	r0, [r4, #4]
    4130:	6863      	ldr	r3, [r4, #4]
    4132:	6123      	str	r3, [r4, #16]
    4134:	2300      	movs	r3, #0
    4136:	9a04      	ldr	r2, [sp, #16]
    4138:	7013      	strb	r3, [r2, #0]
    413a:	e041      	b.n	41c0 <_printf_i+0x210>
    413c:	6923      	ldr	r3, [r4, #16]
    413e:	0032      	movs	r2, r6
    4140:	9906      	ldr	r1, [sp, #24]
    4142:	9805      	ldr	r0, [sp, #20]
    4144:	9d07      	ldr	r5, [sp, #28]
    4146:	47a8      	blx	r5
    4148:	1c43      	adds	r3, r0, #1
    414a:	d043      	beq.n	41d4 <_printf_i+0x224>
    414c:	6823      	ldr	r3, [r4, #0]
    414e:	2500      	movs	r5, #0
    4150:	079b      	lsls	r3, r3, #30
    4152:	d40f      	bmi.n	4174 <_printf_i+0x1c4>
    4154:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4156:	68e0      	ldr	r0, [r4, #12]
    4158:	4298      	cmp	r0, r3
    415a:	da3d      	bge.n	41d8 <_printf_i+0x228>
    415c:	0018      	movs	r0, r3
    415e:	e03b      	b.n	41d8 <_printf_i+0x228>
    4160:	0022      	movs	r2, r4
    4162:	2301      	movs	r3, #1
    4164:	3219      	adds	r2, #25
    4166:	9906      	ldr	r1, [sp, #24]
    4168:	9805      	ldr	r0, [sp, #20]
    416a:	9e07      	ldr	r6, [sp, #28]
    416c:	47b0      	blx	r6
    416e:	1c43      	adds	r3, r0, #1
    4170:	d030      	beq.n	41d4 <_printf_i+0x224>
    4172:	3501      	adds	r5, #1
    4174:	68e3      	ldr	r3, [r4, #12]
    4176:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4178:	1a9b      	subs	r3, r3, r2
    417a:	429d      	cmp	r5, r3
    417c:	dbf0      	blt.n	4160 <_printf_i+0x1b0>
    417e:	e7e9      	b.n	4154 <_printf_i+0x1a4>
    4180:	2d00      	cmp	r5, #0
    4182:	d0a9      	beq.n	40d8 <_printf_i+0x128>
    4184:	9e04      	ldr	r6, [sp, #16]
    4186:	0028      	movs	r0, r5
    4188:	0039      	movs	r1, r7
    418a:	f7ff f84d 	bl	3228 <__aeabi_uidivmod>
    418e:	9b03      	ldr	r3, [sp, #12]
    4190:	3e01      	subs	r6, #1
    4192:	5c5b      	ldrb	r3, [r3, r1]
    4194:	0028      	movs	r0, r5
    4196:	7033      	strb	r3, [r6, #0]
    4198:	0039      	movs	r1, r7
    419a:	f7fe ffbf 	bl	311c <__udivsi3>
    419e:	1e05      	subs	r5, r0, #0
    41a0:	d1f1      	bne.n	4186 <_printf_i+0x1d6>
    41a2:	2f08      	cmp	r7, #8
    41a4:	d109      	bne.n	41ba <_printf_i+0x20a>
    41a6:	6823      	ldr	r3, [r4, #0]
    41a8:	07db      	lsls	r3, r3, #31
    41aa:	d506      	bpl.n	41ba <_printf_i+0x20a>
    41ac:	6863      	ldr	r3, [r4, #4]
    41ae:	6922      	ldr	r2, [r4, #16]
    41b0:	4293      	cmp	r3, r2
    41b2:	dc02      	bgt.n	41ba <_printf_i+0x20a>
    41b4:	2330      	movs	r3, #48	; 0x30
    41b6:	3e01      	subs	r6, #1
    41b8:	7033      	strb	r3, [r6, #0]
    41ba:	9b04      	ldr	r3, [sp, #16]
    41bc:	1b9b      	subs	r3, r3, r6
    41be:	6123      	str	r3, [r4, #16]
    41c0:	9b07      	ldr	r3, [sp, #28]
    41c2:	aa09      	add	r2, sp, #36	; 0x24
    41c4:	9300      	str	r3, [sp, #0]
    41c6:	0021      	movs	r1, r4
    41c8:	9b06      	ldr	r3, [sp, #24]
    41ca:	9805      	ldr	r0, [sp, #20]
    41cc:	f7ff fe82 	bl	3ed4 <_printf_common>
    41d0:	1c43      	adds	r3, r0, #1
    41d2:	d1b3      	bne.n	413c <_printf_i+0x18c>
    41d4:	2001      	movs	r0, #1
    41d6:	4240      	negs	r0, r0
    41d8:	b00b      	add	sp, #44	; 0x2c
    41da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41dc:	0000464e 	.word	0x0000464e
    41e0:	0000463d 	.word	0x0000463d

000041e4 <_sbrk_r>:
    41e4:	2300      	movs	r3, #0
    41e6:	b570      	push	{r4, r5, r6, lr}
    41e8:	4c06      	ldr	r4, [pc, #24]	; (4204 <_sbrk_r+0x20>)
    41ea:	0005      	movs	r5, r0
    41ec:	0008      	movs	r0, r1
    41ee:	6023      	str	r3, [r4, #0]
    41f0:	f7fe fbb8 	bl	2964 <_sbrk>
    41f4:	1c43      	adds	r3, r0, #1
    41f6:	d103      	bne.n	4200 <_sbrk_r+0x1c>
    41f8:	6823      	ldr	r3, [r4, #0]
    41fa:	2b00      	cmp	r3, #0
    41fc:	d000      	beq.n	4200 <_sbrk_r+0x1c>
    41fe:	602b      	str	r3, [r5, #0]
    4200:	bd70      	pop	{r4, r5, r6, pc}
    4202:	46c0      	nop			; (mov r8, r8)
    4204:	20000134 	.word	0x20000134

00004208 <__sread>:
    4208:	b570      	push	{r4, r5, r6, lr}
    420a:	000c      	movs	r4, r1
    420c:	250e      	movs	r5, #14
    420e:	5f49      	ldrsh	r1, [r1, r5]
    4210:	f000 f8b2 	bl	4378 <_read_r>
    4214:	2800      	cmp	r0, #0
    4216:	db03      	blt.n	4220 <__sread+0x18>
    4218:	6d63      	ldr	r3, [r4, #84]	; 0x54
    421a:	181b      	adds	r3, r3, r0
    421c:	6563      	str	r3, [r4, #84]	; 0x54
    421e:	bd70      	pop	{r4, r5, r6, pc}
    4220:	89a3      	ldrh	r3, [r4, #12]
    4222:	4a02      	ldr	r2, [pc, #8]	; (422c <__sread+0x24>)
    4224:	4013      	ands	r3, r2
    4226:	81a3      	strh	r3, [r4, #12]
    4228:	e7f9      	b.n	421e <__sread+0x16>
    422a:	46c0      	nop			; (mov r8, r8)
    422c:	ffffefff 	.word	0xffffefff

00004230 <__swrite>:
    4230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4232:	001f      	movs	r7, r3
    4234:	898b      	ldrh	r3, [r1, #12]
    4236:	0005      	movs	r5, r0
    4238:	000c      	movs	r4, r1
    423a:	0016      	movs	r6, r2
    423c:	05db      	lsls	r3, r3, #23
    423e:	d505      	bpl.n	424c <__swrite+0x1c>
    4240:	230e      	movs	r3, #14
    4242:	5ec9      	ldrsh	r1, [r1, r3]
    4244:	2200      	movs	r2, #0
    4246:	2302      	movs	r3, #2
    4248:	f000 f874 	bl	4334 <_lseek_r>
    424c:	89a3      	ldrh	r3, [r4, #12]
    424e:	4a05      	ldr	r2, [pc, #20]	; (4264 <__swrite+0x34>)
    4250:	0028      	movs	r0, r5
    4252:	4013      	ands	r3, r2
    4254:	81a3      	strh	r3, [r4, #12]
    4256:	0032      	movs	r2, r6
    4258:	230e      	movs	r3, #14
    425a:	5ee1      	ldrsh	r1, [r4, r3]
    425c:	003b      	movs	r3, r7
    425e:	f000 f81f 	bl	42a0 <_write_r>
    4262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4264:	ffffefff 	.word	0xffffefff

00004268 <__sseek>:
    4268:	b570      	push	{r4, r5, r6, lr}
    426a:	000c      	movs	r4, r1
    426c:	250e      	movs	r5, #14
    426e:	5f49      	ldrsh	r1, [r1, r5]
    4270:	f000 f860 	bl	4334 <_lseek_r>
    4274:	89a3      	ldrh	r3, [r4, #12]
    4276:	1c42      	adds	r2, r0, #1
    4278:	d103      	bne.n	4282 <__sseek+0x1a>
    427a:	4a05      	ldr	r2, [pc, #20]	; (4290 <__sseek+0x28>)
    427c:	4013      	ands	r3, r2
    427e:	81a3      	strh	r3, [r4, #12]
    4280:	bd70      	pop	{r4, r5, r6, pc}
    4282:	2280      	movs	r2, #128	; 0x80
    4284:	0152      	lsls	r2, r2, #5
    4286:	4313      	orrs	r3, r2
    4288:	81a3      	strh	r3, [r4, #12]
    428a:	6560      	str	r0, [r4, #84]	; 0x54
    428c:	e7f8      	b.n	4280 <__sseek+0x18>
    428e:	46c0      	nop			; (mov r8, r8)
    4290:	ffffefff 	.word	0xffffefff

00004294 <__sclose>:
    4294:	b510      	push	{r4, lr}
    4296:	230e      	movs	r3, #14
    4298:	5ec9      	ldrsh	r1, [r1, r3]
    429a:	f000 f815 	bl	42c8 <_close_r>
    429e:	bd10      	pop	{r4, pc}

000042a0 <_write_r>:
    42a0:	b570      	push	{r4, r5, r6, lr}
    42a2:	0005      	movs	r5, r0
    42a4:	0008      	movs	r0, r1
    42a6:	0011      	movs	r1, r2
    42a8:	2200      	movs	r2, #0
    42aa:	4c06      	ldr	r4, [pc, #24]	; (42c4 <_write_r+0x24>)
    42ac:	6022      	str	r2, [r4, #0]
    42ae:	001a      	movs	r2, r3
    42b0:	f7fe fb22 	bl	28f8 <_write>
    42b4:	1c43      	adds	r3, r0, #1
    42b6:	d103      	bne.n	42c0 <_write_r+0x20>
    42b8:	6823      	ldr	r3, [r4, #0]
    42ba:	2b00      	cmp	r3, #0
    42bc:	d000      	beq.n	42c0 <_write_r+0x20>
    42be:	602b      	str	r3, [r5, #0]
    42c0:	bd70      	pop	{r4, r5, r6, pc}
    42c2:	46c0      	nop			; (mov r8, r8)
    42c4:	20000134 	.word	0x20000134

000042c8 <_close_r>:
    42c8:	2300      	movs	r3, #0
    42ca:	b570      	push	{r4, r5, r6, lr}
    42cc:	4c06      	ldr	r4, [pc, #24]	; (42e8 <_close_r+0x20>)
    42ce:	0005      	movs	r5, r0
    42d0:	0008      	movs	r0, r1
    42d2:	6023      	str	r3, [r4, #0]
    42d4:	f7fe fb64 	bl	29a0 <_close>
    42d8:	1c43      	adds	r3, r0, #1
    42da:	d103      	bne.n	42e4 <_close_r+0x1c>
    42dc:	6823      	ldr	r3, [r4, #0]
    42de:	2b00      	cmp	r3, #0
    42e0:	d000      	beq.n	42e4 <_close_r+0x1c>
    42e2:	602b      	str	r3, [r5, #0]
    42e4:	bd70      	pop	{r4, r5, r6, pc}
    42e6:	46c0      	nop			; (mov r8, r8)
    42e8:	20000134 	.word	0x20000134

000042ec <_fstat_r>:
    42ec:	2300      	movs	r3, #0
    42ee:	b570      	push	{r4, r5, r6, lr}
    42f0:	4c06      	ldr	r4, [pc, #24]	; (430c <_fstat_r+0x20>)
    42f2:	0005      	movs	r5, r0
    42f4:	0008      	movs	r0, r1
    42f6:	0011      	movs	r1, r2
    42f8:	6023      	str	r3, [r4, #0]
    42fa:	f7fe fb5b 	bl	29b4 <_fstat>
    42fe:	1c43      	adds	r3, r0, #1
    4300:	d103      	bne.n	430a <_fstat_r+0x1e>
    4302:	6823      	ldr	r3, [r4, #0]
    4304:	2b00      	cmp	r3, #0
    4306:	d000      	beq.n	430a <_fstat_r+0x1e>
    4308:	602b      	str	r3, [r5, #0]
    430a:	bd70      	pop	{r4, r5, r6, pc}
    430c:	20000134 	.word	0x20000134

00004310 <_isatty_r>:
    4310:	2300      	movs	r3, #0
    4312:	b570      	push	{r4, r5, r6, lr}
    4314:	4c06      	ldr	r4, [pc, #24]	; (4330 <_isatty_r+0x20>)
    4316:	0005      	movs	r5, r0
    4318:	0008      	movs	r0, r1
    431a:	6023      	str	r3, [r4, #0]
    431c:	f7fe fb58 	bl	29d0 <_isatty>
    4320:	1c43      	adds	r3, r0, #1
    4322:	d103      	bne.n	432c <_isatty_r+0x1c>
    4324:	6823      	ldr	r3, [r4, #0]
    4326:	2b00      	cmp	r3, #0
    4328:	d000      	beq.n	432c <_isatty_r+0x1c>
    432a:	602b      	str	r3, [r5, #0]
    432c:	bd70      	pop	{r4, r5, r6, pc}
    432e:	46c0      	nop			; (mov r8, r8)
    4330:	20000134 	.word	0x20000134

00004334 <_lseek_r>:
    4334:	b570      	push	{r4, r5, r6, lr}
    4336:	0005      	movs	r5, r0
    4338:	0008      	movs	r0, r1
    433a:	0011      	movs	r1, r2
    433c:	2200      	movs	r2, #0
    433e:	4c06      	ldr	r4, [pc, #24]	; (4358 <_lseek_r+0x24>)
    4340:	6022      	str	r2, [r4, #0]
    4342:	001a      	movs	r2, r3
    4344:	f7fe fb4d 	bl	29e2 <_lseek>
    4348:	1c43      	adds	r3, r0, #1
    434a:	d103      	bne.n	4354 <_lseek_r+0x20>
    434c:	6823      	ldr	r3, [r4, #0]
    434e:	2b00      	cmp	r3, #0
    4350:	d000      	beq.n	4354 <_lseek_r+0x20>
    4352:	602b      	str	r3, [r5, #0]
    4354:	bd70      	pop	{r4, r5, r6, pc}
    4356:	46c0      	nop			; (mov r8, r8)
    4358:	20000134 	.word	0x20000134

0000435c <memchr>:
    435c:	b2c9      	uxtb	r1, r1
    435e:	1882      	adds	r2, r0, r2
    4360:	4290      	cmp	r0, r2
    4362:	d101      	bne.n	4368 <memchr+0xc>
    4364:	2000      	movs	r0, #0
    4366:	4770      	bx	lr
    4368:	7803      	ldrb	r3, [r0, #0]
    436a:	428b      	cmp	r3, r1
    436c:	d0fb      	beq.n	4366 <memchr+0xa>
    436e:	3001      	adds	r0, #1
    4370:	e7f6      	b.n	4360 <memchr+0x4>

00004372 <__malloc_lock>:
    4372:	4770      	bx	lr

00004374 <__malloc_unlock>:
    4374:	4770      	bx	lr
	...

00004378 <_read_r>:
    4378:	b570      	push	{r4, r5, r6, lr}
    437a:	0005      	movs	r5, r0
    437c:	0008      	movs	r0, r1
    437e:	0011      	movs	r1, r2
    4380:	2200      	movs	r2, #0
    4382:	4c06      	ldr	r4, [pc, #24]	; (439c <_read_r+0x24>)
    4384:	6022      	str	r2, [r4, #0]
    4386:	001a      	movs	r2, r3
    4388:	f7fe fa8c 	bl	28a4 <_read>
    438c:	1c43      	adds	r3, r0, #1
    438e:	d103      	bne.n	4398 <_read_r+0x20>
    4390:	6823      	ldr	r3, [r4, #0]
    4392:	2b00      	cmp	r3, #0
    4394:	d000      	beq.n	4398 <_read_r+0x20>
    4396:	602b      	str	r3, [r5, #0]
    4398:	bd70      	pop	{r4, r5, r6, pc}
    439a:	46c0      	nop			; (mov r8, r8)
    439c:	20000134 	.word	0x20000134
    43a0:	0000048a 	.word	0x0000048a
    43a4:	0000048a 	.word	0x0000048a
    43a8:	0000047e 	.word	0x0000047e
    43ac:	0000048a 	.word	0x0000048a
    43b0:	0000047e 	.word	0x0000047e
    43b4:	0000045e 	.word	0x0000045e
    43b8:	0000045e 	.word	0x0000045e
    43bc:	0000048a 	.word	0x0000048a
    43c0:	0000048a 	.word	0x0000048a
    43c4:	0000048a 	.word	0x0000048a
    43c8:	0000048a 	.word	0x0000048a
    43cc:	0000048a 	.word	0x0000048a
    43d0:	0000048a 	.word	0x0000048a
    43d4:	0000048a 	.word	0x0000048a
    43d8:	0000048a 	.word	0x0000048a
    43dc:	0000048a 	.word	0x0000048a
    43e0:	0000048a 	.word	0x0000048a
    43e4:	0000048a 	.word	0x0000048a
    43e8:	0000048a 	.word	0x0000048a
    43ec:	0000048a 	.word	0x0000048a
    43f0:	0000048a 	.word	0x0000048a
    43f4:	0000048a 	.word	0x0000048a
    43f8:	0000048a 	.word	0x0000048a
    43fc:	0000048a 	.word	0x0000048a
    4400:	0000048a 	.word	0x0000048a
    4404:	0000048a 	.word	0x0000048a
    4408:	0000048a 	.word	0x0000048a
    440c:	0000048a 	.word	0x0000048a
    4410:	0000048a 	.word	0x0000048a
    4414:	0000048a 	.word	0x0000048a
    4418:	0000048a 	.word	0x0000048a
    441c:	0000048a 	.word	0x0000048a
    4420:	0000048a 	.word	0x0000048a
    4424:	0000048a 	.word	0x0000048a
    4428:	0000048a 	.word	0x0000048a
    442c:	0000048a 	.word	0x0000048a
    4430:	0000048a 	.word	0x0000048a
    4434:	0000048a 	.word	0x0000048a
    4438:	0000048a 	.word	0x0000048a
    443c:	0000048a 	.word	0x0000048a
    4440:	0000048a 	.word	0x0000048a
    4444:	0000048a 	.word	0x0000048a
    4448:	0000048a 	.word	0x0000048a
    444c:	0000048a 	.word	0x0000048a
    4450:	0000048a 	.word	0x0000048a
    4454:	0000048a 	.word	0x0000048a
    4458:	0000048a 	.word	0x0000048a
    445c:	0000048a 	.word	0x0000048a
    4460:	0000048a 	.word	0x0000048a
    4464:	0000048a 	.word	0x0000048a
    4468:	0000048a 	.word	0x0000048a
    446c:	0000048a 	.word	0x0000048a
    4470:	0000048a 	.word	0x0000048a
    4474:	0000048a 	.word	0x0000048a
    4478:	0000048a 	.word	0x0000048a
    447c:	0000048a 	.word	0x0000048a
    4480:	0000048a 	.word	0x0000048a
    4484:	0000048a 	.word	0x0000048a
    4488:	0000048a 	.word	0x0000048a
    448c:	0000048a 	.word	0x0000048a
    4490:	0000048a 	.word	0x0000048a
    4494:	0000048a 	.word	0x0000048a
    4498:	0000048a 	.word	0x0000048a
    449c:	0000048a 	.word	0x0000048a
    44a0:	0000047e 	.word	0x0000047e
    44a4:	0000047e 	.word	0x0000047e
    44a8:	0000048e 	.word	0x0000048e
    44ac:	0000048e 	.word	0x0000048e
    44b0:	0000048e 	.word	0x0000048e
    44b4:	0000048e 	.word	0x0000048e
    44b8:	42000800 	.word	0x42000800
    44bc:	42000c00 	.word	0x42000c00
    44c0:	42001000 	.word	0x42001000
    44c4:	42001400 	.word	0x42001400
    44c8:	42001800 	.word	0x42001800
    44cc:	42001c00 	.word	0x42001c00
    44d0:	0c0b0a09 	.word	0x0c0b0a09
    44d4:	00000e0d 	.word	0x00000e0d
    44d8:	00001b8e 	.word	0x00001b8e
    44dc:	00001c06 	.word	0x00001c06
    44e0:	00001c06 	.word	0x00001c06
    44e4:	00001bac 	.word	0x00001bac
    44e8:	00001ba6 	.word	0x00001ba6
    44ec:	00001bb2 	.word	0x00001bb2
    44f0:	00001b94 	.word	0x00001b94
    44f4:	00001bb8 	.word	0x00001bb8
    44f8:	00001bec 	.word	0x00001bec
    44fc:	00001dec 	.word	0x00001dec
    4500:	00001e3c 	.word	0x00001e3c
    4504:	00001e3c 	.word	0x00001e3c
    4508:	00001e38 	.word	0x00001e38
    450c:	00001dde 	.word	0x00001dde
    4510:	00001dfe 	.word	0x00001dfe
    4514:	00001dce 	.word	0x00001dce
    4518:	00001e10 	.word	0x00001e10
    451c:	00001e22 	.word	0x00001e22
    4520:	00001e8a 	.word	0x00001e8a
    4524:	00001eb8 	.word	0x00001eb8
    4528:	00001eb8 	.word	0x00001eb8
    452c:	00001eb4 	.word	0x00001eb4
    4530:	00001e84 	.word	0x00001e84
    4534:	00001e90 	.word	0x00001e90
    4538:	00001e7e 	.word	0x00001e7e
    453c:	00001e96 	.word	0x00001e96
    4540:	00001e9c 	.word	0x00001e9c
    4544:	72677055 	.word	0x72677055
    4548:	6e696461 	.word	0x6e696461
    454c:	69662067 	.word	0x69662067
    4550:	61776d72 	.word	0x61776d72
    4554:	66206572 	.word	0x66206572
    4558:	206d6f72 	.word	0x206d6f72
    455c:	61636f6c 	.word	0x61636f6c
    4560:	6e6f6974 	.word	0x6e6f6974
    4564:	2e642520 	.word	0x2e642520
    4568:	0000000a 	.word	0x0000000a
    456c:	72677055 	.word	0x72677055
    4570:	20656461 	.word	0x20656461
    4574:	706d6f63 	.word	0x706d6f63
    4578:	6574656c 	.word	0x6574656c
    457c:	00000000 	.word	0x00000000
    4580:	74696e49 	.word	0x74696e49
    4584:	6e6f6420 	.word	0x6e6f6420
    4588:	00002e65 	.word	0x00002e65
    458c:	61766e49 	.word	0x61766e49
    4590:	2064696c 	.word	0x2064696c
    4594:	73205746 	.word	0x73205746
    4598:	2c746174 	.word	0x2c746174
    459c:	69727720 	.word	0x69727720
    45a0:	676e6974 	.word	0x676e6974
    45a4:	66656420 	.word	0x66656420
    45a8:	746c7561 	.word	0x746c7561
    45ac:	00000000 	.word	0x00000000
    45b0:	72617453 	.word	0x72617453
    45b4:	676e6974 	.word	0x676e6974
    45b8:	70706120 	.word	0x70706120
    45bc:	00000000 	.word	0x00000000
    45c0:	62206e69 	.word	0x62206e69
    45c4:	00746f6f 	.word	0x00746f6f

000045c8 <_global_impure_ptr>:
    45c8:	20000010                                ... 

000045cc <__sf_fake_stderr>:
	...

000045ec <__sf_fake_stdin>:
	...

0000460c <__sf_fake_stdout>:
	...
    462c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    463c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    464c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    465c:	00006665                                ef..

00004660 <_init>:
    4660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4662:	46c0      	nop			; (mov r8, r8)
    4664:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4666:	bc08      	pop	{r3}
    4668:	469e      	mov	lr, r3
    466a:	4770      	bx	lr

0000466c <__init_array_start>:
    466c:	000000dd 	.word	0x000000dd

00004670 <_fini>:
    4670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4672:	46c0      	nop			; (mov r8, r8)
    4674:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4676:	bc08      	pop	{r3}
    4678:	469e      	mov	lr, r3
    467a:	4770      	bx	lr

0000467c <__fini_array_start>:
    467c:	000000b5 	.word	0x000000b5
