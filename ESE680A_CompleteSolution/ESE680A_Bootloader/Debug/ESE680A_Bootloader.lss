
ESE680A_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .status       00000007  00007f00  00007f00  00027f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .ARM.attributes 00000028  00000000  00000000  00027f07  2**0
                  CONTENTS, READONLY
  2 .comment      00000059  00000000  00000000  00027f2f  2**0
                  CONTENTS, READONLY
  3 .text         00005d8c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .relocate     00000070  20000000  00005d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000150  20000070  00005dfc  00020070  2**2
                  ALLOC
  6 .stack        00002000  200001c0  00005f4c  00020070  2**0
                  ALLOC
  7 .debug_info   00031908  00000000  00000000  00027f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003bae  00000000  00000000  00059890  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000030be  00000000  00000000  0005d43e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000938  00000000  00000000  000604fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007d0  00000000  00000000  00060e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001af97  00000000  00000000  00061604  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000f008  00000000  00000000  0007c59b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00088b40  00000000  00000000  0008b5a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000025e0  00000000  00000000  001140e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 21 00 20 09 18 00 00 01 19 00 00 01 19 00 00     .!. ............
	...
      2c:	01 19 00 00 00 00 00 00 00 00 00 00 01 19 00 00     ................
      3c:	01 19 00 00 01 19 00 00 01 19 00 00 01 19 00 00     ................
      4c:	01 19 00 00 01 19 00 00 01 19 00 00 01 19 00 00     ................
      5c:	01 19 00 00 01 19 00 00 e1 25 00 00 f9 25 00 00     .........%...%..
      6c:	11 26 00 00 29 26 00 00 41 26 00 00 59 26 00 00     .&..)&..A&..Y&..
      7c:	01 19 00 00 01 19 00 00 01 19 00 00 01 19 00 00     ................
      8c:	01 19 00 00 01 19 00 00 00 00 00 00 00 00 00 00     ................
      9c:	01 19 00 00 01 19 00 00 01 19 00 00 01 19 00 00     ................
      ac:	01 19 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00005d8c 	.word	0x00005d8c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00005d8c 	.word	0x00005d8c
     10c:	00005d8c 	.word	0x00005d8c
     110:	00000000 	.word	0x00000000

00000114 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     118:	46c0      	nop			; (mov r8, r8)
     11a:	46bd      	mov	sp, r7
     11c:	bd80      	pop	{r7, pc}
	...

00000120 <system_pinmux_get_group_from_gpio_pin>:
	while (length && (status == STATUS_OK)) {
		_at25dfx_chip_enable_write(chip);

		cmd.address += cmd.length;
		cmd.data.tx += cmd.length;
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
     120:	b580      	push	{r7, lr}
     122:	b084      	sub	sp, #16
     124:	af00      	add	r7, sp, #0
     126:	0002      	movs	r2, r0
     128:	1dfb      	adds	r3, r7, #7
     12a:	701a      	strb	r2, [r3, #0]
     12c:	230f      	movs	r3, #15

		_at25dfx_chip_issue_write_command_wait(chip, cmd);
     12e:	18fb      	adds	r3, r7, r3
     130:	1dfa      	adds	r2, r7, #7
     132:	7812      	ldrb	r2, [r2, #0]
     134:	09d2      	lsrs	r2, r2, #7
     136:	701a      	strb	r2, [r3, #0]
     138:	230e      	movs	r3, #14
     13a:	18fb      	adds	r3, r7, r3
     13c:	1dfa      	adds	r2, r7, #7
     13e:	7812      	ldrb	r2, [r2, #0]
     140:	0952      	lsrs	r2, r2, #5
     142:	701a      	strb	r2, [r3, #0]

		status = _at25dfx_chip_get_nonbusy_status(chip);
     144:	4b0d      	ldr	r3, [pc, #52]	; (17c <system_pinmux_get_group_from_gpio_pin+0x5c>)
     146:	60bb      	str	r3, [r7, #8]
     148:	230f      	movs	r3, #15
     14a:	18fb      	adds	r3, r7, r3
     14c:	781b      	ldrb	r3, [r3, #0]
     14e:	2b00      	cmp	r3, #0
     150:	d10f      	bne.n	172 <system_pinmux_get_group_from_gpio_pin+0x52>
     152:	230f      	movs	r3, #15

		length -= cmd.length;
     154:	18fb      	adds	r3, r7, r3
     156:	781b      	ldrb	r3, [r3, #0]
     158:	009b      	lsls	r3, r3, #2
     15a:	2210      	movs	r2, #16
     15c:	4694      	mov	ip, r2
     15e:	44bc      	add	ip, r7
     160:	4463      	add	r3, ip
     162:	3b08      	subs	r3, #8
	while (length && (status == STATUS_OK)) {
     164:	681a      	ldr	r2, [r3, #0]
     166:	230e      	movs	r3, #14
     168:	18fb      	adds	r3, r7, r3
     16a:	781b      	ldrb	r3, [r3, #0]
     16c:	01db      	lsls	r3, r3, #7
     16e:	18d3      	adds	r3, r2, r3
     170:	e000      	b.n	174 <system_pinmux_get_group_from_gpio_pin+0x54>
     172:	2300      	movs	r3, #0
     174:	0018      	movs	r0, r3
	}

	_at25dfx_spi_unlock(chip->spi);
     176:	46bd      	mov	sp, r7
     178:	b004      	add	sp, #16
     17a:	bd80      	pop	{r7, pc}
     17c:	41004400 	.word	0x41004400

00000180 <port_get_group_from_gpio_pin>:

	return status;
     180:	b580      	push	{r7, lr}
     182:	b082      	sub	sp, #8
     184:	af00      	add	r7, sp, #0
}
     186:	0002      	movs	r2, r0
     188:	1dfb      	adds	r3, r7, #7
     18a:	701a      	strb	r2, [r3, #0]
     18c:	1dfb      	adds	r3, r7, #7
     18e:	781b      	ldrb	r3, [r3, #0]
     190:	0018      	movs	r0, r3
     192:	4b03      	ldr	r3, [pc, #12]	; (1a0 <port_get_group_from_gpio_pin+0x20>)
     194:	4798      	blx	r3
     196:	0003      	movs	r3, r0
     198:	0018      	movs	r0, r3
     19a:	46bd      	mov	sp, r7
     19c:	b002      	add	sp, #8
     19e:	bd80      	pop	{r7, pc}
     1a0:	00000121 	.word	0x00000121

000001a4 <port_pin_set_output_level>:
     1a4:	b580      	push	{r7, lr}
     1a6:	b084      	sub	sp, #16
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     1a8:	af00      	add	r7, sp, #0
     1aa:	0002      	movs	r2, r0
     1ac:	1dfb      	adds	r3, r7, #7
     1ae:	701a      	strb	r2, [r3, #0]
     1b0:	1dbb      	adds	r3, r7, #6
     1b2:	1c0a      	adds	r2, r1, #0
     1b4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     1b6:	1dfb      	adds	r3, r7, #7
     1b8:	781b      	ldrb	r3, [r3, #0]
     1ba:	0018      	movs	r0, r3
     1bc:	4b0d      	ldr	r3, [pc, #52]	; (1f4 <port_pin_set_output_level+0x50>)
     1be:	4798      	blx	r3
     1c0:	0003      	movs	r3, r0
     1c2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1c4:	1dfb      	adds	r3, r7, #7
     1c6:	781b      	ldrb	r3, [r3, #0]
     1c8:	221f      	movs	r2, #31
     1ca:	4013      	ands	r3, r2
     1cc:	2201      	movs	r2, #1
     1ce:	409a      	lsls	r2, r3
     1d0:	0013      	movs	r3, r2
     1d2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     1d4:	1dbb      	adds	r3, r7, #6
     1d6:	781b      	ldrb	r3, [r3, #0]
     1d8:	2b00      	cmp	r3, #0
     1da:	d003      	beq.n	1e4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     1dc:	68fb      	ldr	r3, [r7, #12]
     1de:	68ba      	ldr	r2, [r7, #8]
     1e0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     1e2:	e002      	b.n	1ea <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     1e4:	68fb      	ldr	r3, [r7, #12]
     1e6:	68ba      	ldr	r2, [r7, #8]
     1e8:	615a      	str	r2, [r3, #20]
}
     1ea:	46c0      	nop			; (mov r8, r8)
     1ec:	46bd      	mov	sp, r7
     1ee:	b004      	add	sp, #16
     1f0:	bd80      	pop	{r7, pc}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	00000181 	.word	0x00000181

000001f8 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
     1f8:	b580      	push	{r7, lr}
     1fa:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     1fc:	4b02      	ldr	r3, [pc, #8]	; (208 <system_interrupt_enter_critical_section+0x10>)
     1fe:	4798      	blx	r3
}
     200:	46c0      	nop			; (mov r8, r8)
     202:	46bd      	mov	sp, r7
     204:	bd80      	pop	{r7, pc}
     206:	46c0      	nop			; (mov r8, r8)
     208:	0000081d 	.word	0x0000081d

0000020c <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
     20c:	b580      	push	{r7, lr}
     20e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     210:	4b02      	ldr	r3, [pc, #8]	; (21c <system_interrupt_leave_critical_section+0x10>)
     212:	4798      	blx	r3
}
     214:	46c0      	nop			; (mov r8, r8)
     216:	46bd      	mov	sp, r7
     218:	bd80      	pop	{r7, pc}
     21a:	46c0      	nop			; (mov r8, r8)
     21c:	00000871 	.word	0x00000871

00000220 <spi_lock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline enum status_code spi_lock(struct spi_module *const module)
{
     220:	b580      	push	{r7, lr}
     222:	b084      	sub	sp, #16
     224:	af00      	add	r7, sp, #0
     226:	6078      	str	r0, [r7, #4]
	enum status_code status;

	system_interrupt_enter_critical_section();
     228:	4b0d      	ldr	r3, [pc, #52]	; (260 <spi_lock+0x40>)
     22a:	4798      	blx	r3

	if (module->locked) {
     22c:	687b      	ldr	r3, [r7, #4]
     22e:	791b      	ldrb	r3, [r3, #4]
     230:	b2db      	uxtb	r3, r3
     232:	2b00      	cmp	r3, #0
     234:	d004      	beq.n	240 <spi_lock+0x20>
		status = STATUS_BUSY;
     236:	230f      	movs	r3, #15
     238:	18fb      	adds	r3, r7, r3
     23a:	2205      	movs	r2, #5
     23c:	701a      	strb	r2, [r3, #0]
     23e:	e006      	b.n	24e <spi_lock+0x2e>
	} else {
		module->locked = true;
     240:	687b      	ldr	r3, [r7, #4]
     242:	2201      	movs	r2, #1
     244:	711a      	strb	r2, [r3, #4]
		status = STATUS_OK;
     246:	230f      	movs	r3, #15
     248:	18fb      	adds	r3, r7, r3
     24a:	2200      	movs	r2, #0
     24c:	701a      	strb	r2, [r3, #0]
	}

	system_interrupt_leave_critical_section();
     24e:	4b05      	ldr	r3, [pc, #20]	; (264 <spi_lock+0x44>)
     250:	4798      	blx	r3

	return status;
     252:	230f      	movs	r3, #15
     254:	18fb      	adds	r3, r7, r3
     256:	781b      	ldrb	r3, [r3, #0]
}
     258:	0018      	movs	r0, r3
     25a:	46bd      	mov	sp, r7
     25c:	b004      	add	sp, #16
     25e:	bd80      	pop	{r7, pc}
     260:	000001f9 	.word	0x000001f9
     264:	0000020d 	.word	0x0000020d

00000268 <spi_unlock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
     268:	b580      	push	{r7, lr}
     26a:	b082      	sub	sp, #8
     26c:	af00      	add	r7, sp, #0
     26e:	6078      	str	r0, [r7, #4]
	module->locked = false;
     270:	687b      	ldr	r3, [r7, #4]
     272:	2200      	movs	r2, #0
     274:	711a      	strb	r2, [r3, #4]
}
     276:	46c0      	nop			; (mov r8, r8)
     278:	46bd      	mov	sp, r7
     27a:	b002      	add	sp, #8
     27c:	bd80      	pop	{r7, pc}
	...

00000280 <_at25dfx_get_device_id>:
{
     280:	b580      	push	{r7, lr}
     282:	b082      	sub	sp, #8
     284:	af00      	add	r7, sp, #0
     286:	0002      	movs	r2, r0
     288:	1dfb      	adds	r3, r7, #7
     28a:	701a      	strb	r2, [r3, #0]
	switch (type) {
     28c:	1dfb      	adds	r3, r7, #7
     28e:	781b      	ldrb	r3, [r3, #0]
     290:	2b09      	cmp	r3, #9
     292:	d818      	bhi.n	2c6 <_at25dfx_get_device_id+0x46>
     294:	009a      	lsls	r2, r3, #2
     296:	4b0e      	ldr	r3, [pc, #56]	; (2d0 <_at25dfx_get_device_id+0x50>)
     298:	18d3      	adds	r3, r2, r3
     29a:	681b      	ldr	r3, [r3, #0]
     29c:	469f      	mov	pc, r3
		return 0x00651f;
     29e:	4b0d      	ldr	r3, [pc, #52]	; (2d4 <_at25dfx_get_device_id+0x54>)
     2a0:	e012      	b.n	2c8 <_at25dfx_get_device_id+0x48>
		return 0x00431f;
     2a2:	4b0d      	ldr	r3, [pc, #52]	; (2d8 <_at25dfx_get_device_id+0x58>)
     2a4:	e010      	b.n	2c8 <_at25dfx_get_device_id+0x48>
		return 0x01441f;
     2a6:	4b0d      	ldr	r3, [pc, #52]	; (2dc <_at25dfx_get_device_id+0x5c>)
     2a8:	e00e      	b.n	2c8 <_at25dfx_get_device_id+0x48>
		return 0x02451f;
     2aa:	4b0d      	ldr	r3, [pc, #52]	; (2e0 <_at25dfx_get_device_id+0x60>)
     2ac:	e00c      	b.n	2c8 <_at25dfx_get_device_id+0x48>
		return 0x01451f;
     2ae:	4b0d      	ldr	r3, [pc, #52]	; (2e4 <_at25dfx_get_device_id+0x64>)
     2b0:	e00a      	b.n	2c8 <_at25dfx_get_device_id+0x48>
		return 0x02461f;
     2b2:	4b0d      	ldr	r3, [pc, #52]	; (2e8 <_at25dfx_get_device_id+0x68>)
     2b4:	e008      	b.n	2c8 <_at25dfx_get_device_id+0x48>
		return 0x03461f;
     2b6:	4b0d      	ldr	r3, [pc, #52]	; (2ec <_at25dfx_get_device_id+0x6c>)
     2b8:	e006      	b.n	2c8 <_at25dfx_get_device_id+0x48>
		return 0x00861f;
     2ba:	4b0d      	ldr	r3, [pc, #52]	; (2f0 <_at25dfx_get_device_id+0x70>)
     2bc:	e004      	b.n	2c8 <_at25dfx_get_device_id+0x48>
		return 0x01471f;
     2be:	4b0d      	ldr	r3, [pc, #52]	; (2f4 <_at25dfx_get_device_id+0x74>)
     2c0:	e002      	b.n	2c8 <_at25dfx_get_device_id+0x48>
		return 0x00481f;
     2c2:	4b0d      	ldr	r3, [pc, #52]	; (2f8 <_at25dfx_get_device_id+0x78>)
     2c4:	e000      	b.n	2c8 <_at25dfx_get_device_id+0x48>
		return 0;
     2c6:	2300      	movs	r3, #0
}
     2c8:	0018      	movs	r0, r3
     2ca:	46bd      	mov	sp, r7
     2cc:	b002      	add	sp, #8
     2ce:	bd80      	pop	{r7, pc}
     2d0:	00005a4c 	.word	0x00005a4c
     2d4:	0000651f 	.word	0x0000651f
     2d8:	0000431f 	.word	0x0000431f
     2dc:	0001441f 	.word	0x0001441f
     2e0:	0002451f 	.word	0x0002451f
     2e4:	0001451f 	.word	0x0001451f
     2e8:	0002461f 	.word	0x0002461f
     2ec:	0003461f 	.word	0x0003461f
     2f0:	0000861f 	.word	0x0000861f
     2f4:	0001471f 	.word	0x0001471f
     2f8:	0000481f 	.word	0x0000481f

000002fc <_at25dfx_get_device_size>:
{
     2fc:	b580      	push	{r7, lr}
     2fe:	b082      	sub	sp, #8
     300:	af00      	add	r7, sp, #0
     302:	0002      	movs	r2, r0
     304:	1dfb      	adds	r3, r7, #7
     306:	701a      	strb	r2, [r3, #0]
	switch (type) {
     308:	1dfb      	adds	r3, r7, #7
     30a:	781b      	ldrb	r3, [r3, #0]
     30c:	2b09      	cmp	r3, #9
     30e:	d819      	bhi.n	344 <_at25dfx_get_device_size+0x48>
     310:	009a      	lsls	r2, r3, #2
     312:	4b0f      	ldr	r3, [pc, #60]	; (350 <_at25dfx_get_device_size+0x54>)
     314:	18d3      	adds	r3, r2, r3
     316:	681b      	ldr	r3, [r3, #0]
     318:	469f      	mov	pc, r3
		return 64 * 1024UL;
     31a:	2380      	movs	r3, #128	; 0x80
     31c:	025b      	lsls	r3, r3, #9
     31e:	e012      	b.n	346 <_at25dfx_get_device_size+0x4a>
		return 256 * 1024UL;
     320:	2380      	movs	r3, #128	; 0x80
     322:	02db      	lsls	r3, r3, #11
     324:	e00f      	b.n	346 <_at25dfx_get_device_size+0x4a>
		return 512 * 1024UL;
     326:	2380      	movs	r3, #128	; 0x80
     328:	031b      	lsls	r3, r3, #12
     32a:	e00c      	b.n	346 <_at25dfx_get_device_size+0x4a>
		return 1024 * 1024UL;
     32c:	2380      	movs	r3, #128	; 0x80
     32e:	035b      	lsls	r3, r3, #13
     330:	e009      	b.n	346 <_at25dfx_get_device_size+0x4a>
		return 2048 * 1024UL;
     332:	2380      	movs	r3, #128	; 0x80
     334:	039b      	lsls	r3, r3, #14
     336:	e006      	b.n	346 <_at25dfx_get_device_size+0x4a>
		return 4096 * 1024UL;
     338:	2380      	movs	r3, #128	; 0x80
     33a:	03db      	lsls	r3, r3, #15
     33c:	e003      	b.n	346 <_at25dfx_get_device_size+0x4a>
		return 8192 * 1024UL;
     33e:	2380      	movs	r3, #128	; 0x80
     340:	041b      	lsls	r3, r3, #16
     342:	e000      	b.n	346 <_at25dfx_get_device_size+0x4a>
		return 0;
     344:	2300      	movs	r3, #0
}
     346:	0018      	movs	r0, r3
     348:	46bd      	mov	sp, r7
     34a:	b002      	add	sp, #8
     34c:	bd80      	pop	{r7, pc}
     34e:	46c0      	nop			; (mov r8, r8)
     350:	00005a74 	.word	0x00005a74

00000354 <_at25dfx_chip_select>:
{
     354:	b580      	push	{r7, lr}
     356:	b082      	sub	sp, #8
     358:	af00      	add	r7, sp, #0
     35a:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, false);
     35c:	687b      	ldr	r3, [r7, #4]
     35e:	795b      	ldrb	r3, [r3, #5]
     360:	2100      	movs	r1, #0
     362:	0018      	movs	r0, r3
     364:	4b02      	ldr	r3, [pc, #8]	; (370 <_at25dfx_chip_select+0x1c>)
     366:	4798      	blx	r3
}
     368:	46c0      	nop			; (mov r8, r8)
     36a:	46bd      	mov	sp, r7
     36c:	b002      	add	sp, #8
     36e:	bd80      	pop	{r7, pc}
     370:	000001a5 	.word	0x000001a5

00000374 <_at25dfx_chip_deselect>:
{
     374:	b580      	push	{r7, lr}
     376:	b082      	sub	sp, #8
     378:	af00      	add	r7, sp, #0
     37a:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, true);
     37c:	687b      	ldr	r3, [r7, #4]
     37e:	795b      	ldrb	r3, [r3, #5]
     380:	2101      	movs	r1, #1
     382:	0018      	movs	r0, r3
     384:	4b02      	ldr	r3, [pc, #8]	; (390 <_at25dfx_chip_deselect+0x1c>)
     386:	4798      	blx	r3
}
     388:	46c0      	nop			; (mov r8, r8)
     38a:	46bd      	mov	sp, r7
     38c:	b002      	add	sp, #8
     38e:	bd80      	pop	{r7, pc}
     390:	000001a5 	.word	0x000001a5

00000394 <_at25dfx_chip_issue_read_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_read_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
     394:	b084      	sub	sp, #16
     396:	b5b0      	push	{r4, r5, r7, lr}
     398:	b084      	sub	sp, #16
     39a:	af00      	add	r7, sp, #0
     39c:	6078      	str	r0, [r7, #4]
     39e:	2004      	movs	r0, #4
     3a0:	2420      	movs	r4, #32
     3a2:	46a4      	mov	ip, r4
     3a4:	44bc      	add	ip, r7
     3a6:	4460      	add	r0, ip
     3a8:	6001      	str	r1, [r0, #0]
     3aa:	6042      	str	r2, [r0, #4]
     3ac:	6083      	str	r3, [r0, #8]
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
     3ae:	2304      	movs	r3, #4
     3b0:	2220      	movs	r2, #32
     3b2:	4694      	mov	ip, r2
     3b4:	44bc      	add	ip, r7
     3b6:	4463      	add	r3, ip
     3b8:	781a      	ldrb	r2, [r3, #0]
     3ba:	2308      	movs	r3, #8
     3bc:	18fb      	adds	r3, r7, r3
     3be:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
     3c0:	2304      	movs	r3, #4
     3c2:	2220      	movs	r2, #32
     3c4:	4694      	mov	ip, r2
     3c6:	44bc      	add	ip, r7
     3c8:	4463      	add	r3, ip
     3ca:	785b      	ldrb	r3, [r3, #1]
     3cc:	2b01      	cmp	r3, #1
     3ce:	d91f      	bls.n	410 <_at25dfx_chip_issue_read_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
     3d0:	2304      	movs	r3, #4
     3d2:	2220      	movs	r2, #32
     3d4:	4694      	mov	ip, r2
     3d6:	44bc      	add	ip, r7
     3d8:	4463      	add	r3, ip
     3da:	685b      	ldr	r3, [r3, #4]
     3dc:	b2da      	uxtb	r2, r3
     3de:	2308      	movs	r3, #8
     3e0:	18fb      	adds	r3, r7, r3
     3e2:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     3e4:	2304      	movs	r3, #4
     3e6:	2220      	movs	r2, #32
     3e8:	4694      	mov	ip, r2
     3ea:	44bc      	add	ip, r7
     3ec:	4463      	add	r3, ip
     3ee:	685b      	ldr	r3, [r3, #4]
     3f0:	0a1b      	lsrs	r3, r3, #8
     3f2:	b2da      	uxtb	r2, r3
     3f4:	2308      	movs	r3, #8
     3f6:	18fb      	adds	r3, r7, r3
     3f8:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     3fa:	2304      	movs	r3, #4
     3fc:	2220      	movs	r2, #32
     3fe:	4694      	mov	ip, r2
     400:	44bc      	add	ip, r7
     402:	4463      	add	r3, ip
     404:	685b      	ldr	r3, [r3, #4]
     406:	0c1b      	lsrs	r3, r3, #16
     408:	b2da      	uxtb	r2, r3
     40a:	2308      	movs	r3, #8
     40c:	18fb      	adds	r3, r7, r3
     40e:	705a      	strb	r2, [r3, #1]
	}
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);
     410:	687b      	ldr	r3, [r7, #4]
     412:	0018      	movs	r0, r3
     414:	4b1d      	ldr	r3, [pc, #116]	; (48c <_at25dfx_chip_issue_read_command_wait+0xf8>)
     416:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     418:	687b      	ldr	r3, [r7, #4]
     41a:	6818      	ldr	r0, [r3, #0]
     41c:	2304      	movs	r3, #4
     41e:	2220      	movs	r2, #32
     420:	4694      	mov	ip, r2
     422:	44bc      	add	ip, r7
     424:	4463      	add	r3, ip
     426:	785b      	ldrb	r3, [r3, #1]
     428:	b29a      	uxth	r2, r3
     42a:	230f      	movs	r3, #15
     42c:	18fc      	adds	r4, r7, r3
     42e:	2308      	movs	r3, #8
     430:	18fb      	adds	r3, r7, r3
     432:	0019      	movs	r1, r3
     434:	4b16      	ldr	r3, [pc, #88]	; (490 <_at25dfx_chip_issue_read_command_wait+0xfc>)
     436:	4798      	blx	r3
     438:	0003      	movs	r3, r0
     43a:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
     43c:	2304      	movs	r3, #4
     43e:	2220      	movs	r2, #32
     440:	4694      	mov	ip, r2
     442:	44bc      	add	ip, r7
     444:	4463      	add	r3, ip
     446:	899b      	ldrh	r3, [r3, #12]
     448:	2b00      	cmp	r3, #0
     44a:	d014      	beq.n	476 <_at25dfx_chip_issue_read_command_wait+0xe2>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
     44c:	687b      	ldr	r3, [r7, #4]
     44e:	6818      	ldr	r0, [r3, #0]
     450:	2304      	movs	r3, #4
     452:	2220      	movs	r2, #32
     454:	4694      	mov	ip, r2
     456:	44bc      	add	ip, r7
     458:	4463      	add	r3, ip
     45a:	6899      	ldr	r1, [r3, #8]
     45c:	2304      	movs	r3, #4
     45e:	2220      	movs	r2, #32
     460:	4694      	mov	ip, r2
     462:	44bc      	add	ip, r7
     464:	4463      	add	r3, ip
     466:	899a      	ldrh	r2, [r3, #12]
     468:	230f      	movs	r3, #15
     46a:	18fc      	adds	r4, r7, r3
     46c:	2300      	movs	r3, #0
     46e:	4d09      	ldr	r5, [pc, #36]	; (494 <_at25dfx_chip_issue_read_command_wait+0x100>)
     470:	47a8      	blx	r5
     472:	0003      	movs	r3, r0
     474:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
     476:	687b      	ldr	r3, [r7, #4]
     478:	0018      	movs	r0, r3
     47a:	4b07      	ldr	r3, [pc, #28]	; (498 <_at25dfx_chip_issue_read_command_wait+0x104>)
     47c:	4798      	blx	r3
}
     47e:	46c0      	nop			; (mov r8, r8)
     480:	46bd      	mov	sp, r7
     482:	b004      	add	sp, #16
     484:	bcb0      	pop	{r4, r5, r7}
     486:	bc08      	pop	{r3}
     488:	b004      	add	sp, #16
     48a:	4718      	bx	r3
     48c:	00000355 	.word	0x00000355
     490:	00001081 	.word	0x00001081
     494:	00000ec5 	.word	0x00000ec5
     498:	00000375 	.word	0x00000375

0000049c <_at25dfx_chip_issue_write_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_write_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
     49c:	b084      	sub	sp, #16
     49e:	b590      	push	{r4, r7, lr}
     4a0:	b085      	sub	sp, #20
     4a2:	af00      	add	r7, sp, #0
     4a4:	6078      	str	r0, [r7, #4]
     4a6:	2004      	movs	r0, #4
     4a8:	2420      	movs	r4, #32
     4aa:	46a4      	mov	ip, r4
     4ac:	44bc      	add	ip, r7
     4ae:	4460      	add	r0, ip
     4b0:	6001      	str	r1, [r0, #0]
     4b2:	6042      	str	r2, [r0, #4]
     4b4:	6083      	str	r3, [r0, #8]

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
     4b6:	2304      	movs	r3, #4
     4b8:	2220      	movs	r2, #32
     4ba:	4694      	mov	ip, r2
     4bc:	44bc      	add	ip, r7
     4be:	4463      	add	r3, ip
     4c0:	781a      	ldrb	r2, [r3, #0]
     4c2:	2308      	movs	r3, #8
     4c4:	18fb      	adds	r3, r7, r3
     4c6:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
     4c8:	2304      	movs	r3, #4
     4ca:	2220      	movs	r2, #32
     4cc:	4694      	mov	ip, r2
     4ce:	44bc      	add	ip, r7
     4d0:	4463      	add	r3, ip
     4d2:	785b      	ldrb	r3, [r3, #1]
     4d4:	2b01      	cmp	r3, #1
     4d6:	d91f      	bls.n	518 <_at25dfx_chip_issue_write_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
     4d8:	2304      	movs	r3, #4
     4da:	2220      	movs	r2, #32
     4dc:	4694      	mov	ip, r2
     4de:	44bc      	add	ip, r7
     4e0:	4463      	add	r3, ip
     4e2:	685b      	ldr	r3, [r3, #4]
     4e4:	b2da      	uxtb	r2, r3
     4e6:	2308      	movs	r3, #8
     4e8:	18fb      	adds	r3, r7, r3
     4ea:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     4ec:	2304      	movs	r3, #4
     4ee:	2220      	movs	r2, #32
     4f0:	4694      	mov	ip, r2
     4f2:	44bc      	add	ip, r7
     4f4:	4463      	add	r3, ip
     4f6:	685b      	ldr	r3, [r3, #4]
     4f8:	0a1b      	lsrs	r3, r3, #8
     4fa:	b2da      	uxtb	r2, r3
     4fc:	2308      	movs	r3, #8
     4fe:	18fb      	adds	r3, r7, r3
     500:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     502:	2304      	movs	r3, #4
     504:	2220      	movs	r2, #32
     506:	4694      	mov	ip, r2
     508:	44bc      	add	ip, r7
     50a:	4463      	add	r3, ip
     50c:	685b      	ldr	r3, [r3, #4]
     50e:	0c1b      	lsrs	r3, r3, #16
     510:	b2da      	uxtb	r2, r3
     512:	2308      	movs	r3, #8
     514:	18fb      	adds	r3, r7, r3
     516:	705a      	strb	r2, [r3, #1]
	}

	_at25dfx_chip_select(chip);
     518:	687b      	ldr	r3, [r7, #4]
     51a:	0018      	movs	r0, r3
     51c:	4b1d      	ldr	r3, [pc, #116]	; (594 <_at25dfx_chip_issue_write_command_wait+0xf8>)
     51e:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     520:	687b      	ldr	r3, [r7, #4]
     522:	6818      	ldr	r0, [r3, #0]
     524:	2304      	movs	r3, #4
     526:	2220      	movs	r2, #32
     528:	4694      	mov	ip, r2
     52a:	44bc      	add	ip, r7
     52c:	4463      	add	r3, ip
     52e:	785b      	ldrb	r3, [r3, #1]
     530:	b29a      	uxth	r2, r3
     532:	230f      	movs	r3, #15
     534:	18fc      	adds	r4, r7, r3
     536:	2308      	movs	r3, #8
     538:	18fb      	adds	r3, r7, r3
     53a:	0019      	movs	r1, r3
     53c:	4b16      	ldr	r3, [pc, #88]	; (598 <_at25dfx_chip_issue_write_command_wait+0xfc>)
     53e:	4798      	blx	r3
     540:	0003      	movs	r3, r0
     542:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
     544:	2304      	movs	r3, #4
     546:	2220      	movs	r2, #32
     548:	4694      	mov	ip, r2
     54a:	44bc      	add	ip, r7
     54c:	4463      	add	r3, ip
     54e:	899b      	ldrh	r3, [r3, #12]
     550:	2b00      	cmp	r3, #0
     552:	d014      	beq.n	57e <_at25dfx_chip_issue_write_command_wait+0xe2>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     554:	687b      	ldr	r3, [r7, #4]
     556:	6818      	ldr	r0, [r3, #0]
     558:	2304      	movs	r3, #4
     55a:	2220      	movs	r2, #32
     55c:	4694      	mov	ip, r2
     55e:	44bc      	add	ip, r7
     560:	4463      	add	r3, ip
     562:	6899      	ldr	r1, [r3, #8]
     564:	2304      	movs	r3, #4
     566:	2220      	movs	r2, #32
     568:	4694      	mov	ip, r2
     56a:	44bc      	add	ip, r7
     56c:	4463      	add	r3, ip
     56e:	899b      	ldrh	r3, [r3, #12]
     570:	220f      	movs	r2, #15
     572:	18bc      	adds	r4, r7, r2
     574:	001a      	movs	r2, r3
     576:	4b08      	ldr	r3, [pc, #32]	; (598 <_at25dfx_chip_issue_write_command_wait+0xfc>)
     578:	4798      	blx	r3
     57a:	0003      	movs	r3, r0
     57c:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
     57e:	687b      	ldr	r3, [r7, #4]
     580:	0018      	movs	r0, r3
     582:	4b06      	ldr	r3, [pc, #24]	; (59c <_at25dfx_chip_issue_write_command_wait+0x100>)
     584:	4798      	blx	r3
}
     586:	46c0      	nop			; (mov r8, r8)
     588:	46bd      	mov	sp, r7
     58a:	b005      	add	sp, #20
     58c:	bc90      	pop	{r4, r7}
     58e:	bc08      	pop	{r3}
     590:	b004      	add	sp, #16
     592:	4718      	bx	r3
     594:	00000355 	.word	0x00000355
     598:	00001081 	.word	0x00001081
     59c:	00000375 	.word	0x00000375

000005a0 <at25dfx_chip_check_presence>:
{
     5a0:	b590      	push	{r4, r7, lr}
     5a2:	b08b      	sub	sp, #44	; 0x2c
     5a4:	af02      	add	r7, sp, #8
     5a6:	6078      	str	r0, [r7, #4]
	uint32_t id = 0;
     5a8:	2300      	movs	r3, #0
     5aa:	60bb      	str	r3, [r7, #8]
	status = _at25dfx_spi_lock(chip->spi);
     5ac:	687b      	ldr	r3, [r7, #4]
     5ae:	681b      	ldr	r3, [r3, #0]
     5b0:	221f      	movs	r2, #31
     5b2:	18bc      	adds	r4, r7, r2
     5b4:	0018      	movs	r0, r3
     5b6:	4b21      	ldr	r3, [pc, #132]	; (63c <at25dfx_chip_check_presence+0x9c>)
     5b8:	4798      	blx	r3
     5ba:	0003      	movs	r3, r0
     5bc:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     5be:	231f      	movs	r3, #31
     5c0:	18fb      	adds	r3, r7, r3
     5c2:	781b      	ldrb	r3, [r3, #0]
     5c4:	2b05      	cmp	r3, #5
     5c6:	d103      	bne.n	5d0 <at25dfx_chip_check_presence+0x30>
		return status;
     5c8:	231f      	movs	r3, #31
     5ca:	18fb      	adds	r3, r7, r3
     5cc:	781b      	ldrb	r3, [r3, #0]
     5ce:	e030      	b.n	632 <at25dfx_chip_check_presence+0x92>
	cmd.opcode = AT25DFX_COMMAND_READ_DEVICE_ID;
     5d0:	230c      	movs	r3, #12
     5d2:	18fb      	adds	r3, r7, r3
     5d4:	229f      	movs	r2, #159	; 0x9f
     5d6:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     5d8:	230c      	movs	r3, #12
     5da:	18fb      	adds	r3, r7, r3
     5dc:	2201      	movs	r2, #1
     5de:	705a      	strb	r2, [r3, #1]
	cmd.data.rx = (uint8_t *)&id;
     5e0:	230c      	movs	r3, #12
     5e2:	18fb      	adds	r3, r7, r3
     5e4:	2208      	movs	r2, #8
     5e6:	18ba      	adds	r2, r7, r2
     5e8:	609a      	str	r2, [r3, #8]
	cmd.length = 3;
     5ea:	230c      	movs	r3, #12
     5ec:	18fb      	adds	r3, r7, r3
     5ee:	2203      	movs	r2, #3
     5f0:	819a      	strh	r2, [r3, #12]
	cmd.address = (at25dfx_address_t)NULL;
     5f2:	230c      	movs	r3, #12
     5f4:	18fb      	adds	r3, r7, r3
     5f6:	2200      	movs	r2, #0
     5f8:	605a      	str	r2, [r3, #4]
	_at25dfx_chip_issue_read_command_wait(chip, cmd);
     5fa:	230c      	movs	r3, #12
     5fc:	18fb      	adds	r3, r7, r3
     5fe:	6878      	ldr	r0, [r7, #4]
     600:	466a      	mov	r2, sp
     602:	68d9      	ldr	r1, [r3, #12]
     604:	6011      	str	r1, [r2, #0]
     606:	6819      	ldr	r1, [r3, #0]
     608:	685a      	ldr	r2, [r3, #4]
     60a:	689b      	ldr	r3, [r3, #8]
     60c:	4c0c      	ldr	r4, [pc, #48]	; (640 <at25dfx_chip_check_presence+0xa0>)
     60e:	47a0      	blx	r4
	_at25dfx_spi_unlock(chip->spi);
     610:	687b      	ldr	r3, [r7, #4]
     612:	681b      	ldr	r3, [r3, #0]
     614:	0018      	movs	r0, r3
     616:	4b0b      	ldr	r3, [pc, #44]	; (644 <at25dfx_chip_check_presence+0xa4>)
     618:	4798      	blx	r3
	if (id == _at25dfx_get_device_id(chip->type)) {
     61a:	687b      	ldr	r3, [r7, #4]
     61c:	791b      	ldrb	r3, [r3, #4]
     61e:	0018      	movs	r0, r3
     620:	4b09      	ldr	r3, [pc, #36]	; (648 <at25dfx_chip_check_presence+0xa8>)
     622:	4798      	blx	r3
     624:	0002      	movs	r2, r0
     626:	68bb      	ldr	r3, [r7, #8]
     628:	429a      	cmp	r2, r3
     62a:	d101      	bne.n	630 <at25dfx_chip_check_presence+0x90>
		return STATUS_OK;
     62c:	2300      	movs	r3, #0
     62e:	e000      	b.n	632 <at25dfx_chip_check_presence+0x92>
		return STATUS_ERR_NOT_FOUND;
     630:	2314      	movs	r3, #20
}
     632:	0018      	movs	r0, r3
     634:	46bd      	mov	sp, r7
     636:	b009      	add	sp, #36	; 0x24
     638:	bd90      	pop	{r4, r7, pc}
     63a:	46c0      	nop			; (mov r8, r8)
     63c:	00000221 	.word	0x00000221
     640:	00000395 	.word	0x00000395
     644:	00000269 	.word	0x00000269
     648:	00000281 	.word	0x00000281

0000064c <at25dfx_chip_read_buffer>:
{
     64c:	b590      	push	{r4, r7, lr}
     64e:	b08d      	sub	sp, #52	; 0x34
     650:	af02      	add	r7, sp, #8
     652:	60f8      	str	r0, [r7, #12]
     654:	60b9      	str	r1, [r7, #8]
     656:	607a      	str	r2, [r7, #4]
     658:	001a      	movs	r2, r3
     65a:	1cbb      	adds	r3, r7, #2
     65c:	801a      	strh	r2, [r3, #0]
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     65e:	1cbb      	adds	r3, r7, #2
     660:	881a      	ldrh	r2, [r3, #0]
     662:	68bb      	ldr	r3, [r7, #8]
     664:	18d4      	adds	r4, r2, r3
     666:	68fb      	ldr	r3, [r7, #12]
     668:	791b      	ldrb	r3, [r3, #4]
     66a:	0018      	movs	r0, r3
     66c:	4b21      	ldr	r3, [pc, #132]	; (6f4 <at25dfx_chip_read_buffer+0xa8>)
     66e:	4798      	blx	r3
     670:	0003      	movs	r3, r0
     672:	429c      	cmp	r4, r3
     674:	d901      	bls.n	67a <at25dfx_chip_read_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
     676:	2317      	movs	r3, #23
     678:	e037      	b.n	6ea <at25dfx_chip_read_buffer+0x9e>
	status = _at25dfx_spi_lock(chip->spi);
     67a:	68fb      	ldr	r3, [r7, #12]
     67c:	681b      	ldr	r3, [r3, #0]
     67e:	2227      	movs	r2, #39	; 0x27
     680:	18bc      	adds	r4, r7, r2
     682:	0018      	movs	r0, r3
     684:	4b1c      	ldr	r3, [pc, #112]	; (6f8 <at25dfx_chip_read_buffer+0xac>)
     686:	4798      	blx	r3
     688:	0003      	movs	r3, r0
     68a:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     68c:	2327      	movs	r3, #39	; 0x27
     68e:	18fb      	adds	r3, r7, r3
     690:	781b      	ldrb	r3, [r3, #0]
     692:	2b05      	cmp	r3, #5
     694:	d103      	bne.n	69e <at25dfx_chip_read_buffer+0x52>
		return status;
     696:	2327      	movs	r3, #39	; 0x27
     698:	18fb      	adds	r3, r7, r3
     69a:	781b      	ldrb	r3, [r3, #0]
     69c:	e025      	b.n	6ea <at25dfx_chip_read_buffer+0x9e>
	cmd.opcode = AT25DFX_COMMAND_READ_ARRAY;
     69e:	2314      	movs	r3, #20
     6a0:	18fb      	adds	r3, r7, r3
     6a2:	220b      	movs	r2, #11
     6a4:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 5;
     6a6:	2314      	movs	r3, #20
     6a8:	18fb      	adds	r3, r7, r3
     6aa:	2205      	movs	r2, #5
     6ac:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
     6ae:	2314      	movs	r3, #20
     6b0:	18fb      	adds	r3, r7, r3
     6b2:	68ba      	ldr	r2, [r7, #8]
     6b4:	605a      	str	r2, [r3, #4]
	cmd.data.rx = (uint8_t *)data;
     6b6:	2314      	movs	r3, #20
     6b8:	18fb      	adds	r3, r7, r3
     6ba:	687a      	ldr	r2, [r7, #4]
     6bc:	609a      	str	r2, [r3, #8]
	cmd.length = length;
     6be:	2314      	movs	r3, #20
     6c0:	18fb      	adds	r3, r7, r3
     6c2:	1cba      	adds	r2, r7, #2
     6c4:	8812      	ldrh	r2, [r2, #0]
     6c6:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_read_command_wait(chip, cmd);
     6c8:	2314      	movs	r3, #20
     6ca:	18fb      	adds	r3, r7, r3
     6cc:	68f8      	ldr	r0, [r7, #12]
     6ce:	466a      	mov	r2, sp
     6d0:	68d9      	ldr	r1, [r3, #12]
     6d2:	6011      	str	r1, [r2, #0]
     6d4:	6819      	ldr	r1, [r3, #0]
     6d6:	685a      	ldr	r2, [r3, #4]
     6d8:	689b      	ldr	r3, [r3, #8]
     6da:	4c08      	ldr	r4, [pc, #32]	; (6fc <at25dfx_chip_read_buffer+0xb0>)
     6dc:	47a0      	blx	r4
	_at25dfx_spi_unlock(chip->spi);
     6de:	68fb      	ldr	r3, [r7, #12]
     6e0:	681b      	ldr	r3, [r3, #0]
     6e2:	0018      	movs	r0, r3
     6e4:	4b06      	ldr	r3, [pc, #24]	; (700 <at25dfx_chip_read_buffer+0xb4>)
     6e6:	4798      	blx	r3
	return STATUS_OK;
     6e8:	2300      	movs	r3, #0
}
     6ea:	0018      	movs	r0, r3
     6ec:	46bd      	mov	sp, r7
     6ee:	b00b      	add	sp, #44	; 0x2c
     6f0:	bd90      	pop	{r4, r7, pc}
     6f2:	46c0      	nop			; (mov r8, r8)
     6f4:	000002fd 	.word	0x000002fd
     6f8:	00000221 	.word	0x00000221
     6fc:	00000395 	.word	0x00000395
     700:	00000269 	.word	0x00000269

00000704 <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
     704:	b590      	push	{r4, r7, lr}
     706:	b08b      	sub	sp, #44	; 0x2c
     708:	af02      	add	r7, sp, #8
     70a:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     70c:	687b      	ldr	r3, [r7, #4]
     70e:	681b      	ldr	r3, [r3, #0]
     710:	221f      	movs	r2, #31
     712:	18bc      	adds	r4, r7, r2
     714:	0018      	movs	r0, r3
     716:	4b1b      	ldr	r3, [pc, #108]	; (784 <at25dfx_chip_sleep+0x80>)
     718:	4798      	blx	r3
     71a:	0003      	movs	r3, r0
     71c:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     71e:	231f      	movs	r3, #31
     720:	18fb      	adds	r3, r7, r3
     722:	781b      	ldrb	r3, [r3, #0]
     724:	2b05      	cmp	r3, #5
     726:	d103      	bne.n	730 <at25dfx_chip_sleep+0x2c>
		return status;
     728:	231f      	movs	r3, #31
     72a:	18fb      	adds	r3, r7, r3
     72c:	781b      	ldrb	r3, [r3, #0]
     72e:	e024      	b.n	77a <at25dfx_chip_sleep+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_SLEEP;
     730:	230c      	movs	r3, #12
     732:	18fb      	adds	r3, r7, r3
     734:	22b9      	movs	r2, #185	; 0xb9
     736:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     738:	230c      	movs	r3, #12
     73a:	18fb      	adds	r3, r7, r3
     73c:	2201      	movs	r2, #1
     73e:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
     740:	230c      	movs	r3, #12
     742:	18fb      	adds	r3, r7, r3
     744:	2200      	movs	r2, #0
     746:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     748:	230c      	movs	r3, #12
     74a:	18fb      	adds	r3, r7, r3
     74c:	2200      	movs	r2, #0
     74e:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
     750:	230c      	movs	r3, #12
     752:	18fb      	adds	r3, r7, r3
     754:	2200      	movs	r2, #0
     756:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     758:	230c      	movs	r3, #12
     75a:	18fb      	adds	r3, r7, r3
     75c:	6878      	ldr	r0, [r7, #4]
     75e:	466a      	mov	r2, sp
     760:	68d9      	ldr	r1, [r3, #12]
     762:	6011      	str	r1, [r2, #0]
     764:	6819      	ldr	r1, [r3, #0]
     766:	685a      	ldr	r2, [r3, #4]
     768:	689b      	ldr	r3, [r3, #8]
     76a:	4c07      	ldr	r4, [pc, #28]	; (788 <at25dfx_chip_sleep+0x84>)
     76c:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     76e:	687b      	ldr	r3, [r7, #4]
     770:	681b      	ldr	r3, [r3, #0]
     772:	0018      	movs	r0, r3
     774:	4b05      	ldr	r3, [pc, #20]	; (78c <at25dfx_chip_sleep+0x88>)
     776:	4798      	blx	r3

	return STATUS_OK;
     778:	2300      	movs	r3, #0
}
     77a:	0018      	movs	r0, r3
     77c:	46bd      	mov	sp, r7
     77e:	b009      	add	sp, #36	; 0x24
     780:	bd90      	pop	{r4, r7, pc}
     782:	46c0      	nop			; (mov r8, r8)
     784:	00000221 	.word	0x00000221
     788:	0000049d 	.word	0x0000049d
     78c:	00000269 	.word	0x00000269

00000790 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
     790:	b590      	push	{r4, r7, lr}
     792:	b08b      	sub	sp, #44	; 0x2c
     794:	af02      	add	r7, sp, #8
     796:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     798:	687b      	ldr	r3, [r7, #4]
     79a:	681b      	ldr	r3, [r3, #0]
     79c:	221f      	movs	r2, #31
     79e:	18bc      	adds	r4, r7, r2
     7a0:	0018      	movs	r0, r3
     7a2:	4b1b      	ldr	r3, [pc, #108]	; (810 <at25dfx_chip_wake+0x80>)
     7a4:	4798      	blx	r3
     7a6:	0003      	movs	r3, r0
     7a8:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     7aa:	231f      	movs	r3, #31
     7ac:	18fb      	adds	r3, r7, r3
     7ae:	781b      	ldrb	r3, [r3, #0]
     7b0:	2b05      	cmp	r3, #5
     7b2:	d103      	bne.n	7bc <at25dfx_chip_wake+0x2c>
		return status;
     7b4:	231f      	movs	r3, #31
     7b6:	18fb      	adds	r3, r7, r3
     7b8:	781b      	ldrb	r3, [r3, #0]
     7ba:	e024      	b.n	806 <at25dfx_chip_wake+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_WAKE;
     7bc:	230c      	movs	r3, #12
     7be:	18fb      	adds	r3, r7, r3
     7c0:	22ab      	movs	r2, #171	; 0xab
     7c2:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     7c4:	230c      	movs	r3, #12
     7c6:	18fb      	adds	r3, r7, r3
     7c8:	2201      	movs	r2, #1
     7ca:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
     7cc:	230c      	movs	r3, #12
     7ce:	18fb      	adds	r3, r7, r3
     7d0:	2200      	movs	r2, #0
     7d2:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     7d4:	230c      	movs	r3, #12
     7d6:	18fb      	adds	r3, r7, r3
     7d8:	2200      	movs	r2, #0
     7da:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
     7dc:	230c      	movs	r3, #12
     7de:	18fb      	adds	r3, r7, r3
     7e0:	2200      	movs	r2, #0
     7e2:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     7e4:	230c      	movs	r3, #12
     7e6:	18fb      	adds	r3, r7, r3
     7e8:	6878      	ldr	r0, [r7, #4]
     7ea:	466a      	mov	r2, sp
     7ec:	68d9      	ldr	r1, [r3, #12]
     7ee:	6011      	str	r1, [r2, #0]
     7f0:	6819      	ldr	r1, [r3, #0]
     7f2:	685a      	ldr	r2, [r3, #4]
     7f4:	689b      	ldr	r3, [r3, #8]
     7f6:	4c07      	ldr	r4, [pc, #28]	; (814 <at25dfx_chip_wake+0x84>)
     7f8:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     7fa:	687b      	ldr	r3, [r7, #4]
     7fc:	681b      	ldr	r3, [r3, #0]
     7fe:	0018      	movs	r0, r3
     800:	4b05      	ldr	r3, [pc, #20]	; (818 <at25dfx_chip_wake+0x88>)
     802:	4798      	blx	r3

	return STATUS_OK;
     804:	2300      	movs	r3, #0
     806:	0018      	movs	r0, r3
     808:	46bd      	mov	sp, r7
     80a:	b009      	add	sp, #36	; 0x24
     80c:	bd90      	pop	{r4, r7, pc}
     80e:	46c0      	nop			; (mov r8, r8)
     810:	00000221 	.word	0x00000221
     814:	0000049d 	.word	0x0000049d
     818:	00000269 	.word	0x00000269

0000081c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     81c:	b580      	push	{r7, lr}
     81e:	b082      	sub	sp, #8
     820:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     822:	4b10      	ldr	r3, [pc, #64]	; (864 <cpu_irq_enter_critical+0x48>)
     824:	681b      	ldr	r3, [r3, #0]
     826:	2b00      	cmp	r3, #0
     828:	d112      	bne.n	850 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     82a:	f3ef 8310 	mrs	r3, PRIMASK
     82e:	607b      	str	r3, [r7, #4]
  return(result);
     830:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     832:	2b00      	cmp	r3, #0
     834:	d109      	bne.n	84a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
     836:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     838:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     83c:	4b0a      	ldr	r3, [pc, #40]	; (868 <cpu_irq_enter_critical+0x4c>)
     83e:	2200      	movs	r2, #0
     840:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     842:	4b0a      	ldr	r3, [pc, #40]	; (86c <cpu_irq_enter_critical+0x50>)
     844:	2201      	movs	r2, #1
     846:	701a      	strb	r2, [r3, #0]
     848:	e002      	b.n	850 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     84a:	4b08      	ldr	r3, [pc, #32]	; (86c <cpu_irq_enter_critical+0x50>)
     84c:	2200      	movs	r2, #0
     84e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     850:	4b04      	ldr	r3, [pc, #16]	; (864 <cpu_irq_enter_critical+0x48>)
     852:	681b      	ldr	r3, [r3, #0]
     854:	1c5a      	adds	r2, r3, #1
     856:	4b03      	ldr	r3, [pc, #12]	; (864 <cpu_irq_enter_critical+0x48>)
     858:	601a      	str	r2, [r3, #0]
}
     85a:	46c0      	nop			; (mov r8, r8)
     85c:	46bd      	mov	sp, r7
     85e:	b002      	add	sp, #8
     860:	bd80      	pop	{r7, pc}
     862:	46c0      	nop			; (mov r8, r8)
     864:	2000008c 	.word	0x2000008c
     868:	20000000 	.word	0x20000000
     86c:	20000090 	.word	0x20000090

00000870 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     870:	b580      	push	{r7, lr}
     872:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     874:	4b0b      	ldr	r3, [pc, #44]	; (8a4 <cpu_irq_leave_critical+0x34>)
     876:	681b      	ldr	r3, [r3, #0]
     878:	1e5a      	subs	r2, r3, #1
     87a:	4b0a      	ldr	r3, [pc, #40]	; (8a4 <cpu_irq_leave_critical+0x34>)
     87c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     87e:	4b09      	ldr	r3, [pc, #36]	; (8a4 <cpu_irq_leave_critical+0x34>)
     880:	681b      	ldr	r3, [r3, #0]
     882:	2b00      	cmp	r3, #0
     884:	d10a      	bne.n	89c <cpu_irq_leave_critical+0x2c>
     886:	4b08      	ldr	r3, [pc, #32]	; (8a8 <cpu_irq_leave_critical+0x38>)
     888:	781b      	ldrb	r3, [r3, #0]
     88a:	b2db      	uxtb	r3, r3
     88c:	2b00      	cmp	r3, #0
     88e:	d005      	beq.n	89c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     890:	4b06      	ldr	r3, [pc, #24]	; (8ac <cpu_irq_leave_critical+0x3c>)
     892:	2201      	movs	r2, #1
     894:	701a      	strb	r2, [r3, #0]
     896:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     89a:	b662      	cpsie	i
	}
}
     89c:	46c0      	nop			; (mov r8, r8)
     89e:	46bd      	mov	sp, r7
     8a0:	bd80      	pop	{r7, pc}
     8a2:	46c0      	nop			; (mov r8, r8)
     8a4:	2000008c 	.word	0x2000008c
     8a8:	20000090 	.word	0x20000090
     8ac:	20000000 	.word	0x20000000

000008b0 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     8b0:	b580      	push	{r7, lr}
     8b2:	b082      	sub	sp, #8
     8b4:	af00      	add	r7, sp, #0
     8b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     8b8:	687b      	ldr	r3, [r7, #4]
     8ba:	2280      	movs	r2, #128	; 0x80
     8bc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8be:	687b      	ldr	r3, [r7, #4]
     8c0:	2200      	movs	r2, #0
     8c2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     8c4:	687b      	ldr	r3, [r7, #4]
     8c6:	2201      	movs	r2, #1
     8c8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     8ca:	687b      	ldr	r3, [r7, #4]
     8cc:	2200      	movs	r2, #0
     8ce:	70da      	strb	r2, [r3, #3]
}
     8d0:	46c0      	nop			; (mov r8, r8)
     8d2:	46bd      	mov	sp, r7
     8d4:	b002      	add	sp, #8
     8d6:	bd80      	pop	{r7, pc}

000008d8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     8d8:	b580      	push	{r7, lr}
     8da:	b082      	sub	sp, #8
     8dc:	af00      	add	r7, sp, #0
     8de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     8e0:	687b      	ldr	r3, [r7, #4]
     8e2:	2200      	movs	r2, #0
     8e4:	701a      	strb	r2, [r3, #0]
}
     8e6:	46c0      	nop			; (mov r8, r8)
     8e8:	46bd      	mov	sp, r7
     8ea:	b002      	add	sp, #8
     8ec:	bd80      	pop	{r7, pc}
	...

000008f0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     8f0:	b580      	push	{r7, lr}
     8f2:	b082      	sub	sp, #8
     8f4:	af00      	add	r7, sp, #0
     8f6:	0002      	movs	r2, r0
     8f8:	6039      	str	r1, [r7, #0]
     8fa:	1dfb      	adds	r3, r7, #7
     8fc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     8fe:	1dfb      	adds	r3, r7, #7
     900:	781b      	ldrb	r3, [r3, #0]
     902:	2b01      	cmp	r3, #1
     904:	d00a      	beq.n	91c <system_apb_clock_set_mask+0x2c>
     906:	2b02      	cmp	r3, #2
     908:	d00f      	beq.n	92a <system_apb_clock_set_mask+0x3a>
     90a:	2b00      	cmp	r3, #0
     90c:	d114      	bne.n	938 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     90e:	4b0e      	ldr	r3, [pc, #56]	; (948 <system_apb_clock_set_mask+0x58>)
     910:	4a0d      	ldr	r2, [pc, #52]	; (948 <system_apb_clock_set_mask+0x58>)
     912:	6991      	ldr	r1, [r2, #24]
     914:	683a      	ldr	r2, [r7, #0]
     916:	430a      	orrs	r2, r1
     918:	619a      	str	r2, [r3, #24]
			break;
     91a:	e00f      	b.n	93c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     91c:	4b0a      	ldr	r3, [pc, #40]	; (948 <system_apb_clock_set_mask+0x58>)
     91e:	4a0a      	ldr	r2, [pc, #40]	; (948 <system_apb_clock_set_mask+0x58>)
     920:	69d1      	ldr	r1, [r2, #28]
     922:	683a      	ldr	r2, [r7, #0]
     924:	430a      	orrs	r2, r1
     926:	61da      	str	r2, [r3, #28]
			break;
     928:	e008      	b.n	93c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     92a:	4b07      	ldr	r3, [pc, #28]	; (948 <system_apb_clock_set_mask+0x58>)
     92c:	4a06      	ldr	r2, [pc, #24]	; (948 <system_apb_clock_set_mask+0x58>)
     92e:	6a11      	ldr	r1, [r2, #32]
     930:	683a      	ldr	r2, [r7, #0]
     932:	430a      	orrs	r2, r1
     934:	621a      	str	r2, [r3, #32]
			break;
     936:	e001      	b.n	93c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     938:	2317      	movs	r3, #23
     93a:	e000      	b.n	93e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     93c:	2300      	movs	r3, #0
}
     93e:	0018      	movs	r0, r3
     940:	46bd      	mov	sp, r7
     942:	b002      	add	sp, #8
     944:	bd80      	pop	{r7, pc}
     946:	46c0      	nop			; (mov r8, r8)
     948:	40000400 	.word	0x40000400

0000094c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     94c:	b580      	push	{r7, lr}
     94e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     950:	4b05      	ldr	r3, [pc, #20]	; (968 <system_is_debugger_present+0x1c>)
     952:	789b      	ldrb	r3, [r3, #2]
     954:	b2db      	uxtb	r3, r3
     956:	001a      	movs	r2, r3
     958:	2302      	movs	r3, #2
     95a:	4013      	ands	r3, r2
     95c:	1e5a      	subs	r2, r3, #1
     95e:	4193      	sbcs	r3, r2
     960:	b2db      	uxtb	r3, r3
}
     962:	0018      	movs	r0, r3
     964:	46bd      	mov	sp, r7
     966:	bd80      	pop	{r7, pc}
     968:	41002000 	.word	0x41002000

0000096c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
     96c:	b580      	push	{r7, lr}
     96e:	b084      	sub	sp, #16
     970:	af00      	add	r7, sp, #0
     972:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     974:	687b      	ldr	r3, [r7, #4]
     976:	681b      	ldr	r3, [r3, #0]
     978:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     97a:	68fb      	ldr	r3, [r7, #12]
     97c:	7e1b      	ldrb	r3, [r3, #24]
     97e:	b2db      	uxtb	r3, r3
     980:	001a      	movs	r2, r3
     982:	2302      	movs	r3, #2
     984:	4013      	ands	r3, r2
     986:	1e5a      	subs	r2, r3, #1
     988:	4193      	sbcs	r3, r2
     98a:	b2db      	uxtb	r3, r3
}
     98c:	0018      	movs	r0, r3
     98e:	46bd      	mov	sp, r7
     990:	b004      	add	sp, #16
     992:	bd80      	pop	{r7, pc}

00000994 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     994:	b580      	push	{r7, lr}
     996:	b084      	sub	sp, #16
     998:	af00      	add	r7, sp, #0
     99a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     99c:	687b      	ldr	r3, [r7, #4]
     99e:	681b      	ldr	r3, [r3, #0]
     9a0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     9a2:	68fb      	ldr	r3, [r7, #12]
     9a4:	7e1b      	ldrb	r3, [r3, #24]
     9a6:	b2db      	uxtb	r3, r3
     9a8:	001a      	movs	r2, r3
     9aa:	2301      	movs	r3, #1
     9ac:	4013      	ands	r3, r2
     9ae:	1e5a      	subs	r2, r3, #1
     9b0:	4193      	sbcs	r3, r2
     9b2:	b2db      	uxtb	r3, r3
}
     9b4:	0018      	movs	r0, r3
     9b6:	46bd      	mov	sp, r7
     9b8:	b004      	add	sp, #16
     9ba:	bd80      	pop	{r7, pc}

000009bc <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     9bc:	b580      	push	{r7, lr}
     9be:	b084      	sub	sp, #16
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     9c4:	687b      	ldr	r3, [r7, #4]
     9c6:	681b      	ldr	r3, [r3, #0]
     9c8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     9ca:	68fb      	ldr	r3, [r7, #12]
     9cc:	7e1b      	ldrb	r3, [r3, #24]
     9ce:	b2db      	uxtb	r3, r3
     9d0:	001a      	movs	r2, r3
     9d2:	2304      	movs	r3, #4
     9d4:	4013      	ands	r3, r2
     9d6:	1e5a      	subs	r2, r3, #1
     9d8:	4193      	sbcs	r3, r2
     9da:	b2db      	uxtb	r3, r3
}
     9dc:	0018      	movs	r0, r3
     9de:	46bd      	mov	sp, r7
     9e0:	b004      	add	sp, #16
     9e2:	bd80      	pop	{r7, pc}

000009e4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     9e4:	b580      	push	{r7, lr}
     9e6:	b084      	sub	sp, #16
     9e8:	af00      	add	r7, sp, #0
     9ea:	6078      	str	r0, [r7, #4]
     9ec:	000a      	movs	r2, r1
     9ee:	1cbb      	adds	r3, r7, #2
     9f0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     9f2:	687b      	ldr	r3, [r7, #4]
     9f4:	681b      	ldr	r3, [r3, #0]
     9f6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     9f8:	687b      	ldr	r3, [r7, #4]
     9fa:	0018      	movs	r0, r3
     9fc:	4b0a      	ldr	r3, [pc, #40]	; (a28 <spi_write+0x44>)
     9fe:	4798      	blx	r3
     a00:	0003      	movs	r3, r0
     a02:	001a      	movs	r2, r3
     a04:	2301      	movs	r3, #1
     a06:	4053      	eors	r3, r2
     a08:	b2db      	uxtb	r3, r3
     a0a:	2b00      	cmp	r3, #0
     a0c:	d001      	beq.n	a12 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     a0e:	2305      	movs	r3, #5
     a10:	e006      	b.n	a20 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     a12:	1cbb      	adds	r3, r7, #2
     a14:	881b      	ldrh	r3, [r3, #0]
     a16:	05db      	lsls	r3, r3, #23
     a18:	0dda      	lsrs	r2, r3, #23
     a1a:	68fb      	ldr	r3, [r7, #12]
     a1c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     a1e:	2300      	movs	r3, #0
}
     a20:	0018      	movs	r0, r3
     a22:	46bd      	mov	sp, r7
     a24:	b004      	add	sp, #16
     a26:	bd80      	pop	{r7, pc}
     a28:	00000995 	.word	0x00000995

00000a2c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     a2c:	b580      	push	{r7, lr}
     a2e:	b084      	sub	sp, #16
     a30:	af00      	add	r7, sp, #0
     a32:	6078      	str	r0, [r7, #4]
     a34:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a36:	687b      	ldr	r3, [r7, #4]
     a38:	681b      	ldr	r3, [r3, #0]
     a3a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     a3c:	687b      	ldr	r3, [r7, #4]
     a3e:	0018      	movs	r0, r3
     a40:	4b1b      	ldr	r3, [pc, #108]	; (ab0 <spi_read+0x84>)
     a42:	4798      	blx	r3
     a44:	0003      	movs	r3, r0
     a46:	001a      	movs	r2, r3
     a48:	2301      	movs	r3, #1
     a4a:	4053      	eors	r3, r2
     a4c:	b2db      	uxtb	r3, r3
     a4e:	2b00      	cmp	r3, #0
     a50:	d001      	beq.n	a56 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     a52:	2310      	movs	r3, #16
     a54:	e027      	b.n	aa6 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     a56:	230f      	movs	r3, #15
     a58:	18fb      	adds	r3, r7, r3
     a5a:	2200      	movs	r2, #0
     a5c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     a5e:	68bb      	ldr	r3, [r7, #8]
     a60:	8b5b      	ldrh	r3, [r3, #26]
     a62:	b29b      	uxth	r3, r3
     a64:	001a      	movs	r2, r3
     a66:	2304      	movs	r3, #4
     a68:	4013      	ands	r3, r2
     a6a:	d006      	beq.n	a7a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
     a6c:	230f      	movs	r3, #15
     a6e:	18fb      	adds	r3, r7, r3
     a70:	221e      	movs	r2, #30
     a72:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     a74:	68bb      	ldr	r3, [r7, #8]
     a76:	2204      	movs	r2, #4
     a78:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     a7a:	687b      	ldr	r3, [r7, #4]
     a7c:	799b      	ldrb	r3, [r3, #6]
     a7e:	2b01      	cmp	r3, #1
     a80:	d108      	bne.n	a94 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     a82:	68bb      	ldr	r3, [r7, #8]
     a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     a86:	b29b      	uxth	r3, r3
     a88:	05db      	lsls	r3, r3, #23
     a8a:	0ddb      	lsrs	r3, r3, #23
     a8c:	b29a      	uxth	r2, r3
     a8e:	683b      	ldr	r3, [r7, #0]
     a90:	801a      	strh	r2, [r3, #0]
     a92:	e005      	b.n	aa0 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     a94:	68bb      	ldr	r3, [r7, #8]
     a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     a98:	b2db      	uxtb	r3, r3
     a9a:	b29a      	uxth	r2, r3
     a9c:	683b      	ldr	r3, [r7, #0]
     a9e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     aa0:	230f      	movs	r3, #15
     aa2:	18fb      	adds	r3, r7, r3
     aa4:	781b      	ldrb	r3, [r3, #0]
}
     aa6:	0018      	movs	r0, r3
     aa8:	46bd      	mov	sp, r7
     aaa:	b004      	add	sp, #16
     aac:	bd80      	pop	{r7, pc}
     aae:	46c0      	nop			; (mov r8, r8)
     ab0:	000009bd 	.word	0x000009bd

00000ab4 <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
     ab4:	b580      	push	{r7, lr}
     ab6:	b084      	sub	sp, #16
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     abc:	687b      	ldr	r3, [r7, #4]
     abe:	681b      	ldr	r3, [r3, #0]
     ac0:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     ac2:	68fb      	ldr	r3, [r7, #12]
     ac4:	2202      	movs	r2, #2
     ac6:	761a      	strb	r2, [r3, #24]
}
     ac8:	46c0      	nop			; (mov r8, r8)
     aca:	46bd      	mov	sp, r7
     acc:	b004      	add	sp, #16
     ace:	bd80      	pop	{r7, pc}

00000ad0 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     ad0:	b590      	push	{r4, r7, lr}
     ad2:	b093      	sub	sp, #76	; 0x4c
     ad4:	af00      	add	r7, sp, #0
     ad6:	6078      	str	r0, [r7, #4]
     ad8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     ada:	687b      	ldr	r3, [r7, #4]
     adc:	681b      	ldr	r3, [r3, #0]
     ade:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
     ae0:	687b      	ldr	r3, [r7, #4]
     ae2:	681b      	ldr	r3, [r3, #0]
     ae4:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     ae6:	231c      	movs	r3, #28
     ae8:	18fb      	adds	r3, r7, r3
     aea:	0018      	movs	r0, r3
     aec:	4b85      	ldr	r3, [pc, #532]	; (d04 <_spi_set_config+0x234>)
     aee:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
     af0:	231c      	movs	r3, #28
     af2:	18fb      	adds	r3, r7, r3
     af4:	2200      	movs	r2, #0
     af6:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
     af8:	683b      	ldr	r3, [r7, #0]
     afa:	781b      	ldrb	r3, [r3, #0]
     afc:	2b00      	cmp	r3, #0
     afe:	d103      	bne.n	b08 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     b00:	231c      	movs	r3, #28
     b02:	18fb      	adds	r3, r7, r3
     b04:	2200      	movs	r2, #0
     b06:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
     b08:	683b      	ldr	r3, [r7, #0]
     b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
     b0c:	230c      	movs	r3, #12
     b0e:	18fb      	adds	r3, r7, r3
     b10:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
     b12:	683b      	ldr	r3, [r7, #0]
     b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
     b16:	230c      	movs	r3, #12
     b18:	18fb      	adds	r3, r7, r3
     b1a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
     b1c:	683b      	ldr	r3, [r7, #0]
     b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
     b20:	230c      	movs	r3, #12
     b22:	18fb      	adds	r3, r7, r3
     b24:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
     b26:	683b      	ldr	r3, [r7, #0]
     b28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
     b2a:	230c      	movs	r3, #12
     b2c:	18fb      	adds	r3, r7, r3
     b2e:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     b30:	2347      	movs	r3, #71	; 0x47
     b32:	18fb      	adds	r3, r7, r3
     b34:	2200      	movs	r2, #0
     b36:	701a      	strb	r2, [r3, #0]
     b38:	e02c      	b.n	b94 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     b3a:	2347      	movs	r3, #71	; 0x47
     b3c:	18fb      	adds	r3, r7, r3
     b3e:	781a      	ldrb	r2, [r3, #0]
     b40:	230c      	movs	r3, #12
     b42:	18fb      	adds	r3, r7, r3
     b44:	0092      	lsls	r2, r2, #2
     b46:	58d3      	ldr	r3, [r2, r3]
     b48:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
     b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     b4c:	2b00      	cmp	r3, #0
     b4e:	d109      	bne.n	b64 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     b50:	2347      	movs	r3, #71	; 0x47
     b52:	18fb      	adds	r3, r7, r3
     b54:	781a      	ldrb	r2, [r3, #0]
     b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     b58:	0011      	movs	r1, r2
     b5a:	0018      	movs	r0, r3
     b5c:	4b6a      	ldr	r3, [pc, #424]	; (d08 <_spi_set_config+0x238>)
     b5e:	4798      	blx	r3
     b60:	0003      	movs	r3, r0
     b62:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
     b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     b66:	3301      	adds	r3, #1
     b68:	d00d      	beq.n	b86 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     b6c:	b2da      	uxtb	r2, r3
     b6e:	231c      	movs	r3, #28
     b70:	18fb      	adds	r3, r7, r3
     b72:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     b76:	0c1b      	lsrs	r3, r3, #16
     b78:	b2db      	uxtb	r3, r3
     b7a:	221c      	movs	r2, #28
     b7c:	18ba      	adds	r2, r7, r2
     b7e:	0011      	movs	r1, r2
     b80:	0018      	movs	r0, r3
     b82:	4b62      	ldr	r3, [pc, #392]	; (d0c <_spi_set_config+0x23c>)
     b84:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
     b86:	2347      	movs	r3, #71	; 0x47
     b88:	18fb      	adds	r3, r7, r3
     b8a:	781a      	ldrb	r2, [r3, #0]
     b8c:	2347      	movs	r3, #71	; 0x47
     b8e:	18fb      	adds	r3, r7, r3
     b90:	3201      	adds	r2, #1
     b92:	701a      	strb	r2, [r3, #0]
     b94:	2347      	movs	r3, #71	; 0x47
     b96:	18fb      	adds	r3, r7, r3
     b98:	781b      	ldrb	r3, [r3, #0]
     b9a:	2b03      	cmp	r3, #3
     b9c:	d9cd      	bls.n	b3a <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
     b9e:	683b      	ldr	r3, [r7, #0]
     ba0:	781a      	ldrb	r2, [r3, #0]
     ba2:	687b      	ldr	r3, [r7, #4]
     ba4:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
     ba6:	683b      	ldr	r3, [r7, #0]
     ba8:	7c1a      	ldrb	r2, [r3, #16]
     baa:	687b      	ldr	r3, [r7, #4]
     bac:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
     bae:	683b      	ldr	r3, [r7, #0]
     bb0:	7c9a      	ldrb	r2, [r3, #18]
     bb2:	687b      	ldr	r3, [r7, #4]
     bb4:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     bb6:	683b      	ldr	r3, [r7, #0]
     bb8:	7d1a      	ldrb	r2, [r3, #20]
     bba:	687b      	ldr	r3, [r7, #4]
     bbc:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     bbe:	230a      	movs	r3, #10
     bc0:	18fb      	adds	r3, r7, r3
     bc2:	2200      	movs	r2, #0
     bc4:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
     bc6:	2300      	movs	r3, #0
     bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
     bca:	2300      	movs	r3, #0
     bcc:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     bce:	683b      	ldr	r3, [r7, #0]
     bd0:	781b      	ldrb	r3, [r3, #0]
     bd2:	2b01      	cmp	r3, #1
     bd4:	d129      	bne.n	c2a <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     bd6:	687b      	ldr	r3, [r7, #4]
     bd8:	681b      	ldr	r3, [r3, #0]
     bda:	0018      	movs	r0, r3
     bdc:	4b4c      	ldr	r3, [pc, #304]	; (d10 <_spi_set_config+0x240>)
     bde:	4798      	blx	r3
     be0:	0003      	movs	r3, r0
     be2:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     be6:	3314      	adds	r3, #20
     be8:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
     bec:	b2db      	uxtb	r3, r3
     bee:	0018      	movs	r0, r3
     bf0:	4b48      	ldr	r3, [pc, #288]	; (d14 <_spi_set_config+0x244>)
     bf2:	4798      	blx	r3
     bf4:	0003      	movs	r3, r0
     bf6:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     bf8:	683b      	ldr	r3, [r7, #0]
     bfa:	699b      	ldr	r3, [r3, #24]
     bfc:	2223      	movs	r2, #35	; 0x23
     bfe:	18bc      	adds	r4, r7, r2
     c00:	220a      	movs	r2, #10
     c02:	18ba      	adds	r2, r7, r2
     c04:	6a79      	ldr	r1, [r7, #36]	; 0x24
     c06:	0018      	movs	r0, r3
     c08:	4b43      	ldr	r3, [pc, #268]	; (d18 <_spi_set_config+0x248>)
     c0a:	4798      	blx	r3
     c0c:	0003      	movs	r3, r0
     c0e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     c10:	2323      	movs	r3, #35	; 0x23
     c12:	18fb      	adds	r3, r7, r3
     c14:	781b      	ldrb	r3, [r3, #0]
     c16:	2b00      	cmp	r3, #0
     c18:	d001      	beq.n	c1e <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     c1a:	2317      	movs	r3, #23
     c1c:	e06d      	b.n	cfa <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     c1e:	230a      	movs	r3, #10
     c20:	18fb      	adds	r3, r7, r3
     c22:	881b      	ldrh	r3, [r3, #0]
     c24:	b2da      	uxtb	r2, r3
     c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c28:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     c2a:	683b      	ldr	r3, [r7, #0]
     c2c:	781b      	ldrb	r3, [r3, #0]
     c2e:	2b00      	cmp	r3, #0
     c30:	d11a      	bne.n	c68 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     c32:	683b      	ldr	r3, [r7, #0]
     c34:	699b      	ldr	r3, [r3, #24]
     c36:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     c38:	683b      	ldr	r3, [r7, #0]
     c3a:	8b9b      	ldrh	r3, [r3, #28]
     c3c:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     c42:	683a      	ldr	r2, [r7, #0]
     c44:	7f92      	ldrb	r2, [r2, #30]
     c46:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     c48:	683a      	ldr	r2, [r7, #0]
     c4a:	7fd2      	ldrb	r2, [r2, #31]
     c4c:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     c4e:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
     c50:	431a      	orrs	r2, r3
     c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c54:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
     c56:	683b      	ldr	r3, [r7, #0]
     c58:	2220      	movs	r2, #32
     c5a:	5c9b      	ldrb	r3, [r3, r2]
     c5c:	2b00      	cmp	r3, #0
     c5e:	d003      	beq.n	c68 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     c62:	2240      	movs	r2, #64	; 0x40
     c64:	4313      	orrs	r3, r2
     c66:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     c68:	683b      	ldr	r3, [r7, #0]
     c6a:	685b      	ldr	r3, [r3, #4]
     c6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     c6e:	4313      	orrs	r3, r2
     c70:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     c72:	683b      	ldr	r3, [r7, #0]
     c74:	689b      	ldr	r3, [r3, #8]
     c76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     c78:	4313      	orrs	r3, r2
     c7a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     c7c:	683b      	ldr	r3, [r7, #0]
     c7e:	68db      	ldr	r3, [r3, #12]
     c80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     c82:	4313      	orrs	r3, r2
     c84:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
     c86:	683b      	ldr	r3, [r7, #0]
     c88:	7c1b      	ldrb	r3, [r3, #16]
     c8a:	001a      	movs	r2, r3
     c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     c8e:	4313      	orrs	r3, r2
     c90:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     c92:	683b      	ldr	r3, [r7, #0]
     c94:	7c5b      	ldrb	r3, [r3, #17]
     c96:	2b00      	cmp	r3, #0
     c98:	d103      	bne.n	ca2 <_spi_set_config+0x1d2>
     c9a:	4b20      	ldr	r3, [pc, #128]	; (d1c <_spi_set_config+0x24c>)
     c9c:	4798      	blx	r3
     c9e:	1e03      	subs	r3, r0, #0
     ca0:	d003      	beq.n	caa <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ca4:	2280      	movs	r2, #128	; 0x80
     ca6:	4313      	orrs	r3, r2
     ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
     caa:	683b      	ldr	r3, [r7, #0]
     cac:	7c9b      	ldrb	r3, [r3, #18]
     cae:	2b00      	cmp	r3, #0
     cb0:	d004      	beq.n	cbc <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     cb4:	2280      	movs	r2, #128	; 0x80
     cb6:	0292      	lsls	r2, r2, #10
     cb8:	4313      	orrs	r3, r2
     cba:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     cbc:	683b      	ldr	r3, [r7, #0]
     cbe:	7cdb      	ldrb	r3, [r3, #19]
     cc0:	2b00      	cmp	r3, #0
     cc2:	d004      	beq.n	cce <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     cc6:	2280      	movs	r2, #128	; 0x80
     cc8:	0092      	lsls	r2, r2, #2
     cca:	4313      	orrs	r3, r2
     ccc:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     cce:	683b      	ldr	r3, [r7, #0]
     cd0:	7d1b      	ldrb	r3, [r3, #20]
     cd2:	2b00      	cmp	r3, #0
     cd4:	d004      	beq.n	ce0 <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     cd8:	2280      	movs	r2, #128	; 0x80
     cda:	0192      	lsls	r2, r2, #6
     cdc:	4313      	orrs	r3, r2
     cde:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     ce2:	681a      	ldr	r2, [r3, #0]
     ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ce6:	431a      	orrs	r2, r3
     ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     cea:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     cee:	685a      	ldr	r2, [r3, #4]
     cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     cf2:	431a      	orrs	r2, r3
     cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     cf6:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
     cf8:	2300      	movs	r3, #0
}
     cfa:	0018      	movs	r0, r3
     cfc:	46bd      	mov	sp, r7
     cfe:	b013      	add	sp, #76	; 0x4c
     d00:	bd90      	pop	{r4, r7, pc}
     d02:	46c0      	nop			; (mov r8, r8)
     d04:	000008b1 	.word	0x000008b1
     d08:	00002309 	.word	0x00002309
     d0c:	00003bf1 	.word	0x00003bf1
     d10:	000024c5 	.word	0x000024c5
     d14:	00003a29 	.word	0x00003a29
     d18:	0000203f 	.word	0x0000203f
     d1c:	0000094d 	.word	0x0000094d

00000d20 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     d20:	b590      	push	{r4, r7, lr}
     d22:	b08b      	sub	sp, #44	; 0x2c
     d24:	af00      	add	r7, sp, #0
     d26:	60f8      	str	r0, [r7, #12]
     d28:	60b9      	str	r1, [r7, #8]
     d2a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     d2c:	68fb      	ldr	r3, [r7, #12]
     d2e:	68ba      	ldr	r2, [r7, #8]
     d30:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
     d32:	68fb      	ldr	r3, [r7, #12]
     d34:	681b      	ldr	r3, [r3, #0]
     d36:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     d38:	6a3b      	ldr	r3, [r7, #32]
     d3a:	681b      	ldr	r3, [r3, #0]
     d3c:	2202      	movs	r2, #2
     d3e:	4013      	ands	r3, r2
     d40:	d001      	beq.n	d46 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     d42:	231c      	movs	r3, #28
     d44:	e0a6      	b.n	e94 <spi_init+0x174>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     d46:	6a3b      	ldr	r3, [r7, #32]
     d48:	681b      	ldr	r3, [r3, #0]
     d4a:	2201      	movs	r2, #1
     d4c:	4013      	ands	r3, r2
     d4e:	d001      	beq.n	d54 <spi_init+0x34>
		return STATUS_BUSY;
     d50:	2305      	movs	r3, #5
     d52:	e09f      	b.n	e94 <spi_init+0x174>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d54:	68fb      	ldr	r3, [r7, #12]
     d56:	681b      	ldr	r3, [r3, #0]
     d58:	0018      	movs	r0, r3
     d5a:	4b50      	ldr	r3, [pc, #320]	; (e9c <spi_init+0x17c>)
     d5c:	4798      	blx	r3
     d5e:	0003      	movs	r3, r0
     d60:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     d62:	69fb      	ldr	r3, [r7, #28]
     d64:	3302      	adds	r3, #2
     d66:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d68:	69fb      	ldr	r3, [r7, #28]
     d6a:	3314      	adds	r3, #20
     d6c:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     d6e:	2201      	movs	r2, #1
     d70:	69bb      	ldr	r3, [r7, #24]
     d72:	409a      	lsls	r2, r3
     d74:	0013      	movs	r3, r2
     d76:	0019      	movs	r1, r3
     d78:	2002      	movs	r0, #2
     d7a:	4b49      	ldr	r3, [pc, #292]	; (ea0 <spi_init+0x180>)
     d7c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     d7e:	2310      	movs	r3, #16
     d80:	18fb      	adds	r3, r7, r3
     d82:	0018      	movs	r0, r3
     d84:	4b47      	ldr	r3, [pc, #284]	; (ea4 <spi_init+0x184>)
     d86:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
     d88:	687b      	ldr	r3, [r7, #4]
     d8a:	2224      	movs	r2, #36	; 0x24
     d8c:	5c9a      	ldrb	r2, [r3, r2]
     d8e:	2310      	movs	r3, #16
     d90:	18fb      	adds	r3, r7, r3
     d92:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     d94:	697b      	ldr	r3, [r7, #20]
     d96:	b2db      	uxtb	r3, r3
     d98:	2210      	movs	r2, #16
     d9a:	18ba      	adds	r2, r7, r2
     d9c:	0011      	movs	r1, r2
     d9e:	0018      	movs	r0, r3
     da0:	4b41      	ldr	r3, [pc, #260]	; (ea8 <spi_init+0x188>)
     da2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     da4:	697b      	ldr	r3, [r7, #20]
     da6:	b2db      	uxtb	r3, r3
     da8:	0018      	movs	r0, r3
     daa:	4b40      	ldr	r3, [pc, #256]	; (eac <spi_init+0x18c>)
     dac:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     dae:	687b      	ldr	r3, [r7, #4]
     db0:	2224      	movs	r2, #36	; 0x24
     db2:	5c9b      	ldrb	r3, [r3, r2]
     db4:	2100      	movs	r1, #0
     db6:	0018      	movs	r0, r3
     db8:	4b3d      	ldr	r3, [pc, #244]	; (eb0 <spi_init+0x190>)
     dba:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     dbc:	687b      	ldr	r3, [r7, #4]
     dbe:	781b      	ldrb	r3, [r3, #0]
     dc0:	2b01      	cmp	r3, #1
     dc2:	d105      	bne.n	dd0 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     dc4:	6a3b      	ldr	r3, [r7, #32]
     dc6:	681b      	ldr	r3, [r3, #0]
     dc8:	220c      	movs	r2, #12
     dca:	431a      	orrs	r2, r3
     dcc:	6a3b      	ldr	r3, [r7, #32]
     dce:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     dd0:	687b      	ldr	r3, [r7, #4]
     dd2:	781b      	ldrb	r3, [r3, #0]
     dd4:	2b00      	cmp	r3, #0
     dd6:	d105      	bne.n	de4 <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     dd8:	6a3b      	ldr	r3, [r7, #32]
     dda:	681b      	ldr	r3, [r3, #0]
     ddc:	2208      	movs	r2, #8
     dde:	431a      	orrs	r2, r3
     de0:	6a3b      	ldr	r3, [r7, #32]
     de2:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     de4:	2327      	movs	r3, #39	; 0x27
     de6:	18fb      	adds	r3, r7, r3
     de8:	2200      	movs	r2, #0
     dea:	701a      	strb	r2, [r3, #0]
     dec:	e010      	b.n	e10 <spi_init+0xf0>
		module->callback[i]        = NULL;
     dee:	2327      	movs	r3, #39	; 0x27
     df0:	18fb      	adds	r3, r7, r3
     df2:	781b      	ldrb	r3, [r3, #0]
     df4:	68fa      	ldr	r2, [r7, #12]
     df6:	3302      	adds	r3, #2
     df8:	009b      	lsls	r3, r3, #2
     dfa:	18d3      	adds	r3, r2, r3
     dfc:	3304      	adds	r3, #4
     dfe:	2200      	movs	r2, #0
     e00:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     e02:	2327      	movs	r3, #39	; 0x27
     e04:	18fb      	adds	r3, r7, r3
     e06:	781a      	ldrb	r2, [r3, #0]
     e08:	2327      	movs	r3, #39	; 0x27
     e0a:	18fb      	adds	r3, r7, r3
     e0c:	3201      	adds	r2, #1
     e0e:	701a      	strb	r2, [r3, #0]
     e10:	2327      	movs	r3, #39	; 0x27
     e12:	18fb      	adds	r3, r7, r3
     e14:	781b      	ldrb	r3, [r3, #0]
     e16:	2b06      	cmp	r3, #6
     e18:	d9e9      	bls.n	dee <spi_init+0xce>
	}
	module->tx_buffer_ptr              = NULL;
     e1a:	68fb      	ldr	r3, [r7, #12]
     e1c:	2200      	movs	r2, #0
     e1e:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     e20:	68fb      	ldr	r3, [r7, #12]
     e22:	2200      	movs	r2, #0
     e24:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     e26:	68fb      	ldr	r3, [r7, #12]
     e28:	2200      	movs	r2, #0
     e2a:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     e2c:	68fb      	ldr	r3, [r7, #12]
     e2e:	2200      	movs	r2, #0
     e30:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
     e32:	68fb      	ldr	r3, [r7, #12]
     e34:	2236      	movs	r2, #54	; 0x36
     e36:	2100      	movs	r1, #0
     e38:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
     e3a:	68fb      	ldr	r3, [r7, #12]
     e3c:	2237      	movs	r2, #55	; 0x37
     e3e:	2100      	movs	r1, #0
     e40:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
     e42:	68fb      	ldr	r3, [r7, #12]
     e44:	2238      	movs	r2, #56	; 0x38
     e46:	2100      	movs	r1, #0
     e48:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
     e4a:	68fb      	ldr	r3, [r7, #12]
     e4c:	2203      	movs	r2, #3
     e4e:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
     e50:	68fb      	ldr	r3, [r7, #12]
     e52:	2200      	movs	r2, #0
     e54:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     e56:	68fb      	ldr	r3, [r7, #12]
     e58:	681b      	ldr	r3, [r3, #0]
     e5a:	2213      	movs	r2, #19
     e5c:	18bc      	adds	r4, r7, r2
     e5e:	0018      	movs	r0, r3
     e60:	4b0e      	ldr	r3, [pc, #56]	; (e9c <spi_init+0x17c>)
     e62:	4798      	blx	r3
     e64:	0003      	movs	r3, r0
     e66:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     e68:	4a12      	ldr	r2, [pc, #72]	; (eb4 <spi_init+0x194>)
     e6a:	2313      	movs	r3, #19
     e6c:	18fb      	adds	r3, r7, r3
     e6e:	781b      	ldrb	r3, [r3, #0]
     e70:	0011      	movs	r1, r2
     e72:	0018      	movs	r0, r3
     e74:	4b10      	ldr	r3, [pc, #64]	; (eb8 <spi_init+0x198>)
     e76:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     e78:	2313      	movs	r3, #19
     e7a:	18fb      	adds	r3, r7, r3
     e7c:	781a      	ldrb	r2, [r3, #0]
     e7e:	4b0f      	ldr	r3, [pc, #60]	; (ebc <spi_init+0x19c>)
     e80:	0092      	lsls	r2, r2, #2
     e82:	68f9      	ldr	r1, [r7, #12]
     e84:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
     e86:	687a      	ldr	r2, [r7, #4]
     e88:	68fb      	ldr	r3, [r7, #12]
     e8a:	0011      	movs	r1, r2
     e8c:	0018      	movs	r0, r3
     e8e:	4b0c      	ldr	r3, [pc, #48]	; (ec0 <spi_init+0x1a0>)
     e90:	4798      	blx	r3
     e92:	0003      	movs	r3, r0
}
     e94:	0018      	movs	r0, r3
     e96:	46bd      	mov	sp, r7
     e98:	b00b      	add	sp, #44	; 0x2c
     e9a:	bd90      	pop	{r4, r7, pc}
     e9c:	000024c5 	.word	0x000024c5
     ea0:	000008f1 	.word	0x000008f1
     ea4:	000008d9 	.word	0x000008d9
     ea8:	00003905 	.word	0x00003905
     eac:	00003949 	.word	0x00003949
     eb0:	0000227d 	.word	0x0000227d
     eb4:	000014fd 	.word	0x000014fd
     eb8:	00002529 	.word	0x00002529
     ebc:	20000120 	.word	0x20000120
     ec0:	00000ad1 	.word	0x00000ad1

00000ec4 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     ec4:	b590      	push	{r4, r7, lr}
     ec6:	b089      	sub	sp, #36	; 0x24
     ec8:	af00      	add	r7, sp, #0
     eca:	60f8      	str	r0, [r7, #12]
     ecc:	60b9      	str	r1, [r7, #8]
     ece:	0019      	movs	r1, r3
     ed0:	1dbb      	adds	r3, r7, #6
     ed2:	801a      	strh	r2, [r3, #0]
     ed4:	1d3b      	adds	r3, r7, #4
     ed6:	1c0a      	adds	r2, r1, #0
     ed8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     eda:	68fb      	ldr	r3, [r7, #12]
     edc:	2238      	movs	r2, #56	; 0x38
     ede:	5c9b      	ldrb	r3, [r3, r2]
     ee0:	b2db      	uxtb	r3, r3
     ee2:	2b05      	cmp	r3, #5
     ee4:	d101      	bne.n	eea <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
     ee6:	2305      	movs	r3, #5
     ee8:	e0b8      	b.n	105c <spi_read_buffer_wait+0x198>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
     eea:	1dbb      	adds	r3, r7, #6
     eec:	881b      	ldrh	r3, [r3, #0]
     eee:	2b00      	cmp	r3, #0
     ef0:	d101      	bne.n	ef6 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
     ef2:	2317      	movs	r3, #23
     ef4:	e0b2      	b.n	105c <spi_read_buffer_wait+0x198>
	}

	if (!(module->receiver_enabled)) {
     ef6:	68fb      	ldr	r3, [r7, #12]
     ef8:	79db      	ldrb	r3, [r3, #7]
     efa:	2201      	movs	r2, #1
     efc:	4053      	eors	r3, r2
     efe:	b2db      	uxtb	r3, r3
     f00:	2b00      	cmp	r3, #0
     f02:	d001      	beq.n	f08 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
     f04:	231c      	movs	r3, #28
     f06:	e0a9      	b.n	105c <spi_read_buffer_wait+0x198>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     f08:	68fb      	ldr	r3, [r7, #12]
     f0a:	795b      	ldrb	r3, [r3, #5]
     f0c:	2b00      	cmp	r3, #0
     f0e:	d109      	bne.n	f24 <spi_read_buffer_wait+0x60>
     f10:	68fb      	ldr	r3, [r7, #12]
     f12:	0018      	movs	r0, r3
     f14:	4b53      	ldr	r3, [pc, #332]	; (1064 <spi_read_buffer_wait+0x1a0>)
     f16:	4798      	blx	r3
     f18:	1e03      	subs	r3, r0, #0
     f1a:	d003      	beq.n	f24 <spi_read_buffer_wait+0x60>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
     f1c:	68fb      	ldr	r3, [r7, #12]
     f1e:	0018      	movs	r0, r3
     f20:	4b51      	ldr	r3, [pc, #324]	; (1068 <spi_read_buffer_wait+0x1a4>)
     f22:	4798      	blx	r3
	}
#  endif
	uint16_t rx_pos = 0;
     f24:	231e      	movs	r3, #30
     f26:	18fb      	adds	r3, r7, r3
     f28:	2200      	movs	r2, #0
     f2a:	801a      	strh	r2, [r3, #0]

	while (length--) {
     f2c:	e08d      	b.n	104a <spi_read_buffer_wait+0x186>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
     f2e:	68fb      	ldr	r3, [r7, #12]
     f30:	795b      	ldrb	r3, [r3, #5]
     f32:	2b01      	cmp	r3, #1
     f34:	d112      	bne.n	f5c <spi_read_buffer_wait+0x98>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
     f36:	46c0      	nop			; (mov r8, r8)
     f38:	68fb      	ldr	r3, [r7, #12]
     f3a:	0018      	movs	r0, r3
     f3c:	4b4b      	ldr	r3, [pc, #300]	; (106c <spi_read_buffer_wait+0x1a8>)
     f3e:	4798      	blx	r3
     f40:	0003      	movs	r3, r0
     f42:	001a      	movs	r2, r3
     f44:	2301      	movs	r3, #1
     f46:	4053      	eors	r3, r2
     f48:	b2db      	uxtb	r3, r3
     f4a:	2b00      	cmp	r3, #0
     f4c:	d1f4      	bne.n	f38 <spi_read_buffer_wait+0x74>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
     f4e:	1d3b      	adds	r3, r7, #4
     f50:	881a      	ldrh	r2, [r3, #0]
     f52:	68fb      	ldr	r3, [r7, #12]
     f54:	0011      	movs	r1, r2
     f56:	0018      	movs	r0, r3
     f58:	4b45      	ldr	r3, [pc, #276]	; (1070 <spi_read_buffer_wait+0x1ac>)
     f5a:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
     f5c:	68fb      	ldr	r3, [r7, #12]
     f5e:	795b      	ldrb	r3, [r3, #5]
     f60:	2b00      	cmp	r3, #0
     f62:	d12a      	bne.n	fba <spi_read_buffer_wait+0xf6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     f64:	2300      	movs	r3, #0
     f66:	61bb      	str	r3, [r7, #24]
     f68:	e008      	b.n	f7c <spi_read_buffer_wait+0xb8>
				if (spi_is_ready_to_read(module)) {
     f6a:	68fb      	ldr	r3, [r7, #12]
     f6c:	0018      	movs	r0, r3
     f6e:	4b41      	ldr	r3, [pc, #260]	; (1074 <spi_read_buffer_wait+0x1b0>)
     f70:	4798      	blx	r3
     f72:	1e03      	subs	r3, r0, #0
     f74:	d107      	bne.n	f86 <spi_read_buffer_wait+0xc2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     f76:	69bb      	ldr	r3, [r7, #24]
     f78:	3301      	adds	r3, #1
     f7a:	61bb      	str	r3, [r7, #24]
     f7c:	69bb      	ldr	r3, [r7, #24]
     f7e:	4a3e      	ldr	r2, [pc, #248]	; (1078 <spi_read_buffer_wait+0x1b4>)
     f80:	4293      	cmp	r3, r2
     f82:	d9f2      	bls.n	f6a <spi_read_buffer_wait+0xa6>
     f84:	e000      	b.n	f88 <spi_read_buffer_wait+0xc4>
					break;
     f86:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     f88:	68fb      	ldr	r3, [r7, #12]
     f8a:	0018      	movs	r0, r3
     f8c:	4b35      	ldr	r3, [pc, #212]	; (1064 <spi_read_buffer_wait+0x1a0>)
     f8e:	4798      	blx	r3
     f90:	1e03      	subs	r3, r0, #0
     f92:	d005      	beq.n	fa0 <spi_read_buffer_wait+0xdc>
				_spi_clear_tx_complete_flag(module);
     f94:	68fb      	ldr	r3, [r7, #12]
     f96:	0018      	movs	r0, r3
     f98:	4b33      	ldr	r3, [pc, #204]	; (1068 <spi_read_buffer_wait+0x1a4>)
     f9a:	4798      	blx	r3
				return STATUS_ABORTED;
     f9c:	2304      	movs	r3, #4
     f9e:	e05d      	b.n	105c <spi_read_buffer_wait+0x198>
			}

			if (!spi_is_ready_to_read(module)) {
     fa0:	68fb      	ldr	r3, [r7, #12]
     fa2:	0018      	movs	r0, r3
     fa4:	4b33      	ldr	r3, [pc, #204]	; (1074 <spi_read_buffer_wait+0x1b0>)
     fa6:	4798      	blx	r3
     fa8:	0003      	movs	r3, r0
     faa:	001a      	movs	r2, r3
     fac:	2301      	movs	r3, #1
     fae:	4053      	eors	r3, r2
     fb0:	b2db      	uxtb	r3, r3
     fb2:	2b00      	cmp	r3, #0
     fb4:	d001      	beq.n	fba <spi_read_buffer_wait+0xf6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
     fb6:	2312      	movs	r3, #18
     fb8:	e050      	b.n	105c <spi_read_buffer_wait+0x198>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
     fba:	46c0      	nop			; (mov r8, r8)
     fbc:	68fb      	ldr	r3, [r7, #12]
     fbe:	0018      	movs	r0, r3
     fc0:	4b2c      	ldr	r3, [pc, #176]	; (1074 <spi_read_buffer_wait+0x1b0>)
     fc2:	4798      	blx	r3
     fc4:	0003      	movs	r3, r0
     fc6:	001a      	movs	r2, r3
     fc8:	2301      	movs	r3, #1
     fca:	4053      	eors	r3, r2
     fcc:	b2db      	uxtb	r3, r3
     fce:	2b00      	cmp	r3, #0
     fd0:	d1f4      	bne.n	fbc <spi_read_buffer_wait+0xf8>
		}

		uint16_t received_data = 0;
     fd2:	2314      	movs	r3, #20
     fd4:	18fb      	adds	r3, r7, r3
     fd6:	2200      	movs	r2, #0
     fd8:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
     fda:	2317      	movs	r3, #23
     fdc:	18fc      	adds	r4, r7, r3
     fde:	2314      	movs	r3, #20
     fe0:	18fa      	adds	r2, r7, r3
     fe2:	68fb      	ldr	r3, [r7, #12]
     fe4:	0011      	movs	r1, r2
     fe6:	0018      	movs	r0, r3
     fe8:	4b24      	ldr	r3, [pc, #144]	; (107c <spi_read_buffer_wait+0x1b8>)
     fea:	4798      	blx	r3
     fec:	0003      	movs	r3, r0
     fee:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
     ff0:	2317      	movs	r3, #23
     ff2:	18fb      	adds	r3, r7, r3
     ff4:	781b      	ldrb	r3, [r3, #0]
     ff6:	2b00      	cmp	r3, #0
     ff8:	d003      	beq.n	1002 <spi_read_buffer_wait+0x13e>
			/* Overflow, abort */
			return retval;
     ffa:	2317      	movs	r3, #23
     ffc:	18fb      	adds	r3, r7, r3
     ffe:	781b      	ldrb	r3, [r3, #0]
    1000:	e02c      	b.n	105c <spi_read_buffer_wait+0x198>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    1002:	231e      	movs	r3, #30
    1004:	18fb      	adds	r3, r7, r3
    1006:	881b      	ldrh	r3, [r3, #0]
    1008:	221e      	movs	r2, #30
    100a:	18ba      	adds	r2, r7, r2
    100c:	1c59      	adds	r1, r3, #1
    100e:	8011      	strh	r1, [r2, #0]
    1010:	001a      	movs	r2, r3
    1012:	68bb      	ldr	r3, [r7, #8]
    1014:	189b      	adds	r3, r3, r2
    1016:	2214      	movs	r2, #20
    1018:	18ba      	adds	r2, r7, r2
    101a:	8812      	ldrh	r2, [r2, #0]
    101c:	b2d2      	uxtb	r2, r2
    101e:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1020:	68fb      	ldr	r3, [r7, #12]
    1022:	799b      	ldrb	r3, [r3, #6]
    1024:	2b01      	cmp	r3, #1
    1026:	d110      	bne.n	104a <spi_read_buffer_wait+0x186>
			rx_data[rx_pos++] = (received_data >> 8);
    1028:	231e      	movs	r3, #30
    102a:	18fb      	adds	r3, r7, r3
    102c:	881b      	ldrh	r3, [r3, #0]
    102e:	221e      	movs	r2, #30
    1030:	18ba      	adds	r2, r7, r2
    1032:	1c59      	adds	r1, r3, #1
    1034:	8011      	strh	r1, [r2, #0]
    1036:	001a      	movs	r2, r3
    1038:	68bb      	ldr	r3, [r7, #8]
    103a:	189b      	adds	r3, r3, r2
    103c:	2214      	movs	r2, #20
    103e:	18ba      	adds	r2, r7, r2
    1040:	8812      	ldrh	r2, [r2, #0]
    1042:	0a12      	lsrs	r2, r2, #8
    1044:	b292      	uxth	r2, r2
    1046:	b2d2      	uxtb	r2, r2
    1048:	701a      	strb	r2, [r3, #0]
	while (length--) {
    104a:	1dbb      	adds	r3, r7, #6
    104c:	881b      	ldrh	r3, [r3, #0]
    104e:	1dba      	adds	r2, r7, #6
    1050:	1e59      	subs	r1, r3, #1
    1052:	8011      	strh	r1, [r2, #0]
    1054:	2b00      	cmp	r3, #0
    1056:	d000      	beq.n	105a <spi_read_buffer_wait+0x196>
    1058:	e769      	b.n	f2e <spi_read_buffer_wait+0x6a>
		}
	}

	return STATUS_OK;
    105a:	2300      	movs	r3, #0
}
    105c:	0018      	movs	r0, r3
    105e:	46bd      	mov	sp, r7
    1060:	b009      	add	sp, #36	; 0x24
    1062:	bd90      	pop	{r4, r7, pc}
    1064:	0000096d 	.word	0x0000096d
    1068:	00000ab5 	.word	0x00000ab5
    106c:	00000995 	.word	0x00000995
    1070:	000009e5 	.word	0x000009e5
    1074:	000009bd 	.word	0x000009bd
    1078:	00002710 	.word	0x00002710
    107c:	00000a2d 	.word	0x00000a2d

00001080 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1080:	b580      	push	{r7, lr}
    1082:	b08a      	sub	sp, #40	; 0x28
    1084:	af00      	add	r7, sp, #0
    1086:	60f8      	str	r0, [r7, #12]
    1088:	60b9      	str	r1, [r7, #8]
    108a:	1dbb      	adds	r3, r7, #6
    108c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    108e:	68fb      	ldr	r3, [r7, #12]
    1090:	2238      	movs	r2, #56	; 0x38
    1092:	5c9b      	ldrb	r3, [r3, r2]
    1094:	b2db      	uxtb	r3, r3
    1096:	2b05      	cmp	r3, #5
    1098:	d101      	bne.n	109e <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    109a:	2305      	movs	r3, #5
    109c:	e170      	b.n	1380 <spi_write_buffer_wait+0x300>
	}
#  endif

	if (length == 0) {
    109e:	1dbb      	adds	r3, r7, #6
    10a0:	881b      	ldrh	r3, [r3, #0]
    10a2:	2b00      	cmp	r3, #0
    10a4:	d101      	bne.n	10aa <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    10a6:	2317      	movs	r3, #23
    10a8:	e16a      	b.n	1380 <spi_write_buffer_wait+0x300>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    10aa:	68fb      	ldr	r3, [r7, #12]
    10ac:	795b      	ldrb	r3, [r3, #5]
    10ae:	2b00      	cmp	r3, #0
    10b0:	d109      	bne.n	10c6 <spi_write_buffer_wait+0x46>
    10b2:	68fb      	ldr	r3, [r7, #12]
    10b4:	0018      	movs	r0, r3
    10b6:	4bb4      	ldr	r3, [pc, #720]	; (1388 <spi_write_buffer_wait+0x308>)
    10b8:	4798      	blx	r3
    10ba:	1e03      	subs	r3, r0, #0
    10bc:	d003      	beq.n	10c6 <spi_write_buffer_wait+0x46>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    10be:	68fb      	ldr	r3, [r7, #12]
    10c0:	0018      	movs	r0, r3
    10c2:	4bb2      	ldr	r3, [pc, #712]	; (138c <spi_write_buffer_wait+0x30c>)
    10c4:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
    10c6:	2326      	movs	r3, #38	; 0x26
    10c8:	18fb      	adds	r3, r7, r3
    10ca:	2200      	movs	r2, #0
    10cc:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    10ce:	2324      	movs	r3, #36	; 0x24
    10d0:	18fb      	adds	r3, r7, r3
    10d2:	1dba      	adds	r2, r7, #6
    10d4:	8812      	ldrh	r2, [r2, #0]
    10d6:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    10d8:	e0fe      	b.n	12d8 <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    10da:	68fb      	ldr	r3, [r7, #12]
    10dc:	795b      	ldrb	r3, [r3, #5]
    10de:	2b00      	cmp	r3, #0
    10e0:	d12a      	bne.n	1138 <spi_write_buffer_wait+0xb8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    10e2:	2300      	movs	r3, #0
    10e4:	623b      	str	r3, [r7, #32]
    10e6:	e008      	b.n	10fa <spi_write_buffer_wait+0x7a>
				if (spi_is_ready_to_write(module)) {
    10e8:	68fb      	ldr	r3, [r7, #12]
    10ea:	0018      	movs	r0, r3
    10ec:	4ba8      	ldr	r3, [pc, #672]	; (1390 <spi_write_buffer_wait+0x310>)
    10ee:	4798      	blx	r3
    10f0:	1e03      	subs	r3, r0, #0
    10f2:	d107      	bne.n	1104 <spi_write_buffer_wait+0x84>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    10f4:	6a3b      	ldr	r3, [r7, #32]
    10f6:	3301      	adds	r3, #1
    10f8:	623b      	str	r3, [r7, #32]
    10fa:	6a3b      	ldr	r3, [r7, #32]
    10fc:	4aa5      	ldr	r2, [pc, #660]	; (1394 <spi_write_buffer_wait+0x314>)
    10fe:	4293      	cmp	r3, r2
    1100:	d9f2      	bls.n	10e8 <spi_write_buffer_wait+0x68>
    1102:	e000      	b.n	1106 <spi_write_buffer_wait+0x86>
					break;
    1104:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    1106:	68fb      	ldr	r3, [r7, #12]
    1108:	0018      	movs	r0, r3
    110a:	4b9f      	ldr	r3, [pc, #636]	; (1388 <spi_write_buffer_wait+0x308>)
    110c:	4798      	blx	r3
    110e:	1e03      	subs	r3, r0, #0
    1110:	d005      	beq.n	111e <spi_write_buffer_wait+0x9e>
				_spi_clear_tx_complete_flag(module);
    1112:	68fb      	ldr	r3, [r7, #12]
    1114:	0018      	movs	r0, r3
    1116:	4b9d      	ldr	r3, [pc, #628]	; (138c <spi_write_buffer_wait+0x30c>)
    1118:	4798      	blx	r3
				return STATUS_ABORTED;
    111a:	2304      	movs	r3, #4
    111c:	e130      	b.n	1380 <spi_write_buffer_wait+0x300>
			}

			if (!spi_is_ready_to_write(module)) {
    111e:	68fb      	ldr	r3, [r7, #12]
    1120:	0018      	movs	r0, r3
    1122:	4b9b      	ldr	r3, [pc, #620]	; (1390 <spi_write_buffer_wait+0x310>)
    1124:	4798      	blx	r3
    1126:	0003      	movs	r3, r0
    1128:	001a      	movs	r2, r3
    112a:	2301      	movs	r3, #1
    112c:	4053      	eors	r3, r2
    112e:	b2db      	uxtb	r3, r3
    1130:	2b00      	cmp	r3, #0
    1132:	d001      	beq.n	1138 <spi_write_buffer_wait+0xb8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    1134:	2312      	movs	r3, #18
    1136:	e123      	b.n	1380 <spi_write_buffer_wait+0x300>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    1138:	46c0      	nop			; (mov r8, r8)
    113a:	68fb      	ldr	r3, [r7, #12]
    113c:	0018      	movs	r0, r3
    113e:	4b94      	ldr	r3, [pc, #592]	; (1390 <spi_write_buffer_wait+0x310>)
    1140:	4798      	blx	r3
    1142:	0003      	movs	r3, r0
    1144:	001a      	movs	r2, r3
    1146:	2301      	movs	r3, #1
    1148:	4053      	eors	r3, r2
    114a:	b2db      	uxtb	r3, r3
    114c:	2b00      	cmp	r3, #0
    114e:	d1f4      	bne.n	113a <spi_write_buffer_wait+0xba>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    1150:	2326      	movs	r3, #38	; 0x26
    1152:	18fb      	adds	r3, r7, r3
    1154:	881b      	ldrh	r3, [r3, #0]
    1156:	2226      	movs	r2, #38	; 0x26
    1158:	18ba      	adds	r2, r7, r2
    115a:	1c59      	adds	r1, r3, #1
    115c:	8011      	strh	r1, [r2, #0]
    115e:	001a      	movs	r2, r3
    1160:	68bb      	ldr	r3, [r7, #8]
    1162:	189b      	adds	r3, r3, r2
    1164:	781a      	ldrb	r2, [r3, #0]
    1166:	231e      	movs	r3, #30
    1168:	18fb      	adds	r3, r7, r3
    116a:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    116c:	68fb      	ldr	r3, [r7, #12]
    116e:	799b      	ldrb	r3, [r3, #6]
    1170:	2b01      	cmp	r3, #1
    1172:	d115      	bne.n	11a0 <spi_write_buffer_wait+0x120>
			data_to_send |= (tx_data[tx_pos++] << 8);
    1174:	2326      	movs	r3, #38	; 0x26
    1176:	18fb      	adds	r3, r7, r3
    1178:	881b      	ldrh	r3, [r3, #0]
    117a:	2226      	movs	r2, #38	; 0x26
    117c:	18ba      	adds	r2, r7, r2
    117e:	1c59      	adds	r1, r3, #1
    1180:	8011      	strh	r1, [r2, #0]
    1182:	001a      	movs	r2, r3
    1184:	68bb      	ldr	r3, [r7, #8]
    1186:	189b      	adds	r3, r3, r2
    1188:	781b      	ldrb	r3, [r3, #0]
    118a:	021b      	lsls	r3, r3, #8
    118c:	b21a      	sxth	r2, r3
    118e:	231e      	movs	r3, #30
    1190:	18fb      	adds	r3, r7, r3
    1192:	2100      	movs	r1, #0
    1194:	5e5b      	ldrsh	r3, [r3, r1]
    1196:	4313      	orrs	r3, r2
    1198:	b21a      	sxth	r2, r3
    119a:	231e      	movs	r3, #30
    119c:	18fb      	adds	r3, r7, r3
    119e:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    11a0:	231e      	movs	r3, #30
    11a2:	18fb      	adds	r3, r7, r3
    11a4:	881a      	ldrh	r2, [r3, #0]
    11a6:	68fb      	ldr	r3, [r7, #12]
    11a8:	0011      	movs	r1, r2
    11aa:	0018      	movs	r0, r3
    11ac:	4b7a      	ldr	r3, [pc, #488]	; (1398 <spi_write_buffer_wait+0x318>)
    11ae:	4798      	blx	r3

		if (module->receiver_enabled) {
    11b0:	68fb      	ldr	r3, [r7, #12]
    11b2:	79db      	ldrb	r3, [r3, #7]
    11b4:	2224      	movs	r2, #36	; 0x24
    11b6:	18ba      	adds	r2, r7, r2
    11b8:	2124      	movs	r1, #36	; 0x24
    11ba:	1879      	adds	r1, r7, r1
    11bc:	8809      	ldrh	r1, [r1, #0]
    11be:	8011      	strh	r1, [r2, #0]
    11c0:	2b00      	cmp	r3, #0
    11c2:	d100      	bne.n	11c6 <spi_write_buffer_wait+0x146>
    11c4:	e088      	b.n	12d8 <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    11c6:	68fb      	ldr	r3, [r7, #12]
    11c8:	795b      	ldrb	r3, [r3, #5]
    11ca:	2b00      	cmp	r3, #0
    11cc:	d000      	beq.n	11d0 <spi_write_buffer_wait+0x150>
    11ce:	e069      	b.n	12a4 <spi_write_buffer_wait+0x224>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    11d0:	2300      	movs	r3, #0
    11d2:	61bb      	str	r3, [r7, #24]
    11d4:	e047      	b.n	1266 <spi_write_buffer_wait+0x1e6>
					if (length && spi_is_ready_to_write(module)) {
    11d6:	1dbb      	adds	r3, r7, #6
    11d8:	881b      	ldrh	r3, [r3, #0]
    11da:	2b00      	cmp	r3, #0
    11dc:	d03a      	beq.n	1254 <spi_write_buffer_wait+0x1d4>
    11de:	68fb      	ldr	r3, [r7, #12]
    11e0:	0018      	movs	r0, r3
    11e2:	4b6b      	ldr	r3, [pc, #428]	; (1390 <spi_write_buffer_wait+0x310>)
    11e4:	4798      	blx	r3
    11e6:	1e03      	subs	r3, r0, #0
    11e8:	d034      	beq.n	1254 <spi_write_buffer_wait+0x1d4>
						data_to_send = tx_data[tx_pos++];
    11ea:	2326      	movs	r3, #38	; 0x26
    11ec:	18fb      	adds	r3, r7, r3
    11ee:	881b      	ldrh	r3, [r3, #0]
    11f0:	2226      	movs	r2, #38	; 0x26
    11f2:	18ba      	adds	r2, r7, r2
    11f4:	1c59      	adds	r1, r3, #1
    11f6:	8011      	strh	r1, [r2, #0]
    11f8:	001a      	movs	r2, r3
    11fa:	68bb      	ldr	r3, [r7, #8]
    11fc:	189b      	adds	r3, r3, r2
    11fe:	781a      	ldrb	r2, [r3, #0]
    1200:	231e      	movs	r3, #30
    1202:	18fb      	adds	r3, r7, r3
    1204:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1206:	68fb      	ldr	r3, [r7, #12]
    1208:	799b      	ldrb	r3, [r3, #6]
    120a:	2b01      	cmp	r3, #1
    120c:	d115      	bne.n	123a <spi_write_buffer_wait+0x1ba>
							data_to_send |= (tx_data[tx_pos++] << 8);
    120e:	2326      	movs	r3, #38	; 0x26
    1210:	18fb      	adds	r3, r7, r3
    1212:	881b      	ldrh	r3, [r3, #0]
    1214:	2226      	movs	r2, #38	; 0x26
    1216:	18ba      	adds	r2, r7, r2
    1218:	1c59      	adds	r1, r3, #1
    121a:	8011      	strh	r1, [r2, #0]
    121c:	001a      	movs	r2, r3
    121e:	68bb      	ldr	r3, [r7, #8]
    1220:	189b      	adds	r3, r3, r2
    1222:	781b      	ldrb	r3, [r3, #0]
    1224:	021b      	lsls	r3, r3, #8
    1226:	b21a      	sxth	r2, r3
    1228:	231e      	movs	r3, #30
    122a:	18fb      	adds	r3, r7, r3
    122c:	2100      	movs	r1, #0
    122e:	5e5b      	ldrsh	r3, [r3, r1]
    1230:	4313      	orrs	r3, r2
    1232:	b21a      	sxth	r2, r3
    1234:	231e      	movs	r3, #30
    1236:	18fb      	adds	r3, r7, r3
    1238:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
    123a:	231e      	movs	r3, #30
    123c:	18fb      	adds	r3, r7, r3
    123e:	881a      	ldrh	r2, [r3, #0]
    1240:	68fb      	ldr	r3, [r7, #12]
    1242:	0011      	movs	r1, r2
    1244:	0018      	movs	r0, r3
    1246:	4b54      	ldr	r3, [pc, #336]	; (1398 <spi_write_buffer_wait+0x318>)
    1248:	4798      	blx	r3
						length--;
    124a:	1dbb      	adds	r3, r7, #6
    124c:	881a      	ldrh	r2, [r3, #0]
    124e:	1dbb      	adds	r3, r7, #6
    1250:	3a01      	subs	r2, #1
    1252:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
    1254:	68fb      	ldr	r3, [r7, #12]
    1256:	0018      	movs	r0, r3
    1258:	4b50      	ldr	r3, [pc, #320]	; (139c <spi_write_buffer_wait+0x31c>)
    125a:	4798      	blx	r3
    125c:	1e03      	subs	r3, r0, #0
    125e:	d107      	bne.n	1270 <spi_write_buffer_wait+0x1f0>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1260:	69bb      	ldr	r3, [r7, #24]
    1262:	3301      	adds	r3, #1
    1264:	61bb      	str	r3, [r7, #24]
    1266:	69bb      	ldr	r3, [r7, #24]
    1268:	4a4a      	ldr	r2, [pc, #296]	; (1394 <spi_write_buffer_wait+0x314>)
    126a:	4293      	cmp	r3, r2
    126c:	d9b3      	bls.n	11d6 <spi_write_buffer_wait+0x156>
    126e:	e000      	b.n	1272 <spi_write_buffer_wait+0x1f2>
						break;
    1270:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
    1272:	68fb      	ldr	r3, [r7, #12]
    1274:	0018      	movs	r0, r3
    1276:	4b44      	ldr	r3, [pc, #272]	; (1388 <spi_write_buffer_wait+0x308>)
    1278:	4798      	blx	r3
    127a:	1e03      	subs	r3, r0, #0
    127c:	d005      	beq.n	128a <spi_write_buffer_wait+0x20a>
					_spi_clear_tx_complete_flag(module);
    127e:	68fb      	ldr	r3, [r7, #12]
    1280:	0018      	movs	r0, r3
    1282:	4b42      	ldr	r3, [pc, #264]	; (138c <spi_write_buffer_wait+0x30c>)
    1284:	4798      	blx	r3
					return STATUS_ABORTED;
    1286:	2304      	movs	r3, #4
    1288:	e07a      	b.n	1380 <spi_write_buffer_wait+0x300>
				}

				if (!spi_is_ready_to_read(module)) {
    128a:	68fb      	ldr	r3, [r7, #12]
    128c:	0018      	movs	r0, r3
    128e:	4b43      	ldr	r3, [pc, #268]	; (139c <spi_write_buffer_wait+0x31c>)
    1290:	4798      	blx	r3
    1292:	0003      	movs	r3, r0
    1294:	001a      	movs	r2, r3
    1296:	2301      	movs	r3, #1
    1298:	4053      	eors	r3, r2
    129a:	b2db      	uxtb	r3, r3
    129c:	2b00      	cmp	r3, #0
    129e:	d001      	beq.n	12a4 <spi_write_buffer_wait+0x224>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    12a0:	2312      	movs	r3, #18
    12a2:	e06d      	b.n	1380 <spi_write_buffer_wait+0x300>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    12a4:	46c0      	nop			; (mov r8, r8)
    12a6:	68fb      	ldr	r3, [r7, #12]
    12a8:	0018      	movs	r0, r3
    12aa:	4b3c      	ldr	r3, [pc, #240]	; (139c <spi_write_buffer_wait+0x31c>)
    12ac:	4798      	blx	r3
    12ae:	0003      	movs	r3, r0
    12b0:	001a      	movs	r2, r3
    12b2:	2301      	movs	r3, #1
    12b4:	4053      	eors	r3, r2
    12b6:	b2db      	uxtb	r3, r3
    12b8:	2b00      	cmp	r3, #0
    12ba:	d1f4      	bne.n	12a6 <spi_write_buffer_wait+0x226>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    12bc:	2312      	movs	r3, #18
    12be:	18fa      	adds	r2, r7, r3
    12c0:	68fb      	ldr	r3, [r7, #12]
    12c2:	0011      	movs	r1, r2
    12c4:	0018      	movs	r0, r3
    12c6:	4b36      	ldr	r3, [pc, #216]	; (13a0 <spi_write_buffer_wait+0x320>)
    12c8:	4798      	blx	r3
			flush_length--;
    12ca:	2324      	movs	r3, #36	; 0x24
    12cc:	18fb      	adds	r3, r7, r3
    12ce:	881a      	ldrh	r2, [r3, #0]
    12d0:	2324      	movs	r3, #36	; 0x24
    12d2:	18fb      	adds	r3, r7, r3
    12d4:	3a01      	subs	r2, #1
    12d6:	801a      	strh	r2, [r3, #0]
	while (length--) {
    12d8:	1dbb      	adds	r3, r7, #6
    12da:	881b      	ldrh	r3, [r3, #0]
    12dc:	1dba      	adds	r2, r7, #6
    12de:	1e59      	subs	r1, r3, #1
    12e0:	8011      	strh	r1, [r2, #0]
    12e2:	2b00      	cmp	r3, #0
    12e4:	d000      	beq.n	12e8 <spi_write_buffer_wait+0x268>
    12e6:	e6f8      	b.n	10da <spi_write_buffer_wait+0x5a>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    12e8:	68fb      	ldr	r3, [r7, #12]
    12ea:	795b      	ldrb	r3, [r3, #5]
    12ec:	2b01      	cmp	r3, #1
    12ee:	d10b      	bne.n	1308 <spi_write_buffer_wait+0x288>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    12f0:	46c0      	nop			; (mov r8, r8)
    12f2:	68fb      	ldr	r3, [r7, #12]
    12f4:	0018      	movs	r0, r3
    12f6:	4b24      	ldr	r3, [pc, #144]	; (1388 <spi_write_buffer_wait+0x308>)
    12f8:	4798      	blx	r3
    12fa:	0003      	movs	r3, r0
    12fc:	001a      	movs	r2, r3
    12fe:	2301      	movs	r3, #1
    1300:	4053      	eors	r3, r2
    1302:	b2db      	uxtb	r3, r3
    1304:	2b00      	cmp	r3, #0
    1306:	d1f4      	bne.n	12f2 <spi_write_buffer_wait+0x272>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    1308:	68fb      	ldr	r3, [r7, #12]
    130a:	795b      	ldrb	r3, [r3, #5]
    130c:	2b00      	cmp	r3, #0
    130e:	d136      	bne.n	137e <spi_write_buffer_wait+0x2fe>
		if (module->receiver_enabled) {
    1310:	68fb      	ldr	r3, [r7, #12]
    1312:	79db      	ldrb	r3, [r3, #7]
    1314:	2b00      	cmp	r3, #0
    1316:	d032      	beq.n	137e <spi_write_buffer_wait+0x2fe>
			while (flush_length) {
    1318:	e02c      	b.n	1374 <spi_write_buffer_wait+0x2f4>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    131a:	2300      	movs	r3, #0
    131c:	617b      	str	r3, [r7, #20]
    131e:	e008      	b.n	1332 <spi_write_buffer_wait+0x2b2>
					if (spi_is_ready_to_read(module)) {
    1320:	68fb      	ldr	r3, [r7, #12]
    1322:	0018      	movs	r0, r3
    1324:	4b1d      	ldr	r3, [pc, #116]	; (139c <spi_write_buffer_wait+0x31c>)
    1326:	4798      	blx	r3
    1328:	1e03      	subs	r3, r0, #0
    132a:	d107      	bne.n	133c <spi_write_buffer_wait+0x2bc>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    132c:	697b      	ldr	r3, [r7, #20]
    132e:	3301      	adds	r3, #1
    1330:	617b      	str	r3, [r7, #20]
    1332:	697b      	ldr	r3, [r7, #20]
    1334:	4a17      	ldr	r2, [pc, #92]	; (1394 <spi_write_buffer_wait+0x314>)
    1336:	4293      	cmp	r3, r2
    1338:	d9f2      	bls.n	1320 <spi_write_buffer_wait+0x2a0>
    133a:	e000      	b.n	133e <spi_write_buffer_wait+0x2be>
						break;
    133c:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
    133e:	68fb      	ldr	r3, [r7, #12]
    1340:	0018      	movs	r0, r3
    1342:	4b16      	ldr	r3, [pc, #88]	; (139c <spi_write_buffer_wait+0x31c>)
    1344:	4798      	blx	r3
    1346:	0003      	movs	r3, r0
    1348:	001a      	movs	r2, r3
    134a:	2301      	movs	r3, #1
    134c:	4053      	eors	r3, r2
    134e:	b2db      	uxtb	r3, r3
    1350:	2b00      	cmp	r3, #0
    1352:	d001      	beq.n	1358 <spi_write_buffer_wait+0x2d8>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    1354:	2312      	movs	r3, #18
    1356:	e013      	b.n	1380 <spi_write_buffer_wait+0x300>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
    1358:	2310      	movs	r3, #16
    135a:	18fa      	adds	r2, r7, r3
    135c:	68fb      	ldr	r3, [r7, #12]
    135e:	0011      	movs	r1, r2
    1360:	0018      	movs	r0, r3
    1362:	4b0f      	ldr	r3, [pc, #60]	; (13a0 <spi_write_buffer_wait+0x320>)
    1364:	4798      	blx	r3
				flush_length--;
    1366:	2324      	movs	r3, #36	; 0x24
    1368:	18fb      	adds	r3, r7, r3
    136a:	881a      	ldrh	r2, [r3, #0]
    136c:	2324      	movs	r3, #36	; 0x24
    136e:	18fb      	adds	r3, r7, r3
    1370:	3a01      	subs	r2, #1
    1372:	801a      	strh	r2, [r3, #0]
			while (flush_length) {
    1374:	2324      	movs	r3, #36	; 0x24
    1376:	18fb      	adds	r3, r7, r3
    1378:	881b      	ldrh	r3, [r3, #0]
    137a:	2b00      	cmp	r3, #0
    137c:	d1cd      	bne.n	131a <spi_write_buffer_wait+0x29a>
			}
		}
	}
#  endif
	return STATUS_OK;
    137e:	2300      	movs	r3, #0
}
    1380:	0018      	movs	r0, r3
    1382:	46bd      	mov	sp, r7
    1384:	b00a      	add	sp, #40	; 0x28
    1386:	bd80      	pop	{r7, pc}
    1388:	0000096d 	.word	0x0000096d
    138c:	00000ab5 	.word	0x00000ab5
    1390:	00000995 	.word	0x00000995
    1394:	00002710 	.word	0x00002710
    1398:	000009e5 	.word	0x000009e5
    139c:	000009bd 	.word	0x000009bd
    13a0:	00000a2d 	.word	0x00000a2d

000013a4 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    13a4:	b580      	push	{r7, lr}
    13a6:	b084      	sub	sp, #16
    13a8:	af00      	add	r7, sp, #0
    13aa:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    13ac:	687b      	ldr	r3, [r7, #4]
    13ae:	681b      	ldr	r3, [r3, #0]
    13b0:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    13b2:	687b      	ldr	r3, [r7, #4]
    13b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    13b6:	781b      	ldrb	r3, [r3, #0]
    13b8:	b2da      	uxtb	r2, r3
    13ba:	230e      	movs	r3, #14
    13bc:	18fb      	adds	r3, r7, r3
    13be:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    13c0:	687b      	ldr	r3, [r7, #4]
    13c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    13c4:	1c5a      	adds	r2, r3, #1
    13c6:	687b      	ldr	r3, [r7, #4]
    13c8:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    13ca:	687b      	ldr	r3, [r7, #4]
    13cc:	799b      	ldrb	r3, [r3, #6]
    13ce:	2b01      	cmp	r3, #1
    13d0:	d113      	bne.n	13fa <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    13d6:	781b      	ldrb	r3, [r3, #0]
    13d8:	b2db      	uxtb	r3, r3
    13da:	021b      	lsls	r3, r3, #8
    13dc:	b21a      	sxth	r2, r3
    13de:	230e      	movs	r3, #14
    13e0:	18fb      	adds	r3, r7, r3
    13e2:	2100      	movs	r1, #0
    13e4:	5e5b      	ldrsh	r3, [r3, r1]
    13e6:	4313      	orrs	r3, r2
    13e8:	b21a      	sxth	r2, r3
    13ea:	230e      	movs	r3, #14
    13ec:	18fb      	adds	r3, r7, r3
    13ee:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    13f0:	687b      	ldr	r3, [r7, #4]
    13f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    13f4:	1c5a      	adds	r2, r3, #1
    13f6:	687b      	ldr	r3, [r7, #4]
    13f8:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    13fa:	230e      	movs	r3, #14
    13fc:	18fb      	adds	r3, r7, r3
    13fe:	881b      	ldrh	r3, [r3, #0]
    1400:	05db      	lsls	r3, r3, #23
    1402:	0dda      	lsrs	r2, r3, #23
    1404:	68bb      	ldr	r3, [r7, #8]
    1406:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    1408:	687b      	ldr	r3, [r7, #4]
    140a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    140c:	b29b      	uxth	r3, r3
    140e:	3b01      	subs	r3, #1
    1410:	b29a      	uxth	r2, r3
    1412:	687b      	ldr	r3, [r7, #4]
    1414:	869a      	strh	r2, [r3, #52]	; 0x34
}
    1416:	46c0      	nop			; (mov r8, r8)
    1418:	46bd      	mov	sp, r7
    141a:	b004      	add	sp, #16
    141c:	bd80      	pop	{r7, pc}
	...

00001420 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    1420:	b580      	push	{r7, lr}
    1422:	b084      	sub	sp, #16
    1424:	af00      	add	r7, sp, #0
    1426:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1428:	687b      	ldr	r3, [r7, #4]
    142a:	681b      	ldr	r3, [r3, #0]
    142c:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    142e:	4b08      	ldr	r3, [pc, #32]	; (1450 <_spi_write_dummy+0x30>)
    1430:	881b      	ldrh	r3, [r3, #0]
    1432:	001a      	movs	r2, r3
    1434:	68fb      	ldr	r3, [r7, #12]
    1436:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1438:	687b      	ldr	r3, [r7, #4]
    143a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    143c:	b29b      	uxth	r3, r3
    143e:	3b01      	subs	r3, #1
    1440:	b29a      	uxth	r2, r3
    1442:	687b      	ldr	r3, [r7, #4]
    1444:	865a      	strh	r2, [r3, #50]	; 0x32
}
    1446:	46c0      	nop			; (mov r8, r8)
    1448:	46bd      	mov	sp, r7
    144a:	b004      	add	sp, #16
    144c:	bd80      	pop	{r7, pc}
    144e:	46c0      	nop			; (mov r8, r8)
    1450:	2000011c 	.word	0x2000011c

00001454 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    1454:	b580      	push	{r7, lr}
    1456:	b084      	sub	sp, #16
    1458:	af00      	add	r7, sp, #0
    145a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    145c:	687b      	ldr	r3, [r7, #4]
    145e:	681b      	ldr	r3, [r3, #0]
    1460:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    1462:	230a      	movs	r3, #10
    1464:	18fb      	adds	r3, r7, r3
    1466:	2200      	movs	r2, #0
    1468:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    146a:	68fb      	ldr	r3, [r7, #12]
    146c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    146e:	230a      	movs	r3, #10
    1470:	18fb      	adds	r3, r7, r3
    1472:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1474:	687b      	ldr	r3, [r7, #4]
    1476:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1478:	b29b      	uxth	r3, r3
    147a:	3b01      	subs	r3, #1
    147c:	b29a      	uxth	r2, r3
    147e:	687b      	ldr	r3, [r7, #4]
    1480:	865a      	strh	r2, [r3, #50]	; 0x32
}
    1482:	46c0      	nop			; (mov r8, r8)
    1484:	46bd      	mov	sp, r7
    1486:	b004      	add	sp, #16
    1488:	bd80      	pop	{r7, pc}

0000148a <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    148a:	b580      	push	{r7, lr}
    148c:	b084      	sub	sp, #16
    148e:	af00      	add	r7, sp, #0
    1490:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1492:	687b      	ldr	r3, [r7, #4]
    1494:	681b      	ldr	r3, [r3, #0]
    1496:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1498:	68fb      	ldr	r3, [r7, #12]
    149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    149c:	b29a      	uxth	r2, r3
    149e:	230a      	movs	r3, #10
    14a0:	18fb      	adds	r3, r7, r3
    14a2:	05d2      	lsls	r2, r2, #23
    14a4:	0dd2      	lsrs	r2, r2, #23
    14a6:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    14a8:	687b      	ldr	r3, [r7, #4]
    14aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14ac:	220a      	movs	r2, #10
    14ae:	18ba      	adds	r2, r7, r2
    14b0:	8812      	ldrh	r2, [r2, #0]
    14b2:	b2d2      	uxtb	r2, r2
    14b4:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    14b6:	687b      	ldr	r3, [r7, #4]
    14b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14ba:	1c5a      	adds	r2, r3, #1
    14bc:	687b      	ldr	r3, [r7, #4]
    14be:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    14c0:	687b      	ldr	r3, [r7, #4]
    14c2:	799b      	ldrb	r3, [r3, #6]
    14c4:	2b01      	cmp	r3, #1
    14c6:	d10d      	bne.n	14e4 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    14c8:	687b      	ldr	r3, [r7, #4]
    14ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14cc:	220a      	movs	r2, #10
    14ce:	18ba      	adds	r2, r7, r2
    14d0:	8812      	ldrh	r2, [r2, #0]
    14d2:	0a12      	lsrs	r2, r2, #8
    14d4:	b292      	uxth	r2, r2
    14d6:	b2d2      	uxtb	r2, r2
    14d8:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    14da:	687b      	ldr	r3, [r7, #4]
    14dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14de:	1c5a      	adds	r2, r3, #1
    14e0:	687b      	ldr	r3, [r7, #4]
    14e2:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    14e4:	687b      	ldr	r3, [r7, #4]
    14e6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    14e8:	b29b      	uxth	r3, r3
    14ea:	3b01      	subs	r3, #1
    14ec:	b29a      	uxth	r2, r3
    14ee:	687b      	ldr	r3, [r7, #4]
    14f0:	861a      	strh	r2, [r3, #48]	; 0x30
}
    14f2:	46c0      	nop			; (mov r8, r8)
    14f4:	46bd      	mov	sp, r7
    14f6:	b004      	add	sp, #16
    14f8:	bd80      	pop	{r7, pc}
	...

000014fc <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    14fc:	b580      	push	{r7, lr}
    14fe:	b086      	sub	sp, #24
    1500:	af00      	add	r7, sp, #0
    1502:	0002      	movs	r2, r0
    1504:	1dfb      	adds	r3, r7, #7
    1506:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    1508:	1dfb      	adds	r3, r7, #7
    150a:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    150c:	4bb9      	ldr	r3, [pc, #740]	; (17f4 <_spi_interrupt_handler+0x2f8>)
    150e:	0092      	lsls	r2, r2, #2
    1510:	58d3      	ldr	r3, [r2, r3]
    1512:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1514:	697b      	ldr	r3, [r7, #20]
    1516:	681b      	ldr	r3, [r3, #0]
    1518:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    151a:	697b      	ldr	r3, [r7, #20]
    151c:	2237      	movs	r2, #55	; 0x37
    151e:	5c9a      	ldrb	r2, [r3, r2]
    1520:	697b      	ldr	r3, [r7, #20]
    1522:	2136      	movs	r1, #54	; 0x36
    1524:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    1526:	230f      	movs	r3, #15
    1528:	18fb      	adds	r3, r7, r3
    152a:	400a      	ands	r2, r1
    152c:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    152e:	693b      	ldr	r3, [r7, #16]
    1530:	7e1b      	ldrb	r3, [r3, #24]
    1532:	b2da      	uxtb	r2, r3
    1534:	230c      	movs	r3, #12
    1536:	18fb      	adds	r3, r7, r3
    1538:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    153a:	693b      	ldr	r3, [r7, #16]
    153c:	7d9b      	ldrb	r3, [r3, #22]
    153e:	b2db      	uxtb	r3, r3
    1540:	b29a      	uxth	r2, r3
    1542:	230c      	movs	r3, #12
    1544:	18fb      	adds	r3, r7, r3
    1546:	210c      	movs	r1, #12
    1548:	1879      	adds	r1, r7, r1
    154a:	8809      	ldrh	r1, [r1, #0]
    154c:	400a      	ands	r2, r1
    154e:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    1550:	230c      	movs	r3, #12
    1552:	18fb      	adds	r3, r7, r3
    1554:	881b      	ldrh	r3, [r3, #0]
    1556:	2201      	movs	r2, #1
    1558:	4013      	ands	r3, r2
    155a:	d041      	beq.n	15e0 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    155c:	697b      	ldr	r3, [r7, #20]
    155e:	795b      	ldrb	r3, [r3, #5]
    1560:	2b01      	cmp	r3, #1
    1562:	d110      	bne.n	1586 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    1564:	697b      	ldr	r3, [r7, #20]
    1566:	7a5b      	ldrb	r3, [r3, #9]
    1568:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    156a:	2b00      	cmp	r3, #0
    156c:	d10b      	bne.n	1586 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    156e:	697b      	ldr	r3, [r7, #20]
    1570:	0018      	movs	r0, r3
    1572:	4ba1      	ldr	r3, [pc, #644]	; (17f8 <_spi_interrupt_handler+0x2fc>)
    1574:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    1576:	697b      	ldr	r3, [r7, #20]
    1578:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    157a:	b29b      	uxth	r3, r3
    157c:	2b00      	cmp	r3, #0
    157e:	d102      	bne.n	1586 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1580:	693b      	ldr	r3, [r7, #16]
    1582:	2201      	movs	r2, #1
    1584:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1586:	697b      	ldr	r3, [r7, #20]
    1588:	795b      	ldrb	r3, [r3, #5]
		if (0
    158a:	2b01      	cmp	r3, #1
    158c:	d104      	bne.n	1598 <_spi_interrupt_handler+0x9c>
			(module->dir != SPI_DIRECTION_READ))
    158e:	697b      	ldr	r3, [r7, #20]
    1590:	7a5b      	ldrb	r3, [r3, #9]
    1592:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    1594:	2b00      	cmp	r3, #0
    1596:	d108      	bne.n	15aa <_spi_interrupt_handler+0xae>
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1598:	697b      	ldr	r3, [r7, #20]
    159a:	795b      	ldrb	r3, [r3, #5]
    159c:	2b00      	cmp	r3, #0
    159e:	d11f      	bne.n	15e0 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    15a0:	697b      	ldr	r3, [r7, #20]
    15a2:	7a5b      	ldrb	r3, [r3, #9]
    15a4:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_SLAVE) &&
    15a6:	2b00      	cmp	r3, #0
    15a8:	d01a      	beq.n	15e0 <_spi_interrupt_handler+0xe4>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    15aa:	697b      	ldr	r3, [r7, #20]
    15ac:	0018      	movs	r0, r3
    15ae:	4b93      	ldr	r3, [pc, #588]	; (17fc <_spi_interrupt_handler+0x300>)
    15b0:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    15b2:	697b      	ldr	r3, [r7, #20]
    15b4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    15b6:	b29b      	uxth	r3, r3
    15b8:	2b00      	cmp	r3, #0
    15ba:	d111      	bne.n	15e0 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    15bc:	693b      	ldr	r3, [r7, #16]
    15be:	2201      	movs	r2, #1
    15c0:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    15c2:	697b      	ldr	r3, [r7, #20]
    15c4:	7a5b      	ldrb	r3, [r3, #9]
    15c6:	b2db      	uxtb	r3, r3
    15c8:	2b01      	cmp	r3, #1
    15ca:	d109      	bne.n	15e0 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    15cc:	697b      	ldr	r3, [r7, #20]
    15ce:	79db      	ldrb	r3, [r3, #7]
    15d0:	2201      	movs	r2, #1
    15d2:	4053      	eors	r3, r2
    15d4:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    15d6:	2b00      	cmp	r3, #0
    15d8:	d002      	beq.n	15e0 <_spi_interrupt_handler+0xe4>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    15da:	693b      	ldr	r3, [r7, #16]
    15dc:	2202      	movs	r2, #2
    15de:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    15e0:	230c      	movs	r3, #12
    15e2:	18fb      	adds	r3, r7, r3
    15e4:	881b      	ldrh	r3, [r3, #0]
    15e6:	2204      	movs	r2, #4
    15e8:	4013      	ands	r3, r2
    15ea:	d100      	bne.n	15ee <_spi_interrupt_handler+0xf2>
    15ec:	e07e      	b.n	16ec <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    15ee:	693b      	ldr	r3, [r7, #16]
    15f0:	8b5b      	ldrh	r3, [r3, #26]
    15f2:	b29b      	uxth	r3, r3
    15f4:	001a      	movs	r2, r3
    15f6:	2304      	movs	r3, #4
    15f8:	4013      	ands	r3, r2
    15fa:	d022      	beq.n	1642 <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    15fc:	697b      	ldr	r3, [r7, #20]
    15fe:	7a5b      	ldrb	r3, [r3, #9]
    1600:	b2db      	uxtb	r3, r3
    1602:	2b01      	cmp	r3, #1
    1604:	d014      	beq.n	1630 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1606:	697b      	ldr	r3, [r7, #20]
    1608:	2238      	movs	r2, #56	; 0x38
    160a:	211e      	movs	r1, #30
    160c:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    160e:	697b      	ldr	r3, [r7, #20]
    1610:	2203      	movs	r2, #3
    1612:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1614:	693b      	ldr	r3, [r7, #16]
    1616:	2205      	movs	r2, #5
    1618:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    161a:	230f      	movs	r3, #15
    161c:	18fb      	adds	r3, r7, r3
    161e:	781b      	ldrb	r3, [r3, #0]
    1620:	2208      	movs	r2, #8
    1622:	4013      	ands	r3, r2
    1624:	d004      	beq.n	1630 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1626:	697b      	ldr	r3, [r7, #20]
    1628:	699b      	ldr	r3, [r3, #24]
    162a:	697a      	ldr	r2, [r7, #20]
    162c:	0010      	movs	r0, r2
    162e:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    1630:	693b      	ldr	r3, [r7, #16]
    1632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1634:	230a      	movs	r3, #10
    1636:	18fb      	adds	r3, r7, r3
    1638:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    163a:	693b      	ldr	r3, [r7, #16]
    163c:	2204      	movs	r2, #4
    163e:	835a      	strh	r2, [r3, #26]
    1640:	e054      	b.n	16ec <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    1642:	697b      	ldr	r3, [r7, #20]
    1644:	7a5b      	ldrb	r3, [r3, #9]
    1646:	b2db      	uxtb	r3, r3
    1648:	2b01      	cmp	r3, #1
    164a:	d11e      	bne.n	168a <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    164c:	697b      	ldr	r3, [r7, #20]
    164e:	0018      	movs	r0, r3
    1650:	4b6b      	ldr	r3, [pc, #428]	; (1800 <_spi_interrupt_handler+0x304>)
    1652:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    1654:	697b      	ldr	r3, [r7, #20]
    1656:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1658:	b29b      	uxth	r3, r3
    165a:	2b00      	cmp	r3, #0
    165c:	d146      	bne.n	16ec <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    165e:	693b      	ldr	r3, [r7, #16]
    1660:	2204      	movs	r2, #4
    1662:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    1664:	697b      	ldr	r3, [r7, #20]
    1666:	2238      	movs	r2, #56	; 0x38
    1668:	2100      	movs	r1, #0
    166a:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    166c:	697b      	ldr	r3, [r7, #20]
    166e:	2203      	movs	r2, #3
    1670:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    1672:	230f      	movs	r3, #15
    1674:	18fb      	adds	r3, r7, r3
    1676:	781b      	ldrb	r3, [r3, #0]
    1678:	2201      	movs	r2, #1
    167a:	4013      	ands	r3, r2
    167c:	d036      	beq.n	16ec <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    167e:	697b      	ldr	r3, [r7, #20]
    1680:	68db      	ldr	r3, [r3, #12]
    1682:	697a      	ldr	r2, [r7, #20]
    1684:	0010      	movs	r0, r2
    1686:	4798      	blx	r3
    1688:	e030      	b.n	16ec <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    168a:	697b      	ldr	r3, [r7, #20]
    168c:	0018      	movs	r0, r3
    168e:	4b5d      	ldr	r3, [pc, #372]	; (1804 <_spi_interrupt_handler+0x308>)
    1690:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    1692:	697b      	ldr	r3, [r7, #20]
    1694:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    1696:	b29b      	uxth	r3, r3
    1698:	2b00      	cmp	r3, #0
    169a:	d127      	bne.n	16ec <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    169c:	697b      	ldr	r3, [r7, #20]
    169e:	2238      	movs	r2, #56	; 0x38
    16a0:	2100      	movs	r1, #0
    16a2:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    16a4:	693b      	ldr	r3, [r7, #16]
    16a6:	2204      	movs	r2, #4
    16a8:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    16aa:	697b      	ldr	r3, [r7, #20]
    16ac:	7a5b      	ldrb	r3, [r3, #9]
    16ae:	b2db      	uxtb	r3, r3
    16b0:	2b02      	cmp	r3, #2
    16b2:	d10b      	bne.n	16cc <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    16b4:	230f      	movs	r3, #15
    16b6:	18fb      	adds	r3, r7, r3
    16b8:	781b      	ldrb	r3, [r3, #0]
    16ba:	2204      	movs	r2, #4
    16bc:	4013      	ands	r3, r2
    16be:	d015      	beq.n	16ec <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    16c0:	697b      	ldr	r3, [r7, #20]
    16c2:	695b      	ldr	r3, [r3, #20]
    16c4:	697a      	ldr	r2, [r7, #20]
    16c6:	0010      	movs	r0, r2
    16c8:	4798      	blx	r3
    16ca:	e00f      	b.n	16ec <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    16cc:	697b      	ldr	r3, [r7, #20]
    16ce:	7a5b      	ldrb	r3, [r3, #9]
    16d0:	b2db      	uxtb	r3, r3
    16d2:	2b00      	cmp	r3, #0
    16d4:	d10a      	bne.n	16ec <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    16d6:	230f      	movs	r3, #15
    16d8:	18fb      	adds	r3, r7, r3
    16da:	781b      	ldrb	r3, [r3, #0]
    16dc:	2202      	movs	r2, #2
    16de:	4013      	ands	r3, r2
    16e0:	d004      	beq.n	16ec <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    16e2:	697b      	ldr	r3, [r7, #20]
    16e4:	691b      	ldr	r3, [r3, #16]
    16e6:	697a      	ldr	r2, [r7, #20]
    16e8:	0010      	movs	r0, r2
    16ea:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    16ec:	230c      	movs	r3, #12
    16ee:	18fb      	adds	r3, r7, r3
    16f0:	881b      	ldrh	r3, [r3, #0]
    16f2:	2202      	movs	r2, #2
    16f4:	4013      	ands	r3, r2
    16f6:	d046      	beq.n	1786 <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    16f8:	697b      	ldr	r3, [r7, #20]
    16fa:	795b      	ldrb	r3, [r3, #5]
    16fc:	2b00      	cmp	r3, #0
    16fe:	d11d      	bne.n	173c <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    1700:	693b      	ldr	r3, [r7, #16]
    1702:	2207      	movs	r2, #7
    1704:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1706:	693b      	ldr	r3, [r7, #16]
    1708:	2202      	movs	r2, #2
    170a:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    170c:	697b      	ldr	r3, [r7, #20]
    170e:	2203      	movs	r2, #3
    1710:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    1712:	697b      	ldr	r3, [r7, #20]
    1714:	2200      	movs	r2, #0
    1716:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    1718:	697b      	ldr	r3, [r7, #20]
    171a:	2200      	movs	r2, #0
    171c:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    171e:	697b      	ldr	r3, [r7, #20]
    1720:	2238      	movs	r2, #56	; 0x38
    1722:	2100      	movs	r1, #0
    1724:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    1726:	230f      	movs	r3, #15
    1728:	18fb      	adds	r3, r7, r3
    172a:	781b      	ldrb	r3, [r3, #0]
    172c:	2210      	movs	r2, #16
    172e:	4013      	ands	r3, r2
    1730:	d004      	beq.n	173c <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1732:	697b      	ldr	r3, [r7, #20]
    1734:	69db      	ldr	r3, [r3, #28]
    1736:	697a      	ldr	r2, [r7, #20]
    1738:	0010      	movs	r0, r2
    173a:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    173c:	697b      	ldr	r3, [r7, #20]
    173e:	795b      	ldrb	r3, [r3, #5]
    1740:	2b01      	cmp	r3, #1
    1742:	d120      	bne.n	1786 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1744:	697b      	ldr	r3, [r7, #20]
    1746:	7a5b      	ldrb	r3, [r3, #9]
    1748:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    174a:	2b01      	cmp	r3, #1
    174c:	d11b      	bne.n	1786 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    174e:	697b      	ldr	r3, [r7, #20]
    1750:	79db      	ldrb	r3, [r3, #7]
    1752:	2201      	movs	r2, #1
    1754:	4053      	eors	r3, r2
    1756:	b2db      	uxtb	r3, r3
    1758:	2b00      	cmp	r3, #0
    175a:	d014      	beq.n	1786 <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    175c:	693b      	ldr	r3, [r7, #16]
    175e:	2202      	movs	r2, #2
    1760:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    1762:	697b      	ldr	r3, [r7, #20]
    1764:	2203      	movs	r2, #3
    1766:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    1768:	697b      	ldr	r3, [r7, #20]
    176a:	2238      	movs	r2, #56	; 0x38
    176c:	2100      	movs	r1, #0
    176e:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1770:	230f      	movs	r3, #15
    1772:	18fb      	adds	r3, r7, r3
    1774:	781b      	ldrb	r3, [r3, #0]
    1776:	2201      	movs	r2, #1
    1778:	4013      	ands	r3, r2
    177a:	d004      	beq.n	1786 <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    177c:	697b      	ldr	r3, [r7, #20]
    177e:	68db      	ldr	r3, [r3, #12]
    1780:	697a      	ldr	r2, [r7, #20]
    1782:	0010      	movs	r0, r2
    1784:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    1786:	230c      	movs	r3, #12
    1788:	18fb      	adds	r3, r7, r3
    178a:	881b      	ldrh	r3, [r3, #0]
    178c:	2208      	movs	r2, #8
    178e:	4013      	ands	r3, r2
    1790:	d014      	beq.n	17bc <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    1792:	697b      	ldr	r3, [r7, #20]
    1794:	795b      	ldrb	r3, [r3, #5]
    1796:	2b00      	cmp	r3, #0
    1798:	d110      	bne.n	17bc <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    179a:	693b      	ldr	r3, [r7, #16]
    179c:	2208      	movs	r2, #8
    179e:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    17a0:	693b      	ldr	r3, [r7, #16]
    17a2:	2208      	movs	r2, #8
    17a4:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    17a6:	230f      	movs	r3, #15
    17a8:	18fb      	adds	r3, r7, r3
    17aa:	781b      	ldrb	r3, [r3, #0]
    17ac:	2220      	movs	r2, #32
    17ae:	4013      	ands	r3, r2
    17b0:	d004      	beq.n	17bc <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    17b2:	697b      	ldr	r3, [r7, #20]
    17b4:	6a1b      	ldr	r3, [r3, #32]
    17b6:	697a      	ldr	r2, [r7, #20]
    17b8:	0010      	movs	r0, r2
    17ba:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    17bc:	230c      	movs	r3, #12
    17be:	18fb      	adds	r3, r7, r3
    17c0:	881b      	ldrh	r3, [r3, #0]
    17c2:	2280      	movs	r2, #128	; 0x80
    17c4:	4013      	ands	r3, r2
    17c6:	d010      	beq.n	17ea <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    17c8:	693b      	ldr	r3, [r7, #16]
    17ca:	2280      	movs	r2, #128	; 0x80
    17cc:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    17ce:	693b      	ldr	r3, [r7, #16]
    17d0:	2280      	movs	r2, #128	; 0x80
    17d2:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    17d4:	230f      	movs	r3, #15
    17d6:	18fb      	adds	r3, r7, r3
    17d8:	781b      	ldrb	r3, [r3, #0]
    17da:	2240      	movs	r2, #64	; 0x40
    17dc:	4013      	ands	r3, r2
    17de:	d004      	beq.n	17ea <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    17e0:	697b      	ldr	r3, [r7, #20]
    17e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    17e4:	697a      	ldr	r2, [r7, #20]
    17e6:	0010      	movs	r0, r2
    17e8:	4798      	blx	r3
		}
	}
#  endif
}
    17ea:	46c0      	nop			; (mov r8, r8)
    17ec:	46bd      	mov	sp, r7
    17ee:	b006      	add	sp, #24
    17f0:	bd80      	pop	{r7, pc}
    17f2:	46c0      	nop			; (mov r8, r8)
    17f4:	20000120 	.word	0x20000120
    17f8:	00001421 	.word	0x00001421
    17fc:	000013a5 	.word	0x000013a5
    1800:	00001455 	.word	0x00001455
    1804:	0000148b 	.word	0x0000148b

00001808 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1808:	b580      	push	{r7, lr}
    180a:	b082      	sub	sp, #8
    180c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    180e:	4b2f      	ldr	r3, [pc, #188]	; (18cc <Reset_Handler+0xc4>)
    1810:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    1812:	4b2f      	ldr	r3, [pc, #188]	; (18d0 <Reset_Handler+0xc8>)
    1814:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    1816:	687a      	ldr	r2, [r7, #4]
    1818:	683b      	ldr	r3, [r7, #0]
    181a:	429a      	cmp	r2, r3
    181c:	d00c      	beq.n	1838 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    181e:	e007      	b.n	1830 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    1820:	683b      	ldr	r3, [r7, #0]
    1822:	1d1a      	adds	r2, r3, #4
    1824:	603a      	str	r2, [r7, #0]
    1826:	687a      	ldr	r2, [r7, #4]
    1828:	1d11      	adds	r1, r2, #4
    182a:	6079      	str	r1, [r7, #4]
    182c:	6812      	ldr	r2, [r2, #0]
    182e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    1830:	683a      	ldr	r2, [r7, #0]
    1832:	4b28      	ldr	r3, [pc, #160]	; (18d4 <Reset_Handler+0xcc>)
    1834:	429a      	cmp	r2, r3
    1836:	d3f3      	bcc.n	1820 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1838:	4b27      	ldr	r3, [pc, #156]	; (18d8 <Reset_Handler+0xd0>)
    183a:	603b      	str	r3, [r7, #0]
    183c:	e004      	b.n	1848 <Reset_Handler+0x40>
                *pDest++ = 0;
    183e:	683b      	ldr	r3, [r7, #0]
    1840:	1d1a      	adds	r2, r3, #4
    1842:	603a      	str	r2, [r7, #0]
    1844:	2200      	movs	r2, #0
    1846:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    1848:	683a      	ldr	r2, [r7, #0]
    184a:	4b24      	ldr	r3, [pc, #144]	; (18dc <Reset_Handler+0xd4>)
    184c:	429a      	cmp	r2, r3
    184e:	d3f6      	bcc.n	183e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    1850:	4b23      	ldr	r3, [pc, #140]	; (18e0 <Reset_Handler+0xd8>)
    1852:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1854:	4b23      	ldr	r3, [pc, #140]	; (18e4 <Reset_Handler+0xdc>)
    1856:	687a      	ldr	r2, [r7, #4]
    1858:	21ff      	movs	r1, #255	; 0xff
    185a:	438a      	bics	r2, r1
    185c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    185e:	4a22      	ldr	r2, [pc, #136]	; (18e8 <Reset_Handler+0xe0>)
    1860:	2390      	movs	r3, #144	; 0x90
    1862:	005b      	lsls	r3, r3, #1
    1864:	2102      	movs	r1, #2
    1866:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1868:	4a20      	ldr	r2, [pc, #128]	; (18ec <Reset_Handler+0xe4>)
    186a:	78d3      	ldrb	r3, [r2, #3]
    186c:	2103      	movs	r1, #3
    186e:	438b      	bics	r3, r1
    1870:	1c19      	adds	r1, r3, #0
    1872:	2302      	movs	r3, #2
    1874:	430b      	orrs	r3, r1
    1876:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1878:	4a1c      	ldr	r2, [pc, #112]	; (18ec <Reset_Handler+0xe4>)
    187a:	78d3      	ldrb	r3, [r2, #3]
    187c:	210c      	movs	r1, #12
    187e:	438b      	bics	r3, r1
    1880:	1c19      	adds	r1, r3, #0
    1882:	2308      	movs	r3, #8
    1884:	430b      	orrs	r3, r1
    1886:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    1888:	4a19      	ldr	r2, [pc, #100]	; (18f0 <Reset_Handler+0xe8>)
    188a:	7b93      	ldrb	r3, [r2, #14]
    188c:	2130      	movs	r1, #48	; 0x30
    188e:	438b      	bics	r3, r1
    1890:	1c19      	adds	r1, r3, #0
    1892:	2320      	movs	r3, #32
    1894:	430b      	orrs	r3, r1
    1896:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1898:	4a15      	ldr	r2, [pc, #84]	; (18f0 <Reset_Handler+0xe8>)
    189a:	7b93      	ldrb	r3, [r2, #14]
    189c:	210c      	movs	r1, #12
    189e:	438b      	bics	r3, r1
    18a0:	1c19      	adds	r1, r3, #0
    18a2:	2308      	movs	r3, #8
    18a4:	430b      	orrs	r3, r1
    18a6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    18a8:	4a11      	ldr	r2, [pc, #68]	; (18f0 <Reset_Handler+0xe8>)
    18aa:	7b93      	ldrb	r3, [r2, #14]
    18ac:	2103      	movs	r1, #3
    18ae:	438b      	bics	r3, r1
    18b0:	1c19      	adds	r1, r3, #0
    18b2:	2302      	movs	r3, #2
    18b4:	430b      	orrs	r3, r1
    18b6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    18b8:	4a0e      	ldr	r2, [pc, #56]	; (18f4 <Reset_Handler+0xec>)
    18ba:	6853      	ldr	r3, [r2, #4]
    18bc:	2180      	movs	r1, #128	; 0x80
    18be:	430b      	orrs	r3, r1
    18c0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    18c2:	4b0d      	ldr	r3, [pc, #52]	; (18f8 <Reset_Handler+0xf0>)
    18c4:	4798      	blx	r3

        /* Branch to main function */
        main();
    18c6:	4b0d      	ldr	r3, [pc, #52]	; (18fc <Reset_Handler+0xf4>)
    18c8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    18ca:	e7fe      	b.n	18ca <Reset_Handler+0xc2>
    18cc:	00005d8c 	.word	0x00005d8c
    18d0:	20000000 	.word	0x20000000
    18d4:	20000070 	.word	0x20000070
    18d8:	20000070 	.word	0x20000070
    18dc:	200001c0 	.word	0x200001c0
    18e0:	00000000 	.word	0x00000000
    18e4:	e000ed00 	.word	0xe000ed00
    18e8:	41007000 	.word	0x41007000
    18ec:	41005000 	.word	0x41005000
    18f0:	41004800 	.word	0x41004800
    18f4:	41004000 	.word	0x41004000
    18f8:	00004935 	.word	0x00004935
    18fc:	00004695 	.word	0x00004695

00001900 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1900:	b580      	push	{r7, lr}
    1902:	af00      	add	r7, sp, #0
        while (1) {
    1904:	e7fe      	b.n	1904 <Dummy_Handler+0x4>
	...

00001908 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1908:	b580      	push	{r7, lr}
    190a:	b084      	sub	sp, #16
    190c:	af00      	add	r7, sp, #0
    190e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1910:	4b0a      	ldr	r3, [pc, #40]	; (193c <_sbrk+0x34>)
    1912:	681b      	ldr	r3, [r3, #0]
    1914:	2b00      	cmp	r3, #0
    1916:	d102      	bne.n	191e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    1918:	4b08      	ldr	r3, [pc, #32]	; (193c <_sbrk+0x34>)
    191a:	4a09      	ldr	r2, [pc, #36]	; (1940 <_sbrk+0x38>)
    191c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    191e:	4b07      	ldr	r3, [pc, #28]	; (193c <_sbrk+0x34>)
    1920:	681b      	ldr	r3, [r3, #0]
    1922:	60fb      	str	r3, [r7, #12]

	heap += incr;
    1924:	4b05      	ldr	r3, [pc, #20]	; (193c <_sbrk+0x34>)
    1926:	681a      	ldr	r2, [r3, #0]
    1928:	687b      	ldr	r3, [r7, #4]
    192a:	18d2      	adds	r2, r2, r3
    192c:	4b03      	ldr	r3, [pc, #12]	; (193c <_sbrk+0x34>)
    192e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    1930:	68fb      	ldr	r3, [r7, #12]
}
    1932:	0018      	movs	r0, r3
    1934:	46bd      	mov	sp, r7
    1936:	b004      	add	sp, #16
    1938:	bd80      	pop	{r7, pc}
    193a:	46c0      	nop			; (mov r8, r8)
    193c:	20000094 	.word	0x20000094
    1940:	200021c0 	.word	0x200021c0

00001944 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    1944:	b580      	push	{r7, lr}
    1946:	b082      	sub	sp, #8
    1948:	af00      	add	r7, sp, #0
    194a:	6078      	str	r0, [r7, #4]
	return -1;
    194c:	2301      	movs	r3, #1
    194e:	425b      	negs	r3, r3
}
    1950:	0018      	movs	r0, r3
    1952:	46bd      	mov	sp, r7
    1954:	b002      	add	sp, #8
    1956:	bd80      	pop	{r7, pc}

00001958 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    1958:	b580      	push	{r7, lr}
    195a:	b082      	sub	sp, #8
    195c:	af00      	add	r7, sp, #0
    195e:	6078      	str	r0, [r7, #4]
    1960:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    1962:	683b      	ldr	r3, [r7, #0]
    1964:	2280      	movs	r2, #128	; 0x80
    1966:	0192      	lsls	r2, r2, #6
    1968:	605a      	str	r2, [r3, #4]

	return 0;
    196a:	2300      	movs	r3, #0
}
    196c:	0018      	movs	r0, r3
    196e:	46bd      	mov	sp, r7
    1970:	b002      	add	sp, #8
    1972:	bd80      	pop	{r7, pc}

00001974 <_isatty>:

extern int _isatty(int file)
{
    1974:	b580      	push	{r7, lr}
    1976:	b082      	sub	sp, #8
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
	return 1;
    197c:	2301      	movs	r3, #1
}
    197e:	0018      	movs	r0, r3
    1980:	46bd      	mov	sp, r7
    1982:	b002      	add	sp, #8
    1984:	bd80      	pop	{r7, pc}

00001986 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    1986:	b580      	push	{r7, lr}
    1988:	b084      	sub	sp, #16
    198a:	af00      	add	r7, sp, #0
    198c:	60f8      	str	r0, [r7, #12]
    198e:	60b9      	str	r1, [r7, #8]
    1990:	607a      	str	r2, [r7, #4]
	return 0;
    1992:	2300      	movs	r3, #0
}
    1994:	0018      	movs	r0, r3
    1996:	46bd      	mov	sp, r7
    1998:	b004      	add	sp, #16
    199a:	bd80      	pop	{r7, pc}

0000199c <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    199c:	b580      	push	{r7, lr}
    199e:	b082      	sub	sp, #8
    19a0:	af00      	add	r7, sp, #0
    19a2:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	2b00      	cmp	r3, #0
    19a8:	d00c      	beq.n	19c4 <delay_cycles+0x28>
		SysTick->LOAD = n;
    19aa:	4b08      	ldr	r3, [pc, #32]	; (19cc <delay_cycles+0x30>)
    19ac:	687a      	ldr	r2, [r7, #4]
    19ae:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    19b0:	4b06      	ldr	r3, [pc, #24]	; (19cc <delay_cycles+0x30>)
    19b2:	2200      	movs	r2, #0
    19b4:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    19b6:	46c0      	nop			; (mov r8, r8)
    19b8:	4b04      	ldr	r3, [pc, #16]	; (19cc <delay_cycles+0x30>)
    19ba:	681a      	ldr	r2, [r3, #0]
    19bc:	2380      	movs	r3, #128	; 0x80
    19be:	025b      	lsls	r3, r3, #9
    19c0:	4013      	ands	r3, r2
    19c2:	d0f9      	beq.n	19b8 <delay_cycles+0x1c>
		};
	}
}
    19c4:	46c0      	nop			; (mov r8, r8)
    19c6:	46bd      	mov	sp, r7
    19c8:	b002      	add	sp, #8
    19ca:	bd80      	pop	{r7, pc}
    19cc:	e000e010 	.word	0xe000e010

000019d0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    19d0:	b580      	push	{r7, lr}
    19d2:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    19d4:	2000      	movs	r0, #0
    19d6:	4b0f      	ldr	r3, [pc, #60]	; (1a14 <delay_init+0x44>)
    19d8:	4798      	blx	r3
    19da:	0002      	movs	r2, r0
    19dc:	4b0e      	ldr	r3, [pc, #56]	; (1a18 <delay_init+0x48>)
    19de:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    19e0:	4b0d      	ldr	r3, [pc, #52]	; (1a18 <delay_init+0x48>)
    19e2:	6818      	ldr	r0, [r3, #0]
    19e4:	4b0d      	ldr	r3, [pc, #52]	; (1a1c <delay_init+0x4c>)
    19e6:	22fa      	movs	r2, #250	; 0xfa
    19e8:	0091      	lsls	r1, r2, #2
    19ea:	4798      	blx	r3
    19ec:	0003      	movs	r3, r0
    19ee:	001a      	movs	r2, r3
    19f0:	4b09      	ldr	r3, [pc, #36]	; (1a18 <delay_init+0x48>)
    19f2:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    19f4:	4b08      	ldr	r3, [pc, #32]	; (1a18 <delay_init+0x48>)
    19f6:	6818      	ldr	r0, [r3, #0]
    19f8:	4b08      	ldr	r3, [pc, #32]	; (1a1c <delay_init+0x4c>)
    19fa:	22fa      	movs	r2, #250	; 0xfa
    19fc:	0091      	lsls	r1, r2, #2
    19fe:	4798      	blx	r3
    1a00:	0003      	movs	r3, r0
    1a02:	001a      	movs	r2, r3
    1a04:	4b06      	ldr	r3, [pc, #24]	; (1a20 <delay_init+0x50>)
    1a06:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1a08:	4b06      	ldr	r3, [pc, #24]	; (1a24 <delay_init+0x54>)
    1a0a:	2205      	movs	r2, #5
    1a0c:	601a      	str	r2, [r3, #0]
}
    1a0e:	46c0      	nop			; (mov r8, r8)
    1a10:	46bd      	mov	sp, r7
    1a12:	bd80      	pop	{r7, pc}
    1a14:	0000382d 	.word	0x0000382d
    1a18:	20000004 	.word	0x20000004
    1a1c:	000047c9 	.word	0x000047c9
    1a20:	20000008 	.word	0x20000008
    1a24:	e000e010 	.word	0xe000e010

00001a28 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1a28:	b580      	push	{r7, lr}
    1a2a:	b082      	sub	sp, #8
    1a2c:	af00      	add	r7, sp, #0
    1a2e:	6078      	str	r0, [r7, #4]
	while (n--) {
    1a30:	e004      	b.n	1a3c <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1a32:	4b07      	ldr	r3, [pc, #28]	; (1a50 <delay_cycles_ms+0x28>)
    1a34:	681b      	ldr	r3, [r3, #0]
    1a36:	0018      	movs	r0, r3
    1a38:	4b06      	ldr	r3, [pc, #24]	; (1a54 <delay_cycles_ms+0x2c>)
    1a3a:	4798      	blx	r3
	while (n--) {
    1a3c:	687b      	ldr	r3, [r7, #4]
    1a3e:	1e5a      	subs	r2, r3, #1
    1a40:	607a      	str	r2, [r7, #4]
    1a42:	2b00      	cmp	r3, #0
    1a44:	d1f5      	bne.n	1a32 <delay_cycles_ms+0xa>
	}
}
    1a46:	46c0      	nop			; (mov r8, r8)
    1a48:	46bd      	mov	sp, r7
    1a4a:	b002      	add	sp, #8
    1a4c:	bd80      	pop	{r7, pc}
    1a4e:	46c0      	nop			; (mov r8, r8)
    1a50:	20000004 	.word	0x20000004
    1a54:	0000199d 	.word	0x0000199d

00001a58 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
    1a58:	b580      	push	{r7, lr}
    1a5a:	b082      	sub	sp, #8
    1a5c:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    1a5e:	4b07      	ldr	r3, [pc, #28]	; (1a7c <nvm_is_ready+0x24>)
    1a60:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    1a62:	687b      	ldr	r3, [r7, #4]
    1a64:	7d1b      	ldrb	r3, [r3, #20]
    1a66:	b2db      	uxtb	r3, r3
    1a68:	001a      	movs	r2, r3
    1a6a:	2301      	movs	r3, #1
    1a6c:	4013      	ands	r3, r2
    1a6e:	1e5a      	subs	r2, r3, #1
    1a70:	4193      	sbcs	r3, r2
    1a72:	b2db      	uxtb	r3, r3
}
    1a74:	0018      	movs	r0, r3
    1a76:	46bd      	mov	sp, r7
    1a78:	b002      	add	sp, #8
    1a7a:	bd80      	pop	{r7, pc}
    1a7c:	41004000 	.word	0x41004000

00001a80 <system_apb_clock_set_mask>:
{
    1a80:	b580      	push	{r7, lr}
    1a82:	b082      	sub	sp, #8
    1a84:	af00      	add	r7, sp, #0
    1a86:	0002      	movs	r2, r0
    1a88:	6039      	str	r1, [r7, #0]
    1a8a:	1dfb      	adds	r3, r7, #7
    1a8c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1a8e:	1dfb      	adds	r3, r7, #7
    1a90:	781b      	ldrb	r3, [r3, #0]
    1a92:	2b01      	cmp	r3, #1
    1a94:	d00a      	beq.n	1aac <system_apb_clock_set_mask+0x2c>
    1a96:	2b02      	cmp	r3, #2
    1a98:	d00f      	beq.n	1aba <system_apb_clock_set_mask+0x3a>
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	d114      	bne.n	1ac8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    1a9e:	4b0e      	ldr	r3, [pc, #56]	; (1ad8 <system_apb_clock_set_mask+0x58>)
    1aa0:	4a0d      	ldr	r2, [pc, #52]	; (1ad8 <system_apb_clock_set_mask+0x58>)
    1aa2:	6991      	ldr	r1, [r2, #24]
    1aa4:	683a      	ldr	r2, [r7, #0]
    1aa6:	430a      	orrs	r2, r1
    1aa8:	619a      	str	r2, [r3, #24]
			break;
    1aaa:	e00f      	b.n	1acc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    1aac:	4b0a      	ldr	r3, [pc, #40]	; (1ad8 <system_apb_clock_set_mask+0x58>)
    1aae:	4a0a      	ldr	r2, [pc, #40]	; (1ad8 <system_apb_clock_set_mask+0x58>)
    1ab0:	69d1      	ldr	r1, [r2, #28]
    1ab2:	683a      	ldr	r2, [r7, #0]
    1ab4:	430a      	orrs	r2, r1
    1ab6:	61da      	str	r2, [r3, #28]
			break;
    1ab8:	e008      	b.n	1acc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    1aba:	4b07      	ldr	r3, [pc, #28]	; (1ad8 <system_apb_clock_set_mask+0x58>)
    1abc:	4a06      	ldr	r2, [pc, #24]	; (1ad8 <system_apb_clock_set_mask+0x58>)
    1abe:	6a11      	ldr	r1, [r2, #32]
    1ac0:	683a      	ldr	r2, [r7, #0]
    1ac2:	430a      	orrs	r2, r1
    1ac4:	621a      	str	r2, [r3, #32]
			break;
    1ac6:	e001      	b.n	1acc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    1ac8:	2317      	movs	r3, #23
    1aca:	e000      	b.n	1ace <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    1acc:	2300      	movs	r3, #0
}
    1ace:	0018      	movs	r0, r3
    1ad0:	46bd      	mov	sp, r7
    1ad2:	b002      	add	sp, #8
    1ad4:	bd80      	pop	{r7, pc}
    1ad6:	46c0      	nop			; (mov r8, r8)
    1ad8:	40000400 	.word	0x40000400

00001adc <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    1adc:	b580      	push	{r7, lr}
    1ade:	b084      	sub	sp, #16
    1ae0:	af00      	add	r7, sp, #0
    1ae2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    1ae4:	4b2f      	ldr	r3, [pc, #188]	; (1ba4 <nvm_set_config+0xc8>)
    1ae6:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
    1ae8:	2104      	movs	r1, #4
    1aea:	2001      	movs	r0, #1
    1aec:	4b2e      	ldr	r3, [pc, #184]	; (1ba8 <nvm_set_config+0xcc>)
    1aee:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1af0:	68fb      	ldr	r3, [r7, #12]
    1af2:	2220      	movs	r2, #32
    1af4:	32ff      	adds	r2, #255	; 0xff
    1af6:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    1af8:	4b2c      	ldr	r3, [pc, #176]	; (1bac <nvm_set_config+0xd0>)
    1afa:	4798      	blx	r3
    1afc:	0003      	movs	r3, r0
    1afe:	001a      	movs	r2, r3
    1b00:	2301      	movs	r3, #1
    1b02:	4053      	eors	r3, r2
    1b04:	b2db      	uxtb	r3, r3
    1b06:	2b00      	cmp	r3, #0
    1b08:	d001      	beq.n	1b0e <nvm_set_config+0x32>
		return STATUS_BUSY;
    1b0a:	2305      	movs	r3, #5
    1b0c:	e045      	b.n	1b9a <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	781b      	ldrb	r3, [r3, #0]
    1b12:	021b      	lsls	r3, r3, #8
    1b14:	001a      	movs	r2, r3
    1b16:	23c0      	movs	r3, #192	; 0xc0
    1b18:	009b      	lsls	r3, r3, #2
    1b1a:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    1b1c:	687b      	ldr	r3, [r7, #4]
    1b1e:	785b      	ldrb	r3, [r3, #1]
    1b20:	01db      	lsls	r3, r3, #7
    1b22:	0019      	movs	r1, r3
    1b24:	23ff      	movs	r3, #255	; 0xff
    1b26:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    1b28:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    1b2a:	687b      	ldr	r3, [r7, #4]
    1b2c:	789b      	ldrb	r3, [r3, #2]
    1b2e:	005b      	lsls	r3, r3, #1
    1b30:	0019      	movs	r1, r3
    1b32:	231e      	movs	r3, #30
    1b34:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    1b36:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    1b38:	687b      	ldr	r3, [r7, #4]
    1b3a:	78db      	ldrb	r3, [r3, #3]
    1b3c:	049b      	lsls	r3, r3, #18
    1b3e:	0019      	movs	r1, r3
    1b40:	2380      	movs	r3, #128	; 0x80
    1b42:	02db      	lsls	r3, r3, #11
    1b44:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    1b46:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	791b      	ldrb	r3, [r3, #4]
    1b4c:	041b      	lsls	r3, r3, #16
    1b4e:	0019      	movs	r1, r3
    1b50:	23c0      	movs	r3, #192	; 0xc0
    1b52:	029b      	lsls	r3, r3, #10
    1b54:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    1b56:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
    1b58:	68fb      	ldr	r3, [r7, #12]
    1b5a:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    1b5c:	68fb      	ldr	r3, [r7, #12]
    1b5e:	689b      	ldr	r3, [r3, #8]
    1b60:	035b      	lsls	r3, r3, #13
    1b62:	0f5b      	lsrs	r3, r3, #29
    1b64:	b2db      	uxtb	r3, r3
    1b66:	001a      	movs	r2, r3
    1b68:	2308      	movs	r3, #8
    1b6a:	4093      	lsls	r3, r2
    1b6c:	b29a      	uxth	r2, r3
    1b6e:	4b10      	ldr	r3, [pc, #64]	; (1bb0 <nvm_set_config+0xd4>)
    1b70:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    1b72:	68fb      	ldr	r3, [r7, #12]
    1b74:	689b      	ldr	r3, [r3, #8]
    1b76:	b29a      	uxth	r2, r3
    1b78:	4b0d      	ldr	r3, [pc, #52]	; (1bb0 <nvm_set_config+0xd4>)
    1b7a:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    1b7c:	687b      	ldr	r3, [r7, #4]
    1b7e:	785a      	ldrb	r2, [r3, #1]
    1b80:	4b0b      	ldr	r3, [pc, #44]	; (1bb0 <nvm_set_config+0xd4>)
    1b82:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    1b84:	68fb      	ldr	r3, [r7, #12]
    1b86:	8b1b      	ldrh	r3, [r3, #24]
    1b88:	b29b      	uxth	r3, r3
    1b8a:	001a      	movs	r2, r3
    1b8c:	2380      	movs	r3, #128	; 0x80
    1b8e:	005b      	lsls	r3, r3, #1
    1b90:	4013      	ands	r3, r2
    1b92:	d001      	beq.n	1b98 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
    1b94:	2310      	movs	r3, #16
    1b96:	e000      	b.n	1b9a <nvm_set_config+0xbe>
	}

	return STATUS_OK;
    1b98:	2300      	movs	r3, #0
}
    1b9a:	0018      	movs	r0, r3
    1b9c:	46bd      	mov	sp, r7
    1b9e:	b004      	add	sp, #16
    1ba0:	bd80      	pop	{r7, pc}
    1ba2:	46c0      	nop			; (mov r8, r8)
    1ba4:	41004000 	.word	0x41004000
    1ba8:	00001a81 	.word	0x00001a81
    1bac:	00001a59 	.word	0x00001a59
    1bb0:	20000098 	.word	0x20000098

00001bb4 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    1bb4:	b580      	push	{r7, lr}
    1bb6:	b086      	sub	sp, #24
    1bb8:	af00      	add	r7, sp, #0
    1bba:	60b9      	str	r1, [r7, #8]
    1bbc:	607a      	str	r2, [r7, #4]
    1bbe:	230f      	movs	r3, #15
    1bc0:	18fb      	adds	r3, r7, r3
    1bc2:	1c02      	adds	r2, r0, #0
    1bc4:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    1bc6:	4b3a      	ldr	r3, [pc, #232]	; (1cb0 <nvm_execute_command+0xfc>)
    1bc8:	881b      	ldrh	r3, [r3, #0]
    1bca:	001a      	movs	r2, r3
    1bcc:	4b38      	ldr	r3, [pc, #224]	; (1cb0 <nvm_execute_command+0xfc>)
    1bce:	885b      	ldrh	r3, [r3, #2]
    1bd0:	435a      	muls	r2, r3
    1bd2:	68bb      	ldr	r3, [r7, #8]
    1bd4:	429a      	cmp	r2, r3
    1bd6:	d209      	bcs.n	1bec <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    1bd8:	68bb      	ldr	r3, [r7, #8]
    1bda:	4a36      	ldr	r2, [pc, #216]	; (1cb4 <nvm_execute_command+0x100>)
    1bdc:	4293      	cmp	r3, r2
    1bde:	d903      	bls.n	1be8 <nvm_execute_command+0x34>
    1be0:	68bb      	ldr	r3, [r7, #8]
    1be2:	4a35      	ldr	r2, [pc, #212]	; (1cb8 <nvm_execute_command+0x104>)
    1be4:	4293      	cmp	r3, r2
    1be6:	d901      	bls.n	1bec <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    1be8:	2318      	movs	r3, #24
    1bea:	e05c      	b.n	1ca6 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    1bec:	4b33      	ldr	r3, [pc, #204]	; (1cbc <nvm_execute_command+0x108>)
    1bee:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    1bf0:	697b      	ldr	r3, [r7, #20]
    1bf2:	685b      	ldr	r3, [r3, #4]
    1bf4:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    1bf6:	693b      	ldr	r3, [r7, #16]
    1bf8:	2280      	movs	r2, #128	; 0x80
    1bfa:	02d2      	lsls	r2, r2, #11
    1bfc:	431a      	orrs	r2, r3
    1bfe:	697b      	ldr	r3, [r7, #20]
    1c00:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1c02:	697b      	ldr	r3, [r7, #20]
    1c04:	2220      	movs	r2, #32
    1c06:	32ff      	adds	r2, #255	; 0xff
    1c08:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    1c0a:	4b2d      	ldr	r3, [pc, #180]	; (1cc0 <nvm_execute_command+0x10c>)
    1c0c:	4798      	blx	r3
    1c0e:	0003      	movs	r3, r0
    1c10:	001a      	movs	r2, r3
    1c12:	2301      	movs	r3, #1
    1c14:	4053      	eors	r3, r2
    1c16:	b2db      	uxtb	r3, r3
    1c18:	2b00      	cmp	r3, #0
    1c1a:	d004      	beq.n	1c26 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    1c1c:	697b      	ldr	r3, [r7, #20]
    1c1e:	693a      	ldr	r2, [r7, #16]
    1c20:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
    1c22:	2305      	movs	r3, #5
    1c24:	e03f      	b.n	1ca6 <nvm_execute_command+0xf2>
	}

	switch (command) {
    1c26:	230f      	movs	r3, #15
    1c28:	18fb      	adds	r3, r7, r3
    1c2a:	781b      	ldrb	r3, [r3, #0]
    1c2c:	2b45      	cmp	r3, #69	; 0x45
    1c2e:	d81d      	bhi.n	1c6c <nvm_execute_command+0xb8>
    1c30:	009a      	lsls	r2, r3, #2
    1c32:	4b24      	ldr	r3, [pc, #144]	; (1cc4 <nvm_execute_command+0x110>)
    1c34:	18d3      	adds	r3, r2, r3
    1c36:	681b      	ldr	r3, [r3, #0]
    1c38:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    1c3a:	697b      	ldr	r3, [r7, #20]
    1c3c:	8b1b      	ldrh	r3, [r3, #24]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	001a      	movs	r2, r3
    1c42:	2380      	movs	r3, #128	; 0x80
    1c44:	005b      	lsls	r3, r3, #1
    1c46:	4013      	ands	r3, r2
    1c48:	d004      	beq.n	1c54 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
    1c4a:	697b      	ldr	r3, [r7, #20]
    1c4c:	693a      	ldr	r2, [r7, #16]
    1c4e:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
    1c50:	2310      	movs	r3, #16
    1c52:	e028      	b.n	1ca6 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    1c54:	68bb      	ldr	r3, [r7, #8]
    1c56:	089b      	lsrs	r3, r3, #2
    1c58:	005a      	lsls	r2, r3, #1
    1c5a:	697b      	ldr	r3, [r7, #20]
    1c5c:	61da      	str	r2, [r3, #28]
			break;
    1c5e:	e00b      	b.n	1c78 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    1c60:	68bb      	ldr	r3, [r7, #8]
    1c62:	089b      	lsrs	r3, r3, #2
    1c64:	005a      	lsls	r2, r3, #1
    1c66:	697b      	ldr	r3, [r7, #20]
    1c68:	61da      	str	r2, [r3, #28]
			break;
    1c6a:	e005      	b.n	1c78 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
    1c6c:	697b      	ldr	r3, [r7, #20]
    1c6e:	693a      	ldr	r2, [r7, #16]
    1c70:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    1c72:	2317      	movs	r3, #23
    1c74:	e017      	b.n	1ca6 <nvm_execute_command+0xf2>
			break;
    1c76:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    1c78:	230f      	movs	r3, #15
    1c7a:	18fb      	adds	r3, r7, r3
    1c7c:	781b      	ldrb	r3, [r3, #0]
    1c7e:	b29b      	uxth	r3, r3
    1c80:	4a11      	ldr	r2, [pc, #68]	; (1cc8 <nvm_execute_command+0x114>)
    1c82:	4313      	orrs	r3, r2
    1c84:	b29a      	uxth	r2, r3
    1c86:	697b      	ldr	r3, [r7, #20]
    1c88:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
    1c8a:	46c0      	nop			; (mov r8, r8)
    1c8c:	4b0c      	ldr	r3, [pc, #48]	; (1cc0 <nvm_execute_command+0x10c>)
    1c8e:	4798      	blx	r3
    1c90:	0003      	movs	r3, r0
    1c92:	001a      	movs	r2, r3
    1c94:	2301      	movs	r3, #1
    1c96:	4053      	eors	r3, r2
    1c98:	b2db      	uxtb	r3, r3
    1c9a:	2b00      	cmp	r3, #0
    1c9c:	d1f6      	bne.n	1c8c <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
    1c9e:	697b      	ldr	r3, [r7, #20]
    1ca0:	693a      	ldr	r2, [r7, #16]
    1ca2:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    1ca4:	2300      	movs	r3, #0
}
    1ca6:	0018      	movs	r0, r3
    1ca8:	46bd      	mov	sp, r7
    1caa:	b006      	add	sp, #24
    1cac:	bd80      	pop	{r7, pc}
    1cae:	46c0      	nop			; (mov r8, r8)
    1cb0:	20000098 	.word	0x20000098
    1cb4:	00803fff 	.word	0x00803fff
    1cb8:	00806000 	.word	0x00806000
    1cbc:	41004000 	.word	0x41004000
    1cc0:	00001a59 	.word	0x00001a59
    1cc4:	00005a9c 	.word	0x00005a9c
    1cc8:	ffffa500 	.word	0xffffa500

00001ccc <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    1ccc:	b580      	push	{r7, lr}
    1cce:	b088      	sub	sp, #32
    1cd0:	af00      	add	r7, sp, #0
    1cd2:	60f8      	str	r0, [r7, #12]
    1cd4:	60b9      	str	r1, [r7, #8]
    1cd6:	1dbb      	adds	r3, r7, #6
    1cd8:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    1cda:	4b4a      	ldr	r3, [pc, #296]	; (1e04 <nvm_write_buffer+0x138>)
    1cdc:	881b      	ldrh	r3, [r3, #0]
    1cde:	001a      	movs	r2, r3
    1ce0:	4b48      	ldr	r3, [pc, #288]	; (1e04 <nvm_write_buffer+0x138>)
    1ce2:	885b      	ldrh	r3, [r3, #2]
    1ce4:	435a      	muls	r2, r3
	if (destination_address >
    1ce6:	68fb      	ldr	r3, [r7, #12]
    1ce8:	429a      	cmp	r2, r3
    1cea:	d201      	bcs.n	1cf0 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    1cec:	2318      	movs	r3, #24
    1cee:	e084      	b.n	1dfa <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    1cf0:	4b44      	ldr	r3, [pc, #272]	; (1e04 <nvm_write_buffer+0x138>)
    1cf2:	881b      	ldrh	r3, [r3, #0]
    1cf4:	3b01      	subs	r3, #1
    1cf6:	001a      	movs	r2, r3
    1cf8:	68fb      	ldr	r3, [r7, #12]
    1cfa:	4013      	ands	r3, r2
    1cfc:	d001      	beq.n	1d02 <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
    1cfe:	2318      	movs	r3, #24
    1d00:	e07b      	b.n	1dfa <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    1d02:	4b40      	ldr	r3, [pc, #256]	; (1e04 <nvm_write_buffer+0x138>)
    1d04:	881b      	ldrh	r3, [r3, #0]
    1d06:	1dba      	adds	r2, r7, #6
    1d08:	8812      	ldrh	r2, [r2, #0]
    1d0a:	429a      	cmp	r2, r3
    1d0c:	d901      	bls.n	1d12 <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
    1d0e:	2317      	movs	r3, #23
    1d10:	e073      	b.n	1dfa <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    1d12:	4b3d      	ldr	r3, [pc, #244]	; (1e08 <nvm_write_buffer+0x13c>)
    1d14:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    1d16:	4b3d      	ldr	r3, [pc, #244]	; (1e0c <nvm_write_buffer+0x140>)
    1d18:	4798      	blx	r3
    1d1a:	0003      	movs	r3, r0
    1d1c:	001a      	movs	r2, r3
    1d1e:	2301      	movs	r3, #1
    1d20:	4053      	eors	r3, r2
    1d22:	b2db      	uxtb	r3, r3
    1d24:	2b00      	cmp	r3, #0
    1d26:	d001      	beq.n	1d2c <nvm_write_buffer+0x60>
		return STATUS_BUSY;
    1d28:	2305      	movs	r3, #5
    1d2a:	e066      	b.n	1dfa <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    1d2c:	697b      	ldr	r3, [r7, #20]
    1d2e:	4a38      	ldr	r2, [pc, #224]	; (1e10 <nvm_write_buffer+0x144>)
    1d30:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    1d32:	46c0      	nop			; (mov r8, r8)
    1d34:	4b35      	ldr	r3, [pc, #212]	; (1e0c <nvm_write_buffer+0x140>)
    1d36:	4798      	blx	r3
    1d38:	0003      	movs	r3, r0
    1d3a:	001a      	movs	r2, r3
    1d3c:	2301      	movs	r3, #1
    1d3e:	4053      	eors	r3, r2
    1d40:	b2db      	uxtb	r3, r3
    1d42:	2b00      	cmp	r3, #0
    1d44:	d1f6      	bne.n	1d34 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1d46:	697b      	ldr	r3, [r7, #20]
    1d48:	2220      	movs	r2, #32
    1d4a:	32ff      	adds	r2, #255	; 0xff
    1d4c:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
    1d4e:	68fb      	ldr	r3, [r7, #12]
    1d50:	085b      	lsrs	r3, r3, #1
    1d52:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    1d54:	231a      	movs	r3, #26
    1d56:	18fb      	adds	r3, r7, r3
    1d58:	2200      	movs	r2, #0
    1d5a:	801a      	strh	r2, [r3, #0]
    1d5c:	e032      	b.n	1dc4 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    1d5e:	231a      	movs	r3, #26
    1d60:	18fb      	adds	r3, r7, r3
    1d62:	881b      	ldrh	r3, [r3, #0]
    1d64:	68ba      	ldr	r2, [r7, #8]
    1d66:	18d3      	adds	r3, r2, r3
    1d68:	781a      	ldrb	r2, [r3, #0]
    1d6a:	2318      	movs	r3, #24
    1d6c:	18fb      	adds	r3, r7, r3
    1d6e:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    1d70:	231a      	movs	r3, #26
    1d72:	18fb      	adds	r3, r7, r3
    1d74:	881a      	ldrh	r2, [r3, #0]
    1d76:	1dbb      	adds	r3, r7, #6
    1d78:	881b      	ldrh	r3, [r3, #0]
    1d7a:	3b01      	subs	r3, #1
    1d7c:	429a      	cmp	r2, r3
    1d7e:	da11      	bge.n	1da4 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
    1d80:	231a      	movs	r3, #26
    1d82:	18fb      	adds	r3, r7, r3
    1d84:	881b      	ldrh	r3, [r3, #0]
    1d86:	3301      	adds	r3, #1
    1d88:	68ba      	ldr	r2, [r7, #8]
    1d8a:	18d3      	adds	r3, r2, r3
    1d8c:	781b      	ldrb	r3, [r3, #0]
    1d8e:	021b      	lsls	r3, r3, #8
    1d90:	b21a      	sxth	r2, r3
    1d92:	2318      	movs	r3, #24
    1d94:	18fb      	adds	r3, r7, r3
    1d96:	2100      	movs	r1, #0
    1d98:	5e5b      	ldrsh	r3, [r3, r1]
    1d9a:	4313      	orrs	r3, r2
    1d9c:	b21a      	sxth	r2, r3
    1d9e:	2318      	movs	r3, #24
    1da0:	18fb      	adds	r3, r7, r3
    1da2:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
    1da4:	69fb      	ldr	r3, [r7, #28]
    1da6:	1c5a      	adds	r2, r3, #1
    1da8:	61fa      	str	r2, [r7, #28]
    1daa:	005b      	lsls	r3, r3, #1
    1dac:	001a      	movs	r2, r3
    1dae:	2318      	movs	r3, #24
    1db0:	18fb      	adds	r3, r7, r3
    1db2:	881b      	ldrh	r3, [r3, #0]
    1db4:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    1db6:	231a      	movs	r3, #26
    1db8:	18fb      	adds	r3, r7, r3
    1dba:	221a      	movs	r2, #26
    1dbc:	18ba      	adds	r2, r7, r2
    1dbe:	8812      	ldrh	r2, [r2, #0]
    1dc0:	3202      	adds	r2, #2
    1dc2:	801a      	strh	r2, [r3, #0]
    1dc4:	231a      	movs	r3, #26
    1dc6:	18fa      	adds	r2, r7, r3
    1dc8:	1dbb      	adds	r3, r7, #6
    1dca:	8812      	ldrh	r2, [r2, #0]
    1dcc:	881b      	ldrh	r3, [r3, #0]
    1dce:	429a      	cmp	r2, r3
    1dd0:	d3c5      	bcc.n	1d5e <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    1dd2:	4b0c      	ldr	r3, [pc, #48]	; (1e04 <nvm_write_buffer+0x138>)
    1dd4:	791b      	ldrb	r3, [r3, #4]
    1dd6:	2201      	movs	r2, #1
    1dd8:	4053      	eors	r3, r2
    1dda:	b2db      	uxtb	r3, r3
    1ddc:	2b00      	cmp	r3, #0
    1dde:	d00b      	beq.n	1df8 <nvm_write_buffer+0x12c>
    1de0:	1dbb      	adds	r3, r7, #6
    1de2:	881b      	ldrh	r3, [r3, #0]
    1de4:	2b3f      	cmp	r3, #63	; 0x3f
    1de6:	d807      	bhi.n	1df8 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    1de8:	68fb      	ldr	r3, [r7, #12]
    1dea:	2200      	movs	r2, #0
    1dec:	0019      	movs	r1, r3
    1dee:	2004      	movs	r0, #4
    1df0:	4b08      	ldr	r3, [pc, #32]	; (1e14 <nvm_write_buffer+0x148>)
    1df2:	4798      	blx	r3
    1df4:	0003      	movs	r3, r0
    1df6:	e000      	b.n	1dfa <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    1df8:	2300      	movs	r3, #0
}
    1dfa:	0018      	movs	r0, r3
    1dfc:	46bd      	mov	sp, r7
    1dfe:	b008      	add	sp, #32
    1e00:	bd80      	pop	{r7, pc}
    1e02:	46c0      	nop			; (mov r8, r8)
    1e04:	20000098 	.word	0x20000098
    1e08:	41004000 	.word	0x41004000
    1e0c:	00001a59 	.word	0x00001a59
    1e10:	ffffa544 	.word	0xffffa544
    1e14:	00001bb5 	.word	0x00001bb5

00001e18 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    1e18:	b580      	push	{r7, lr}
    1e1a:	b084      	sub	sp, #16
    1e1c:	af00      	add	r7, sp, #0
    1e1e:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    1e20:	4b23      	ldr	r3, [pc, #140]	; (1eb0 <nvm_erase_row+0x98>)
    1e22:	881b      	ldrh	r3, [r3, #0]
    1e24:	001a      	movs	r2, r3
    1e26:	4b22      	ldr	r3, [pc, #136]	; (1eb0 <nvm_erase_row+0x98>)
    1e28:	885b      	ldrh	r3, [r3, #2]
    1e2a:	435a      	muls	r2, r3
	if (row_address >
    1e2c:	687b      	ldr	r3, [r7, #4]
    1e2e:	429a      	cmp	r2, r3
    1e30:	d201      	bcs.n	1e36 <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    1e32:	2318      	movs	r3, #24
    1e34:	e037      	b.n	1ea6 <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    1e36:	4b1e      	ldr	r3, [pc, #120]	; (1eb0 <nvm_erase_row+0x98>)
    1e38:	881b      	ldrh	r3, [r3, #0]
    1e3a:	009b      	lsls	r3, r3, #2
    1e3c:	3b01      	subs	r3, #1
    1e3e:	001a      	movs	r2, r3
    1e40:	687b      	ldr	r3, [r7, #4]
    1e42:	4013      	ands	r3, r2
    1e44:	d001      	beq.n	1e4a <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
    1e46:	2318      	movs	r3, #24
    1e48:	e02d      	b.n	1ea6 <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    1e4a:	4b1a      	ldr	r3, [pc, #104]	; (1eb4 <nvm_erase_row+0x9c>)
    1e4c:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    1e4e:	4b1a      	ldr	r3, [pc, #104]	; (1eb8 <nvm_erase_row+0xa0>)
    1e50:	4798      	blx	r3
    1e52:	0003      	movs	r3, r0
    1e54:	001a      	movs	r2, r3
    1e56:	2301      	movs	r3, #1
    1e58:	4053      	eors	r3, r2
    1e5a:	b2db      	uxtb	r3, r3
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	d001      	beq.n	1e64 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
    1e60:	2305      	movs	r3, #5
    1e62:	e020      	b.n	1ea6 <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1e64:	68fb      	ldr	r3, [r7, #12]
    1e66:	2220      	movs	r2, #32
    1e68:	32ff      	adds	r2, #255	; 0xff
    1e6a:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    1e6c:	687b      	ldr	r3, [r7, #4]
    1e6e:	089b      	lsrs	r3, r3, #2
    1e70:	005a      	lsls	r2, r3, #1
    1e72:	68fb      	ldr	r3, [r7, #12]
    1e74:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    1e76:	68fb      	ldr	r3, [r7, #12]
    1e78:	4a10      	ldr	r2, [pc, #64]	; (1ebc <nvm_erase_row+0xa4>)
    1e7a:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
    1e7c:	46c0      	nop			; (mov r8, r8)
    1e7e:	4b0e      	ldr	r3, [pc, #56]	; (1eb8 <nvm_erase_row+0xa0>)
    1e80:	4798      	blx	r3
    1e82:	0003      	movs	r3, r0
    1e84:	001a      	movs	r2, r3
    1e86:	2301      	movs	r3, #1
    1e88:	4053      	eors	r3, r2
    1e8a:	b2db      	uxtb	r3, r3
    1e8c:	2b00      	cmp	r3, #0
    1e8e:	d1f6      	bne.n	1e7e <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    1e90:	68fb      	ldr	r3, [r7, #12]
    1e92:	8b1b      	ldrh	r3, [r3, #24]
    1e94:	b29b      	uxth	r3, r3
    1e96:	b2db      	uxtb	r3, r3
    1e98:	001a      	movs	r2, r3
    1e9a:	231c      	movs	r3, #28
    1e9c:	4013      	ands	r3, r2
    1e9e:	d001      	beq.n	1ea4 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
    1ea0:	2304      	movs	r3, #4
    1ea2:	e000      	b.n	1ea6 <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
    1ea4:	2300      	movs	r3, #0
}
    1ea6:	0018      	movs	r0, r3
    1ea8:	46bd      	mov	sp, r7
    1eaa:	b004      	add	sp, #16
    1eac:	bd80      	pop	{r7, pc}
    1eae:	46c0      	nop			; (mov r8, r8)
    1eb0:	20000098 	.word	0x20000098
    1eb4:	41004000 	.word	0x41004000
    1eb8:	00001a59 	.word	0x00001a59
    1ebc:	ffffa502 	.word	0xffffa502

00001ec0 <system_pinmux_get_config_defaults>:
{
    1ec0:	b580      	push	{r7, lr}
    1ec2:	b082      	sub	sp, #8
    1ec4:	af00      	add	r7, sp, #0
    1ec6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1ec8:	687b      	ldr	r3, [r7, #4]
    1eca:	2280      	movs	r2, #128	; 0x80
    1ecc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1ece:	687b      	ldr	r3, [r7, #4]
    1ed0:	2200      	movs	r2, #0
    1ed2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1ed4:	687b      	ldr	r3, [r7, #4]
    1ed6:	2201      	movs	r2, #1
    1ed8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1eda:	687b      	ldr	r3, [r7, #4]
    1edc:	2200      	movs	r2, #0
    1ede:	70da      	strb	r2, [r3, #3]
}
    1ee0:	46c0      	nop			; (mov r8, r8)
    1ee2:	46bd      	mov	sp, r7
    1ee4:	b002      	add	sp, #8
    1ee6:	bd80      	pop	{r7, pc}

00001ee8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1ee8:	b580      	push	{r7, lr}
    1eea:	b084      	sub	sp, #16
    1eec:	af00      	add	r7, sp, #0
    1eee:	0002      	movs	r2, r0
    1ef0:	6039      	str	r1, [r7, #0]
    1ef2:	1dfb      	adds	r3, r7, #7
    1ef4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    1ef6:	230c      	movs	r3, #12
    1ef8:	18fb      	adds	r3, r7, r3
    1efa:	0018      	movs	r0, r3
    1efc:	4b10      	ldr	r3, [pc, #64]	; (1f40 <port_pin_set_config+0x58>)
    1efe:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    1f00:	230c      	movs	r3, #12
    1f02:	18fb      	adds	r3, r7, r3
    1f04:	2280      	movs	r2, #128	; 0x80
    1f06:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1f08:	683b      	ldr	r3, [r7, #0]
    1f0a:	781a      	ldrb	r2, [r3, #0]
    1f0c:	230c      	movs	r3, #12
    1f0e:	18fb      	adds	r3, r7, r3
    1f10:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1f12:	683b      	ldr	r3, [r7, #0]
    1f14:	785a      	ldrb	r2, [r3, #1]
    1f16:	230c      	movs	r3, #12
    1f18:	18fb      	adds	r3, r7, r3
    1f1a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1f1c:	683b      	ldr	r3, [r7, #0]
    1f1e:	789a      	ldrb	r2, [r3, #2]
    1f20:	230c      	movs	r3, #12
    1f22:	18fb      	adds	r3, r7, r3
    1f24:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1f26:	230c      	movs	r3, #12
    1f28:	18fa      	adds	r2, r7, r3
    1f2a:	1dfb      	adds	r3, r7, #7
    1f2c:	781b      	ldrb	r3, [r3, #0]
    1f2e:	0011      	movs	r1, r2
    1f30:	0018      	movs	r0, r3
    1f32:	4b04      	ldr	r3, [pc, #16]	; (1f44 <port_pin_set_config+0x5c>)
    1f34:	4798      	blx	r3
}
    1f36:	46c0      	nop			; (mov r8, r8)
    1f38:	46bd      	mov	sp, r7
    1f3a:	b004      	add	sp, #16
    1f3c:	bd80      	pop	{r7, pc}
    1f3e:	46c0      	nop			; (mov r8, r8)
    1f40:	00001ec1 	.word	0x00001ec1
    1f44:	00003bf1 	.word	0x00003bf1

00001f48 <system_gclk_chan_get_config_defaults>:
{
    1f48:	b580      	push	{r7, lr}
    1f4a:	b082      	sub	sp, #8
    1f4c:	af00      	add	r7, sp, #0
    1f4e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    1f50:	687b      	ldr	r3, [r7, #4]
    1f52:	2200      	movs	r2, #0
    1f54:	701a      	strb	r2, [r3, #0]
}
    1f56:	46c0      	nop			; (mov r8, r8)
    1f58:	46bd      	mov	sp, r7
    1f5a:	b002      	add	sp, #8
    1f5c:	bd80      	pop	{r7, pc}

00001f5e <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1f5e:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f60:	b08d      	sub	sp, #52	; 0x34
    1f62:	af00      	add	r7, sp, #0
    1f64:	60b8      	str	r0, [r7, #8]
    1f66:	60f9      	str	r1, [r7, #12]
    1f68:	603a      	str	r2, [r7, #0]
    1f6a:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1f6c:	2300      	movs	r3, #0
    1f6e:	2400      	movs	r4, #0
    1f70:	623b      	str	r3, [r7, #32]
    1f72:	627c      	str	r4, [r7, #36]	; 0x24
    1f74:	2300      	movs	r3, #0
    1f76:	2400      	movs	r4, #0
    1f78:	61bb      	str	r3, [r7, #24]
    1f7a:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    1f7c:	233f      	movs	r3, #63	; 0x3f
    1f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    1f80:	e053      	b.n	202a <STACK_SIZE+0x2a>
		bit_shift = (uint64_t)1 << i;
    1f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1f84:	3b20      	subs	r3, #32
    1f86:	2b00      	cmp	r3, #0
    1f88:	db04      	blt.n	1f94 <long_division+0x36>
    1f8a:	2201      	movs	r2, #1
    1f8c:	409a      	lsls	r2, r3
    1f8e:	0013      	movs	r3, r2
    1f90:	617b      	str	r3, [r7, #20]
    1f92:	e00b      	b.n	1fac <long_division+0x4e>
    1f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1f96:	2220      	movs	r2, #32
    1f98:	1ad3      	subs	r3, r2, r3
    1f9a:	2201      	movs	r2, #1
    1f9c:	40da      	lsrs	r2, r3
    1f9e:	0013      	movs	r3, r2
    1fa0:	2100      	movs	r1, #0
    1fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1fa4:	4091      	lsls	r1, r2
    1fa6:	000a      	movs	r2, r1
    1fa8:	4313      	orrs	r3, r2
    1faa:	617b      	str	r3, [r7, #20]
    1fac:	2201      	movs	r2, #1
    1fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1fb0:	409a      	lsls	r2, r3
    1fb2:	0013      	movs	r3, r2
    1fb4:	613b      	str	r3, [r7, #16]

		r = r << 1;
    1fb6:	69bb      	ldr	r3, [r7, #24]
    1fb8:	69fc      	ldr	r4, [r7, #28]
    1fba:	18db      	adds	r3, r3, r3
    1fbc:	4164      	adcs	r4, r4
    1fbe:	61bb      	str	r3, [r7, #24]
    1fc0:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    1fc2:	68bb      	ldr	r3, [r7, #8]
    1fc4:	693a      	ldr	r2, [r7, #16]
    1fc6:	401a      	ands	r2, r3
    1fc8:	0015      	movs	r5, r2
    1fca:	68fb      	ldr	r3, [r7, #12]
    1fcc:	697a      	ldr	r2, [r7, #20]
    1fce:	401a      	ands	r2, r3
    1fd0:	0016      	movs	r6, r2
    1fd2:	002b      	movs	r3, r5
    1fd4:	4333      	orrs	r3, r6
    1fd6:	d007      	beq.n	1fe8 <long_division+0x8a>
			r |= 0x01;
    1fd8:	69bb      	ldr	r3, [r7, #24]
    1fda:	2201      	movs	r2, #1
    1fdc:	4313      	orrs	r3, r2
    1fde:	61bb      	str	r3, [r7, #24]
    1fe0:	69fb      	ldr	r3, [r7, #28]
    1fe2:	2200      	movs	r2, #0
    1fe4:	4313      	orrs	r3, r2
    1fe6:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    1fe8:	687a      	ldr	r2, [r7, #4]
    1fea:	69fb      	ldr	r3, [r7, #28]
    1fec:	429a      	cmp	r2, r3
    1fee:	d819      	bhi.n	2024 <STACK_SIZE+0x24>
    1ff0:	687a      	ldr	r2, [r7, #4]
    1ff2:	69fb      	ldr	r3, [r7, #28]
    1ff4:	429a      	cmp	r2, r3
    1ff6:	d103      	bne.n	2000 <STACK_SIZE>
    1ff8:	683a      	ldr	r2, [r7, #0]
    1ffa:	69bb      	ldr	r3, [r7, #24]
    1ffc:	429a      	cmp	r2, r3
    1ffe:	d811      	bhi.n	2024 <STACK_SIZE+0x24>
			r = r - d;
    2000:	69b9      	ldr	r1, [r7, #24]
    2002:	69fa      	ldr	r2, [r7, #28]
    2004:	683b      	ldr	r3, [r7, #0]
    2006:	687c      	ldr	r4, [r7, #4]
    2008:	1ac9      	subs	r1, r1, r3
    200a:	41a2      	sbcs	r2, r4
    200c:	000b      	movs	r3, r1
    200e:	0014      	movs	r4, r2
    2010:	61bb      	str	r3, [r7, #24]
    2012:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    2014:	6a3a      	ldr	r2, [r7, #32]
    2016:	693b      	ldr	r3, [r7, #16]
    2018:	4313      	orrs	r3, r2
    201a:	623b      	str	r3, [r7, #32]
    201c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    201e:	697b      	ldr	r3, [r7, #20]
    2020:	4313      	orrs	r3, r2
    2022:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    2024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2026:	3b01      	subs	r3, #1
    2028:	62fb      	str	r3, [r7, #44]	; 0x2c
    202a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    202c:	2b00      	cmp	r3, #0
    202e:	daa8      	bge.n	1f82 <long_division+0x24>
		}
	}

	return q;
    2030:	6a3b      	ldr	r3, [r7, #32]
    2032:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    2034:	0018      	movs	r0, r3
    2036:	0021      	movs	r1, r4
    2038:	46bd      	mov	sp, r7
    203a:	b00d      	add	sp, #52	; 0x34
    203c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000203e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    203e:	b580      	push	{r7, lr}
    2040:	b086      	sub	sp, #24
    2042:	af00      	add	r7, sp, #0
    2044:	60f8      	str	r0, [r7, #12]
    2046:	60b9      	str	r1, [r7, #8]
    2048:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    204a:	2316      	movs	r3, #22
    204c:	18fb      	adds	r3, r7, r3
    204e:	2200      	movs	r2, #0
    2050:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    2052:	68bb      	ldr	r3, [r7, #8]
    2054:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    2056:	68bb      	ldr	r3, [r7, #8]
    2058:	085a      	lsrs	r2, r3, #1
    205a:	68fb      	ldr	r3, [r7, #12]
    205c:	429a      	cmp	r2, r3
    205e:	d201      	bcs.n	2064 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2060:	2340      	movs	r3, #64	; 0x40
    2062:	e026      	b.n	20b2 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    2064:	68bb      	ldr	r3, [r7, #8]
    2066:	085b      	lsrs	r3, r3, #1
    2068:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    206a:	e00a      	b.n	2082 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    206c:	693a      	ldr	r2, [r7, #16]
    206e:	68fb      	ldr	r3, [r7, #12]
    2070:	1ad3      	subs	r3, r2, r3
    2072:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    2074:	2316      	movs	r3, #22
    2076:	18fb      	adds	r3, r7, r3
    2078:	881a      	ldrh	r2, [r3, #0]
    207a:	2316      	movs	r3, #22
    207c:	18fb      	adds	r3, r7, r3
    207e:	3201      	adds	r2, #1
    2080:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    2082:	693a      	ldr	r2, [r7, #16]
    2084:	68fb      	ldr	r3, [r7, #12]
    2086:	429a      	cmp	r2, r3
    2088:	d2f0      	bcs.n	206c <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    208a:	2316      	movs	r3, #22
    208c:	18fb      	adds	r3, r7, r3
    208e:	2216      	movs	r2, #22
    2090:	18ba      	adds	r2, r7, r2
    2092:	8812      	ldrh	r2, [r2, #0]
    2094:	3a01      	subs	r2, #1
    2096:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    2098:	2316      	movs	r3, #22
    209a:	18fb      	adds	r3, r7, r3
    209c:	881b      	ldrh	r3, [r3, #0]
    209e:	2bff      	cmp	r3, #255	; 0xff
    20a0:	d901      	bls.n	20a6 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    20a2:	2340      	movs	r3, #64	; 0x40
    20a4:	e005      	b.n	20b2 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    20a6:	687b      	ldr	r3, [r7, #4]
    20a8:	2216      	movs	r2, #22
    20aa:	18ba      	adds	r2, r7, r2
    20ac:	8812      	ldrh	r2, [r2, #0]
    20ae:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    20b0:	2300      	movs	r3, #0
	}
}
    20b2:	0018      	movs	r0, r3
    20b4:	46bd      	mov	sp, r7
    20b6:	b006      	add	sp, #24
    20b8:	bd80      	pop	{r7, pc}
	...

000020bc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    20bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    20be:	b0a1      	sub	sp, #132	; 0x84
    20c0:	af00      	add	r7, sp, #0
    20c2:	64f8      	str	r0, [r7, #76]	; 0x4c
    20c4:	64b9      	str	r1, [r7, #72]	; 0x48
    20c6:	647a      	str	r2, [r7, #68]	; 0x44
    20c8:	2243      	movs	r2, #67	; 0x43
    20ca:	18ba      	adds	r2, r7, r2
    20cc:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    20ce:	2300      	movs	r3, #0
    20d0:	2400      	movs	r4, #0
    20d2:	673b      	str	r3, [r7, #112]	; 0x70
    20d4:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    20d6:	2300      	movs	r3, #0
    20d8:	2400      	movs	r4, #0
    20da:	66bb      	str	r3, [r7, #104]	; 0x68
    20dc:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    20de:	2300      	movs	r3, #0
    20e0:	2400      	movs	r4, #0
    20e2:	67bb      	str	r3, [r7, #120]	; 0x78
    20e4:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    20e6:	2300      	movs	r3, #0
    20e8:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    20ea:	2358      	movs	r3, #88	; 0x58
    20ec:	2240      	movs	r2, #64	; 0x40
    20ee:	4694      	mov	ip, r2
    20f0:	44bc      	add	ip, r7
    20f2:	4463      	add	r3, ip
    20f4:	781a      	ldrb	r2, [r3, #0]
    20f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    20f8:	435a      	muls	r2, r3
    20fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    20fc:	429a      	cmp	r2, r3
    20fe:	d901      	bls.n	2104 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2100:	2340      	movs	r3, #64	; 0x40
    2102:	e0b3      	b.n	226c <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    2104:	2343      	movs	r3, #67	; 0x43
    2106:	18fb      	adds	r3, r7, r3
    2108:	781b      	ldrb	r3, [r3, #0]
    210a:	2b00      	cmp	r3, #0
    210c:	d13d      	bne.n	218a <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    210e:	2358      	movs	r3, #88	; 0x58
    2110:	2240      	movs	r2, #64	; 0x40
    2112:	4694      	mov	ip, r2
    2114:	44bc      	add	ip, r7
    2116:	4463      	add	r3, ip
    2118:	781b      	ldrb	r3, [r3, #0]
    211a:	b2db      	uxtb	r3, r3
    211c:	613b      	str	r3, [r7, #16]
    211e:	2300      	movs	r3, #0
    2120:	617b      	str	r3, [r7, #20]
    2122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2124:	60bb      	str	r3, [r7, #8]
    2126:	2300      	movs	r3, #0
    2128:	60fb      	str	r3, [r7, #12]
    212a:	4c52      	ldr	r4, [pc, #328]	; (2274 <_sercom_get_async_baud_val+0x1b8>)
    212c:	68ba      	ldr	r2, [r7, #8]
    212e:	68fb      	ldr	r3, [r7, #12]
    2130:	6938      	ldr	r0, [r7, #16]
    2132:	6979      	ldr	r1, [r7, #20]
    2134:	47a0      	blx	r4
    2136:	0003      	movs	r3, r0
    2138:	000c      	movs	r4, r1
    213a:	001b      	movs	r3, r3
    213c:	65fb      	str	r3, [r7, #92]	; 0x5c
    213e:	2300      	movs	r3, #0
    2140:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    2142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2144:	603b      	str	r3, [r7, #0]
    2146:	2300      	movs	r3, #0
    2148:	607b      	str	r3, [r7, #4]
    214a:	6db8      	ldr	r0, [r7, #88]	; 0x58
    214c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    214e:	683a      	ldr	r2, [r7, #0]
    2150:	687b      	ldr	r3, [r7, #4]
    2152:	4c49      	ldr	r4, [pc, #292]	; (2278 <_sercom_get_async_baud_val+0x1bc>)
    2154:	47a0      	blx	r4
    2156:	0003      	movs	r3, r0
    2158:	000c      	movs	r4, r1
    215a:	673b      	str	r3, [r7, #112]	; 0x70
    215c:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    215e:	2100      	movs	r1, #0
    2160:	2201      	movs	r2, #1
    2162:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    2164:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    2166:	1ac9      	subs	r1, r1, r3
    2168:	41a2      	sbcs	r2, r4
    216a:	000b      	movs	r3, r1
    216c:	0014      	movs	r4, r2
    216e:	66bb      	str	r3, [r7, #104]	; 0x68
    2170:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    2172:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2174:	0c1b      	lsrs	r3, r3, #16
    2176:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    2178:	0416      	lsls	r6, r2, #16
    217a:	431e      	orrs	r6, r3
    217c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    217e:	041d      	lsls	r5, r3, #16
    2180:	0033      	movs	r3, r6
    2182:	67bb      	str	r3, [r7, #120]	; 0x78
    2184:	2300      	movs	r3, #0
    2186:	67fb      	str	r3, [r7, #124]	; 0x7c
    2188:	e06a      	b.n	2260 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    218a:	2343      	movs	r3, #67	; 0x43
    218c:	18fb      	adds	r3, r7, r3
    218e:	781b      	ldrb	r3, [r3, #0]
    2190:	2b01      	cmp	r3, #1
    2192:	d165      	bne.n	2260 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    2194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2196:	633b      	str	r3, [r7, #48]	; 0x30
    2198:	2300      	movs	r3, #0
    219a:	637b      	str	r3, [r7, #52]	; 0x34
    219c:	2358      	movs	r3, #88	; 0x58
    219e:	2240      	movs	r2, #64	; 0x40
    21a0:	4694      	mov	ip, r2
    21a2:	44bc      	add	ip, r7
    21a4:	4463      	add	r3, ip
    21a6:	781b      	ldrb	r3, [r3, #0]
    21a8:	b2db      	uxtb	r3, r3
    21aa:	62bb      	str	r3, [r7, #40]	; 0x28
    21ac:	2300      	movs	r3, #0
    21ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    21b0:	4c30      	ldr	r4, [pc, #192]	; (2274 <_sercom_get_async_baud_val+0x1b8>)
    21b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    21b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    21b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
    21b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
    21ba:	47a0      	blx	r4
    21bc:	0003      	movs	r3, r0
    21be:	000c      	movs	r4, r1
    21c0:	65bb      	str	r3, [r7, #88]	; 0x58
    21c2:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    21c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    21c6:	623b      	str	r3, [r7, #32]
    21c8:	2300      	movs	r3, #0
    21ca:	627b      	str	r3, [r7, #36]	; 0x24
    21cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    21ce:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    21d0:	001a      	movs	r2, r3
    21d2:	0023      	movs	r3, r4
    21d4:	6a38      	ldr	r0, [r7, #32]
    21d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
    21d8:	4c27      	ldr	r4, [pc, #156]	; (2278 <_sercom_get_async_baud_val+0x1bc>)
    21da:	47a0      	blx	r4
    21dc:	0003      	movs	r3, r0
    21de:	000c      	movs	r4, r1
    21e0:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    21e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    21e4:	2380      	movs	r3, #128	; 0x80
    21e6:	019b      	lsls	r3, r3, #6
    21e8:	429a      	cmp	r2, r3
    21ea:	d901      	bls.n	21f0 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    21ec:	2340      	movs	r3, #64	; 0x40
    21ee:	e03d      	b.n	226c <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    21f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    21f2:	61bb      	str	r3, [r7, #24]
    21f4:	2300      	movs	r3, #0
    21f6:	61fb      	str	r3, [r7, #28]
    21f8:	69b9      	ldr	r1, [r7, #24]
    21fa:	69fa      	ldr	r2, [r7, #28]
    21fc:	000b      	movs	r3, r1
    21fe:	0f5b      	lsrs	r3, r3, #29
    2200:	0010      	movs	r0, r2
    2202:	00c0      	lsls	r0, r0, #3
    2204:	63f8      	str	r0, [r7, #60]	; 0x3c
    2206:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    2208:	4318      	orrs	r0, r3
    220a:	63f8      	str	r0, [r7, #60]	; 0x3c
    220c:	000b      	movs	r3, r1
    220e:	00db      	lsls	r3, r3, #3
    2210:	63bb      	str	r3, [r7, #56]	; 0x38
    2212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    2214:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    2216:	001a      	movs	r2, r3
    2218:	0023      	movs	r3, r4
    221a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    221c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    221e:	4c16      	ldr	r4, [pc, #88]	; (2278 <_sercom_get_async_baud_val+0x1bc>)
    2220:	47a0      	blx	r4
    2222:	0003      	movs	r3, r0
    2224:	000c      	movs	r4, r1
    2226:	65bb      	str	r3, [r7, #88]	; 0x58
    2228:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    222a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    222c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    222e:	b2d9      	uxtb	r1, r3
    2230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    2232:	b2db      	uxtb	r3, r3
    2234:	00db      	lsls	r3, r3, #3
    2236:	b2da      	uxtb	r2, r3
    2238:	2317      	movs	r3, #23
    223a:	2040      	movs	r0, #64	; 0x40
    223c:	4684      	mov	ip, r0
    223e:	44bc      	add	ip, r7
    2240:	4463      	add	r3, ip
    2242:	1a8a      	subs	r2, r1, r2
    2244:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    2246:	2317      	movs	r3, #23
    2248:	2240      	movs	r2, #64	; 0x40
    224a:	4694      	mov	ip, r2
    224c:	44bc      	add	ip, r7
    224e:	4463      	add	r3, ip
    2250:	781b      	ldrb	r3, [r3, #0]
    2252:	035b      	lsls	r3, r3, #13
    2254:	001a      	movs	r2, r3
    2256:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    2258:	4313      	orrs	r3, r2
    225a:	67bb      	str	r3, [r7, #120]	; 0x78
    225c:	2300      	movs	r3, #0
    225e:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    2260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    2262:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    2264:	b29a      	uxth	r2, r3
    2266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2268:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    226a:	2300      	movs	r3, #0
}
    226c:	0018      	movs	r0, r3
    226e:	46bd      	mov	sp, r7
    2270:	b021      	add	sp, #132	; 0x84
    2272:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2274:	000048e1 	.word	0x000048e1
    2278:	00001f5f 	.word	0x00001f5f

0000227c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    227c:	b580      	push	{r7, lr}
    227e:	b084      	sub	sp, #16
    2280:	af00      	add	r7, sp, #0
    2282:	0002      	movs	r2, r0
    2284:	1dfb      	adds	r3, r7, #7
    2286:	701a      	strb	r2, [r3, #0]
    2288:	1dbb      	adds	r3, r7, #6
    228a:	1c0a      	adds	r2, r1, #0
    228c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    228e:	4b1a      	ldr	r3, [pc, #104]	; (22f8 <sercom_set_gclk_generator+0x7c>)
    2290:	781b      	ldrb	r3, [r3, #0]
    2292:	2201      	movs	r2, #1
    2294:	4053      	eors	r3, r2
    2296:	b2db      	uxtb	r3, r3
    2298:	2b00      	cmp	r3, #0
    229a:	d103      	bne.n	22a4 <sercom_set_gclk_generator+0x28>
    229c:	1dbb      	adds	r3, r7, #6
    229e:	781b      	ldrb	r3, [r3, #0]
    22a0:	2b00      	cmp	r3, #0
    22a2:	d01b      	beq.n	22dc <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    22a4:	230c      	movs	r3, #12
    22a6:	18fb      	adds	r3, r7, r3
    22a8:	0018      	movs	r0, r3
    22aa:	4b14      	ldr	r3, [pc, #80]	; (22fc <sercom_set_gclk_generator+0x80>)
    22ac:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    22ae:	230c      	movs	r3, #12
    22b0:	18fb      	adds	r3, r7, r3
    22b2:	1dfa      	adds	r2, r7, #7
    22b4:	7812      	ldrb	r2, [r2, #0]
    22b6:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    22b8:	230c      	movs	r3, #12
    22ba:	18fb      	adds	r3, r7, r3
    22bc:	0019      	movs	r1, r3
    22be:	2013      	movs	r0, #19
    22c0:	4b0f      	ldr	r3, [pc, #60]	; (2300 <sercom_set_gclk_generator+0x84>)
    22c2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    22c4:	2013      	movs	r0, #19
    22c6:	4b0f      	ldr	r3, [pc, #60]	; (2304 <sercom_set_gclk_generator+0x88>)
    22c8:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    22ca:	4b0b      	ldr	r3, [pc, #44]	; (22f8 <sercom_set_gclk_generator+0x7c>)
    22cc:	1dfa      	adds	r2, r7, #7
    22ce:	7812      	ldrb	r2, [r2, #0]
    22d0:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    22d2:	4b09      	ldr	r3, [pc, #36]	; (22f8 <sercom_set_gclk_generator+0x7c>)
    22d4:	2201      	movs	r2, #1
    22d6:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    22d8:	2300      	movs	r3, #0
    22da:	e008      	b.n	22ee <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    22dc:	4b06      	ldr	r3, [pc, #24]	; (22f8 <sercom_set_gclk_generator+0x7c>)
    22de:	785b      	ldrb	r3, [r3, #1]
    22e0:	1dfa      	adds	r2, r7, #7
    22e2:	7812      	ldrb	r2, [r2, #0]
    22e4:	429a      	cmp	r2, r3
    22e6:	d101      	bne.n	22ec <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    22e8:	2300      	movs	r3, #0
    22ea:	e000      	b.n	22ee <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    22ec:	231d      	movs	r3, #29
}
    22ee:	0018      	movs	r0, r3
    22f0:	46bd      	mov	sp, r7
    22f2:	b004      	add	sp, #16
    22f4:	bd80      	pop	{r7, pc}
    22f6:	46c0      	nop			; (mov r8, r8)
    22f8:	200000a0 	.word	0x200000a0
    22fc:	00001f49 	.word	0x00001f49
    2300:	00003905 	.word	0x00003905
    2304:	00003949 	.word	0x00003949

00002308 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    2308:	b580      	push	{r7, lr}
    230a:	b082      	sub	sp, #8
    230c:	af00      	add	r7, sp, #0
    230e:	6078      	str	r0, [r7, #4]
    2310:	000a      	movs	r2, r1
    2312:	1cfb      	adds	r3, r7, #3
    2314:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    2316:	687b      	ldr	r3, [r7, #4]
    2318:	4a4d      	ldr	r2, [pc, #308]	; (2450 <_sercom_get_default_pad+0x148>)
    231a:	4293      	cmp	r3, r2
    231c:	d03f      	beq.n	239e <_sercom_get_default_pad+0x96>
    231e:	4a4c      	ldr	r2, [pc, #304]	; (2450 <_sercom_get_default_pad+0x148>)
    2320:	4293      	cmp	r3, r2
    2322:	d806      	bhi.n	2332 <_sercom_get_default_pad+0x2a>
    2324:	4a4b      	ldr	r2, [pc, #300]	; (2454 <_sercom_get_default_pad+0x14c>)
    2326:	4293      	cmp	r3, r2
    2328:	d00f      	beq.n	234a <_sercom_get_default_pad+0x42>
    232a:	4a4b      	ldr	r2, [pc, #300]	; (2458 <_sercom_get_default_pad+0x150>)
    232c:	4293      	cmp	r3, r2
    232e:	d021      	beq.n	2374 <_sercom_get_default_pad+0x6c>
    2330:	e089      	b.n	2446 <_sercom_get_default_pad+0x13e>
    2332:	4a4a      	ldr	r2, [pc, #296]	; (245c <_sercom_get_default_pad+0x154>)
    2334:	4293      	cmp	r3, r2
    2336:	d100      	bne.n	233a <_sercom_get_default_pad+0x32>
    2338:	e05b      	b.n	23f2 <_sercom_get_default_pad+0xea>
    233a:	4a49      	ldr	r2, [pc, #292]	; (2460 <_sercom_get_default_pad+0x158>)
    233c:	4293      	cmp	r3, r2
    233e:	d100      	bne.n	2342 <_sercom_get_default_pad+0x3a>
    2340:	e06c      	b.n	241c <_sercom_get_default_pad+0x114>
    2342:	4a48      	ldr	r2, [pc, #288]	; (2464 <_sercom_get_default_pad+0x15c>)
    2344:	4293      	cmp	r3, r2
    2346:	d03f      	beq.n	23c8 <_sercom_get_default_pad+0xc0>
    2348:	e07d      	b.n	2446 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    234a:	1cfb      	adds	r3, r7, #3
    234c:	781b      	ldrb	r3, [r3, #0]
    234e:	2b01      	cmp	r3, #1
    2350:	d00a      	beq.n	2368 <_sercom_get_default_pad+0x60>
    2352:	dc02      	bgt.n	235a <_sercom_get_default_pad+0x52>
    2354:	2b00      	cmp	r3, #0
    2356:	d005      	beq.n	2364 <_sercom_get_default_pad+0x5c>
    2358:	e075      	b.n	2446 <_sercom_get_default_pad+0x13e>
    235a:	2b02      	cmp	r3, #2
    235c:	d006      	beq.n	236c <_sercom_get_default_pad+0x64>
    235e:	2b03      	cmp	r3, #3
    2360:	d006      	beq.n	2370 <_sercom_get_default_pad+0x68>
    2362:	e070      	b.n	2446 <_sercom_get_default_pad+0x13e>
    2364:	4b40      	ldr	r3, [pc, #256]	; (2468 <_sercom_get_default_pad+0x160>)
    2366:	e06f      	b.n	2448 <_sercom_get_default_pad+0x140>
    2368:	4b40      	ldr	r3, [pc, #256]	; (246c <_sercom_get_default_pad+0x164>)
    236a:	e06d      	b.n	2448 <_sercom_get_default_pad+0x140>
    236c:	4b40      	ldr	r3, [pc, #256]	; (2470 <_sercom_get_default_pad+0x168>)
    236e:	e06b      	b.n	2448 <_sercom_get_default_pad+0x140>
    2370:	4b40      	ldr	r3, [pc, #256]	; (2474 <_sercom_get_default_pad+0x16c>)
    2372:	e069      	b.n	2448 <_sercom_get_default_pad+0x140>
    2374:	1cfb      	adds	r3, r7, #3
    2376:	781b      	ldrb	r3, [r3, #0]
    2378:	2b01      	cmp	r3, #1
    237a:	d00a      	beq.n	2392 <_sercom_get_default_pad+0x8a>
    237c:	dc02      	bgt.n	2384 <_sercom_get_default_pad+0x7c>
    237e:	2b00      	cmp	r3, #0
    2380:	d005      	beq.n	238e <_sercom_get_default_pad+0x86>
    2382:	e060      	b.n	2446 <_sercom_get_default_pad+0x13e>
    2384:	2b02      	cmp	r3, #2
    2386:	d006      	beq.n	2396 <_sercom_get_default_pad+0x8e>
    2388:	2b03      	cmp	r3, #3
    238a:	d006      	beq.n	239a <_sercom_get_default_pad+0x92>
    238c:	e05b      	b.n	2446 <_sercom_get_default_pad+0x13e>
    238e:	2303      	movs	r3, #3
    2390:	e05a      	b.n	2448 <_sercom_get_default_pad+0x140>
    2392:	4b39      	ldr	r3, [pc, #228]	; (2478 <_sercom_get_default_pad+0x170>)
    2394:	e058      	b.n	2448 <_sercom_get_default_pad+0x140>
    2396:	4b39      	ldr	r3, [pc, #228]	; (247c <_sercom_get_default_pad+0x174>)
    2398:	e056      	b.n	2448 <_sercom_get_default_pad+0x140>
    239a:	4b39      	ldr	r3, [pc, #228]	; (2480 <_sercom_get_default_pad+0x178>)
    239c:	e054      	b.n	2448 <_sercom_get_default_pad+0x140>
    239e:	1cfb      	adds	r3, r7, #3
    23a0:	781b      	ldrb	r3, [r3, #0]
    23a2:	2b01      	cmp	r3, #1
    23a4:	d00a      	beq.n	23bc <_sercom_get_default_pad+0xb4>
    23a6:	dc02      	bgt.n	23ae <_sercom_get_default_pad+0xa6>
    23a8:	2b00      	cmp	r3, #0
    23aa:	d005      	beq.n	23b8 <_sercom_get_default_pad+0xb0>
    23ac:	e04b      	b.n	2446 <_sercom_get_default_pad+0x13e>
    23ae:	2b02      	cmp	r3, #2
    23b0:	d006      	beq.n	23c0 <_sercom_get_default_pad+0xb8>
    23b2:	2b03      	cmp	r3, #3
    23b4:	d006      	beq.n	23c4 <_sercom_get_default_pad+0xbc>
    23b6:	e046      	b.n	2446 <_sercom_get_default_pad+0x13e>
    23b8:	4b32      	ldr	r3, [pc, #200]	; (2484 <_sercom_get_default_pad+0x17c>)
    23ba:	e045      	b.n	2448 <_sercom_get_default_pad+0x140>
    23bc:	4b32      	ldr	r3, [pc, #200]	; (2488 <_sercom_get_default_pad+0x180>)
    23be:	e043      	b.n	2448 <_sercom_get_default_pad+0x140>
    23c0:	4b32      	ldr	r3, [pc, #200]	; (248c <_sercom_get_default_pad+0x184>)
    23c2:	e041      	b.n	2448 <_sercom_get_default_pad+0x140>
    23c4:	4b32      	ldr	r3, [pc, #200]	; (2490 <_sercom_get_default_pad+0x188>)
    23c6:	e03f      	b.n	2448 <_sercom_get_default_pad+0x140>
    23c8:	1cfb      	adds	r3, r7, #3
    23ca:	781b      	ldrb	r3, [r3, #0]
    23cc:	2b01      	cmp	r3, #1
    23ce:	d00a      	beq.n	23e6 <_sercom_get_default_pad+0xde>
    23d0:	dc02      	bgt.n	23d8 <_sercom_get_default_pad+0xd0>
    23d2:	2b00      	cmp	r3, #0
    23d4:	d005      	beq.n	23e2 <_sercom_get_default_pad+0xda>
    23d6:	e036      	b.n	2446 <_sercom_get_default_pad+0x13e>
    23d8:	2b02      	cmp	r3, #2
    23da:	d006      	beq.n	23ea <_sercom_get_default_pad+0xe2>
    23dc:	2b03      	cmp	r3, #3
    23de:	d006      	beq.n	23ee <_sercom_get_default_pad+0xe6>
    23e0:	e031      	b.n	2446 <_sercom_get_default_pad+0x13e>
    23e2:	4b2c      	ldr	r3, [pc, #176]	; (2494 <_sercom_get_default_pad+0x18c>)
    23e4:	e030      	b.n	2448 <_sercom_get_default_pad+0x140>
    23e6:	4b2c      	ldr	r3, [pc, #176]	; (2498 <_sercom_get_default_pad+0x190>)
    23e8:	e02e      	b.n	2448 <_sercom_get_default_pad+0x140>
    23ea:	4b2c      	ldr	r3, [pc, #176]	; (249c <_sercom_get_default_pad+0x194>)
    23ec:	e02c      	b.n	2448 <_sercom_get_default_pad+0x140>
    23ee:	4b2c      	ldr	r3, [pc, #176]	; (24a0 <_sercom_get_default_pad+0x198>)
    23f0:	e02a      	b.n	2448 <_sercom_get_default_pad+0x140>
    23f2:	1cfb      	adds	r3, r7, #3
    23f4:	781b      	ldrb	r3, [r3, #0]
    23f6:	2b01      	cmp	r3, #1
    23f8:	d00a      	beq.n	2410 <_sercom_get_default_pad+0x108>
    23fa:	dc02      	bgt.n	2402 <_sercom_get_default_pad+0xfa>
    23fc:	2b00      	cmp	r3, #0
    23fe:	d005      	beq.n	240c <_sercom_get_default_pad+0x104>
    2400:	e021      	b.n	2446 <_sercom_get_default_pad+0x13e>
    2402:	2b02      	cmp	r3, #2
    2404:	d006      	beq.n	2414 <_sercom_get_default_pad+0x10c>
    2406:	2b03      	cmp	r3, #3
    2408:	d006      	beq.n	2418 <_sercom_get_default_pad+0x110>
    240a:	e01c      	b.n	2446 <_sercom_get_default_pad+0x13e>
    240c:	4b25      	ldr	r3, [pc, #148]	; (24a4 <_sercom_get_default_pad+0x19c>)
    240e:	e01b      	b.n	2448 <_sercom_get_default_pad+0x140>
    2410:	4b25      	ldr	r3, [pc, #148]	; (24a8 <_sercom_get_default_pad+0x1a0>)
    2412:	e019      	b.n	2448 <_sercom_get_default_pad+0x140>
    2414:	4b25      	ldr	r3, [pc, #148]	; (24ac <_sercom_get_default_pad+0x1a4>)
    2416:	e017      	b.n	2448 <_sercom_get_default_pad+0x140>
    2418:	4b25      	ldr	r3, [pc, #148]	; (24b0 <_sercom_get_default_pad+0x1a8>)
    241a:	e015      	b.n	2448 <_sercom_get_default_pad+0x140>
    241c:	1cfb      	adds	r3, r7, #3
    241e:	781b      	ldrb	r3, [r3, #0]
    2420:	2b01      	cmp	r3, #1
    2422:	d00a      	beq.n	243a <_sercom_get_default_pad+0x132>
    2424:	dc02      	bgt.n	242c <_sercom_get_default_pad+0x124>
    2426:	2b00      	cmp	r3, #0
    2428:	d005      	beq.n	2436 <_sercom_get_default_pad+0x12e>
    242a:	e00c      	b.n	2446 <_sercom_get_default_pad+0x13e>
    242c:	2b02      	cmp	r3, #2
    242e:	d006      	beq.n	243e <_sercom_get_default_pad+0x136>
    2430:	2b03      	cmp	r3, #3
    2432:	d006      	beq.n	2442 <_sercom_get_default_pad+0x13a>
    2434:	e007      	b.n	2446 <_sercom_get_default_pad+0x13e>
    2436:	4b1f      	ldr	r3, [pc, #124]	; (24b4 <_sercom_get_default_pad+0x1ac>)
    2438:	e006      	b.n	2448 <_sercom_get_default_pad+0x140>
    243a:	4b1f      	ldr	r3, [pc, #124]	; (24b8 <_sercom_get_default_pad+0x1b0>)
    243c:	e004      	b.n	2448 <_sercom_get_default_pad+0x140>
    243e:	4b1f      	ldr	r3, [pc, #124]	; (24bc <_sercom_get_default_pad+0x1b4>)
    2440:	e002      	b.n	2448 <_sercom_get_default_pad+0x140>
    2442:	4b1f      	ldr	r3, [pc, #124]	; (24c0 <_sercom_get_default_pad+0x1b8>)
    2444:	e000      	b.n	2448 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    2446:	2300      	movs	r3, #0
}
    2448:	0018      	movs	r0, r3
    244a:	46bd      	mov	sp, r7
    244c:	b002      	add	sp, #8
    244e:	bd80      	pop	{r7, pc}
    2450:	42001000 	.word	0x42001000
    2454:	42000800 	.word	0x42000800
    2458:	42000c00 	.word	0x42000c00
    245c:	42001800 	.word	0x42001800
    2460:	42001c00 	.word	0x42001c00
    2464:	42001400 	.word	0x42001400
    2468:	00040003 	.word	0x00040003
    246c:	00050003 	.word	0x00050003
    2470:	00060003 	.word	0x00060003
    2474:	00070003 	.word	0x00070003
    2478:	00010003 	.word	0x00010003
    247c:	001e0003 	.word	0x001e0003
    2480:	001f0003 	.word	0x001f0003
    2484:	00080003 	.word	0x00080003
    2488:	00090003 	.word	0x00090003
    248c:	000a0003 	.word	0x000a0003
    2490:	000b0003 	.word	0x000b0003
    2494:	00100003 	.word	0x00100003
    2498:	00110003 	.word	0x00110003
    249c:	00120003 	.word	0x00120003
    24a0:	00130003 	.word	0x00130003
    24a4:	000c0003 	.word	0x000c0003
    24a8:	000d0003 	.word	0x000d0003
    24ac:	000e0003 	.word	0x000e0003
    24b0:	000f0003 	.word	0x000f0003
    24b4:	00160003 	.word	0x00160003
    24b8:	00170003 	.word	0x00170003
    24bc:	00180003 	.word	0x00180003
    24c0:	00190003 	.word	0x00190003

000024c4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    24c4:	b590      	push	{r4, r7, lr}
    24c6:	b08b      	sub	sp, #44	; 0x2c
    24c8:	af00      	add	r7, sp, #0
    24ca:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    24cc:	230c      	movs	r3, #12
    24ce:	18fb      	adds	r3, r7, r3
    24d0:	4a0f      	ldr	r2, [pc, #60]	; (2510 <_sercom_get_sercom_inst_index+0x4c>)
    24d2:	ca13      	ldmia	r2!, {r0, r1, r4}
    24d4:	c313      	stmia	r3!, {r0, r1, r4}
    24d6:	ca13      	ldmia	r2!, {r0, r1, r4}
    24d8:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    24da:	2300      	movs	r3, #0
    24dc:	627b      	str	r3, [r7, #36]	; 0x24
    24de:	e00e      	b.n	24fe <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    24e0:	230c      	movs	r3, #12
    24e2:	18fb      	adds	r3, r7, r3
    24e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    24e6:	0092      	lsls	r2, r2, #2
    24e8:	58d3      	ldr	r3, [r2, r3]
    24ea:	001a      	movs	r2, r3
    24ec:	687b      	ldr	r3, [r7, #4]
    24ee:	429a      	cmp	r2, r3
    24f0:	d102      	bne.n	24f8 <_sercom_get_sercom_inst_index+0x34>
			return i;
    24f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    24f4:	b2db      	uxtb	r3, r3
    24f6:	e006      	b.n	2506 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    24f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    24fa:	3301      	adds	r3, #1
    24fc:	627b      	str	r3, [r7, #36]	; 0x24
    24fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2500:	2b05      	cmp	r3, #5
    2502:	d9ed      	bls.n	24e0 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2504:	2300      	movs	r3, #0
}
    2506:	0018      	movs	r0, r3
    2508:	46bd      	mov	sp, r7
    250a:	b00b      	add	sp, #44	; 0x2c
    250c:	bd90      	pop	{r4, r7, pc}
    250e:	46c0      	nop			; (mov r8, r8)
    2510:	00005bb4 	.word	0x00005bb4

00002514 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    2514:	b580      	push	{r7, lr}
    2516:	b082      	sub	sp, #8
    2518:	af00      	add	r7, sp, #0
    251a:	0002      	movs	r2, r0
    251c:	1dfb      	adds	r3, r7, #7
    251e:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    2520:	46c0      	nop			; (mov r8, r8)
    2522:	46bd      	mov	sp, r7
    2524:	b002      	add	sp, #8
    2526:	bd80      	pop	{r7, pc}

00002528 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2528:	b580      	push	{r7, lr}
    252a:	b084      	sub	sp, #16
    252c:	af00      	add	r7, sp, #0
    252e:	0002      	movs	r2, r0
    2530:	6039      	str	r1, [r7, #0]
    2532:	1dfb      	adds	r3, r7, #7
    2534:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2536:	4b13      	ldr	r3, [pc, #76]	; (2584 <_sercom_set_handler+0x5c>)
    2538:	781b      	ldrb	r3, [r3, #0]
    253a:	2201      	movs	r2, #1
    253c:	4053      	eors	r3, r2
    253e:	b2db      	uxtb	r3, r3
    2540:	2b00      	cmp	r3, #0
    2542:	d015      	beq.n	2570 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2544:	2300      	movs	r3, #0
    2546:	60fb      	str	r3, [r7, #12]
    2548:	e00c      	b.n	2564 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    254a:	4b0f      	ldr	r3, [pc, #60]	; (2588 <_sercom_set_handler+0x60>)
    254c:	68fa      	ldr	r2, [r7, #12]
    254e:	0092      	lsls	r2, r2, #2
    2550:	490e      	ldr	r1, [pc, #56]	; (258c <_sercom_set_handler+0x64>)
    2552:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    2554:	4b0e      	ldr	r3, [pc, #56]	; (2590 <_sercom_set_handler+0x68>)
    2556:	68fa      	ldr	r2, [r7, #12]
    2558:	0092      	lsls	r2, r2, #2
    255a:	2100      	movs	r1, #0
    255c:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    255e:	68fb      	ldr	r3, [r7, #12]
    2560:	3301      	adds	r3, #1
    2562:	60fb      	str	r3, [r7, #12]
    2564:	68fb      	ldr	r3, [r7, #12]
    2566:	2b05      	cmp	r3, #5
    2568:	d9ef      	bls.n	254a <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    256a:	4b06      	ldr	r3, [pc, #24]	; (2584 <_sercom_set_handler+0x5c>)
    256c:	2201      	movs	r2, #1
    256e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2570:	1dfb      	adds	r3, r7, #7
    2572:	781a      	ldrb	r2, [r3, #0]
    2574:	4b04      	ldr	r3, [pc, #16]	; (2588 <_sercom_set_handler+0x60>)
    2576:	0092      	lsls	r2, r2, #2
    2578:	6839      	ldr	r1, [r7, #0]
    257a:	50d1      	str	r1, [r2, r3]
}
    257c:	46c0      	nop			; (mov r8, r8)
    257e:	46bd      	mov	sp, r7
    2580:	b004      	add	sp, #16
    2582:	bd80      	pop	{r7, pc}
    2584:	200000a2 	.word	0x200000a2
    2588:	200000a4 	.word	0x200000a4
    258c:	00002515 	.word	0x00002515
    2590:	20000120 	.word	0x20000120

00002594 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2594:	b590      	push	{r4, r7, lr}
    2596:	b085      	sub	sp, #20
    2598:	af00      	add	r7, sp, #0
    259a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    259c:	2308      	movs	r3, #8
    259e:	18fa      	adds	r2, r7, r3
    25a0:	4b0c      	ldr	r3, [pc, #48]	; (25d4 <_sercom_get_interrupt_vector+0x40>)
    25a2:	0010      	movs	r0, r2
    25a4:	0019      	movs	r1, r3
    25a6:	2306      	movs	r3, #6
    25a8:	001a      	movs	r2, r3
    25aa:	4b0b      	ldr	r3, [pc, #44]	; (25d8 <_sercom_get_interrupt_vector+0x44>)
    25ac:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    25ae:	230f      	movs	r3, #15
    25b0:	18fc      	adds	r4, r7, r3
    25b2:	687b      	ldr	r3, [r7, #4]
    25b4:	0018      	movs	r0, r3
    25b6:	4b09      	ldr	r3, [pc, #36]	; (25dc <_sercom_get_interrupt_vector+0x48>)
    25b8:	4798      	blx	r3
    25ba:	0003      	movs	r3, r0
    25bc:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    25be:	230f      	movs	r3, #15
    25c0:	18fb      	adds	r3, r7, r3
    25c2:	781b      	ldrb	r3, [r3, #0]
    25c4:	2208      	movs	r2, #8
    25c6:	18ba      	adds	r2, r7, r2
    25c8:	5cd3      	ldrb	r3, [r2, r3]
    25ca:	b25b      	sxtb	r3, r3
}
    25cc:	0018      	movs	r0, r3
    25ce:	46bd      	mov	sp, r7
    25d0:	b005      	add	sp, #20
    25d2:	bd90      	pop	{r4, r7, pc}
    25d4:	00005bcc 	.word	0x00005bcc
    25d8:	0000497d 	.word	0x0000497d
    25dc:	000024c5 	.word	0x000024c5

000025e0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    25e0:	b580      	push	{r7, lr}
    25e2:	af00      	add	r7, sp, #0
    25e4:	4b03      	ldr	r3, [pc, #12]	; (25f4 <SERCOM0_Handler+0x14>)
    25e6:	681b      	ldr	r3, [r3, #0]
    25e8:	2000      	movs	r0, #0
    25ea:	4798      	blx	r3
    25ec:	46c0      	nop			; (mov r8, r8)
    25ee:	46bd      	mov	sp, r7
    25f0:	bd80      	pop	{r7, pc}
    25f2:	46c0      	nop			; (mov r8, r8)
    25f4:	200000a4 	.word	0x200000a4

000025f8 <SERCOM1_Handler>:
    25f8:	b580      	push	{r7, lr}
    25fa:	af00      	add	r7, sp, #0
    25fc:	4b03      	ldr	r3, [pc, #12]	; (260c <SERCOM1_Handler+0x14>)
    25fe:	685b      	ldr	r3, [r3, #4]
    2600:	2001      	movs	r0, #1
    2602:	4798      	blx	r3
    2604:	46c0      	nop			; (mov r8, r8)
    2606:	46bd      	mov	sp, r7
    2608:	bd80      	pop	{r7, pc}
    260a:	46c0      	nop			; (mov r8, r8)
    260c:	200000a4 	.word	0x200000a4

00002610 <SERCOM2_Handler>:
    2610:	b580      	push	{r7, lr}
    2612:	af00      	add	r7, sp, #0
    2614:	4b03      	ldr	r3, [pc, #12]	; (2624 <SERCOM2_Handler+0x14>)
    2616:	689b      	ldr	r3, [r3, #8]
    2618:	2002      	movs	r0, #2
    261a:	4798      	blx	r3
    261c:	46c0      	nop			; (mov r8, r8)
    261e:	46bd      	mov	sp, r7
    2620:	bd80      	pop	{r7, pc}
    2622:	46c0      	nop			; (mov r8, r8)
    2624:	200000a4 	.word	0x200000a4

00002628 <SERCOM3_Handler>:
    2628:	b580      	push	{r7, lr}
    262a:	af00      	add	r7, sp, #0
    262c:	4b03      	ldr	r3, [pc, #12]	; (263c <SERCOM3_Handler+0x14>)
    262e:	68db      	ldr	r3, [r3, #12]
    2630:	2003      	movs	r0, #3
    2632:	4798      	blx	r3
    2634:	46c0      	nop			; (mov r8, r8)
    2636:	46bd      	mov	sp, r7
    2638:	bd80      	pop	{r7, pc}
    263a:	46c0      	nop			; (mov r8, r8)
    263c:	200000a4 	.word	0x200000a4

00002640 <SERCOM4_Handler>:
    2640:	b580      	push	{r7, lr}
    2642:	af00      	add	r7, sp, #0
    2644:	4b03      	ldr	r3, [pc, #12]	; (2654 <SERCOM4_Handler+0x14>)
    2646:	691b      	ldr	r3, [r3, #16]
    2648:	2004      	movs	r0, #4
    264a:	4798      	blx	r3
    264c:	46c0      	nop			; (mov r8, r8)
    264e:	46bd      	mov	sp, r7
    2650:	bd80      	pop	{r7, pc}
    2652:	46c0      	nop			; (mov r8, r8)
    2654:	200000a4 	.word	0x200000a4

00002658 <SERCOM5_Handler>:
    2658:	b580      	push	{r7, lr}
    265a:	af00      	add	r7, sp, #0
    265c:	4b03      	ldr	r3, [pc, #12]	; (266c <SERCOM5_Handler+0x14>)
    265e:	695b      	ldr	r3, [r3, #20]
    2660:	2005      	movs	r0, #5
    2662:	4798      	blx	r3
    2664:	46c0      	nop			; (mov r8, r8)
    2666:	46bd      	mov	sp, r7
    2668:	bd80      	pop	{r7, pc}
    266a:	46c0      	nop			; (mov r8, r8)
    266c:	200000a4 	.word	0x200000a4

00002670 <system_gclk_chan_get_config_defaults>:
{
    2670:	b580      	push	{r7, lr}
    2672:	b082      	sub	sp, #8
    2674:	af00      	add	r7, sp, #0
    2676:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    2678:	687b      	ldr	r3, [r7, #4]
    267a:	2200      	movs	r2, #0
    267c:	701a      	strb	r2, [r3, #0]
}
    267e:	46c0      	nop			; (mov r8, r8)
    2680:	46bd      	mov	sp, r7
    2682:	b002      	add	sp, #8
    2684:	bd80      	pop	{r7, pc}
	...

00002688 <system_apb_clock_set_mask>:
{
    2688:	b580      	push	{r7, lr}
    268a:	b082      	sub	sp, #8
    268c:	af00      	add	r7, sp, #0
    268e:	0002      	movs	r2, r0
    2690:	6039      	str	r1, [r7, #0]
    2692:	1dfb      	adds	r3, r7, #7
    2694:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2696:	1dfb      	adds	r3, r7, #7
    2698:	781b      	ldrb	r3, [r3, #0]
    269a:	2b01      	cmp	r3, #1
    269c:	d00a      	beq.n	26b4 <system_apb_clock_set_mask+0x2c>
    269e:	2b02      	cmp	r3, #2
    26a0:	d00f      	beq.n	26c2 <system_apb_clock_set_mask+0x3a>
    26a2:	2b00      	cmp	r3, #0
    26a4:	d114      	bne.n	26d0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    26a6:	4b0e      	ldr	r3, [pc, #56]	; (26e0 <system_apb_clock_set_mask+0x58>)
    26a8:	4a0d      	ldr	r2, [pc, #52]	; (26e0 <system_apb_clock_set_mask+0x58>)
    26aa:	6991      	ldr	r1, [r2, #24]
    26ac:	683a      	ldr	r2, [r7, #0]
    26ae:	430a      	orrs	r2, r1
    26b0:	619a      	str	r2, [r3, #24]
			break;
    26b2:	e00f      	b.n	26d4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    26b4:	4b0a      	ldr	r3, [pc, #40]	; (26e0 <system_apb_clock_set_mask+0x58>)
    26b6:	4a0a      	ldr	r2, [pc, #40]	; (26e0 <system_apb_clock_set_mask+0x58>)
    26b8:	69d1      	ldr	r1, [r2, #28]
    26ba:	683a      	ldr	r2, [r7, #0]
    26bc:	430a      	orrs	r2, r1
    26be:	61da      	str	r2, [r3, #28]
			break;
    26c0:	e008      	b.n	26d4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    26c2:	4b07      	ldr	r3, [pc, #28]	; (26e0 <system_apb_clock_set_mask+0x58>)
    26c4:	4a06      	ldr	r2, [pc, #24]	; (26e0 <system_apb_clock_set_mask+0x58>)
    26c6:	6a11      	ldr	r1, [r2, #32]
    26c8:	683a      	ldr	r2, [r7, #0]
    26ca:	430a      	orrs	r2, r1
    26cc:	621a      	str	r2, [r3, #32]
			break;
    26ce:	e001      	b.n	26d4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    26d0:	2317      	movs	r3, #23
    26d2:	e000      	b.n	26d6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    26d4:	2300      	movs	r3, #0
}
    26d6:	0018      	movs	r0, r3
    26d8:	46bd      	mov	sp, r7
    26da:	b002      	add	sp, #8
    26dc:	bd80      	pop	{r7, pc}
    26de:	46c0      	nop			; (mov r8, r8)
    26e0:	40000400 	.word	0x40000400

000026e4 <system_pinmux_get_config_defaults>:
{
    26e4:	b580      	push	{r7, lr}
    26e6:	b082      	sub	sp, #8
    26e8:	af00      	add	r7, sp, #0
    26ea:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    26ec:	687b      	ldr	r3, [r7, #4]
    26ee:	2280      	movs	r2, #128	; 0x80
    26f0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    26f2:	687b      	ldr	r3, [r7, #4]
    26f4:	2200      	movs	r2, #0
    26f6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    26f8:	687b      	ldr	r3, [r7, #4]
    26fa:	2201      	movs	r2, #1
    26fc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    26fe:	687b      	ldr	r3, [r7, #4]
    2700:	2200      	movs	r2, #0
    2702:	70da      	strb	r2, [r3, #3]
}
    2704:	46c0      	nop			; (mov r8, r8)
    2706:	46bd      	mov	sp, r7
    2708:	b002      	add	sp, #8
    270a:	bd80      	pop	{r7, pc}

0000270c <system_is_debugger_present>:
{
    270c:	b580      	push	{r7, lr}
    270e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2710:	4b05      	ldr	r3, [pc, #20]	; (2728 <system_is_debugger_present+0x1c>)
    2712:	789b      	ldrb	r3, [r3, #2]
    2714:	b2db      	uxtb	r3, r3
    2716:	001a      	movs	r2, r3
    2718:	2302      	movs	r3, #2
    271a:	4013      	ands	r3, r2
    271c:	1e5a      	subs	r2, r3, #1
    271e:	4193      	sbcs	r3, r2
    2720:	b2db      	uxtb	r3, r3
}
    2722:	0018      	movs	r0, r3
    2724:	46bd      	mov	sp, r7
    2726:	bd80      	pop	{r7, pc}
    2728:	41002000 	.word	0x41002000

0000272c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    272c:	b580      	push	{r7, lr}
    272e:	b084      	sub	sp, #16
    2730:	af00      	add	r7, sp, #0
    2732:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2734:	687b      	ldr	r3, [r7, #4]
    2736:	681b      	ldr	r3, [r3, #0]
    2738:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    273a:	68fb      	ldr	r3, [r7, #12]
    273c:	69db      	ldr	r3, [r3, #28]
    273e:	1e5a      	subs	r2, r3, #1
    2740:	4193      	sbcs	r3, r2
    2742:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    2744:	0018      	movs	r0, r3
    2746:	46bd      	mov	sp, r7
    2748:	b004      	add	sp, #16
    274a:	bd80      	pop	{r7, pc}

0000274c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    274c:	b580      	push	{r7, lr}
    274e:	b082      	sub	sp, #8
    2750:	af00      	add	r7, sp, #0
    2752:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2754:	46c0      	nop			; (mov r8, r8)
    2756:	687b      	ldr	r3, [r7, #4]
    2758:	0018      	movs	r0, r3
    275a:	4b04      	ldr	r3, [pc, #16]	; (276c <_usart_wait_for_sync+0x20>)
    275c:	4798      	blx	r3
    275e:	1e03      	subs	r3, r0, #0
    2760:	d1f9      	bne.n	2756 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    2762:	46c0      	nop			; (mov r8, r8)
    2764:	46bd      	mov	sp, r7
    2766:	b002      	add	sp, #8
    2768:	bd80      	pop	{r7, pc}
    276a:	46c0      	nop			; (mov r8, r8)
    276c:	0000272d 	.word	0x0000272d

00002770 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    2770:	b5b0      	push	{r4, r5, r7, lr}
    2772:	b08c      	sub	sp, #48	; 0x30
    2774:	af02      	add	r7, sp, #8
    2776:	6078      	str	r0, [r7, #4]
    2778:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    277a:	687b      	ldr	r3, [r7, #4]
    277c:	681b      	ldr	r3, [r3, #0]
    277e:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2780:	687b      	ldr	r3, [r7, #4]
    2782:	681b      	ldr	r3, [r3, #0]
    2784:	0018      	movs	r0, r3
    2786:	4bab      	ldr	r3, [pc, #684]	; (2a34 <_usart_set_config+0x2c4>)
    2788:	4798      	blx	r3
    278a:	0003      	movs	r3, r0
    278c:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    278e:	697b      	ldr	r3, [r7, #20]
    2790:	3314      	adds	r3, #20
    2792:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    2794:	2300      	movs	r3, #0
    2796:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    2798:	2300      	movs	r3, #0
    279a:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    279c:	230a      	movs	r3, #10
    279e:	18fb      	adds	r3, r7, r3
    27a0:	2200      	movs	r2, #0
    27a2:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    27a4:	231f      	movs	r3, #31
    27a6:	18fb      	adds	r3, r7, r3
    27a8:	2200      	movs	r2, #0
    27aa:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    27ac:	231e      	movs	r3, #30
    27ae:	18fb      	adds	r3, r7, r3
    27b0:	2210      	movs	r2, #16
    27b2:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    27b4:	683b      	ldr	r3, [r7, #0]
    27b6:	8a1b      	ldrh	r3, [r3, #16]
    27b8:	2280      	movs	r2, #128	; 0x80
    27ba:	01d2      	lsls	r2, r2, #7
    27bc:	4293      	cmp	r3, r2
    27be:	d01c      	beq.n	27fa <_usart_set_config+0x8a>
    27c0:	2280      	movs	r2, #128	; 0x80
    27c2:	01d2      	lsls	r2, r2, #7
    27c4:	4293      	cmp	r3, r2
    27c6:	dc06      	bgt.n	27d6 <_usart_set_config+0x66>
    27c8:	2b00      	cmp	r3, #0
    27ca:	d00d      	beq.n	27e8 <_usart_set_config+0x78>
    27cc:	2280      	movs	r2, #128	; 0x80
    27ce:	0192      	lsls	r2, r2, #6
    27d0:	4293      	cmp	r3, r2
    27d2:	d024      	beq.n	281e <_usart_set_config+0xae>
    27d4:	e035      	b.n	2842 <_usart_set_config+0xd2>
    27d6:	22c0      	movs	r2, #192	; 0xc0
    27d8:	01d2      	lsls	r2, r2, #7
    27da:	4293      	cmp	r3, r2
    27dc:	d028      	beq.n	2830 <_usart_set_config+0xc0>
    27de:	2280      	movs	r2, #128	; 0x80
    27e0:	0212      	lsls	r2, r2, #8
    27e2:	4293      	cmp	r3, r2
    27e4:	d012      	beq.n	280c <_usart_set_config+0x9c>
    27e6:	e02c      	b.n	2842 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    27e8:	231f      	movs	r3, #31
    27ea:	18fb      	adds	r3, r7, r3
    27ec:	2200      	movs	r2, #0
    27ee:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    27f0:	231e      	movs	r3, #30
    27f2:	18fb      	adds	r3, r7, r3
    27f4:	2210      	movs	r2, #16
    27f6:	701a      	strb	r2, [r3, #0]
			break;
    27f8:	e023      	b.n	2842 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    27fa:	231f      	movs	r3, #31
    27fc:	18fb      	adds	r3, r7, r3
    27fe:	2200      	movs	r2, #0
    2800:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2802:	231e      	movs	r3, #30
    2804:	18fb      	adds	r3, r7, r3
    2806:	2208      	movs	r2, #8
    2808:	701a      	strb	r2, [r3, #0]
			break;
    280a:	e01a      	b.n	2842 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    280c:	231f      	movs	r3, #31
    280e:	18fb      	adds	r3, r7, r3
    2810:	2200      	movs	r2, #0
    2812:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2814:	231e      	movs	r3, #30
    2816:	18fb      	adds	r3, r7, r3
    2818:	2203      	movs	r2, #3
    281a:	701a      	strb	r2, [r3, #0]
			break;
    281c:	e011      	b.n	2842 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    281e:	231f      	movs	r3, #31
    2820:	18fb      	adds	r3, r7, r3
    2822:	2201      	movs	r2, #1
    2824:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2826:	231e      	movs	r3, #30
    2828:	18fb      	adds	r3, r7, r3
    282a:	2210      	movs	r2, #16
    282c:	701a      	strb	r2, [r3, #0]
			break;
    282e:	e008      	b.n	2842 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2830:	231f      	movs	r3, #31
    2832:	18fb      	adds	r3, r7, r3
    2834:	2201      	movs	r2, #1
    2836:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2838:	231e      	movs	r3, #30
    283a:	18fb      	adds	r3, r7, r3
    283c:	2208      	movs	r2, #8
    283e:	701a      	strb	r2, [r3, #0]
			break;
    2840:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    2842:	683b      	ldr	r3, [r7, #0]
    2844:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    2846:	683b      	ldr	r3, [r7, #0]
    2848:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    284a:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    284c:	683b      	ldr	r3, [r7, #0]
    284e:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    2850:	4313      	orrs	r3, r2
		config->sample_rate |
    2852:	683a      	ldr	r2, [r7, #0]
    2854:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    2856:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2858:	683a      	ldr	r2, [r7, #0]
    285a:	7e12      	ldrb	r2, [r2, #24]
    285c:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    285e:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2860:	683a      	ldr	r2, [r7, #0]
    2862:	2126      	movs	r1, #38	; 0x26
    2864:	5c52      	ldrb	r2, [r2, r1]
    2866:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    2868:	4313      	orrs	r3, r2
    286a:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    286c:	231d      	movs	r3, #29
    286e:	18fb      	adds	r3, r7, r3
    2870:	2200      	movs	r2, #0
    2872:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    2874:	683b      	ldr	r3, [r7, #0]
    2876:	685b      	ldr	r3, [r3, #4]
    2878:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    287a:	68fb      	ldr	r3, [r7, #12]
    287c:	2b00      	cmp	r3, #0
    287e:	d01e      	beq.n	28be <_usart_set_config+0x14e>
    2880:	2280      	movs	r2, #128	; 0x80
    2882:	0552      	lsls	r2, r2, #21
    2884:	4293      	cmp	r3, r2
    2886:	d14f      	bne.n	2928 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    2888:	683b      	ldr	r3, [r7, #0]
    288a:	2227      	movs	r2, #39	; 0x27
    288c:	5c9b      	ldrb	r3, [r3, r2]
    288e:	2201      	movs	r2, #1
    2890:	4053      	eors	r3, r2
    2892:	b2db      	uxtb	r3, r3
    2894:	2b00      	cmp	r3, #0
    2896:	d046      	beq.n	2926 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2898:	683b      	ldr	r3, [r7, #0]
    289a:	6a1d      	ldr	r5, [r3, #32]
    289c:	693b      	ldr	r3, [r7, #16]
    289e:	b2db      	uxtb	r3, r3
    28a0:	0018      	movs	r0, r3
    28a2:	4b65      	ldr	r3, [pc, #404]	; (2a38 <_usart_set_config+0x2c8>)
    28a4:	4798      	blx	r3
    28a6:	0001      	movs	r1, r0
    28a8:	231d      	movs	r3, #29
    28aa:	18fc      	adds	r4, r7, r3
    28ac:	230a      	movs	r3, #10
    28ae:	18fb      	adds	r3, r7, r3
    28b0:	001a      	movs	r2, r3
    28b2:	0028      	movs	r0, r5
    28b4:	4b61      	ldr	r3, [pc, #388]	; (2a3c <_usart_set_config+0x2cc>)
    28b6:	4798      	blx	r3
    28b8:	0003      	movs	r3, r0
    28ba:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    28bc:	e033      	b.n	2926 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    28be:	683b      	ldr	r3, [r7, #0]
    28c0:	2227      	movs	r2, #39	; 0x27
    28c2:	5c9b      	ldrb	r3, [r3, r2]
    28c4:	2b00      	cmp	r3, #0
    28c6:	d014      	beq.n	28f2 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    28c8:	683b      	ldr	r3, [r7, #0]
    28ca:	6a18      	ldr	r0, [r3, #32]
    28cc:	683b      	ldr	r3, [r7, #0]
    28ce:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    28d0:	231d      	movs	r3, #29
    28d2:	18fc      	adds	r4, r7, r3
    28d4:	231f      	movs	r3, #31
    28d6:	18fb      	adds	r3, r7, r3
    28d8:	781d      	ldrb	r5, [r3, #0]
    28da:	230a      	movs	r3, #10
    28dc:	18fa      	adds	r2, r7, r3
    28de:	231e      	movs	r3, #30
    28e0:	18fb      	adds	r3, r7, r3
    28e2:	781b      	ldrb	r3, [r3, #0]
    28e4:	9300      	str	r3, [sp, #0]
    28e6:	002b      	movs	r3, r5
    28e8:	4d55      	ldr	r5, [pc, #340]	; (2a40 <_usart_set_config+0x2d0>)
    28ea:	47a8      	blx	r5
    28ec:	0003      	movs	r3, r0
    28ee:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    28f0:	e01a      	b.n	2928 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    28f2:	683b      	ldr	r3, [r7, #0]
    28f4:	6a1d      	ldr	r5, [r3, #32]
    28f6:	693b      	ldr	r3, [r7, #16]
    28f8:	b2db      	uxtb	r3, r3
    28fa:	0018      	movs	r0, r3
    28fc:	4b4e      	ldr	r3, [pc, #312]	; (2a38 <_usart_set_config+0x2c8>)
    28fe:	4798      	blx	r3
				status_code =
    2900:	231d      	movs	r3, #29
    2902:	18fc      	adds	r4, r7, r3
    2904:	231f      	movs	r3, #31
    2906:	18fb      	adds	r3, r7, r3
    2908:	7819      	ldrb	r1, [r3, #0]
    290a:	230a      	movs	r3, #10
    290c:	18fa      	adds	r2, r7, r3
    290e:	231e      	movs	r3, #30
    2910:	18fb      	adds	r3, r7, r3
    2912:	781b      	ldrb	r3, [r3, #0]
    2914:	9300      	str	r3, [sp, #0]
    2916:	000b      	movs	r3, r1
    2918:	0001      	movs	r1, r0
    291a:	0028      	movs	r0, r5
    291c:	4d48      	ldr	r5, [pc, #288]	; (2a40 <_usart_set_config+0x2d0>)
    291e:	47a8      	blx	r5
    2920:	0003      	movs	r3, r0
    2922:	7023      	strb	r3, [r4, #0]
			break;
    2924:	e000      	b.n	2928 <_usart_set_config+0x1b8>
			break;
    2926:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    2928:	231d      	movs	r3, #29
    292a:	18fb      	adds	r3, r7, r3
    292c:	781b      	ldrb	r3, [r3, #0]
    292e:	2b00      	cmp	r3, #0
    2930:	d003      	beq.n	293a <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    2932:	231d      	movs	r3, #29
    2934:	18fb      	adds	r3, r7, r3
    2936:	781b      	ldrb	r3, [r3, #0]
    2938:	e077      	b.n	2a2a <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    293a:	683b      	ldr	r3, [r7, #0]
    293c:	7e5b      	ldrb	r3, [r3, #25]
    293e:	2b00      	cmp	r3, #0
    2940:	d003      	beq.n	294a <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2942:	683b      	ldr	r3, [r7, #0]
    2944:	7e9a      	ldrb	r2, [r3, #26]
    2946:	69bb      	ldr	r3, [r7, #24]
    2948:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    294a:	687b      	ldr	r3, [r7, #4]
    294c:	0018      	movs	r0, r3
    294e:	4b3d      	ldr	r3, [pc, #244]	; (2a44 <_usart_set_config+0x2d4>)
    2950:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    2952:	230a      	movs	r3, #10
    2954:	18fb      	adds	r3, r7, r3
    2956:	881a      	ldrh	r2, [r3, #0]
    2958:	69bb      	ldr	r3, [r7, #24]
    295a:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    295c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    295e:	68fb      	ldr	r3, [r7, #12]
    2960:	4313      	orrs	r3, r2
    2962:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    2964:	683b      	ldr	r3, [r7, #0]
    2966:	2227      	movs	r2, #39	; 0x27
    2968:	5c9b      	ldrb	r3, [r3, r2]
    296a:	2201      	movs	r2, #1
    296c:	4053      	eors	r3, r2
    296e:	b2db      	uxtb	r3, r3
    2970:	2b00      	cmp	r3, #0
    2972:	d003      	beq.n	297c <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2976:	2204      	movs	r2, #4
    2978:	4313      	orrs	r3, r2
    297a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    297c:	683b      	ldr	r3, [r7, #0]
    297e:	7e5b      	ldrb	r3, [r3, #25]
    2980:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2982:	683b      	ldr	r3, [r7, #0]
    2984:	7f1b      	ldrb	r3, [r3, #28]
    2986:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2988:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    298a:	683b      	ldr	r3, [r7, #0]
    298c:	7f5b      	ldrb	r3, [r3, #29]
    298e:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2990:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2992:	683b      	ldr	r3, [r7, #0]
    2994:	2124      	movs	r1, #36	; 0x24
    2996:	5c5b      	ldrb	r3, [r3, r1]
    2998:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    299a:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    299c:	683b      	ldr	r3, [r7, #0]
    299e:	2125      	movs	r1, #37	; 0x25
    29a0:	5c5b      	ldrb	r3, [r3, r1]
    29a2:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    29a4:	4313      	orrs	r3, r2
	ctrlb =  
    29a6:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    29a8:	683b      	ldr	r3, [r7, #0]
    29aa:	7a9b      	ldrb	r3, [r3, #10]
    29ac:	001a      	movs	r2, r3
    29ae:	6a3b      	ldr	r3, [r7, #32]
    29b0:	4313      	orrs	r3, r2
    29b2:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    29b4:	683b      	ldr	r3, [r7, #0]
    29b6:	7adb      	ldrb	r3, [r3, #11]
    29b8:	001a      	movs	r2, r3
    29ba:	6a3b      	ldr	r3, [r7, #32]
    29bc:	4313      	orrs	r3, r2
    29be:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    29c0:	683b      	ldr	r3, [r7, #0]
    29c2:	891b      	ldrh	r3, [r3, #8]
    29c4:	2bff      	cmp	r3, #255	; 0xff
    29c6:	d00b      	beq.n	29e0 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    29c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    29ca:	2280      	movs	r2, #128	; 0x80
    29cc:	0452      	lsls	r2, r2, #17
    29ce:	4313      	orrs	r3, r2
    29d0:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    29d2:	683b      	ldr	r3, [r7, #0]
    29d4:	891b      	ldrh	r3, [r3, #8]
    29d6:	001a      	movs	r2, r3
    29d8:	6a3b      	ldr	r3, [r7, #32]
    29da:	4313      	orrs	r3, r2
    29dc:	623b      	str	r3, [r7, #32]
    29de:	e008      	b.n	29f2 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    29e0:	683b      	ldr	r3, [r7, #0]
    29e2:	7edb      	ldrb	r3, [r3, #27]
    29e4:	2b00      	cmp	r3, #0
    29e6:	d004      	beq.n	29f2 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    29e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    29ea:	2280      	movs	r2, #128	; 0x80
    29ec:	04d2      	lsls	r2, r2, #19
    29ee:	4313      	orrs	r3, r2
    29f0:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    29f2:	683b      	ldr	r3, [r7, #0]
    29f4:	222c      	movs	r2, #44	; 0x2c
    29f6:	5c9b      	ldrb	r3, [r3, r2]
    29f8:	2b00      	cmp	r3, #0
    29fa:	d103      	bne.n	2a04 <_usart_set_config+0x294>
    29fc:	4b12      	ldr	r3, [pc, #72]	; (2a48 <_usart_set_config+0x2d8>)
    29fe:	4798      	blx	r3
    2a00:	1e03      	subs	r3, r0, #0
    2a02:	d003      	beq.n	2a0c <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a06:	2280      	movs	r2, #128	; 0x80
    2a08:	4313      	orrs	r3, r2
    2a0a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2a0c:	687b      	ldr	r3, [r7, #4]
    2a0e:	0018      	movs	r0, r3
    2a10:	4b0c      	ldr	r3, [pc, #48]	; (2a44 <_usart_set_config+0x2d4>)
    2a12:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    2a14:	69bb      	ldr	r3, [r7, #24]
    2a16:	6a3a      	ldr	r2, [r7, #32]
    2a18:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2a1a:	687b      	ldr	r3, [r7, #4]
    2a1c:	0018      	movs	r0, r3
    2a1e:	4b09      	ldr	r3, [pc, #36]	; (2a44 <_usart_set_config+0x2d4>)
    2a20:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    2a22:	69bb      	ldr	r3, [r7, #24]
    2a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2a26:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    2a28:	2300      	movs	r3, #0
}
    2a2a:	0018      	movs	r0, r3
    2a2c:	46bd      	mov	sp, r7
    2a2e:	b00a      	add	sp, #40	; 0x28
    2a30:	bdb0      	pop	{r4, r5, r7, pc}
    2a32:	46c0      	nop			; (mov r8, r8)
    2a34:	000024c5 	.word	0x000024c5
    2a38:	00003a29 	.word	0x00003a29
    2a3c:	0000203f 	.word	0x0000203f
    2a40:	000020bd 	.word	0x000020bd
    2a44:	0000274d 	.word	0x0000274d
    2a48:	0000270d 	.word	0x0000270d

00002a4c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2a4c:	b590      	push	{r4, r7, lr}
    2a4e:	b093      	sub	sp, #76	; 0x4c
    2a50:	af00      	add	r7, sp, #0
    2a52:	60f8      	str	r0, [r7, #12]
    2a54:	60b9      	str	r1, [r7, #8]
    2a56:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    2a58:	233b      	movs	r3, #59	; 0x3b
    2a5a:	18fb      	adds	r3, r7, r3
    2a5c:	2200      	movs	r2, #0
    2a5e:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2a60:	68fb      	ldr	r3, [r7, #12]
    2a62:	68ba      	ldr	r2, [r7, #8]
    2a64:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a66:	68fb      	ldr	r3, [r7, #12]
    2a68:	681b      	ldr	r3, [r3, #0]
    2a6a:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2a6c:	68fb      	ldr	r3, [r7, #12]
    2a6e:	681b      	ldr	r3, [r3, #0]
    2a70:	0018      	movs	r0, r3
    2a72:	4b86      	ldr	r3, [pc, #536]	; (2c8c <usart_init+0x240>)
    2a74:	4798      	blx	r3
    2a76:	0003      	movs	r3, r0
    2a78:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2a7c:	3302      	adds	r3, #2
    2a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2a82:	3314      	adds	r3, #20
    2a84:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2a88:	681b      	ldr	r3, [r3, #0]
    2a8a:	2201      	movs	r2, #1
    2a8c:	4013      	ands	r3, r2
    2a8e:	d001      	beq.n	2a94 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2a90:	2305      	movs	r3, #5
    2a92:	e0f6      	b.n	2c82 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2a96:	681b      	ldr	r3, [r3, #0]
    2a98:	2202      	movs	r2, #2
    2a9a:	4013      	ands	r3, r2
    2a9c:	d001      	beq.n	2aa2 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    2a9e:	231c      	movs	r3, #28
    2aa0:	e0ef      	b.n	2c82 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2aa2:	2201      	movs	r2, #1
    2aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2aa6:	409a      	lsls	r2, r3
    2aa8:	0013      	movs	r3, r2
    2aaa:	0019      	movs	r1, r3
    2aac:	2002      	movs	r0, #2
    2aae:	4b78      	ldr	r3, [pc, #480]	; (2c90 <usart_init+0x244>)
    2ab0:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2ab2:	2324      	movs	r3, #36	; 0x24
    2ab4:	18fb      	adds	r3, r7, r3
    2ab6:	0018      	movs	r0, r3
    2ab8:	4b76      	ldr	r3, [pc, #472]	; (2c94 <usart_init+0x248>)
    2aba:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    2abc:	687b      	ldr	r3, [r7, #4]
    2abe:	222d      	movs	r2, #45	; 0x2d
    2ac0:	5c9a      	ldrb	r2, [r3, r2]
    2ac2:	2324      	movs	r3, #36	; 0x24
    2ac4:	18fb      	adds	r3, r7, r3
    2ac6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2aca:	b2db      	uxtb	r3, r3
    2acc:	2224      	movs	r2, #36	; 0x24
    2ace:	18ba      	adds	r2, r7, r2
    2ad0:	0011      	movs	r1, r2
    2ad2:	0018      	movs	r0, r3
    2ad4:	4b70      	ldr	r3, [pc, #448]	; (2c98 <usart_init+0x24c>)
    2ad6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2ada:	b2db      	uxtb	r3, r3
    2adc:	0018      	movs	r0, r3
    2ade:	4b6f      	ldr	r3, [pc, #444]	; (2c9c <usart_init+0x250>)
    2ae0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2ae2:	687b      	ldr	r3, [r7, #4]
    2ae4:	222d      	movs	r2, #45	; 0x2d
    2ae6:	5c9b      	ldrb	r3, [r3, r2]
    2ae8:	2100      	movs	r1, #0
    2aea:	0018      	movs	r0, r3
    2aec:	4b6c      	ldr	r3, [pc, #432]	; (2ca0 <usart_init+0x254>)
    2aee:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    2af0:	687b      	ldr	r3, [r7, #4]
    2af2:	7ada      	ldrb	r2, [r3, #11]
    2af4:	68fb      	ldr	r3, [r7, #12]
    2af6:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    2af8:	687b      	ldr	r3, [r7, #4]
    2afa:	2224      	movs	r2, #36	; 0x24
    2afc:	5c9a      	ldrb	r2, [r3, r2]
    2afe:	68fb      	ldr	r3, [r7, #12]
    2b00:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2b02:	687b      	ldr	r3, [r7, #4]
    2b04:	2225      	movs	r2, #37	; 0x25
    2b06:	5c9a      	ldrb	r2, [r3, r2]
    2b08:	68fb      	ldr	r3, [r7, #12]
    2b0a:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    2b0c:	687b      	ldr	r3, [r7, #4]
    2b0e:	7eda      	ldrb	r2, [r3, #27]
    2b10:	68fb      	ldr	r3, [r7, #12]
    2b12:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2b14:	687b      	ldr	r3, [r7, #4]
    2b16:	7f1a      	ldrb	r2, [r3, #28]
    2b18:	68fb      	ldr	r3, [r7, #12]
    2b1a:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    2b1c:	233b      	movs	r3, #59	; 0x3b
    2b1e:	18fc      	adds	r4, r7, r3
    2b20:	687a      	ldr	r2, [r7, #4]
    2b22:	68fb      	ldr	r3, [r7, #12]
    2b24:	0011      	movs	r1, r2
    2b26:	0018      	movs	r0, r3
    2b28:	4b5e      	ldr	r3, [pc, #376]	; (2ca4 <usart_init+0x258>)
    2b2a:	4798      	blx	r3
    2b2c:	0003      	movs	r3, r0
    2b2e:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    2b30:	233b      	movs	r3, #59	; 0x3b
    2b32:	18fb      	adds	r3, r7, r3
    2b34:	781b      	ldrb	r3, [r3, #0]
    2b36:	2b00      	cmp	r3, #0
    2b38:	d003      	beq.n	2b42 <usart_init+0xf6>
		return status_code;
    2b3a:	233b      	movs	r3, #59	; 0x3b
    2b3c:	18fb      	adds	r3, r7, r3
    2b3e:	781b      	ldrb	r3, [r3, #0]
    2b40:	e09f      	b.n	2c82 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    2b42:	2320      	movs	r3, #32
    2b44:	18fb      	adds	r3, r7, r3
    2b46:	0018      	movs	r0, r3
    2b48:	4b57      	ldr	r3, [pc, #348]	; (2ca8 <usart_init+0x25c>)
    2b4a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2b4c:	2320      	movs	r3, #32
    2b4e:	18fb      	adds	r3, r7, r3
    2b50:	2200      	movs	r2, #0
    2b52:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2b54:	2320      	movs	r3, #32
    2b56:	18fb      	adds	r3, r7, r3
    2b58:	2200      	movs	r2, #0
    2b5a:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    2b5c:	687b      	ldr	r3, [r7, #4]
    2b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    2b60:	2310      	movs	r3, #16
    2b62:	18fb      	adds	r3, r7, r3
    2b64:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    2b66:	687b      	ldr	r3, [r7, #4]
    2b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    2b6a:	2310      	movs	r3, #16
    2b6c:	18fb      	adds	r3, r7, r3
    2b6e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    2b70:	687b      	ldr	r3, [r7, #4]
    2b72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    2b74:	2310      	movs	r3, #16
    2b76:	18fb      	adds	r3, r7, r3
    2b78:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    2b7a:	687b      	ldr	r3, [r7, #4]
    2b7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    2b7e:	2310      	movs	r3, #16
    2b80:	18fb      	adds	r3, r7, r3
    2b82:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2b84:	2347      	movs	r3, #71	; 0x47
    2b86:	18fb      	adds	r3, r7, r3
    2b88:	2200      	movs	r2, #0
    2b8a:	701a      	strb	r2, [r3, #0]
    2b8c:	e02c      	b.n	2be8 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2b8e:	2347      	movs	r3, #71	; 0x47
    2b90:	18fb      	adds	r3, r7, r3
    2b92:	781a      	ldrb	r2, [r3, #0]
    2b94:	2310      	movs	r3, #16
    2b96:	18fb      	adds	r3, r7, r3
    2b98:	0092      	lsls	r2, r2, #2
    2b9a:	58d3      	ldr	r3, [r2, r3]
    2b9c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    2b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d109      	bne.n	2bb8 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2ba4:	2347      	movs	r3, #71	; 0x47
    2ba6:	18fb      	adds	r3, r7, r3
    2ba8:	781a      	ldrb	r2, [r3, #0]
    2baa:	68bb      	ldr	r3, [r7, #8]
    2bac:	0011      	movs	r1, r2
    2bae:	0018      	movs	r0, r3
    2bb0:	4b3e      	ldr	r3, [pc, #248]	; (2cac <usart_init+0x260>)
    2bb2:	4798      	blx	r3
    2bb4:	0003      	movs	r3, r0
    2bb6:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    2bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2bba:	3301      	adds	r3, #1
    2bbc:	d00d      	beq.n	2bda <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2bc0:	b2da      	uxtb	r2, r3
    2bc2:	2320      	movs	r3, #32
    2bc4:	18fb      	adds	r3, r7, r3
    2bc6:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2bca:	0c1b      	lsrs	r3, r3, #16
    2bcc:	b2db      	uxtb	r3, r3
    2bce:	2220      	movs	r2, #32
    2bd0:	18ba      	adds	r2, r7, r2
    2bd2:	0011      	movs	r1, r2
    2bd4:	0018      	movs	r0, r3
    2bd6:	4b36      	ldr	r3, [pc, #216]	; (2cb0 <usart_init+0x264>)
    2bd8:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    2bda:	2347      	movs	r3, #71	; 0x47
    2bdc:	18fb      	adds	r3, r7, r3
    2bde:	781a      	ldrb	r2, [r3, #0]
    2be0:	2347      	movs	r3, #71	; 0x47
    2be2:	18fb      	adds	r3, r7, r3
    2be4:	3201      	adds	r2, #1
    2be6:	701a      	strb	r2, [r3, #0]
    2be8:	2347      	movs	r3, #71	; 0x47
    2bea:	18fb      	adds	r3, r7, r3
    2bec:	781b      	ldrb	r3, [r3, #0]
    2bee:	2b03      	cmp	r3, #3
    2bf0:	d9cd      	bls.n	2b8e <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    2bf2:	2300      	movs	r3, #0
    2bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    2bf6:	e00a      	b.n	2c0e <usart_init+0x1c2>
		module->callback[i]            = NULL;
    2bf8:	68fa      	ldr	r2, [r7, #12]
    2bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bfc:	3302      	adds	r3, #2
    2bfe:	009b      	lsls	r3, r3, #2
    2c00:	18d3      	adds	r3, r2, r3
    2c02:	3304      	adds	r3, #4
    2c04:	2200      	movs	r2, #0
    2c06:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    2c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2c0a:	3301      	adds	r3, #1
    2c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    2c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2c10:	2b05      	cmp	r3, #5
    2c12:	d9f1      	bls.n	2bf8 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    2c14:	68fb      	ldr	r3, [r7, #12]
    2c16:	2200      	movs	r2, #0
    2c18:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2c1a:	68fb      	ldr	r3, [r7, #12]
    2c1c:	2200      	movs	r2, #0
    2c1e:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2c20:	68fb      	ldr	r3, [r7, #12]
    2c22:	2200      	movs	r2, #0
    2c24:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2c26:	68fb      	ldr	r3, [r7, #12]
    2c28:	2200      	movs	r2, #0
    2c2a:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2c2c:	68fb      	ldr	r3, [r7, #12]
    2c2e:	2230      	movs	r2, #48	; 0x30
    2c30:	2100      	movs	r1, #0
    2c32:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    2c34:	68fb      	ldr	r3, [r7, #12]
    2c36:	2231      	movs	r2, #49	; 0x31
    2c38:	2100      	movs	r1, #0
    2c3a:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    2c3c:	68fb      	ldr	r3, [r7, #12]
    2c3e:	2232      	movs	r2, #50	; 0x32
    2c40:	2100      	movs	r1, #0
    2c42:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    2c44:	68fb      	ldr	r3, [r7, #12]
    2c46:	2233      	movs	r2, #51	; 0x33
    2c48:	2100      	movs	r1, #0
    2c4a:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2c4c:	68fb      	ldr	r3, [r7, #12]
    2c4e:	681b      	ldr	r3, [r3, #0]
    2c50:	2227      	movs	r2, #39	; 0x27
    2c52:	18bc      	adds	r4, r7, r2
    2c54:	0018      	movs	r0, r3
    2c56:	4b0d      	ldr	r3, [pc, #52]	; (2c8c <usart_init+0x240>)
    2c58:	4798      	blx	r3
    2c5a:	0003      	movs	r3, r0
    2c5c:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2c5e:	4a15      	ldr	r2, [pc, #84]	; (2cb4 <usart_init+0x268>)
    2c60:	2327      	movs	r3, #39	; 0x27
    2c62:	18fb      	adds	r3, r7, r3
    2c64:	781b      	ldrb	r3, [r3, #0]
    2c66:	0011      	movs	r1, r2
    2c68:	0018      	movs	r0, r3
    2c6a:	4b13      	ldr	r3, [pc, #76]	; (2cb8 <usart_init+0x26c>)
    2c6c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2c6e:	2327      	movs	r3, #39	; 0x27
    2c70:	18fb      	adds	r3, r7, r3
    2c72:	781a      	ldrb	r2, [r3, #0]
    2c74:	4b11      	ldr	r3, [pc, #68]	; (2cbc <usart_init+0x270>)
    2c76:	0092      	lsls	r2, r2, #2
    2c78:	68f9      	ldr	r1, [r7, #12]
    2c7a:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    2c7c:	233b      	movs	r3, #59	; 0x3b
    2c7e:	18fb      	adds	r3, r7, r3
    2c80:	781b      	ldrb	r3, [r3, #0]
}
    2c82:	0018      	movs	r0, r3
    2c84:	46bd      	mov	sp, r7
    2c86:	b013      	add	sp, #76	; 0x4c
    2c88:	bd90      	pop	{r4, r7, pc}
    2c8a:	46c0      	nop			; (mov r8, r8)
    2c8c:	000024c5 	.word	0x000024c5
    2c90:	00002689 	.word	0x00002689
    2c94:	00002671 	.word	0x00002671
    2c98:	00003905 	.word	0x00003905
    2c9c:	00003949 	.word	0x00003949
    2ca0:	0000227d 	.word	0x0000227d
    2ca4:	00002771 	.word	0x00002771
    2ca8:	000026e5 	.word	0x000026e5
    2cac:	00002309 	.word	0x00002309
    2cb0:	00003bf1 	.word	0x00003bf1
    2cb4:	00002e55 	.word	0x00002e55
    2cb8:	00002529 	.word	0x00002529
    2cbc:	20000120 	.word	0x20000120

00002cc0 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    2cc0:	b580      	push	{r7, lr}
    2cc2:	b084      	sub	sp, #16
    2cc4:	af00      	add	r7, sp, #0
    2cc6:	6078      	str	r0, [r7, #4]
    2cc8:	000a      	movs	r2, r1
    2cca:	1cbb      	adds	r3, r7, #2
    2ccc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2cce:	687b      	ldr	r3, [r7, #4]
    2cd0:	681b      	ldr	r3, [r3, #0]
    2cd2:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2cd4:	687b      	ldr	r3, [r7, #4]
    2cd6:	79db      	ldrb	r3, [r3, #7]
    2cd8:	2201      	movs	r2, #1
    2cda:	4053      	eors	r3, r2
    2cdc:	b2db      	uxtb	r3, r3
    2cde:	2b00      	cmp	r3, #0
    2ce0:	d001      	beq.n	2ce6 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    2ce2:	231c      	movs	r3, #28
    2ce4:	e017      	b.n	2d16 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    2ce6:	687b      	ldr	r3, [r7, #4]
    2ce8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    2cea:	b29b      	uxth	r3, r3
    2cec:	2b00      	cmp	r3, #0
    2cee:	d001      	beq.n	2cf4 <usart_write_wait+0x34>
		return STATUS_BUSY;
    2cf0:	2305      	movs	r3, #5
    2cf2:	e010      	b.n	2d16 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2cf4:	687b      	ldr	r3, [r7, #4]
    2cf6:	0018      	movs	r0, r3
    2cf8:	4b09      	ldr	r3, [pc, #36]	; (2d20 <usart_write_wait+0x60>)
    2cfa:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    2cfc:	68fb      	ldr	r3, [r7, #12]
    2cfe:	1cba      	adds	r2, r7, #2
    2d00:	8812      	ldrh	r2, [r2, #0]
    2d02:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2d04:	46c0      	nop			; (mov r8, r8)
    2d06:	68fb      	ldr	r3, [r7, #12]
    2d08:	7e1b      	ldrb	r3, [r3, #24]
    2d0a:	b2db      	uxtb	r3, r3
    2d0c:	001a      	movs	r2, r3
    2d0e:	2302      	movs	r3, #2
    2d10:	4013      	ands	r3, r2
    2d12:	d0f8      	beq.n	2d06 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    2d14:	2300      	movs	r3, #0
}
    2d16:	0018      	movs	r0, r3
    2d18:	46bd      	mov	sp, r7
    2d1a:	b004      	add	sp, #16
    2d1c:	bd80      	pop	{r7, pc}
    2d1e:	46c0      	nop			; (mov r8, r8)
    2d20:	0000274d 	.word	0x0000274d

00002d24 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    2d24:	b580      	push	{r7, lr}
    2d26:	b084      	sub	sp, #16
    2d28:	af00      	add	r7, sp, #0
    2d2a:	6078      	str	r0, [r7, #4]
    2d2c:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2d2e:	687b      	ldr	r3, [r7, #4]
    2d30:	681b      	ldr	r3, [r3, #0]
    2d32:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2d34:	687b      	ldr	r3, [r7, #4]
    2d36:	799b      	ldrb	r3, [r3, #6]
    2d38:	2201      	movs	r2, #1
    2d3a:	4053      	eors	r3, r2
    2d3c:	b2db      	uxtb	r3, r3
    2d3e:	2b00      	cmp	r3, #0
    2d40:	d001      	beq.n	2d46 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    2d42:	231c      	movs	r3, #28
    2d44:	e05e      	b.n	2e04 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    2d46:	687b      	ldr	r3, [r7, #4]
    2d48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    2d4a:	b29b      	uxth	r3, r3
    2d4c:	2b00      	cmp	r3, #0
    2d4e:	d001      	beq.n	2d54 <usart_read_wait+0x30>
		return STATUS_BUSY;
    2d50:	2305      	movs	r3, #5
    2d52:	e057      	b.n	2e04 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2d54:	68fb      	ldr	r3, [r7, #12]
    2d56:	7e1b      	ldrb	r3, [r3, #24]
    2d58:	b2db      	uxtb	r3, r3
    2d5a:	001a      	movs	r2, r3
    2d5c:	2304      	movs	r3, #4
    2d5e:	4013      	ands	r3, r2
    2d60:	d101      	bne.n	2d66 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    2d62:	2305      	movs	r3, #5
    2d64:	e04e      	b.n	2e04 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2d66:	687b      	ldr	r3, [r7, #4]
    2d68:	0018      	movs	r0, r3
    2d6a:	4b28      	ldr	r3, [pc, #160]	; (2e0c <usart_read_wait+0xe8>)
    2d6c:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2d6e:	68fb      	ldr	r3, [r7, #12]
    2d70:	8b5b      	ldrh	r3, [r3, #26]
    2d72:	b29b      	uxth	r3, r3
    2d74:	b2da      	uxtb	r2, r3
    2d76:	230b      	movs	r3, #11
    2d78:	18fb      	adds	r3, r7, r3
    2d7a:	213f      	movs	r1, #63	; 0x3f
    2d7c:	400a      	ands	r2, r1
    2d7e:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    2d80:	230b      	movs	r3, #11
    2d82:	18fb      	adds	r3, r7, r3
    2d84:	781b      	ldrb	r3, [r3, #0]
    2d86:	2b00      	cmp	r3, #0
    2d88:	d036      	beq.n	2df8 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2d8a:	230b      	movs	r3, #11
    2d8c:	18fb      	adds	r3, r7, r3
    2d8e:	781b      	ldrb	r3, [r3, #0]
    2d90:	2202      	movs	r2, #2
    2d92:	4013      	ands	r3, r2
    2d94:	d004      	beq.n	2da0 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2d96:	68fb      	ldr	r3, [r7, #12]
    2d98:	2202      	movs	r2, #2
    2d9a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    2d9c:	231a      	movs	r3, #26
    2d9e:	e031      	b.n	2e04 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2da0:	230b      	movs	r3, #11
    2da2:	18fb      	adds	r3, r7, r3
    2da4:	781b      	ldrb	r3, [r3, #0]
    2da6:	2204      	movs	r2, #4
    2da8:	4013      	ands	r3, r2
    2daa:	d004      	beq.n	2db6 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2dac:	68fb      	ldr	r3, [r7, #12]
    2dae:	2204      	movs	r2, #4
    2db0:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    2db2:	231e      	movs	r3, #30
    2db4:	e026      	b.n	2e04 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2db6:	230b      	movs	r3, #11
    2db8:	18fb      	adds	r3, r7, r3
    2dba:	781b      	ldrb	r3, [r3, #0]
    2dbc:	2201      	movs	r2, #1
    2dbe:	4013      	ands	r3, r2
    2dc0:	d004      	beq.n	2dcc <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2dc2:	68fb      	ldr	r3, [r7, #12]
    2dc4:	2201      	movs	r2, #1
    2dc6:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    2dc8:	2313      	movs	r3, #19
    2dca:	e01b      	b.n	2e04 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2dcc:	230b      	movs	r3, #11
    2dce:	18fb      	adds	r3, r7, r3
    2dd0:	781b      	ldrb	r3, [r3, #0]
    2dd2:	2210      	movs	r2, #16
    2dd4:	4013      	ands	r3, r2
    2dd6:	d004      	beq.n	2de2 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2dd8:	68fb      	ldr	r3, [r7, #12]
    2dda:	2210      	movs	r2, #16
    2ddc:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    2dde:	2342      	movs	r3, #66	; 0x42
    2de0:	e010      	b.n	2e04 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2de2:	230b      	movs	r3, #11
    2de4:	18fb      	adds	r3, r7, r3
    2de6:	781b      	ldrb	r3, [r3, #0]
    2de8:	2220      	movs	r2, #32
    2dea:	4013      	ands	r3, r2
    2dec:	d004      	beq.n	2df8 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2dee:	68fb      	ldr	r3, [r7, #12]
    2df0:	2220      	movs	r2, #32
    2df2:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    2df4:	2341      	movs	r3, #65	; 0x41
    2df6:	e005      	b.n	2e04 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    2df8:	68fb      	ldr	r3, [r7, #12]
    2dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2dfc:	b29a      	uxth	r2, r3
    2dfe:	683b      	ldr	r3, [r7, #0]
    2e00:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    2e02:	2300      	movs	r3, #0
}
    2e04:	0018      	movs	r0, r3
    2e06:	46bd      	mov	sp, r7
    2e08:	b004      	add	sp, #16
    2e0a:	bd80      	pop	{r7, pc}
    2e0c:	0000274d 	.word	0x0000274d

00002e10 <usart_is_syncing>:
{
    2e10:	b580      	push	{r7, lr}
    2e12:	b084      	sub	sp, #16
    2e14:	af00      	add	r7, sp, #0
    2e16:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2e18:	687b      	ldr	r3, [r7, #4]
    2e1a:	681b      	ldr	r3, [r3, #0]
    2e1c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    2e1e:	68fb      	ldr	r3, [r7, #12]
    2e20:	69db      	ldr	r3, [r3, #28]
    2e22:	1e5a      	subs	r2, r3, #1
    2e24:	4193      	sbcs	r3, r2
    2e26:	b2db      	uxtb	r3, r3
}
    2e28:	0018      	movs	r0, r3
    2e2a:	46bd      	mov	sp, r7
    2e2c:	b004      	add	sp, #16
    2e2e:	bd80      	pop	{r7, pc}

00002e30 <_usart_wait_for_sync>:
{
    2e30:	b580      	push	{r7, lr}
    2e32:	b082      	sub	sp, #8
    2e34:	af00      	add	r7, sp, #0
    2e36:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    2e38:	46c0      	nop			; (mov r8, r8)
    2e3a:	687b      	ldr	r3, [r7, #4]
    2e3c:	0018      	movs	r0, r3
    2e3e:	4b04      	ldr	r3, [pc, #16]	; (2e50 <_usart_wait_for_sync+0x20>)
    2e40:	4798      	blx	r3
    2e42:	1e03      	subs	r3, r0, #0
    2e44:	d1f9      	bne.n	2e3a <_usart_wait_for_sync+0xa>
}
    2e46:	46c0      	nop			; (mov r8, r8)
    2e48:	46bd      	mov	sp, r7
    2e4a:	b002      	add	sp, #8
    2e4c:	bd80      	pop	{r7, pc}
    2e4e:	46c0      	nop			; (mov r8, r8)
    2e50:	00002e11 	.word	0x00002e11

00002e54 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2e54:	b580      	push	{r7, lr}
    2e56:	b088      	sub	sp, #32
    2e58:	af00      	add	r7, sp, #0
    2e5a:	0002      	movs	r2, r0
    2e5c:	1dfb      	adds	r3, r7, #7
    2e5e:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    2e60:	1dfb      	adds	r3, r7, #7
    2e62:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    2e64:	4ba3      	ldr	r3, [pc, #652]	; (30f4 <_usart_interrupt_handler+0x2a0>)
    2e66:	0092      	lsls	r2, r2, #2
    2e68:	58d3      	ldr	r3, [r2, r3]
    2e6a:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2e6c:	69bb      	ldr	r3, [r7, #24]
    2e6e:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    2e70:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    2e72:	69bb      	ldr	r3, [r7, #24]
    2e74:	0018      	movs	r0, r3
    2e76:	4ba0      	ldr	r3, [pc, #640]	; (30f8 <_usart_interrupt_handler+0x2a4>)
    2e78:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2e7a:	697b      	ldr	r3, [r7, #20]
    2e7c:	7e1b      	ldrb	r3, [r3, #24]
    2e7e:	b2da      	uxtb	r2, r3
    2e80:	2312      	movs	r3, #18
    2e82:	18fb      	adds	r3, r7, r3
    2e84:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    2e86:	697b      	ldr	r3, [r7, #20]
    2e88:	7d9b      	ldrb	r3, [r3, #22]
    2e8a:	b2db      	uxtb	r3, r3
    2e8c:	b29a      	uxth	r2, r3
    2e8e:	2312      	movs	r3, #18
    2e90:	18fb      	adds	r3, r7, r3
    2e92:	2112      	movs	r1, #18
    2e94:	1879      	adds	r1, r7, r1
    2e96:	8809      	ldrh	r1, [r1, #0]
    2e98:	400a      	ands	r2, r1
    2e9a:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    2e9c:	69bb      	ldr	r3, [r7, #24]
    2e9e:	2230      	movs	r2, #48	; 0x30
    2ea0:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    2ea2:	69ba      	ldr	r2, [r7, #24]
    2ea4:	2131      	movs	r1, #49	; 0x31
    2ea6:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    2ea8:	4013      	ands	r3, r2
    2eaa:	b2da      	uxtb	r2, r3
    2eac:	2310      	movs	r3, #16
    2eae:	18fb      	adds	r3, r7, r3
    2eb0:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2eb2:	2312      	movs	r3, #18
    2eb4:	18fb      	adds	r3, r7, r3
    2eb6:	881b      	ldrh	r3, [r3, #0]
    2eb8:	2201      	movs	r2, #1
    2eba:	4013      	ands	r3, r2
    2ebc:	d044      	beq.n	2f48 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    2ebe:	69bb      	ldr	r3, [r7, #24]
    2ec0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    2ec2:	b29b      	uxth	r3, r3
    2ec4:	2b00      	cmp	r3, #0
    2ec6:	d03c      	beq.n	2f42 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2ec8:	69bb      	ldr	r3, [r7, #24]
    2eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ecc:	781b      	ldrb	r3, [r3, #0]
    2ece:	b2da      	uxtb	r2, r3
    2ed0:	231c      	movs	r3, #28
    2ed2:	18fb      	adds	r3, r7, r3
    2ed4:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2ed6:	69bb      	ldr	r3, [r7, #24]
    2ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2eda:	1c5a      	adds	r2, r3, #1
    2edc:	69bb      	ldr	r3, [r7, #24]
    2ede:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2ee0:	69bb      	ldr	r3, [r7, #24]
    2ee2:	795b      	ldrb	r3, [r3, #5]
    2ee4:	2b01      	cmp	r3, #1
    2ee6:	d113      	bne.n	2f10 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2ee8:	69bb      	ldr	r3, [r7, #24]
    2eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2eec:	781b      	ldrb	r3, [r3, #0]
    2eee:	b2db      	uxtb	r3, r3
    2ef0:	021b      	lsls	r3, r3, #8
    2ef2:	b21a      	sxth	r2, r3
    2ef4:	231c      	movs	r3, #28
    2ef6:	18fb      	adds	r3, r7, r3
    2ef8:	2100      	movs	r1, #0
    2efa:	5e5b      	ldrsh	r3, [r3, r1]
    2efc:	4313      	orrs	r3, r2
    2efe:	b21a      	sxth	r2, r3
    2f00:	231c      	movs	r3, #28
    2f02:	18fb      	adds	r3, r7, r3
    2f04:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    2f06:	69bb      	ldr	r3, [r7, #24]
    2f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f0a:	1c5a      	adds	r2, r3, #1
    2f0c:	69bb      	ldr	r3, [r7, #24]
    2f0e:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2f10:	231c      	movs	r3, #28
    2f12:	18fb      	adds	r3, r7, r3
    2f14:	881b      	ldrh	r3, [r3, #0]
    2f16:	05db      	lsls	r3, r3, #23
    2f18:	0ddb      	lsrs	r3, r3, #23
    2f1a:	b29a      	uxth	r2, r3
    2f1c:	697b      	ldr	r3, [r7, #20]
    2f1e:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2f20:	69bb      	ldr	r3, [r7, #24]
    2f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    2f24:	b29b      	uxth	r3, r3
    2f26:	3b01      	subs	r3, #1
    2f28:	b29b      	uxth	r3, r3
    2f2a:	69ba      	ldr	r2, [r7, #24]
    2f2c:	1c19      	adds	r1, r3, #0
    2f2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
    2f30:	2b00      	cmp	r3, #0
    2f32:	d109      	bne.n	2f48 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2f34:	697b      	ldr	r3, [r7, #20]
    2f36:	2201      	movs	r2, #1
    2f38:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2f3a:	697b      	ldr	r3, [r7, #20]
    2f3c:	2202      	movs	r2, #2
    2f3e:	759a      	strb	r2, [r3, #22]
    2f40:	e002      	b.n	2f48 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2f42:	697b      	ldr	r3, [r7, #20]
    2f44:	2201      	movs	r2, #1
    2f46:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2f48:	2312      	movs	r3, #18
    2f4a:	18fb      	adds	r3, r7, r3
    2f4c:	881b      	ldrh	r3, [r3, #0]
    2f4e:	2202      	movs	r2, #2
    2f50:	4013      	ands	r3, r2
    2f52:	d011      	beq.n	2f78 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2f54:	697b      	ldr	r3, [r7, #20]
    2f56:	2202      	movs	r2, #2
    2f58:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    2f5a:	69bb      	ldr	r3, [r7, #24]
    2f5c:	2233      	movs	r2, #51	; 0x33
    2f5e:	2100      	movs	r1, #0
    2f60:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2f62:	2310      	movs	r3, #16
    2f64:	18fb      	adds	r3, r7, r3
    2f66:	881b      	ldrh	r3, [r3, #0]
    2f68:	2201      	movs	r2, #1
    2f6a:	4013      	ands	r3, r2
    2f6c:	d004      	beq.n	2f78 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2f6e:	69bb      	ldr	r3, [r7, #24]
    2f70:	68db      	ldr	r3, [r3, #12]
    2f72:	69ba      	ldr	r2, [r7, #24]
    2f74:	0010      	movs	r0, r2
    2f76:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2f78:	2312      	movs	r3, #18
    2f7a:	18fb      	adds	r3, r7, r3
    2f7c:	881b      	ldrh	r3, [r3, #0]
    2f7e:	2204      	movs	r2, #4
    2f80:	4013      	ands	r3, r2
    2f82:	d100      	bne.n	2f86 <_usart_interrupt_handler+0x132>
    2f84:	e0bd      	b.n	3102 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    2f86:	69bb      	ldr	r3, [r7, #24]
    2f88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    2f8a:	b29b      	uxth	r3, r3
    2f8c:	2b00      	cmp	r3, #0
    2f8e:	d100      	bne.n	2f92 <_usart_interrupt_handler+0x13e>
    2f90:	e0b4      	b.n	30fc <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2f92:	697b      	ldr	r3, [r7, #20]
    2f94:	8b5b      	ldrh	r3, [r3, #26]
    2f96:	b29b      	uxth	r3, r3
    2f98:	b2da      	uxtb	r2, r3
    2f9a:	231f      	movs	r3, #31
    2f9c:	18fb      	adds	r3, r7, r3
    2f9e:	213f      	movs	r1, #63	; 0x3f
    2fa0:	400a      	ands	r2, r1
    2fa2:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2fa4:	231f      	movs	r3, #31
    2fa6:	18fb      	adds	r3, r7, r3
    2fa8:	781b      	ldrb	r3, [r3, #0]
    2faa:	2208      	movs	r2, #8
    2fac:	4013      	ands	r3, r2
    2fae:	d007      	beq.n	2fc0 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2fb0:	231f      	movs	r3, #31
    2fb2:	18fb      	adds	r3, r7, r3
    2fb4:	221f      	movs	r2, #31
    2fb6:	18ba      	adds	r2, r7, r2
    2fb8:	7812      	ldrb	r2, [r2, #0]
    2fba:	2108      	movs	r1, #8
    2fbc:	438a      	bics	r2, r1
    2fbe:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2fc0:	231f      	movs	r3, #31
    2fc2:	18fb      	adds	r3, r7, r3
    2fc4:	781b      	ldrb	r3, [r3, #0]
    2fc6:	2b00      	cmp	r3, #0
    2fc8:	d050      	beq.n	306c <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2fca:	231f      	movs	r3, #31
    2fcc:	18fb      	adds	r3, r7, r3
    2fce:	781b      	ldrb	r3, [r3, #0]
    2fd0:	2202      	movs	r2, #2
    2fd2:	4013      	ands	r3, r2
    2fd4:	d007      	beq.n	2fe6 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2fd6:	69bb      	ldr	r3, [r7, #24]
    2fd8:	2232      	movs	r2, #50	; 0x32
    2fda:	211a      	movs	r1, #26
    2fdc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2fde:	697b      	ldr	r3, [r7, #20]
    2fe0:	2202      	movs	r2, #2
    2fe2:	835a      	strh	r2, [r3, #26]
    2fe4:	e036      	b.n	3054 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2fe6:	231f      	movs	r3, #31
    2fe8:	18fb      	adds	r3, r7, r3
    2fea:	781b      	ldrb	r3, [r3, #0]
    2fec:	2204      	movs	r2, #4
    2fee:	4013      	ands	r3, r2
    2ff0:	d007      	beq.n	3002 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    2ff2:	69bb      	ldr	r3, [r7, #24]
    2ff4:	2232      	movs	r2, #50	; 0x32
    2ff6:	211e      	movs	r1, #30
    2ff8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2ffa:	697b      	ldr	r3, [r7, #20]
    2ffc:	2204      	movs	r2, #4
    2ffe:	835a      	strh	r2, [r3, #26]
    3000:	e028      	b.n	3054 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    3002:	231f      	movs	r3, #31
    3004:	18fb      	adds	r3, r7, r3
    3006:	781b      	ldrb	r3, [r3, #0]
    3008:	2201      	movs	r2, #1
    300a:	4013      	ands	r3, r2
    300c:	d007      	beq.n	301e <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    300e:	69bb      	ldr	r3, [r7, #24]
    3010:	2232      	movs	r2, #50	; 0x32
    3012:	2113      	movs	r1, #19
    3014:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    3016:	697b      	ldr	r3, [r7, #20]
    3018:	2201      	movs	r2, #1
    301a:	835a      	strh	r2, [r3, #26]
    301c:	e01a      	b.n	3054 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    301e:	231f      	movs	r3, #31
    3020:	18fb      	adds	r3, r7, r3
    3022:	781b      	ldrb	r3, [r3, #0]
    3024:	2210      	movs	r2, #16
    3026:	4013      	ands	r3, r2
    3028:	d007      	beq.n	303a <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    302a:	69bb      	ldr	r3, [r7, #24]
    302c:	2232      	movs	r2, #50	; 0x32
    302e:	2142      	movs	r1, #66	; 0x42
    3030:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    3032:	697b      	ldr	r3, [r7, #20]
    3034:	2210      	movs	r2, #16
    3036:	835a      	strh	r2, [r3, #26]
    3038:	e00c      	b.n	3054 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    303a:	231f      	movs	r3, #31
    303c:	18fb      	adds	r3, r7, r3
    303e:	781b      	ldrb	r3, [r3, #0]
    3040:	2220      	movs	r2, #32
    3042:	4013      	ands	r3, r2
    3044:	d006      	beq.n	3054 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    3046:	69bb      	ldr	r3, [r7, #24]
    3048:	2232      	movs	r2, #50	; 0x32
    304a:	2141      	movs	r1, #65	; 0x41
    304c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    304e:	697b      	ldr	r3, [r7, #20]
    3050:	2220      	movs	r2, #32
    3052:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    3054:	2310      	movs	r3, #16
    3056:	18fb      	adds	r3, r7, r3
    3058:	881b      	ldrh	r3, [r3, #0]
    305a:	2204      	movs	r2, #4
    305c:	4013      	ands	r3, r2
				if (callback_status
    305e:	d050      	beq.n	3102 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    3060:	69bb      	ldr	r3, [r7, #24]
    3062:	695b      	ldr	r3, [r3, #20]
    3064:	69ba      	ldr	r2, [r7, #24]
    3066:	0010      	movs	r0, r2
    3068:	4798      	blx	r3
    306a:	e04a      	b.n	3102 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    306c:	697b      	ldr	r3, [r7, #20]
    306e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3070:	b29a      	uxth	r2, r3
    3072:	230e      	movs	r3, #14
    3074:	18fb      	adds	r3, r7, r3
    3076:	05d2      	lsls	r2, r2, #23
    3078:	0dd2      	lsrs	r2, r2, #23
    307a:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    307c:	69bb      	ldr	r3, [r7, #24]
    307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3080:	220e      	movs	r2, #14
    3082:	18ba      	adds	r2, r7, r2
    3084:	8812      	ldrh	r2, [r2, #0]
    3086:	b2d2      	uxtb	r2, r2
    3088:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    308a:	69bb      	ldr	r3, [r7, #24]
    308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    308e:	1c5a      	adds	r2, r3, #1
    3090:	69bb      	ldr	r3, [r7, #24]
    3092:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3094:	69bb      	ldr	r3, [r7, #24]
    3096:	795b      	ldrb	r3, [r3, #5]
    3098:	2b01      	cmp	r3, #1
    309a:	d10d      	bne.n	30b8 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    309c:	69bb      	ldr	r3, [r7, #24]
    309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    30a0:	220e      	movs	r2, #14
    30a2:	18ba      	adds	r2, r7, r2
    30a4:	8812      	ldrh	r2, [r2, #0]
    30a6:	0a12      	lsrs	r2, r2, #8
    30a8:	b292      	uxth	r2, r2
    30aa:	b2d2      	uxtb	r2, r2
    30ac:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    30ae:	69bb      	ldr	r3, [r7, #24]
    30b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    30b2:	1c5a      	adds	r2, r3, #1
    30b4:	69bb      	ldr	r3, [r7, #24]
    30b6:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    30b8:	69bb      	ldr	r3, [r7, #24]
    30ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    30bc:	b29b      	uxth	r3, r3
    30be:	3b01      	subs	r3, #1
    30c0:	b29b      	uxth	r3, r3
    30c2:	69ba      	ldr	r2, [r7, #24]
    30c4:	1c19      	adds	r1, r3, #0
    30c6:	8591      	strh	r1, [r2, #44]	; 0x2c
    30c8:	2b00      	cmp	r3, #0
    30ca:	d11a      	bne.n	3102 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    30cc:	697b      	ldr	r3, [r7, #20]
    30ce:	2204      	movs	r2, #4
    30d0:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    30d2:	69bb      	ldr	r3, [r7, #24]
    30d4:	2232      	movs	r2, #50	; 0x32
    30d6:	2100      	movs	r1, #0
    30d8:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    30da:	2310      	movs	r3, #16
    30dc:	18fb      	adds	r3, r7, r3
    30de:	881b      	ldrh	r3, [r3, #0]
    30e0:	2202      	movs	r2, #2
    30e2:	4013      	ands	r3, r2
					if (callback_status
    30e4:	d00d      	beq.n	3102 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    30e6:	69bb      	ldr	r3, [r7, #24]
    30e8:	691b      	ldr	r3, [r3, #16]
    30ea:	69ba      	ldr	r2, [r7, #24]
    30ec:	0010      	movs	r0, r2
    30ee:	4798      	blx	r3
    30f0:	e007      	b.n	3102 <_usart_interrupt_handler+0x2ae>
    30f2:	46c0      	nop			; (mov r8, r8)
    30f4:	20000120 	.word	0x20000120
    30f8:	00002e31 	.word	0x00002e31
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    30fc:	697b      	ldr	r3, [r7, #20]
    30fe:	2204      	movs	r2, #4
    3100:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    3102:	2312      	movs	r3, #18
    3104:	18fb      	adds	r3, r7, r3
    3106:	881b      	ldrh	r3, [r3, #0]
    3108:	2210      	movs	r2, #16
    310a:	4013      	ands	r3, r2
    310c:	d010      	beq.n	3130 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    310e:	697b      	ldr	r3, [r7, #20]
    3110:	2210      	movs	r2, #16
    3112:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    3114:	697b      	ldr	r3, [r7, #20]
    3116:	2210      	movs	r2, #16
    3118:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    311a:	2310      	movs	r3, #16
    311c:	18fb      	adds	r3, r7, r3
    311e:	881b      	ldrh	r3, [r3, #0]
    3120:	2210      	movs	r2, #16
    3122:	4013      	ands	r3, r2
    3124:	d004      	beq.n	3130 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    3126:	69bb      	ldr	r3, [r7, #24]
    3128:	69db      	ldr	r3, [r3, #28]
    312a:	69ba      	ldr	r2, [r7, #24]
    312c:	0010      	movs	r0, r2
    312e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    3130:	2312      	movs	r3, #18
    3132:	18fb      	adds	r3, r7, r3
    3134:	881b      	ldrh	r3, [r3, #0]
    3136:	2220      	movs	r2, #32
    3138:	4013      	ands	r3, r2
    313a:	d010      	beq.n	315e <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    313c:	697b      	ldr	r3, [r7, #20]
    313e:	2220      	movs	r2, #32
    3140:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    3142:	697b      	ldr	r3, [r7, #20]
    3144:	2220      	movs	r2, #32
    3146:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    3148:	2310      	movs	r3, #16
    314a:	18fb      	adds	r3, r7, r3
    314c:	881b      	ldrh	r3, [r3, #0]
    314e:	2208      	movs	r2, #8
    3150:	4013      	ands	r3, r2
    3152:	d004      	beq.n	315e <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    3154:	69bb      	ldr	r3, [r7, #24]
    3156:	699b      	ldr	r3, [r3, #24]
    3158:	69ba      	ldr	r2, [r7, #24]
    315a:	0010      	movs	r0, r2
    315c:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    315e:	2312      	movs	r3, #18
    3160:	18fb      	adds	r3, r7, r3
    3162:	881b      	ldrh	r3, [r3, #0]
    3164:	2208      	movs	r2, #8
    3166:	4013      	ands	r3, r2
    3168:	d010      	beq.n	318c <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    316a:	697b      	ldr	r3, [r7, #20]
    316c:	2208      	movs	r2, #8
    316e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    3170:	697b      	ldr	r3, [r7, #20]
    3172:	2208      	movs	r2, #8
    3174:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    3176:	2310      	movs	r3, #16
    3178:	18fb      	adds	r3, r7, r3
    317a:	881b      	ldrh	r3, [r3, #0]
    317c:	2220      	movs	r2, #32
    317e:	4013      	ands	r3, r2
    3180:	d004      	beq.n	318c <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    3182:	69bb      	ldr	r3, [r7, #24]
    3184:	6a1b      	ldr	r3, [r3, #32]
    3186:	69ba      	ldr	r2, [r7, #24]
    3188:	0010      	movs	r0, r2
    318a:	4798      	blx	r3
		}
	}
#endif
}
    318c:	46c0      	nop			; (mov r8, r8)
    318e:	46bd      	mov	sp, r7
    3190:	b008      	add	sp, #32
    3192:	bd80      	pop	{r7, pc}

00003194 <system_gclk_gen_get_config_defaults>:
{
    3194:	b580      	push	{r7, lr}
    3196:	b082      	sub	sp, #8
    3198:	af00      	add	r7, sp, #0
    319a:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    319c:	687b      	ldr	r3, [r7, #4]
    319e:	2201      	movs	r2, #1
    31a0:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    31a2:	687b      	ldr	r3, [r7, #4]
    31a4:	2200      	movs	r2, #0
    31a6:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    31a8:	687b      	ldr	r3, [r7, #4]
    31aa:	2206      	movs	r2, #6
    31ac:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    31ae:	687b      	ldr	r3, [r7, #4]
    31b0:	2200      	movs	r2, #0
    31b2:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    31b4:	687b      	ldr	r3, [r7, #4]
    31b6:	2200      	movs	r2, #0
    31b8:	725a      	strb	r2, [r3, #9]
}
    31ba:	46c0      	nop			; (mov r8, r8)
    31bc:	46bd      	mov	sp, r7
    31be:	b002      	add	sp, #8
    31c0:	bd80      	pop	{r7, pc}

000031c2 <system_clock_source_osc8m_get_config_defaults>:
{
    31c2:	b580      	push	{r7, lr}
    31c4:	b082      	sub	sp, #8
    31c6:	af00      	add	r7, sp, #0
    31c8:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    31ca:	687b      	ldr	r3, [r7, #4]
    31cc:	2203      	movs	r2, #3
    31ce:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    31d0:	687b      	ldr	r3, [r7, #4]
    31d2:	2200      	movs	r2, #0
    31d4:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    31d6:	687b      	ldr	r3, [r7, #4]
    31d8:	2201      	movs	r2, #1
    31da:	709a      	strb	r2, [r3, #2]
}
    31dc:	46c0      	nop			; (mov r8, r8)
    31de:	46bd      	mov	sp, r7
    31e0:	b002      	add	sp, #8
    31e2:	bd80      	pop	{r7, pc}

000031e4 <system_cpu_clock_set_divider>:
{
    31e4:	b580      	push	{r7, lr}
    31e6:	b082      	sub	sp, #8
    31e8:	af00      	add	r7, sp, #0
    31ea:	0002      	movs	r2, r0
    31ec:	1dfb      	adds	r3, r7, #7
    31ee:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    31f0:	4a03      	ldr	r2, [pc, #12]	; (3200 <system_cpu_clock_set_divider+0x1c>)
    31f2:	1dfb      	adds	r3, r7, #7
    31f4:	781b      	ldrb	r3, [r3, #0]
    31f6:	7213      	strb	r3, [r2, #8]
}
    31f8:	46c0      	nop			; (mov r8, r8)
    31fa:	46bd      	mov	sp, r7
    31fc:	b002      	add	sp, #8
    31fe:	bd80      	pop	{r7, pc}
    3200:	40000400 	.word	0x40000400

00003204 <system_apb_clock_set_divider>:
{
    3204:	b580      	push	{r7, lr}
    3206:	b082      	sub	sp, #8
    3208:	af00      	add	r7, sp, #0
    320a:	0002      	movs	r2, r0
    320c:	1dfb      	adds	r3, r7, #7
    320e:	701a      	strb	r2, [r3, #0]
    3210:	1dbb      	adds	r3, r7, #6
    3212:	1c0a      	adds	r2, r1, #0
    3214:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3216:	1dfb      	adds	r3, r7, #7
    3218:	781b      	ldrb	r3, [r3, #0]
    321a:	2b01      	cmp	r3, #1
    321c:	d008      	beq.n	3230 <system_apb_clock_set_divider+0x2c>
    321e:	2b02      	cmp	r3, #2
    3220:	d00b      	beq.n	323a <system_apb_clock_set_divider+0x36>
    3222:	2b00      	cmp	r3, #0
    3224:	d10e      	bne.n	3244 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    3226:	4a0b      	ldr	r2, [pc, #44]	; (3254 <system_apb_clock_set_divider+0x50>)
    3228:	1dbb      	adds	r3, r7, #6
    322a:	781b      	ldrb	r3, [r3, #0]
    322c:	7253      	strb	r3, [r2, #9]
			break;
    322e:	e00b      	b.n	3248 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    3230:	4a08      	ldr	r2, [pc, #32]	; (3254 <system_apb_clock_set_divider+0x50>)
    3232:	1dbb      	adds	r3, r7, #6
    3234:	781b      	ldrb	r3, [r3, #0]
    3236:	7293      	strb	r3, [r2, #10]
			break;
    3238:	e006      	b.n	3248 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    323a:	4a06      	ldr	r2, [pc, #24]	; (3254 <system_apb_clock_set_divider+0x50>)
    323c:	1dbb      	adds	r3, r7, #6
    323e:	781b      	ldrb	r3, [r3, #0]
    3240:	72d3      	strb	r3, [r2, #11]
			break;
    3242:	e001      	b.n	3248 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    3244:	2317      	movs	r3, #23
    3246:	e000      	b.n	324a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    3248:	2300      	movs	r3, #0
}
    324a:	0018      	movs	r0, r3
    324c:	46bd      	mov	sp, r7
    324e:	b002      	add	sp, #8
    3250:	bd80      	pop	{r7, pc}
    3252:	46c0      	nop			; (mov r8, r8)
    3254:	40000400 	.word	0x40000400

00003258 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    3258:	b580      	push	{r7, lr}
    325a:	b082      	sub	sp, #8
    325c:	af00      	add	r7, sp, #0
    325e:	0002      	movs	r2, r0
    3260:	1dfb      	adds	r3, r7, #7
    3262:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3264:	4a08      	ldr	r2, [pc, #32]	; (3288 <system_flash_set_waitstates+0x30>)
    3266:	1dfb      	adds	r3, r7, #7
    3268:	781b      	ldrb	r3, [r3, #0]
    326a:	210f      	movs	r1, #15
    326c:	400b      	ands	r3, r1
    326e:	b2d9      	uxtb	r1, r3
    3270:	6853      	ldr	r3, [r2, #4]
    3272:	200f      	movs	r0, #15
    3274:	4001      	ands	r1, r0
    3276:	0049      	lsls	r1, r1, #1
    3278:	201e      	movs	r0, #30
    327a:	4383      	bics	r3, r0
    327c:	430b      	orrs	r3, r1
    327e:	6053      	str	r3, [r2, #4]
}
    3280:	46c0      	nop			; (mov r8, r8)
    3282:	46bd      	mov	sp, r7
    3284:	b002      	add	sp, #8
    3286:	bd80      	pop	{r7, pc}
    3288:	41004000 	.word	0x41004000

0000328c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    328c:	b580      	push	{r7, lr}
    328e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3290:	46c0      	nop			; (mov r8, r8)
    3292:	4b04      	ldr	r3, [pc, #16]	; (32a4 <_system_dfll_wait_for_sync+0x18>)
    3294:	68db      	ldr	r3, [r3, #12]
    3296:	2210      	movs	r2, #16
    3298:	4013      	ands	r3, r2
    329a:	d0fa      	beq.n	3292 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    329c:	46c0      	nop			; (mov r8, r8)
    329e:	46bd      	mov	sp, r7
    32a0:	bd80      	pop	{r7, pc}
    32a2:	46c0      	nop			; (mov r8, r8)
    32a4:	40000800 	.word	0x40000800

000032a8 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    32a8:	b580      	push	{r7, lr}
    32aa:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    32ac:	4b0c      	ldr	r3, [pc, #48]	; (32e0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    32ae:	2202      	movs	r2, #2
    32b0:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    32b2:	4b0c      	ldr	r3, [pc, #48]	; (32e4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    32b4:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    32b6:	4a0a      	ldr	r2, [pc, #40]	; (32e0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    32b8:	4b0b      	ldr	r3, [pc, #44]	; (32e8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    32ba:	689b      	ldr	r3, [r3, #8]
    32bc:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    32be:	4a08      	ldr	r2, [pc, #32]	; (32e0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    32c0:	4b09      	ldr	r3, [pc, #36]	; (32e8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    32c2:	685b      	ldr	r3, [r3, #4]
    32c4:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    32c6:	4b06      	ldr	r3, [pc, #24]	; (32e0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    32c8:	2200      	movs	r2, #0
    32ca:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    32cc:	4b05      	ldr	r3, [pc, #20]	; (32e4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    32ce:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    32d0:	4a03      	ldr	r2, [pc, #12]	; (32e0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    32d2:	4b05      	ldr	r3, [pc, #20]	; (32e8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    32d4:	681b      	ldr	r3, [r3, #0]
    32d6:	b29b      	uxth	r3, r3
    32d8:	8493      	strh	r3, [r2, #36]	; 0x24
}
    32da:	46c0      	nop			; (mov r8, r8)
    32dc:	46bd      	mov	sp, r7
    32de:	bd80      	pop	{r7, pc}
    32e0:	40000800 	.word	0x40000800
    32e4:	0000328d 	.word	0x0000328d
    32e8:	200000bc 	.word	0x200000bc

000032ec <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    32ec:	b580      	push	{r7, lr}
    32ee:	b082      	sub	sp, #8
    32f0:	af00      	add	r7, sp, #0
    32f2:	0002      	movs	r2, r0
    32f4:	1dfb      	adds	r3, r7, #7
    32f6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    32f8:	1dfb      	adds	r3, r7, #7
    32fa:	781b      	ldrb	r3, [r3, #0]
    32fc:	2b08      	cmp	r3, #8
    32fe:	d840      	bhi.n	3382 <system_clock_source_get_hz+0x96>
    3300:	009a      	lsls	r2, r3, #2
    3302:	4b22      	ldr	r3, [pc, #136]	; (338c <system_clock_source_get_hz+0xa0>)
    3304:	18d3      	adds	r3, r2, r3
    3306:	681b      	ldr	r3, [r3, #0]
    3308:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    330a:	4b21      	ldr	r3, [pc, #132]	; (3390 <system_clock_source_get_hz+0xa4>)
    330c:	691b      	ldr	r3, [r3, #16]
    330e:	e039      	b.n	3384 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    3310:	4b20      	ldr	r3, [pc, #128]	; (3394 <system_clock_source_get_hz+0xa8>)
    3312:	6a1b      	ldr	r3, [r3, #32]
    3314:	059b      	lsls	r3, r3, #22
    3316:	0f9b      	lsrs	r3, r3, #30
    3318:	b2db      	uxtb	r3, r3
    331a:	001a      	movs	r2, r3
    331c:	4b1e      	ldr	r3, [pc, #120]	; (3398 <system_clock_source_get_hz+0xac>)
    331e:	40d3      	lsrs	r3, r2
    3320:	e030      	b.n	3384 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    3322:	2380      	movs	r3, #128	; 0x80
    3324:	021b      	lsls	r3, r3, #8
    3326:	e02d      	b.n	3384 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    3328:	2380      	movs	r3, #128	; 0x80
    332a:	021b      	lsls	r3, r3, #8
    332c:	e02a      	b.n	3384 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    332e:	4b18      	ldr	r3, [pc, #96]	; (3390 <system_clock_source_get_hz+0xa4>)
    3330:	695b      	ldr	r3, [r3, #20]
    3332:	e027      	b.n	3384 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3334:	4b16      	ldr	r3, [pc, #88]	; (3390 <system_clock_source_get_hz+0xa4>)
    3336:	681b      	ldr	r3, [r3, #0]
    3338:	2202      	movs	r2, #2
    333a:	4013      	ands	r3, r2
    333c:	d101      	bne.n	3342 <system_clock_source_get_hz+0x56>
			return 0;
    333e:	2300      	movs	r3, #0
    3340:	e020      	b.n	3384 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    3342:	4b16      	ldr	r3, [pc, #88]	; (339c <system_clock_source_get_hz+0xb0>)
    3344:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    3346:	4b12      	ldr	r3, [pc, #72]	; (3390 <system_clock_source_get_hz+0xa4>)
    3348:	681b      	ldr	r3, [r3, #0]
    334a:	2204      	movs	r2, #4
    334c:	4013      	ands	r3, r2
    334e:	d009      	beq.n	3364 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3350:	2000      	movs	r0, #0
    3352:	4b13      	ldr	r3, [pc, #76]	; (33a0 <system_clock_source_get_hz+0xb4>)
    3354:	4798      	blx	r3
    3356:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    3358:	4b0d      	ldr	r3, [pc, #52]	; (3390 <system_clock_source_get_hz+0xa4>)
    335a:	689b      	ldr	r3, [r3, #8]
    335c:	041b      	lsls	r3, r3, #16
    335e:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3360:	4353      	muls	r3, r2
    3362:	e00f      	b.n	3384 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    3364:	4b0f      	ldr	r3, [pc, #60]	; (33a4 <system_clock_source_get_hz+0xb8>)
    3366:	e00d      	b.n	3384 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3368:	4a0a      	ldr	r2, [pc, #40]	; (3394 <system_clock_source_get_hz+0xa8>)
    336a:	2350      	movs	r3, #80	; 0x50
    336c:	5cd3      	ldrb	r3, [r2, r3]
    336e:	b2db      	uxtb	r3, r3
    3370:	001a      	movs	r2, r3
    3372:	2304      	movs	r3, #4
    3374:	4013      	ands	r3, r2
    3376:	d101      	bne.n	337c <system_clock_source_get_hz+0x90>
			return 0;
    3378:	2300      	movs	r3, #0
    337a:	e003      	b.n	3384 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    337c:	4b04      	ldr	r3, [pc, #16]	; (3390 <system_clock_source_get_hz+0xa4>)
    337e:	68db      	ldr	r3, [r3, #12]
    3380:	e000      	b.n	3384 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    3382:	2300      	movs	r3, #0
	}
}
    3384:	0018      	movs	r0, r3
    3386:	46bd      	mov	sp, r7
    3388:	b002      	add	sp, #8
    338a:	bd80      	pop	{r7, pc}
    338c:	00005bd4 	.word	0x00005bd4
    3390:	200000bc 	.word	0x200000bc
    3394:	40000800 	.word	0x40000800
    3398:	007a1200 	.word	0x007a1200
    339c:	0000328d 	.word	0x0000328d
    33a0:	00003a29 	.word	0x00003a29
    33a4:	02dc6c00 	.word	0x02dc6c00

000033a8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    33a8:	b580      	push	{r7, lr}
    33aa:	b084      	sub	sp, #16
    33ac:	af00      	add	r7, sp, #0
    33ae:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    33b0:	4b1a      	ldr	r3, [pc, #104]	; (341c <system_clock_source_osc8m_set_config+0x74>)
    33b2:	6a1b      	ldr	r3, [r3, #32]
    33b4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    33b6:	687b      	ldr	r3, [r7, #4]
    33b8:	781b      	ldrb	r3, [r3, #0]
    33ba:	1c1a      	adds	r2, r3, #0
    33bc:	2303      	movs	r3, #3
    33be:	4013      	ands	r3, r2
    33c0:	b2da      	uxtb	r2, r3
    33c2:	230d      	movs	r3, #13
    33c4:	18fb      	adds	r3, r7, r3
    33c6:	2103      	movs	r1, #3
    33c8:	400a      	ands	r2, r1
    33ca:	0010      	movs	r0, r2
    33cc:	781a      	ldrb	r2, [r3, #0]
    33ce:	2103      	movs	r1, #3
    33d0:	438a      	bics	r2, r1
    33d2:	1c11      	adds	r1, r2, #0
    33d4:	1c02      	adds	r2, r0, #0
    33d6:	430a      	orrs	r2, r1
    33d8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    33da:	687b      	ldr	r3, [r7, #4]
    33dc:	789a      	ldrb	r2, [r3, #2]
    33de:	230c      	movs	r3, #12
    33e0:	18fb      	adds	r3, r7, r3
    33e2:	01d0      	lsls	r0, r2, #7
    33e4:	781a      	ldrb	r2, [r3, #0]
    33e6:	217f      	movs	r1, #127	; 0x7f
    33e8:	400a      	ands	r2, r1
    33ea:	1c11      	adds	r1, r2, #0
    33ec:	1c02      	adds	r2, r0, #0
    33ee:	430a      	orrs	r2, r1
    33f0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    33f2:	687b      	ldr	r3, [r7, #4]
    33f4:	785a      	ldrb	r2, [r3, #1]
    33f6:	230c      	movs	r3, #12
    33f8:	18fb      	adds	r3, r7, r3
    33fa:	2101      	movs	r1, #1
    33fc:	400a      	ands	r2, r1
    33fe:	0190      	lsls	r0, r2, #6
    3400:	781a      	ldrb	r2, [r3, #0]
    3402:	2140      	movs	r1, #64	; 0x40
    3404:	438a      	bics	r2, r1
    3406:	1c11      	adds	r1, r2, #0
    3408:	1c02      	adds	r2, r0, #0
    340a:	430a      	orrs	r2, r1
    340c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    340e:	4b03      	ldr	r3, [pc, #12]	; (341c <system_clock_source_osc8m_set_config+0x74>)
    3410:	68fa      	ldr	r2, [r7, #12]
    3412:	621a      	str	r2, [r3, #32]
}
    3414:	46c0      	nop			; (mov r8, r8)
    3416:	46bd      	mov	sp, r7
    3418:	b004      	add	sp, #16
    341a:	bd80      	pop	{r7, pc}
    341c:	40000800 	.word	0x40000800

00003420 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    3420:	b580      	push	{r7, lr}
    3422:	b082      	sub	sp, #8
    3424:	af00      	add	r7, sp, #0
    3426:	0002      	movs	r2, r0
    3428:	1dfb      	adds	r3, r7, #7
    342a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    342c:	1dfb      	adds	r3, r7, #7
    342e:	781b      	ldrb	r3, [r3, #0]
    3430:	2b08      	cmp	r3, #8
    3432:	d83b      	bhi.n	34ac <system_clock_source_enable+0x8c>
    3434:	009a      	lsls	r2, r3, #2
    3436:	4b21      	ldr	r3, [pc, #132]	; (34bc <system_clock_source_enable+0x9c>)
    3438:	18d3      	adds	r3, r2, r3
    343a:	681b      	ldr	r3, [r3, #0]
    343c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    343e:	4b20      	ldr	r3, [pc, #128]	; (34c0 <system_clock_source_enable+0xa0>)
    3440:	4a1f      	ldr	r2, [pc, #124]	; (34c0 <system_clock_source_enable+0xa0>)
    3442:	6a12      	ldr	r2, [r2, #32]
    3444:	2102      	movs	r1, #2
    3446:	430a      	orrs	r2, r1
    3448:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    344a:	2300      	movs	r3, #0
    344c:	e031      	b.n	34b2 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    344e:	4b1c      	ldr	r3, [pc, #112]	; (34c0 <system_clock_source_enable+0xa0>)
    3450:	4a1b      	ldr	r2, [pc, #108]	; (34c0 <system_clock_source_enable+0xa0>)
    3452:	6992      	ldr	r2, [r2, #24]
    3454:	2102      	movs	r1, #2
    3456:	430a      	orrs	r2, r1
    3458:	619a      	str	r2, [r3, #24]
		break;
    345a:	e029      	b.n	34b0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    345c:	4a18      	ldr	r2, [pc, #96]	; (34c0 <system_clock_source_enable+0xa0>)
    345e:	4b18      	ldr	r3, [pc, #96]	; (34c0 <system_clock_source_enable+0xa0>)
    3460:	8a1b      	ldrh	r3, [r3, #16]
    3462:	b29b      	uxth	r3, r3
    3464:	2102      	movs	r1, #2
    3466:	430b      	orrs	r3, r1
    3468:	b29b      	uxth	r3, r3
    346a:	8213      	strh	r3, [r2, #16]
		break;
    346c:	e020      	b.n	34b0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    346e:	4a14      	ldr	r2, [pc, #80]	; (34c0 <system_clock_source_enable+0xa0>)
    3470:	4b13      	ldr	r3, [pc, #76]	; (34c0 <system_clock_source_enable+0xa0>)
    3472:	8a9b      	ldrh	r3, [r3, #20]
    3474:	b29b      	uxth	r3, r3
    3476:	2102      	movs	r1, #2
    3478:	430b      	orrs	r3, r1
    347a:	b29b      	uxth	r3, r3
    347c:	8293      	strh	r3, [r2, #20]
		break;
    347e:	e017      	b.n	34b0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3480:	4b10      	ldr	r3, [pc, #64]	; (34c4 <system_clock_source_enable+0xa4>)
    3482:	681b      	ldr	r3, [r3, #0]
    3484:	2202      	movs	r2, #2
    3486:	431a      	orrs	r2, r3
    3488:	4b0e      	ldr	r3, [pc, #56]	; (34c4 <system_clock_source_enable+0xa4>)
    348a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    348c:	4b0e      	ldr	r3, [pc, #56]	; (34c8 <system_clock_source_enable+0xa8>)
    348e:	4798      	blx	r3
		break;
    3490:	e00e      	b.n	34b0 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3492:	4a0b      	ldr	r2, [pc, #44]	; (34c0 <system_clock_source_enable+0xa0>)
    3494:	490a      	ldr	r1, [pc, #40]	; (34c0 <system_clock_source_enable+0xa0>)
    3496:	2344      	movs	r3, #68	; 0x44
    3498:	5ccb      	ldrb	r3, [r1, r3]
    349a:	b2db      	uxtb	r3, r3
    349c:	2102      	movs	r1, #2
    349e:	430b      	orrs	r3, r1
    34a0:	b2d9      	uxtb	r1, r3
    34a2:	2344      	movs	r3, #68	; 0x44
    34a4:	54d1      	strb	r1, [r2, r3]
		break;
    34a6:	e003      	b.n	34b0 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    34a8:	2300      	movs	r3, #0
    34aa:	e002      	b.n	34b2 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    34ac:	2317      	movs	r3, #23
    34ae:	e000      	b.n	34b2 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    34b0:	2300      	movs	r3, #0
}
    34b2:	0018      	movs	r0, r3
    34b4:	46bd      	mov	sp, r7
    34b6:	b002      	add	sp, #8
    34b8:	bd80      	pop	{r7, pc}
    34ba:	46c0      	nop			; (mov r8, r8)
    34bc:	00005bf8 	.word	0x00005bf8
    34c0:	40000800 	.word	0x40000800
    34c4:	200000bc 	.word	0x200000bc
    34c8:	000032a9 	.word	0x000032a9

000034cc <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    34cc:	b580      	push	{r7, lr}
    34ce:	b082      	sub	sp, #8
    34d0:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    34d2:	003b      	movs	r3, r7
    34d4:	2201      	movs	r2, #1
    34d6:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    34d8:	2300      	movs	r3, #0
    34da:	607b      	str	r3, [r7, #4]
    34dc:	e009      	b.n	34f2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    34de:	687b      	ldr	r3, [r7, #4]
    34e0:	b2db      	uxtb	r3, r3
    34e2:	003a      	movs	r2, r7
    34e4:	0011      	movs	r1, r2
    34e6:	0018      	movs	r0, r3
    34e8:	4b05      	ldr	r3, [pc, #20]	; (3500 <_switch_peripheral_gclk+0x34>)
    34ea:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    34ec:	687b      	ldr	r3, [r7, #4]
    34ee:	3301      	adds	r3, #1
    34f0:	607b      	str	r3, [r7, #4]
    34f2:	687b      	ldr	r3, [r7, #4]
    34f4:	2b24      	cmp	r3, #36	; 0x24
    34f6:	d9f2      	bls.n	34de <_switch_peripheral_gclk+0x12>
	}
}
    34f8:	46c0      	nop			; (mov r8, r8)
    34fa:	46bd      	mov	sp, r7
    34fc:	b002      	add	sp, #8
    34fe:	bd80      	pop	{r7, pc}
    3500:	00003905 	.word	0x00003905

00003504 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3504:	b580      	push	{r7, lr}
    3506:	b0a0      	sub	sp, #128	; 0x80
    3508:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    350a:	4b27      	ldr	r3, [pc, #156]	; (35a8 <system_clock_init+0xa4>)
    350c:	22c2      	movs	r2, #194	; 0xc2
    350e:	00d2      	lsls	r2, r2, #3
    3510:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    3512:	2000      	movs	r0, #0
    3514:	4b25      	ldr	r3, [pc, #148]	; (35ac <system_clock_init+0xa8>)
    3516:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    3518:	4b25      	ldr	r3, [pc, #148]	; (35b0 <system_clock_init+0xac>)
    351a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    351c:	237c      	movs	r3, #124	; 0x7c
    351e:	18fb      	adds	r3, r7, r3
    3520:	0018      	movs	r0, r3
    3522:	4b24      	ldr	r3, [pc, #144]	; (35b4 <system_clock_init+0xb0>)
    3524:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3526:	237c      	movs	r3, #124	; 0x7c
    3528:	18fb      	adds	r3, r7, r3
    352a:	2200      	movs	r2, #0
    352c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    352e:	237c      	movs	r3, #124	; 0x7c
    3530:	18fb      	adds	r3, r7, r3
    3532:	2201      	movs	r2, #1
    3534:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    3536:	237c      	movs	r3, #124	; 0x7c
    3538:	18fb      	adds	r3, r7, r3
    353a:	2200      	movs	r2, #0
    353c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    353e:	237c      	movs	r3, #124	; 0x7c
    3540:	18fb      	adds	r3, r7, r3
    3542:	0018      	movs	r0, r3
    3544:	4b1c      	ldr	r3, [pc, #112]	; (35b8 <system_clock_init+0xb4>)
    3546:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3548:	2006      	movs	r0, #6
    354a:	4b1c      	ldr	r3, [pc, #112]	; (35bc <system_clock_init+0xb8>)
    354c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    354e:	4b1c      	ldr	r3, [pc, #112]	; (35c0 <system_clock_init+0xbc>)
    3550:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    3552:	2000      	movs	r0, #0
    3554:	4b1b      	ldr	r3, [pc, #108]	; (35c4 <system_clock_init+0xc0>)
    3556:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    3558:	2100      	movs	r1, #0
    355a:	2000      	movs	r0, #0
    355c:	4b1a      	ldr	r3, [pc, #104]	; (35c8 <system_clock_init+0xc4>)
    355e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    3560:	2100      	movs	r1, #0
    3562:	2001      	movs	r0, #1
    3564:	4b18      	ldr	r3, [pc, #96]	; (35c8 <system_clock_init+0xc4>)
    3566:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    3568:	2100      	movs	r1, #0
    356a:	2002      	movs	r0, #2
    356c:	4b16      	ldr	r3, [pc, #88]	; (35c8 <system_clock_init+0xc4>)
    356e:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3570:	1d3b      	adds	r3, r7, #4
    3572:	0018      	movs	r0, r3
    3574:	4b15      	ldr	r3, [pc, #84]	; (35cc <system_clock_init+0xc8>)
    3576:	4798      	blx	r3
    3578:	1d3b      	adds	r3, r7, #4
    357a:	2206      	movs	r2, #6
    357c:	701a      	strb	r2, [r3, #0]
    357e:	1d3b      	adds	r3, r7, #4
    3580:	2201      	movs	r2, #1
    3582:	605a      	str	r2, [r3, #4]
    3584:	1d3b      	adds	r3, r7, #4
    3586:	2200      	movs	r2, #0
    3588:	721a      	strb	r2, [r3, #8]
    358a:	1d3b      	adds	r3, r7, #4
    358c:	2200      	movs	r2, #0
    358e:	725a      	strb	r2, [r3, #9]
    3590:	1d3b      	adds	r3, r7, #4
    3592:	0019      	movs	r1, r3
    3594:	2000      	movs	r0, #0
    3596:	4b0e      	ldr	r3, [pc, #56]	; (35d0 <system_clock_init+0xcc>)
    3598:	4798      	blx	r3
    359a:	2000      	movs	r0, #0
    359c:	4b0d      	ldr	r3, [pc, #52]	; (35d4 <system_clock_init+0xd0>)
    359e:	4798      	blx	r3
#endif
}
    35a0:	46c0      	nop			; (mov r8, r8)
    35a2:	46bd      	mov	sp, r7
    35a4:	b020      	add	sp, #128	; 0x80
    35a6:	bd80      	pop	{r7, pc}
    35a8:	40000800 	.word	0x40000800
    35ac:	00003259 	.word	0x00003259
    35b0:	000034cd 	.word	0x000034cd
    35b4:	000031c3 	.word	0x000031c3
    35b8:	000033a9 	.word	0x000033a9
    35bc:	00003421 	.word	0x00003421
    35c0:	0000367d 	.word	0x0000367d
    35c4:	000031e5 	.word	0x000031e5
    35c8:	00003205 	.word	0x00003205
    35cc:	00003195 	.word	0x00003195
    35d0:	000036ad 	.word	0x000036ad
    35d4:	000037d1 	.word	0x000037d1

000035d8 <system_apb_clock_set_mask>:
{
    35d8:	b580      	push	{r7, lr}
    35da:	b082      	sub	sp, #8
    35dc:	af00      	add	r7, sp, #0
    35de:	0002      	movs	r2, r0
    35e0:	6039      	str	r1, [r7, #0]
    35e2:	1dfb      	adds	r3, r7, #7
    35e4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    35e6:	1dfb      	adds	r3, r7, #7
    35e8:	781b      	ldrb	r3, [r3, #0]
    35ea:	2b01      	cmp	r3, #1
    35ec:	d00a      	beq.n	3604 <system_apb_clock_set_mask+0x2c>
    35ee:	2b02      	cmp	r3, #2
    35f0:	d00f      	beq.n	3612 <system_apb_clock_set_mask+0x3a>
    35f2:	2b00      	cmp	r3, #0
    35f4:	d114      	bne.n	3620 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    35f6:	4b0e      	ldr	r3, [pc, #56]	; (3630 <system_apb_clock_set_mask+0x58>)
    35f8:	4a0d      	ldr	r2, [pc, #52]	; (3630 <system_apb_clock_set_mask+0x58>)
    35fa:	6991      	ldr	r1, [r2, #24]
    35fc:	683a      	ldr	r2, [r7, #0]
    35fe:	430a      	orrs	r2, r1
    3600:	619a      	str	r2, [r3, #24]
			break;
    3602:	e00f      	b.n	3624 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    3604:	4b0a      	ldr	r3, [pc, #40]	; (3630 <system_apb_clock_set_mask+0x58>)
    3606:	4a0a      	ldr	r2, [pc, #40]	; (3630 <system_apb_clock_set_mask+0x58>)
    3608:	69d1      	ldr	r1, [r2, #28]
    360a:	683a      	ldr	r2, [r7, #0]
    360c:	430a      	orrs	r2, r1
    360e:	61da      	str	r2, [r3, #28]
			break;
    3610:	e008      	b.n	3624 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    3612:	4b07      	ldr	r3, [pc, #28]	; (3630 <system_apb_clock_set_mask+0x58>)
    3614:	4a06      	ldr	r2, [pc, #24]	; (3630 <system_apb_clock_set_mask+0x58>)
    3616:	6a11      	ldr	r1, [r2, #32]
    3618:	683a      	ldr	r2, [r7, #0]
    361a:	430a      	orrs	r2, r1
    361c:	621a      	str	r2, [r3, #32]
			break;
    361e:	e001      	b.n	3624 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3620:	2317      	movs	r3, #23
    3622:	e000      	b.n	3626 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    3624:	2300      	movs	r3, #0
}
    3626:	0018      	movs	r0, r3
    3628:	46bd      	mov	sp, r7
    362a:	b002      	add	sp, #8
    362c:	bd80      	pop	{r7, pc}
    362e:	46c0      	nop			; (mov r8, r8)
    3630:	40000400 	.word	0x40000400

00003634 <system_interrupt_enter_critical_section>:
{
    3634:	b580      	push	{r7, lr}
    3636:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    3638:	4b02      	ldr	r3, [pc, #8]	; (3644 <system_interrupt_enter_critical_section+0x10>)
    363a:	4798      	blx	r3
}
    363c:	46c0      	nop			; (mov r8, r8)
    363e:	46bd      	mov	sp, r7
    3640:	bd80      	pop	{r7, pc}
    3642:	46c0      	nop			; (mov r8, r8)
    3644:	0000081d 	.word	0x0000081d

00003648 <system_interrupt_leave_critical_section>:
{
    3648:	b580      	push	{r7, lr}
    364a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    364c:	4b02      	ldr	r3, [pc, #8]	; (3658 <system_interrupt_leave_critical_section+0x10>)
    364e:	4798      	blx	r3
}
    3650:	46c0      	nop			; (mov r8, r8)
    3652:	46bd      	mov	sp, r7
    3654:	bd80      	pop	{r7, pc}
    3656:	46c0      	nop			; (mov r8, r8)
    3658:	00000871 	.word	0x00000871

0000365c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    365c:	b580      	push	{r7, lr}
    365e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3660:	4b05      	ldr	r3, [pc, #20]	; (3678 <system_gclk_is_syncing+0x1c>)
    3662:	785b      	ldrb	r3, [r3, #1]
    3664:	b2db      	uxtb	r3, r3
    3666:	b25b      	sxtb	r3, r3
    3668:	2b00      	cmp	r3, #0
    366a:	da01      	bge.n	3670 <system_gclk_is_syncing+0x14>
		return true;
    366c:	2301      	movs	r3, #1
    366e:	e000      	b.n	3672 <system_gclk_is_syncing+0x16>
	}

	return false;
    3670:	2300      	movs	r3, #0
}
    3672:	0018      	movs	r0, r3
    3674:	46bd      	mov	sp, r7
    3676:	bd80      	pop	{r7, pc}
    3678:	40000c00 	.word	0x40000c00

0000367c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    367c:	b580      	push	{r7, lr}
    367e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    3680:	2108      	movs	r1, #8
    3682:	2000      	movs	r0, #0
    3684:	4b07      	ldr	r3, [pc, #28]	; (36a4 <system_gclk_init+0x28>)
    3686:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3688:	4b07      	ldr	r3, [pc, #28]	; (36a8 <system_gclk_init+0x2c>)
    368a:	2201      	movs	r2, #1
    368c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    368e:	46c0      	nop			; (mov r8, r8)
    3690:	4b05      	ldr	r3, [pc, #20]	; (36a8 <system_gclk_init+0x2c>)
    3692:	781b      	ldrb	r3, [r3, #0]
    3694:	b2db      	uxtb	r3, r3
    3696:	001a      	movs	r2, r3
    3698:	2301      	movs	r3, #1
    369a:	4013      	ands	r3, r2
    369c:	d1f8      	bne.n	3690 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    369e:	46c0      	nop			; (mov r8, r8)
    36a0:	46bd      	mov	sp, r7
    36a2:	bd80      	pop	{r7, pc}
    36a4:	000035d9 	.word	0x000035d9
    36a8:	40000c00 	.word	0x40000c00

000036ac <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    36ac:	b580      	push	{r7, lr}
    36ae:	b086      	sub	sp, #24
    36b0:	af00      	add	r7, sp, #0
    36b2:	0002      	movs	r2, r0
    36b4:	6039      	str	r1, [r7, #0]
    36b6:	1dfb      	adds	r3, r7, #7
    36b8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    36ba:	1dfb      	adds	r3, r7, #7
    36bc:	781b      	ldrb	r3, [r3, #0]
    36be:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    36c0:	1dfb      	adds	r3, r7, #7
    36c2:	781b      	ldrb	r3, [r3, #0]
    36c4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    36c6:	683b      	ldr	r3, [r7, #0]
    36c8:	781b      	ldrb	r3, [r3, #0]
    36ca:	021b      	lsls	r3, r3, #8
    36cc:	001a      	movs	r2, r3
    36ce:	697b      	ldr	r3, [r7, #20]
    36d0:	4313      	orrs	r3, r2
    36d2:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    36d4:	683b      	ldr	r3, [r7, #0]
    36d6:	785b      	ldrb	r3, [r3, #1]
    36d8:	2b00      	cmp	r3, #0
    36da:	d004      	beq.n	36e6 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    36dc:	697b      	ldr	r3, [r7, #20]
    36de:	2280      	movs	r2, #128	; 0x80
    36e0:	02d2      	lsls	r2, r2, #11
    36e2:	4313      	orrs	r3, r2
    36e4:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    36e6:	683b      	ldr	r3, [r7, #0]
    36e8:	7a5b      	ldrb	r3, [r3, #9]
    36ea:	2b00      	cmp	r3, #0
    36ec:	d004      	beq.n	36f8 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    36ee:	697b      	ldr	r3, [r7, #20]
    36f0:	2280      	movs	r2, #128	; 0x80
    36f2:	0312      	lsls	r2, r2, #12
    36f4:	4313      	orrs	r3, r2
    36f6:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    36f8:	683b      	ldr	r3, [r7, #0]
    36fa:	685b      	ldr	r3, [r3, #4]
    36fc:	2b01      	cmp	r3, #1
    36fe:	d92c      	bls.n	375a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3700:	683b      	ldr	r3, [r7, #0]
    3702:	685a      	ldr	r2, [r3, #4]
    3704:	683b      	ldr	r3, [r7, #0]
    3706:	685b      	ldr	r3, [r3, #4]
    3708:	3b01      	subs	r3, #1
    370a:	4013      	ands	r3, r2
    370c:	d11a      	bne.n	3744 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    370e:	2300      	movs	r3, #0
    3710:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3712:	2302      	movs	r3, #2
    3714:	60bb      	str	r3, [r7, #8]
    3716:	e005      	b.n	3724 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    3718:	68fb      	ldr	r3, [r7, #12]
    371a:	3301      	adds	r3, #1
    371c:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    371e:	68bb      	ldr	r3, [r7, #8]
    3720:	005b      	lsls	r3, r3, #1
    3722:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    3724:	683b      	ldr	r3, [r7, #0]
    3726:	685a      	ldr	r2, [r3, #4]
    3728:	68bb      	ldr	r3, [r7, #8]
    372a:	429a      	cmp	r2, r3
    372c:	d8f4      	bhi.n	3718 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    372e:	68fb      	ldr	r3, [r7, #12]
    3730:	021b      	lsls	r3, r3, #8
    3732:	693a      	ldr	r2, [r7, #16]
    3734:	4313      	orrs	r3, r2
    3736:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3738:	697b      	ldr	r3, [r7, #20]
    373a:	2280      	movs	r2, #128	; 0x80
    373c:	0352      	lsls	r2, r2, #13
    373e:	4313      	orrs	r3, r2
    3740:	617b      	str	r3, [r7, #20]
    3742:	e00a      	b.n	375a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    3744:	683b      	ldr	r3, [r7, #0]
    3746:	685b      	ldr	r3, [r3, #4]
    3748:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    374a:	693a      	ldr	r2, [r7, #16]
    374c:	4313      	orrs	r3, r2
    374e:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3750:	697b      	ldr	r3, [r7, #20]
    3752:	2280      	movs	r2, #128	; 0x80
    3754:	0292      	lsls	r2, r2, #10
    3756:	4313      	orrs	r3, r2
    3758:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    375a:	683b      	ldr	r3, [r7, #0]
    375c:	7a1b      	ldrb	r3, [r3, #8]
    375e:	2b00      	cmp	r3, #0
    3760:	d004      	beq.n	376c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3762:	697b      	ldr	r3, [r7, #20]
    3764:	2280      	movs	r2, #128	; 0x80
    3766:	0392      	lsls	r2, r2, #14
    3768:	4313      	orrs	r3, r2
    376a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    376c:	46c0      	nop			; (mov r8, r8)
    376e:	4b13      	ldr	r3, [pc, #76]	; (37bc <system_gclk_gen_set_config+0x110>)
    3770:	4798      	blx	r3
    3772:	1e03      	subs	r3, r0, #0
    3774:	d1fb      	bne.n	376e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3776:	4b12      	ldr	r3, [pc, #72]	; (37c0 <system_gclk_gen_set_config+0x114>)
    3778:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    377a:	4a12      	ldr	r2, [pc, #72]	; (37c4 <system_gclk_gen_set_config+0x118>)
    377c:	1dfb      	adds	r3, r7, #7
    377e:	781b      	ldrb	r3, [r3, #0]
    3780:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    3782:	46c0      	nop			; (mov r8, r8)
    3784:	4b0d      	ldr	r3, [pc, #52]	; (37bc <system_gclk_gen_set_config+0x110>)
    3786:	4798      	blx	r3
    3788:	1e03      	subs	r3, r0, #0
    378a:	d1fb      	bne.n	3784 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    378c:	4b0e      	ldr	r3, [pc, #56]	; (37c8 <system_gclk_gen_set_config+0x11c>)
    378e:	693a      	ldr	r2, [r7, #16]
    3790:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    3792:	46c0      	nop			; (mov r8, r8)
    3794:	4b09      	ldr	r3, [pc, #36]	; (37bc <system_gclk_gen_set_config+0x110>)
    3796:	4798      	blx	r3
    3798:	1e03      	subs	r3, r0, #0
    379a:	d1fb      	bne.n	3794 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    379c:	4b0a      	ldr	r3, [pc, #40]	; (37c8 <system_gclk_gen_set_config+0x11c>)
    379e:	4a0a      	ldr	r2, [pc, #40]	; (37c8 <system_gclk_gen_set_config+0x11c>)
    37a0:	6851      	ldr	r1, [r2, #4]
    37a2:	2280      	movs	r2, #128	; 0x80
    37a4:	0252      	lsls	r2, r2, #9
    37a6:	4011      	ands	r1, r2
    37a8:	697a      	ldr	r2, [r7, #20]
    37aa:	430a      	orrs	r2, r1
    37ac:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    37ae:	4b07      	ldr	r3, [pc, #28]	; (37cc <system_gclk_gen_set_config+0x120>)
    37b0:	4798      	blx	r3
}
    37b2:	46c0      	nop			; (mov r8, r8)
    37b4:	46bd      	mov	sp, r7
    37b6:	b006      	add	sp, #24
    37b8:	bd80      	pop	{r7, pc}
    37ba:	46c0      	nop			; (mov r8, r8)
    37bc:	0000365d 	.word	0x0000365d
    37c0:	00003635 	.word	0x00003635
    37c4:	40000c08 	.word	0x40000c08
    37c8:	40000c00 	.word	0x40000c00
    37cc:	00003649 	.word	0x00003649

000037d0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    37d0:	b580      	push	{r7, lr}
    37d2:	b082      	sub	sp, #8
    37d4:	af00      	add	r7, sp, #0
    37d6:	0002      	movs	r2, r0
    37d8:	1dfb      	adds	r3, r7, #7
    37da:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    37dc:	46c0      	nop			; (mov r8, r8)
    37de:	4b0e      	ldr	r3, [pc, #56]	; (3818 <system_gclk_gen_enable+0x48>)
    37e0:	4798      	blx	r3
    37e2:	1e03      	subs	r3, r0, #0
    37e4:	d1fb      	bne.n	37de <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    37e6:	4b0d      	ldr	r3, [pc, #52]	; (381c <system_gclk_gen_enable+0x4c>)
    37e8:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    37ea:	4a0d      	ldr	r2, [pc, #52]	; (3820 <system_gclk_gen_enable+0x50>)
    37ec:	1dfb      	adds	r3, r7, #7
    37ee:	781b      	ldrb	r3, [r3, #0]
    37f0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    37f2:	46c0      	nop			; (mov r8, r8)
    37f4:	4b08      	ldr	r3, [pc, #32]	; (3818 <system_gclk_gen_enable+0x48>)
    37f6:	4798      	blx	r3
    37f8:	1e03      	subs	r3, r0, #0
    37fa:	d1fb      	bne.n	37f4 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    37fc:	4b09      	ldr	r3, [pc, #36]	; (3824 <system_gclk_gen_enable+0x54>)
    37fe:	4a09      	ldr	r2, [pc, #36]	; (3824 <system_gclk_gen_enable+0x54>)
    3800:	6852      	ldr	r2, [r2, #4]
    3802:	2180      	movs	r1, #128	; 0x80
    3804:	0249      	lsls	r1, r1, #9
    3806:	430a      	orrs	r2, r1
    3808:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    380a:	4b07      	ldr	r3, [pc, #28]	; (3828 <system_gclk_gen_enable+0x58>)
    380c:	4798      	blx	r3
}
    380e:	46c0      	nop			; (mov r8, r8)
    3810:	46bd      	mov	sp, r7
    3812:	b002      	add	sp, #8
    3814:	bd80      	pop	{r7, pc}
    3816:	46c0      	nop			; (mov r8, r8)
    3818:	0000365d 	.word	0x0000365d
    381c:	00003635 	.word	0x00003635
    3820:	40000c04 	.word	0x40000c04
    3824:	40000c00 	.word	0x40000c00
    3828:	00003649 	.word	0x00003649

0000382c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    382c:	b580      	push	{r7, lr}
    382e:	b086      	sub	sp, #24
    3830:	af00      	add	r7, sp, #0
    3832:	0002      	movs	r2, r0
    3834:	1dfb      	adds	r3, r7, #7
    3836:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    3838:	46c0      	nop			; (mov r8, r8)
    383a:	4b2a      	ldr	r3, [pc, #168]	; (38e4 <system_gclk_gen_get_hz+0xb8>)
    383c:	4798      	blx	r3
    383e:	1e03      	subs	r3, r0, #0
    3840:	d1fb      	bne.n	383a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3842:	4b29      	ldr	r3, [pc, #164]	; (38e8 <system_gclk_gen_get_hz+0xbc>)
    3844:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3846:	4a29      	ldr	r2, [pc, #164]	; (38ec <system_gclk_gen_get_hz+0xc0>)
    3848:	1dfb      	adds	r3, r7, #7
    384a:	781b      	ldrb	r3, [r3, #0]
    384c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    384e:	46c0      	nop			; (mov r8, r8)
    3850:	4b24      	ldr	r3, [pc, #144]	; (38e4 <system_gclk_gen_get_hz+0xb8>)
    3852:	4798      	blx	r3
    3854:	1e03      	subs	r3, r0, #0
    3856:	d1fb      	bne.n	3850 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3858:	4b25      	ldr	r3, [pc, #148]	; (38f0 <system_gclk_gen_get_hz+0xc4>)
    385a:	685b      	ldr	r3, [r3, #4]
    385c:	04db      	lsls	r3, r3, #19
    385e:	0edb      	lsrs	r3, r3, #27
    3860:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3862:	0018      	movs	r0, r3
    3864:	4b23      	ldr	r3, [pc, #140]	; (38f4 <system_gclk_gen_get_hz+0xc8>)
    3866:	4798      	blx	r3
    3868:	0003      	movs	r3, r0
    386a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    386c:	4a1f      	ldr	r2, [pc, #124]	; (38ec <system_gclk_gen_get_hz+0xc0>)
    386e:	1dfb      	adds	r3, r7, #7
    3870:	781b      	ldrb	r3, [r3, #0]
    3872:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3874:	4b1e      	ldr	r3, [pc, #120]	; (38f0 <system_gclk_gen_get_hz+0xc4>)
    3876:	685b      	ldr	r3, [r3, #4]
    3878:	02db      	lsls	r3, r3, #11
    387a:	0fdb      	lsrs	r3, r3, #31
    387c:	b2da      	uxtb	r2, r3
    387e:	2313      	movs	r3, #19
    3880:	18fb      	adds	r3, r7, r3
    3882:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3884:	4a1c      	ldr	r2, [pc, #112]	; (38f8 <system_gclk_gen_get_hz+0xcc>)
    3886:	1dfb      	adds	r3, r7, #7
    3888:	781b      	ldrb	r3, [r3, #0]
    388a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    388c:	46c0      	nop			; (mov r8, r8)
    388e:	4b15      	ldr	r3, [pc, #84]	; (38e4 <system_gclk_gen_get_hz+0xb8>)
    3890:	4798      	blx	r3
    3892:	1e03      	subs	r3, r0, #0
    3894:	d1fb      	bne.n	388e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3896:	4b16      	ldr	r3, [pc, #88]	; (38f0 <system_gclk_gen_get_hz+0xc4>)
    3898:	689b      	ldr	r3, [r3, #8]
    389a:	021b      	lsls	r3, r3, #8
    389c:	0c1b      	lsrs	r3, r3, #16
    389e:	b29b      	uxth	r3, r3
    38a0:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    38a2:	4b16      	ldr	r3, [pc, #88]	; (38fc <system_gclk_gen_get_hz+0xd0>)
    38a4:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    38a6:	2313      	movs	r3, #19
    38a8:	18fb      	adds	r3, r7, r3
    38aa:	781b      	ldrb	r3, [r3, #0]
    38ac:	2b00      	cmp	r3, #0
    38ae:	d109      	bne.n	38c4 <system_gclk_gen_get_hz+0x98>
    38b0:	68fb      	ldr	r3, [r7, #12]
    38b2:	2b01      	cmp	r3, #1
    38b4:	d906      	bls.n	38c4 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    38b6:	4b12      	ldr	r3, [pc, #72]	; (3900 <system_gclk_gen_get_hz+0xd4>)
    38b8:	68f9      	ldr	r1, [r7, #12]
    38ba:	6978      	ldr	r0, [r7, #20]
    38bc:	4798      	blx	r3
    38be:	0003      	movs	r3, r0
    38c0:	617b      	str	r3, [r7, #20]
    38c2:	e00a      	b.n	38da <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    38c4:	2313      	movs	r3, #19
    38c6:	18fb      	adds	r3, r7, r3
    38c8:	781b      	ldrb	r3, [r3, #0]
    38ca:	2b00      	cmp	r3, #0
    38cc:	d005      	beq.n	38da <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    38ce:	68fb      	ldr	r3, [r7, #12]
    38d0:	3301      	adds	r3, #1
    38d2:	697a      	ldr	r2, [r7, #20]
    38d4:	40da      	lsrs	r2, r3
    38d6:	0013      	movs	r3, r2
    38d8:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    38da:	697b      	ldr	r3, [r7, #20]
}
    38dc:	0018      	movs	r0, r3
    38de:	46bd      	mov	sp, r7
    38e0:	b006      	add	sp, #24
    38e2:	bd80      	pop	{r7, pc}
    38e4:	0000365d 	.word	0x0000365d
    38e8:	00003635 	.word	0x00003635
    38ec:	40000c04 	.word	0x40000c04
    38f0:	40000c00 	.word	0x40000c00
    38f4:	000032ed 	.word	0x000032ed
    38f8:	40000c08 	.word	0x40000c08
    38fc:	00003649 	.word	0x00003649
    3900:	000047c9 	.word	0x000047c9

00003904 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    3904:	b580      	push	{r7, lr}
    3906:	b084      	sub	sp, #16
    3908:	af00      	add	r7, sp, #0
    390a:	0002      	movs	r2, r0
    390c:	6039      	str	r1, [r7, #0]
    390e:	1dfb      	adds	r3, r7, #7
    3910:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    3912:	1dfb      	adds	r3, r7, #7
    3914:	781b      	ldrb	r3, [r3, #0]
    3916:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3918:	683b      	ldr	r3, [r7, #0]
    391a:	781b      	ldrb	r3, [r3, #0]
    391c:	021b      	lsls	r3, r3, #8
    391e:	001a      	movs	r2, r3
    3920:	68fb      	ldr	r3, [r7, #12]
    3922:	4313      	orrs	r3, r2
    3924:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    3926:	1dfb      	adds	r3, r7, #7
    3928:	781b      	ldrb	r3, [r3, #0]
    392a:	0018      	movs	r0, r3
    392c:	4b04      	ldr	r3, [pc, #16]	; (3940 <system_gclk_chan_set_config+0x3c>)
    392e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3930:	4b04      	ldr	r3, [pc, #16]	; (3944 <system_gclk_chan_set_config+0x40>)
    3932:	68fa      	ldr	r2, [r7, #12]
    3934:	b292      	uxth	r2, r2
    3936:	805a      	strh	r2, [r3, #2]
}
    3938:	46c0      	nop			; (mov r8, r8)
    393a:	46bd      	mov	sp, r7
    393c:	b004      	add	sp, #16
    393e:	bd80      	pop	{r7, pc}
    3940:	00003991 	.word	0x00003991
    3944:	40000c00 	.word	0x40000c00

00003948 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3948:	b580      	push	{r7, lr}
    394a:	b082      	sub	sp, #8
    394c:	af00      	add	r7, sp, #0
    394e:	0002      	movs	r2, r0
    3950:	1dfb      	adds	r3, r7, #7
    3952:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    3954:	4b0a      	ldr	r3, [pc, #40]	; (3980 <system_gclk_chan_enable+0x38>)
    3956:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3958:	4a0a      	ldr	r2, [pc, #40]	; (3984 <system_gclk_chan_enable+0x3c>)
    395a:	1dfb      	adds	r3, r7, #7
    395c:	781b      	ldrb	r3, [r3, #0]
    395e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3960:	4909      	ldr	r1, [pc, #36]	; (3988 <system_gclk_chan_enable+0x40>)
    3962:	4b09      	ldr	r3, [pc, #36]	; (3988 <system_gclk_chan_enable+0x40>)
    3964:	885b      	ldrh	r3, [r3, #2]
    3966:	b29b      	uxth	r3, r3
    3968:	2280      	movs	r2, #128	; 0x80
    396a:	01d2      	lsls	r2, r2, #7
    396c:	4313      	orrs	r3, r2
    396e:	b29b      	uxth	r3, r3
    3970:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    3972:	4b06      	ldr	r3, [pc, #24]	; (398c <system_gclk_chan_enable+0x44>)
    3974:	4798      	blx	r3
}
    3976:	46c0      	nop			; (mov r8, r8)
    3978:	46bd      	mov	sp, r7
    397a:	b002      	add	sp, #8
    397c:	bd80      	pop	{r7, pc}
    397e:	46c0      	nop			; (mov r8, r8)
    3980:	00003635 	.word	0x00003635
    3984:	40000c02 	.word	0x40000c02
    3988:	40000c00 	.word	0x40000c00
    398c:	00003649 	.word	0x00003649

00003990 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3990:	b580      	push	{r7, lr}
    3992:	b084      	sub	sp, #16
    3994:	af00      	add	r7, sp, #0
    3996:	0002      	movs	r2, r0
    3998:	1dfb      	adds	r3, r7, #7
    399a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    399c:	4b1c      	ldr	r3, [pc, #112]	; (3a10 <system_gclk_chan_disable+0x80>)
    399e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    39a0:	4a1c      	ldr	r2, [pc, #112]	; (3a14 <system_gclk_chan_disable+0x84>)
    39a2:	1dfb      	adds	r3, r7, #7
    39a4:	781b      	ldrb	r3, [r3, #0]
    39a6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    39a8:	4b1b      	ldr	r3, [pc, #108]	; (3a18 <system_gclk_chan_disable+0x88>)
    39aa:	885b      	ldrh	r3, [r3, #2]
    39ac:	051b      	lsls	r3, r3, #20
    39ae:	0f1b      	lsrs	r3, r3, #28
    39b0:	b2db      	uxtb	r3, r3
    39b2:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    39b4:	4a18      	ldr	r2, [pc, #96]	; (3a18 <system_gclk_chan_disable+0x88>)
    39b6:	8853      	ldrh	r3, [r2, #2]
    39b8:	4918      	ldr	r1, [pc, #96]	; (3a1c <system_gclk_chan_disable+0x8c>)
    39ba:	400b      	ands	r3, r1
    39bc:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    39be:	4a16      	ldr	r2, [pc, #88]	; (3a18 <system_gclk_chan_disable+0x88>)
    39c0:	4b15      	ldr	r3, [pc, #84]	; (3a18 <system_gclk_chan_disable+0x88>)
    39c2:	885b      	ldrh	r3, [r3, #2]
    39c4:	b29b      	uxth	r3, r3
    39c6:	4916      	ldr	r1, [pc, #88]	; (3a20 <system_gclk_chan_disable+0x90>)
    39c8:	400b      	ands	r3, r1
    39ca:	b29b      	uxth	r3, r3
    39cc:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    39ce:	46c0      	nop			; (mov r8, r8)
    39d0:	4b11      	ldr	r3, [pc, #68]	; (3a18 <system_gclk_chan_disable+0x88>)
    39d2:	885b      	ldrh	r3, [r3, #2]
    39d4:	b29b      	uxth	r3, r3
    39d6:	001a      	movs	r2, r3
    39d8:	2380      	movs	r3, #128	; 0x80
    39da:	01db      	lsls	r3, r3, #7
    39dc:	4013      	ands	r3, r2
    39de:	d1f7      	bne.n	39d0 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    39e0:	4a0d      	ldr	r2, [pc, #52]	; (3a18 <system_gclk_chan_disable+0x88>)
    39e2:	68fb      	ldr	r3, [r7, #12]
    39e4:	b2db      	uxtb	r3, r3
    39e6:	1c19      	adds	r1, r3, #0
    39e8:	230f      	movs	r3, #15
    39ea:	400b      	ands	r3, r1
    39ec:	b2d9      	uxtb	r1, r3
    39ee:	8853      	ldrh	r3, [r2, #2]
    39f0:	1c08      	adds	r0, r1, #0
    39f2:	210f      	movs	r1, #15
    39f4:	4001      	ands	r1, r0
    39f6:	0208      	lsls	r0, r1, #8
    39f8:	4908      	ldr	r1, [pc, #32]	; (3a1c <system_gclk_chan_disable+0x8c>)
    39fa:	400b      	ands	r3, r1
    39fc:	1c19      	adds	r1, r3, #0
    39fe:	1c03      	adds	r3, r0, #0
    3a00:	430b      	orrs	r3, r1
    3a02:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    3a04:	4b07      	ldr	r3, [pc, #28]	; (3a24 <system_gclk_chan_disable+0x94>)
    3a06:	4798      	blx	r3
}
    3a08:	46c0      	nop			; (mov r8, r8)
    3a0a:	46bd      	mov	sp, r7
    3a0c:	b004      	add	sp, #16
    3a0e:	bd80      	pop	{r7, pc}
    3a10:	00003635 	.word	0x00003635
    3a14:	40000c02 	.word	0x40000c02
    3a18:	40000c00 	.word	0x40000c00
    3a1c:	fffff0ff 	.word	0xfffff0ff
    3a20:	ffffbfff 	.word	0xffffbfff
    3a24:	00003649 	.word	0x00003649

00003a28 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3a28:	b580      	push	{r7, lr}
    3a2a:	b084      	sub	sp, #16
    3a2c:	af00      	add	r7, sp, #0
    3a2e:	0002      	movs	r2, r0
    3a30:	1dfb      	adds	r3, r7, #7
    3a32:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    3a34:	4b0d      	ldr	r3, [pc, #52]	; (3a6c <system_gclk_chan_get_hz+0x44>)
    3a36:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3a38:	4a0d      	ldr	r2, [pc, #52]	; (3a70 <system_gclk_chan_get_hz+0x48>)
    3a3a:	1dfb      	adds	r3, r7, #7
    3a3c:	781b      	ldrb	r3, [r3, #0]
    3a3e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3a40:	4b0c      	ldr	r3, [pc, #48]	; (3a74 <system_gclk_chan_get_hz+0x4c>)
    3a42:	885b      	ldrh	r3, [r3, #2]
    3a44:	051b      	lsls	r3, r3, #20
    3a46:	0f1b      	lsrs	r3, r3, #28
    3a48:	b2da      	uxtb	r2, r3
    3a4a:	230f      	movs	r3, #15
    3a4c:	18fb      	adds	r3, r7, r3
    3a4e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    3a50:	4b09      	ldr	r3, [pc, #36]	; (3a78 <system_gclk_chan_get_hz+0x50>)
    3a52:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3a54:	230f      	movs	r3, #15
    3a56:	18fb      	adds	r3, r7, r3
    3a58:	781b      	ldrb	r3, [r3, #0]
    3a5a:	0018      	movs	r0, r3
    3a5c:	4b07      	ldr	r3, [pc, #28]	; (3a7c <system_gclk_chan_get_hz+0x54>)
    3a5e:	4798      	blx	r3
    3a60:	0003      	movs	r3, r0
}
    3a62:	0018      	movs	r0, r3
    3a64:	46bd      	mov	sp, r7
    3a66:	b004      	add	sp, #16
    3a68:	bd80      	pop	{r7, pc}
    3a6a:	46c0      	nop			; (mov r8, r8)
    3a6c:	00003635 	.word	0x00003635
    3a70:	40000c02 	.word	0x40000c02
    3a74:	40000c00 	.word	0x40000c00
    3a78:	00003649 	.word	0x00003649
    3a7c:	0000382d 	.word	0x0000382d

00003a80 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3a80:	b580      	push	{r7, lr}
    3a82:	b084      	sub	sp, #16
    3a84:	af00      	add	r7, sp, #0
    3a86:	0002      	movs	r2, r0
    3a88:	1dfb      	adds	r3, r7, #7
    3a8a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3a8c:	230f      	movs	r3, #15
    3a8e:	18fb      	adds	r3, r7, r3
    3a90:	1dfa      	adds	r2, r7, #7
    3a92:	7812      	ldrb	r2, [r2, #0]
    3a94:	09d2      	lsrs	r2, r2, #7
    3a96:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3a98:	230e      	movs	r3, #14
    3a9a:	18fb      	adds	r3, r7, r3
    3a9c:	1dfa      	adds	r2, r7, #7
    3a9e:	7812      	ldrb	r2, [r2, #0]
    3aa0:	0952      	lsrs	r2, r2, #5
    3aa2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3aa4:	4b0d      	ldr	r3, [pc, #52]	; (3adc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3aa6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3aa8:	230f      	movs	r3, #15
    3aaa:	18fb      	adds	r3, r7, r3
    3aac:	781b      	ldrb	r3, [r3, #0]
    3aae:	2b00      	cmp	r3, #0
    3ab0:	d10f      	bne.n	3ad2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3ab2:	230f      	movs	r3, #15
    3ab4:	18fb      	adds	r3, r7, r3
    3ab6:	781b      	ldrb	r3, [r3, #0]
    3ab8:	009b      	lsls	r3, r3, #2
    3aba:	2210      	movs	r2, #16
    3abc:	4694      	mov	ip, r2
    3abe:	44bc      	add	ip, r7
    3ac0:	4463      	add	r3, ip
    3ac2:	3b08      	subs	r3, #8
    3ac4:	681a      	ldr	r2, [r3, #0]
    3ac6:	230e      	movs	r3, #14
    3ac8:	18fb      	adds	r3, r7, r3
    3aca:	781b      	ldrb	r3, [r3, #0]
    3acc:	01db      	lsls	r3, r3, #7
    3ace:	18d3      	adds	r3, r2, r3
    3ad0:	e000      	b.n	3ad4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3ad2:	2300      	movs	r3, #0
	}
}
    3ad4:	0018      	movs	r0, r3
    3ad6:	46bd      	mov	sp, r7
    3ad8:	b004      	add	sp, #16
    3ada:	bd80      	pop	{r7, pc}
    3adc:	41004400 	.word	0x41004400

00003ae0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3ae0:	b580      	push	{r7, lr}
    3ae2:	b088      	sub	sp, #32
    3ae4:	af00      	add	r7, sp, #0
    3ae6:	60f8      	str	r0, [r7, #12]
    3ae8:	60b9      	str	r1, [r7, #8]
    3aea:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    3aec:	2300      	movs	r3, #0
    3aee:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3af0:	687b      	ldr	r3, [r7, #4]
    3af2:	78db      	ldrb	r3, [r3, #3]
    3af4:	2201      	movs	r2, #1
    3af6:	4053      	eors	r3, r2
    3af8:	b2db      	uxtb	r3, r3
    3afa:	2b00      	cmp	r3, #0
    3afc:	d035      	beq.n	3b6a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3afe:	687b      	ldr	r3, [r7, #4]
    3b00:	781b      	ldrb	r3, [r3, #0]
    3b02:	2b80      	cmp	r3, #128	; 0x80
    3b04:	d00b      	beq.n	3b1e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    3b06:	69fb      	ldr	r3, [r7, #28]
    3b08:	2280      	movs	r2, #128	; 0x80
    3b0a:	0252      	lsls	r2, r2, #9
    3b0c:	4313      	orrs	r3, r2
    3b0e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3b10:	687b      	ldr	r3, [r7, #4]
    3b12:	781b      	ldrb	r3, [r3, #0]
    3b14:	061b      	lsls	r3, r3, #24
    3b16:	001a      	movs	r2, r3
    3b18:	69fb      	ldr	r3, [r7, #28]
    3b1a:	4313      	orrs	r3, r2
    3b1c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3b1e:	687b      	ldr	r3, [r7, #4]
    3b20:	785b      	ldrb	r3, [r3, #1]
    3b22:	2b00      	cmp	r3, #0
    3b24:	d003      	beq.n	3b2e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3b26:	687b      	ldr	r3, [r7, #4]
    3b28:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3b2a:	2b02      	cmp	r3, #2
    3b2c:	d110      	bne.n	3b50 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    3b2e:	69fb      	ldr	r3, [r7, #28]
    3b30:	2280      	movs	r2, #128	; 0x80
    3b32:	0292      	lsls	r2, r2, #10
    3b34:	4313      	orrs	r3, r2
    3b36:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3b38:	687b      	ldr	r3, [r7, #4]
    3b3a:	789b      	ldrb	r3, [r3, #2]
    3b3c:	2b00      	cmp	r3, #0
    3b3e:	d004      	beq.n	3b4a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3b40:	69fb      	ldr	r3, [r7, #28]
    3b42:	2280      	movs	r2, #128	; 0x80
    3b44:	02d2      	lsls	r2, r2, #11
    3b46:	4313      	orrs	r3, r2
    3b48:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    3b4a:	68fb      	ldr	r3, [r7, #12]
    3b4c:	68ba      	ldr	r2, [r7, #8]
    3b4e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3b50:	687b      	ldr	r3, [r7, #4]
    3b52:	785b      	ldrb	r3, [r3, #1]
    3b54:	2b01      	cmp	r3, #1
    3b56:	d003      	beq.n	3b60 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3b58:	687b      	ldr	r3, [r7, #4]
    3b5a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3b5c:	2b02      	cmp	r3, #2
    3b5e:	d107      	bne.n	3b70 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3b60:	69fb      	ldr	r3, [r7, #28]
    3b62:	4a22      	ldr	r2, [pc, #136]	; (3bec <_system_pinmux_config+0x10c>)
    3b64:	4013      	ands	r3, r2
    3b66:	61fb      	str	r3, [r7, #28]
    3b68:	e002      	b.n	3b70 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    3b6a:	68fb      	ldr	r3, [r7, #12]
    3b6c:	68ba      	ldr	r2, [r7, #8]
    3b6e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3b70:	68bb      	ldr	r3, [r7, #8]
    3b72:	041b      	lsls	r3, r3, #16
    3b74:	0c1b      	lsrs	r3, r3, #16
    3b76:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3b78:	68bb      	ldr	r3, [r7, #8]
    3b7a:	0c1b      	lsrs	r3, r3, #16
    3b7c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3b7e:	69ba      	ldr	r2, [r7, #24]
    3b80:	69fb      	ldr	r3, [r7, #28]
    3b82:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3b84:	22a0      	movs	r2, #160	; 0xa0
    3b86:	05d2      	lsls	r2, r2, #23
    3b88:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3b8a:	68fb      	ldr	r3, [r7, #12]
    3b8c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3b8e:	697a      	ldr	r2, [r7, #20]
    3b90:	69fb      	ldr	r3, [r7, #28]
    3b92:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3b94:	22d0      	movs	r2, #208	; 0xd0
    3b96:	0612      	lsls	r2, r2, #24
    3b98:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3b9a:	68fb      	ldr	r3, [r7, #12]
    3b9c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3b9e:	687b      	ldr	r3, [r7, #4]
    3ba0:	78db      	ldrb	r3, [r3, #3]
    3ba2:	2201      	movs	r2, #1
    3ba4:	4053      	eors	r3, r2
    3ba6:	b2db      	uxtb	r3, r3
    3ba8:	2b00      	cmp	r3, #0
    3baa:	d01a      	beq.n	3be2 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3bac:	69fa      	ldr	r2, [r7, #28]
    3bae:	2380      	movs	r3, #128	; 0x80
    3bb0:	02db      	lsls	r3, r3, #11
    3bb2:	4013      	ands	r3, r2
    3bb4:	d00a      	beq.n	3bcc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3bb6:	687b      	ldr	r3, [r7, #4]
    3bb8:	789b      	ldrb	r3, [r3, #2]
    3bba:	2b01      	cmp	r3, #1
    3bbc:	d103      	bne.n	3bc6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    3bbe:	68fb      	ldr	r3, [r7, #12]
    3bc0:	68ba      	ldr	r2, [r7, #8]
    3bc2:	619a      	str	r2, [r3, #24]
    3bc4:	e002      	b.n	3bcc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    3bc6:	68fb      	ldr	r3, [r7, #12]
    3bc8:	68ba      	ldr	r2, [r7, #8]
    3bca:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3bcc:	687b      	ldr	r3, [r7, #4]
    3bce:	785b      	ldrb	r3, [r3, #1]
    3bd0:	2b01      	cmp	r3, #1
    3bd2:	d003      	beq.n	3bdc <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3bd4:	687b      	ldr	r3, [r7, #4]
    3bd6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3bd8:	2b02      	cmp	r3, #2
    3bda:	d102      	bne.n	3be2 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    3bdc:	68fb      	ldr	r3, [r7, #12]
    3bde:	68ba      	ldr	r2, [r7, #8]
    3be0:	609a      	str	r2, [r3, #8]
		}
	}
}
    3be2:	46c0      	nop			; (mov r8, r8)
    3be4:	46bd      	mov	sp, r7
    3be6:	b008      	add	sp, #32
    3be8:	bd80      	pop	{r7, pc}
    3bea:	46c0      	nop			; (mov r8, r8)
    3bec:	fffbffff 	.word	0xfffbffff

00003bf0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3bf0:	b580      	push	{r7, lr}
    3bf2:	b084      	sub	sp, #16
    3bf4:	af00      	add	r7, sp, #0
    3bf6:	0002      	movs	r2, r0
    3bf8:	6039      	str	r1, [r7, #0]
    3bfa:	1dfb      	adds	r3, r7, #7
    3bfc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3bfe:	1dfb      	adds	r3, r7, #7
    3c00:	781b      	ldrb	r3, [r3, #0]
    3c02:	0018      	movs	r0, r3
    3c04:	4b0a      	ldr	r3, [pc, #40]	; (3c30 <system_pinmux_pin_set_config+0x40>)
    3c06:	4798      	blx	r3
    3c08:	0003      	movs	r3, r0
    3c0a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3c0c:	1dfb      	adds	r3, r7, #7
    3c0e:	781b      	ldrb	r3, [r3, #0]
    3c10:	221f      	movs	r2, #31
    3c12:	4013      	ands	r3, r2
    3c14:	2201      	movs	r2, #1
    3c16:	409a      	lsls	r2, r3
    3c18:	0013      	movs	r3, r2
    3c1a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    3c1c:	683a      	ldr	r2, [r7, #0]
    3c1e:	68b9      	ldr	r1, [r7, #8]
    3c20:	68fb      	ldr	r3, [r7, #12]
    3c22:	0018      	movs	r0, r3
    3c24:	4b03      	ldr	r3, [pc, #12]	; (3c34 <system_pinmux_pin_set_config+0x44>)
    3c26:	4798      	blx	r3
}
    3c28:	46c0      	nop			; (mov r8, r8)
    3c2a:	46bd      	mov	sp, r7
    3c2c:	b004      	add	sp, #16
    3c2e:	bd80      	pop	{r7, pc}
    3c30:	00003a81 	.word	0x00003a81
    3c34:	00003ae1 	.word	0x00003ae1

00003c38 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    3c38:	b580      	push	{r7, lr}
    3c3a:	af00      	add	r7, sp, #0
	return;
    3c3c:	46c0      	nop			; (mov r8, r8)
}
    3c3e:	46bd      	mov	sp, r7
    3c40:	bd80      	pop	{r7, pc}
	...

00003c44 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3c44:	b580      	push	{r7, lr}
    3c46:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3c48:	4b06      	ldr	r3, [pc, #24]	; (3c64 <system_init+0x20>)
    3c4a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3c4c:	4b06      	ldr	r3, [pc, #24]	; (3c68 <system_init+0x24>)
    3c4e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3c50:	4b06      	ldr	r3, [pc, #24]	; (3c6c <system_init+0x28>)
    3c52:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3c54:	4b06      	ldr	r3, [pc, #24]	; (3c70 <system_init+0x2c>)
    3c56:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3c58:	4b06      	ldr	r3, [pc, #24]	; (3c74 <system_init+0x30>)
    3c5a:	4798      	blx	r3
}
    3c5c:	46c0      	nop			; (mov r8, r8)
    3c5e:	46bd      	mov	sp, r7
    3c60:	bd80      	pop	{r7, pc}
    3c62:	46c0      	nop			; (mov r8, r8)
    3c64:	00003505 	.word	0x00003505
    3c68:	00000115 	.word	0x00000115
    3c6c:	00003c39 	.word	0x00003c39
    3c70:	00003c39 	.word	0x00003c39
    3c74:	00003c39 	.word	0x00003c39

00003c78 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3c78:	b580      	push	{r7, lr}
    3c7a:	b086      	sub	sp, #24
    3c7c:	af00      	add	r7, sp, #0
    3c7e:	60f8      	str	r0, [r7, #12]
    3c80:	60b9      	str	r1, [r7, #8]
    3c82:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    3c84:	2300      	movs	r3, #0
    3c86:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    3c88:	68fb      	ldr	r3, [r7, #12]
    3c8a:	2b00      	cmp	r3, #0
    3c8c:	d012      	beq.n	3cb4 <_read+0x3c>
		return -1;
    3c8e:	2301      	movs	r3, #1
    3c90:	425b      	negs	r3, r3
    3c92:	e013      	b.n	3cbc <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    3c94:	4b0b      	ldr	r3, [pc, #44]	; (3cc4 <_read+0x4c>)
    3c96:	681a      	ldr	r2, [r3, #0]
    3c98:	4b0b      	ldr	r3, [pc, #44]	; (3cc8 <_read+0x50>)
    3c9a:	681b      	ldr	r3, [r3, #0]
    3c9c:	68b9      	ldr	r1, [r7, #8]
    3c9e:	0018      	movs	r0, r3
    3ca0:	4790      	blx	r2
		ptr++;
    3ca2:	68bb      	ldr	r3, [r7, #8]
    3ca4:	3301      	adds	r3, #1
    3ca6:	60bb      	str	r3, [r7, #8]
		nChars++;
    3ca8:	697b      	ldr	r3, [r7, #20]
    3caa:	3301      	adds	r3, #1
    3cac:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    3cae:	687b      	ldr	r3, [r7, #4]
    3cb0:	3b01      	subs	r3, #1
    3cb2:	607b      	str	r3, [r7, #4]
    3cb4:	687b      	ldr	r3, [r7, #4]
    3cb6:	2b00      	cmp	r3, #0
    3cb8:	dcec      	bgt.n	3c94 <_read+0x1c>
	}
	return nChars;
    3cba:	697b      	ldr	r3, [r7, #20]
}
    3cbc:	0018      	movs	r0, r3
    3cbe:	46bd      	mov	sp, r7
    3cc0:	b006      	add	sp, #24
    3cc2:	bd80      	pop	{r7, pc}
    3cc4:	20000138 	.word	0x20000138
    3cc8:	20000140 	.word	0x20000140

00003ccc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3ccc:	b580      	push	{r7, lr}
    3cce:	b086      	sub	sp, #24
    3cd0:	af00      	add	r7, sp, #0
    3cd2:	60f8      	str	r0, [r7, #12]
    3cd4:	60b9      	str	r1, [r7, #8]
    3cd6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    3cd8:	2300      	movs	r3, #0
    3cda:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    3cdc:	68fb      	ldr	r3, [r7, #12]
    3cde:	2b01      	cmp	r3, #1
    3ce0:	d01d      	beq.n	3d1e <_write+0x52>
    3ce2:	68fb      	ldr	r3, [r7, #12]
    3ce4:	2b02      	cmp	r3, #2
    3ce6:	d01a      	beq.n	3d1e <_write+0x52>
    3ce8:	68fb      	ldr	r3, [r7, #12]
    3cea:	2b03      	cmp	r3, #3
    3cec:	d017      	beq.n	3d1e <_write+0x52>
		return -1;
    3cee:	2301      	movs	r3, #1
    3cf0:	425b      	negs	r3, r3
    3cf2:	e018      	b.n	3d26 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3cf4:	4b0e      	ldr	r3, [pc, #56]	; (3d30 <_write+0x64>)
    3cf6:	681a      	ldr	r2, [r3, #0]
    3cf8:	4b0e      	ldr	r3, [pc, #56]	; (3d34 <_write+0x68>)
    3cfa:	6818      	ldr	r0, [r3, #0]
    3cfc:	68bb      	ldr	r3, [r7, #8]
    3cfe:	1c59      	adds	r1, r3, #1
    3d00:	60b9      	str	r1, [r7, #8]
    3d02:	781b      	ldrb	r3, [r3, #0]
    3d04:	0019      	movs	r1, r3
    3d06:	4790      	blx	r2
    3d08:	1e03      	subs	r3, r0, #0
    3d0a:	da02      	bge.n	3d12 <_write+0x46>
			return -1;
    3d0c:	2301      	movs	r3, #1
    3d0e:	425b      	negs	r3, r3
    3d10:	e009      	b.n	3d26 <_write+0x5a>
		}
		++nChars;
    3d12:	697b      	ldr	r3, [r7, #20]
    3d14:	3301      	adds	r3, #1
    3d16:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    3d18:	687b      	ldr	r3, [r7, #4]
    3d1a:	3b01      	subs	r3, #1
    3d1c:	607b      	str	r3, [r7, #4]
    3d1e:	687b      	ldr	r3, [r7, #4]
    3d20:	2b00      	cmp	r3, #0
    3d22:	d1e7      	bne.n	3cf4 <_write+0x28>
	}
	return nChars;
    3d24:	697b      	ldr	r3, [r7, #20]
}
    3d26:	0018      	movs	r0, r3
    3d28:	46bd      	mov	sp, r7
    3d2a:	b006      	add	sp, #24
    3d2c:	bd80      	pop	{r7, pc}
    3d2e:	46c0      	nop			; (mov r8, r8)
    3d30:	2000013c 	.word	0x2000013c
    3d34:	20000140 	.word	0x20000140

00003d38 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    3d38:	b580      	push	{r7, lr}
    3d3a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
    3d3c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    3d40:	4b02      	ldr	r3, [pc, #8]	; (3d4c <NVIC_SystemReset+0x14>)
    3d42:	4a03      	ldr	r2, [pc, #12]	; (3d50 <NVIC_SystemReset+0x18>)
    3d44:	60da      	str	r2, [r3, #12]
    3d46:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    3d4a:	e7fe      	b.n	3d4a <NVIC_SystemReset+0x12>
    3d4c:	e000ed00 	.word	0xe000ed00
    3d50:	05fa0004 	.word	0x05fa0004

00003d54 <system_pinmux_get_group_from_gpio_pin>:
{
    3d54:	b580      	push	{r7, lr}
    3d56:	b084      	sub	sp, #16
    3d58:	af00      	add	r7, sp, #0
    3d5a:	0002      	movs	r2, r0
    3d5c:	1dfb      	adds	r3, r7, #7
    3d5e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3d60:	230f      	movs	r3, #15
    3d62:	18fb      	adds	r3, r7, r3
    3d64:	1dfa      	adds	r2, r7, #7
    3d66:	7812      	ldrb	r2, [r2, #0]
    3d68:	09d2      	lsrs	r2, r2, #7
    3d6a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3d6c:	230e      	movs	r3, #14
    3d6e:	18fb      	adds	r3, r7, r3
    3d70:	1dfa      	adds	r2, r7, #7
    3d72:	7812      	ldrb	r2, [r2, #0]
    3d74:	0952      	lsrs	r2, r2, #5
    3d76:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3d78:	4b0d      	ldr	r3, [pc, #52]	; (3db0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3d7a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3d7c:	230f      	movs	r3, #15
    3d7e:	18fb      	adds	r3, r7, r3
    3d80:	781b      	ldrb	r3, [r3, #0]
    3d82:	2b00      	cmp	r3, #0
    3d84:	d10f      	bne.n	3da6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3d86:	230f      	movs	r3, #15
    3d88:	18fb      	adds	r3, r7, r3
    3d8a:	781b      	ldrb	r3, [r3, #0]
    3d8c:	009b      	lsls	r3, r3, #2
    3d8e:	2210      	movs	r2, #16
    3d90:	4694      	mov	ip, r2
    3d92:	44bc      	add	ip, r7
    3d94:	4463      	add	r3, ip
    3d96:	3b08      	subs	r3, #8
    3d98:	681a      	ldr	r2, [r3, #0]
    3d9a:	230e      	movs	r3, #14
    3d9c:	18fb      	adds	r3, r7, r3
    3d9e:	781b      	ldrb	r3, [r3, #0]
    3da0:	01db      	lsls	r3, r3, #7
    3da2:	18d3      	adds	r3, r2, r3
    3da4:	e000      	b.n	3da8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3da6:	2300      	movs	r3, #0
}
    3da8:	0018      	movs	r0, r3
    3daa:	46bd      	mov	sp, r7
    3dac:	b004      	add	sp, #16
    3dae:	bd80      	pop	{r7, pc}
    3db0:	41004400 	.word	0x41004400

00003db4 <port_get_group_from_gpio_pin>:
{
    3db4:	b580      	push	{r7, lr}
    3db6:	b082      	sub	sp, #8
    3db8:	af00      	add	r7, sp, #0
    3dba:	0002      	movs	r2, r0
    3dbc:	1dfb      	adds	r3, r7, #7
    3dbe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3dc0:	1dfb      	adds	r3, r7, #7
    3dc2:	781b      	ldrb	r3, [r3, #0]
    3dc4:	0018      	movs	r0, r3
    3dc6:	4b03      	ldr	r3, [pc, #12]	; (3dd4 <port_get_group_from_gpio_pin+0x20>)
    3dc8:	4798      	blx	r3
    3dca:	0003      	movs	r3, r0
}
    3dcc:	0018      	movs	r0, r3
    3dce:	46bd      	mov	sp, r7
    3dd0:	b002      	add	sp, #8
    3dd2:	bd80      	pop	{r7, pc}
    3dd4:	00003d55 	.word	0x00003d55

00003dd8 <port_get_config_defaults>:
{
    3dd8:	b580      	push	{r7, lr}
    3dda:	b082      	sub	sp, #8
    3ddc:	af00      	add	r7, sp, #0
    3dde:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    3de0:	687b      	ldr	r3, [r7, #4]
    3de2:	2200      	movs	r2, #0
    3de4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3de6:	687b      	ldr	r3, [r7, #4]
    3de8:	2201      	movs	r2, #1
    3dea:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3dec:	687b      	ldr	r3, [r7, #4]
    3dee:	2200      	movs	r2, #0
    3df0:	709a      	strb	r2, [r3, #2]
}
    3df2:	46c0      	nop			; (mov r8, r8)
    3df4:	46bd      	mov	sp, r7
    3df6:	b002      	add	sp, #8
    3df8:	bd80      	pop	{r7, pc}
	...

00003dfc <port_pin_set_output_level>:
{
    3dfc:	b580      	push	{r7, lr}
    3dfe:	b084      	sub	sp, #16
    3e00:	af00      	add	r7, sp, #0
    3e02:	0002      	movs	r2, r0
    3e04:	1dfb      	adds	r3, r7, #7
    3e06:	701a      	strb	r2, [r3, #0]
    3e08:	1dbb      	adds	r3, r7, #6
    3e0a:	1c0a      	adds	r2, r1, #0
    3e0c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3e0e:	1dfb      	adds	r3, r7, #7
    3e10:	781b      	ldrb	r3, [r3, #0]
    3e12:	0018      	movs	r0, r3
    3e14:	4b0d      	ldr	r3, [pc, #52]	; (3e4c <port_pin_set_output_level+0x50>)
    3e16:	4798      	blx	r3
    3e18:	0003      	movs	r3, r0
    3e1a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3e1c:	1dfb      	adds	r3, r7, #7
    3e1e:	781b      	ldrb	r3, [r3, #0]
    3e20:	221f      	movs	r2, #31
    3e22:	4013      	ands	r3, r2
    3e24:	2201      	movs	r2, #1
    3e26:	409a      	lsls	r2, r3
    3e28:	0013      	movs	r3, r2
    3e2a:	60bb      	str	r3, [r7, #8]
	if (level) {
    3e2c:	1dbb      	adds	r3, r7, #6
    3e2e:	781b      	ldrb	r3, [r3, #0]
    3e30:	2b00      	cmp	r3, #0
    3e32:	d003      	beq.n	3e3c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3e34:	68fb      	ldr	r3, [r7, #12]
    3e36:	68ba      	ldr	r2, [r7, #8]
    3e38:	619a      	str	r2, [r3, #24]
}
    3e3a:	e002      	b.n	3e42 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3e3c:	68fb      	ldr	r3, [r7, #12]
    3e3e:	68ba      	ldr	r2, [r7, #8]
    3e40:	615a      	str	r2, [r3, #20]
}
    3e42:	46c0      	nop			; (mov r8, r8)
    3e44:	46bd      	mov	sp, r7
    3e46:	b004      	add	sp, #16
    3e48:	bd80      	pop	{r7, pc}
    3e4a:	46c0      	nop			; (mov r8, r8)
    3e4c:	00003db5 	.word	0x00003db5

00003e50 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    3e50:	b580      	push	{r7, lr}
    3e52:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    3e54:	4b02      	ldr	r3, [pc, #8]	; (3e60 <system_reset+0x10>)
    3e56:	4798      	blx	r3
}
    3e58:	46c0      	nop			; (mov r8, r8)
    3e5a:	46bd      	mov	sp, r7
    3e5c:	bd80      	pop	{r7, pc}
    3e5e:	46c0      	nop			; (mov r8, r8)
    3e60:	00003d39 	.word	0x00003d39

00003e64 <system_get_reset_cause>:
 * Retrieves the cause of the last system reset.
 *
 * \return An enum value indicating the cause of the last system reset.
 */
static inline enum system_reset_cause system_get_reset_cause(void)
{
    3e64:	b580      	push	{r7, lr}
    3e66:	af00      	add	r7, sp, #0
	return (enum system_reset_cause)PM->RCAUSE.reg;
    3e68:	4a03      	ldr	r2, [pc, #12]	; (3e78 <system_get_reset_cause+0x14>)
    3e6a:	2338      	movs	r3, #56	; 0x38
    3e6c:	5cd3      	ldrb	r3, [r2, r3]
    3e6e:	b2db      	uxtb	r3, r3
}
    3e70:	0018      	movs	r0, r3
    3e72:	46bd      	mov	sp, r7
    3e74:	bd80      	pop	{r7, pc}
    3e76:	46c0      	nop			; (mov r8, r8)
    3e78:	40000400 	.word	0x40000400

00003e7c <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    3e7c:	b580      	push	{r7, lr}
    3e7e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    3e80:	4b04      	ldr	r3, [pc, #16]	; (3e94 <system_interrupt_enable_global+0x18>)
    3e82:	2201      	movs	r2, #1
    3e84:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
    3e86:	f3bf 8f5f 	dmb	sy
    3e8a:	b662      	cpsie	i
}
    3e8c:	46c0      	nop			; (mov r8, r8)
    3e8e:	46bd      	mov	sp, r7
    3e90:	bd80      	pop	{r7, pc}
    3e92:	46c0      	nop			; (mov r8, r8)
    3e94:	20000000 	.word	0x20000000

00003e98 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    3e98:	b580      	push	{r7, lr}
    3e9a:	b082      	sub	sp, #8
    3e9c:	af00      	add	r7, sp, #0
    3e9e:	0002      	movs	r2, r0
    3ea0:	1dfb      	adds	r3, r7, #7
    3ea2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3ea4:	4b06      	ldr	r3, [pc, #24]	; (3ec0 <system_interrupt_enable+0x28>)
    3ea6:	1dfa      	adds	r2, r7, #7
    3ea8:	7812      	ldrb	r2, [r2, #0]
    3eaa:	0011      	movs	r1, r2
    3eac:	221f      	movs	r2, #31
    3eae:	400a      	ands	r2, r1
    3eb0:	2101      	movs	r1, #1
    3eb2:	4091      	lsls	r1, r2
    3eb4:	000a      	movs	r2, r1
    3eb6:	601a      	str	r2, [r3, #0]
}
    3eb8:	46c0      	nop			; (mov r8, r8)
    3eba:	46bd      	mov	sp, r7
    3ebc:	b002      	add	sp, #8
    3ebe:	bd80      	pop	{r7, pc}
    3ec0:	e000e100 	.word	0xe000e100

00003ec4 <spi_is_syncing>:
{
    3ec4:	b580      	push	{r7, lr}
    3ec6:	b084      	sub	sp, #16
    3ec8:	af00      	add	r7, sp, #0
    3eca:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3ecc:	687b      	ldr	r3, [r7, #4]
    3ece:	681b      	ldr	r3, [r3, #0]
    3ed0:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    3ed2:	68fb      	ldr	r3, [r7, #12]
    3ed4:	69db      	ldr	r3, [r3, #28]
    3ed6:	1e5a      	subs	r2, r3, #1
    3ed8:	4193      	sbcs	r3, r2
    3eda:	b2db      	uxtb	r3, r3
}
    3edc:	0018      	movs	r0, r3
    3ede:	46bd      	mov	sp, r7
    3ee0:	b004      	add	sp, #16
    3ee2:	bd80      	pop	{r7, pc}

00003ee4 <spi_get_config_defaults>:
{
    3ee4:	b580      	push	{r7, lr}
    3ee6:	b082      	sub	sp, #8
    3ee8:	af00      	add	r7, sp, #0
    3eea:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    3eec:	687b      	ldr	r3, [r7, #4]
    3eee:	2201      	movs	r2, #1
    3ef0:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3ef2:	687b      	ldr	r3, [r7, #4]
    3ef4:	2200      	movs	r2, #0
    3ef6:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3ef8:	687b      	ldr	r3, [r7, #4]
    3efa:	2200      	movs	r2, #0
    3efc:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    3efe:	687b      	ldr	r3, [r7, #4]
    3f00:	22c0      	movs	r2, #192	; 0xc0
    3f02:	0392      	lsls	r2, r2, #14
    3f04:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3f06:	687b      	ldr	r3, [r7, #4]
    3f08:	2200      	movs	r2, #0
    3f0a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    3f0c:	687b      	ldr	r3, [r7, #4]
    3f0e:	2200      	movs	r2, #0
    3f10:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    3f12:	687b      	ldr	r3, [r7, #4]
    3f14:	2201      	movs	r2, #1
    3f16:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    3f18:	687b      	ldr	r3, [r7, #4]
    3f1a:	2201      	movs	r2, #1
    3f1c:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    3f1e:	687b      	ldr	r3, [r7, #4]
    3f20:	2200      	movs	r2, #0
    3f22:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    3f24:	687b      	ldr	r3, [r7, #4]
    3f26:	2224      	movs	r2, #36	; 0x24
    3f28:	2100      	movs	r1, #0
    3f2a:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3f2c:	687b      	ldr	r3, [r7, #4]
    3f2e:	3318      	adds	r3, #24
    3f30:	220c      	movs	r2, #12
    3f32:	2100      	movs	r1, #0
    3f34:	0018      	movs	r0, r3
    3f36:	4b0a      	ldr	r3, [pc, #40]	; (3f60 <spi_get_config_defaults+0x7c>)
    3f38:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    3f3a:	687b      	ldr	r3, [r7, #4]
    3f3c:	4a09      	ldr	r2, [pc, #36]	; (3f64 <spi_get_config_defaults+0x80>)
    3f3e:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    3f40:	687b      	ldr	r3, [r7, #4]
    3f42:	2200      	movs	r2, #0
    3f44:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    3f46:	687b      	ldr	r3, [r7, #4]
    3f48:	2200      	movs	r2, #0
    3f4a:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    3f4c:	687b      	ldr	r3, [r7, #4]
    3f4e:	2200      	movs	r2, #0
    3f50:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    3f52:	687b      	ldr	r3, [r7, #4]
    3f54:	2200      	movs	r2, #0
    3f56:	635a      	str	r2, [r3, #52]	; 0x34
};
    3f58:	46c0      	nop			; (mov r8, r8)
    3f5a:	46bd      	mov	sp, r7
    3f5c:	b002      	add	sp, #8
    3f5e:	bd80      	pop	{r7, pc}
    3f60:	0000498f 	.word	0x0000498f
    3f64:	000186a0 	.word	0x000186a0

00003f68 <spi_enable>:
{
    3f68:	b580      	push	{r7, lr}
    3f6a:	b084      	sub	sp, #16
    3f6c:	af00      	add	r7, sp, #0
    3f6e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3f70:	687b      	ldr	r3, [r7, #4]
    3f72:	681b      	ldr	r3, [r3, #0]
    3f74:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3f76:	687b      	ldr	r3, [r7, #4]
    3f78:	681b      	ldr	r3, [r3, #0]
    3f7a:	0018      	movs	r0, r3
    3f7c:	4b0b      	ldr	r3, [pc, #44]	; (3fac <spi_enable+0x44>)
    3f7e:	4798      	blx	r3
    3f80:	0003      	movs	r3, r0
    3f82:	0018      	movs	r0, r3
    3f84:	4b0a      	ldr	r3, [pc, #40]	; (3fb0 <spi_enable+0x48>)
    3f86:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    3f88:	46c0      	nop			; (mov r8, r8)
    3f8a:	687b      	ldr	r3, [r7, #4]
    3f8c:	0018      	movs	r0, r3
    3f8e:	4b09      	ldr	r3, [pc, #36]	; (3fb4 <spi_enable+0x4c>)
    3f90:	4798      	blx	r3
    3f92:	1e03      	subs	r3, r0, #0
    3f94:	d1f9      	bne.n	3f8a <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3f96:	68fb      	ldr	r3, [r7, #12]
    3f98:	681b      	ldr	r3, [r3, #0]
    3f9a:	2202      	movs	r2, #2
    3f9c:	431a      	orrs	r2, r3
    3f9e:	68fb      	ldr	r3, [r7, #12]
    3fa0:	601a      	str	r2, [r3, #0]
}
    3fa2:	46c0      	nop			; (mov r8, r8)
    3fa4:	46bd      	mov	sp, r7
    3fa6:	b004      	add	sp, #16
    3fa8:	bd80      	pop	{r7, pc}
    3faa:	46c0      	nop			; (mov r8, r8)
    3fac:	00002595 	.word	0x00002595
    3fb0:	00003e99 	.word	0x00003e99
    3fb4:	00003ec5 	.word	0x00003ec5

00003fb8 <at25dfx_chip_init>:
 */
static inline enum status_code at25dfx_chip_init(
		struct at25dfx_chip_module *const module,
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
    3fb8:	b580      	push	{r7, lr}
    3fba:	b086      	sub	sp, #24
    3fbc:	af00      	add	r7, sp, #0
    3fbe:	60f8      	str	r0, [r7, #12]
    3fc0:	60b9      	str	r1, [r7, #8]
    3fc2:	607a      	str	r2, [r7, #4]
	struct port_config port_config;

	module->type = config->type;
    3fc4:	687b      	ldr	r3, [r7, #4]
    3fc6:	781a      	ldrb	r2, [r3, #0]
    3fc8:	68fb      	ldr	r3, [r7, #12]
    3fca:	711a      	strb	r2, [r3, #4]
	module->cs_pin = config->cs_pin;
    3fcc:	687b      	ldr	r3, [r7, #4]
    3fce:	785a      	ldrb	r2, [r3, #1]
    3fd0:	68fb      	ldr	r3, [r7, #12]
    3fd2:	715a      	strb	r2, [r3, #5]
	module->spi = spi_module;
    3fd4:	68fb      	ldr	r3, [r7, #12]
    3fd6:	68ba      	ldr	r2, [r7, #8]
    3fd8:	601a      	str	r2, [r3, #0]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
    3fda:	2314      	movs	r3, #20
    3fdc:	18fb      	adds	r3, r7, r3
    3fde:	0018      	movs	r0, r3
    3fe0:	4b0c      	ldr	r3, [pc, #48]	; (4014 <at25dfx_chip_init+0x5c>)
    3fe2:	4798      	blx	r3
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    3fe4:	2314      	movs	r3, #20
    3fe6:	18fb      	adds	r3, r7, r3
    3fe8:	2201      	movs	r2, #1
    3fea:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    3fec:	68fb      	ldr	r3, [r7, #12]
    3fee:	795b      	ldrb	r3, [r3, #5]
    3ff0:	2214      	movs	r2, #20
    3ff2:	18ba      	adds	r2, r7, r2
    3ff4:	0011      	movs	r1, r2
    3ff6:	0018      	movs	r0, r3
    3ff8:	4b07      	ldr	r3, [pc, #28]	; (4018 <at25dfx_chip_init+0x60>)
    3ffa:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    3ffc:	68fb      	ldr	r3, [r7, #12]
    3ffe:	795b      	ldrb	r3, [r3, #5]
    4000:	2101      	movs	r1, #1
    4002:	0018      	movs	r0, r3
    4004:	4b05      	ldr	r3, [pc, #20]	; (401c <at25dfx_chip_init+0x64>)
    4006:	4798      	blx	r3

	return STATUS_OK;
    4008:	2300      	movs	r3, #0
}
    400a:	0018      	movs	r0, r3
    400c:	46bd      	mov	sp, r7
    400e:	b006      	add	sp, #24
    4010:	bd80      	pop	{r7, pc}
    4012:	46c0      	nop			; (mov r8, r8)
    4014:	00003dd9 	.word	0x00003dd9
    4018:	00001ee9 	.word	0x00001ee9
    401c:	00003dfd 	.word	0x00003dfd

00004020 <nvm_get_config_defaults>:
{
    4020:	b580      	push	{r7, lr}
    4022:	b082      	sub	sp, #8
    4024:	af00      	add	r7, sp, #0
    4026:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    4028:	687b      	ldr	r3, [r7, #4]
    402a:	2200      	movs	r2, #0
    402c:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    402e:	687b      	ldr	r3, [r7, #4]
    4030:	2201      	movs	r2, #1
    4032:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    4034:	4b08      	ldr	r3, [pc, #32]	; (4058 <nvm_get_config_defaults+0x38>)
    4036:	685b      	ldr	r3, [r3, #4]
    4038:	06db      	lsls	r3, r3, #27
    403a:	0f1b      	lsrs	r3, r3, #28
    403c:	b2db      	uxtb	r3, r3
    403e:	001a      	movs	r2, r3
    4040:	687b      	ldr	r3, [r7, #4]
    4042:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    4044:	687b      	ldr	r3, [r7, #4]
    4046:	2200      	movs	r2, #0
    4048:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    404a:	687b      	ldr	r3, [r7, #4]
    404c:	2200      	movs	r2, #0
    404e:	711a      	strb	r2, [r3, #4]
}
    4050:	46c0      	nop			; (mov r8, r8)
    4052:	46bd      	mov	sp, r7
    4054:	b002      	add	sp, #8
    4056:	bd80      	pop	{r7, pc}
    4058:	41004000 	.word	0x41004000

0000405c <usart_is_syncing>:
{
    405c:	b580      	push	{r7, lr}
    405e:	b084      	sub	sp, #16
    4060:	af00      	add	r7, sp, #0
    4062:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4064:	687b      	ldr	r3, [r7, #4]
    4066:	681b      	ldr	r3, [r3, #0]
    4068:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    406a:	68fb      	ldr	r3, [r7, #12]
    406c:	69db      	ldr	r3, [r3, #28]
    406e:	1e5a      	subs	r2, r3, #1
    4070:	4193      	sbcs	r3, r2
    4072:	b2db      	uxtb	r3, r3
}
    4074:	0018      	movs	r0, r3
    4076:	46bd      	mov	sp, r7
    4078:	b004      	add	sp, #16
    407a:	bd80      	pop	{r7, pc}

0000407c <_usart_wait_for_sync>:
{
    407c:	b580      	push	{r7, lr}
    407e:	b082      	sub	sp, #8
    4080:	af00      	add	r7, sp, #0
    4082:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    4084:	46c0      	nop			; (mov r8, r8)
    4086:	687b      	ldr	r3, [r7, #4]
    4088:	0018      	movs	r0, r3
    408a:	4b04      	ldr	r3, [pc, #16]	; (409c <_usart_wait_for_sync+0x20>)
    408c:	4798      	blx	r3
    408e:	1e03      	subs	r3, r0, #0
    4090:	d1f9      	bne.n	4086 <_usart_wait_for_sync+0xa>
}
    4092:	46c0      	nop			; (mov r8, r8)
    4094:	46bd      	mov	sp, r7
    4096:	b002      	add	sp, #8
    4098:	bd80      	pop	{r7, pc}
    409a:	46c0      	nop			; (mov r8, r8)
    409c:	0000405d 	.word	0x0000405d

000040a0 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    40a0:	b580      	push	{r7, lr}
    40a2:	b082      	sub	sp, #8
    40a4:	af00      	add	r7, sp, #0
    40a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    40a8:	687b      	ldr	r3, [r7, #4]
    40aa:	2280      	movs	r2, #128	; 0x80
    40ac:	05d2      	lsls	r2, r2, #23
    40ae:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    40b0:	687b      	ldr	r3, [r7, #4]
    40b2:	2200      	movs	r2, #0
    40b4:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    40b6:	687b      	ldr	r3, [r7, #4]
    40b8:	22ff      	movs	r2, #255	; 0xff
    40ba:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    40bc:	687b      	ldr	r3, [r7, #4]
    40be:	2200      	movs	r2, #0
    40c0:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    40c2:	687b      	ldr	r3, [r7, #4]
    40c4:	2200      	movs	r2, #0
    40c6:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    40c8:	687b      	ldr	r3, [r7, #4]
    40ca:	2296      	movs	r2, #150	; 0x96
    40cc:	0192      	lsls	r2, r2, #6
    40ce:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    40d0:	687b      	ldr	r3, [r7, #4]
    40d2:	2224      	movs	r2, #36	; 0x24
    40d4:	2101      	movs	r1, #1
    40d6:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    40d8:	687b      	ldr	r3, [r7, #4]
    40da:	2225      	movs	r2, #37	; 0x25
    40dc:	2101      	movs	r1, #1
    40de:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    40e0:	687b      	ldr	r3, [r7, #4]
    40e2:	2226      	movs	r2, #38	; 0x26
    40e4:	2100      	movs	r1, #0
    40e6:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    40e8:	687b      	ldr	r3, [r7, #4]
    40ea:	2227      	movs	r2, #39	; 0x27
    40ec:	2100      	movs	r1, #0
    40ee:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    40f0:	687b      	ldr	r3, [r7, #4]
    40f2:	2200      	movs	r2, #0
    40f4:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    40f6:	687b      	ldr	r3, [r7, #4]
    40f8:	2288      	movs	r2, #136	; 0x88
    40fa:	0352      	lsls	r2, r2, #13
    40fc:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    40fe:	687b      	ldr	r3, [r7, #4]
    4100:	222c      	movs	r2, #44	; 0x2c
    4102:	2100      	movs	r1, #0
    4104:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    4106:	687b      	ldr	r3, [r7, #4]
    4108:	222d      	movs	r2, #45	; 0x2d
    410a:	2100      	movs	r1, #0
    410c:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    410e:	687b      	ldr	r3, [r7, #4]
    4110:	2200      	movs	r2, #0
    4112:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    4114:	687b      	ldr	r3, [r7, #4]
    4116:	2200      	movs	r2, #0
    4118:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    411a:	687b      	ldr	r3, [r7, #4]
    411c:	2200      	movs	r2, #0
    411e:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    4120:	687b      	ldr	r3, [r7, #4]
    4122:	2200      	movs	r2, #0
    4124:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4126:	687b      	ldr	r3, [r7, #4]
    4128:	2200      	movs	r2, #0
    412a:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    412c:	687b      	ldr	r3, [r7, #4]
    412e:	2200      	movs	r2, #0
    4130:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    4132:	687b      	ldr	r3, [r7, #4]
    4134:	2200      	movs	r2, #0
    4136:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    4138:	687b      	ldr	r3, [r7, #4]
    413a:	2200      	movs	r2, #0
    413c:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    413e:	687b      	ldr	r3, [r7, #4]
    4140:	2200      	movs	r2, #0
    4142:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    4144:	687b      	ldr	r3, [r7, #4]
    4146:	2200      	movs	r2, #0
    4148:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    414a:	687b      	ldr	r3, [r7, #4]
    414c:	2213      	movs	r2, #19
    414e:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    4150:	687b      	ldr	r3, [r7, #4]
    4152:	2200      	movs	r2, #0
    4154:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    4156:	46c0      	nop			; (mov r8, r8)
    4158:	46bd      	mov	sp, r7
    415a:	b002      	add	sp, #8
    415c:	bd80      	pop	{r7, pc}
	...

00004160 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    4160:	b580      	push	{r7, lr}
    4162:	b084      	sub	sp, #16
    4164:	af00      	add	r7, sp, #0
    4166:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4168:	687b      	ldr	r3, [r7, #4]
    416a:	681b      	ldr	r3, [r3, #0]
    416c:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    416e:	687b      	ldr	r3, [r7, #4]
    4170:	681b      	ldr	r3, [r3, #0]
    4172:	0018      	movs	r0, r3
    4174:	4b09      	ldr	r3, [pc, #36]	; (419c <usart_enable+0x3c>)
    4176:	4798      	blx	r3
    4178:	0003      	movs	r3, r0
    417a:	0018      	movs	r0, r3
    417c:	4b08      	ldr	r3, [pc, #32]	; (41a0 <usart_enable+0x40>)
    417e:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4180:	687b      	ldr	r3, [r7, #4]
    4182:	0018      	movs	r0, r3
    4184:	4b07      	ldr	r3, [pc, #28]	; (41a4 <usart_enable+0x44>)
    4186:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4188:	68fb      	ldr	r3, [r7, #12]
    418a:	681b      	ldr	r3, [r3, #0]
    418c:	2202      	movs	r2, #2
    418e:	431a      	orrs	r2, r3
    4190:	68fb      	ldr	r3, [r7, #12]
    4192:	601a      	str	r2, [r3, #0]
}
    4194:	46c0      	nop			; (mov r8, r8)
    4196:	46bd      	mov	sp, r7
    4198:	b004      	add	sp, #16
    419a:	bd80      	pop	{r7, pc}
    419c:	00002595 	.word	0x00002595
    41a0:	00003e99 	.word	0x00003e99
    41a4:	0000407d 	.word	0x0000407d

000041a8 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    41a8:	b580      	push	{r7, lr}
    41aa:	b084      	sub	sp, #16
    41ac:	af00      	add	r7, sp, #0
    41ae:	60f8      	str	r0, [r7, #12]
    41b0:	60b9      	str	r1, [r7, #8]
    41b2:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    41b4:	687a      	ldr	r2, [r7, #4]
    41b6:	68b9      	ldr	r1, [r7, #8]
    41b8:	68fb      	ldr	r3, [r7, #12]
    41ba:	0018      	movs	r0, r3
    41bc:	4b05      	ldr	r3, [pc, #20]	; (41d4 <usart_serial_init+0x2c>)
    41be:	4798      	blx	r3
    41c0:	1e03      	subs	r3, r0, #0
    41c2:	d101      	bne.n	41c8 <usart_serial_init+0x20>
		return true;
    41c4:	2301      	movs	r3, #1
    41c6:	e000      	b.n	41ca <usart_serial_init+0x22>
	}
	else {
		return false;
    41c8:	2300      	movs	r3, #0
	}
}
    41ca:	0018      	movs	r0, r3
    41cc:	46bd      	mov	sp, r7
    41ce:	b004      	add	sp, #16
    41d0:	bd80      	pop	{r7, pc}
    41d2:	46c0      	nop			; (mov r8, r8)
    41d4:	00002a4d 	.word	0x00002a4d

000041d8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    41d8:	b580      	push	{r7, lr}
    41da:	b082      	sub	sp, #8
    41dc:	af00      	add	r7, sp, #0
    41de:	6078      	str	r0, [r7, #4]
    41e0:	000a      	movs	r2, r1
    41e2:	1cfb      	adds	r3, r7, #3
    41e4:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    41e6:	46c0      	nop			; (mov r8, r8)
    41e8:	1cfb      	adds	r3, r7, #3
    41ea:	781b      	ldrb	r3, [r3, #0]
    41ec:	b29a      	uxth	r2, r3
    41ee:	687b      	ldr	r3, [r7, #4]
    41f0:	0011      	movs	r1, r2
    41f2:	0018      	movs	r0, r3
    41f4:	4b04      	ldr	r3, [pc, #16]	; (4208 <usart_serial_putchar+0x30>)
    41f6:	4798      	blx	r3
    41f8:	1e03      	subs	r3, r0, #0
    41fa:	d1f5      	bne.n	41e8 <usart_serial_putchar+0x10>

	return STATUS_OK;
    41fc:	2300      	movs	r3, #0
}
    41fe:	0018      	movs	r0, r3
    4200:	46bd      	mov	sp, r7
    4202:	b002      	add	sp, #8
    4204:	bd80      	pop	{r7, pc}
    4206:	46c0      	nop			; (mov r8, r8)
    4208:	00002cc1 	.word	0x00002cc1

0000420c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    420c:	b580      	push	{r7, lr}
    420e:	b084      	sub	sp, #16
    4210:	af00      	add	r7, sp, #0
    4212:	6078      	str	r0, [r7, #4]
    4214:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    4216:	230e      	movs	r3, #14
    4218:	18fb      	adds	r3, r7, r3
    421a:	2200      	movs	r2, #0
    421c:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    421e:	46c0      	nop			; (mov r8, r8)
    4220:	230e      	movs	r3, #14
    4222:	18fa      	adds	r2, r7, r3
    4224:	687b      	ldr	r3, [r7, #4]
    4226:	0011      	movs	r1, r2
    4228:	0018      	movs	r0, r3
    422a:	4b07      	ldr	r3, [pc, #28]	; (4248 <usart_serial_getchar+0x3c>)
    422c:	4798      	blx	r3
    422e:	1e03      	subs	r3, r0, #0
    4230:	d1f6      	bne.n	4220 <usart_serial_getchar+0x14>

	*c = temp;
    4232:	230e      	movs	r3, #14
    4234:	18fb      	adds	r3, r7, r3
    4236:	881b      	ldrh	r3, [r3, #0]
    4238:	b2da      	uxtb	r2, r3
    423a:	683b      	ldr	r3, [r7, #0]
    423c:	701a      	strb	r2, [r3, #0]
}
    423e:	46c0      	nop			; (mov r8, r8)
    4240:	46bd      	mov	sp, r7
    4242:	b004      	add	sp, #16
    4244:	bd80      	pop	{r7, pc}
    4246:	46c0      	nop			; (mov r8, r8)
    4248:	00002d25 	.word	0x00002d25

0000424c <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    424c:	b580      	push	{r7, lr}
    424e:	b084      	sub	sp, #16
    4250:	af00      	add	r7, sp, #0
    4252:	60f8      	str	r0, [r7, #12]
    4254:	60b9      	str	r1, [r7, #8]
    4256:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    4258:	4b10      	ldr	r3, [pc, #64]	; (429c <stdio_serial_init+0x50>)
    425a:	68fa      	ldr	r2, [r7, #12]
    425c:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    425e:	4b10      	ldr	r3, [pc, #64]	; (42a0 <stdio_serial_init+0x54>)
    4260:	4a10      	ldr	r2, [pc, #64]	; (42a4 <stdio_serial_init+0x58>)
    4262:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    4264:	4b10      	ldr	r3, [pc, #64]	; (42a8 <stdio_serial_init+0x5c>)
    4266:	4a11      	ldr	r2, [pc, #68]	; (42ac <stdio_serial_init+0x60>)
    4268:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    426a:	687a      	ldr	r2, [r7, #4]
    426c:	68b9      	ldr	r1, [r7, #8]
    426e:	68fb      	ldr	r3, [r7, #12]
    4270:	0018      	movs	r0, r3
    4272:	4b0f      	ldr	r3, [pc, #60]	; (42b0 <stdio_serial_init+0x64>)
    4274:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    4276:	4b0f      	ldr	r3, [pc, #60]	; (42b4 <stdio_serial_init+0x68>)
    4278:	681b      	ldr	r3, [r3, #0]
    427a:	689b      	ldr	r3, [r3, #8]
    427c:	2100      	movs	r1, #0
    427e:	0018      	movs	r0, r3
    4280:	4b0d      	ldr	r3, [pc, #52]	; (42b8 <stdio_serial_init+0x6c>)
    4282:	4798      	blx	r3
	setbuf(stdin, NULL);
    4284:	4b0b      	ldr	r3, [pc, #44]	; (42b4 <stdio_serial_init+0x68>)
    4286:	681b      	ldr	r3, [r3, #0]
    4288:	685b      	ldr	r3, [r3, #4]
    428a:	2100      	movs	r1, #0
    428c:	0018      	movs	r0, r3
    428e:	4b0a      	ldr	r3, [pc, #40]	; (42b8 <stdio_serial_init+0x6c>)
    4290:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    4292:	46c0      	nop			; (mov r8, r8)
    4294:	46bd      	mov	sp, r7
    4296:	b004      	add	sp, #16
    4298:	bd80      	pop	{r7, pc}
    429a:	46c0      	nop			; (mov r8, r8)
    429c:	20000140 	.word	0x20000140
    42a0:	2000013c 	.word	0x2000013c
    42a4:	000041d9 	.word	0x000041d9
    42a8:	20000138 	.word	0x20000138
    42ac:	0000420d 	.word	0x0000420d
    42b0:	000041a9 	.word	0x000041a9
    42b4:	2000000c 	.word	0x2000000c
    42b8:	00004aa9 	.word	0x00004aa9

000042bc <configure_console>:
static uint8_t read_buffer[AT25DFX_BUFFER_SIZE];
struct spi_module at25dfx_spi;
struct at25dfx_chip_module at25dfx_chip;

static void configure_console(void)
{
    42bc:	b580      	push	{r7, lr}
    42be:	b090      	sub	sp, #64	; 0x40
    42c0:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;
	usart_get_config_defaults(&usart_conf);
    42c2:	003b      	movs	r3, r7
    42c4:	0018      	movs	r0, r3
    42c6:	4b13      	ldr	r3, [pc, #76]	; (4314 <configure_console+0x58>)
    42c8:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    42ca:	003b      	movs	r3, r7
    42cc:	22c4      	movs	r2, #196	; 0xc4
    42ce:	0392      	lsls	r2, r2, #14
    42d0:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    42d2:	003b      	movs	r3, r7
    42d4:	2201      	movs	r2, #1
    42d6:	4252      	negs	r2, r2
    42d8:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    42da:	003b      	movs	r3, r7
    42dc:	2201      	movs	r2, #1
    42de:	4252      	negs	r2, r2
    42e0:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    42e2:	003b      	movs	r3, r7
    42e4:	4a0c      	ldr	r2, [pc, #48]	; (4318 <configure_console+0x5c>)
    42e6:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    42e8:	003b      	movs	r3, r7
    42ea:	4a0c      	ldr	r2, [pc, #48]	; (431c <configure_console+0x60>)
    42ec:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    42ee:	003b      	movs	r3, r7
    42f0:	22e1      	movs	r2, #225	; 0xe1
    42f2:	0252      	lsls	r2, r2, #9
    42f4:	621a      	str	r2, [r3, #32]
	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &usart_conf);
    42f6:	003a      	movs	r2, r7
    42f8:	4909      	ldr	r1, [pc, #36]	; (4320 <configure_console+0x64>)
    42fa:	4b0a      	ldr	r3, [pc, #40]	; (4324 <configure_console+0x68>)
    42fc:	0018      	movs	r0, r3
    42fe:	4b0a      	ldr	r3, [pc, #40]	; (4328 <configure_console+0x6c>)
    4300:	4798      	blx	r3
	usart_enable(&usart_instance);
    4302:	4b08      	ldr	r3, [pc, #32]	; (4324 <configure_console+0x68>)
    4304:	0018      	movs	r0, r3
    4306:	4b09      	ldr	r3, [pc, #36]	; (432c <configure_console+0x70>)
    4308:	4798      	blx	r3
}
    430a:	46c0      	nop			; (mov r8, r8)
    430c:	46bd      	mov	sp, r7
    430e:	b010      	add	sp, #64	; 0x40
    4310:	bd80      	pop	{r7, pc}
    4312:	46c0      	nop			; (mov r8, r8)
    4314:	000040a1 	.word	0x000040a1
    4318:	002a0003 	.word	0x002a0003
    431c:	002b0003 	.word	0x002b0003
    4320:	42001800 	.word	0x42001800
    4324:	20000144 	.word	0x20000144
    4328:	0000424d 	.word	0x0000424d
    432c:	00004161 	.word	0x00004161

00004330 <configure_spi_flash>:

static void configure_spi_flash()
{
    4330:	b580      	push	{r7, lr}
    4332:	b090      	sub	sp, #64	; 0x40
    4334:	af00      	add	r7, sp, #0
	struct at25dfx_chip_config at25dfx_chip_config;
	struct spi_config at25dfx_spi_config;
	spi_get_config_defaults(&at25dfx_spi_config);
    4336:	1d3b      	adds	r3, r7, #4
    4338:	0018      	movs	r0, r3
    433a:	4b19      	ldr	r3, [pc, #100]	; (43a0 <configure_spi_flash+0x70>)
    433c:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
    433e:	1d3b      	adds	r3, r7, #4
    4340:	4a18      	ldr	r2, [pc, #96]	; (43a4 <configure_spi_flash+0x74>)
    4342:	619a      	str	r2, [r3, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
    4344:	1d3b      	adds	r3, r7, #4
    4346:	2280      	movs	r2, #128	; 0x80
    4348:	0252      	lsls	r2, r2, #9
    434a:	60da      	str	r2, [r3, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
    434c:	1d3b      	adds	r3, r7, #4
    434e:	4a16      	ldr	r2, [pc, #88]	; (43a8 <configure_spi_flash+0x78>)
    4350:	629a      	str	r2, [r3, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
    4352:	1d3b      	adds	r3, r7, #4
    4354:	4a15      	ldr	r2, [pc, #84]	; (43ac <configure_spi_flash+0x7c>)
    4356:	62da      	str	r2, [r3, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
    4358:	1d3b      	adds	r3, r7, #4
    435a:	4a15      	ldr	r2, [pc, #84]	; (43b0 <configure_spi_flash+0x80>)
    435c:	631a      	str	r2, [r3, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
    435e:	1d3b      	adds	r3, r7, #4
    4360:	4a14      	ldr	r2, [pc, #80]	; (43b4 <configure_spi_flash+0x84>)
    4362:	635a      	str	r2, [r3, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    4364:	1d3a      	adds	r2, r7, #4
    4366:	4914      	ldr	r1, [pc, #80]	; (43b8 <configure_spi_flash+0x88>)
    4368:	4b14      	ldr	r3, [pc, #80]	; (43bc <configure_spi_flash+0x8c>)
    436a:	0018      	movs	r0, r3
    436c:	4b14      	ldr	r3, [pc, #80]	; (43c0 <configure_spi_flash+0x90>)
    436e:	4798      	blx	r3
	spi_enable(&at25dfx_spi);
    4370:	4b12      	ldr	r3, [pc, #72]	; (43bc <configure_spi_flash+0x8c>)
    4372:	0018      	movs	r0, r3
    4374:	4b13      	ldr	r3, [pc, #76]	; (43c4 <configure_spi_flash+0x94>)
    4376:	4798      	blx	r3
		
	at25dfx_chip_config.type = AT25DFX_MEM_TYPE;
    4378:	233c      	movs	r3, #60	; 0x3c
    437a:	18fb      	adds	r3, r7, r3
    437c:	2204      	movs	r2, #4
    437e:	701a      	strb	r2, [r3, #0]
	at25dfx_chip_config.cs_pin = AT25DFX_CS;
    4380:	233c      	movs	r3, #60	; 0x3c
    4382:	18fb      	adds	r3, r7, r3
    4384:	2207      	movs	r2, #7
    4386:	705a      	strb	r2, [r3, #1]
	at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at25dfx_chip_config);
    4388:	233c      	movs	r3, #60	; 0x3c
    438a:	18fa      	adds	r2, r7, r3
    438c:	490b      	ldr	r1, [pc, #44]	; (43bc <configure_spi_flash+0x8c>)
    438e:	4b0e      	ldr	r3, [pc, #56]	; (43c8 <configure_spi_flash+0x98>)
    4390:	0018      	movs	r0, r3
    4392:	4b0e      	ldr	r3, [pc, #56]	; (43cc <configure_spi_flash+0x9c>)
    4394:	4798      	blx	r3
}
    4396:	46c0      	nop			; (mov r8, r8)
    4398:	46bd      	mov	sp, r7
    439a:	b010      	add	sp, #64	; 0x40
    439c:	bd80      	pop	{r7, pc}
    439e:	46c0      	nop			; (mov r8, r8)
    43a0:	00003ee5 	.word	0x00003ee5
    43a4:	0001d4c0 	.word	0x0001d4c0
    43a8:	00100002 	.word	0x00100002
    43ac:	00110002 	.word	0x00110002
    43b0:	00120002 	.word	0x00120002
    43b4:	00130002 	.word	0x00130002
    43b8:	42000c00 	.word	0x42000c00
    43bc:	20000180 	.word	0x20000180
    43c0:	00000d21 	.word	0x00000d21
    43c4:	00003f69 	.word	0x00003f69
    43c8:	20000178 	.word	0x20000178
    43cc:	00003fb9 	.word	0x00003fb9

000043d0 <getFWStat>:

static Firmware_Status_t getFWStat() 
{
    43d0:	b580      	push	{r7, lr}
    43d2:	b082      	sub	sp, #8
    43d4:	af00      	add	r7, sp, #0
    43d6:	6078      	str	r0, [r7, #4]
	return *(Firmware_Status_t*)FW_STAT_ADDRESS;	// return the firmware status
    43d8:	23fe      	movs	r3, #254	; 0xfe
    43da:	01db      	lsls	r3, r3, #7
    43dc:	687a      	ldr	r2, [r7, #4]
    43de:	0010      	movs	r0, r2
    43e0:	0019      	movs	r1, r3
    43e2:	2308      	movs	r3, #8
    43e4:	001a      	movs	r2, r3
    43e6:	4b03      	ldr	r3, [pc, #12]	; (43f4 <getFWStat+0x24>)
    43e8:	4798      	blx	r3
}
    43ea:	6878      	ldr	r0, [r7, #4]
    43ec:	46bd      	mov	sp, r7
    43ee:	b002      	add	sp, #8
    43f0:	bd80      	pop	{r7, pc}
    43f2:	46c0      	nop			; (mov r8, r8)
    43f4:	0000497d 	.word	0x0000497d

000043f8 <writeFWStat>:

static void writeFWStat(Firmware_Status_t thisFW)
{
    43f8:	b590      	push	{r4, r7, lr}
    43fa:	b095      	sub	sp, #84	; 0x54
    43fc:	af00      	add	r7, sp, #0
    43fe:	003b      	movs	r3, r7
    4400:	6018      	str	r0, [r3, #0]
    4402:	6059      	str	r1, [r3, #4]
	uint8_t page_buffer[NVMCTRL_PAGE_SIZE]={0};
    4404:	230c      	movs	r3, #12
    4406:	18fb      	adds	r3, r7, r3
    4408:	0018      	movs	r0, r3
    440a:	2340      	movs	r3, #64	; 0x40
    440c:	001a      	movs	r2, r3
    440e:	2100      	movs	r1, #0
    4410:	4b26      	ldr	r3, [pc, #152]	; (44ac <writeFWStat+0xb4>)
    4412:	4798      	blx	r3
	page_buffer[0] = thisFW.signature[0];
    4414:	003b      	movs	r3, r7
    4416:	781a      	ldrb	r2, [r3, #0]
    4418:	230c      	movs	r3, #12
    441a:	18fb      	adds	r3, r7, r3
    441c:	701a      	strb	r2, [r3, #0]
	page_buffer[1] = thisFW.signature[1];
    441e:	003b      	movs	r3, r7
    4420:	785a      	ldrb	r2, [r3, #1]
    4422:	230c      	movs	r3, #12
    4424:	18fb      	adds	r3, r7, r3
    4426:	705a      	strb	r2, [r3, #1]
	page_buffer[2] = thisFW.signature[2];
    4428:	003b      	movs	r3, r7
    442a:	789a      	ldrb	r2, [r3, #2]
    442c:	230c      	movs	r3, #12
    442e:	18fb      	adds	r3, r7, r3
    4430:	709a      	strb	r2, [r3, #2]
	page_buffer[3] = thisFW.signature[3];
    4432:	003b      	movs	r3, r7
    4434:	78da      	ldrb	r2, [r3, #3]
    4436:	230c      	movs	r3, #12
    4438:	18fb      	adds	r3, r7, r3
    443a:	70da      	strb	r2, [r3, #3]
	page_buffer[4] = thisFW.executing_image;
    443c:	003b      	movs	r3, r7
    443e:	791a      	ldrb	r2, [r3, #4]
    4440:	230c      	movs	r3, #12
    4442:	18fb      	adds	r3, r7, r3
    4444:	711a      	strb	r2, [r3, #4]
	page_buffer[5] = thisFW.downloaded_image;
    4446:	003b      	movs	r3, r7
    4448:	795a      	ldrb	r2, [r3, #5]
    444a:	230c      	movs	r3, #12
    444c:	18fb      	adds	r3, r7, r3
    444e:	715a      	strb	r2, [r3, #5]
	page_buffer[6] = thisFW.writenew_image;
    4450:	003b      	movs	r3, r7
    4452:	799a      	ldrb	r2, [r3, #6]
    4454:	230c      	movs	r3, #12
    4456:	18fb      	adds	r3, r7, r3
    4458:	719a      	strb	r2, [r3, #6]
	page_buffer[7] = thisFW.reset_count;
    445a:	003b      	movs	r3, r7
    445c:	79da      	ldrb	r2, [r3, #7]
    445e:	230c      	movs	r3, #12
    4460:	18fb      	adds	r3, r7, r3
    4462:	71da      	strb	r2, [r3, #7]
	
	status_code_genare_t error_code;
	do
	{
		error_code = nvm_erase_row(FW_STAT_ADDRESS);			// Erase FW stat row
    4464:	234f      	movs	r3, #79	; 0x4f
    4466:	18fc      	adds	r4, r7, r3
    4468:	23fe      	movs	r3, #254	; 0xfe
    446a:	01db      	lsls	r3, r3, #7
    446c:	0018      	movs	r0, r3
    446e:	4b10      	ldr	r3, [pc, #64]	; (44b0 <writeFWStat+0xb8>)
    4470:	4798      	blx	r3
    4472:	0003      	movs	r3, r0
    4474:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    4476:	234f      	movs	r3, #79	; 0x4f
    4478:	18fb      	adds	r3, r7, r3
    447a:	781b      	ldrb	r3, [r3, #0]
    447c:	2b05      	cmp	r3, #5
    447e:	d0f1      	beq.n	4464 <writeFWStat+0x6c>
	
	do 
	{ 
		error_code = nvm_write_buffer(FW_STAT_ADDRESS, page_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
    4480:	234f      	movs	r3, #79	; 0x4f
    4482:	18fc      	adds	r4, r7, r3
    4484:	230c      	movs	r3, #12
    4486:	18f9      	adds	r1, r7, r3
    4488:	23fe      	movs	r3, #254	; 0xfe
    448a:	01db      	lsls	r3, r3, #7
    448c:	2240      	movs	r2, #64	; 0x40
    448e:	0018      	movs	r0, r3
    4490:	4b08      	ldr	r3, [pc, #32]	; (44b4 <writeFWStat+0xbc>)
    4492:	4798      	blx	r3
    4494:	0003      	movs	r3, r0
    4496:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    4498:	234f      	movs	r3, #79	; 0x4f
    449a:	18fb      	adds	r3, r7, r3
    449c:	781b      	ldrb	r3, [r3, #0]
    449e:	2b05      	cmp	r3, #5
    44a0:	d0ee      	beq.n	4480 <writeFWStat+0x88>
}
    44a2:	46c0      	nop			; (mov r8, r8)
    44a4:	46bd      	mov	sp, r7
    44a6:	b015      	add	sp, #84	; 0x54
    44a8:	bd90      	pop	{r4, r7, pc}
    44aa:	46c0      	nop			; (mov r8, r8)
    44ac:	0000498f 	.word	0x0000498f
    44b0:	00001e19 	.word	0x00001e19
    44b4:	00001ccd 	.word	0x00001ccd

000044b8 <upgradeFW>:

static void upgradeFW(Firmware_Status_t thisFW)
{
    44b8:	b590      	push	{r4, r7, lr}
    44ba:	b089      	sub	sp, #36	; 0x24
    44bc:	af00      	add	r7, sp, #0
    44be:	003b      	movs	r3, r7
    44c0:	6018      	str	r0, [r3, #0]
    44c2:	6059      	str	r1, [r3, #4]
	printf("Upgrading firmware to version: %d.\n", thisFW.downloaded_image);
    44c4:	003b      	movs	r3, r7
    44c6:	795b      	ldrb	r3, [r3, #5]
    44c8:	001a      	movs	r2, r3
    44ca:	4b40      	ldr	r3, [pc, #256]	; (45cc <upgradeFW+0x114>)
    44cc:	0011      	movs	r1, r2
    44ce:	0018      	movs	r0, r3
    44d0:	4b3f      	ldr	r3, [pc, #252]	; (45d0 <upgradeFW+0x118>)
    44d2:	4798      	blx	r3
		return;
	}
	*/
	// write new firmware
	//--------------------------
	uint32_t flash_fw_addr = thisFW.downloaded_image * 0x40000;			// Pick right start address in flash for downloaded image
    44d4:	003b      	movs	r3, r7
    44d6:	795b      	ldrb	r3, [r3, #5]
    44d8:	049b      	lsls	r3, r3, #18
    44da:	617b      	str	r3, [r7, #20]
	at25dfx_chip_wake(&at25dfx_chip); //wake up the chip
    44dc:	4b3d      	ldr	r3, [pc, #244]	; (45d4 <upgradeFW+0x11c>)
    44de:	0018      	movs	r0, r3
    44e0:	4b3d      	ldr	r3, [pc, #244]	; (45d8 <upgradeFW+0x120>)
    44e2:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK)
    44e4:	4b3b      	ldr	r3, [pc, #236]	; (45d4 <upgradeFW+0x11c>)
    44e6:	0018      	movs	r0, r3
    44e8:	4b3c      	ldr	r3, [pc, #240]	; (45dc <upgradeFW+0x124>)
    44ea:	4798      	blx	r3
    44ec:	1e03      	subs	r3, r0, #0
    44ee:	d004      	beq.n	44fa <upgradeFW+0x42>
	{
		printf("Flash Chip did not respond. Upgrade failed !\n");
    44f0:	4b3b      	ldr	r3, [pc, #236]	; (45e0 <upgradeFW+0x128>)
    44f2:	0018      	movs	r0, r3
    44f4:	4b3b      	ldr	r3, [pc, #236]	; (45e4 <upgradeFW+0x12c>)
    44f6:	4798      	blx	r3
		return;
    44f8:	e064      	b.n	45c4 <upgradeFW+0x10c>
	}
	//...................
	//read the firmware out and start burning NVM
	uint32_t addr_i = 0;
    44fa:	2300      	movs	r3, #0
    44fc:	61fb      	str	r3, [r7, #28]
	status_code_genare_t error_code;
	while (APP_START_ADDRESS + addr_i < 0x40000) {	
    44fe:	e043      	b.n	4588 <upgradeFW+0xd0>
		// write a row to NVM (256B)
		do
		{
			error_code = nvm_erase_row(APP_START_ADDRESS + addr_i);			// Erase NVM row
    4500:	69fb      	ldr	r3, [r7, #28]
    4502:	2280      	movs	r2, #128	; 0x80
    4504:	0212      	lsls	r2, r2, #8
    4506:	4694      	mov	ip, r2
    4508:	4463      	add	r3, ip
    450a:	2213      	movs	r2, #19
    450c:	18bc      	adds	r4, r7, r2
    450e:	0018      	movs	r0, r3
    4510:	4b35      	ldr	r3, [pc, #212]	; (45e8 <upgradeFW+0x130>)
    4512:	4798      	blx	r3
    4514:	0003      	movs	r3, r0
    4516:	7023      	strb	r3, [r4, #0]
		} while (error_code == STATUS_BUSY);
    4518:	2313      	movs	r3, #19
    451a:	18fb      	adds	r3, r7, r3
    451c:	781b      	ldrb	r3, [r3, #0]
    451e:	2b05      	cmp	r3, #5
    4520:	d0ee      	beq.n	4500 <upgradeFW+0x48>
		for (int i = 0; i < 4; i++) {
    4522:	2300      	movs	r3, #0
    4524:	61bb      	str	r3, [r7, #24]
    4526:	e028      	b.n	457a <upgradeFW+0xc2>
			// Read 64B of flash
			uint32_t thisFlashAddr = flash_fw_addr + addr_i + i*NVMCTRL_PAGE_SIZE;
    4528:	697a      	ldr	r2, [r7, #20]
    452a:	69fb      	ldr	r3, [r7, #28]
    452c:	18d3      	adds	r3, r2, r3
    452e:	69ba      	ldr	r2, [r7, #24]
    4530:	0192      	lsls	r2, r2, #6
    4532:	189b      	adds	r3, r3, r2
    4534:	60fb      	str	r3, [r7, #12]
			at25dfx_chip_read_buffer(&at25dfx_chip, thisFlashAddr, read_buffer, NVMCTRL_PAGE_SIZE);
    4536:	4a2d      	ldr	r2, [pc, #180]	; (45ec <upgradeFW+0x134>)
    4538:	68f9      	ldr	r1, [r7, #12]
    453a:	4826      	ldr	r0, [pc, #152]	; (45d4 <upgradeFW+0x11c>)
    453c:	2340      	movs	r3, #64	; 0x40
    453e:	4c2c      	ldr	r4, [pc, #176]	; (45f0 <upgradeFW+0x138>)
    4540:	47a0      	blx	r4
			uint32_t thisNVMAddr = APP_START_ADDRESS + addr_i + i*NVMCTRL_PAGE_SIZE;
    4542:	69bb      	ldr	r3, [r7, #24]
    4544:	019b      	lsls	r3, r3, #6
    4546:	001a      	movs	r2, r3
    4548:	69fb      	ldr	r3, [r7, #28]
    454a:	18d3      	adds	r3, r2, r3
    454c:	2280      	movs	r2, #128	; 0x80
    454e:	0212      	lsls	r2, r2, #8
    4550:	4694      	mov	ip, r2
    4552:	4463      	add	r3, ip
    4554:	60bb      	str	r3, [r7, #8]
			do
			{
				error_code = nvm_write_buffer(thisNVMAddr, read_buffer, NVMCTRL_PAGE_SIZE);	// Write 64B to NVM page
    4556:	2313      	movs	r3, #19
    4558:	18fc      	adds	r4, r7, r3
    455a:	4924      	ldr	r1, [pc, #144]	; (45ec <upgradeFW+0x134>)
    455c:	68bb      	ldr	r3, [r7, #8]
    455e:	2240      	movs	r2, #64	; 0x40
    4560:	0018      	movs	r0, r3
    4562:	4b24      	ldr	r3, [pc, #144]	; (45f4 <upgradeFW+0x13c>)
    4564:	4798      	blx	r3
    4566:	0003      	movs	r3, r0
    4568:	7023      	strb	r3, [r4, #0]
			} while (error_code == STATUS_BUSY);
    456a:	2313      	movs	r3, #19
    456c:	18fb      	adds	r3, r7, r3
    456e:	781b      	ldrb	r3, [r3, #0]
    4570:	2b05      	cmp	r3, #5
    4572:	d0f0      	beq.n	4556 <upgradeFW+0x9e>
		for (int i = 0; i < 4; i++) {
    4574:	69bb      	ldr	r3, [r7, #24]
    4576:	3301      	adds	r3, #1
    4578:	61bb      	str	r3, [r7, #24]
    457a:	69bb      	ldr	r3, [r7, #24]
    457c:	2b03      	cmp	r3, #3
    457e:	ddd3      	ble.n	4528 <upgradeFW+0x70>
		}
		
		// increment addr_i
		addr_i += 256;
    4580:	69fb      	ldr	r3, [r7, #28]
    4582:	3301      	adds	r3, #1
    4584:	33ff      	adds	r3, #255	; 0xff
    4586:	61fb      	str	r3, [r7, #28]
	while (APP_START_ADDRESS + addr_i < 0x40000) {	
    4588:	69fb      	ldr	r3, [r7, #28]
    458a:	2280      	movs	r2, #128	; 0x80
    458c:	0212      	lsls	r2, r2, #8
    458e:	4694      	mov	ip, r2
    4590:	4463      	add	r3, ip
    4592:	4a19      	ldr	r2, [pc, #100]	; (45f8 <upgradeFW+0x140>)
    4594:	4293      	cmp	r3, r2
    4596:	d9b3      	bls.n	4500 <upgradeFW+0x48>
	//at25dfx_chip_read_buffer(&at25dfx_chip, flash_fw_addr, read_buffer, AT25DFX_BUFFER_SIZE);	
	//computer CRC for the entire block and compare with the CRC stored by the app.
	
	//------------------------
	// enter low power mode.	
	at25dfx_chip_sleep(&at25dfx_chip);
    4598:	4b0e      	ldr	r3, [pc, #56]	; (45d4 <upgradeFW+0x11c>)
    459a:	0018      	movs	r0, r3
    459c:	4b17      	ldr	r3, [pc, #92]	; (45fc <upgradeFW+0x144>)
    459e:	4798      	blx	r3
	// writing done. Update the flags and reset
	thisFW.executing_image = thisFW.downloaded_image;
    45a0:	003b      	movs	r3, r7
    45a2:	795a      	ldrb	r2, [r3, #5]
    45a4:	003b      	movs	r3, r7
    45a6:	711a      	strb	r2, [r3, #4]
	thisFW.writenew_image = 0;
    45a8:	003b      	movs	r3, r7
    45aa:	2200      	movs	r2, #0
    45ac:	719a      	strb	r2, [r3, #6]
	writeFWStat(thisFW);
    45ae:	003b      	movs	r3, r7
    45b0:	6818      	ldr	r0, [r3, #0]
    45b2:	6859      	ldr	r1, [r3, #4]
    45b4:	4b12      	ldr	r3, [pc, #72]	; (4600 <upgradeFW+0x148>)
    45b6:	4798      	blx	r3
	printf("Upgrade complete. Resetting device.\n");
    45b8:	4b12      	ldr	r3, [pc, #72]	; (4604 <upgradeFW+0x14c>)
    45ba:	0018      	movs	r0, r3
    45bc:	4b09      	ldr	r3, [pc, #36]	; (45e4 <upgradeFW+0x12c>)
    45be:	4798      	blx	r3
	system_reset();
    45c0:	4b11      	ldr	r3, [pc, #68]	; (4608 <upgradeFW+0x150>)
    45c2:	4798      	blx	r3
}
    45c4:	46bd      	mov	sp, r7
    45c6:	b009      	add	sp, #36	; 0x24
    45c8:	bd90      	pop	{r4, r7, pc}
    45ca:	46c0      	nop			; (mov r8, r8)
    45cc:	00005c1c 	.word	0x00005c1c
    45d0:	000049a1 	.word	0x000049a1
    45d4:	20000178 	.word	0x20000178
    45d8:	00000791 	.word	0x00000791
    45dc:	000005a1 	.word	0x000005a1
    45e0:	00005c40 	.word	0x00005c40
    45e4:	00004a95 	.word	0x00004a95
    45e8:	00001e19 	.word	0x00001e19
    45ec:	200000d4 	.word	0x200000d4
    45f0:	0000064d 	.word	0x0000064d
    45f4:	00001ccd 	.word	0x00001ccd
    45f8:	0003ffff 	.word	0x0003ffff
    45fc:	00000705 	.word	0x00000705
    4600:	000043f9 	.word	0x000043f9
    4604:	00005c70 	.word	0x00005c70
    4608:	00003e51 	.word	0x00003e51

0000460c <configure_nvm>:
	//printf("Flash write complete.\n");
	//system_reset();
}

static void configure_nvm() 
{
    460c:	b580      	push	{r7, lr}
    460e:	b082      	sub	sp, #8
    4610:	af00      	add	r7, sp, #0
	struct nvm_config config;
	nvm_get_config_defaults(&config);
    4612:	003b      	movs	r3, r7
    4614:	0018      	movs	r0, r3
    4616:	4b06      	ldr	r3, [pc, #24]	; (4630 <configure_nvm+0x24>)
    4618:	4798      	blx	r3
	config.manual_page_write = false;
    461a:	003b      	movs	r3, r7
    461c:	2200      	movs	r2, #0
    461e:	705a      	strb	r2, [r3, #1]
	nvm_set_config(&config);
    4620:	003b      	movs	r3, r7
    4622:	0018      	movs	r0, r3
    4624:	4b03      	ldr	r3, [pc, #12]	; (4634 <configure_nvm+0x28>)
    4626:	4798      	blx	r3
}
    4628:	46c0      	nop			; (mov r8, r8)
    462a:	46bd      	mov	sp, r7
    462c:	b002      	add	sp, #8
    462e:	bd80      	pop	{r7, pc}
    4630:	00004021 	.word	0x00004021
    4634:	00001add 	.word	0x00001add

00004638 <configure_boot_button>:
static void configure_boot_button()
{
    4638:	b580      	push	{r7, lr}
    463a:	b082      	sub	sp, #8
    463c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    463e:	1d3b      	adds	r3, r7, #4
    4640:	0018      	movs	r0, r3
    4642:	4b07      	ldr	r3, [pc, #28]	; (4660 <configure_boot_button+0x28>)
    4644:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_INPUT;
    4646:	1d3b      	adds	r3, r7, #4
    4648:	2200      	movs	r2, #0
    464a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(BOOT_PIN, &pin_conf);
    464c:	1d3b      	adds	r3, r7, #4
    464e:	0019      	movs	r1, r3
    4650:	2037      	movs	r0, #55	; 0x37
    4652:	4b04      	ldr	r3, [pc, #16]	; (4664 <configure_boot_button+0x2c>)
    4654:	4798      	blx	r3
}
    4656:	46c0      	nop			; (mov r8, r8)
    4658:	46bd      	mov	sp, r7
    465a:	b002      	add	sp, #8
    465c:	bd80      	pop	{r7, pc}
    465e:	46c0      	nop			; (mov r8, r8)
    4660:	00003dd9 	.word	0x00003dd9
    4664:	00001ee9 	.word	0x00001ee9

00004668 <init_drivers>:

static void init_drivers()
{
    4668:	b580      	push	{r7, lr}
    466a:	af00      	add	r7, sp, #0
	delay_init();
    466c:	4b05      	ldr	r3, [pc, #20]	; (4684 <init_drivers+0x1c>)
    466e:	4798      	blx	r3
	configure_console();
    4670:	4b05      	ldr	r3, [pc, #20]	; (4688 <init_drivers+0x20>)
    4672:	4798      	blx	r3
	configure_nvm();
    4674:	4b05      	ldr	r3, [pc, #20]	; (468c <init_drivers+0x24>)
    4676:	4798      	blx	r3
	configure_spi_flash();	
    4678:	4b05      	ldr	r3, [pc, #20]	; (4690 <init_drivers+0x28>)
    467a:	4798      	blx	r3
}
    467c:	46c0      	nop			; (mov r8, r8)
    467e:	46bd      	mov	sp, r7
    4680:	bd80      	pop	{r7, pc}
    4682:	46c0      	nop			; (mov r8, r8)
    4684:	000019d1 	.word	0x000019d1
    4688:	000042bd 	.word	0x000042bd
    468c:	0000460d 	.word	0x0000460d
    4690:	00004331 	.word	0x00004331

00004694 <main>:
int main (void)
{
    4694:	b580      	push	{r7, lr}
    4696:	b086      	sub	sp, #24
    4698:	af00      	add	r7, sp, #0
	system_init();
    469a:	4b3c      	ldr	r3, [pc, #240]	; (478c <main+0xf8>)
    469c:	4798      	blx	r3
	system_interrupt_enable_global();
    469e:	4b3c      	ldr	r3, [pc, #240]	; (4790 <main+0xfc>)
    46a0:	4798      	blx	r3
	configure_boot_button();
    46a2:	4b3c      	ldr	r3, [pc, #240]	; (4794 <main+0x100>)
    46a4:	4798      	blx	r3
	// default boot params. Needed so that linker doesn't optimize it out.
	uint8_t* t = params; 
    46a6:	4b3c      	ldr	r3, [pc, #240]	; (4798 <main+0x104>)
    46a8:	613b      	str	r3, [r7, #16]
	//init_drivers();
	//writeFWtoFlash(0);
	

	void (*app_code_entry)(void);
	uint16_t n=0; uint8_t remain_in_boot = 0;
    46aa:	2316      	movs	r3, #22
    46ac:	18fb      	adds	r3, r7, r3
    46ae:	2200      	movs	r2, #0
    46b0:	801a      	strh	r2, [r3, #0]
    46b2:	230f      	movs	r3, #15
    46b4:	18fb      	adds	r3, r7, r3
    46b6:	2200      	movs	r2, #0
    46b8:	701a      	strb	r2, [r3, #0]
	//check if button is pressed to lock in boot
	while(n++ < 1000)
    46ba:	46c0      	nop			; (mov r8, r8)
    46bc:	2316      	movs	r3, #22
    46be:	18fb      	adds	r3, r7, r3
    46c0:	881b      	ldrh	r3, [r3, #0]
    46c2:	2216      	movs	r2, #22
    46c4:	18ba      	adds	r2, r7, r2
    46c6:	1c59      	adds	r1, r3, #1
    46c8:	8011      	strh	r1, [r2, #0]
    46ca:	4a34      	ldr	r2, [pc, #208]	; (479c <main+0x108>)
    46cc:	4293      	cmp	r3, r2
    46ce:	d9f5      	bls.n	46bc <main+0x28>
			break;
		}*/
	}
	while(1) 
	{
		if(!remain_in_boot)
    46d0:	230f      	movs	r3, #15
    46d2:	18fb      	adds	r3, r7, r3
    46d4:	781b      	ldrb	r3, [r3, #0]
    46d6:	2b00      	cmp	r3, #0
    46d8:	d14e      	bne.n	4778 <main+0xe4>
		{
			// check for firmware download requested
			Firmware_Status_t thisFW = getFWStat();
    46da:	003b      	movs	r3, r7
    46dc:	0018      	movs	r0, r3
    46de:	4b30      	ldr	r3, [pc, #192]	; (47a0 <main+0x10c>)
    46e0:	4798      	blx	r3
			//thisFW.downloaded_image = 0;
			thisFW.writenew_image = 0;		// Override writenew_image cause we're testing goddamnit
    46e2:	003b      	movs	r3, r7
    46e4:	2200      	movs	r2, #0
    46e6:	719a      	strb	r2, [r3, #6]
			if(thisFW.writenew_image)
    46e8:	003b      	movs	r3, r7
    46ea:	799b      	ldrb	r3, [r3, #6]
    46ec:	2b00      	cmp	r3, #0
    46ee:	d006      	beq.n	46fe <main+0x6a>
			{
				init_drivers();
    46f0:	4b2c      	ldr	r3, [pc, #176]	; (47a4 <main+0x110>)
    46f2:	4798      	blx	r3
				upgradeFW(thisFW);
    46f4:	003b      	movs	r3, r7
    46f6:	6818      	ldr	r0, [r3, #0]
    46f8:	6859      	ldr	r1, [r3, #4]
    46fa:	4b2b      	ldr	r3, [pc, #172]	; (47a8 <main+0x114>)
    46fc:	4798      	blx	r3
			}
			
			// vector table rebasing
			SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    46fe:	4b2b      	ldr	r3, [pc, #172]	; (47ac <main+0x118>)
    4700:	2280      	movs	r2, #128	; 0x80
    4702:	0212      	lsls	r2, r2, #8
    4704:	609a      	str	r2, [r3, #8]

			// jump to reset handler
			app_code_entry =  (void(*)(void))(*(uint32_t*)(APP_START_ADDRESS+4));
    4706:	4b2a      	ldr	r3, [pc, #168]	; (47b0 <main+0x11c>)
    4708:	681b      	ldr	r3, [r3, #0]
    470a:	60bb      	str	r3, [r7, #8]
			if (app_code_entry == 0x0) {		// Empty app space
    470c:	68bb      	ldr	r3, [r7, #8]
    470e:	2b00      	cmp	r3, #0
    4710:	d10c      	bne.n	472c <main+0x98>
				init_drivers();
    4712:	4b24      	ldr	r3, [pc, #144]	; (47a4 <main+0x110>)
    4714:	4798      	blx	r3
				thisFW.downloaded_image = 0;
    4716:	003b      	movs	r3, r7
    4718:	2200      	movs	r2, #0
    471a:	715a      	strb	r2, [r3, #5]
				thisFW.writenew_image = 1;
    471c:	003b      	movs	r3, r7
    471e:	2201      	movs	r2, #1
    4720:	719a      	strb	r2, [r3, #6]
				upgradeFW(thisFW);
    4722:	003b      	movs	r3, r7
    4724:	6818      	ldr	r0, [r3, #0]
    4726:	6859      	ldr	r1, [r3, #4]
    4728:	4b1f      	ldr	r3, [pc, #124]	; (47a8 <main+0x114>)
    472a:	4798      	blx	r3
			}
			if (system_get_reset_cause() == SYSTEM_RESET_CAUSE_WDT) {
    472c:	4b21      	ldr	r3, [pc, #132]	; (47b4 <main+0x120>)
    472e:	4798      	blx	r3
    4730:	0003      	movs	r3, r0
    4732:	2b20      	cmp	r3, #32
    4734:	d11e      	bne.n	4774 <main+0xe0>
				thisFW.reset_count += 1;
    4736:	003b      	movs	r3, r7
    4738:	79db      	ldrb	r3, [r3, #7]
    473a:	3301      	adds	r3, #1
    473c:	b2da      	uxtb	r2, r3
    473e:	003b      	movs	r3, r7
    4740:	71da      	strb	r2, [r3, #7]
				writeFWStat(thisFW);
    4742:	003b      	movs	r3, r7
    4744:	6818      	ldr	r0, [r3, #0]
    4746:	6859      	ldr	r1, [r3, #4]
    4748:	4b1b      	ldr	r3, [pc, #108]	; (47b8 <main+0x124>)
    474a:	4798      	blx	r3
				if (thisFW.reset_count > 10) {
    474c:	003b      	movs	r3, r7
    474e:	79db      	ldrb	r3, [r3, #7]
    4750:	2b0a      	cmp	r3, #10
    4752:	d90f      	bls.n	4774 <main+0xe0>
					thisFW.reset_count = 0;
    4754:	003b      	movs	r3, r7
    4756:	2200      	movs	r2, #0
    4758:	71da      	strb	r2, [r3, #7]
					init_drivers();
    475a:	4b12      	ldr	r3, [pc, #72]	; (47a4 <main+0x110>)
    475c:	4798      	blx	r3
					thisFW.downloaded_image = 0;
    475e:	003b      	movs	r3, r7
    4760:	2200      	movs	r2, #0
    4762:	715a      	strb	r2, [r3, #5]
					thisFW.writenew_image = 1;
    4764:	003b      	movs	r3, r7
    4766:	2201      	movs	r2, #1
    4768:	719a      	strb	r2, [r3, #6]
					upgradeFW(thisFW);
    476a:	003b      	movs	r3, r7
    476c:	6818      	ldr	r0, [r3, #0]
    476e:	6859      	ldr	r1, [r3, #4]
    4770:	4b0d      	ldr	r3, [pc, #52]	; (47a8 <main+0x114>)
    4772:	4798      	blx	r3
				} 
			}
			app_code_entry();
    4774:	68bb      	ldr	r3, [r7, #8]
    4776:	4798      	blx	r3
		}
		
		printf("in boot\n\r");
    4778:	4b10      	ldr	r3, [pc, #64]	; (47bc <main+0x128>)
    477a:	0018      	movs	r0, r3
    477c:	4b10      	ldr	r3, [pc, #64]	; (47c0 <main+0x12c>)
    477e:	4798      	blx	r3
		delay_ms(500);
    4780:	23fa      	movs	r3, #250	; 0xfa
    4782:	005b      	lsls	r3, r3, #1
    4784:	0018      	movs	r0, r3
    4786:	4b0f      	ldr	r3, [pc, #60]	; (47c4 <main+0x130>)
    4788:	4798      	blx	r3
		if(!remain_in_boot)
    478a:	e7a1      	b.n	46d0 <main+0x3c>
    478c:	00003c45 	.word	0x00003c45
    4790:	00003e7d 	.word	0x00003e7d
    4794:	00004639 	.word	0x00004639
    4798:	00007f00 	.word	0x00007f00
    479c:	000003e7 	.word	0x000003e7
    47a0:	000043d1 	.word	0x000043d1
    47a4:	00004669 	.word	0x00004669
    47a8:	000044b9 	.word	0x000044b9
    47ac:	e000ed00 	.word	0xe000ed00
    47b0:	00008004 	.word	0x00008004
    47b4:	00003e65 	.word	0x00003e65
    47b8:	000043f9 	.word	0x000043f9
    47bc:	00005cc8 	.word	0x00005cc8
    47c0:	000049a1 	.word	0x000049a1
    47c4:	00001a29 	.word	0x00001a29

000047c8 <__udivsi3>:
    47c8:	2200      	movs	r2, #0
    47ca:	0843      	lsrs	r3, r0, #1
    47cc:	428b      	cmp	r3, r1
    47ce:	d374      	bcc.n	48ba <__udivsi3+0xf2>
    47d0:	0903      	lsrs	r3, r0, #4
    47d2:	428b      	cmp	r3, r1
    47d4:	d35f      	bcc.n	4896 <__udivsi3+0xce>
    47d6:	0a03      	lsrs	r3, r0, #8
    47d8:	428b      	cmp	r3, r1
    47da:	d344      	bcc.n	4866 <__udivsi3+0x9e>
    47dc:	0b03      	lsrs	r3, r0, #12
    47de:	428b      	cmp	r3, r1
    47e0:	d328      	bcc.n	4834 <__udivsi3+0x6c>
    47e2:	0c03      	lsrs	r3, r0, #16
    47e4:	428b      	cmp	r3, r1
    47e6:	d30d      	bcc.n	4804 <__udivsi3+0x3c>
    47e8:	22ff      	movs	r2, #255	; 0xff
    47ea:	0209      	lsls	r1, r1, #8
    47ec:	ba12      	rev	r2, r2
    47ee:	0c03      	lsrs	r3, r0, #16
    47f0:	428b      	cmp	r3, r1
    47f2:	d302      	bcc.n	47fa <__udivsi3+0x32>
    47f4:	1212      	asrs	r2, r2, #8
    47f6:	0209      	lsls	r1, r1, #8
    47f8:	d065      	beq.n	48c6 <__udivsi3+0xfe>
    47fa:	0b03      	lsrs	r3, r0, #12
    47fc:	428b      	cmp	r3, r1
    47fe:	d319      	bcc.n	4834 <__udivsi3+0x6c>
    4800:	e000      	b.n	4804 <__udivsi3+0x3c>
    4802:	0a09      	lsrs	r1, r1, #8
    4804:	0bc3      	lsrs	r3, r0, #15
    4806:	428b      	cmp	r3, r1
    4808:	d301      	bcc.n	480e <__udivsi3+0x46>
    480a:	03cb      	lsls	r3, r1, #15
    480c:	1ac0      	subs	r0, r0, r3
    480e:	4152      	adcs	r2, r2
    4810:	0b83      	lsrs	r3, r0, #14
    4812:	428b      	cmp	r3, r1
    4814:	d301      	bcc.n	481a <__udivsi3+0x52>
    4816:	038b      	lsls	r3, r1, #14
    4818:	1ac0      	subs	r0, r0, r3
    481a:	4152      	adcs	r2, r2
    481c:	0b43      	lsrs	r3, r0, #13
    481e:	428b      	cmp	r3, r1
    4820:	d301      	bcc.n	4826 <__udivsi3+0x5e>
    4822:	034b      	lsls	r3, r1, #13
    4824:	1ac0      	subs	r0, r0, r3
    4826:	4152      	adcs	r2, r2
    4828:	0b03      	lsrs	r3, r0, #12
    482a:	428b      	cmp	r3, r1
    482c:	d301      	bcc.n	4832 <__udivsi3+0x6a>
    482e:	030b      	lsls	r3, r1, #12
    4830:	1ac0      	subs	r0, r0, r3
    4832:	4152      	adcs	r2, r2
    4834:	0ac3      	lsrs	r3, r0, #11
    4836:	428b      	cmp	r3, r1
    4838:	d301      	bcc.n	483e <__udivsi3+0x76>
    483a:	02cb      	lsls	r3, r1, #11
    483c:	1ac0      	subs	r0, r0, r3
    483e:	4152      	adcs	r2, r2
    4840:	0a83      	lsrs	r3, r0, #10
    4842:	428b      	cmp	r3, r1
    4844:	d301      	bcc.n	484a <__udivsi3+0x82>
    4846:	028b      	lsls	r3, r1, #10
    4848:	1ac0      	subs	r0, r0, r3
    484a:	4152      	adcs	r2, r2
    484c:	0a43      	lsrs	r3, r0, #9
    484e:	428b      	cmp	r3, r1
    4850:	d301      	bcc.n	4856 <__udivsi3+0x8e>
    4852:	024b      	lsls	r3, r1, #9
    4854:	1ac0      	subs	r0, r0, r3
    4856:	4152      	adcs	r2, r2
    4858:	0a03      	lsrs	r3, r0, #8
    485a:	428b      	cmp	r3, r1
    485c:	d301      	bcc.n	4862 <__udivsi3+0x9a>
    485e:	020b      	lsls	r3, r1, #8
    4860:	1ac0      	subs	r0, r0, r3
    4862:	4152      	adcs	r2, r2
    4864:	d2cd      	bcs.n	4802 <__udivsi3+0x3a>
    4866:	09c3      	lsrs	r3, r0, #7
    4868:	428b      	cmp	r3, r1
    486a:	d301      	bcc.n	4870 <__udivsi3+0xa8>
    486c:	01cb      	lsls	r3, r1, #7
    486e:	1ac0      	subs	r0, r0, r3
    4870:	4152      	adcs	r2, r2
    4872:	0983      	lsrs	r3, r0, #6
    4874:	428b      	cmp	r3, r1
    4876:	d301      	bcc.n	487c <__udivsi3+0xb4>
    4878:	018b      	lsls	r3, r1, #6
    487a:	1ac0      	subs	r0, r0, r3
    487c:	4152      	adcs	r2, r2
    487e:	0943      	lsrs	r3, r0, #5
    4880:	428b      	cmp	r3, r1
    4882:	d301      	bcc.n	4888 <__udivsi3+0xc0>
    4884:	014b      	lsls	r3, r1, #5
    4886:	1ac0      	subs	r0, r0, r3
    4888:	4152      	adcs	r2, r2
    488a:	0903      	lsrs	r3, r0, #4
    488c:	428b      	cmp	r3, r1
    488e:	d301      	bcc.n	4894 <__udivsi3+0xcc>
    4890:	010b      	lsls	r3, r1, #4
    4892:	1ac0      	subs	r0, r0, r3
    4894:	4152      	adcs	r2, r2
    4896:	08c3      	lsrs	r3, r0, #3
    4898:	428b      	cmp	r3, r1
    489a:	d301      	bcc.n	48a0 <__udivsi3+0xd8>
    489c:	00cb      	lsls	r3, r1, #3
    489e:	1ac0      	subs	r0, r0, r3
    48a0:	4152      	adcs	r2, r2
    48a2:	0883      	lsrs	r3, r0, #2
    48a4:	428b      	cmp	r3, r1
    48a6:	d301      	bcc.n	48ac <__udivsi3+0xe4>
    48a8:	008b      	lsls	r3, r1, #2
    48aa:	1ac0      	subs	r0, r0, r3
    48ac:	4152      	adcs	r2, r2
    48ae:	0843      	lsrs	r3, r0, #1
    48b0:	428b      	cmp	r3, r1
    48b2:	d301      	bcc.n	48b8 <__udivsi3+0xf0>
    48b4:	004b      	lsls	r3, r1, #1
    48b6:	1ac0      	subs	r0, r0, r3
    48b8:	4152      	adcs	r2, r2
    48ba:	1a41      	subs	r1, r0, r1
    48bc:	d200      	bcs.n	48c0 <__udivsi3+0xf8>
    48be:	4601      	mov	r1, r0
    48c0:	4152      	adcs	r2, r2
    48c2:	4610      	mov	r0, r2
    48c4:	4770      	bx	lr
    48c6:	e7ff      	b.n	48c8 <__udivsi3+0x100>
    48c8:	b501      	push	{r0, lr}
    48ca:	2000      	movs	r0, #0
    48cc:	f000 f806 	bl	48dc <__aeabi_idiv0>
    48d0:	bd02      	pop	{r1, pc}
    48d2:	46c0      	nop			; (mov r8, r8)

000048d4 <__aeabi_uidivmod>:
    48d4:	2900      	cmp	r1, #0
    48d6:	d0f7      	beq.n	48c8 <__udivsi3+0x100>
    48d8:	e776      	b.n	47c8 <__udivsi3>
    48da:	4770      	bx	lr

000048dc <__aeabi_idiv0>:
    48dc:	4770      	bx	lr
    48de:	46c0      	nop			; (mov r8, r8)

000048e0 <__aeabi_lmul>:
    48e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    48e2:	46ce      	mov	lr, r9
    48e4:	4647      	mov	r7, r8
    48e6:	0415      	lsls	r5, r2, #16
    48e8:	0c2d      	lsrs	r5, r5, #16
    48ea:	002e      	movs	r6, r5
    48ec:	b580      	push	{r7, lr}
    48ee:	0407      	lsls	r7, r0, #16
    48f0:	0c14      	lsrs	r4, r2, #16
    48f2:	0c3f      	lsrs	r7, r7, #16
    48f4:	4699      	mov	r9, r3
    48f6:	0c03      	lsrs	r3, r0, #16
    48f8:	437e      	muls	r6, r7
    48fa:	435d      	muls	r5, r3
    48fc:	4367      	muls	r7, r4
    48fe:	4363      	muls	r3, r4
    4900:	197f      	adds	r7, r7, r5
    4902:	0c34      	lsrs	r4, r6, #16
    4904:	19e4      	adds	r4, r4, r7
    4906:	469c      	mov	ip, r3
    4908:	42a5      	cmp	r5, r4
    490a:	d903      	bls.n	4914 <__aeabi_lmul+0x34>
    490c:	2380      	movs	r3, #128	; 0x80
    490e:	025b      	lsls	r3, r3, #9
    4910:	4698      	mov	r8, r3
    4912:	44c4      	add	ip, r8
    4914:	464b      	mov	r3, r9
    4916:	4351      	muls	r1, r2
    4918:	4343      	muls	r3, r0
    491a:	0436      	lsls	r6, r6, #16
    491c:	0c36      	lsrs	r6, r6, #16
    491e:	0c25      	lsrs	r5, r4, #16
    4920:	0424      	lsls	r4, r4, #16
    4922:	4465      	add	r5, ip
    4924:	19a4      	adds	r4, r4, r6
    4926:	1859      	adds	r1, r3, r1
    4928:	1949      	adds	r1, r1, r5
    492a:	0020      	movs	r0, r4
    492c:	bc0c      	pop	{r2, r3}
    492e:	4690      	mov	r8, r2
    4930:	4699      	mov	r9, r3
    4932:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004934 <__libc_init_array>:
    4934:	b570      	push	{r4, r5, r6, lr}
    4936:	2600      	movs	r6, #0
    4938:	4d0c      	ldr	r5, [pc, #48]	; (496c <__libc_init_array+0x38>)
    493a:	4c0d      	ldr	r4, [pc, #52]	; (4970 <__libc_init_array+0x3c>)
    493c:	1b64      	subs	r4, r4, r5
    493e:	10a4      	asrs	r4, r4, #2
    4940:	42a6      	cmp	r6, r4
    4942:	d109      	bne.n	4958 <__libc_init_array+0x24>
    4944:	2600      	movs	r6, #0
    4946:	f001 fa11 	bl	5d6c <_init>
    494a:	4d0a      	ldr	r5, [pc, #40]	; (4974 <__libc_init_array+0x40>)
    494c:	4c0a      	ldr	r4, [pc, #40]	; (4978 <__libc_init_array+0x44>)
    494e:	1b64      	subs	r4, r4, r5
    4950:	10a4      	asrs	r4, r4, #2
    4952:	42a6      	cmp	r6, r4
    4954:	d105      	bne.n	4962 <__libc_init_array+0x2e>
    4956:	bd70      	pop	{r4, r5, r6, pc}
    4958:	00b3      	lsls	r3, r6, #2
    495a:	58eb      	ldr	r3, [r5, r3]
    495c:	4798      	blx	r3
    495e:	3601      	adds	r6, #1
    4960:	e7ee      	b.n	4940 <__libc_init_array+0xc>
    4962:	00b3      	lsls	r3, r6, #2
    4964:	58eb      	ldr	r3, [r5, r3]
    4966:	4798      	blx	r3
    4968:	3601      	adds	r6, #1
    496a:	e7f2      	b.n	4952 <__libc_init_array+0x1e>
    496c:	00005d78 	.word	0x00005d78
    4970:	00005d78 	.word	0x00005d78
    4974:	00005d78 	.word	0x00005d78
    4978:	00005d7c 	.word	0x00005d7c

0000497c <memcpy>:
    497c:	2300      	movs	r3, #0
    497e:	b510      	push	{r4, lr}
    4980:	429a      	cmp	r2, r3
    4982:	d100      	bne.n	4986 <memcpy+0xa>
    4984:	bd10      	pop	{r4, pc}
    4986:	5ccc      	ldrb	r4, [r1, r3]
    4988:	54c4      	strb	r4, [r0, r3]
    498a:	3301      	adds	r3, #1
    498c:	e7f8      	b.n	4980 <memcpy+0x4>

0000498e <memset>:
    498e:	0003      	movs	r3, r0
    4990:	1882      	adds	r2, r0, r2
    4992:	4293      	cmp	r3, r2
    4994:	d100      	bne.n	4998 <memset+0xa>
    4996:	4770      	bx	lr
    4998:	7019      	strb	r1, [r3, #0]
    499a:	3301      	adds	r3, #1
    499c:	e7f9      	b.n	4992 <memset+0x4>
	...

000049a0 <iprintf>:
    49a0:	b40f      	push	{r0, r1, r2, r3}
    49a2:	4b0b      	ldr	r3, [pc, #44]	; (49d0 <iprintf+0x30>)
    49a4:	b513      	push	{r0, r1, r4, lr}
    49a6:	681c      	ldr	r4, [r3, #0]
    49a8:	2c00      	cmp	r4, #0
    49aa:	d005      	beq.n	49b8 <iprintf+0x18>
    49ac:	69a3      	ldr	r3, [r4, #24]
    49ae:	2b00      	cmp	r3, #0
    49b0:	d102      	bne.n	49b8 <iprintf+0x18>
    49b2:	0020      	movs	r0, r4
    49b4:	f000 faf2 	bl	4f9c <__sinit>
    49b8:	ab05      	add	r3, sp, #20
    49ba:	9a04      	ldr	r2, [sp, #16]
    49bc:	68a1      	ldr	r1, [r4, #8]
    49be:	0020      	movs	r0, r4
    49c0:	9301      	str	r3, [sp, #4]
    49c2:	f000 fcc1 	bl	5348 <_vfiprintf_r>
    49c6:	bc16      	pop	{r1, r2, r4}
    49c8:	bc08      	pop	{r3}
    49ca:	b004      	add	sp, #16
    49cc:	4718      	bx	r3
    49ce:	46c0      	nop			; (mov r8, r8)
    49d0:	2000000c 	.word	0x2000000c

000049d4 <_puts_r>:
    49d4:	b570      	push	{r4, r5, r6, lr}
    49d6:	0005      	movs	r5, r0
    49d8:	000e      	movs	r6, r1
    49da:	2800      	cmp	r0, #0
    49dc:	d004      	beq.n	49e8 <_puts_r+0x14>
    49de:	6983      	ldr	r3, [r0, #24]
    49e0:	2b00      	cmp	r3, #0
    49e2:	d101      	bne.n	49e8 <_puts_r+0x14>
    49e4:	f000 fada 	bl	4f9c <__sinit>
    49e8:	69ab      	ldr	r3, [r5, #24]
    49ea:	68ac      	ldr	r4, [r5, #8]
    49ec:	2b00      	cmp	r3, #0
    49ee:	d102      	bne.n	49f6 <_puts_r+0x22>
    49f0:	0028      	movs	r0, r5
    49f2:	f000 fad3 	bl	4f9c <__sinit>
    49f6:	4b24      	ldr	r3, [pc, #144]	; (4a88 <_puts_r+0xb4>)
    49f8:	429c      	cmp	r4, r3
    49fa:	d10f      	bne.n	4a1c <_puts_r+0x48>
    49fc:	686c      	ldr	r4, [r5, #4]
    49fe:	89a3      	ldrh	r3, [r4, #12]
    4a00:	071b      	lsls	r3, r3, #28
    4a02:	d502      	bpl.n	4a0a <_puts_r+0x36>
    4a04:	6923      	ldr	r3, [r4, #16]
    4a06:	2b00      	cmp	r3, #0
    4a08:	d120      	bne.n	4a4c <_puts_r+0x78>
    4a0a:	0021      	movs	r1, r4
    4a0c:	0028      	movs	r0, r5
    4a0e:	f000 f957 	bl	4cc0 <__swsetup_r>
    4a12:	2800      	cmp	r0, #0
    4a14:	d01a      	beq.n	4a4c <_puts_r+0x78>
    4a16:	2001      	movs	r0, #1
    4a18:	4240      	negs	r0, r0
    4a1a:	bd70      	pop	{r4, r5, r6, pc}
    4a1c:	4b1b      	ldr	r3, [pc, #108]	; (4a8c <_puts_r+0xb8>)
    4a1e:	429c      	cmp	r4, r3
    4a20:	d101      	bne.n	4a26 <_puts_r+0x52>
    4a22:	68ac      	ldr	r4, [r5, #8]
    4a24:	e7eb      	b.n	49fe <_puts_r+0x2a>
    4a26:	4b1a      	ldr	r3, [pc, #104]	; (4a90 <_puts_r+0xbc>)
    4a28:	429c      	cmp	r4, r3
    4a2a:	d1e8      	bne.n	49fe <_puts_r+0x2a>
    4a2c:	68ec      	ldr	r4, [r5, #12]
    4a2e:	e7e6      	b.n	49fe <_puts_r+0x2a>
    4a30:	3b01      	subs	r3, #1
    4a32:	3601      	adds	r6, #1
    4a34:	60a3      	str	r3, [r4, #8]
    4a36:	2b00      	cmp	r3, #0
    4a38:	da04      	bge.n	4a44 <_puts_r+0x70>
    4a3a:	69a2      	ldr	r2, [r4, #24]
    4a3c:	4293      	cmp	r3, r2
    4a3e:	db16      	blt.n	4a6e <_puts_r+0x9a>
    4a40:	290a      	cmp	r1, #10
    4a42:	d014      	beq.n	4a6e <_puts_r+0x9a>
    4a44:	6823      	ldr	r3, [r4, #0]
    4a46:	1c5a      	adds	r2, r3, #1
    4a48:	6022      	str	r2, [r4, #0]
    4a4a:	7019      	strb	r1, [r3, #0]
    4a4c:	7831      	ldrb	r1, [r6, #0]
    4a4e:	68a3      	ldr	r3, [r4, #8]
    4a50:	2900      	cmp	r1, #0
    4a52:	d1ed      	bne.n	4a30 <_puts_r+0x5c>
    4a54:	3b01      	subs	r3, #1
    4a56:	60a3      	str	r3, [r4, #8]
    4a58:	2b00      	cmp	r3, #0
    4a5a:	da0f      	bge.n	4a7c <_puts_r+0xa8>
    4a5c:	0022      	movs	r2, r4
    4a5e:	310a      	adds	r1, #10
    4a60:	0028      	movs	r0, r5
    4a62:	f000 f8d7 	bl	4c14 <__swbuf_r>
    4a66:	1c43      	adds	r3, r0, #1
    4a68:	d0d5      	beq.n	4a16 <_puts_r+0x42>
    4a6a:	200a      	movs	r0, #10
    4a6c:	e7d5      	b.n	4a1a <_puts_r+0x46>
    4a6e:	0022      	movs	r2, r4
    4a70:	0028      	movs	r0, r5
    4a72:	f000 f8cf 	bl	4c14 <__swbuf_r>
    4a76:	1c43      	adds	r3, r0, #1
    4a78:	d1e8      	bne.n	4a4c <_puts_r+0x78>
    4a7a:	e7cc      	b.n	4a16 <_puts_r+0x42>
    4a7c:	200a      	movs	r0, #10
    4a7e:	6823      	ldr	r3, [r4, #0]
    4a80:	1c5a      	adds	r2, r3, #1
    4a82:	6022      	str	r2, [r4, #0]
    4a84:	7018      	strb	r0, [r3, #0]
    4a86:	e7c8      	b.n	4a1a <_puts_r+0x46>
    4a88:	00005cf8 	.word	0x00005cf8
    4a8c:	00005d18 	.word	0x00005d18
    4a90:	00005cd8 	.word	0x00005cd8

00004a94 <puts>:
    4a94:	b510      	push	{r4, lr}
    4a96:	4b03      	ldr	r3, [pc, #12]	; (4aa4 <puts+0x10>)
    4a98:	0001      	movs	r1, r0
    4a9a:	6818      	ldr	r0, [r3, #0]
    4a9c:	f7ff ff9a 	bl	49d4 <_puts_r>
    4aa0:	bd10      	pop	{r4, pc}
    4aa2:	46c0      	nop			; (mov r8, r8)
    4aa4:	2000000c 	.word	0x2000000c

00004aa8 <setbuf>:
    4aa8:	424a      	negs	r2, r1
    4aaa:	414a      	adcs	r2, r1
    4aac:	2380      	movs	r3, #128	; 0x80
    4aae:	b510      	push	{r4, lr}
    4ab0:	0052      	lsls	r2, r2, #1
    4ab2:	00db      	lsls	r3, r3, #3
    4ab4:	f000 f802 	bl	4abc <setvbuf>
    4ab8:	bd10      	pop	{r4, pc}
	...

00004abc <setvbuf>:
    4abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4abe:	001d      	movs	r5, r3
    4ac0:	4b4f      	ldr	r3, [pc, #316]	; (4c00 <setvbuf+0x144>)
    4ac2:	b085      	sub	sp, #20
    4ac4:	681e      	ldr	r6, [r3, #0]
    4ac6:	0004      	movs	r4, r0
    4ac8:	000f      	movs	r7, r1
    4aca:	9200      	str	r2, [sp, #0]
    4acc:	2e00      	cmp	r6, #0
    4ace:	d005      	beq.n	4adc <setvbuf+0x20>
    4ad0:	69b3      	ldr	r3, [r6, #24]
    4ad2:	2b00      	cmp	r3, #0
    4ad4:	d102      	bne.n	4adc <setvbuf+0x20>
    4ad6:	0030      	movs	r0, r6
    4ad8:	f000 fa60 	bl	4f9c <__sinit>
    4adc:	4b49      	ldr	r3, [pc, #292]	; (4c04 <setvbuf+0x148>)
    4ade:	429c      	cmp	r4, r3
    4ae0:	d150      	bne.n	4b84 <setvbuf+0xc8>
    4ae2:	6874      	ldr	r4, [r6, #4]
    4ae4:	9b00      	ldr	r3, [sp, #0]
    4ae6:	2b02      	cmp	r3, #2
    4ae8:	d005      	beq.n	4af6 <setvbuf+0x3a>
    4aea:	2b01      	cmp	r3, #1
    4aec:	d900      	bls.n	4af0 <setvbuf+0x34>
    4aee:	e084      	b.n	4bfa <setvbuf+0x13e>
    4af0:	2d00      	cmp	r5, #0
    4af2:	da00      	bge.n	4af6 <setvbuf+0x3a>
    4af4:	e081      	b.n	4bfa <setvbuf+0x13e>
    4af6:	0021      	movs	r1, r4
    4af8:	0030      	movs	r0, r6
    4afa:	f000 f9e1 	bl	4ec0 <_fflush_r>
    4afe:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4b00:	2900      	cmp	r1, #0
    4b02:	d008      	beq.n	4b16 <setvbuf+0x5a>
    4b04:	0023      	movs	r3, r4
    4b06:	3344      	adds	r3, #68	; 0x44
    4b08:	4299      	cmp	r1, r3
    4b0a:	d002      	beq.n	4b12 <setvbuf+0x56>
    4b0c:	0030      	movs	r0, r6
    4b0e:	f000 fb4b 	bl	51a8 <_free_r>
    4b12:	2300      	movs	r3, #0
    4b14:	6363      	str	r3, [r4, #52]	; 0x34
    4b16:	2300      	movs	r3, #0
    4b18:	61a3      	str	r3, [r4, #24]
    4b1a:	6063      	str	r3, [r4, #4]
    4b1c:	89a3      	ldrh	r3, [r4, #12]
    4b1e:	061b      	lsls	r3, r3, #24
    4b20:	d503      	bpl.n	4b2a <setvbuf+0x6e>
    4b22:	6921      	ldr	r1, [r4, #16]
    4b24:	0030      	movs	r0, r6
    4b26:	f000 fb3f 	bl	51a8 <_free_r>
    4b2a:	89a3      	ldrh	r3, [r4, #12]
    4b2c:	4a36      	ldr	r2, [pc, #216]	; (4c08 <setvbuf+0x14c>)
    4b2e:	4013      	ands	r3, r2
    4b30:	81a3      	strh	r3, [r4, #12]
    4b32:	9b00      	ldr	r3, [sp, #0]
    4b34:	2b02      	cmp	r3, #2
    4b36:	d05a      	beq.n	4bee <setvbuf+0x132>
    4b38:	ab03      	add	r3, sp, #12
    4b3a:	aa02      	add	r2, sp, #8
    4b3c:	0021      	movs	r1, r4
    4b3e:	0030      	movs	r0, r6
    4b40:	f000 fac2 	bl	50c8 <__swhatbuf_r>
    4b44:	89a3      	ldrh	r3, [r4, #12]
    4b46:	4318      	orrs	r0, r3
    4b48:	81a0      	strh	r0, [r4, #12]
    4b4a:	2d00      	cmp	r5, #0
    4b4c:	d124      	bne.n	4b98 <setvbuf+0xdc>
    4b4e:	9d02      	ldr	r5, [sp, #8]
    4b50:	0028      	movs	r0, r5
    4b52:	f000 fb1f 	bl	5194 <malloc>
    4b56:	9501      	str	r5, [sp, #4]
    4b58:	1e07      	subs	r7, r0, #0
    4b5a:	d142      	bne.n	4be2 <setvbuf+0x126>
    4b5c:	9b02      	ldr	r3, [sp, #8]
    4b5e:	9301      	str	r3, [sp, #4]
    4b60:	42ab      	cmp	r3, r5
    4b62:	d139      	bne.n	4bd8 <setvbuf+0x11c>
    4b64:	2001      	movs	r0, #1
    4b66:	4240      	negs	r0, r0
    4b68:	2302      	movs	r3, #2
    4b6a:	89a2      	ldrh	r2, [r4, #12]
    4b6c:	4313      	orrs	r3, r2
    4b6e:	81a3      	strh	r3, [r4, #12]
    4b70:	2300      	movs	r3, #0
    4b72:	60a3      	str	r3, [r4, #8]
    4b74:	0023      	movs	r3, r4
    4b76:	3347      	adds	r3, #71	; 0x47
    4b78:	6023      	str	r3, [r4, #0]
    4b7a:	6123      	str	r3, [r4, #16]
    4b7c:	2301      	movs	r3, #1
    4b7e:	6163      	str	r3, [r4, #20]
    4b80:	b005      	add	sp, #20
    4b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b84:	4b21      	ldr	r3, [pc, #132]	; (4c0c <setvbuf+0x150>)
    4b86:	429c      	cmp	r4, r3
    4b88:	d101      	bne.n	4b8e <setvbuf+0xd2>
    4b8a:	68b4      	ldr	r4, [r6, #8]
    4b8c:	e7aa      	b.n	4ae4 <setvbuf+0x28>
    4b8e:	4b20      	ldr	r3, [pc, #128]	; (4c10 <setvbuf+0x154>)
    4b90:	429c      	cmp	r4, r3
    4b92:	d1a7      	bne.n	4ae4 <setvbuf+0x28>
    4b94:	68f4      	ldr	r4, [r6, #12]
    4b96:	e7a5      	b.n	4ae4 <setvbuf+0x28>
    4b98:	2f00      	cmp	r7, #0
    4b9a:	d0d9      	beq.n	4b50 <setvbuf+0x94>
    4b9c:	69b3      	ldr	r3, [r6, #24]
    4b9e:	2b00      	cmp	r3, #0
    4ba0:	d102      	bne.n	4ba8 <setvbuf+0xec>
    4ba2:	0030      	movs	r0, r6
    4ba4:	f000 f9fa 	bl	4f9c <__sinit>
    4ba8:	9b00      	ldr	r3, [sp, #0]
    4baa:	2b01      	cmp	r3, #1
    4bac:	d103      	bne.n	4bb6 <setvbuf+0xfa>
    4bae:	89a3      	ldrh	r3, [r4, #12]
    4bb0:	9a00      	ldr	r2, [sp, #0]
    4bb2:	431a      	orrs	r2, r3
    4bb4:	81a2      	strh	r2, [r4, #12]
    4bb6:	2008      	movs	r0, #8
    4bb8:	89a3      	ldrh	r3, [r4, #12]
    4bba:	6027      	str	r7, [r4, #0]
    4bbc:	6127      	str	r7, [r4, #16]
    4bbe:	6165      	str	r5, [r4, #20]
    4bc0:	4018      	ands	r0, r3
    4bc2:	d018      	beq.n	4bf6 <setvbuf+0x13a>
    4bc4:	2001      	movs	r0, #1
    4bc6:	4018      	ands	r0, r3
    4bc8:	2300      	movs	r3, #0
    4bca:	4298      	cmp	r0, r3
    4bcc:	d011      	beq.n	4bf2 <setvbuf+0x136>
    4bce:	426d      	negs	r5, r5
    4bd0:	60a3      	str	r3, [r4, #8]
    4bd2:	61a5      	str	r5, [r4, #24]
    4bd4:	0018      	movs	r0, r3
    4bd6:	e7d3      	b.n	4b80 <setvbuf+0xc4>
    4bd8:	9801      	ldr	r0, [sp, #4]
    4bda:	f000 fadb 	bl	5194 <malloc>
    4bde:	1e07      	subs	r7, r0, #0
    4be0:	d0c0      	beq.n	4b64 <setvbuf+0xa8>
    4be2:	2380      	movs	r3, #128	; 0x80
    4be4:	89a2      	ldrh	r2, [r4, #12]
    4be6:	9d01      	ldr	r5, [sp, #4]
    4be8:	4313      	orrs	r3, r2
    4bea:	81a3      	strh	r3, [r4, #12]
    4bec:	e7d6      	b.n	4b9c <setvbuf+0xe0>
    4bee:	2000      	movs	r0, #0
    4bf0:	e7ba      	b.n	4b68 <setvbuf+0xac>
    4bf2:	60a5      	str	r5, [r4, #8]
    4bf4:	e7c4      	b.n	4b80 <setvbuf+0xc4>
    4bf6:	60a0      	str	r0, [r4, #8]
    4bf8:	e7c2      	b.n	4b80 <setvbuf+0xc4>
    4bfa:	2001      	movs	r0, #1
    4bfc:	4240      	negs	r0, r0
    4bfe:	e7bf      	b.n	4b80 <setvbuf+0xc4>
    4c00:	2000000c 	.word	0x2000000c
    4c04:	00005cf8 	.word	0x00005cf8
    4c08:	fffff35c 	.word	0xfffff35c
    4c0c:	00005d18 	.word	0x00005d18
    4c10:	00005cd8 	.word	0x00005cd8

00004c14 <__swbuf_r>:
    4c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c16:	0005      	movs	r5, r0
    4c18:	000e      	movs	r6, r1
    4c1a:	0014      	movs	r4, r2
    4c1c:	2800      	cmp	r0, #0
    4c1e:	d004      	beq.n	4c2a <__swbuf_r+0x16>
    4c20:	6983      	ldr	r3, [r0, #24]
    4c22:	2b00      	cmp	r3, #0
    4c24:	d101      	bne.n	4c2a <__swbuf_r+0x16>
    4c26:	f000 f9b9 	bl	4f9c <__sinit>
    4c2a:	4b22      	ldr	r3, [pc, #136]	; (4cb4 <__swbuf_r+0xa0>)
    4c2c:	429c      	cmp	r4, r3
    4c2e:	d12d      	bne.n	4c8c <__swbuf_r+0x78>
    4c30:	686c      	ldr	r4, [r5, #4]
    4c32:	69a3      	ldr	r3, [r4, #24]
    4c34:	60a3      	str	r3, [r4, #8]
    4c36:	89a3      	ldrh	r3, [r4, #12]
    4c38:	071b      	lsls	r3, r3, #28
    4c3a:	d531      	bpl.n	4ca0 <__swbuf_r+0x8c>
    4c3c:	6923      	ldr	r3, [r4, #16]
    4c3e:	2b00      	cmp	r3, #0
    4c40:	d02e      	beq.n	4ca0 <__swbuf_r+0x8c>
    4c42:	6823      	ldr	r3, [r4, #0]
    4c44:	6922      	ldr	r2, [r4, #16]
    4c46:	b2f7      	uxtb	r7, r6
    4c48:	1a98      	subs	r0, r3, r2
    4c4a:	6963      	ldr	r3, [r4, #20]
    4c4c:	b2f6      	uxtb	r6, r6
    4c4e:	4298      	cmp	r0, r3
    4c50:	db05      	blt.n	4c5e <__swbuf_r+0x4a>
    4c52:	0021      	movs	r1, r4
    4c54:	0028      	movs	r0, r5
    4c56:	f000 f933 	bl	4ec0 <_fflush_r>
    4c5a:	2800      	cmp	r0, #0
    4c5c:	d126      	bne.n	4cac <__swbuf_r+0x98>
    4c5e:	68a3      	ldr	r3, [r4, #8]
    4c60:	3001      	adds	r0, #1
    4c62:	3b01      	subs	r3, #1
    4c64:	60a3      	str	r3, [r4, #8]
    4c66:	6823      	ldr	r3, [r4, #0]
    4c68:	1c5a      	adds	r2, r3, #1
    4c6a:	6022      	str	r2, [r4, #0]
    4c6c:	701f      	strb	r7, [r3, #0]
    4c6e:	6963      	ldr	r3, [r4, #20]
    4c70:	4298      	cmp	r0, r3
    4c72:	d004      	beq.n	4c7e <__swbuf_r+0x6a>
    4c74:	89a3      	ldrh	r3, [r4, #12]
    4c76:	07db      	lsls	r3, r3, #31
    4c78:	d51a      	bpl.n	4cb0 <__swbuf_r+0x9c>
    4c7a:	2e0a      	cmp	r6, #10
    4c7c:	d118      	bne.n	4cb0 <__swbuf_r+0x9c>
    4c7e:	0021      	movs	r1, r4
    4c80:	0028      	movs	r0, r5
    4c82:	f000 f91d 	bl	4ec0 <_fflush_r>
    4c86:	2800      	cmp	r0, #0
    4c88:	d012      	beq.n	4cb0 <__swbuf_r+0x9c>
    4c8a:	e00f      	b.n	4cac <__swbuf_r+0x98>
    4c8c:	4b0a      	ldr	r3, [pc, #40]	; (4cb8 <__swbuf_r+0xa4>)
    4c8e:	429c      	cmp	r4, r3
    4c90:	d101      	bne.n	4c96 <__swbuf_r+0x82>
    4c92:	68ac      	ldr	r4, [r5, #8]
    4c94:	e7cd      	b.n	4c32 <__swbuf_r+0x1e>
    4c96:	4b09      	ldr	r3, [pc, #36]	; (4cbc <__swbuf_r+0xa8>)
    4c98:	429c      	cmp	r4, r3
    4c9a:	d1ca      	bne.n	4c32 <__swbuf_r+0x1e>
    4c9c:	68ec      	ldr	r4, [r5, #12]
    4c9e:	e7c8      	b.n	4c32 <__swbuf_r+0x1e>
    4ca0:	0021      	movs	r1, r4
    4ca2:	0028      	movs	r0, r5
    4ca4:	f000 f80c 	bl	4cc0 <__swsetup_r>
    4ca8:	2800      	cmp	r0, #0
    4caa:	d0ca      	beq.n	4c42 <__swbuf_r+0x2e>
    4cac:	2601      	movs	r6, #1
    4cae:	4276      	negs	r6, r6
    4cb0:	0030      	movs	r0, r6
    4cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4cb4:	00005cf8 	.word	0x00005cf8
    4cb8:	00005d18 	.word	0x00005d18
    4cbc:	00005cd8 	.word	0x00005cd8

00004cc0 <__swsetup_r>:
    4cc0:	4b36      	ldr	r3, [pc, #216]	; (4d9c <__swsetup_r+0xdc>)
    4cc2:	b570      	push	{r4, r5, r6, lr}
    4cc4:	681d      	ldr	r5, [r3, #0]
    4cc6:	0006      	movs	r6, r0
    4cc8:	000c      	movs	r4, r1
    4cca:	2d00      	cmp	r5, #0
    4ccc:	d005      	beq.n	4cda <__swsetup_r+0x1a>
    4cce:	69ab      	ldr	r3, [r5, #24]
    4cd0:	2b00      	cmp	r3, #0
    4cd2:	d102      	bne.n	4cda <__swsetup_r+0x1a>
    4cd4:	0028      	movs	r0, r5
    4cd6:	f000 f961 	bl	4f9c <__sinit>
    4cda:	4b31      	ldr	r3, [pc, #196]	; (4da0 <__swsetup_r+0xe0>)
    4cdc:	429c      	cmp	r4, r3
    4cde:	d10f      	bne.n	4d00 <__swsetup_r+0x40>
    4ce0:	686c      	ldr	r4, [r5, #4]
    4ce2:	230c      	movs	r3, #12
    4ce4:	5ee2      	ldrsh	r2, [r4, r3]
    4ce6:	b293      	uxth	r3, r2
    4ce8:	0719      	lsls	r1, r3, #28
    4cea:	d42d      	bmi.n	4d48 <__swsetup_r+0x88>
    4cec:	06d9      	lsls	r1, r3, #27
    4cee:	d411      	bmi.n	4d14 <__swsetup_r+0x54>
    4cf0:	2309      	movs	r3, #9
    4cf2:	2001      	movs	r0, #1
    4cf4:	6033      	str	r3, [r6, #0]
    4cf6:	3337      	adds	r3, #55	; 0x37
    4cf8:	4313      	orrs	r3, r2
    4cfa:	81a3      	strh	r3, [r4, #12]
    4cfc:	4240      	negs	r0, r0
    4cfe:	bd70      	pop	{r4, r5, r6, pc}
    4d00:	4b28      	ldr	r3, [pc, #160]	; (4da4 <__swsetup_r+0xe4>)
    4d02:	429c      	cmp	r4, r3
    4d04:	d101      	bne.n	4d0a <__swsetup_r+0x4a>
    4d06:	68ac      	ldr	r4, [r5, #8]
    4d08:	e7eb      	b.n	4ce2 <__swsetup_r+0x22>
    4d0a:	4b27      	ldr	r3, [pc, #156]	; (4da8 <__swsetup_r+0xe8>)
    4d0c:	429c      	cmp	r4, r3
    4d0e:	d1e8      	bne.n	4ce2 <__swsetup_r+0x22>
    4d10:	68ec      	ldr	r4, [r5, #12]
    4d12:	e7e6      	b.n	4ce2 <__swsetup_r+0x22>
    4d14:	075b      	lsls	r3, r3, #29
    4d16:	d513      	bpl.n	4d40 <__swsetup_r+0x80>
    4d18:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4d1a:	2900      	cmp	r1, #0
    4d1c:	d008      	beq.n	4d30 <__swsetup_r+0x70>
    4d1e:	0023      	movs	r3, r4
    4d20:	3344      	adds	r3, #68	; 0x44
    4d22:	4299      	cmp	r1, r3
    4d24:	d002      	beq.n	4d2c <__swsetup_r+0x6c>
    4d26:	0030      	movs	r0, r6
    4d28:	f000 fa3e 	bl	51a8 <_free_r>
    4d2c:	2300      	movs	r3, #0
    4d2e:	6363      	str	r3, [r4, #52]	; 0x34
    4d30:	2224      	movs	r2, #36	; 0x24
    4d32:	89a3      	ldrh	r3, [r4, #12]
    4d34:	4393      	bics	r3, r2
    4d36:	81a3      	strh	r3, [r4, #12]
    4d38:	2300      	movs	r3, #0
    4d3a:	6063      	str	r3, [r4, #4]
    4d3c:	6923      	ldr	r3, [r4, #16]
    4d3e:	6023      	str	r3, [r4, #0]
    4d40:	2308      	movs	r3, #8
    4d42:	89a2      	ldrh	r2, [r4, #12]
    4d44:	4313      	orrs	r3, r2
    4d46:	81a3      	strh	r3, [r4, #12]
    4d48:	6923      	ldr	r3, [r4, #16]
    4d4a:	2b00      	cmp	r3, #0
    4d4c:	d10b      	bne.n	4d66 <__swsetup_r+0xa6>
    4d4e:	21a0      	movs	r1, #160	; 0xa0
    4d50:	2280      	movs	r2, #128	; 0x80
    4d52:	89a3      	ldrh	r3, [r4, #12]
    4d54:	0089      	lsls	r1, r1, #2
    4d56:	0092      	lsls	r2, r2, #2
    4d58:	400b      	ands	r3, r1
    4d5a:	4293      	cmp	r3, r2
    4d5c:	d003      	beq.n	4d66 <__swsetup_r+0xa6>
    4d5e:	0021      	movs	r1, r4
    4d60:	0030      	movs	r0, r6
    4d62:	f000 f9d9 	bl	5118 <__smakebuf_r>
    4d66:	2301      	movs	r3, #1
    4d68:	89a2      	ldrh	r2, [r4, #12]
    4d6a:	4013      	ands	r3, r2
    4d6c:	d011      	beq.n	4d92 <__swsetup_r+0xd2>
    4d6e:	2300      	movs	r3, #0
    4d70:	60a3      	str	r3, [r4, #8]
    4d72:	6963      	ldr	r3, [r4, #20]
    4d74:	425b      	negs	r3, r3
    4d76:	61a3      	str	r3, [r4, #24]
    4d78:	2000      	movs	r0, #0
    4d7a:	6923      	ldr	r3, [r4, #16]
    4d7c:	4283      	cmp	r3, r0
    4d7e:	d1be      	bne.n	4cfe <__swsetup_r+0x3e>
    4d80:	230c      	movs	r3, #12
    4d82:	5ee2      	ldrsh	r2, [r4, r3]
    4d84:	0613      	lsls	r3, r2, #24
    4d86:	d5ba      	bpl.n	4cfe <__swsetup_r+0x3e>
    4d88:	2340      	movs	r3, #64	; 0x40
    4d8a:	4313      	orrs	r3, r2
    4d8c:	81a3      	strh	r3, [r4, #12]
    4d8e:	3801      	subs	r0, #1
    4d90:	e7b5      	b.n	4cfe <__swsetup_r+0x3e>
    4d92:	0792      	lsls	r2, r2, #30
    4d94:	d400      	bmi.n	4d98 <__swsetup_r+0xd8>
    4d96:	6963      	ldr	r3, [r4, #20]
    4d98:	60a3      	str	r3, [r4, #8]
    4d9a:	e7ed      	b.n	4d78 <__swsetup_r+0xb8>
    4d9c:	2000000c 	.word	0x2000000c
    4da0:	00005cf8 	.word	0x00005cf8
    4da4:	00005d18 	.word	0x00005d18
    4da8:	00005cd8 	.word	0x00005cd8

00004dac <__sflush_r>:
    4dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4dae:	898a      	ldrh	r2, [r1, #12]
    4db0:	0005      	movs	r5, r0
    4db2:	000c      	movs	r4, r1
    4db4:	0713      	lsls	r3, r2, #28
    4db6:	d460      	bmi.n	4e7a <__sflush_r+0xce>
    4db8:	684b      	ldr	r3, [r1, #4]
    4dba:	2b00      	cmp	r3, #0
    4dbc:	dc04      	bgt.n	4dc8 <__sflush_r+0x1c>
    4dbe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4dc0:	2b00      	cmp	r3, #0
    4dc2:	dc01      	bgt.n	4dc8 <__sflush_r+0x1c>
    4dc4:	2000      	movs	r0, #0
    4dc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4dc8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4dca:	2f00      	cmp	r7, #0
    4dcc:	d0fa      	beq.n	4dc4 <__sflush_r+0x18>
    4dce:	2300      	movs	r3, #0
    4dd0:	682e      	ldr	r6, [r5, #0]
    4dd2:	602b      	str	r3, [r5, #0]
    4dd4:	2380      	movs	r3, #128	; 0x80
    4dd6:	015b      	lsls	r3, r3, #5
    4dd8:	401a      	ands	r2, r3
    4dda:	d034      	beq.n	4e46 <__sflush_r+0x9a>
    4ddc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4dde:	89a3      	ldrh	r3, [r4, #12]
    4de0:	075b      	lsls	r3, r3, #29
    4de2:	d506      	bpl.n	4df2 <__sflush_r+0x46>
    4de4:	6863      	ldr	r3, [r4, #4]
    4de6:	1ac0      	subs	r0, r0, r3
    4de8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4dea:	2b00      	cmp	r3, #0
    4dec:	d001      	beq.n	4df2 <__sflush_r+0x46>
    4dee:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4df0:	1ac0      	subs	r0, r0, r3
    4df2:	0002      	movs	r2, r0
    4df4:	6a21      	ldr	r1, [r4, #32]
    4df6:	2300      	movs	r3, #0
    4df8:	0028      	movs	r0, r5
    4dfa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4dfc:	47b8      	blx	r7
    4dfe:	89a1      	ldrh	r1, [r4, #12]
    4e00:	1c43      	adds	r3, r0, #1
    4e02:	d106      	bne.n	4e12 <__sflush_r+0x66>
    4e04:	682b      	ldr	r3, [r5, #0]
    4e06:	2b1d      	cmp	r3, #29
    4e08:	d831      	bhi.n	4e6e <__sflush_r+0xc2>
    4e0a:	4a2c      	ldr	r2, [pc, #176]	; (4ebc <__sflush_r+0x110>)
    4e0c:	40da      	lsrs	r2, r3
    4e0e:	07d3      	lsls	r3, r2, #31
    4e10:	d52d      	bpl.n	4e6e <__sflush_r+0xc2>
    4e12:	2300      	movs	r3, #0
    4e14:	6063      	str	r3, [r4, #4]
    4e16:	6923      	ldr	r3, [r4, #16]
    4e18:	6023      	str	r3, [r4, #0]
    4e1a:	04cb      	lsls	r3, r1, #19
    4e1c:	d505      	bpl.n	4e2a <__sflush_r+0x7e>
    4e1e:	1c43      	adds	r3, r0, #1
    4e20:	d102      	bne.n	4e28 <__sflush_r+0x7c>
    4e22:	682b      	ldr	r3, [r5, #0]
    4e24:	2b00      	cmp	r3, #0
    4e26:	d100      	bne.n	4e2a <__sflush_r+0x7e>
    4e28:	6560      	str	r0, [r4, #84]	; 0x54
    4e2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4e2c:	602e      	str	r6, [r5, #0]
    4e2e:	2900      	cmp	r1, #0
    4e30:	d0c8      	beq.n	4dc4 <__sflush_r+0x18>
    4e32:	0023      	movs	r3, r4
    4e34:	3344      	adds	r3, #68	; 0x44
    4e36:	4299      	cmp	r1, r3
    4e38:	d002      	beq.n	4e40 <__sflush_r+0x94>
    4e3a:	0028      	movs	r0, r5
    4e3c:	f000 f9b4 	bl	51a8 <_free_r>
    4e40:	2000      	movs	r0, #0
    4e42:	6360      	str	r0, [r4, #52]	; 0x34
    4e44:	e7bf      	b.n	4dc6 <__sflush_r+0x1a>
    4e46:	2301      	movs	r3, #1
    4e48:	6a21      	ldr	r1, [r4, #32]
    4e4a:	0028      	movs	r0, r5
    4e4c:	47b8      	blx	r7
    4e4e:	1c43      	adds	r3, r0, #1
    4e50:	d1c5      	bne.n	4dde <__sflush_r+0x32>
    4e52:	682b      	ldr	r3, [r5, #0]
    4e54:	2b00      	cmp	r3, #0
    4e56:	d0c2      	beq.n	4dde <__sflush_r+0x32>
    4e58:	2b1d      	cmp	r3, #29
    4e5a:	d001      	beq.n	4e60 <__sflush_r+0xb4>
    4e5c:	2b16      	cmp	r3, #22
    4e5e:	d101      	bne.n	4e64 <__sflush_r+0xb8>
    4e60:	602e      	str	r6, [r5, #0]
    4e62:	e7af      	b.n	4dc4 <__sflush_r+0x18>
    4e64:	2340      	movs	r3, #64	; 0x40
    4e66:	89a2      	ldrh	r2, [r4, #12]
    4e68:	4313      	orrs	r3, r2
    4e6a:	81a3      	strh	r3, [r4, #12]
    4e6c:	e7ab      	b.n	4dc6 <__sflush_r+0x1a>
    4e6e:	2340      	movs	r3, #64	; 0x40
    4e70:	430b      	orrs	r3, r1
    4e72:	2001      	movs	r0, #1
    4e74:	81a3      	strh	r3, [r4, #12]
    4e76:	4240      	negs	r0, r0
    4e78:	e7a5      	b.n	4dc6 <__sflush_r+0x1a>
    4e7a:	690f      	ldr	r7, [r1, #16]
    4e7c:	2f00      	cmp	r7, #0
    4e7e:	d0a1      	beq.n	4dc4 <__sflush_r+0x18>
    4e80:	680b      	ldr	r3, [r1, #0]
    4e82:	600f      	str	r7, [r1, #0]
    4e84:	1bdb      	subs	r3, r3, r7
    4e86:	9301      	str	r3, [sp, #4]
    4e88:	2300      	movs	r3, #0
    4e8a:	0792      	lsls	r2, r2, #30
    4e8c:	d100      	bne.n	4e90 <__sflush_r+0xe4>
    4e8e:	694b      	ldr	r3, [r1, #20]
    4e90:	60a3      	str	r3, [r4, #8]
    4e92:	9b01      	ldr	r3, [sp, #4]
    4e94:	2b00      	cmp	r3, #0
    4e96:	dc00      	bgt.n	4e9a <__sflush_r+0xee>
    4e98:	e794      	b.n	4dc4 <__sflush_r+0x18>
    4e9a:	9b01      	ldr	r3, [sp, #4]
    4e9c:	003a      	movs	r2, r7
    4e9e:	6a21      	ldr	r1, [r4, #32]
    4ea0:	0028      	movs	r0, r5
    4ea2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4ea4:	47b0      	blx	r6
    4ea6:	2800      	cmp	r0, #0
    4ea8:	dc03      	bgt.n	4eb2 <__sflush_r+0x106>
    4eaa:	2340      	movs	r3, #64	; 0x40
    4eac:	89a2      	ldrh	r2, [r4, #12]
    4eae:	4313      	orrs	r3, r2
    4eb0:	e7df      	b.n	4e72 <__sflush_r+0xc6>
    4eb2:	9b01      	ldr	r3, [sp, #4]
    4eb4:	183f      	adds	r7, r7, r0
    4eb6:	1a1b      	subs	r3, r3, r0
    4eb8:	9301      	str	r3, [sp, #4]
    4eba:	e7ea      	b.n	4e92 <__sflush_r+0xe6>
    4ebc:	20400001 	.word	0x20400001

00004ec0 <_fflush_r>:
    4ec0:	690b      	ldr	r3, [r1, #16]
    4ec2:	b570      	push	{r4, r5, r6, lr}
    4ec4:	0005      	movs	r5, r0
    4ec6:	000c      	movs	r4, r1
    4ec8:	2b00      	cmp	r3, #0
    4eca:	d101      	bne.n	4ed0 <_fflush_r+0x10>
    4ecc:	2000      	movs	r0, #0
    4ece:	bd70      	pop	{r4, r5, r6, pc}
    4ed0:	2800      	cmp	r0, #0
    4ed2:	d004      	beq.n	4ede <_fflush_r+0x1e>
    4ed4:	6983      	ldr	r3, [r0, #24]
    4ed6:	2b00      	cmp	r3, #0
    4ed8:	d101      	bne.n	4ede <_fflush_r+0x1e>
    4eda:	f000 f85f 	bl	4f9c <__sinit>
    4ede:	4b0b      	ldr	r3, [pc, #44]	; (4f0c <_fflush_r+0x4c>)
    4ee0:	429c      	cmp	r4, r3
    4ee2:	d109      	bne.n	4ef8 <_fflush_r+0x38>
    4ee4:	686c      	ldr	r4, [r5, #4]
    4ee6:	220c      	movs	r2, #12
    4ee8:	5ea3      	ldrsh	r3, [r4, r2]
    4eea:	2b00      	cmp	r3, #0
    4eec:	d0ee      	beq.n	4ecc <_fflush_r+0xc>
    4eee:	0021      	movs	r1, r4
    4ef0:	0028      	movs	r0, r5
    4ef2:	f7ff ff5b 	bl	4dac <__sflush_r>
    4ef6:	e7ea      	b.n	4ece <_fflush_r+0xe>
    4ef8:	4b05      	ldr	r3, [pc, #20]	; (4f10 <_fflush_r+0x50>)
    4efa:	429c      	cmp	r4, r3
    4efc:	d101      	bne.n	4f02 <_fflush_r+0x42>
    4efe:	68ac      	ldr	r4, [r5, #8]
    4f00:	e7f1      	b.n	4ee6 <_fflush_r+0x26>
    4f02:	4b04      	ldr	r3, [pc, #16]	; (4f14 <_fflush_r+0x54>)
    4f04:	429c      	cmp	r4, r3
    4f06:	d1ee      	bne.n	4ee6 <_fflush_r+0x26>
    4f08:	68ec      	ldr	r4, [r5, #12]
    4f0a:	e7ec      	b.n	4ee6 <_fflush_r+0x26>
    4f0c:	00005cf8 	.word	0x00005cf8
    4f10:	00005d18 	.word	0x00005d18
    4f14:	00005cd8 	.word	0x00005cd8

00004f18 <_cleanup_r>:
    4f18:	b510      	push	{r4, lr}
    4f1a:	4902      	ldr	r1, [pc, #8]	; (4f24 <_cleanup_r+0xc>)
    4f1c:	f000 f8b2 	bl	5084 <_fwalk_reent>
    4f20:	bd10      	pop	{r4, pc}
    4f22:	46c0      	nop			; (mov r8, r8)
    4f24:	00004ec1 	.word	0x00004ec1

00004f28 <std.isra.0>:
    4f28:	2300      	movs	r3, #0
    4f2a:	b510      	push	{r4, lr}
    4f2c:	0004      	movs	r4, r0
    4f2e:	6003      	str	r3, [r0, #0]
    4f30:	6043      	str	r3, [r0, #4]
    4f32:	6083      	str	r3, [r0, #8]
    4f34:	8181      	strh	r1, [r0, #12]
    4f36:	6643      	str	r3, [r0, #100]	; 0x64
    4f38:	81c2      	strh	r2, [r0, #14]
    4f3a:	6103      	str	r3, [r0, #16]
    4f3c:	6143      	str	r3, [r0, #20]
    4f3e:	6183      	str	r3, [r0, #24]
    4f40:	0019      	movs	r1, r3
    4f42:	2208      	movs	r2, #8
    4f44:	305c      	adds	r0, #92	; 0x5c
    4f46:	f7ff fd22 	bl	498e <memset>
    4f4a:	4b05      	ldr	r3, [pc, #20]	; (4f60 <std.isra.0+0x38>)
    4f4c:	6224      	str	r4, [r4, #32]
    4f4e:	6263      	str	r3, [r4, #36]	; 0x24
    4f50:	4b04      	ldr	r3, [pc, #16]	; (4f64 <std.isra.0+0x3c>)
    4f52:	62a3      	str	r3, [r4, #40]	; 0x28
    4f54:	4b04      	ldr	r3, [pc, #16]	; (4f68 <std.isra.0+0x40>)
    4f56:	62e3      	str	r3, [r4, #44]	; 0x2c
    4f58:	4b04      	ldr	r3, [pc, #16]	; (4f6c <std.isra.0+0x44>)
    4f5a:	6323      	str	r3, [r4, #48]	; 0x30
    4f5c:	bd10      	pop	{r4, pc}
    4f5e:	46c0      	nop			; (mov r8, r8)
    4f60:	000058b5 	.word	0x000058b5
    4f64:	000058dd 	.word	0x000058dd
    4f68:	00005915 	.word	0x00005915
    4f6c:	00005941 	.word	0x00005941

00004f70 <__sfmoreglue>:
    4f70:	b570      	push	{r4, r5, r6, lr}
    4f72:	2568      	movs	r5, #104	; 0x68
    4f74:	1e4a      	subs	r2, r1, #1
    4f76:	4355      	muls	r5, r2
    4f78:	000e      	movs	r6, r1
    4f7a:	0029      	movs	r1, r5
    4f7c:	3174      	adds	r1, #116	; 0x74
    4f7e:	f000 f95d 	bl	523c <_malloc_r>
    4f82:	1e04      	subs	r4, r0, #0
    4f84:	d008      	beq.n	4f98 <__sfmoreglue+0x28>
    4f86:	2100      	movs	r1, #0
    4f88:	002a      	movs	r2, r5
    4f8a:	6001      	str	r1, [r0, #0]
    4f8c:	6046      	str	r6, [r0, #4]
    4f8e:	300c      	adds	r0, #12
    4f90:	60a0      	str	r0, [r4, #8]
    4f92:	3268      	adds	r2, #104	; 0x68
    4f94:	f7ff fcfb 	bl	498e <memset>
    4f98:	0020      	movs	r0, r4
    4f9a:	bd70      	pop	{r4, r5, r6, pc}

00004f9c <__sinit>:
    4f9c:	6983      	ldr	r3, [r0, #24]
    4f9e:	b513      	push	{r0, r1, r4, lr}
    4fa0:	0004      	movs	r4, r0
    4fa2:	2b00      	cmp	r3, #0
    4fa4:	d128      	bne.n	4ff8 <__sinit+0x5c>
    4fa6:	6483      	str	r3, [r0, #72]	; 0x48
    4fa8:	64c3      	str	r3, [r0, #76]	; 0x4c
    4faa:	6503      	str	r3, [r0, #80]	; 0x50
    4fac:	4b13      	ldr	r3, [pc, #76]	; (4ffc <__sinit+0x60>)
    4fae:	4a14      	ldr	r2, [pc, #80]	; (5000 <__sinit+0x64>)
    4fb0:	681b      	ldr	r3, [r3, #0]
    4fb2:	6282      	str	r2, [r0, #40]	; 0x28
    4fb4:	9301      	str	r3, [sp, #4]
    4fb6:	4298      	cmp	r0, r3
    4fb8:	d101      	bne.n	4fbe <__sinit+0x22>
    4fba:	2301      	movs	r3, #1
    4fbc:	6183      	str	r3, [r0, #24]
    4fbe:	0020      	movs	r0, r4
    4fc0:	f000 f820 	bl	5004 <__sfp>
    4fc4:	6060      	str	r0, [r4, #4]
    4fc6:	0020      	movs	r0, r4
    4fc8:	f000 f81c 	bl	5004 <__sfp>
    4fcc:	60a0      	str	r0, [r4, #8]
    4fce:	0020      	movs	r0, r4
    4fd0:	f000 f818 	bl	5004 <__sfp>
    4fd4:	2200      	movs	r2, #0
    4fd6:	60e0      	str	r0, [r4, #12]
    4fd8:	2104      	movs	r1, #4
    4fda:	6860      	ldr	r0, [r4, #4]
    4fdc:	f7ff ffa4 	bl	4f28 <std.isra.0>
    4fe0:	2201      	movs	r2, #1
    4fe2:	2109      	movs	r1, #9
    4fe4:	68a0      	ldr	r0, [r4, #8]
    4fe6:	f7ff ff9f 	bl	4f28 <std.isra.0>
    4fea:	2202      	movs	r2, #2
    4fec:	2112      	movs	r1, #18
    4fee:	68e0      	ldr	r0, [r4, #12]
    4ff0:	f7ff ff9a 	bl	4f28 <std.isra.0>
    4ff4:	2301      	movs	r3, #1
    4ff6:	61a3      	str	r3, [r4, #24]
    4ff8:	bd13      	pop	{r0, r1, r4, pc}
    4ffa:	46c0      	nop			; (mov r8, r8)
    4ffc:	00005cd4 	.word	0x00005cd4
    5000:	00004f19 	.word	0x00004f19

00005004 <__sfp>:
    5004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5006:	4b1e      	ldr	r3, [pc, #120]	; (5080 <__sfp+0x7c>)
    5008:	0007      	movs	r7, r0
    500a:	681e      	ldr	r6, [r3, #0]
    500c:	69b3      	ldr	r3, [r6, #24]
    500e:	2b00      	cmp	r3, #0
    5010:	d102      	bne.n	5018 <__sfp+0x14>
    5012:	0030      	movs	r0, r6
    5014:	f7ff ffc2 	bl	4f9c <__sinit>
    5018:	3648      	adds	r6, #72	; 0x48
    501a:	68b4      	ldr	r4, [r6, #8]
    501c:	6873      	ldr	r3, [r6, #4]
    501e:	3b01      	subs	r3, #1
    5020:	d504      	bpl.n	502c <__sfp+0x28>
    5022:	6833      	ldr	r3, [r6, #0]
    5024:	2b00      	cmp	r3, #0
    5026:	d007      	beq.n	5038 <__sfp+0x34>
    5028:	6836      	ldr	r6, [r6, #0]
    502a:	e7f6      	b.n	501a <__sfp+0x16>
    502c:	220c      	movs	r2, #12
    502e:	5ea5      	ldrsh	r5, [r4, r2]
    5030:	2d00      	cmp	r5, #0
    5032:	d00d      	beq.n	5050 <__sfp+0x4c>
    5034:	3468      	adds	r4, #104	; 0x68
    5036:	e7f2      	b.n	501e <__sfp+0x1a>
    5038:	2104      	movs	r1, #4
    503a:	0038      	movs	r0, r7
    503c:	f7ff ff98 	bl	4f70 <__sfmoreglue>
    5040:	6030      	str	r0, [r6, #0]
    5042:	2800      	cmp	r0, #0
    5044:	d1f0      	bne.n	5028 <__sfp+0x24>
    5046:	230c      	movs	r3, #12
    5048:	0004      	movs	r4, r0
    504a:	603b      	str	r3, [r7, #0]
    504c:	0020      	movs	r0, r4
    504e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5050:	2301      	movs	r3, #1
    5052:	0020      	movs	r0, r4
    5054:	425b      	negs	r3, r3
    5056:	81e3      	strh	r3, [r4, #14]
    5058:	3302      	adds	r3, #2
    505a:	81a3      	strh	r3, [r4, #12]
    505c:	6665      	str	r5, [r4, #100]	; 0x64
    505e:	6025      	str	r5, [r4, #0]
    5060:	60a5      	str	r5, [r4, #8]
    5062:	6065      	str	r5, [r4, #4]
    5064:	6125      	str	r5, [r4, #16]
    5066:	6165      	str	r5, [r4, #20]
    5068:	61a5      	str	r5, [r4, #24]
    506a:	2208      	movs	r2, #8
    506c:	0029      	movs	r1, r5
    506e:	305c      	adds	r0, #92	; 0x5c
    5070:	f7ff fc8d 	bl	498e <memset>
    5074:	6365      	str	r5, [r4, #52]	; 0x34
    5076:	63a5      	str	r5, [r4, #56]	; 0x38
    5078:	64a5      	str	r5, [r4, #72]	; 0x48
    507a:	64e5      	str	r5, [r4, #76]	; 0x4c
    507c:	e7e6      	b.n	504c <__sfp+0x48>
    507e:	46c0      	nop			; (mov r8, r8)
    5080:	00005cd4 	.word	0x00005cd4

00005084 <_fwalk_reent>:
    5084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5086:	0004      	movs	r4, r0
    5088:	0007      	movs	r7, r0
    508a:	2600      	movs	r6, #0
    508c:	9101      	str	r1, [sp, #4]
    508e:	3448      	adds	r4, #72	; 0x48
    5090:	2c00      	cmp	r4, #0
    5092:	d101      	bne.n	5098 <_fwalk_reent+0x14>
    5094:	0030      	movs	r0, r6
    5096:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5098:	6863      	ldr	r3, [r4, #4]
    509a:	68a5      	ldr	r5, [r4, #8]
    509c:	9300      	str	r3, [sp, #0]
    509e:	9b00      	ldr	r3, [sp, #0]
    50a0:	3b01      	subs	r3, #1
    50a2:	9300      	str	r3, [sp, #0]
    50a4:	d501      	bpl.n	50aa <_fwalk_reent+0x26>
    50a6:	6824      	ldr	r4, [r4, #0]
    50a8:	e7f2      	b.n	5090 <_fwalk_reent+0xc>
    50aa:	89ab      	ldrh	r3, [r5, #12]
    50ac:	2b01      	cmp	r3, #1
    50ae:	d908      	bls.n	50c2 <_fwalk_reent+0x3e>
    50b0:	220e      	movs	r2, #14
    50b2:	5eab      	ldrsh	r3, [r5, r2]
    50b4:	3301      	adds	r3, #1
    50b6:	d004      	beq.n	50c2 <_fwalk_reent+0x3e>
    50b8:	0029      	movs	r1, r5
    50ba:	0038      	movs	r0, r7
    50bc:	9b01      	ldr	r3, [sp, #4]
    50be:	4798      	blx	r3
    50c0:	4306      	orrs	r6, r0
    50c2:	3568      	adds	r5, #104	; 0x68
    50c4:	e7eb      	b.n	509e <_fwalk_reent+0x1a>
	...

000050c8 <__swhatbuf_r>:
    50c8:	b570      	push	{r4, r5, r6, lr}
    50ca:	000e      	movs	r6, r1
    50cc:	001d      	movs	r5, r3
    50ce:	230e      	movs	r3, #14
    50d0:	5ec9      	ldrsh	r1, [r1, r3]
    50d2:	b090      	sub	sp, #64	; 0x40
    50d4:	0014      	movs	r4, r2
    50d6:	2900      	cmp	r1, #0
    50d8:	da07      	bge.n	50ea <__swhatbuf_r+0x22>
    50da:	2300      	movs	r3, #0
    50dc:	602b      	str	r3, [r5, #0]
    50de:	89b3      	ldrh	r3, [r6, #12]
    50e0:	061b      	lsls	r3, r3, #24
    50e2:	d411      	bmi.n	5108 <__swhatbuf_r+0x40>
    50e4:	2380      	movs	r3, #128	; 0x80
    50e6:	00db      	lsls	r3, r3, #3
    50e8:	e00f      	b.n	510a <__swhatbuf_r+0x42>
    50ea:	aa01      	add	r2, sp, #4
    50ec:	f000 fc54 	bl	5998 <_fstat_r>
    50f0:	2800      	cmp	r0, #0
    50f2:	dbf2      	blt.n	50da <__swhatbuf_r+0x12>
    50f4:	22f0      	movs	r2, #240	; 0xf0
    50f6:	9b02      	ldr	r3, [sp, #8]
    50f8:	0212      	lsls	r2, r2, #8
    50fa:	4013      	ands	r3, r2
    50fc:	4a05      	ldr	r2, [pc, #20]	; (5114 <__swhatbuf_r+0x4c>)
    50fe:	189b      	adds	r3, r3, r2
    5100:	425a      	negs	r2, r3
    5102:	4153      	adcs	r3, r2
    5104:	602b      	str	r3, [r5, #0]
    5106:	e7ed      	b.n	50e4 <__swhatbuf_r+0x1c>
    5108:	2340      	movs	r3, #64	; 0x40
    510a:	2000      	movs	r0, #0
    510c:	6023      	str	r3, [r4, #0]
    510e:	b010      	add	sp, #64	; 0x40
    5110:	bd70      	pop	{r4, r5, r6, pc}
    5112:	46c0      	nop			; (mov r8, r8)
    5114:	ffffe000 	.word	0xffffe000

00005118 <__smakebuf_r>:
    5118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    511a:	2602      	movs	r6, #2
    511c:	898b      	ldrh	r3, [r1, #12]
    511e:	0005      	movs	r5, r0
    5120:	000c      	movs	r4, r1
    5122:	4233      	tst	r3, r6
    5124:	d006      	beq.n	5134 <__smakebuf_r+0x1c>
    5126:	0023      	movs	r3, r4
    5128:	3347      	adds	r3, #71	; 0x47
    512a:	6023      	str	r3, [r4, #0]
    512c:	6123      	str	r3, [r4, #16]
    512e:	2301      	movs	r3, #1
    5130:	6163      	str	r3, [r4, #20]
    5132:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    5134:	ab01      	add	r3, sp, #4
    5136:	466a      	mov	r2, sp
    5138:	f7ff ffc6 	bl	50c8 <__swhatbuf_r>
    513c:	9900      	ldr	r1, [sp, #0]
    513e:	0007      	movs	r7, r0
    5140:	0028      	movs	r0, r5
    5142:	f000 f87b 	bl	523c <_malloc_r>
    5146:	2800      	cmp	r0, #0
    5148:	d106      	bne.n	5158 <__smakebuf_r+0x40>
    514a:	220c      	movs	r2, #12
    514c:	5ea3      	ldrsh	r3, [r4, r2]
    514e:	059a      	lsls	r2, r3, #22
    5150:	d4ef      	bmi.n	5132 <__smakebuf_r+0x1a>
    5152:	431e      	orrs	r6, r3
    5154:	81a6      	strh	r6, [r4, #12]
    5156:	e7e6      	b.n	5126 <__smakebuf_r+0xe>
    5158:	4b0d      	ldr	r3, [pc, #52]	; (5190 <__smakebuf_r+0x78>)
    515a:	62ab      	str	r3, [r5, #40]	; 0x28
    515c:	2380      	movs	r3, #128	; 0x80
    515e:	89a2      	ldrh	r2, [r4, #12]
    5160:	6020      	str	r0, [r4, #0]
    5162:	4313      	orrs	r3, r2
    5164:	81a3      	strh	r3, [r4, #12]
    5166:	9b00      	ldr	r3, [sp, #0]
    5168:	6120      	str	r0, [r4, #16]
    516a:	6163      	str	r3, [r4, #20]
    516c:	9b01      	ldr	r3, [sp, #4]
    516e:	2b00      	cmp	r3, #0
    5170:	d00a      	beq.n	5188 <__smakebuf_r+0x70>
    5172:	230e      	movs	r3, #14
    5174:	5ee1      	ldrsh	r1, [r4, r3]
    5176:	0028      	movs	r0, r5
    5178:	f000 fc20 	bl	59bc <_isatty_r>
    517c:	2800      	cmp	r0, #0
    517e:	d003      	beq.n	5188 <__smakebuf_r+0x70>
    5180:	2301      	movs	r3, #1
    5182:	89a2      	ldrh	r2, [r4, #12]
    5184:	4313      	orrs	r3, r2
    5186:	81a3      	strh	r3, [r4, #12]
    5188:	89a0      	ldrh	r0, [r4, #12]
    518a:	4338      	orrs	r0, r7
    518c:	81a0      	strh	r0, [r4, #12]
    518e:	e7d0      	b.n	5132 <__smakebuf_r+0x1a>
    5190:	00004f19 	.word	0x00004f19

00005194 <malloc>:
    5194:	b510      	push	{r4, lr}
    5196:	4b03      	ldr	r3, [pc, #12]	; (51a4 <malloc+0x10>)
    5198:	0001      	movs	r1, r0
    519a:	6818      	ldr	r0, [r3, #0]
    519c:	f000 f84e 	bl	523c <_malloc_r>
    51a0:	bd10      	pop	{r4, pc}
    51a2:	46c0      	nop			; (mov r8, r8)
    51a4:	2000000c 	.word	0x2000000c

000051a8 <_free_r>:
    51a8:	b570      	push	{r4, r5, r6, lr}
    51aa:	0005      	movs	r5, r0
    51ac:	2900      	cmp	r1, #0
    51ae:	d010      	beq.n	51d2 <_free_r+0x2a>
    51b0:	1f0c      	subs	r4, r1, #4
    51b2:	6823      	ldr	r3, [r4, #0]
    51b4:	2b00      	cmp	r3, #0
    51b6:	da00      	bge.n	51ba <_free_r+0x12>
    51b8:	18e4      	adds	r4, r4, r3
    51ba:	0028      	movs	r0, r5
    51bc:	f000 fc2f 	bl	5a1e <__malloc_lock>
    51c0:	4a1d      	ldr	r2, [pc, #116]	; (5238 <_free_r+0x90>)
    51c2:	6813      	ldr	r3, [r2, #0]
    51c4:	2b00      	cmp	r3, #0
    51c6:	d105      	bne.n	51d4 <_free_r+0x2c>
    51c8:	6063      	str	r3, [r4, #4]
    51ca:	6014      	str	r4, [r2, #0]
    51cc:	0028      	movs	r0, r5
    51ce:	f000 fc27 	bl	5a20 <__malloc_unlock>
    51d2:	bd70      	pop	{r4, r5, r6, pc}
    51d4:	42a3      	cmp	r3, r4
    51d6:	d909      	bls.n	51ec <_free_r+0x44>
    51d8:	6821      	ldr	r1, [r4, #0]
    51da:	1860      	adds	r0, r4, r1
    51dc:	4283      	cmp	r3, r0
    51de:	d1f3      	bne.n	51c8 <_free_r+0x20>
    51e0:	6818      	ldr	r0, [r3, #0]
    51e2:	685b      	ldr	r3, [r3, #4]
    51e4:	1841      	adds	r1, r0, r1
    51e6:	6021      	str	r1, [r4, #0]
    51e8:	e7ee      	b.n	51c8 <_free_r+0x20>
    51ea:	0013      	movs	r3, r2
    51ec:	685a      	ldr	r2, [r3, #4]
    51ee:	2a00      	cmp	r2, #0
    51f0:	d001      	beq.n	51f6 <_free_r+0x4e>
    51f2:	42a2      	cmp	r2, r4
    51f4:	d9f9      	bls.n	51ea <_free_r+0x42>
    51f6:	6819      	ldr	r1, [r3, #0]
    51f8:	1858      	adds	r0, r3, r1
    51fa:	42a0      	cmp	r0, r4
    51fc:	d10b      	bne.n	5216 <_free_r+0x6e>
    51fe:	6820      	ldr	r0, [r4, #0]
    5200:	1809      	adds	r1, r1, r0
    5202:	1858      	adds	r0, r3, r1
    5204:	6019      	str	r1, [r3, #0]
    5206:	4282      	cmp	r2, r0
    5208:	d1e0      	bne.n	51cc <_free_r+0x24>
    520a:	6810      	ldr	r0, [r2, #0]
    520c:	6852      	ldr	r2, [r2, #4]
    520e:	1841      	adds	r1, r0, r1
    5210:	6019      	str	r1, [r3, #0]
    5212:	605a      	str	r2, [r3, #4]
    5214:	e7da      	b.n	51cc <_free_r+0x24>
    5216:	42a0      	cmp	r0, r4
    5218:	d902      	bls.n	5220 <_free_r+0x78>
    521a:	230c      	movs	r3, #12
    521c:	602b      	str	r3, [r5, #0]
    521e:	e7d5      	b.n	51cc <_free_r+0x24>
    5220:	6821      	ldr	r1, [r4, #0]
    5222:	1860      	adds	r0, r4, r1
    5224:	4282      	cmp	r2, r0
    5226:	d103      	bne.n	5230 <_free_r+0x88>
    5228:	6810      	ldr	r0, [r2, #0]
    522a:	6852      	ldr	r2, [r2, #4]
    522c:	1841      	adds	r1, r0, r1
    522e:	6021      	str	r1, [r4, #0]
    5230:	6062      	str	r2, [r4, #4]
    5232:	605c      	str	r4, [r3, #4]
    5234:	e7ca      	b.n	51cc <_free_r+0x24>
    5236:	46c0      	nop			; (mov r8, r8)
    5238:	20000114 	.word	0x20000114

0000523c <_malloc_r>:
    523c:	2303      	movs	r3, #3
    523e:	b570      	push	{r4, r5, r6, lr}
    5240:	1ccd      	adds	r5, r1, #3
    5242:	439d      	bics	r5, r3
    5244:	3508      	adds	r5, #8
    5246:	0006      	movs	r6, r0
    5248:	2d0c      	cmp	r5, #12
    524a:	d21e      	bcs.n	528a <_malloc_r+0x4e>
    524c:	250c      	movs	r5, #12
    524e:	42a9      	cmp	r1, r5
    5250:	d81d      	bhi.n	528e <_malloc_r+0x52>
    5252:	0030      	movs	r0, r6
    5254:	f000 fbe3 	bl	5a1e <__malloc_lock>
    5258:	4a25      	ldr	r2, [pc, #148]	; (52f0 <_malloc_r+0xb4>)
    525a:	6814      	ldr	r4, [r2, #0]
    525c:	0021      	movs	r1, r4
    525e:	2900      	cmp	r1, #0
    5260:	d119      	bne.n	5296 <_malloc_r+0x5a>
    5262:	4c24      	ldr	r4, [pc, #144]	; (52f4 <_malloc_r+0xb8>)
    5264:	6823      	ldr	r3, [r4, #0]
    5266:	2b00      	cmp	r3, #0
    5268:	d103      	bne.n	5272 <_malloc_r+0x36>
    526a:	0030      	movs	r0, r6
    526c:	f000 fb10 	bl	5890 <_sbrk_r>
    5270:	6020      	str	r0, [r4, #0]
    5272:	0029      	movs	r1, r5
    5274:	0030      	movs	r0, r6
    5276:	f000 fb0b 	bl	5890 <_sbrk_r>
    527a:	1c43      	adds	r3, r0, #1
    527c:	d12c      	bne.n	52d8 <_malloc_r+0x9c>
    527e:	230c      	movs	r3, #12
    5280:	0030      	movs	r0, r6
    5282:	6033      	str	r3, [r6, #0]
    5284:	f000 fbcc 	bl	5a20 <__malloc_unlock>
    5288:	e003      	b.n	5292 <_malloc_r+0x56>
    528a:	2d00      	cmp	r5, #0
    528c:	dadf      	bge.n	524e <_malloc_r+0x12>
    528e:	230c      	movs	r3, #12
    5290:	6033      	str	r3, [r6, #0]
    5292:	2000      	movs	r0, #0
    5294:	bd70      	pop	{r4, r5, r6, pc}
    5296:	680b      	ldr	r3, [r1, #0]
    5298:	1b5b      	subs	r3, r3, r5
    529a:	d41a      	bmi.n	52d2 <_malloc_r+0x96>
    529c:	2b0b      	cmp	r3, #11
    529e:	d903      	bls.n	52a8 <_malloc_r+0x6c>
    52a0:	600b      	str	r3, [r1, #0]
    52a2:	18cc      	adds	r4, r1, r3
    52a4:	6025      	str	r5, [r4, #0]
    52a6:	e003      	b.n	52b0 <_malloc_r+0x74>
    52a8:	428c      	cmp	r4, r1
    52aa:	d10e      	bne.n	52ca <_malloc_r+0x8e>
    52ac:	6863      	ldr	r3, [r4, #4]
    52ae:	6013      	str	r3, [r2, #0]
    52b0:	0030      	movs	r0, r6
    52b2:	f000 fbb5 	bl	5a20 <__malloc_unlock>
    52b6:	0020      	movs	r0, r4
    52b8:	2207      	movs	r2, #7
    52ba:	300b      	adds	r0, #11
    52bc:	1d23      	adds	r3, r4, #4
    52be:	4390      	bics	r0, r2
    52c0:	1ac3      	subs	r3, r0, r3
    52c2:	d0e7      	beq.n	5294 <_malloc_r+0x58>
    52c4:	425a      	negs	r2, r3
    52c6:	50e2      	str	r2, [r4, r3]
    52c8:	e7e4      	b.n	5294 <_malloc_r+0x58>
    52ca:	684b      	ldr	r3, [r1, #4]
    52cc:	6063      	str	r3, [r4, #4]
    52ce:	000c      	movs	r4, r1
    52d0:	e7ee      	b.n	52b0 <_malloc_r+0x74>
    52d2:	000c      	movs	r4, r1
    52d4:	6849      	ldr	r1, [r1, #4]
    52d6:	e7c2      	b.n	525e <_malloc_r+0x22>
    52d8:	2303      	movs	r3, #3
    52da:	1cc4      	adds	r4, r0, #3
    52dc:	439c      	bics	r4, r3
    52de:	42a0      	cmp	r0, r4
    52e0:	d0e0      	beq.n	52a4 <_malloc_r+0x68>
    52e2:	1a21      	subs	r1, r4, r0
    52e4:	0030      	movs	r0, r6
    52e6:	f000 fad3 	bl	5890 <_sbrk_r>
    52ea:	1c43      	adds	r3, r0, #1
    52ec:	d1da      	bne.n	52a4 <_malloc_r+0x68>
    52ee:	e7c6      	b.n	527e <_malloc_r+0x42>
    52f0:	20000114 	.word	0x20000114
    52f4:	20000118 	.word	0x20000118

000052f8 <__sfputc_r>:
    52f8:	6893      	ldr	r3, [r2, #8]
    52fa:	b510      	push	{r4, lr}
    52fc:	3b01      	subs	r3, #1
    52fe:	6093      	str	r3, [r2, #8]
    5300:	2b00      	cmp	r3, #0
    5302:	da05      	bge.n	5310 <__sfputc_r+0x18>
    5304:	6994      	ldr	r4, [r2, #24]
    5306:	42a3      	cmp	r3, r4
    5308:	db08      	blt.n	531c <__sfputc_r+0x24>
    530a:	b2cb      	uxtb	r3, r1
    530c:	2b0a      	cmp	r3, #10
    530e:	d005      	beq.n	531c <__sfputc_r+0x24>
    5310:	6813      	ldr	r3, [r2, #0]
    5312:	1c58      	adds	r0, r3, #1
    5314:	6010      	str	r0, [r2, #0]
    5316:	7019      	strb	r1, [r3, #0]
    5318:	b2c8      	uxtb	r0, r1
    531a:	bd10      	pop	{r4, pc}
    531c:	f7ff fc7a 	bl	4c14 <__swbuf_r>
    5320:	e7fb      	b.n	531a <__sfputc_r+0x22>

00005322 <__sfputs_r>:
    5322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5324:	0006      	movs	r6, r0
    5326:	000f      	movs	r7, r1
    5328:	0014      	movs	r4, r2
    532a:	18d5      	adds	r5, r2, r3
    532c:	42ac      	cmp	r4, r5
    532e:	d101      	bne.n	5334 <__sfputs_r+0x12>
    5330:	2000      	movs	r0, #0
    5332:	e007      	b.n	5344 <__sfputs_r+0x22>
    5334:	7821      	ldrb	r1, [r4, #0]
    5336:	003a      	movs	r2, r7
    5338:	0030      	movs	r0, r6
    533a:	f7ff ffdd 	bl	52f8 <__sfputc_r>
    533e:	3401      	adds	r4, #1
    5340:	1c43      	adds	r3, r0, #1
    5342:	d1f3      	bne.n	532c <__sfputs_r+0xa>
    5344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005348 <_vfiprintf_r>:
    5348:	b5f0      	push	{r4, r5, r6, r7, lr}
    534a:	b09f      	sub	sp, #124	; 0x7c
    534c:	0006      	movs	r6, r0
    534e:	000f      	movs	r7, r1
    5350:	0014      	movs	r4, r2
    5352:	9305      	str	r3, [sp, #20]
    5354:	2800      	cmp	r0, #0
    5356:	d004      	beq.n	5362 <_vfiprintf_r+0x1a>
    5358:	6983      	ldr	r3, [r0, #24]
    535a:	2b00      	cmp	r3, #0
    535c:	d101      	bne.n	5362 <_vfiprintf_r+0x1a>
    535e:	f7ff fe1d 	bl	4f9c <__sinit>
    5362:	4b7f      	ldr	r3, [pc, #508]	; (5560 <_vfiprintf_r+0x218>)
    5364:	429f      	cmp	r7, r3
    5366:	d15c      	bne.n	5422 <_vfiprintf_r+0xda>
    5368:	6877      	ldr	r7, [r6, #4]
    536a:	89bb      	ldrh	r3, [r7, #12]
    536c:	071b      	lsls	r3, r3, #28
    536e:	d562      	bpl.n	5436 <_vfiprintf_r+0xee>
    5370:	693b      	ldr	r3, [r7, #16]
    5372:	2b00      	cmp	r3, #0
    5374:	d05f      	beq.n	5436 <_vfiprintf_r+0xee>
    5376:	2300      	movs	r3, #0
    5378:	ad06      	add	r5, sp, #24
    537a:	616b      	str	r3, [r5, #20]
    537c:	3320      	adds	r3, #32
    537e:	766b      	strb	r3, [r5, #25]
    5380:	3310      	adds	r3, #16
    5382:	76ab      	strb	r3, [r5, #26]
    5384:	9402      	str	r4, [sp, #8]
    5386:	9c02      	ldr	r4, [sp, #8]
    5388:	7823      	ldrb	r3, [r4, #0]
    538a:	2b00      	cmp	r3, #0
    538c:	d15d      	bne.n	544a <_vfiprintf_r+0x102>
    538e:	9b02      	ldr	r3, [sp, #8]
    5390:	1ae3      	subs	r3, r4, r3
    5392:	9304      	str	r3, [sp, #16]
    5394:	d00d      	beq.n	53b2 <_vfiprintf_r+0x6a>
    5396:	9b04      	ldr	r3, [sp, #16]
    5398:	9a02      	ldr	r2, [sp, #8]
    539a:	0039      	movs	r1, r7
    539c:	0030      	movs	r0, r6
    539e:	f7ff ffc0 	bl	5322 <__sfputs_r>
    53a2:	1c43      	adds	r3, r0, #1
    53a4:	d100      	bne.n	53a8 <_vfiprintf_r+0x60>
    53a6:	e0cc      	b.n	5542 <_vfiprintf_r+0x1fa>
    53a8:	696a      	ldr	r2, [r5, #20]
    53aa:	9b04      	ldr	r3, [sp, #16]
    53ac:	4694      	mov	ip, r2
    53ae:	4463      	add	r3, ip
    53b0:	616b      	str	r3, [r5, #20]
    53b2:	7823      	ldrb	r3, [r4, #0]
    53b4:	2b00      	cmp	r3, #0
    53b6:	d100      	bne.n	53ba <_vfiprintf_r+0x72>
    53b8:	e0c3      	b.n	5542 <_vfiprintf_r+0x1fa>
    53ba:	2201      	movs	r2, #1
    53bc:	2300      	movs	r3, #0
    53be:	4252      	negs	r2, r2
    53c0:	606a      	str	r2, [r5, #4]
    53c2:	a902      	add	r1, sp, #8
    53c4:	3254      	adds	r2, #84	; 0x54
    53c6:	1852      	adds	r2, r2, r1
    53c8:	3401      	adds	r4, #1
    53ca:	602b      	str	r3, [r5, #0]
    53cc:	60eb      	str	r3, [r5, #12]
    53ce:	60ab      	str	r3, [r5, #8]
    53d0:	7013      	strb	r3, [r2, #0]
    53d2:	65ab      	str	r3, [r5, #88]	; 0x58
    53d4:	7821      	ldrb	r1, [r4, #0]
    53d6:	2205      	movs	r2, #5
    53d8:	4862      	ldr	r0, [pc, #392]	; (5564 <_vfiprintf_r+0x21c>)
    53da:	f000 fb15 	bl	5a08 <memchr>
    53de:	1c63      	adds	r3, r4, #1
    53e0:	469c      	mov	ip, r3
    53e2:	2800      	cmp	r0, #0
    53e4:	d135      	bne.n	5452 <_vfiprintf_r+0x10a>
    53e6:	6829      	ldr	r1, [r5, #0]
    53e8:	06cb      	lsls	r3, r1, #27
    53ea:	d504      	bpl.n	53f6 <_vfiprintf_r+0xae>
    53ec:	2353      	movs	r3, #83	; 0x53
    53ee:	aa02      	add	r2, sp, #8
    53f0:	3020      	adds	r0, #32
    53f2:	189b      	adds	r3, r3, r2
    53f4:	7018      	strb	r0, [r3, #0]
    53f6:	070b      	lsls	r3, r1, #28
    53f8:	d504      	bpl.n	5404 <_vfiprintf_r+0xbc>
    53fa:	2353      	movs	r3, #83	; 0x53
    53fc:	202b      	movs	r0, #43	; 0x2b
    53fe:	aa02      	add	r2, sp, #8
    5400:	189b      	adds	r3, r3, r2
    5402:	7018      	strb	r0, [r3, #0]
    5404:	7823      	ldrb	r3, [r4, #0]
    5406:	2b2a      	cmp	r3, #42	; 0x2a
    5408:	d02c      	beq.n	5464 <_vfiprintf_r+0x11c>
    540a:	2000      	movs	r0, #0
    540c:	210a      	movs	r1, #10
    540e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5410:	7822      	ldrb	r2, [r4, #0]
    5412:	3a30      	subs	r2, #48	; 0x30
    5414:	2a09      	cmp	r2, #9
    5416:	d800      	bhi.n	541a <_vfiprintf_r+0xd2>
    5418:	e06b      	b.n	54f2 <_vfiprintf_r+0x1aa>
    541a:	2800      	cmp	r0, #0
    541c:	d02a      	beq.n	5474 <_vfiprintf_r+0x12c>
    541e:	9309      	str	r3, [sp, #36]	; 0x24
    5420:	e028      	b.n	5474 <_vfiprintf_r+0x12c>
    5422:	4b51      	ldr	r3, [pc, #324]	; (5568 <_vfiprintf_r+0x220>)
    5424:	429f      	cmp	r7, r3
    5426:	d101      	bne.n	542c <_vfiprintf_r+0xe4>
    5428:	68b7      	ldr	r7, [r6, #8]
    542a:	e79e      	b.n	536a <_vfiprintf_r+0x22>
    542c:	4b4f      	ldr	r3, [pc, #316]	; (556c <_vfiprintf_r+0x224>)
    542e:	429f      	cmp	r7, r3
    5430:	d19b      	bne.n	536a <_vfiprintf_r+0x22>
    5432:	68f7      	ldr	r7, [r6, #12]
    5434:	e799      	b.n	536a <_vfiprintf_r+0x22>
    5436:	0039      	movs	r1, r7
    5438:	0030      	movs	r0, r6
    543a:	f7ff fc41 	bl	4cc0 <__swsetup_r>
    543e:	2800      	cmp	r0, #0
    5440:	d099      	beq.n	5376 <_vfiprintf_r+0x2e>
    5442:	2001      	movs	r0, #1
    5444:	4240      	negs	r0, r0
    5446:	b01f      	add	sp, #124	; 0x7c
    5448:	bdf0      	pop	{r4, r5, r6, r7, pc}
    544a:	2b25      	cmp	r3, #37	; 0x25
    544c:	d09f      	beq.n	538e <_vfiprintf_r+0x46>
    544e:	3401      	adds	r4, #1
    5450:	e79a      	b.n	5388 <_vfiprintf_r+0x40>
    5452:	4b44      	ldr	r3, [pc, #272]	; (5564 <_vfiprintf_r+0x21c>)
    5454:	6829      	ldr	r1, [r5, #0]
    5456:	1ac0      	subs	r0, r0, r3
    5458:	2301      	movs	r3, #1
    545a:	4083      	lsls	r3, r0
    545c:	430b      	orrs	r3, r1
    545e:	602b      	str	r3, [r5, #0]
    5460:	4664      	mov	r4, ip
    5462:	e7b7      	b.n	53d4 <_vfiprintf_r+0x8c>
    5464:	9b05      	ldr	r3, [sp, #20]
    5466:	1d18      	adds	r0, r3, #4
    5468:	681b      	ldr	r3, [r3, #0]
    546a:	9005      	str	r0, [sp, #20]
    546c:	2b00      	cmp	r3, #0
    546e:	db3a      	blt.n	54e6 <_vfiprintf_r+0x19e>
    5470:	9309      	str	r3, [sp, #36]	; 0x24
    5472:	4664      	mov	r4, ip
    5474:	7823      	ldrb	r3, [r4, #0]
    5476:	2b2e      	cmp	r3, #46	; 0x2e
    5478:	d10b      	bne.n	5492 <_vfiprintf_r+0x14a>
    547a:	7863      	ldrb	r3, [r4, #1]
    547c:	1c62      	adds	r2, r4, #1
    547e:	2b2a      	cmp	r3, #42	; 0x2a
    5480:	d13f      	bne.n	5502 <_vfiprintf_r+0x1ba>
    5482:	9b05      	ldr	r3, [sp, #20]
    5484:	3402      	adds	r4, #2
    5486:	1d1a      	adds	r2, r3, #4
    5488:	681b      	ldr	r3, [r3, #0]
    548a:	9205      	str	r2, [sp, #20]
    548c:	2b00      	cmp	r3, #0
    548e:	db35      	blt.n	54fc <_vfiprintf_r+0x1b4>
    5490:	9307      	str	r3, [sp, #28]
    5492:	7821      	ldrb	r1, [r4, #0]
    5494:	2203      	movs	r2, #3
    5496:	4836      	ldr	r0, [pc, #216]	; (5570 <_vfiprintf_r+0x228>)
    5498:	f000 fab6 	bl	5a08 <memchr>
    549c:	2800      	cmp	r0, #0
    549e:	d007      	beq.n	54b0 <_vfiprintf_r+0x168>
    54a0:	4b33      	ldr	r3, [pc, #204]	; (5570 <_vfiprintf_r+0x228>)
    54a2:	682a      	ldr	r2, [r5, #0]
    54a4:	1ac0      	subs	r0, r0, r3
    54a6:	2340      	movs	r3, #64	; 0x40
    54a8:	4083      	lsls	r3, r0
    54aa:	4313      	orrs	r3, r2
    54ac:	602b      	str	r3, [r5, #0]
    54ae:	3401      	adds	r4, #1
    54b0:	7821      	ldrb	r1, [r4, #0]
    54b2:	1c63      	adds	r3, r4, #1
    54b4:	2206      	movs	r2, #6
    54b6:	482f      	ldr	r0, [pc, #188]	; (5574 <_vfiprintf_r+0x22c>)
    54b8:	9302      	str	r3, [sp, #8]
    54ba:	7629      	strb	r1, [r5, #24]
    54bc:	f000 faa4 	bl	5a08 <memchr>
    54c0:	2800      	cmp	r0, #0
    54c2:	d044      	beq.n	554e <_vfiprintf_r+0x206>
    54c4:	4b2c      	ldr	r3, [pc, #176]	; (5578 <_vfiprintf_r+0x230>)
    54c6:	2b00      	cmp	r3, #0
    54c8:	d12f      	bne.n	552a <_vfiprintf_r+0x1e2>
    54ca:	6829      	ldr	r1, [r5, #0]
    54cc:	9b05      	ldr	r3, [sp, #20]
    54ce:	2207      	movs	r2, #7
    54d0:	05c9      	lsls	r1, r1, #23
    54d2:	d528      	bpl.n	5526 <_vfiprintf_r+0x1de>
    54d4:	189b      	adds	r3, r3, r2
    54d6:	4393      	bics	r3, r2
    54d8:	3308      	adds	r3, #8
    54da:	9305      	str	r3, [sp, #20]
    54dc:	696b      	ldr	r3, [r5, #20]
    54de:	9a03      	ldr	r2, [sp, #12]
    54e0:	189b      	adds	r3, r3, r2
    54e2:	616b      	str	r3, [r5, #20]
    54e4:	e74f      	b.n	5386 <_vfiprintf_r+0x3e>
    54e6:	425b      	negs	r3, r3
    54e8:	60eb      	str	r3, [r5, #12]
    54ea:	2302      	movs	r3, #2
    54ec:	430b      	orrs	r3, r1
    54ee:	602b      	str	r3, [r5, #0]
    54f0:	e7bf      	b.n	5472 <_vfiprintf_r+0x12a>
    54f2:	434b      	muls	r3, r1
    54f4:	3401      	adds	r4, #1
    54f6:	189b      	adds	r3, r3, r2
    54f8:	2001      	movs	r0, #1
    54fa:	e789      	b.n	5410 <_vfiprintf_r+0xc8>
    54fc:	2301      	movs	r3, #1
    54fe:	425b      	negs	r3, r3
    5500:	e7c6      	b.n	5490 <_vfiprintf_r+0x148>
    5502:	2300      	movs	r3, #0
    5504:	0014      	movs	r4, r2
    5506:	200a      	movs	r0, #10
    5508:	001a      	movs	r2, r3
    550a:	606b      	str	r3, [r5, #4]
    550c:	7821      	ldrb	r1, [r4, #0]
    550e:	3930      	subs	r1, #48	; 0x30
    5510:	2909      	cmp	r1, #9
    5512:	d903      	bls.n	551c <_vfiprintf_r+0x1d4>
    5514:	2b00      	cmp	r3, #0
    5516:	d0bc      	beq.n	5492 <_vfiprintf_r+0x14a>
    5518:	9207      	str	r2, [sp, #28]
    551a:	e7ba      	b.n	5492 <_vfiprintf_r+0x14a>
    551c:	4342      	muls	r2, r0
    551e:	3401      	adds	r4, #1
    5520:	1852      	adds	r2, r2, r1
    5522:	2301      	movs	r3, #1
    5524:	e7f2      	b.n	550c <_vfiprintf_r+0x1c4>
    5526:	3307      	adds	r3, #7
    5528:	e7d5      	b.n	54d6 <_vfiprintf_r+0x18e>
    552a:	ab05      	add	r3, sp, #20
    552c:	9300      	str	r3, [sp, #0]
    552e:	003a      	movs	r2, r7
    5530:	4b12      	ldr	r3, [pc, #72]	; (557c <_vfiprintf_r+0x234>)
    5532:	0029      	movs	r1, r5
    5534:	0030      	movs	r0, r6
    5536:	e000      	b.n	553a <_vfiprintf_r+0x1f2>
    5538:	bf00      	nop
    553a:	9003      	str	r0, [sp, #12]
    553c:	9b03      	ldr	r3, [sp, #12]
    553e:	3301      	adds	r3, #1
    5540:	d1cc      	bne.n	54dc <_vfiprintf_r+0x194>
    5542:	89bb      	ldrh	r3, [r7, #12]
    5544:	065b      	lsls	r3, r3, #25
    5546:	d500      	bpl.n	554a <_vfiprintf_r+0x202>
    5548:	e77b      	b.n	5442 <_vfiprintf_r+0xfa>
    554a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    554c:	e77b      	b.n	5446 <_vfiprintf_r+0xfe>
    554e:	ab05      	add	r3, sp, #20
    5550:	9300      	str	r3, [sp, #0]
    5552:	003a      	movs	r2, r7
    5554:	4b09      	ldr	r3, [pc, #36]	; (557c <_vfiprintf_r+0x234>)
    5556:	0029      	movs	r1, r5
    5558:	0030      	movs	r0, r6
    555a:	f000 f87f 	bl	565c <_printf_i>
    555e:	e7ec      	b.n	553a <_vfiprintf_r+0x1f2>
    5560:	00005cf8 	.word	0x00005cf8
    5564:	00005d38 	.word	0x00005d38
    5568:	00005d18 	.word	0x00005d18
    556c:	00005cd8 	.word	0x00005cd8
    5570:	00005d3e 	.word	0x00005d3e
    5574:	00005d42 	.word	0x00005d42
    5578:	00000000 	.word	0x00000000
    557c:	00005323 	.word	0x00005323

00005580 <_printf_common>:
    5580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5582:	0015      	movs	r5, r2
    5584:	9301      	str	r3, [sp, #4]
    5586:	688a      	ldr	r2, [r1, #8]
    5588:	690b      	ldr	r3, [r1, #16]
    558a:	9000      	str	r0, [sp, #0]
    558c:	000c      	movs	r4, r1
    558e:	4293      	cmp	r3, r2
    5590:	da00      	bge.n	5594 <_printf_common+0x14>
    5592:	0013      	movs	r3, r2
    5594:	0022      	movs	r2, r4
    5596:	602b      	str	r3, [r5, #0]
    5598:	3243      	adds	r2, #67	; 0x43
    559a:	7812      	ldrb	r2, [r2, #0]
    559c:	2a00      	cmp	r2, #0
    559e:	d001      	beq.n	55a4 <_printf_common+0x24>
    55a0:	3301      	adds	r3, #1
    55a2:	602b      	str	r3, [r5, #0]
    55a4:	6823      	ldr	r3, [r4, #0]
    55a6:	069b      	lsls	r3, r3, #26
    55a8:	d502      	bpl.n	55b0 <_printf_common+0x30>
    55aa:	682b      	ldr	r3, [r5, #0]
    55ac:	3302      	adds	r3, #2
    55ae:	602b      	str	r3, [r5, #0]
    55b0:	2706      	movs	r7, #6
    55b2:	6823      	ldr	r3, [r4, #0]
    55b4:	401f      	ands	r7, r3
    55b6:	d027      	beq.n	5608 <_printf_common+0x88>
    55b8:	0023      	movs	r3, r4
    55ba:	3343      	adds	r3, #67	; 0x43
    55bc:	781b      	ldrb	r3, [r3, #0]
    55be:	1e5a      	subs	r2, r3, #1
    55c0:	4193      	sbcs	r3, r2
    55c2:	6822      	ldr	r2, [r4, #0]
    55c4:	0692      	lsls	r2, r2, #26
    55c6:	d430      	bmi.n	562a <_printf_common+0xaa>
    55c8:	0022      	movs	r2, r4
    55ca:	9901      	ldr	r1, [sp, #4]
    55cc:	3243      	adds	r2, #67	; 0x43
    55ce:	9800      	ldr	r0, [sp, #0]
    55d0:	9e08      	ldr	r6, [sp, #32]
    55d2:	47b0      	blx	r6
    55d4:	1c43      	adds	r3, r0, #1
    55d6:	d025      	beq.n	5624 <_printf_common+0xa4>
    55d8:	2306      	movs	r3, #6
    55da:	6820      	ldr	r0, [r4, #0]
    55dc:	682a      	ldr	r2, [r5, #0]
    55de:	68e1      	ldr	r1, [r4, #12]
    55e0:	4003      	ands	r3, r0
    55e2:	2500      	movs	r5, #0
    55e4:	2b04      	cmp	r3, #4
    55e6:	d103      	bne.n	55f0 <_printf_common+0x70>
    55e8:	1a8d      	subs	r5, r1, r2
    55ea:	43eb      	mvns	r3, r5
    55ec:	17db      	asrs	r3, r3, #31
    55ee:	401d      	ands	r5, r3
    55f0:	68a3      	ldr	r3, [r4, #8]
    55f2:	6922      	ldr	r2, [r4, #16]
    55f4:	4293      	cmp	r3, r2
    55f6:	dd01      	ble.n	55fc <_printf_common+0x7c>
    55f8:	1a9b      	subs	r3, r3, r2
    55fa:	18ed      	adds	r5, r5, r3
    55fc:	2700      	movs	r7, #0
    55fe:	42bd      	cmp	r5, r7
    5600:	d120      	bne.n	5644 <_printf_common+0xc4>
    5602:	2000      	movs	r0, #0
    5604:	e010      	b.n	5628 <_printf_common+0xa8>
    5606:	3701      	adds	r7, #1
    5608:	68e3      	ldr	r3, [r4, #12]
    560a:	682a      	ldr	r2, [r5, #0]
    560c:	1a9b      	subs	r3, r3, r2
    560e:	429f      	cmp	r7, r3
    5610:	dad2      	bge.n	55b8 <_printf_common+0x38>
    5612:	0022      	movs	r2, r4
    5614:	2301      	movs	r3, #1
    5616:	3219      	adds	r2, #25
    5618:	9901      	ldr	r1, [sp, #4]
    561a:	9800      	ldr	r0, [sp, #0]
    561c:	9e08      	ldr	r6, [sp, #32]
    561e:	47b0      	blx	r6
    5620:	1c43      	adds	r3, r0, #1
    5622:	d1f0      	bne.n	5606 <_printf_common+0x86>
    5624:	2001      	movs	r0, #1
    5626:	4240      	negs	r0, r0
    5628:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    562a:	2030      	movs	r0, #48	; 0x30
    562c:	18e1      	adds	r1, r4, r3
    562e:	3143      	adds	r1, #67	; 0x43
    5630:	7008      	strb	r0, [r1, #0]
    5632:	0021      	movs	r1, r4
    5634:	1c5a      	adds	r2, r3, #1
    5636:	3145      	adds	r1, #69	; 0x45
    5638:	7809      	ldrb	r1, [r1, #0]
    563a:	18a2      	adds	r2, r4, r2
    563c:	3243      	adds	r2, #67	; 0x43
    563e:	3302      	adds	r3, #2
    5640:	7011      	strb	r1, [r2, #0]
    5642:	e7c1      	b.n	55c8 <_printf_common+0x48>
    5644:	0022      	movs	r2, r4
    5646:	2301      	movs	r3, #1
    5648:	321a      	adds	r2, #26
    564a:	9901      	ldr	r1, [sp, #4]
    564c:	9800      	ldr	r0, [sp, #0]
    564e:	9e08      	ldr	r6, [sp, #32]
    5650:	47b0      	blx	r6
    5652:	1c43      	adds	r3, r0, #1
    5654:	d0e6      	beq.n	5624 <_printf_common+0xa4>
    5656:	3701      	adds	r7, #1
    5658:	e7d1      	b.n	55fe <_printf_common+0x7e>
	...

0000565c <_printf_i>:
    565c:	b5f0      	push	{r4, r5, r6, r7, lr}
    565e:	b08b      	sub	sp, #44	; 0x2c
    5660:	9206      	str	r2, [sp, #24]
    5662:	000a      	movs	r2, r1
    5664:	3243      	adds	r2, #67	; 0x43
    5666:	9307      	str	r3, [sp, #28]
    5668:	9005      	str	r0, [sp, #20]
    566a:	9204      	str	r2, [sp, #16]
    566c:	7e0a      	ldrb	r2, [r1, #24]
    566e:	000c      	movs	r4, r1
    5670:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5672:	2a6e      	cmp	r2, #110	; 0x6e
    5674:	d100      	bne.n	5678 <_printf_i+0x1c>
    5676:	e08f      	b.n	5798 <_printf_i+0x13c>
    5678:	d817      	bhi.n	56aa <_printf_i+0x4e>
    567a:	2a63      	cmp	r2, #99	; 0x63
    567c:	d02c      	beq.n	56d8 <_printf_i+0x7c>
    567e:	d808      	bhi.n	5692 <_printf_i+0x36>
    5680:	2a00      	cmp	r2, #0
    5682:	d100      	bne.n	5686 <_printf_i+0x2a>
    5684:	e099      	b.n	57ba <_printf_i+0x15e>
    5686:	2a58      	cmp	r2, #88	; 0x58
    5688:	d054      	beq.n	5734 <_printf_i+0xd8>
    568a:	0026      	movs	r6, r4
    568c:	3642      	adds	r6, #66	; 0x42
    568e:	7032      	strb	r2, [r6, #0]
    5690:	e029      	b.n	56e6 <_printf_i+0x8a>
    5692:	2a64      	cmp	r2, #100	; 0x64
    5694:	d001      	beq.n	569a <_printf_i+0x3e>
    5696:	2a69      	cmp	r2, #105	; 0x69
    5698:	d1f7      	bne.n	568a <_printf_i+0x2e>
    569a:	6821      	ldr	r1, [r4, #0]
    569c:	681a      	ldr	r2, [r3, #0]
    569e:	0608      	lsls	r0, r1, #24
    56a0:	d523      	bpl.n	56ea <_printf_i+0x8e>
    56a2:	1d11      	adds	r1, r2, #4
    56a4:	6019      	str	r1, [r3, #0]
    56a6:	6815      	ldr	r5, [r2, #0]
    56a8:	e025      	b.n	56f6 <_printf_i+0x9a>
    56aa:	2a73      	cmp	r2, #115	; 0x73
    56ac:	d100      	bne.n	56b0 <_printf_i+0x54>
    56ae:	e088      	b.n	57c2 <_printf_i+0x166>
    56b0:	d808      	bhi.n	56c4 <_printf_i+0x68>
    56b2:	2a6f      	cmp	r2, #111	; 0x6f
    56b4:	d029      	beq.n	570a <_printf_i+0xae>
    56b6:	2a70      	cmp	r2, #112	; 0x70
    56b8:	d1e7      	bne.n	568a <_printf_i+0x2e>
    56ba:	2220      	movs	r2, #32
    56bc:	6809      	ldr	r1, [r1, #0]
    56be:	430a      	orrs	r2, r1
    56c0:	6022      	str	r2, [r4, #0]
    56c2:	e003      	b.n	56cc <_printf_i+0x70>
    56c4:	2a75      	cmp	r2, #117	; 0x75
    56c6:	d020      	beq.n	570a <_printf_i+0xae>
    56c8:	2a78      	cmp	r2, #120	; 0x78
    56ca:	d1de      	bne.n	568a <_printf_i+0x2e>
    56cc:	0022      	movs	r2, r4
    56ce:	2178      	movs	r1, #120	; 0x78
    56d0:	3245      	adds	r2, #69	; 0x45
    56d2:	7011      	strb	r1, [r2, #0]
    56d4:	4a6c      	ldr	r2, [pc, #432]	; (5888 <_printf_i+0x22c>)
    56d6:	e030      	b.n	573a <_printf_i+0xde>
    56d8:	000e      	movs	r6, r1
    56da:	681a      	ldr	r2, [r3, #0]
    56dc:	3642      	adds	r6, #66	; 0x42
    56de:	1d11      	adds	r1, r2, #4
    56e0:	6019      	str	r1, [r3, #0]
    56e2:	6813      	ldr	r3, [r2, #0]
    56e4:	7033      	strb	r3, [r6, #0]
    56e6:	2301      	movs	r3, #1
    56e8:	e079      	b.n	57de <_printf_i+0x182>
    56ea:	0649      	lsls	r1, r1, #25
    56ec:	d5d9      	bpl.n	56a2 <_printf_i+0x46>
    56ee:	1d11      	adds	r1, r2, #4
    56f0:	6019      	str	r1, [r3, #0]
    56f2:	2300      	movs	r3, #0
    56f4:	5ed5      	ldrsh	r5, [r2, r3]
    56f6:	2d00      	cmp	r5, #0
    56f8:	da03      	bge.n	5702 <_printf_i+0xa6>
    56fa:	232d      	movs	r3, #45	; 0x2d
    56fc:	9a04      	ldr	r2, [sp, #16]
    56fe:	426d      	negs	r5, r5
    5700:	7013      	strb	r3, [r2, #0]
    5702:	4b62      	ldr	r3, [pc, #392]	; (588c <_printf_i+0x230>)
    5704:	270a      	movs	r7, #10
    5706:	9303      	str	r3, [sp, #12]
    5708:	e02f      	b.n	576a <_printf_i+0x10e>
    570a:	6820      	ldr	r0, [r4, #0]
    570c:	6819      	ldr	r1, [r3, #0]
    570e:	0605      	lsls	r5, r0, #24
    5710:	d503      	bpl.n	571a <_printf_i+0xbe>
    5712:	1d08      	adds	r0, r1, #4
    5714:	6018      	str	r0, [r3, #0]
    5716:	680d      	ldr	r5, [r1, #0]
    5718:	e005      	b.n	5726 <_printf_i+0xca>
    571a:	0640      	lsls	r0, r0, #25
    571c:	d5f9      	bpl.n	5712 <_printf_i+0xb6>
    571e:	680d      	ldr	r5, [r1, #0]
    5720:	1d08      	adds	r0, r1, #4
    5722:	6018      	str	r0, [r3, #0]
    5724:	b2ad      	uxth	r5, r5
    5726:	4b59      	ldr	r3, [pc, #356]	; (588c <_printf_i+0x230>)
    5728:	2708      	movs	r7, #8
    572a:	9303      	str	r3, [sp, #12]
    572c:	2a6f      	cmp	r2, #111	; 0x6f
    572e:	d018      	beq.n	5762 <_printf_i+0x106>
    5730:	270a      	movs	r7, #10
    5732:	e016      	b.n	5762 <_printf_i+0x106>
    5734:	3145      	adds	r1, #69	; 0x45
    5736:	700a      	strb	r2, [r1, #0]
    5738:	4a54      	ldr	r2, [pc, #336]	; (588c <_printf_i+0x230>)
    573a:	9203      	str	r2, [sp, #12]
    573c:	681a      	ldr	r2, [r3, #0]
    573e:	6821      	ldr	r1, [r4, #0]
    5740:	1d10      	adds	r0, r2, #4
    5742:	6018      	str	r0, [r3, #0]
    5744:	6815      	ldr	r5, [r2, #0]
    5746:	0608      	lsls	r0, r1, #24
    5748:	d522      	bpl.n	5790 <_printf_i+0x134>
    574a:	07cb      	lsls	r3, r1, #31
    574c:	d502      	bpl.n	5754 <_printf_i+0xf8>
    574e:	2320      	movs	r3, #32
    5750:	4319      	orrs	r1, r3
    5752:	6021      	str	r1, [r4, #0]
    5754:	2710      	movs	r7, #16
    5756:	2d00      	cmp	r5, #0
    5758:	d103      	bne.n	5762 <_printf_i+0x106>
    575a:	2320      	movs	r3, #32
    575c:	6822      	ldr	r2, [r4, #0]
    575e:	439a      	bics	r2, r3
    5760:	6022      	str	r2, [r4, #0]
    5762:	0023      	movs	r3, r4
    5764:	2200      	movs	r2, #0
    5766:	3343      	adds	r3, #67	; 0x43
    5768:	701a      	strb	r2, [r3, #0]
    576a:	6863      	ldr	r3, [r4, #4]
    576c:	60a3      	str	r3, [r4, #8]
    576e:	2b00      	cmp	r3, #0
    5770:	db5c      	blt.n	582c <_printf_i+0x1d0>
    5772:	2204      	movs	r2, #4
    5774:	6821      	ldr	r1, [r4, #0]
    5776:	4391      	bics	r1, r2
    5778:	6021      	str	r1, [r4, #0]
    577a:	2d00      	cmp	r5, #0
    577c:	d158      	bne.n	5830 <_printf_i+0x1d4>
    577e:	9e04      	ldr	r6, [sp, #16]
    5780:	2b00      	cmp	r3, #0
    5782:	d064      	beq.n	584e <_printf_i+0x1f2>
    5784:	0026      	movs	r6, r4
    5786:	9b03      	ldr	r3, [sp, #12]
    5788:	3642      	adds	r6, #66	; 0x42
    578a:	781b      	ldrb	r3, [r3, #0]
    578c:	7033      	strb	r3, [r6, #0]
    578e:	e05e      	b.n	584e <_printf_i+0x1f2>
    5790:	0648      	lsls	r0, r1, #25
    5792:	d5da      	bpl.n	574a <_printf_i+0xee>
    5794:	b2ad      	uxth	r5, r5
    5796:	e7d8      	b.n	574a <_printf_i+0xee>
    5798:	6809      	ldr	r1, [r1, #0]
    579a:	681a      	ldr	r2, [r3, #0]
    579c:	0608      	lsls	r0, r1, #24
    579e:	d505      	bpl.n	57ac <_printf_i+0x150>
    57a0:	1d11      	adds	r1, r2, #4
    57a2:	6019      	str	r1, [r3, #0]
    57a4:	6813      	ldr	r3, [r2, #0]
    57a6:	6962      	ldr	r2, [r4, #20]
    57a8:	601a      	str	r2, [r3, #0]
    57aa:	e006      	b.n	57ba <_printf_i+0x15e>
    57ac:	0649      	lsls	r1, r1, #25
    57ae:	d5f7      	bpl.n	57a0 <_printf_i+0x144>
    57b0:	1d11      	adds	r1, r2, #4
    57b2:	6019      	str	r1, [r3, #0]
    57b4:	6813      	ldr	r3, [r2, #0]
    57b6:	8aa2      	ldrh	r2, [r4, #20]
    57b8:	801a      	strh	r2, [r3, #0]
    57ba:	2300      	movs	r3, #0
    57bc:	9e04      	ldr	r6, [sp, #16]
    57be:	6123      	str	r3, [r4, #16]
    57c0:	e054      	b.n	586c <_printf_i+0x210>
    57c2:	681a      	ldr	r2, [r3, #0]
    57c4:	1d11      	adds	r1, r2, #4
    57c6:	6019      	str	r1, [r3, #0]
    57c8:	6816      	ldr	r6, [r2, #0]
    57ca:	2100      	movs	r1, #0
    57cc:	6862      	ldr	r2, [r4, #4]
    57ce:	0030      	movs	r0, r6
    57d0:	f000 f91a 	bl	5a08 <memchr>
    57d4:	2800      	cmp	r0, #0
    57d6:	d001      	beq.n	57dc <_printf_i+0x180>
    57d8:	1b80      	subs	r0, r0, r6
    57da:	6060      	str	r0, [r4, #4]
    57dc:	6863      	ldr	r3, [r4, #4]
    57de:	6123      	str	r3, [r4, #16]
    57e0:	2300      	movs	r3, #0
    57e2:	9a04      	ldr	r2, [sp, #16]
    57e4:	7013      	strb	r3, [r2, #0]
    57e6:	e041      	b.n	586c <_printf_i+0x210>
    57e8:	6923      	ldr	r3, [r4, #16]
    57ea:	0032      	movs	r2, r6
    57ec:	9906      	ldr	r1, [sp, #24]
    57ee:	9805      	ldr	r0, [sp, #20]
    57f0:	9d07      	ldr	r5, [sp, #28]
    57f2:	47a8      	blx	r5
    57f4:	1c43      	adds	r3, r0, #1
    57f6:	d043      	beq.n	5880 <_printf_i+0x224>
    57f8:	6823      	ldr	r3, [r4, #0]
    57fa:	2500      	movs	r5, #0
    57fc:	079b      	lsls	r3, r3, #30
    57fe:	d40f      	bmi.n	5820 <_printf_i+0x1c4>
    5800:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5802:	68e0      	ldr	r0, [r4, #12]
    5804:	4298      	cmp	r0, r3
    5806:	da3d      	bge.n	5884 <_printf_i+0x228>
    5808:	0018      	movs	r0, r3
    580a:	e03b      	b.n	5884 <_printf_i+0x228>
    580c:	0022      	movs	r2, r4
    580e:	2301      	movs	r3, #1
    5810:	3219      	adds	r2, #25
    5812:	9906      	ldr	r1, [sp, #24]
    5814:	9805      	ldr	r0, [sp, #20]
    5816:	9e07      	ldr	r6, [sp, #28]
    5818:	47b0      	blx	r6
    581a:	1c43      	adds	r3, r0, #1
    581c:	d030      	beq.n	5880 <_printf_i+0x224>
    581e:	3501      	adds	r5, #1
    5820:	68e3      	ldr	r3, [r4, #12]
    5822:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5824:	1a9b      	subs	r3, r3, r2
    5826:	429d      	cmp	r5, r3
    5828:	dbf0      	blt.n	580c <_printf_i+0x1b0>
    582a:	e7e9      	b.n	5800 <_printf_i+0x1a4>
    582c:	2d00      	cmp	r5, #0
    582e:	d0a9      	beq.n	5784 <_printf_i+0x128>
    5830:	9e04      	ldr	r6, [sp, #16]
    5832:	0028      	movs	r0, r5
    5834:	0039      	movs	r1, r7
    5836:	f7ff f84d 	bl	48d4 <__aeabi_uidivmod>
    583a:	9b03      	ldr	r3, [sp, #12]
    583c:	3e01      	subs	r6, #1
    583e:	5c5b      	ldrb	r3, [r3, r1]
    5840:	0028      	movs	r0, r5
    5842:	7033      	strb	r3, [r6, #0]
    5844:	0039      	movs	r1, r7
    5846:	f7fe ffbf 	bl	47c8 <__udivsi3>
    584a:	1e05      	subs	r5, r0, #0
    584c:	d1f1      	bne.n	5832 <_printf_i+0x1d6>
    584e:	2f08      	cmp	r7, #8
    5850:	d109      	bne.n	5866 <_printf_i+0x20a>
    5852:	6823      	ldr	r3, [r4, #0]
    5854:	07db      	lsls	r3, r3, #31
    5856:	d506      	bpl.n	5866 <_printf_i+0x20a>
    5858:	6863      	ldr	r3, [r4, #4]
    585a:	6922      	ldr	r2, [r4, #16]
    585c:	4293      	cmp	r3, r2
    585e:	dc02      	bgt.n	5866 <_printf_i+0x20a>
    5860:	2330      	movs	r3, #48	; 0x30
    5862:	3e01      	subs	r6, #1
    5864:	7033      	strb	r3, [r6, #0]
    5866:	9b04      	ldr	r3, [sp, #16]
    5868:	1b9b      	subs	r3, r3, r6
    586a:	6123      	str	r3, [r4, #16]
    586c:	9b07      	ldr	r3, [sp, #28]
    586e:	aa09      	add	r2, sp, #36	; 0x24
    5870:	9300      	str	r3, [sp, #0]
    5872:	0021      	movs	r1, r4
    5874:	9b06      	ldr	r3, [sp, #24]
    5876:	9805      	ldr	r0, [sp, #20]
    5878:	f7ff fe82 	bl	5580 <_printf_common>
    587c:	1c43      	adds	r3, r0, #1
    587e:	d1b3      	bne.n	57e8 <_printf_i+0x18c>
    5880:	2001      	movs	r0, #1
    5882:	4240      	negs	r0, r0
    5884:	b00b      	add	sp, #44	; 0x2c
    5886:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5888:	00005d5a 	.word	0x00005d5a
    588c:	00005d49 	.word	0x00005d49

00005890 <_sbrk_r>:
    5890:	2300      	movs	r3, #0
    5892:	b570      	push	{r4, r5, r6, lr}
    5894:	4c06      	ldr	r4, [pc, #24]	; (58b0 <_sbrk_r+0x20>)
    5896:	0005      	movs	r5, r0
    5898:	0008      	movs	r0, r1
    589a:	6023      	str	r3, [r4, #0]
    589c:	f7fc f834 	bl	1908 <_sbrk>
    58a0:	1c43      	adds	r3, r0, #1
    58a2:	d103      	bne.n	58ac <_sbrk_r+0x1c>
    58a4:	6823      	ldr	r3, [r4, #0]
    58a6:	2b00      	cmp	r3, #0
    58a8:	d000      	beq.n	58ac <_sbrk_r+0x1c>
    58aa:	602b      	str	r3, [r5, #0]
    58ac:	bd70      	pop	{r4, r5, r6, pc}
    58ae:	46c0      	nop			; (mov r8, r8)
    58b0:	200001bc 	.word	0x200001bc

000058b4 <__sread>:
    58b4:	b570      	push	{r4, r5, r6, lr}
    58b6:	000c      	movs	r4, r1
    58b8:	250e      	movs	r5, #14
    58ba:	5f49      	ldrsh	r1, [r1, r5]
    58bc:	f000 f8b2 	bl	5a24 <_read_r>
    58c0:	2800      	cmp	r0, #0
    58c2:	db03      	blt.n	58cc <__sread+0x18>
    58c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    58c6:	181b      	adds	r3, r3, r0
    58c8:	6563      	str	r3, [r4, #84]	; 0x54
    58ca:	bd70      	pop	{r4, r5, r6, pc}
    58cc:	89a3      	ldrh	r3, [r4, #12]
    58ce:	4a02      	ldr	r2, [pc, #8]	; (58d8 <__sread+0x24>)
    58d0:	4013      	ands	r3, r2
    58d2:	81a3      	strh	r3, [r4, #12]
    58d4:	e7f9      	b.n	58ca <__sread+0x16>
    58d6:	46c0      	nop			; (mov r8, r8)
    58d8:	ffffefff 	.word	0xffffefff

000058dc <__swrite>:
    58dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58de:	001f      	movs	r7, r3
    58e0:	898b      	ldrh	r3, [r1, #12]
    58e2:	0005      	movs	r5, r0
    58e4:	000c      	movs	r4, r1
    58e6:	0016      	movs	r6, r2
    58e8:	05db      	lsls	r3, r3, #23
    58ea:	d505      	bpl.n	58f8 <__swrite+0x1c>
    58ec:	230e      	movs	r3, #14
    58ee:	5ec9      	ldrsh	r1, [r1, r3]
    58f0:	2200      	movs	r2, #0
    58f2:	2302      	movs	r3, #2
    58f4:	f000 f874 	bl	59e0 <_lseek_r>
    58f8:	89a3      	ldrh	r3, [r4, #12]
    58fa:	4a05      	ldr	r2, [pc, #20]	; (5910 <__swrite+0x34>)
    58fc:	0028      	movs	r0, r5
    58fe:	4013      	ands	r3, r2
    5900:	81a3      	strh	r3, [r4, #12]
    5902:	0032      	movs	r2, r6
    5904:	230e      	movs	r3, #14
    5906:	5ee1      	ldrsh	r1, [r4, r3]
    5908:	003b      	movs	r3, r7
    590a:	f000 f81f 	bl	594c <_write_r>
    590e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5910:	ffffefff 	.word	0xffffefff

00005914 <__sseek>:
    5914:	b570      	push	{r4, r5, r6, lr}
    5916:	000c      	movs	r4, r1
    5918:	250e      	movs	r5, #14
    591a:	5f49      	ldrsh	r1, [r1, r5]
    591c:	f000 f860 	bl	59e0 <_lseek_r>
    5920:	89a3      	ldrh	r3, [r4, #12]
    5922:	1c42      	adds	r2, r0, #1
    5924:	d103      	bne.n	592e <__sseek+0x1a>
    5926:	4a05      	ldr	r2, [pc, #20]	; (593c <__sseek+0x28>)
    5928:	4013      	ands	r3, r2
    592a:	81a3      	strh	r3, [r4, #12]
    592c:	bd70      	pop	{r4, r5, r6, pc}
    592e:	2280      	movs	r2, #128	; 0x80
    5930:	0152      	lsls	r2, r2, #5
    5932:	4313      	orrs	r3, r2
    5934:	81a3      	strh	r3, [r4, #12]
    5936:	6560      	str	r0, [r4, #84]	; 0x54
    5938:	e7f8      	b.n	592c <__sseek+0x18>
    593a:	46c0      	nop			; (mov r8, r8)
    593c:	ffffefff 	.word	0xffffefff

00005940 <__sclose>:
    5940:	b510      	push	{r4, lr}
    5942:	230e      	movs	r3, #14
    5944:	5ec9      	ldrsh	r1, [r1, r3]
    5946:	f000 f815 	bl	5974 <_close_r>
    594a:	bd10      	pop	{r4, pc}

0000594c <_write_r>:
    594c:	b570      	push	{r4, r5, r6, lr}
    594e:	0005      	movs	r5, r0
    5950:	0008      	movs	r0, r1
    5952:	0011      	movs	r1, r2
    5954:	2200      	movs	r2, #0
    5956:	4c06      	ldr	r4, [pc, #24]	; (5970 <_write_r+0x24>)
    5958:	6022      	str	r2, [r4, #0]
    595a:	001a      	movs	r2, r3
    595c:	f7fe f9b6 	bl	3ccc <_write>
    5960:	1c43      	adds	r3, r0, #1
    5962:	d103      	bne.n	596c <_write_r+0x20>
    5964:	6823      	ldr	r3, [r4, #0]
    5966:	2b00      	cmp	r3, #0
    5968:	d000      	beq.n	596c <_write_r+0x20>
    596a:	602b      	str	r3, [r5, #0]
    596c:	bd70      	pop	{r4, r5, r6, pc}
    596e:	46c0      	nop			; (mov r8, r8)
    5970:	200001bc 	.word	0x200001bc

00005974 <_close_r>:
    5974:	2300      	movs	r3, #0
    5976:	b570      	push	{r4, r5, r6, lr}
    5978:	4c06      	ldr	r4, [pc, #24]	; (5994 <_close_r+0x20>)
    597a:	0005      	movs	r5, r0
    597c:	0008      	movs	r0, r1
    597e:	6023      	str	r3, [r4, #0]
    5980:	f7fb ffe0 	bl	1944 <_close>
    5984:	1c43      	adds	r3, r0, #1
    5986:	d103      	bne.n	5990 <_close_r+0x1c>
    5988:	6823      	ldr	r3, [r4, #0]
    598a:	2b00      	cmp	r3, #0
    598c:	d000      	beq.n	5990 <_close_r+0x1c>
    598e:	602b      	str	r3, [r5, #0]
    5990:	bd70      	pop	{r4, r5, r6, pc}
    5992:	46c0      	nop			; (mov r8, r8)
    5994:	200001bc 	.word	0x200001bc

00005998 <_fstat_r>:
    5998:	2300      	movs	r3, #0
    599a:	b570      	push	{r4, r5, r6, lr}
    599c:	4c06      	ldr	r4, [pc, #24]	; (59b8 <_fstat_r+0x20>)
    599e:	0005      	movs	r5, r0
    59a0:	0008      	movs	r0, r1
    59a2:	0011      	movs	r1, r2
    59a4:	6023      	str	r3, [r4, #0]
    59a6:	f7fb ffd7 	bl	1958 <_fstat>
    59aa:	1c43      	adds	r3, r0, #1
    59ac:	d103      	bne.n	59b6 <_fstat_r+0x1e>
    59ae:	6823      	ldr	r3, [r4, #0]
    59b0:	2b00      	cmp	r3, #0
    59b2:	d000      	beq.n	59b6 <_fstat_r+0x1e>
    59b4:	602b      	str	r3, [r5, #0]
    59b6:	bd70      	pop	{r4, r5, r6, pc}
    59b8:	200001bc 	.word	0x200001bc

000059bc <_isatty_r>:
    59bc:	2300      	movs	r3, #0
    59be:	b570      	push	{r4, r5, r6, lr}
    59c0:	4c06      	ldr	r4, [pc, #24]	; (59dc <_isatty_r+0x20>)
    59c2:	0005      	movs	r5, r0
    59c4:	0008      	movs	r0, r1
    59c6:	6023      	str	r3, [r4, #0]
    59c8:	f7fb ffd4 	bl	1974 <_isatty>
    59cc:	1c43      	adds	r3, r0, #1
    59ce:	d103      	bne.n	59d8 <_isatty_r+0x1c>
    59d0:	6823      	ldr	r3, [r4, #0]
    59d2:	2b00      	cmp	r3, #0
    59d4:	d000      	beq.n	59d8 <_isatty_r+0x1c>
    59d6:	602b      	str	r3, [r5, #0]
    59d8:	bd70      	pop	{r4, r5, r6, pc}
    59da:	46c0      	nop			; (mov r8, r8)
    59dc:	200001bc 	.word	0x200001bc

000059e0 <_lseek_r>:
    59e0:	b570      	push	{r4, r5, r6, lr}
    59e2:	0005      	movs	r5, r0
    59e4:	0008      	movs	r0, r1
    59e6:	0011      	movs	r1, r2
    59e8:	2200      	movs	r2, #0
    59ea:	4c06      	ldr	r4, [pc, #24]	; (5a04 <_lseek_r+0x24>)
    59ec:	6022      	str	r2, [r4, #0]
    59ee:	001a      	movs	r2, r3
    59f0:	f7fb ffc9 	bl	1986 <_lseek>
    59f4:	1c43      	adds	r3, r0, #1
    59f6:	d103      	bne.n	5a00 <_lseek_r+0x20>
    59f8:	6823      	ldr	r3, [r4, #0]
    59fa:	2b00      	cmp	r3, #0
    59fc:	d000      	beq.n	5a00 <_lseek_r+0x20>
    59fe:	602b      	str	r3, [r5, #0]
    5a00:	bd70      	pop	{r4, r5, r6, pc}
    5a02:	46c0      	nop			; (mov r8, r8)
    5a04:	200001bc 	.word	0x200001bc

00005a08 <memchr>:
    5a08:	b2c9      	uxtb	r1, r1
    5a0a:	1882      	adds	r2, r0, r2
    5a0c:	4290      	cmp	r0, r2
    5a0e:	d101      	bne.n	5a14 <memchr+0xc>
    5a10:	2000      	movs	r0, #0
    5a12:	4770      	bx	lr
    5a14:	7803      	ldrb	r3, [r0, #0]
    5a16:	428b      	cmp	r3, r1
    5a18:	d0fb      	beq.n	5a12 <memchr+0xa>
    5a1a:	3001      	adds	r0, #1
    5a1c:	e7f6      	b.n	5a0c <memchr+0x4>

00005a1e <__malloc_lock>:
    5a1e:	4770      	bx	lr

00005a20 <__malloc_unlock>:
    5a20:	4770      	bx	lr
	...

00005a24 <_read_r>:
    5a24:	b570      	push	{r4, r5, r6, lr}
    5a26:	0005      	movs	r5, r0
    5a28:	0008      	movs	r0, r1
    5a2a:	0011      	movs	r1, r2
    5a2c:	2200      	movs	r2, #0
    5a2e:	4c06      	ldr	r4, [pc, #24]	; (5a48 <_read_r+0x24>)
    5a30:	6022      	str	r2, [r4, #0]
    5a32:	001a      	movs	r2, r3
    5a34:	f7fe f920 	bl	3c78 <_read>
    5a38:	1c43      	adds	r3, r0, #1
    5a3a:	d103      	bne.n	5a44 <_read_r+0x20>
    5a3c:	6823      	ldr	r3, [r4, #0]
    5a3e:	2b00      	cmp	r3, #0
    5a40:	d000      	beq.n	5a44 <_read_r+0x20>
    5a42:	602b      	str	r3, [r5, #0]
    5a44:	bd70      	pop	{r4, r5, r6, pc}
    5a46:	46c0      	nop			; (mov r8, r8)
    5a48:	200001bc 	.word	0x200001bc
    5a4c:	0000029e 	.word	0x0000029e
    5a50:	000002a2 	.word	0x000002a2
    5a54:	000002a6 	.word	0x000002a6
    5a58:	000002aa 	.word	0x000002aa
    5a5c:	000002ae 	.word	0x000002ae
    5a60:	000002b2 	.word	0x000002b2
    5a64:	000002b6 	.word	0x000002b6
    5a68:	000002ba 	.word	0x000002ba
    5a6c:	000002be 	.word	0x000002be
    5a70:	000002c2 	.word	0x000002c2
    5a74:	0000031a 	.word	0x0000031a
    5a78:	00000320 	.word	0x00000320
    5a7c:	00000326 	.word	0x00000326
    5a80:	0000032c 	.word	0x0000032c
    5a84:	0000032c 	.word	0x0000032c
    5a88:	00000332 	.word	0x00000332
    5a8c:	00000332 	.word	0x00000332
    5a90:	00000332 	.word	0x00000332
    5a94:	00000338 	.word	0x00000338
    5a98:	0000033e 	.word	0x0000033e
    5a9c:	00001c6c 	.word	0x00001c6c
    5aa0:	00001c6c 	.word	0x00001c6c
    5aa4:	00001c60 	.word	0x00001c60
    5aa8:	00001c6c 	.word	0x00001c6c
    5aac:	00001c60 	.word	0x00001c60
    5ab0:	00001c3a 	.word	0x00001c3a
    5ab4:	00001c3a 	.word	0x00001c3a
    5ab8:	00001c6c 	.word	0x00001c6c
    5abc:	00001c6c 	.word	0x00001c6c
    5ac0:	00001c6c 	.word	0x00001c6c
    5ac4:	00001c6c 	.word	0x00001c6c
    5ac8:	00001c6c 	.word	0x00001c6c
    5acc:	00001c6c 	.word	0x00001c6c
    5ad0:	00001c6c 	.word	0x00001c6c
    5ad4:	00001c6c 	.word	0x00001c6c
    5ad8:	00001c6c 	.word	0x00001c6c
    5adc:	00001c6c 	.word	0x00001c6c
    5ae0:	00001c6c 	.word	0x00001c6c
    5ae4:	00001c6c 	.word	0x00001c6c
    5ae8:	00001c6c 	.word	0x00001c6c
    5aec:	00001c6c 	.word	0x00001c6c
    5af0:	00001c6c 	.word	0x00001c6c
    5af4:	00001c6c 	.word	0x00001c6c
    5af8:	00001c6c 	.word	0x00001c6c
    5afc:	00001c6c 	.word	0x00001c6c
    5b00:	00001c6c 	.word	0x00001c6c
    5b04:	00001c6c 	.word	0x00001c6c
    5b08:	00001c6c 	.word	0x00001c6c
    5b0c:	00001c6c 	.word	0x00001c6c
    5b10:	00001c6c 	.word	0x00001c6c
    5b14:	00001c6c 	.word	0x00001c6c
    5b18:	00001c6c 	.word	0x00001c6c
    5b1c:	00001c6c 	.word	0x00001c6c
    5b20:	00001c6c 	.word	0x00001c6c
    5b24:	00001c6c 	.word	0x00001c6c
    5b28:	00001c6c 	.word	0x00001c6c
    5b2c:	00001c6c 	.word	0x00001c6c
    5b30:	00001c6c 	.word	0x00001c6c
    5b34:	00001c6c 	.word	0x00001c6c
    5b38:	00001c6c 	.word	0x00001c6c
    5b3c:	00001c6c 	.word	0x00001c6c
    5b40:	00001c6c 	.word	0x00001c6c
    5b44:	00001c6c 	.word	0x00001c6c
    5b48:	00001c6c 	.word	0x00001c6c
    5b4c:	00001c6c 	.word	0x00001c6c
    5b50:	00001c6c 	.word	0x00001c6c
    5b54:	00001c6c 	.word	0x00001c6c
    5b58:	00001c6c 	.word	0x00001c6c
    5b5c:	00001c6c 	.word	0x00001c6c
    5b60:	00001c6c 	.word	0x00001c6c
    5b64:	00001c6c 	.word	0x00001c6c
    5b68:	00001c6c 	.word	0x00001c6c
    5b6c:	00001c6c 	.word	0x00001c6c
    5b70:	00001c6c 	.word	0x00001c6c
    5b74:	00001c6c 	.word	0x00001c6c
    5b78:	00001c6c 	.word	0x00001c6c
    5b7c:	00001c6c 	.word	0x00001c6c
    5b80:	00001c6c 	.word	0x00001c6c
    5b84:	00001c6c 	.word	0x00001c6c
    5b88:	00001c6c 	.word	0x00001c6c
    5b8c:	00001c6c 	.word	0x00001c6c
    5b90:	00001c6c 	.word	0x00001c6c
    5b94:	00001c6c 	.word	0x00001c6c
    5b98:	00001c6c 	.word	0x00001c6c
    5b9c:	00001c60 	.word	0x00001c60
    5ba0:	00001c60 	.word	0x00001c60
    5ba4:	00001c76 	.word	0x00001c76
    5ba8:	00001c76 	.word	0x00001c76
    5bac:	00001c76 	.word	0x00001c76
    5bb0:	00001c76 	.word	0x00001c76
    5bb4:	42000800 	.word	0x42000800
    5bb8:	42000c00 	.word	0x42000c00
    5bbc:	42001000 	.word	0x42001000
    5bc0:	42001400 	.word	0x42001400
    5bc4:	42001800 	.word	0x42001800
    5bc8:	42001c00 	.word	0x42001c00
    5bcc:	0c0b0a09 	.word	0x0c0b0a09
    5bd0:	00000e0d 	.word	0x00000e0d
    5bd4:	0000330a 	.word	0x0000330a
    5bd8:	00003382 	.word	0x00003382
    5bdc:	00003382 	.word	0x00003382
    5be0:	00003328 	.word	0x00003328
    5be4:	00003322 	.word	0x00003322
    5be8:	0000332e 	.word	0x0000332e
    5bec:	00003310 	.word	0x00003310
    5bf0:	00003334 	.word	0x00003334
    5bf4:	00003368 	.word	0x00003368
    5bf8:	0000345c 	.word	0x0000345c
    5bfc:	000034ac 	.word	0x000034ac
    5c00:	000034ac 	.word	0x000034ac
    5c04:	000034a8 	.word	0x000034a8
    5c08:	0000344e 	.word	0x0000344e
    5c0c:	0000346e 	.word	0x0000346e
    5c10:	0000343e 	.word	0x0000343e
    5c14:	00003480 	.word	0x00003480
    5c18:	00003492 	.word	0x00003492
    5c1c:	72677055 	.word	0x72677055
    5c20:	6e696461 	.word	0x6e696461
    5c24:	69662067 	.word	0x69662067
    5c28:	61776d72 	.word	0x61776d72
    5c2c:	74206572 	.word	0x74206572
    5c30:	6576206f 	.word	0x6576206f
    5c34:	6f697372 	.word	0x6f697372
    5c38:	25203a6e 	.word	0x25203a6e
    5c3c:	000a2e64 	.word	0x000a2e64
    5c40:	73616c46 	.word	0x73616c46
    5c44:	68432068 	.word	0x68432068
    5c48:	64207069 	.word	0x64207069
    5c4c:	6e206469 	.word	0x6e206469
    5c50:	7220746f 	.word	0x7220746f
    5c54:	6f707365 	.word	0x6f707365
    5c58:	202e646e 	.word	0x202e646e
    5c5c:	72677055 	.word	0x72677055
    5c60:	20656461 	.word	0x20656461
    5c64:	6c696166 	.word	0x6c696166
    5c68:	21206465 	.word	0x21206465
    5c6c:	00000000 	.word	0x00000000
    5c70:	72677055 	.word	0x72677055
    5c74:	20656461 	.word	0x20656461
    5c78:	706d6f63 	.word	0x706d6f63
    5c7c:	6574656c 	.word	0x6574656c
    5c80:	6552202e 	.word	0x6552202e
    5c84:	74746573 	.word	0x74746573
    5c88:	20676e69 	.word	0x20676e69
    5c8c:	69766564 	.word	0x69766564
    5c90:	002e6563 	.word	0x002e6563
    5c94:	74697257 	.word	0x74697257
    5c98:	20676e69 	.word	0x20676e69
    5c9c:	204d564e 	.word	0x204d564e
    5ca0:	66206f74 	.word	0x66206f74
    5ca4:	6873616c 	.word	0x6873616c
    5ca8:	63657320 	.word	0x63657320
    5cac:	6e6f6974 	.word	0x6e6f6974
    5cb0:	6425203a 	.word	0x6425203a
    5cb4:	00000a2e 	.word	0x00000a2e
    5cb8:	72646461 	.word	0x72646461
    5cbc:	203a695f 	.word	0x203a695f
    5cc0:	0a0d7825 	.word	0x0a0d7825
    5cc4:	00000000 	.word	0x00000000
    5cc8:	62206e69 	.word	0x62206e69
    5ccc:	0a746f6f 	.word	0x0a746f6f
    5cd0:	0000000d 	.word	0x0000000d

00005cd4 <_global_impure_ptr>:
    5cd4:	20000010                                ... 

00005cd8 <__sf_fake_stderr>:
	...

00005cf8 <__sf_fake_stdin>:
	...

00005d18 <__sf_fake_stdout>:
	...
    5d38:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    5d48:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    5d58:	31300046 35343332 39383736 64636261     F.0123456789abcd
    5d68:	00006665                                ef..

00005d6c <_init>:
    5d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d6e:	46c0      	nop			; (mov r8, r8)
    5d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5d72:	bc08      	pop	{r3}
    5d74:	469e      	mov	lr, r3
    5d76:	4770      	bx	lr

00005d78 <__init_array_start>:
    5d78:	000000dd 	.word	0x000000dd

00005d7c <_fini>:
    5d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d7e:	46c0      	nop			; (mov r8, r8)
    5d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5d82:	bc08      	pop	{r3}
    5d84:	469e      	mov	lr, r3
    5d86:	4770      	bx	lr

00005d88 <__fini_array_start>:
    5d88:	000000b5 	.word	0x000000b5
