
I2C_QUICK_START_MASTER_INTERRUPT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005fa0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00005fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000104  20000070  00006010  00020070  2**2
                  ALLOC
  3 .stack        00002004  20000174  00006114  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002936a  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003471  00000000  00000000  0004945b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000025d3  00000000  00000000  0004c8cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000758  00000000  00000000  0004ee9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000628  00000000  00000000  0004f5f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a79b  00000000  00000000  0004fc1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c9f6  00000000  00000000  0006a3ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00089160  00000000  00000000  00076db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001f5c  00000000  00000000  000fff10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 21 00 20 15 30 00 00 0d 31 00 00 0d 31 00 00     x!. .0...1...1..
	...
      2c:	0d 31 00 00 00 00 00 00 00 00 00 00 0d 31 00 00     .1...........1..
      3c:	0d 31 00 00 0d 31 00 00 0d 31 00 00 0d 31 00 00     .1...1...1...1..
      4c:	0d 31 00 00 0d 31 00 00 0d 31 00 00 0d 31 00 00     .1...1...1...1..
      5c:	0d 31 00 00 0d 31 00 00 41 19 00 00 59 19 00 00     .1...1..A...Y...
      6c:	71 19 00 00 89 19 00 00 a1 19 00 00 b9 19 00 00     q...............
      7c:	0d 31 00 00 0d 31 00 00 0d 31 00 00 0d 31 00 00     .1...1...1...1..
      8c:	0d 31 00 00 0d 31 00 00 00 00 00 00 00 00 00 00     .1...1..........
      9c:	0d 31 00 00 0d 31 00 00 0d 31 00 00 0d 31 00 00     .1...1...1...1..
      ac:	0d 31 00 00 00 00 00 00                             .1......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00005fa0 	.word	0x00005fa0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00005fa0 	.word	0x00005fa0
     10c:	00005fa0 	.word	0x00005fa0
     110:	00000000 	.word	0x00000000

00000114 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2b00      	cmp	r3, #0
     120:	d00c      	beq.n	13c <delay_cycles+0x28>
		SysTick->LOAD = n;
     122:	4b08      	ldr	r3, [pc, #32]	; (144 <delay_cycles+0x30>)
     124:	687a      	ldr	r2, [r7, #4]
     126:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     128:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_cycles+0x30>)
     12a:	2200      	movs	r2, #0
     12c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12e:	46c0      	nop			; (mov r8, r8)
     130:	4b04      	ldr	r3, [pc, #16]	; (144 <delay_cycles+0x30>)
     132:	681a      	ldr	r2, [r3, #0]
     134:	2380      	movs	r3, #128	; 0x80
     136:	025b      	lsls	r3, r3, #9
     138:	4013      	ands	r3, r2
     13a:	d0f9      	beq.n	130 <delay_cycles+0x1c>
		};
	}
}
     13c:	46c0      	nop			; (mov r8, r8)
     13e:	46bd      	mov	sp, r7
     140:	b002      	add	sp, #8
     142:	bd80      	pop	{r7, pc}
     144:	e000e010 	.word	0xe000e010

00000148 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     14c:	2000      	movs	r0, #0
     14e:	4b0f      	ldr	r3, [pc, #60]	; (18c <delay_init+0x44>)
     150:	4798      	blx	r3
     152:	0002      	movs	r2, r0
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x48>)
     156:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     158:	4b0d      	ldr	r3, [pc, #52]	; (190 <delay_init+0x48>)
     15a:	6818      	ldr	r0, [r3, #0]
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <delay_init+0x4c>)
     15e:	22fa      	movs	r2, #250	; 0xfa
     160:	0091      	lsls	r1, r2, #2
     162:	4798      	blx	r3
     164:	0003      	movs	r3, r0
     166:	001a      	movs	r2, r3
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x48>)
     16a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <delay_init+0x48>)
     16e:	6818      	ldr	r0, [r3, #0]
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_init+0x4c>)
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	0003      	movs	r3, r0
     17a:	001a      	movs	r2, r3
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x50>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x54>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46c0      	nop			; (mov r8, r8)
     188:	46bd      	mov	sp, r7
     18a:	bd80      	pop	{r7, pc}
     18c:	00002bc9 	.word	0x00002bc9
     190:	20000000 	.word	0x20000000
     194:	00003895 	.word	0x00003895
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1aa:	4b07      	ldr	r3, [pc, #28]	; (1c8 <delay_cycles_ms+0x28>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b06      	ldr	r3, [pc, #24]	; (1cc <delay_cycles_ms+0x2c>)
     1b2:	4798      	blx	r3
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_ms+0xa>
	}
}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	46bd      	mov	sp, r7
     1c2:	b002      	add	sp, #8
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	20000000 	.word	0x20000000
     1cc:	00000115 	.word	0x00000115

000001d0 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	b082      	sub	sp, #8
     1d4:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     1d6:	4b10      	ldr	r3, [pc, #64]	; (218 <cpu_irq_enter_critical+0x48>)
     1d8:	681b      	ldr	r3, [r3, #0]
     1da:	2b00      	cmp	r3, #0
     1dc:	d112      	bne.n	204 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     1de:	f3ef 8310 	mrs	r3, PRIMASK
     1e2:	607b      	str	r3, [r7, #4]
  return(result);
     1e4:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     1e6:	2b00      	cmp	r3, #0
     1e8:	d109      	bne.n	1fe <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
     1ea:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1ec:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1f0:	4b0a      	ldr	r3, [pc, #40]	; (21c <cpu_irq_enter_critical+0x4c>)
     1f2:	2200      	movs	r2, #0
     1f4:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1f6:	4b0a      	ldr	r3, [pc, #40]	; (220 <cpu_irq_enter_critical+0x50>)
     1f8:	2201      	movs	r2, #1
     1fa:	701a      	strb	r2, [r3, #0]
     1fc:	e002      	b.n	204 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     1fe:	4b08      	ldr	r3, [pc, #32]	; (220 <cpu_irq_enter_critical+0x50>)
     200:	2200      	movs	r2, #0
     202:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     204:	4b04      	ldr	r3, [pc, #16]	; (218 <cpu_irq_enter_critical+0x48>)
     206:	681b      	ldr	r3, [r3, #0]
     208:	1c5a      	adds	r2, r3, #1
     20a:	4b03      	ldr	r3, [pc, #12]	; (218 <cpu_irq_enter_critical+0x48>)
     20c:	601a      	str	r2, [r3, #0]
}
     20e:	46c0      	nop			; (mov r8, r8)
     210:	46bd      	mov	sp, r7
     212:	b002      	add	sp, #8
     214:	bd80      	pop	{r7, pc}
     216:	46c0      	nop			; (mov r8, r8)
     218:	2000008c 	.word	0x2000008c
     21c:	20000008 	.word	0x20000008
     220:	20000090 	.word	0x20000090

00000224 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     224:	b580      	push	{r7, lr}
     226:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     228:	4b0b      	ldr	r3, [pc, #44]	; (258 <cpu_irq_leave_critical+0x34>)
     22a:	681b      	ldr	r3, [r3, #0]
     22c:	1e5a      	subs	r2, r3, #1
     22e:	4b0a      	ldr	r3, [pc, #40]	; (258 <cpu_irq_leave_critical+0x34>)
     230:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     232:	4b09      	ldr	r3, [pc, #36]	; (258 <cpu_irq_leave_critical+0x34>)
     234:	681b      	ldr	r3, [r3, #0]
     236:	2b00      	cmp	r3, #0
     238:	d10a      	bne.n	250 <cpu_irq_leave_critical+0x2c>
     23a:	4b08      	ldr	r3, [pc, #32]	; (25c <cpu_irq_leave_critical+0x38>)
     23c:	781b      	ldrb	r3, [r3, #0]
     23e:	b2db      	uxtb	r3, r3
     240:	2b00      	cmp	r3, #0
     242:	d005      	beq.n	250 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     244:	4b06      	ldr	r3, [pc, #24]	; (260 <cpu_irq_leave_critical+0x3c>)
     246:	2201      	movs	r2, #1
     248:	701a      	strb	r2, [r3, #0]
     24a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     24e:	b662      	cpsie	i
	}
}
     250:	46c0      	nop			; (mov r8, r8)
     252:	46bd      	mov	sp, r7
     254:	bd80      	pop	{r7, pc}
     256:	46c0      	nop			; (mov r8, r8)
     258:	2000008c 	.word	0x2000008c
     25c:	20000090 	.word	0x20000090
     260:	20000008 	.word	0x20000008

00000264 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     264:	b580      	push	{r7, lr}
     266:	b084      	sub	sp, #16
     268:	af00      	add	r7, sp, #0
     26a:	0002      	movs	r2, r0
     26c:	1dfb      	adds	r3, r7, #7
     26e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     270:	230f      	movs	r3, #15
     272:	18fb      	adds	r3, r7, r3
     274:	1dfa      	adds	r2, r7, #7
     276:	7812      	ldrb	r2, [r2, #0]
     278:	09d2      	lsrs	r2, r2, #7
     27a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     27c:	230e      	movs	r3, #14
     27e:	18fb      	adds	r3, r7, r3
     280:	1dfa      	adds	r2, r7, #7
     282:	7812      	ldrb	r2, [r2, #0]
     284:	0952      	lsrs	r2, r2, #5
     286:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     288:	4b0d      	ldr	r3, [pc, #52]	; (2c0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     28a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     28c:	230f      	movs	r3, #15
     28e:	18fb      	adds	r3, r7, r3
     290:	781b      	ldrb	r3, [r3, #0]
     292:	2b00      	cmp	r3, #0
     294:	d10f      	bne.n	2b6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     296:	230f      	movs	r3, #15
     298:	18fb      	adds	r3, r7, r3
     29a:	781b      	ldrb	r3, [r3, #0]
     29c:	009b      	lsls	r3, r3, #2
     29e:	2210      	movs	r2, #16
     2a0:	4694      	mov	ip, r2
     2a2:	44bc      	add	ip, r7
     2a4:	4463      	add	r3, ip
     2a6:	3b08      	subs	r3, #8
     2a8:	681a      	ldr	r2, [r3, #0]
     2aa:	230e      	movs	r3, #14
     2ac:	18fb      	adds	r3, r7, r3
     2ae:	781b      	ldrb	r3, [r3, #0]
     2b0:	01db      	lsls	r3, r3, #7
     2b2:	18d3      	adds	r3, r2, r3
     2b4:	e000      	b.n	2b8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     2b6:	2300      	movs	r3, #0
	}
}
     2b8:	0018      	movs	r0, r3
     2ba:	46bd      	mov	sp, r7
     2bc:	b004      	add	sp, #16
     2be:	bd80      	pop	{r7, pc}
     2c0:	41004400 	.word	0x41004400

000002c4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     2c4:	b580      	push	{r7, lr}
     2c6:	b082      	sub	sp, #8
     2c8:	af00      	add	r7, sp, #0
     2ca:	0002      	movs	r2, r0
     2cc:	1dfb      	adds	r3, r7, #7
     2ce:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     2d0:	1dfb      	adds	r3, r7, #7
     2d2:	781b      	ldrb	r3, [r3, #0]
     2d4:	0018      	movs	r0, r3
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <port_get_group_from_gpio_pin+0x20>)
     2d8:	4798      	blx	r3
     2da:	0003      	movs	r3, r0
}
     2dc:	0018      	movs	r0, r3
     2de:	46bd      	mov	sp, r7
     2e0:	b002      	add	sp, #8
     2e2:	bd80      	pop	{r7, pc}
     2e4:	00000265 	.word	0x00000265

000002e8 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     2e8:	b580      	push	{r7, lr}
     2ea:	b082      	sub	sp, #8
     2ec:	af00      	add	r7, sp, #0
     2ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     2f0:	687b      	ldr	r3, [r7, #4]
     2f2:	2200      	movs	r2, #0
     2f4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     2f6:	687b      	ldr	r3, [r7, #4]
     2f8:	2201      	movs	r2, #1
     2fa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	2200      	movs	r2, #0
     300:	709a      	strb	r2, [r3, #2]
}
     302:	46c0      	nop			; (mov r8, r8)
     304:	46bd      	mov	sp, r7
     306:	b002      	add	sp, #8
     308:	bd80      	pop	{r7, pc}
	...

0000030c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     30c:	b580      	push	{r7, lr}
     30e:	b084      	sub	sp, #16
     310:	af00      	add	r7, sp, #0
     312:	0002      	movs	r2, r0
     314:	1dfb      	adds	r3, r7, #7
     316:	701a      	strb	r2, [r3, #0]
     318:	1dbb      	adds	r3, r7, #6
     31a:	1c0a      	adds	r2, r1, #0
     31c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     31e:	1dfb      	adds	r3, r7, #7
     320:	781b      	ldrb	r3, [r3, #0]
     322:	0018      	movs	r0, r3
     324:	4b0d      	ldr	r3, [pc, #52]	; (35c <port_pin_set_output_level+0x50>)
     326:	4798      	blx	r3
     328:	0003      	movs	r3, r0
     32a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     32c:	1dfb      	adds	r3, r7, #7
     32e:	781b      	ldrb	r3, [r3, #0]
     330:	221f      	movs	r2, #31
     332:	4013      	ands	r3, r2
     334:	2201      	movs	r2, #1
     336:	409a      	lsls	r2, r3
     338:	0013      	movs	r3, r2
     33a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     33c:	1dbb      	adds	r3, r7, #6
     33e:	781b      	ldrb	r3, [r3, #0]
     340:	2b00      	cmp	r3, #0
     342:	d003      	beq.n	34c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     344:	68fb      	ldr	r3, [r7, #12]
     346:	68ba      	ldr	r2, [r7, #8]
     348:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     34a:	e002      	b.n	352 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     34c:	68fb      	ldr	r3, [r7, #12]
     34e:	68ba      	ldr	r2, [r7, #8]
     350:	615a      	str	r2, [r3, #20]
}
     352:	46c0      	nop			; (mov r8, r8)
     354:	46bd      	mov	sp, r7
     356:	b004      	add	sp, #16
     358:	bd80      	pop	{r7, pc}
     35a:	46c0      	nop			; (mov r8, r8)
     35c:	000002c5 	.word	0x000002c5

00000360 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     360:	b580      	push	{r7, lr}
     362:	b082      	sub	sp, #8
     364:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     366:	1d3b      	adds	r3, r7, #4
     368:	0018      	movs	r0, r3
     36a:	4b0e      	ldr	r3, [pc, #56]	; (3a4 <system_board_init+0x44>)
     36c:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     36e:	1d3b      	adds	r3, r7, #4
     370:	2201      	movs	r2, #1
     372:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     374:	1d3b      	adds	r3, r7, #4
     376:	0019      	movs	r1, r3
     378:	2017      	movs	r0, #23
     37a:	4b0b      	ldr	r3, [pc, #44]	; (3a8 <system_board_init+0x48>)
     37c:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     37e:	2101      	movs	r1, #1
     380:	2017      	movs	r0, #23
     382:	4b0a      	ldr	r3, [pc, #40]	; (3ac <system_board_init+0x4c>)
     384:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     386:	1d3b      	adds	r3, r7, #4
     388:	2200      	movs	r2, #0
     38a:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     38c:	1d3b      	adds	r3, r7, #4
     38e:	2201      	movs	r2, #1
     390:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     392:	1d3b      	adds	r3, r7, #4
     394:	0019      	movs	r1, r3
     396:	2037      	movs	r0, #55	; 0x37
     398:	4b03      	ldr	r3, [pc, #12]	; (3a8 <system_board_init+0x48>)
     39a:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     39c:	46c0      	nop			; (mov r8, r8)
     39e:	46bd      	mov	sp, r7
     3a0:	b002      	add	sp, #8
     3a2:	bd80      	pop	{r7, pc}
     3a4:	000002e9 	.word	0x000002e9
     3a8:	000003d9 	.word	0x000003d9
     3ac:	0000030d 	.word	0x0000030d

000003b0 <system_pinmux_get_config_defaults>:
{
     3b0:	b580      	push	{r7, lr}
     3b2:	b082      	sub	sp, #8
     3b4:	af00      	add	r7, sp, #0
     3b6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	2280      	movs	r2, #128	; 0x80
     3bc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3be:	687b      	ldr	r3, [r7, #4]
     3c0:	2200      	movs	r2, #0
     3c2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     3c4:	687b      	ldr	r3, [r7, #4]
     3c6:	2201      	movs	r2, #1
     3c8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     3ca:	687b      	ldr	r3, [r7, #4]
     3cc:	2200      	movs	r2, #0
     3ce:	70da      	strb	r2, [r3, #3]
}
     3d0:	46c0      	nop			; (mov r8, r8)
     3d2:	46bd      	mov	sp, r7
     3d4:	b002      	add	sp, #8
     3d6:	bd80      	pop	{r7, pc}

000003d8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     3d8:	b580      	push	{r7, lr}
     3da:	b084      	sub	sp, #16
     3dc:	af00      	add	r7, sp, #0
     3de:	0002      	movs	r2, r0
     3e0:	6039      	str	r1, [r7, #0]
     3e2:	1dfb      	adds	r3, r7, #7
     3e4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     3e6:	230c      	movs	r3, #12
     3e8:	18fb      	adds	r3, r7, r3
     3ea:	0018      	movs	r0, r3
     3ec:	4b10      	ldr	r3, [pc, #64]	; (430 <port_pin_set_config+0x58>)
     3ee:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     3f0:	230c      	movs	r3, #12
     3f2:	18fb      	adds	r3, r7, r3
     3f4:	2280      	movs	r2, #128	; 0x80
     3f6:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     3f8:	683b      	ldr	r3, [r7, #0]
     3fa:	781a      	ldrb	r2, [r3, #0]
     3fc:	230c      	movs	r3, #12
     3fe:	18fb      	adds	r3, r7, r3
     400:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     402:	683b      	ldr	r3, [r7, #0]
     404:	785a      	ldrb	r2, [r3, #1]
     406:	230c      	movs	r3, #12
     408:	18fb      	adds	r3, r7, r3
     40a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     40c:	683b      	ldr	r3, [r7, #0]
     40e:	789a      	ldrb	r2, [r3, #2]
     410:	230c      	movs	r3, #12
     412:	18fb      	adds	r3, r7, r3
     414:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     416:	230c      	movs	r3, #12
     418:	18fa      	adds	r2, r7, r3
     41a:	1dfb      	adds	r3, r7, #7
     41c:	781b      	ldrb	r3, [r3, #0]
     41e:	0011      	movs	r1, r2
     420:	0018      	movs	r0, r3
     422:	4b04      	ldr	r3, [pc, #16]	; (434 <port_pin_set_config+0x5c>)
     424:	4798      	blx	r3
}
     426:	46c0      	nop			; (mov r8, r8)
     428:	46bd      	mov	sp, r7
     42a:	b004      	add	sp, #16
     42c:	bd80      	pop	{r7, pc}
     42e:	46c0      	nop			; (mov r8, r8)
     430:	000003b1 	.word	0x000003b1
     434:	00002f8d 	.word	0x00002f8d

00000438 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     438:	b580      	push	{r7, lr}
     43a:	b082      	sub	sp, #8
     43c:	af00      	add	r7, sp, #0
     43e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     440:	687b      	ldr	r3, [r7, #4]
     442:	2200      	movs	r2, #0
     444:	701a      	strb	r2, [r3, #0]
}
     446:	46c0      	nop			; (mov r8, r8)
     448:	46bd      	mov	sp, r7
     44a:	b002      	add	sp, #8
     44c:	bd80      	pop	{r7, pc}
	...

00000450 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     450:	b580      	push	{r7, lr}
     452:	b082      	sub	sp, #8
     454:	af00      	add	r7, sp, #0
     456:	0002      	movs	r2, r0
     458:	6039      	str	r1, [r7, #0]
     45a:	1dfb      	adds	r3, r7, #7
     45c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     45e:	1dfb      	adds	r3, r7, #7
     460:	781b      	ldrb	r3, [r3, #0]
     462:	2b01      	cmp	r3, #1
     464:	d00a      	beq.n	47c <system_apb_clock_set_mask+0x2c>
     466:	2b02      	cmp	r3, #2
     468:	d00f      	beq.n	48a <system_apb_clock_set_mask+0x3a>
     46a:	2b00      	cmp	r3, #0
     46c:	d114      	bne.n	498 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     46e:	4b0e      	ldr	r3, [pc, #56]	; (4a8 <system_apb_clock_set_mask+0x58>)
     470:	4a0d      	ldr	r2, [pc, #52]	; (4a8 <system_apb_clock_set_mask+0x58>)
     472:	6991      	ldr	r1, [r2, #24]
     474:	683a      	ldr	r2, [r7, #0]
     476:	430a      	orrs	r2, r1
     478:	619a      	str	r2, [r3, #24]
			break;
     47a:	e00f      	b.n	49c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     47c:	4b0a      	ldr	r3, [pc, #40]	; (4a8 <system_apb_clock_set_mask+0x58>)
     47e:	4a0a      	ldr	r2, [pc, #40]	; (4a8 <system_apb_clock_set_mask+0x58>)
     480:	69d1      	ldr	r1, [r2, #28]
     482:	683a      	ldr	r2, [r7, #0]
     484:	430a      	orrs	r2, r1
     486:	61da      	str	r2, [r3, #28]
			break;
     488:	e008      	b.n	49c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     48a:	4b07      	ldr	r3, [pc, #28]	; (4a8 <system_apb_clock_set_mask+0x58>)
     48c:	4a06      	ldr	r2, [pc, #24]	; (4a8 <system_apb_clock_set_mask+0x58>)
     48e:	6a11      	ldr	r1, [r2, #32]
     490:	683a      	ldr	r2, [r7, #0]
     492:	430a      	orrs	r2, r1
     494:	621a      	str	r2, [r3, #32]
			break;
     496:	e001      	b.n	49c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     498:	2317      	movs	r3, #23
     49a:	e000      	b.n	49e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     49c:	2300      	movs	r3, #0
}
     49e:	0018      	movs	r0, r3
     4a0:	46bd      	mov	sp, r7
     4a2:	b002      	add	sp, #8
     4a4:	bd80      	pop	{r7, pc}
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	40000400 	.word	0x40000400

000004ac <system_pinmux_get_config_defaults>:
{
     4ac:	b580      	push	{r7, lr}
     4ae:	b082      	sub	sp, #8
     4b0:	af00      	add	r7, sp, #0
     4b2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4b4:	687b      	ldr	r3, [r7, #4]
     4b6:	2280      	movs	r2, #128	; 0x80
     4b8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     4ba:	687b      	ldr	r3, [r7, #4]
     4bc:	2200      	movs	r2, #0
     4be:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     4c0:	687b      	ldr	r3, [r7, #4]
     4c2:	2201      	movs	r2, #1
     4c4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     4c6:	687b      	ldr	r3, [r7, #4]
     4c8:	2200      	movs	r2, #0
     4ca:	70da      	strb	r2, [r3, #3]
}
     4cc:	46c0      	nop			; (mov r8, r8)
     4ce:	46bd      	mov	sp, r7
     4d0:	b002      	add	sp, #8
     4d2:	bd80      	pop	{r7, pc}

000004d4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     4d4:	b580      	push	{r7, lr}
     4d6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     4d8:	4b05      	ldr	r3, [pc, #20]	; (4f0 <system_is_debugger_present+0x1c>)
     4da:	789b      	ldrb	r3, [r3, #2]
     4dc:	b2db      	uxtb	r3, r3
     4de:	001a      	movs	r2, r3
     4e0:	2302      	movs	r3, #2
     4e2:	4013      	ands	r3, r2
     4e4:	1e5a      	subs	r2, r3, #1
     4e6:	4193      	sbcs	r3, r2
     4e8:	b2db      	uxtb	r3, r3
}
     4ea:	0018      	movs	r0, r3
     4ec:	46bd      	mov	sp, r7
     4ee:	bd80      	pop	{r7, pc}
     4f0:	41002000 	.word	0x41002000

000004f4 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
     4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4f6:	b097      	sub	sp, #92	; 0x5c
     4f8:	af00      	add	r7, sp, #0
     4fa:	6178      	str	r0, [r7, #20]
     4fc:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
     4fe:	2300      	movs	r3, #0
     500:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
     502:	2300      	movs	r3, #0
     504:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
     506:	2300      	movs	r3, #0
     508:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
     50a:	233b      	movs	r3, #59	; 0x3b
     50c:	2210      	movs	r2, #16
     50e:	4694      	mov	ip, r2
     510:	44bc      	add	ip, r7
     512:	4463      	add	r3, ip
     514:	2200      	movs	r2, #0
     516:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     518:	697b      	ldr	r3, [r7, #20]
     51a:	681b      	ldr	r3, [r3, #0]
     51c:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
     51e:	697b      	ldr	r3, [r7, #20]
     520:	681b      	ldr	r3, [r3, #0]
     522:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     524:	2323      	movs	r3, #35	; 0x23
     526:	2210      	movs	r2, #16
     528:	18ba      	adds	r2, r7, r2
     52a:	18d4      	adds	r4, r2, r3
     52c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     52e:	0018      	movs	r0, r3
     530:	4bc0      	ldr	r3, [pc, #768]	; (834 <_i2c_master_set_config+0x340>)
     532:	4798      	blx	r3
     534:	0003      	movs	r3, r0
     536:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     538:	230c      	movs	r3, #12
     53a:	2210      	movs	r2, #16
     53c:	4694      	mov	ip, r2
     53e:	44bc      	add	ip, r7
     540:	4463      	add	r3, ip
     542:	0018      	movs	r0, r3
     544:	4bbc      	ldr	r3, [pc, #752]	; (838 <_i2c_master_set_config+0x344>)
     546:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
     548:	693b      	ldr	r3, [r7, #16]
     54a:	69db      	ldr	r3, [r3, #28]
     54c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
     54e:	693b      	ldr	r3, [r7, #16]
     550:	6a1b      	ldr	r3, [r3, #32]
     552:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     556:	2b00      	cmp	r3, #0
     558:	d106      	bne.n	568 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     55c:	2100      	movs	r1, #0
     55e:	0018      	movs	r0, r3
     560:	4bb6      	ldr	r3, [pc, #728]	; (83c <_i2c_master_set_config+0x348>)
     562:	4798      	blx	r3
     564:	0003      	movs	r3, r0
     566:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     56a:	b2da      	uxtb	r2, r3
     56c:	230c      	movs	r3, #12
     56e:	2110      	movs	r1, #16
     570:	468c      	mov	ip, r1
     572:	44bc      	add	ip, r7
     574:	4463      	add	r3, ip
     576:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     578:	230c      	movs	r3, #12
     57a:	2210      	movs	r2, #16
     57c:	4694      	mov	ip, r2
     57e:	44bc      	add	ip, r7
     580:	4463      	add	r3, ip
     582:	2202      	movs	r2, #2
     584:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     588:	0c1b      	lsrs	r3, r3, #16
     58a:	b2db      	uxtb	r3, r3
     58c:	220c      	movs	r2, #12
     58e:	2110      	movs	r1, #16
     590:	468c      	mov	ip, r1
     592:	44bc      	add	ip, r7
     594:	4462      	add	r2, ip
     596:	0011      	movs	r1, r2
     598:	0018      	movs	r0, r3
     59a:	4ba9      	ldr	r3, [pc, #676]	; (840 <_i2c_master_set_config+0x34c>)
     59c:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     59e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     5a0:	2b00      	cmp	r3, #0
     5a2:	d106      	bne.n	5b2 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     5a6:	2101      	movs	r1, #1
     5a8:	0018      	movs	r0, r3
     5aa:	4ba4      	ldr	r3, [pc, #656]	; (83c <_i2c_master_set_config+0x348>)
     5ac:	4798      	blx	r3
     5ae:	0003      	movs	r3, r0
     5b0:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     5b4:	b2da      	uxtb	r2, r3
     5b6:	230c      	movs	r3, #12
     5b8:	2110      	movs	r1, #16
     5ba:	468c      	mov	ip, r1
     5bc:	44bc      	add	ip, r7
     5be:	4463      	add	r3, ip
     5c0:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     5c2:	230c      	movs	r3, #12
     5c4:	2210      	movs	r2, #16
     5c6:	4694      	mov	ip, r2
     5c8:	44bc      	add	ip, r7
     5ca:	4463      	add	r3, ip
     5cc:	2202      	movs	r2, #2
     5ce:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     5d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     5d2:	0c1b      	lsrs	r3, r3, #16
     5d4:	b2db      	uxtb	r3, r3
     5d6:	220c      	movs	r2, #12
     5d8:	2110      	movs	r1, #16
     5da:	468c      	mov	ip, r1
     5dc:	44bc      	add	ip, r7
     5de:	4462      	add	r2, ip
     5e0:	0011      	movs	r1, r2
     5e2:	0018      	movs	r0, r3
     5e4:	4b96      	ldr	r3, [pc, #600]	; (840 <_i2c_master_set_config+0x34c>)
     5e6:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     5e8:	693b      	ldr	r3, [r7, #16]
     5ea:	8a9a      	ldrh	r2, [r3, #20]
     5ec:	697b      	ldr	r3, [r7, #20]
     5ee:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     5f0:	693b      	ldr	r3, [r7, #16]
     5f2:	8ada      	ldrh	r2, [r3, #22]
     5f4:	697b      	ldr	r3, [r7, #20]
     5f6:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     5f8:	693b      	ldr	r3, [r7, #16]
     5fa:	7e1b      	ldrb	r3, [r3, #24]
     5fc:	2b00      	cmp	r3, #0
     5fe:	d103      	bne.n	608 <_i2c_master_set_config+0x114>
     600:	4b90      	ldr	r3, [pc, #576]	; (844 <_i2c_master_set_config+0x350>)
     602:	4798      	blx	r3
     604:	1e03      	subs	r3, r0, #0
     606:	d002      	beq.n	60e <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     608:	2380      	movs	r3, #128	; 0x80
     60a:	657b      	str	r3, [r7, #84]	; 0x54
     60c:	e001      	b.n	612 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
     60e:	2300      	movs	r3, #0
     610:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     612:	693b      	ldr	r3, [r7, #16]
     614:	691b      	ldr	r3, [r3, #16]
     616:	2b00      	cmp	r3, #0
     618:	d004      	beq.n	624 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
     61a:	693b      	ldr	r3, [r7, #16]
     61c:	691b      	ldr	r3, [r3, #16]
     61e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     620:	4313      	orrs	r3, r2
     622:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     624:	693b      	ldr	r3, [r7, #16]
     626:	689b      	ldr	r3, [r3, #8]
     628:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     62a:	4313      	orrs	r3, r2
     62c:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     62e:	693b      	ldr	r3, [r7, #16]
     630:	2224      	movs	r2, #36	; 0x24
     632:	5c9b      	ldrb	r3, [r3, r2]
     634:	2b00      	cmp	r3, #0
     636:	d004      	beq.n	642 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     63a:	2280      	movs	r2, #128	; 0x80
     63c:	05d2      	lsls	r2, r2, #23
     63e:	4313      	orrs	r3, r2
     640:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     642:	693b      	ldr	r3, [r7, #16]
     644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     646:	2b00      	cmp	r3, #0
     648:	d004      	beq.n	654 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
     64a:	693b      	ldr	r3, [r7, #16]
     64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     64e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     650:	4313      	orrs	r3, r2
     652:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     654:	693b      	ldr	r3, [r7, #16]
     656:	222c      	movs	r2, #44	; 0x2c
     658:	5c9b      	ldrb	r3, [r3, r2]
     65a:	2b00      	cmp	r3, #0
     65c:	d105      	bne.n	66a <_i2c_master_set_config+0x176>
     65e:	693b      	ldr	r3, [r7, #16]
     660:	689a      	ldr	r2, [r3, #8]
     662:	2380      	movs	r3, #128	; 0x80
     664:	049b      	lsls	r3, r3, #18
     666:	429a      	cmp	r2, r3
     668:	d104      	bne.n	674 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     66a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     66c:	2280      	movs	r2, #128	; 0x80
     66e:	0512      	lsls	r2, r2, #20
     670:	4313      	orrs	r3, r2
     672:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     674:	693b      	ldr	r3, [r7, #16]
     676:	222d      	movs	r2, #45	; 0x2d
     678:	5c9b      	ldrb	r3, [r3, r2]
     67a:	2b00      	cmp	r3, #0
     67c:	d004      	beq.n	688 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     67e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     680:	2280      	movs	r2, #128	; 0x80
     682:	0412      	lsls	r2, r2, #16
     684:	4313      	orrs	r3, r2
     686:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     688:	693b      	ldr	r3, [r7, #16]
     68a:	222e      	movs	r2, #46	; 0x2e
     68c:	5c9b      	ldrb	r3, [r3, r2]
     68e:	2b00      	cmp	r3, #0
     690:	d004      	beq.n	69c <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     694:	2280      	movs	r2, #128	; 0x80
     696:	03d2      	lsls	r2, r2, #15
     698:	4313      	orrs	r3, r2
     69a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     69e:	681a      	ldr	r2, [r3, #0]
     6a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     6a2:	431a      	orrs	r2, r3
     6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     6a6:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     6aa:	2280      	movs	r2, #128	; 0x80
     6ac:	0052      	lsls	r2, r2, #1
     6ae:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     6b0:	2323      	movs	r3, #35	; 0x23
     6b2:	2210      	movs	r2, #16
     6b4:	4694      	mov	ip, r2
     6b6:	44bc      	add	ip, r7
     6b8:	4463      	add	r3, ip
     6ba:	781b      	ldrb	r3, [r3, #0]
     6bc:	3314      	adds	r3, #20
     6be:	b2db      	uxtb	r3, r3
     6c0:	0018      	movs	r0, r3
     6c2:	4b61      	ldr	r3, [pc, #388]	; (848 <_i2c_master_set_config+0x354>)
     6c4:	4798      	blx	r3
     6c6:	0003      	movs	r3, r0
     6c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
     6ca:	693b      	ldr	r3, [r7, #16]
     6cc:	681b      	ldr	r3, [r3, #0]
     6ce:	22fa      	movs	r2, #250	; 0xfa
     6d0:	0092      	lsls	r2, r2, #2
     6d2:	4353      	muls	r3, r2
     6d4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     6d6:	693b      	ldr	r3, [r7, #16]
     6d8:	685b      	ldr	r3, [r3, #4]
     6da:	22fa      	movs	r2, #250	; 0xfa
     6dc:	0092      	lsls	r2, r2, #2
     6de:	4353      	muls	r3, r2
     6e0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
     6e2:	693b      	ldr	r3, [r7, #16]
     6e4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
     6e6:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
     6e8:	4b58      	ldr	r3, [pc, #352]	; (84c <_i2c_master_set_config+0x358>)
     6ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     6ec:	4798      	blx	r3
     6ee:	0005      	movs	r5, r0
     6f0:	000e      	movs	r6, r1
     6f2:	4b56      	ldr	r3, [pc, #344]	; (84c <_i2c_master_set_config+0x358>)
     6f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
     6f6:	4798      	blx	r3
     6f8:	60b8      	str	r0, [r7, #8]
     6fa:	60f9      	str	r1, [r7, #12]
     6fc:	4b53      	ldr	r3, [pc, #332]	; (84c <_i2c_master_set_config+0x358>)
     6fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     700:	4798      	blx	r3
     702:	4c53      	ldr	r4, [pc, #332]	; (850 <_i2c_master_set_config+0x35c>)
     704:	4a53      	ldr	r2, [pc, #332]	; (854 <_i2c_master_set_config+0x360>)
     706:	4b54      	ldr	r3, [pc, #336]	; (858 <_i2c_master_set_config+0x364>)
     708:	47a0      	blx	r4
     70a:	0003      	movs	r3, r0
     70c:	000c      	movs	r4, r1
     70e:	603b      	str	r3, [r7, #0]
     710:	607c      	str	r4, [r7, #4]
     712:	4b4e      	ldr	r3, [pc, #312]	; (84c <_i2c_master_set_config+0x358>)
     714:	6a38      	ldr	r0, [r7, #32]
     716:	4798      	blx	r3
     718:	0002      	movs	r2, r0
     71a:	000b      	movs	r3, r1
     71c:	4c4c      	ldr	r4, [pc, #304]	; (850 <_i2c_master_set_config+0x35c>)
     71e:	6838      	ldr	r0, [r7, #0]
     720:	6879      	ldr	r1, [r7, #4]
     722:	47a0      	blx	r4
     724:	0003      	movs	r3, r0
     726:	000c      	movs	r4, r1
     728:	0018      	movs	r0, r3
     72a:	0021      	movs	r1, r4
     72c:	4c4b      	ldr	r4, [pc, #300]	; (85c <_i2c_master_set_config+0x368>)
     72e:	2200      	movs	r2, #0
     730:	4b4b      	ldr	r3, [pc, #300]	; (860 <_i2c_master_set_config+0x36c>)
     732:	47a0      	blx	r4
     734:	0003      	movs	r3, r0
     736:	000c      	movs	r4, r1
     738:	001a      	movs	r2, r3
     73a:	0023      	movs	r3, r4
     73c:	4c44      	ldr	r4, [pc, #272]	; (850 <_i2c_master_set_config+0x35c>)
     73e:	68b8      	ldr	r0, [r7, #8]
     740:	68f9      	ldr	r1, [r7, #12]
     742:	47a0      	blx	r4
     744:	0003      	movs	r3, r0
     746:	000c      	movs	r4, r1
     748:	001a      	movs	r2, r3
     74a:	0023      	movs	r3, r4
     74c:	4c45      	ldr	r4, [pc, #276]	; (864 <_i2c_master_set_config+0x370>)
     74e:	0028      	movs	r0, r5
     750:	0031      	movs	r1, r6
     752:	47a0      	blx	r4
     754:	0003      	movs	r3, r0
     756:	000c      	movs	r4, r1
     758:	001d      	movs	r5, r3
     75a:	0026      	movs	r6, r4
     75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
     75e:	005a      	lsls	r2, r3, #1
     760:	4b3a      	ldr	r3, [pc, #232]	; (84c <_i2c_master_set_config+0x358>)
     762:	0010      	movs	r0, r2
     764:	4798      	blx	r3
     766:	0002      	movs	r2, r0
     768:	000b      	movs	r3, r1
     76a:	4c3c      	ldr	r4, [pc, #240]	; (85c <_i2c_master_set_config+0x368>)
     76c:	0028      	movs	r0, r5
     76e:	0031      	movs	r1, r6
     770:	47a0      	blx	r4
     772:	0003      	movs	r3, r0
     774:	000c      	movs	r4, r1
     776:	0018      	movs	r0, r3
     778:	0021      	movs	r1, r4
     77a:	4c3a      	ldr	r4, [pc, #232]	; (864 <_i2c_master_set_config+0x370>)
     77c:	2200      	movs	r2, #0
     77e:	4b3a      	ldr	r3, [pc, #232]	; (868 <_i2c_master_set_config+0x374>)
     780:	47a0      	blx	r4
     782:	0003      	movs	r3, r0
     784:	000c      	movs	r4, r1
     786:	001d      	movs	r5, r3
     788:	0026      	movs	r6, r4
     78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
     78c:	005a      	lsls	r2, r3, #1
     78e:	4b2f      	ldr	r3, [pc, #188]	; (84c <_i2c_master_set_config+0x358>)
     790:	0010      	movs	r0, r2
     792:	4798      	blx	r3
     794:	0002      	movs	r2, r0
     796:	000b      	movs	r3, r1
     798:	4c34      	ldr	r4, [pc, #208]	; (86c <_i2c_master_set_config+0x378>)
     79a:	0028      	movs	r0, r5
     79c:	0031      	movs	r1, r6
     79e:	47a0      	blx	r4
     7a0:	0003      	movs	r3, r0
     7a2:	000c      	movs	r4, r1
     7a4:	0019      	movs	r1, r3
     7a6:	0022      	movs	r2, r4
     7a8:	4b31      	ldr	r3, [pc, #196]	; (870 <_i2c_master_set_config+0x37c>)
     7aa:	0008      	movs	r0, r1
     7ac:	0011      	movs	r1, r2
     7ae:	4798      	blx	r3
     7b0:	0003      	movs	r3, r0
     7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     7b4:	693b      	ldr	r3, [r7, #16]
     7b6:	689a      	ldr	r2, [r3, #8]
     7b8:	2380      	movs	r3, #128	; 0x80
     7ba:	049b      	lsls	r3, r3, #18
     7bc:	429a      	cmp	r2, r3
     7be:	d16a      	bne.n	896 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     7c0:	4b22      	ldr	r3, [pc, #136]	; (84c <_i2c_master_set_config+0x358>)
     7c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     7c4:	4798      	blx	r3
     7c6:	4c25      	ldr	r4, [pc, #148]	; (85c <_i2c_master_set_config+0x368>)
     7c8:	0002      	movs	r2, r0
     7ca:	000b      	movs	r3, r1
     7cc:	47a0      	blx	r4
     7ce:	0003      	movs	r3, r0
     7d0:	000c      	movs	r4, r1
     7d2:	001d      	movs	r5, r3
     7d4:	0026      	movs	r6, r4
     7d6:	4b1d      	ldr	r3, [pc, #116]	; (84c <_i2c_master_set_config+0x358>)
     7d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
     7da:	4798      	blx	r3
     7dc:	4c1c      	ldr	r4, [pc, #112]	; (850 <_i2c_master_set_config+0x35c>)
     7de:	2200      	movs	r2, #0
     7e0:	4b24      	ldr	r3, [pc, #144]	; (874 <_i2c_master_set_config+0x380>)
     7e2:	47a0      	blx	r4
     7e4:	0003      	movs	r3, r0
     7e6:	000c      	movs	r4, r1
     7e8:	001a      	movs	r2, r3
     7ea:	0023      	movs	r3, r4
     7ec:	4c1f      	ldr	r4, [pc, #124]	; (86c <_i2c_master_set_config+0x378>)
     7ee:	0028      	movs	r0, r5
     7f0:	0031      	movs	r1, r6
     7f2:	47a0      	blx	r4
     7f4:	0003      	movs	r3, r0
     7f6:	000c      	movs	r4, r1
     7f8:	0018      	movs	r0, r3
     7fa:	0021      	movs	r1, r4
     7fc:	4c19      	ldr	r4, [pc, #100]	; (864 <_i2c_master_set_config+0x370>)
     7fe:	2200      	movs	r2, #0
     800:	4b19      	ldr	r3, [pc, #100]	; (868 <_i2c_master_set_config+0x374>)
     802:	47a0      	blx	r4
     804:	0003      	movs	r3, r0
     806:	000c      	movs	r4, r1
     808:	0019      	movs	r1, r3
     80a:	0022      	movs	r2, r4
     80c:	4b18      	ldr	r3, [pc, #96]	; (870 <_i2c_master_set_config+0x37c>)
     80e:	0008      	movs	r0, r1
     810:	0011      	movs	r1, r2
     812:	4798      	blx	r3
     814:	0003      	movs	r3, r0
     816:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
     818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     81a:	2b00      	cmp	r3, #0
     81c:	d02e      	beq.n	87c <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     81e:	4b16      	ldr	r3, [pc, #88]	; (878 <_i2c_master_set_config+0x384>)
     820:	6a79      	ldr	r1, [r7, #36]	; 0x24
     822:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     824:	4798      	blx	r3
     826:	0003      	movs	r3, r0
     828:	1e9a      	subs	r2, r3, #2
     82a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     82c:	1ad3      	subs	r3, r2, r3
     82e:	653b      	str	r3, [r7, #80]	; 0x50
     830:	e031      	b.n	896 <_i2c_master_set_config+0x3a2>
     832:	46c0      	nop			; (mov r8, r8)
     834:	00001825 	.word	0x00001825
     838:	000004ad 	.word	0x000004ad
     83c:	00001669 	.word	0x00001669
     840:	00002f8d 	.word	0x00002f8d
     844:	000004d5 	.word	0x000004d5
     848:	00002dc5 	.word	0x00002dc5
     84c:	0000521d 	.word	0x0000521d
     850:	00004689 	.word	0x00004689
     854:	e826d695 	.word	0xe826d695
     858:	3e112e0b 	.word	0x3e112e0b
     85c:	00003a01 	.word	0x00003a01
     860:	40240000 	.word	0x40240000
     864:	00004b89 	.word	0x00004b89
     868:	3ff00000 	.word	0x3ff00000
     86c:	00004021 	.word	0x00004021
     870:	000051b5 	.word	0x000051b5
     874:	40080000 	.word	0x40080000
     878:	00003895 	.word	0x00003895
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     87e:	005a      	lsls	r2, r3, #1
     880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     882:	18d3      	adds	r3, r2, r3
     884:	1e5a      	subs	r2, r3, #1
     886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     888:	0059      	lsls	r1, r3, #1
     88a:	4b1d      	ldr	r3, [pc, #116]	; (900 <_i2c_master_set_config+0x40c>)
     88c:	0010      	movs	r0, r2
     88e:	4798      	blx	r3
     890:	0003      	movs	r3, r0
     892:	3b01      	subs	r3, #1
     894:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     898:	2bff      	cmp	r3, #255	; 0xff
     89a:	dc08      	bgt.n	8ae <_i2c_master_set_config+0x3ba>
     89c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     89e:	2b00      	cmp	r3, #0
     8a0:	db05      	blt.n	8ae <_i2c_master_set_config+0x3ba>
     8a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     8a4:	2bff      	cmp	r3, #255	; 0xff
     8a6:	dc02      	bgt.n	8ae <_i2c_master_set_config+0x3ba>
     8a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     8aa:	2b00      	cmp	r3, #0
     8ac:	da06      	bge.n	8bc <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8ae:	233b      	movs	r3, #59	; 0x3b
     8b0:	2210      	movs	r2, #16
     8b2:	4694      	mov	ip, r2
     8b4:	44bc      	add	ip, r7
     8b6:	4463      	add	r3, ip
     8b8:	2240      	movs	r2, #64	; 0x40
     8ba:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
     8bc:	233b      	movs	r3, #59	; 0x3b
     8be:	2210      	movs	r2, #16
     8c0:	4694      	mov	ip, r2
     8c2:	44bc      	add	ip, r7
     8c4:	4463      	add	r3, ip
     8c6:	781b      	ldrb	r3, [r3, #0]
     8c8:	2b40      	cmp	r3, #64	; 0x40
     8ca:	d00e      	beq.n	8ea <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     8cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     8ce:	22ff      	movs	r2, #255	; 0xff
     8d0:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     8d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     8d4:	041b      	lsls	r3, r3, #16
     8d6:	0019      	movs	r1, r3
     8d8:	23ff      	movs	r3, #255	; 0xff
     8da:	041b      	lsls	r3, r3, #16
     8dc:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     8de:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     8e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     8e2:	0612      	lsls	r2, r2, #24
     8e4:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     8e8:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
     8ea:	233b      	movs	r3, #59	; 0x3b
     8ec:	2210      	movs	r2, #16
     8ee:	4694      	mov	ip, r2
     8f0:	44bc      	add	ip, r7
     8f2:	4463      	add	r3, ip
     8f4:	781b      	ldrb	r3, [r3, #0]
}
     8f6:	0018      	movs	r0, r3
     8f8:	46bd      	mov	sp, r7
     8fa:	b017      	add	sp, #92	; 0x5c
     8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8fe:	46c0      	nop			; (mov r8, r8)
     900:	00003895 	.word	0x00003895

00000904 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     904:	b590      	push	{r4, r7, lr}
     906:	b08b      	sub	sp, #44	; 0x2c
     908:	af00      	add	r7, sp, #0
     90a:	60f8      	str	r0, [r7, #12]
     90c:	60b9      	str	r1, [r7, #8]
     90e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     910:	68fb      	ldr	r3, [r7, #12]
     912:	68ba      	ldr	r2, [r7, #8]
     914:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     916:	68fb      	ldr	r3, [r7, #12]
     918:	681b      	ldr	r3, [r3, #0]
     91a:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     91c:	68fb      	ldr	r3, [r7, #12]
     91e:	681b      	ldr	r3, [r3, #0]
     920:	0018      	movs	r0, r3
     922:	4b3b      	ldr	r3, [pc, #236]	; (a10 <i2c_master_init+0x10c>)
     924:	4798      	blx	r3
     926:	0003      	movs	r3, r0
     928:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     92a:	6a3b      	ldr	r3, [r7, #32]
     92c:	3302      	adds	r3, #2
     92e:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     930:	6a3b      	ldr	r3, [r7, #32]
     932:	3314      	adds	r3, #20
     934:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     936:	2201      	movs	r2, #1
     938:	69fb      	ldr	r3, [r7, #28]
     93a:	409a      	lsls	r2, r3
     93c:	0013      	movs	r3, r2
     93e:	0019      	movs	r1, r3
     940:	2002      	movs	r0, #2
     942:	4b34      	ldr	r3, [pc, #208]	; (a14 <i2c_master_init+0x110>)
     944:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     946:	2314      	movs	r3, #20
     948:	18fb      	adds	r3, r7, r3
     94a:	0018      	movs	r0, r3
     94c:	4b32      	ldr	r3, [pc, #200]	; (a18 <i2c_master_init+0x114>)
     94e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
     950:	687b      	ldr	r3, [r7, #4]
     952:	7b1a      	ldrb	r2, [r3, #12]
     954:	2314      	movs	r3, #20
     956:	18fb      	adds	r3, r7, r3
     958:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     95a:	69bb      	ldr	r3, [r7, #24]
     95c:	b2db      	uxtb	r3, r3
     95e:	2214      	movs	r2, #20
     960:	18ba      	adds	r2, r7, r2
     962:	0011      	movs	r1, r2
     964:	0018      	movs	r0, r3
     966:	4b2d      	ldr	r3, [pc, #180]	; (a1c <i2c_master_init+0x118>)
     968:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     96a:	69bb      	ldr	r3, [r7, #24]
     96c:	b2db      	uxtb	r3, r3
     96e:	0018      	movs	r0, r3
     970:	4b2b      	ldr	r3, [pc, #172]	; (a20 <i2c_master_init+0x11c>)
     972:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     974:	687b      	ldr	r3, [r7, #4]
     976:	7b1b      	ldrb	r3, [r3, #12]
     978:	2100      	movs	r1, #0
     97a:	0018      	movs	r0, r3
     97c:	4b29      	ldr	r3, [pc, #164]	; (a24 <i2c_master_init+0x120>)
     97e:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     982:	681b      	ldr	r3, [r3, #0]
     984:	2202      	movs	r2, #2
     986:	4013      	ands	r3, r2
     988:	d001      	beq.n	98e <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
     98a:	231c      	movs	r3, #28
     98c:	e03b      	b.n	a06 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     990:	681b      	ldr	r3, [r3, #0]
     992:	2201      	movs	r2, #1
     994:	4013      	ands	r3, r2
     996:	d001      	beq.n	99c <i2c_master_init+0x98>
		return STATUS_BUSY;
     998:	2305      	movs	r3, #5
     99a:	e034      	b.n	a06 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     99c:	68fb      	ldr	r3, [r7, #12]
     99e:	681b      	ldr	r3, [r3, #0]
     9a0:	2217      	movs	r2, #23
     9a2:	18bc      	adds	r4, r7, r2
     9a4:	0018      	movs	r0, r3
     9a6:	4b1a      	ldr	r3, [pc, #104]	; (a10 <i2c_master_init+0x10c>)
     9a8:	4798      	blx	r3
     9aa:	0003      	movs	r3, r0
     9ac:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     9ae:	4a1e      	ldr	r2, [pc, #120]	; (a28 <i2c_master_init+0x124>)
     9b0:	2317      	movs	r3, #23
     9b2:	18fb      	adds	r3, r7, r3
     9b4:	781b      	ldrb	r3, [r3, #0]
     9b6:	0011      	movs	r1, r2
     9b8:	0018      	movs	r0, r3
     9ba:	4b1c      	ldr	r3, [pc, #112]	; (a2c <i2c_master_init+0x128>)
     9bc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     9be:	2317      	movs	r3, #23
     9c0:	18fb      	adds	r3, r7, r3
     9c2:	781a      	ldrb	r2, [r3, #0]
     9c4:	4b1a      	ldr	r3, [pc, #104]	; (a30 <i2c_master_init+0x12c>)
     9c6:	0092      	lsls	r2, r2, #2
     9c8:	68f9      	ldr	r1, [r7, #12]
     9ca:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
     9cc:	68fb      	ldr	r3, [r7, #12]
     9ce:	2200      	movs	r2, #0
     9d0:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
     9d2:	68fb      	ldr	r3, [r7, #12]
     9d4:	2200      	movs	r2, #0
     9d6:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
     9d8:	68fb      	ldr	r3, [r7, #12]
     9da:	2200      	movs	r2, #0
     9dc:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
     9de:	68fb      	ldr	r3, [r7, #12]
     9e0:	2200      	movs	r2, #0
     9e2:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
     9e4:	68fb      	ldr	r3, [r7, #12]
     9e6:	2225      	movs	r2, #37	; 0x25
     9e8:	2100      	movs	r1, #0
     9ea:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
     9ec:	68fb      	ldr	r3, [r7, #12]
     9ee:	2200      	movs	r2, #0
     9f0:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9f4:	2214      	movs	r2, #20
     9f6:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
     9f8:	687a      	ldr	r2, [r7, #4]
     9fa:	68fb      	ldr	r3, [r7, #12]
     9fc:	0011      	movs	r1, r2
     9fe:	0018      	movs	r0, r3
     a00:	4b0c      	ldr	r3, [pc, #48]	; (a34 <i2c_master_init+0x130>)
     a02:	4798      	blx	r3
     a04:	0003      	movs	r3, r0
}
     a06:	0018      	movs	r0, r3
     a08:	46bd      	mov	sp, r7
     a0a:	b00b      	add	sp, #44	; 0x2c
     a0c:	bd90      	pop	{r4, r7, pc}
     a0e:	46c0      	nop			; (mov r8, r8)
     a10:	00001825 	.word	0x00001825
     a14:	00000451 	.word	0x00000451
     a18:	00000439 	.word	0x00000439
     a1c:	00002ca1 	.word	0x00002ca1
     a20:	00002ce5 	.word	0x00002ce5
     a24:	000015dd 	.word	0x000015dd
     a28:	00001035 	.word	0x00001035
     a2c:	00001889 	.word	0x00001889
     a30:	2000010c 	.word	0x2000010c
     a34:	000004f5 	.word	0x000004f5

00000a38 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
     a38:	b580      	push	{r7, lr}
     a3a:	b084      	sub	sp, #16
     a3c:	af00      	add	r7, sp, #0
     a3e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     a40:	687b      	ldr	r3, [r7, #4]
     a42:	681b      	ldr	r3, [r3, #0]
     a44:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     a46:	68fb      	ldr	r3, [r7, #12]
     a48:	7e1b      	ldrb	r3, [r3, #24]
     a4a:	b2db      	uxtb	r3, r3
     a4c:	001a      	movs	r2, r3
     a4e:	2302      	movs	r3, #2
     a50:	4013      	ands	r3, r2
     a52:	d00b      	beq.n	a6c <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     a54:	68fb      	ldr	r3, [r7, #12]
     a56:	2202      	movs	r2, #2
     a58:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     a5a:	68fb      	ldr	r3, [r7, #12]
     a5c:	8b5b      	ldrh	r3, [r3, #26]
     a5e:	b29b      	uxth	r3, r3
     a60:	001a      	movs	r2, r3
     a62:	2302      	movs	r3, #2
     a64:	4013      	ands	r3, r2
     a66:	d011      	beq.n	a8c <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     a68:	2341      	movs	r3, #65	; 0x41
     a6a:	e010      	b.n	a8e <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     a6c:	68fb      	ldr	r3, [r7, #12]
     a6e:	8b5b      	ldrh	r3, [r3, #26]
     a70:	b29b      	uxth	r3, r3
     a72:	001a      	movs	r2, r3
     a74:	2304      	movs	r3, #4
     a76:	4013      	ands	r3, r2
     a78:	d008      	beq.n	a8c <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     a7a:	68fb      	ldr	r3, [r7, #12]
     a7c:	685b      	ldr	r3, [r3, #4]
     a7e:	22c0      	movs	r2, #192	; 0xc0
     a80:	0292      	lsls	r2, r2, #10
     a82:	431a      	orrs	r2, r3
     a84:	68fb      	ldr	r3, [r7, #12]
     a86:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
     a88:	2318      	movs	r3, #24
     a8a:	e000      	b.n	a8e <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
     a8c:	2300      	movs	r3, #0
}
     a8e:	0018      	movs	r0, r3
     a90:	46bd      	mov	sp, r7
     a92:	b004      	add	sp, #16
     a94:	bd80      	pop	{r7, pc}

00000a96 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     a96:	b580      	push	{r7, lr}
     a98:	b084      	sub	sp, #16
     a9a:	af00      	add	r7, sp, #0
     a9c:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     a9e:	687b      	ldr	r3, [r7, #4]
     aa0:	681b      	ldr	r3, [r3, #0]
     aa2:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     aa4:	230e      	movs	r3, #14
     aa6:	18fb      	adds	r3, r7, r3
     aa8:	2200      	movs	r2, #0
     aaa:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     aac:	e00f      	b.n	ace <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     aae:	230e      	movs	r3, #14
     ab0:	18fb      	adds	r3, r7, r3
     ab2:	220e      	movs	r2, #14
     ab4:	18ba      	adds	r2, r7, r2
     ab6:	8812      	ldrh	r2, [r2, #0]
     ab8:	3201      	adds	r2, #1
     aba:	801a      	strh	r2, [r3, #0]
     abc:	687b      	ldr	r3, [r7, #4]
     abe:	891b      	ldrh	r3, [r3, #8]
     ac0:	220e      	movs	r2, #14
     ac2:	18ba      	adds	r2, r7, r2
     ac4:	8812      	ldrh	r2, [r2, #0]
     ac6:	429a      	cmp	r2, r3
     ac8:	d301      	bcc.n	ace <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
     aca:	2312      	movs	r3, #18
     acc:	e00e      	b.n	aec <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     ace:	68bb      	ldr	r3, [r7, #8]
     ad0:	7e1b      	ldrb	r3, [r3, #24]
     ad2:	b2db      	uxtb	r3, r3
     ad4:	001a      	movs	r2, r3
     ad6:	2301      	movs	r3, #1
     ad8:	4013      	ands	r3, r2
     ada:	d106      	bne.n	aea <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     adc:	68bb      	ldr	r3, [r7, #8]
     ade:	7e1b      	ldrb	r3, [r3, #24]
     ae0:	b2db      	uxtb	r3, r3
     ae2:	001a      	movs	r2, r3
     ae4:	2302      	movs	r3, #2
     ae6:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     ae8:	d0e1      	beq.n	aae <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
     aea:	2300      	movs	r3, #0
}
     aec:	0018      	movs	r0, r3
     aee:	46bd      	mov	sp, r7
     af0:	b004      	add	sp, #16
     af2:	bd80      	pop	{r7, pc}

00000af4 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     af4:	b590      	push	{r4, r7, lr}
     af6:	b085      	sub	sp, #20
     af8:	af00      	add	r7, sp, #0
     afa:	6078      	str	r0, [r7, #4]
     afc:	000a      	movs	r2, r1
     afe:	1cfb      	adds	r3, r7, #3
     b00:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b02:	687b      	ldr	r3, [r7, #4]
     b04:	681b      	ldr	r3, [r3, #0]
     b06:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     b08:	68fb      	ldr	r3, [r7, #12]
     b0a:	685b      	ldr	r3, [r3, #4]
     b0c:	2280      	movs	r2, #128	; 0x80
     b0e:	02d2      	lsls	r2, r2, #11
     b10:	431a      	orrs	r2, r3
     b12:	68fb      	ldr	r3, [r7, #12]
     b14:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     b16:	1cfb      	adds	r3, r7, #3
     b18:	781a      	ldrb	r2, [r3, #0]
     b1a:	68fb      	ldr	r3, [r7, #12]
     b1c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     b1e:	230b      	movs	r3, #11
     b20:	18fc      	adds	r4, r7, r3
     b22:	687b      	ldr	r3, [r7, #4]
     b24:	0018      	movs	r0, r3
     b26:	4b07      	ldr	r3, [pc, #28]	; (b44 <_i2c_master_send_hs_master_code+0x50>)
     b28:	4798      	blx	r3
     b2a:	0003      	movs	r3, r0
     b2c:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     b2e:	68fb      	ldr	r3, [r7, #12]
     b30:	2201      	movs	r2, #1
     b32:	761a      	strb	r2, [r3, #24]

	return tmp_status;
     b34:	230b      	movs	r3, #11
     b36:	18fb      	adds	r3, r7, r3
     b38:	781b      	ldrb	r3, [r3, #0]
}
     b3a:	0018      	movs	r0, r3
     b3c:	46bd      	mov	sp, r7
     b3e:	b005      	add	sp, #20
     b40:	bd90      	pop	{r4, r7, pc}
     b42:	46c0      	nop			; (mov r8, r8)
     b44:	00000a97 	.word	0x00000a97

00000b48 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     b48:	b580      	push	{r7, lr}
     b4a:	b084      	sub	sp, #16
     b4c:	af00      	add	r7, sp, #0
     b4e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     b50:	687b      	ldr	r3, [r7, #4]
     b52:	681b      	ldr	r3, [r3, #0]
     b54:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     b56:	68fb      	ldr	r3, [r7, #12]
     b58:	69db      	ldr	r3, [r3, #28]
     b5a:	2207      	movs	r2, #7
     b5c:	4013      	ands	r3, r2
     b5e:	1e5a      	subs	r2, r3, #1
     b60:	4193      	sbcs	r3, r2
     b62:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     b64:	0018      	movs	r0, r3
     b66:	46bd      	mov	sp, r7
     b68:	b004      	add	sp, #16
     b6a:	bd80      	pop	{r7, pc}

00000b6c <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     b6c:	b580      	push	{r7, lr}
     b6e:	b082      	sub	sp, #8
     b70:	af00      	add	r7, sp, #0
     b72:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     b74:	46c0      	nop			; (mov r8, r8)
     b76:	687b      	ldr	r3, [r7, #4]
     b78:	0018      	movs	r0, r3
     b7a:	4b04      	ldr	r3, [pc, #16]	; (b8c <_i2c_master_wait_for_sync+0x20>)
     b7c:	4798      	blx	r3
     b7e:	1e03      	subs	r3, r0, #0
     b80:	d1f9      	bne.n	b76 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     b82:	46c0      	nop			; (mov r8, r8)
     b84:	46bd      	mov	sp, r7
     b86:	b002      	add	sp, #8
     b88:	bd80      	pop	{r7, pc}
     b8a:	46c0      	nop			; (mov r8, r8)
     b8c:	00000b49 	.word	0x00000b49

00000b90 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     b90:	b580      	push	{r7, lr}
     b92:	b084      	sub	sp, #16
     b94:	af00      	add	r7, sp, #0
     b96:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b98:	687b      	ldr	r3, [r7, #4]
     b9a:	681b      	ldr	r3, [r3, #0]
     b9c:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     b9e:	68fb      	ldr	r3, [r7, #12]
     ba0:	681b      	ldr	r3, [r3, #0]
     ba2:	011b      	lsls	r3, r3, #4
     ba4:	0fdb      	lsrs	r3, r3, #31
     ba6:	b2db      	uxtb	r3, r3
     ba8:	001a      	movs	r2, r3
     baa:	230b      	movs	r3, #11
     bac:	18fb      	adds	r3, r7, r3
     bae:	1e51      	subs	r1, r2, #1
     bb0:	418a      	sbcs	r2, r1
     bb2:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     bb4:	2308      	movs	r3, #8
     bb6:	18fb      	adds	r3, r7, r3
     bb8:	687a      	ldr	r2, [r7, #4]
     bba:	8b52      	ldrh	r2, [r2, #26]
     bbc:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
     bbe:	687b      	ldr	r3, [r7, #4]
     bc0:	8b9b      	ldrh	r3, [r3, #28]
     bc2:	b29a      	uxth	r2, r3
     bc4:	2308      	movs	r3, #8
     bc6:	18fb      	adds	r3, r7, r3
     bc8:	2108      	movs	r1, #8
     bca:	1879      	adds	r1, r7, r1
     bcc:	8809      	ldrh	r1, [r1, #0]
     bce:	1a8a      	subs	r2, r1, r2
     bd0:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
     bd2:	687b      	ldr	r3, [r7, #4]
     bd4:	8b9b      	ldrh	r3, [r3, #28]
     bd6:	b29b      	uxth	r3, r3
     bd8:	3b01      	subs	r3, #1
     bda:	b29a      	uxth	r2, r3
     bdc:	687b      	ldr	r3, [r7, #4]
     bde:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
     be0:	230b      	movs	r3, #11
     be2:	18fb      	adds	r3, r7, r3
     be4:	781b      	ldrb	r3, [r3, #0]
     be6:	2b00      	cmp	r3, #0
     be8:	d010      	beq.n	c0c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
     bea:	687b      	ldr	r3, [r7, #4]
     bec:	7adb      	ldrb	r3, [r3, #11]
     bee:	2b00      	cmp	r3, #0
     bf0:	d01c      	beq.n	c2c <_i2c_master_read+0x9c>
     bf2:	687b      	ldr	r3, [r7, #4]
     bf4:	8b9b      	ldrh	r3, [r3, #28]
     bf6:	b29b      	uxth	r3, r3
     bf8:	2b01      	cmp	r3, #1
     bfa:	d117      	bne.n	c2c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     bfc:	68fb      	ldr	r3, [r7, #12]
     bfe:	685b      	ldr	r3, [r3, #4]
     c00:	2280      	movs	r2, #128	; 0x80
     c02:	02d2      	lsls	r2, r2, #11
     c04:	431a      	orrs	r2, r3
     c06:	68fb      	ldr	r3, [r7, #12]
     c08:	605a      	str	r2, [r3, #4]
     c0a:	e00f      	b.n	c2c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
     c0c:	687b      	ldr	r3, [r7, #4]
     c0e:	7adb      	ldrb	r3, [r3, #11]
     c10:	2b00      	cmp	r3, #0
     c12:	d00b      	beq.n	c2c <_i2c_master_read+0x9c>
     c14:	687b      	ldr	r3, [r7, #4]
     c16:	8b9b      	ldrh	r3, [r3, #28]
     c18:	b29b      	uxth	r3, r3
     c1a:	2b00      	cmp	r3, #0
     c1c:	d106      	bne.n	c2c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     c1e:	68fb      	ldr	r3, [r7, #12]
     c20:	685b      	ldr	r3, [r3, #4]
     c22:	2280      	movs	r2, #128	; 0x80
     c24:	02d2      	lsls	r2, r2, #11
     c26:	431a      	orrs	r2, r3
     c28:	68fb      	ldr	r3, [r7, #12]
     c2a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
     c2c:	687b      	ldr	r3, [r7, #4]
     c2e:	8b9b      	ldrh	r3, [r3, #28]
     c30:	b29b      	uxth	r3, r3
     c32:	2b00      	cmp	r3, #0
     c34:	d10e      	bne.n	c54 <_i2c_master_read+0xc4>
		if (module->send_stop) {
     c36:	687b      	ldr	r3, [r7, #4]
     c38:	7a9b      	ldrb	r3, [r3, #10]
     c3a:	2b00      	cmp	r3, #0
     c3c:	d00a      	beq.n	c54 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     c3e:	687b      	ldr	r3, [r7, #4]
     c40:	0018      	movs	r0, r3
     c42:	4b0e      	ldr	r3, [pc, #56]	; (c7c <_i2c_master_read+0xec>)
     c44:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     c46:	68fb      	ldr	r3, [r7, #12]
     c48:	685b      	ldr	r3, [r3, #4]
     c4a:	22c0      	movs	r2, #192	; 0xc0
     c4c:	0292      	lsls	r2, r2, #10
     c4e:	431a      	orrs	r2, r3
     c50:	68fb      	ldr	r3, [r7, #12]
     c52:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     c54:	687b      	ldr	r3, [r7, #4]
     c56:	0018      	movs	r0, r3
     c58:	4b08      	ldr	r3, [pc, #32]	; (c7c <_i2c_master_read+0xec>)
     c5a:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     c5c:	687b      	ldr	r3, [r7, #4]
     c5e:	6a1a      	ldr	r2, [r3, #32]
     c60:	2308      	movs	r3, #8
     c62:	18fb      	adds	r3, r7, r3
     c64:	881b      	ldrh	r3, [r3, #0]
     c66:	18d3      	adds	r3, r2, r3
     c68:	68fa      	ldr	r2, [r7, #12]
     c6a:	2128      	movs	r1, #40	; 0x28
     c6c:	5c52      	ldrb	r2, [r2, r1]
     c6e:	b2d2      	uxtb	r2, r2
     c70:	701a      	strb	r2, [r3, #0]
}
     c72:	46c0      	nop			; (mov r8, r8)
     c74:	46bd      	mov	sp, r7
     c76:	b004      	add	sp, #16
     c78:	bd80      	pop	{r7, pc}
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	00000b6d 	.word	0x00000b6d

00000c80 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     c80:	b580      	push	{r7, lr}
     c82:	b084      	sub	sp, #16
     c84:	af00      	add	r7, sp, #0
     c86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c88:	687b      	ldr	r3, [r7, #4]
     c8a:	681b      	ldr	r3, [r3, #0]
     c8c:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     c8e:	68fb      	ldr	r3, [r7, #12]
     c90:	8b5b      	ldrh	r3, [r3, #26]
     c92:	b29b      	uxth	r3, r3
     c94:	001a      	movs	r2, r3
     c96:	2304      	movs	r3, #4
     c98:	4013      	ands	r3, r2
     c9a:	d004      	beq.n	ca6 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     c9c:	687b      	ldr	r3, [r7, #4]
     c9e:	2225      	movs	r2, #37	; 0x25
     ca0:	211e      	movs	r1, #30
     ca2:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
     ca4:	e024      	b.n	cf0 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
     ca6:	230a      	movs	r3, #10
     ca8:	18fb      	adds	r3, r7, r3
     caa:	687a      	ldr	r2, [r7, #4]
     cac:	8b52      	ldrh	r2, [r2, #26]
     cae:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
     cb0:	687b      	ldr	r3, [r7, #4]
     cb2:	8b9b      	ldrh	r3, [r3, #28]
     cb4:	b29a      	uxth	r2, r3
     cb6:	230a      	movs	r3, #10
     cb8:	18fb      	adds	r3, r7, r3
     cba:	210a      	movs	r1, #10
     cbc:	1879      	adds	r1, r7, r1
     cbe:	8809      	ldrh	r1, [r1, #0]
     cc0:	1a8a      	subs	r2, r1, r2
     cc2:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
     cc4:	687b      	ldr	r3, [r7, #4]
     cc6:	8b9b      	ldrh	r3, [r3, #28]
     cc8:	b29b      	uxth	r3, r3
     cca:	3b01      	subs	r3, #1
     ccc:	b29a      	uxth	r2, r3
     cce:	687b      	ldr	r3, [r7, #4]
     cd0:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
     cd2:	687b      	ldr	r3, [r7, #4]
     cd4:	0018      	movs	r0, r3
     cd6:	4b08      	ldr	r3, [pc, #32]	; (cf8 <_i2c_master_write+0x78>)
     cd8:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     cda:	687b      	ldr	r3, [r7, #4]
     cdc:	6a1a      	ldr	r2, [r3, #32]
     cde:	230a      	movs	r3, #10
     ce0:	18fb      	adds	r3, r7, r3
     ce2:	881b      	ldrh	r3, [r3, #0]
     ce4:	18d3      	adds	r3, r2, r3
     ce6:	781b      	ldrb	r3, [r3, #0]
     ce8:	b2d9      	uxtb	r1, r3
     cea:	68fb      	ldr	r3, [r7, #12]
     cec:	2228      	movs	r2, #40	; 0x28
     cee:	5499      	strb	r1, [r3, r2]
}
     cf0:	46bd      	mov	sp, r7
     cf2:	b004      	add	sp, #16
     cf4:	bd80      	pop	{r7, pc}
     cf6:	46c0      	nop			; (mov r8, r8)
     cf8:	00000b6d 	.word	0x00000b6d

00000cfc <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
     cfc:	b580      	push	{r7, lr}
     cfe:	b084      	sub	sp, #16
     d00:	af00      	add	r7, sp, #0
     d02:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     d04:	687b      	ldr	r3, [r7, #4]
     d06:	681b      	ldr	r3, [r3, #0]
     d08:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     d0a:	68fb      	ldr	r3, [r7, #12]
     d0c:	7e1b      	ldrb	r3, [r3, #24]
     d0e:	b2db      	uxtb	r3, r3
     d10:	001a      	movs	r2, r3
     d12:	2301      	movs	r3, #1
     d14:	4013      	ands	r3, r2
     d16:	d02b      	beq.n	d70 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     d18:	68fb      	ldr	r3, [r7, #12]
     d1a:	2201      	movs	r2, #1
     d1c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     d1e:	68fb      	ldr	r3, [r7, #12]
     d20:	8b5b      	ldrh	r3, [r3, #26]
     d22:	b29b      	uxth	r3, r3
     d24:	001a      	movs	r2, r3
     d26:	2302      	movs	r3, #2
     d28:	4013      	ands	r3, r2
     d2a:	d004      	beq.n	d36 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
     d2c:	687b      	ldr	r3, [r7, #4]
     d2e:	2225      	movs	r2, #37	; 0x25
     d30:	2141      	movs	r1, #65	; 0x41
     d32:	5499      	strb	r1, [r3, r2]
     d34:	e01c      	b.n	d70 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     d36:	68fb      	ldr	r3, [r7, #12]
     d38:	8b5b      	ldrh	r3, [r3, #26]
     d3a:	b29b      	uxth	r3, r3
     d3c:	001a      	movs	r2, r3
     d3e:	2304      	movs	r3, #4
     d40:	4013      	ands	r3, r2
     d42:	d015      	beq.n	d70 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     d44:	687b      	ldr	r3, [r7, #4]
     d46:	2225      	movs	r2, #37	; 0x25
     d48:	2118      	movs	r1, #24
     d4a:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
     d4c:	687b      	ldr	r3, [r7, #4]
     d4e:	2200      	movs	r2, #0
     d50:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
     d52:	687b      	ldr	r3, [r7, #4]
     d54:	7a9b      	ldrb	r3, [r3, #10]
     d56:	2b00      	cmp	r3, #0
     d58:	d00a      	beq.n	d70 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
     d5a:	687b      	ldr	r3, [r7, #4]
     d5c:	0018      	movs	r0, r3
     d5e:	4b13      	ldr	r3, [pc, #76]	; (dac <_i2c_master_async_address_response+0xb0>)
     d60:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     d62:	68fb      	ldr	r3, [r7, #12]
     d64:	685b      	ldr	r3, [r3, #4]
     d66:	22c0      	movs	r2, #192	; 0xc0
     d68:	0292      	lsls	r2, r2, #10
     d6a:	431a      	orrs	r2, r3
     d6c:	68fb      	ldr	r3, [r7, #12]
     d6e:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
     d70:	687b      	ldr	r3, [r7, #4]
     d72:	8b9b      	ldrh	r3, [r3, #28]
     d74:	b29a      	uxth	r2, r3
     d76:	687b      	ldr	r3, [r7, #4]
     d78:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
     d7a:	687b      	ldr	r3, [r7, #4]
     d7c:	2225      	movs	r2, #37	; 0x25
     d7e:	5c9b      	ldrb	r3, [r3, r2]
     d80:	b2db      	uxtb	r3, r3
     d82:	2b05      	cmp	r3, #5
     d84:	d10e      	bne.n	da4 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     d86:	687b      	ldr	r3, [r7, #4]
     d88:	2224      	movs	r2, #36	; 0x24
     d8a:	5c9b      	ldrb	r3, [r3, r2]
     d8c:	b2db      	uxtb	r3, r3
     d8e:	2b00      	cmp	r3, #0
     d90:	d104      	bne.n	d9c <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
     d92:	687b      	ldr	r3, [r7, #4]
     d94:	0018      	movs	r0, r3
     d96:	4b06      	ldr	r3, [pc, #24]	; (db0 <_i2c_master_async_address_response+0xb4>)
     d98:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
     d9a:	e003      	b.n	da4 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
     d9c:	687b      	ldr	r3, [r7, #4]
     d9e:	0018      	movs	r0, r3
     da0:	4b04      	ldr	r3, [pc, #16]	; (db4 <_i2c_master_async_address_response+0xb8>)
     da2:	4798      	blx	r3
}
     da4:	46c0      	nop			; (mov r8, r8)
     da6:	46bd      	mov	sp, r7
     da8:	b004      	add	sp, #16
     daa:	bd80      	pop	{r7, pc}
     dac:	00000b6d 	.word	0x00000b6d
     db0:	00000c81 	.word	0x00000c81
     db4:	00000b91 	.word	0x00000b91

00000db8 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     db8:	b590      	push	{r4, r7, lr}
     dba:	b087      	sub	sp, #28
     dbc:	af00      	add	r7, sp, #0
     dbe:	6078      	str	r0, [r7, #4]
     dc0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     dc2:	687b      	ldr	r3, [r7, #4]
     dc4:	681b      	ldr	r3, [r3, #0]
     dc6:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
     dc8:	683b      	ldr	r3, [r7, #0]
     dca:	685a      	ldr	r2, [r3, #4]
     dcc:	687b      	ldr	r3, [r7, #4]
     dce:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
     dd0:	683b      	ldr	r3, [r7, #0]
     dd2:	885a      	ldrh	r2, [r3, #2]
     dd4:	687b      	ldr	r3, [r7, #4]
     dd6:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     dd8:	687b      	ldr	r3, [r7, #4]
     dda:	2224      	movs	r2, #36	; 0x24
     ddc:	2101      	movs	r1, #1
     dde:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
     de0:	687b      	ldr	r3, [r7, #4]
     de2:	2225      	movs	r2, #37	; 0x25
     de4:	2105      	movs	r1, #5
     de6:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     de8:	693b      	ldr	r3, [r7, #16]
     dea:	681b      	ldr	r3, [r3, #0]
     dec:	011b      	lsls	r3, r3, #4
     dee:	0fdb      	lsrs	r3, r3, #31
     df0:	b2db      	uxtb	r3, r3
     df2:	001a      	movs	r2, r3
     df4:	230f      	movs	r3, #15
     df6:	18fb      	adds	r3, r7, r3
     df8:	1e51      	subs	r1, r2, #1
     dfa:	418a      	sbcs	r2, r1
     dfc:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     dfe:	683b      	ldr	r3, [r7, #0]
     e00:	7a5b      	ldrb	r3, [r3, #9]
     e02:	2b00      	cmp	r3, #0
     e04:	d006      	beq.n	e14 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     e06:	683b      	ldr	r3, [r7, #0]
     e08:	7a9a      	ldrb	r2, [r3, #10]
     e0a:	687b      	ldr	r3, [r7, #4]
     e0c:	0011      	movs	r1, r2
     e0e:	0018      	movs	r0, r3
     e10:	4b3b      	ldr	r3, [pc, #236]	; (f00 <_i2c_master_read_packet+0x148>)
     e12:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     e14:	230f      	movs	r3, #15
     e16:	18fb      	adds	r3, r7, r3
     e18:	781b      	ldrb	r3, [r3, #0]
     e1a:	2b00      	cmp	r3, #0
     e1c:	d00b      	beq.n	e36 <_i2c_master_read_packet+0x7e>
     e1e:	683b      	ldr	r3, [r7, #0]
     e20:	885b      	ldrh	r3, [r3, #2]
     e22:	2b01      	cmp	r3, #1
     e24:	d107      	bne.n	e36 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     e26:	693b      	ldr	r3, [r7, #16]
     e28:	685b      	ldr	r3, [r3, #4]
     e2a:	2280      	movs	r2, #128	; 0x80
     e2c:	02d2      	lsls	r2, r2, #11
     e2e:	431a      	orrs	r2, r3
     e30:	693b      	ldr	r3, [r7, #16]
     e32:	605a      	str	r2, [r3, #4]
     e34:	e005      	b.n	e42 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     e36:	693b      	ldr	r3, [r7, #16]
     e38:	685b      	ldr	r3, [r3, #4]
     e3a:	4a32      	ldr	r2, [pc, #200]	; (f04 <_i2c_master_read_packet+0x14c>)
     e3c:	401a      	ands	r2, r3
     e3e:	693b      	ldr	r3, [r7, #16]
     e40:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
     e42:	683b      	ldr	r3, [r7, #0]
     e44:	7a1b      	ldrb	r3, [r3, #8]
     e46:	2b00      	cmp	r3, #0
     e48:	d045      	beq.n	ed6 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     e4a:	683b      	ldr	r3, [r7, #0]
     e4c:	881b      	ldrh	r3, [r3, #0]
     e4e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     e50:	683b      	ldr	r3, [r7, #0]
     e52:	7a5b      	ldrb	r3, [r3, #9]
     e54:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     e56:	4313      	orrs	r3, r2
     e58:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     e5a:	2380      	movs	r3, #128	; 0x80
     e5c:	021b      	lsls	r3, r3, #8
     e5e:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
     e60:	693b      	ldr	r3, [r7, #16]
     e62:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     e64:	2317      	movs	r3, #23
     e66:	18fc      	adds	r4, r7, r3
     e68:	687b      	ldr	r3, [r7, #4]
     e6a:	0018      	movs	r0, r3
     e6c:	4b26      	ldr	r3, [pc, #152]	; (f08 <_i2c_master_read_packet+0x150>)
     e6e:	4798      	blx	r3
     e70:	0003      	movs	r3, r0
     e72:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     e74:	693b      	ldr	r3, [r7, #16]
     e76:	685b      	ldr	r3, [r3, #4]
     e78:	4a22      	ldr	r2, [pc, #136]	; (f04 <_i2c_master_read_packet+0x14c>)
     e7a:	401a      	ands	r2, r3
     e7c:	693b      	ldr	r3, [r7, #16]
     e7e:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
     e80:	2317      	movs	r3, #23
     e82:	18fb      	adds	r3, r7, r3
     e84:	781b      	ldrb	r3, [r3, #0]
     e86:	2b00      	cmp	r3, #0
     e88:	d107      	bne.n	e9a <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
     e8a:	2317      	movs	r3, #23
     e8c:	18fc      	adds	r4, r7, r3
     e8e:	687b      	ldr	r3, [r7, #4]
     e90:	0018      	movs	r0, r3
     e92:	4b1e      	ldr	r3, [pc, #120]	; (f0c <_i2c_master_read_packet+0x154>)
     e94:	4798      	blx	r3
     e96:	0003      	movs	r3, r0
     e98:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
     e9a:	2317      	movs	r3, #23
     e9c:	18fb      	adds	r3, r7, r3
     e9e:	781b      	ldrb	r3, [r3, #0]
     ea0:	2b00      	cmp	r3, #0
     ea2:	d114      	bne.n	ece <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
     ea4:	693b      	ldr	r3, [r7, #16]
     ea6:	2203      	movs	r2, #3
     ea8:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     eaa:	683b      	ldr	r3, [r7, #0]
     eac:	881b      	ldrh	r3, [r3, #0]
     eae:	0a1b      	lsrs	r3, r3, #8
     eb0:	b29b      	uxth	r3, r3
     eb2:	2278      	movs	r2, #120	; 0x78
     eb4:	4313      	orrs	r3, r2
     eb6:	b29b      	uxth	r3, r3
     eb8:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     eba:	683b      	ldr	r3, [r7, #0]
     ebc:	7a5b      	ldrb	r3, [r3, #9]
     ebe:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     ec0:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     ec2:	2201      	movs	r2, #1
     ec4:	4313      	orrs	r3, r2
     ec6:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     ec8:	693b      	ldr	r3, [r7, #16]
     eca:	625a      	str	r2, [r3, #36]	; 0x24
     ecc:	e012      	b.n	ef4 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
     ece:	2317      	movs	r3, #23
     ed0:	18fb      	adds	r3, r7, r3
     ed2:	781b      	ldrb	r3, [r3, #0]
     ed4:	e00f      	b.n	ef6 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
     ed6:	693b      	ldr	r3, [r7, #16]
     ed8:	2203      	movs	r2, #3
     eda:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     edc:	683b      	ldr	r3, [r7, #0]
     ede:	881b      	ldrh	r3, [r3, #0]
     ee0:	005b      	lsls	r3, r3, #1
     ee2:	2201      	movs	r2, #1
     ee4:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     ee6:	683b      	ldr	r3, [r7, #0]
     ee8:	7a5b      	ldrb	r3, [r3, #9]
     eea:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     eec:	4313      	orrs	r3, r2
     eee:	001a      	movs	r2, r3
     ef0:	693b      	ldr	r3, [r7, #16]
     ef2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
     ef4:	2300      	movs	r3, #0
}
     ef6:	0018      	movs	r0, r3
     ef8:	46bd      	mov	sp, r7
     efa:	b007      	add	sp, #28
     efc:	bd90      	pop	{r4, r7, pc}
     efe:	46c0      	nop			; (mov r8, r8)
     f00:	00000af5 	.word	0x00000af5
     f04:	fffbffff 	.word	0xfffbffff
     f08:	00000a97 	.word	0x00000a97
     f0c:	00000a39 	.word	0x00000a39

00000f10 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     f10:	b580      	push	{r7, lr}
     f12:	b082      	sub	sp, #8
     f14:	af00      	add	r7, sp, #0
     f16:	6078      	str	r0, [r7, #4]
     f18:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     f1a:	687b      	ldr	r3, [r7, #4]
     f1c:	8b9b      	ldrh	r3, [r3, #28]
     f1e:	b29b      	uxth	r3, r3
     f20:	2b00      	cmp	r3, #0
     f22:	d001      	beq.n	f28 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
     f24:	2305      	movs	r3, #5
     f26:	e00c      	b.n	f42 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
     f28:	687b      	ldr	r3, [r7, #4]
     f2a:	2201      	movs	r2, #1
     f2c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     f2e:	687b      	ldr	r3, [r7, #4]
     f30:	2201      	movs	r2, #1
     f32:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
     f34:	683a      	ldr	r2, [r7, #0]
     f36:	687b      	ldr	r3, [r7, #4]
     f38:	0011      	movs	r1, r2
     f3a:	0018      	movs	r0, r3
     f3c:	4b03      	ldr	r3, [pc, #12]	; (f4c <i2c_master_read_packet_job+0x3c>)
     f3e:	4798      	blx	r3
     f40:	0003      	movs	r3, r0
}
     f42:	0018      	movs	r0, r3
     f44:	46bd      	mov	sp, r7
     f46:	b002      	add	sp, #8
     f48:	bd80      	pop	{r7, pc}
     f4a:	46c0      	nop			; (mov r8, r8)
     f4c:	00000db9 	.word	0x00000db9

00000f50 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     f50:	b580      	push	{r7, lr}
     f52:	b084      	sub	sp, #16
     f54:	af00      	add	r7, sp, #0
     f56:	6078      	str	r0, [r7, #4]
     f58:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     f5a:	687b      	ldr	r3, [r7, #4]
     f5c:	681b      	ldr	r3, [r3, #0]
     f5e:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     f60:	683b      	ldr	r3, [r7, #0]
     f62:	7a5b      	ldrb	r3, [r3, #9]
     f64:	2b00      	cmp	r3, #0
     f66:	d006      	beq.n	f76 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     f68:	683b      	ldr	r3, [r7, #0]
     f6a:	7a9a      	ldrb	r2, [r3, #10]
     f6c:	687b      	ldr	r3, [r7, #4]
     f6e:	0011      	movs	r1, r2
     f70:	0018      	movs	r0, r3
     f72:	4b1e      	ldr	r3, [pc, #120]	; (fec <_i2c_master_write_packet+0x9c>)
     f74:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     f76:	68fb      	ldr	r3, [r7, #12]
     f78:	685b      	ldr	r3, [r3, #4]
     f7a:	4a1d      	ldr	r2, [pc, #116]	; (ff0 <_i2c_master_write_packet+0xa0>)
     f7c:	401a      	ands	r2, r3
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     f82:	683b      	ldr	r3, [r7, #0]
     f84:	685a      	ldr	r2, [r3, #4]
     f86:	687b      	ldr	r3, [r7, #4]
     f88:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
     f8a:	683b      	ldr	r3, [r7, #0]
     f8c:	885a      	ldrh	r2, [r3, #2]
     f8e:	687b      	ldr	r3, [r7, #4]
     f90:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     f92:	687b      	ldr	r3, [r7, #4]
     f94:	2224      	movs	r2, #36	; 0x24
     f96:	2100      	movs	r1, #0
     f98:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
     f9a:	687b      	ldr	r3, [r7, #4]
     f9c:	2225      	movs	r2, #37	; 0x25
     f9e:	2105      	movs	r1, #5
     fa0:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     fa2:	68fb      	ldr	r3, [r7, #12]
     fa4:	2203      	movs	r2, #3
     fa6:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     fa8:	683b      	ldr	r3, [r7, #0]
     faa:	7a1b      	ldrb	r3, [r3, #8]
     fac:	2b00      	cmp	r3, #0
     fae:	d00d      	beq.n	fcc <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     fb0:	683b      	ldr	r3, [r7, #0]
     fb2:	881b      	ldrh	r3, [r3, #0]
     fb4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     fb6:	683b      	ldr	r3, [r7, #0]
     fb8:	7a5b      	ldrb	r3, [r3, #9]
     fba:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     fbc:	4313      	orrs	r3, r2
     fbe:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     fc0:	2380      	movs	r3, #128	; 0x80
     fc2:	021b      	lsls	r3, r3, #8
     fc4:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     fc6:	68fb      	ldr	r3, [r7, #12]
     fc8:	625a      	str	r2, [r3, #36]	; 0x24
     fca:	e009      	b.n	fe0 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     fcc:	683b      	ldr	r3, [r7, #0]
     fce:	881b      	ldrh	r3, [r3, #0]
     fd0:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     fd2:	683b      	ldr	r3, [r7, #0]
     fd4:	7a5b      	ldrb	r3, [r3, #9]
     fd6:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     fd8:	4313      	orrs	r3, r2
     fda:	001a      	movs	r2, r3
     fdc:	68fb      	ldr	r3, [r7, #12]
     fde:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
     fe0:	2300      	movs	r3, #0
}
     fe2:	0018      	movs	r0, r3
     fe4:	46bd      	mov	sp, r7
     fe6:	b004      	add	sp, #16
     fe8:	bd80      	pop	{r7, pc}
     fea:	46c0      	nop			; (mov r8, r8)
     fec:	00000af5 	.word	0x00000af5
     ff0:	fffbffff 	.word	0xfffbffff

00000ff4 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     ff4:	b580      	push	{r7, lr}
     ff6:	b082      	sub	sp, #8
     ff8:	af00      	add	r7, sp, #0
     ffa:	6078      	str	r0, [r7, #4]
     ffc:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     ffe:	687b      	ldr	r3, [r7, #4]
    1000:	8b9b      	ldrh	r3, [r3, #28]
    1002:	b29b      	uxth	r3, r3
    1004:	2b00      	cmp	r3, #0
    1006:	d001      	beq.n	100c <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
    1008:	2305      	movs	r3, #5
    100a:	e00c      	b.n	1026 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
    100c:	687b      	ldr	r3, [r7, #4]
    100e:	2201      	movs	r2, #1
    1010:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1012:	687b      	ldr	r3, [r7, #4]
    1014:	2201      	movs	r2, #1
    1016:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
    1018:	683a      	ldr	r2, [r7, #0]
    101a:	687b      	ldr	r3, [r7, #4]
    101c:	0011      	movs	r1, r2
    101e:	0018      	movs	r0, r3
    1020:	4b03      	ldr	r3, [pc, #12]	; (1030 <i2c_master_write_packet_job+0x3c>)
    1022:	4798      	blx	r3
    1024:	0003      	movs	r3, r0
}
    1026:	0018      	movs	r0, r3
    1028:	46bd      	mov	sp, r7
    102a:	b002      	add	sp, #8
    102c:	bd80      	pop	{r7, pc}
    102e:	46c0      	nop			; (mov r8, r8)
    1030:	00000f51 	.word	0x00000f51

00001034 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    1034:	b580      	push	{r7, lr}
    1036:	b086      	sub	sp, #24
    1038:	af00      	add	r7, sp, #0
    103a:	0002      	movs	r2, r0
    103c:	1dfb      	adds	r3, r7, #7
    103e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    1040:	1dfb      	adds	r3, r7, #7
    1042:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    1044:	4b93      	ldr	r3, [pc, #588]	; (1294 <_i2c_master_interrupt_handler+0x260>)
    1046:	0092      	lsls	r2, r2, #2
    1048:	58d3      	ldr	r3, [r2, r3]
    104a:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    104c:	697b      	ldr	r3, [r7, #20]
    104e:	681b      	ldr	r3, [r3, #0]
    1050:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1052:	693b      	ldr	r3, [r7, #16]
    1054:	681b      	ldr	r3, [r3, #0]
    1056:	011b      	lsls	r3, r3, #4
    1058:	0fdb      	lsrs	r3, r3, #31
    105a:	b2db      	uxtb	r3, r3
    105c:	001a      	movs	r2, r3
    105e:	230f      	movs	r3, #15
    1060:	18fb      	adds	r3, r7, r3
    1062:	1e51      	subs	r1, r2, #1
    1064:	418a      	sbcs	r2, r1
    1066:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    1068:	230e      	movs	r3, #14
    106a:	18fb      	adds	r3, r7, r3
    106c:	697a      	ldr	r2, [r7, #20]
    106e:	7e52      	ldrb	r2, [r2, #25]
    1070:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    1072:	697b      	ldr	r3, [r7, #20]
    1074:	7e1b      	ldrb	r3, [r3, #24]
    1076:	b2da      	uxtb	r2, r3
    1078:	230e      	movs	r3, #14
    107a:	18fb      	adds	r3, r7, r3
    107c:	210e      	movs	r1, #14
    107e:	1879      	adds	r1, r7, r1
    1080:	7809      	ldrb	r1, [r1, #0]
    1082:	400a      	ands	r2, r1
    1084:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    1086:	697b      	ldr	r3, [r7, #20]
    1088:	8b5b      	ldrh	r3, [r3, #26]
    108a:	b29b      	uxth	r3, r3
    108c:	2b00      	cmp	r3, #0
    108e:	d109      	bne.n	10a4 <_i2c_master_interrupt_handler+0x70>
    1090:	697b      	ldr	r3, [r7, #20]
    1092:	8b9b      	ldrh	r3, [r3, #28]
    1094:	b29b      	uxth	r3, r3
    1096:	2b00      	cmp	r3, #0
    1098:	d004      	beq.n	10a4 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    109a:	697b      	ldr	r3, [r7, #20]
    109c:	0018      	movs	r0, r3
    109e:	4b7e      	ldr	r3, [pc, #504]	; (1298 <_i2c_master_interrupt_handler+0x264>)
    10a0:	4798      	blx	r3
    10a2:	e070      	b.n	1186 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    10a4:	697b      	ldr	r3, [r7, #20]
    10a6:	8b5b      	ldrh	r3, [r3, #26]
    10a8:	b29b      	uxth	r3, r3
    10aa:	2b00      	cmp	r3, #0
    10ac:	d039      	beq.n	1122 <_i2c_master_interrupt_handler+0xee>
    10ae:	697b      	ldr	r3, [r7, #20]
    10b0:	8b9b      	ldrh	r3, [r3, #28]
    10b2:	b29b      	uxth	r3, r3
    10b4:	2b00      	cmp	r3, #0
    10b6:	d134      	bne.n	1122 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    10b8:	697b      	ldr	r3, [r7, #20]
    10ba:	2225      	movs	r2, #37	; 0x25
    10bc:	5c9b      	ldrb	r3, [r3, r2]
    10be:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    10c0:	2b05      	cmp	r3, #5
    10c2:	d12e      	bne.n	1122 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    10c4:	697b      	ldr	r3, [r7, #20]
    10c6:	2224      	movs	r2, #36	; 0x24
    10c8:	5c9b      	ldrb	r3, [r3, r2]
    10ca:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    10cc:	2b00      	cmp	r3, #0
    10ce:	d128      	bne.n	1122 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    10d0:	693b      	ldr	r3, [r7, #16]
    10d2:	2203      	movs	r2, #3
    10d4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    10d6:	697b      	ldr	r3, [r7, #20]
    10d8:	2200      	movs	r2, #0
    10da:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    10dc:	697b      	ldr	r3, [r7, #20]
    10de:	2225      	movs	r2, #37	; 0x25
    10e0:	2100      	movs	r1, #0
    10e2:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    10e4:	697b      	ldr	r3, [r7, #20]
    10e6:	7a9b      	ldrb	r3, [r3, #10]
    10e8:	2b00      	cmp	r3, #0
    10ea:	d00b      	beq.n	1104 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    10ec:	697b      	ldr	r3, [r7, #20]
    10ee:	0018      	movs	r0, r3
    10f0:	4b6a      	ldr	r3, [pc, #424]	; (129c <_i2c_master_interrupt_handler+0x268>)
    10f2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    10f4:	693b      	ldr	r3, [r7, #16]
    10f6:	685b      	ldr	r3, [r3, #4]
    10f8:	22c0      	movs	r2, #192	; 0xc0
    10fa:	0292      	lsls	r2, r2, #10
    10fc:	431a      	orrs	r2, r3
    10fe:	693b      	ldr	r3, [r7, #16]
    1100:	605a      	str	r2, [r3, #4]
    1102:	e002      	b.n	110a <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1104:	693b      	ldr	r3, [r7, #16]
    1106:	2201      	movs	r2, #1
    1108:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    110a:	230e      	movs	r3, #14
    110c:	18fb      	adds	r3, r7, r3
    110e:	781b      	ldrb	r3, [r3, #0]
    1110:	2201      	movs	r2, #1
    1112:	4013      	ands	r3, r2
    1114:	d037      	beq.n	1186 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1116:	697b      	ldr	r3, [r7, #20]
    1118:	68db      	ldr	r3, [r3, #12]
    111a:	697a      	ldr	r2, [r7, #20]
    111c:	0010      	movs	r0, r2
    111e:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1120:	e031      	b.n	1186 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1122:	697b      	ldr	r3, [r7, #20]
    1124:	8b5b      	ldrh	r3, [r3, #26]
    1126:	b29b      	uxth	r3, r3
    1128:	2b00      	cmp	r3, #0
    112a:	d02c      	beq.n	1186 <_i2c_master_interrupt_handler+0x152>
    112c:	697b      	ldr	r3, [r7, #20]
    112e:	8b9b      	ldrh	r3, [r3, #28]
    1130:	b29b      	uxth	r3, r3
    1132:	2b00      	cmp	r3, #0
    1134:	d027      	beq.n	1186 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1136:	693b      	ldr	r3, [r7, #16]
    1138:	8b5b      	ldrh	r3, [r3, #26]
    113a:	b29b      	uxth	r3, r3
    113c:	001a      	movs	r2, r3
    113e:	2320      	movs	r3, #32
    1140:	4013      	ands	r3, r2
    1142:	d111      	bne.n	1168 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1144:	230f      	movs	r3, #15
    1146:	18fb      	adds	r3, r7, r3
    1148:	781b      	ldrb	r3, [r3, #0]
    114a:	2201      	movs	r2, #1
    114c:	4053      	eors	r3, r2
    114e:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1150:	2b00      	cmp	r3, #0
    1152:	d104      	bne.n	115e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1154:	697b      	ldr	r3, [r7, #20]
    1156:	8b9b      	ldrh	r3, [r3, #28]
    1158:	b29b      	uxth	r3, r3
    115a:	2b01      	cmp	r3, #1
    115c:	d004      	beq.n	1168 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    115e:	697b      	ldr	r3, [r7, #20]
    1160:	2225      	movs	r2, #37	; 0x25
    1162:	2141      	movs	r1, #65	; 0x41
    1164:	5499      	strb	r1, [r3, r2]
    1166:	e00e      	b.n	1186 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1168:	697b      	ldr	r3, [r7, #20]
    116a:	2224      	movs	r2, #36	; 0x24
    116c:	5c9b      	ldrb	r3, [r3, r2]
    116e:	b2db      	uxtb	r3, r3
    1170:	2b00      	cmp	r3, #0
    1172:	d104      	bne.n	117e <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    1174:	697b      	ldr	r3, [r7, #20]
    1176:	0018      	movs	r0, r3
    1178:	4b49      	ldr	r3, [pc, #292]	; (12a0 <_i2c_master_interrupt_handler+0x26c>)
    117a:	4798      	blx	r3
    117c:	e003      	b.n	1186 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    117e:	697b      	ldr	r3, [r7, #20]
    1180:	0018      	movs	r0, r3
    1182:	4b48      	ldr	r3, [pc, #288]	; (12a4 <_i2c_master_interrupt_handler+0x270>)
    1184:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1186:	697b      	ldr	r3, [r7, #20]
    1188:	8b5b      	ldrh	r3, [r3, #26]
    118a:	b29b      	uxth	r3, r3
    118c:	2b00      	cmp	r3, #0
    118e:	d047      	beq.n	1220 <_i2c_master_interrupt_handler+0x1ec>
    1190:	697b      	ldr	r3, [r7, #20]
    1192:	8b9b      	ldrh	r3, [r3, #28]
    1194:	b29b      	uxth	r3, r3
    1196:	2b00      	cmp	r3, #0
    1198:	d142      	bne.n	1220 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    119a:	697b      	ldr	r3, [r7, #20]
    119c:	2225      	movs	r2, #37	; 0x25
    119e:	5c9b      	ldrb	r3, [r3, r2]
    11a0:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    11a2:	2b05      	cmp	r3, #5
    11a4:	d13c      	bne.n	1220 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    11a6:	697b      	ldr	r3, [r7, #20]
    11a8:	2224      	movs	r2, #36	; 0x24
    11aa:	5c9b      	ldrb	r3, [r3, r2]
    11ac:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    11ae:	2b01      	cmp	r3, #1
    11b0:	d136      	bne.n	1220 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    11b2:	693b      	ldr	r3, [r7, #16]
    11b4:	7e1b      	ldrb	r3, [r3, #24]
    11b6:	b2db      	uxtb	r3, r3
    11b8:	001a      	movs	r2, r3
    11ba:	2302      	movs	r3, #2
    11bc:	4013      	ands	r3, r2
    11be:	d002      	beq.n	11c6 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    11c0:	693b      	ldr	r3, [r7, #16]
    11c2:	2202      	movs	r2, #2
    11c4:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    11c6:	693b      	ldr	r3, [r7, #16]
    11c8:	2203      	movs	r2, #3
    11ca:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    11cc:	697b      	ldr	r3, [r7, #20]
    11ce:	2200      	movs	r2, #0
    11d0:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    11d2:	697b      	ldr	r3, [r7, #20]
    11d4:	2225      	movs	r2, #37	; 0x25
    11d6:	2100      	movs	r1, #0
    11d8:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    11da:	230e      	movs	r3, #14
    11dc:	18fb      	adds	r3, r7, r3
    11de:	781b      	ldrb	r3, [r3, #0]
    11e0:	2202      	movs	r2, #2
    11e2:	4013      	ands	r3, r2
    11e4:	d00b      	beq.n	11fe <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    11e6:	697b      	ldr	r3, [r7, #20]
    11e8:	2224      	movs	r2, #36	; 0x24
    11ea:	5c9b      	ldrb	r3, [r3, r2]
    11ec:	b2db      	uxtb	r3, r3
    11ee:	2b01      	cmp	r3, #1
    11f0:	d105      	bne.n	11fe <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    11f2:	697b      	ldr	r3, [r7, #20]
    11f4:	691b      	ldr	r3, [r3, #16]
    11f6:	697a      	ldr	r2, [r7, #20]
    11f8:	0010      	movs	r0, r2
    11fa:	4798      	blx	r3
    11fc:	e010      	b.n	1220 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    11fe:	230e      	movs	r3, #14
    1200:	18fb      	adds	r3, r7, r3
    1202:	781b      	ldrb	r3, [r3, #0]
    1204:	2201      	movs	r2, #1
    1206:	4013      	ands	r3, r2
    1208:	d00a      	beq.n	1220 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    120a:	697b      	ldr	r3, [r7, #20]
    120c:	2224      	movs	r2, #36	; 0x24
    120e:	5c9b      	ldrb	r3, [r3, r2]
    1210:	b2db      	uxtb	r3, r3
    1212:	2b00      	cmp	r3, #0
    1214:	d104      	bne.n	1220 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1216:	697b      	ldr	r3, [r7, #20]
    1218:	68db      	ldr	r3, [r3, #12]
    121a:	697a      	ldr	r2, [r7, #20]
    121c:	0010      	movs	r0, r2
    121e:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    1220:	697b      	ldr	r3, [r7, #20]
    1222:	2225      	movs	r2, #37	; 0x25
    1224:	5c9b      	ldrb	r3, [r3, r2]
    1226:	b2db      	uxtb	r3, r3
    1228:	2b05      	cmp	r3, #5
    122a:	d02e      	beq.n	128a <_i2c_master_interrupt_handler+0x256>
    122c:	697b      	ldr	r3, [r7, #20]
    122e:	2225      	movs	r2, #37	; 0x25
    1230:	5c9b      	ldrb	r3, [r3, r2]
    1232:	b2db      	uxtb	r3, r3
    1234:	2b00      	cmp	r3, #0
    1236:	d028      	beq.n	128a <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    1238:	693b      	ldr	r3, [r7, #16]
    123a:	2203      	movs	r2, #3
    123c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    123e:	697b      	ldr	r3, [r7, #20]
    1240:	2200      	movs	r2, #0
    1242:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    1244:	697b      	ldr	r3, [r7, #20]
    1246:	2200      	movs	r2, #0
    1248:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    124a:	697b      	ldr	r3, [r7, #20]
    124c:	2225      	movs	r2, #37	; 0x25
    124e:	5c9b      	ldrb	r3, [r3, r2]
    1250:	b2db      	uxtb	r3, r3
    1252:	2b41      	cmp	r3, #65	; 0x41
    1254:	d00e      	beq.n	1274 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    1256:	697b      	ldr	r3, [r7, #20]
    1258:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    125a:	2b00      	cmp	r3, #0
    125c:	d00a      	beq.n	1274 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    125e:	697b      	ldr	r3, [r7, #20]
    1260:	0018      	movs	r0, r3
    1262:	4b0e      	ldr	r3, [pc, #56]	; (129c <_i2c_master_interrupt_handler+0x268>)
    1264:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    1266:	693b      	ldr	r3, [r7, #16]
    1268:	685b      	ldr	r3, [r3, #4]
    126a:	22e0      	movs	r2, #224	; 0xe0
    126c:	02d2      	lsls	r2, r2, #11
    126e:	431a      	orrs	r2, r3
    1270:	693b      	ldr	r3, [r7, #16]
    1272:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    1274:	230e      	movs	r3, #14
    1276:	18fb      	adds	r3, r7, r3
    1278:	781b      	ldrb	r3, [r3, #0]
    127a:	2204      	movs	r2, #4
    127c:	4013      	ands	r3, r2
    127e:	d004      	beq.n	128a <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1280:	697b      	ldr	r3, [r7, #20]
    1282:	695b      	ldr	r3, [r3, #20]
    1284:	697a      	ldr	r2, [r7, #20]
    1286:	0010      	movs	r0, r2
    1288:	4798      	blx	r3
		}
	}
}
    128a:	46c0      	nop			; (mov r8, r8)
    128c:	46bd      	mov	sp, r7
    128e:	b006      	add	sp, #24
    1290:	bd80      	pop	{r7, pc}
    1292:	46c0      	nop			; (mov r8, r8)
    1294:	2000010c 	.word	0x2000010c
    1298:	00000cfd 	.word	0x00000cfd
    129c:	00000b6d 	.word	0x00000b6d
    12a0:	00000c81 	.word	0x00000c81
    12a4:	00000b91 	.word	0x00000b91

000012a8 <system_gclk_chan_get_config_defaults>:
{
    12a8:	b580      	push	{r7, lr}
    12aa:	b082      	sub	sp, #8
    12ac:	af00      	add	r7, sp, #0
    12ae:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    12b0:	687b      	ldr	r3, [r7, #4]
    12b2:	2200      	movs	r2, #0
    12b4:	701a      	strb	r2, [r3, #0]
}
    12b6:	46c0      	nop			; (mov r8, r8)
    12b8:	46bd      	mov	sp, r7
    12ba:	b002      	add	sp, #8
    12bc:	bd80      	pop	{r7, pc}

000012be <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    12be:	b5f0      	push	{r4, r5, r6, r7, lr}
    12c0:	b08d      	sub	sp, #52	; 0x34
    12c2:	af00      	add	r7, sp, #0
    12c4:	60b8      	str	r0, [r7, #8]
    12c6:	60f9      	str	r1, [r7, #12]
    12c8:	603a      	str	r2, [r7, #0]
    12ca:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    12cc:	2300      	movs	r3, #0
    12ce:	2400      	movs	r4, #0
    12d0:	623b      	str	r3, [r7, #32]
    12d2:	627c      	str	r4, [r7, #36]	; 0x24
    12d4:	2300      	movs	r3, #0
    12d6:	2400      	movs	r4, #0
    12d8:	61bb      	str	r3, [r7, #24]
    12da:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    12dc:	233f      	movs	r3, #63	; 0x3f
    12de:	62fb      	str	r3, [r7, #44]	; 0x2c
    12e0:	e053      	b.n	138a <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    12e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    12e4:	3b20      	subs	r3, #32
    12e6:	2b00      	cmp	r3, #0
    12e8:	db04      	blt.n	12f4 <long_division+0x36>
    12ea:	2201      	movs	r2, #1
    12ec:	409a      	lsls	r2, r3
    12ee:	0013      	movs	r3, r2
    12f0:	617b      	str	r3, [r7, #20]
    12f2:	e00b      	b.n	130c <long_division+0x4e>
    12f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    12f6:	2220      	movs	r2, #32
    12f8:	1ad3      	subs	r3, r2, r3
    12fa:	2201      	movs	r2, #1
    12fc:	40da      	lsrs	r2, r3
    12fe:	0013      	movs	r3, r2
    1300:	2100      	movs	r1, #0
    1302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1304:	4091      	lsls	r1, r2
    1306:	000a      	movs	r2, r1
    1308:	4313      	orrs	r3, r2
    130a:	617b      	str	r3, [r7, #20]
    130c:	2201      	movs	r2, #1
    130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1310:	409a      	lsls	r2, r3
    1312:	0013      	movs	r3, r2
    1314:	613b      	str	r3, [r7, #16]

		r = r << 1;
    1316:	69bb      	ldr	r3, [r7, #24]
    1318:	69fc      	ldr	r4, [r7, #28]
    131a:	18db      	adds	r3, r3, r3
    131c:	4164      	adcs	r4, r4
    131e:	61bb      	str	r3, [r7, #24]
    1320:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    1322:	68bb      	ldr	r3, [r7, #8]
    1324:	693a      	ldr	r2, [r7, #16]
    1326:	401a      	ands	r2, r3
    1328:	0015      	movs	r5, r2
    132a:	68fb      	ldr	r3, [r7, #12]
    132c:	697a      	ldr	r2, [r7, #20]
    132e:	401a      	ands	r2, r3
    1330:	0016      	movs	r6, r2
    1332:	002b      	movs	r3, r5
    1334:	4333      	orrs	r3, r6
    1336:	d007      	beq.n	1348 <long_division+0x8a>
			r |= 0x01;
    1338:	69bb      	ldr	r3, [r7, #24]
    133a:	2201      	movs	r2, #1
    133c:	4313      	orrs	r3, r2
    133e:	61bb      	str	r3, [r7, #24]
    1340:	69fb      	ldr	r3, [r7, #28]
    1342:	2200      	movs	r2, #0
    1344:	4313      	orrs	r3, r2
    1346:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    1348:	687a      	ldr	r2, [r7, #4]
    134a:	69fb      	ldr	r3, [r7, #28]
    134c:	429a      	cmp	r2, r3
    134e:	d819      	bhi.n	1384 <long_division+0xc6>
    1350:	687a      	ldr	r2, [r7, #4]
    1352:	69fb      	ldr	r3, [r7, #28]
    1354:	429a      	cmp	r2, r3
    1356:	d103      	bne.n	1360 <long_division+0xa2>
    1358:	683a      	ldr	r2, [r7, #0]
    135a:	69bb      	ldr	r3, [r7, #24]
    135c:	429a      	cmp	r2, r3
    135e:	d811      	bhi.n	1384 <long_division+0xc6>
			r = r - d;
    1360:	69b9      	ldr	r1, [r7, #24]
    1362:	69fa      	ldr	r2, [r7, #28]
    1364:	683b      	ldr	r3, [r7, #0]
    1366:	687c      	ldr	r4, [r7, #4]
    1368:	1ac9      	subs	r1, r1, r3
    136a:	41a2      	sbcs	r2, r4
    136c:	000b      	movs	r3, r1
    136e:	0014      	movs	r4, r2
    1370:	61bb      	str	r3, [r7, #24]
    1372:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    1374:	6a3a      	ldr	r2, [r7, #32]
    1376:	693b      	ldr	r3, [r7, #16]
    1378:	4313      	orrs	r3, r2
    137a:	623b      	str	r3, [r7, #32]
    137c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    137e:	697b      	ldr	r3, [r7, #20]
    1380:	4313      	orrs	r3, r2
    1382:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    1384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1386:	3b01      	subs	r3, #1
    1388:	62fb      	str	r3, [r7, #44]	; 0x2c
    138a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    138c:	2b00      	cmp	r3, #0
    138e:	daa8      	bge.n	12e2 <long_division+0x24>
		}
	}

	return q;
    1390:	6a3b      	ldr	r3, [r7, #32]
    1392:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    1394:	0018      	movs	r0, r3
    1396:	0021      	movs	r1, r4
    1398:	46bd      	mov	sp, r7
    139a:	b00d      	add	sp, #52	; 0x34
    139c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000139e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    139e:	b580      	push	{r7, lr}
    13a0:	b086      	sub	sp, #24
    13a2:	af00      	add	r7, sp, #0
    13a4:	60f8      	str	r0, [r7, #12]
    13a6:	60b9      	str	r1, [r7, #8]
    13a8:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    13aa:	2316      	movs	r3, #22
    13ac:	18fb      	adds	r3, r7, r3
    13ae:	2200      	movs	r2, #0
    13b0:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    13b2:	68bb      	ldr	r3, [r7, #8]
    13b4:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    13b6:	68bb      	ldr	r3, [r7, #8]
    13b8:	085a      	lsrs	r2, r3, #1
    13ba:	68fb      	ldr	r3, [r7, #12]
    13bc:	429a      	cmp	r2, r3
    13be:	d201      	bcs.n	13c4 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    13c0:	2340      	movs	r3, #64	; 0x40
    13c2:	e026      	b.n	1412 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    13c4:	68bb      	ldr	r3, [r7, #8]
    13c6:	085b      	lsrs	r3, r3, #1
    13c8:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    13ca:	e00a      	b.n	13e2 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    13cc:	693a      	ldr	r2, [r7, #16]
    13ce:	68fb      	ldr	r3, [r7, #12]
    13d0:	1ad3      	subs	r3, r2, r3
    13d2:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    13d4:	2316      	movs	r3, #22
    13d6:	18fb      	adds	r3, r7, r3
    13d8:	881a      	ldrh	r2, [r3, #0]
    13da:	2316      	movs	r3, #22
    13dc:	18fb      	adds	r3, r7, r3
    13de:	3201      	adds	r2, #1
    13e0:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    13e2:	693a      	ldr	r2, [r7, #16]
    13e4:	68fb      	ldr	r3, [r7, #12]
    13e6:	429a      	cmp	r2, r3
    13e8:	d2f0      	bcs.n	13cc <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    13ea:	2316      	movs	r3, #22
    13ec:	18fb      	adds	r3, r7, r3
    13ee:	2216      	movs	r2, #22
    13f0:	18ba      	adds	r2, r7, r2
    13f2:	8812      	ldrh	r2, [r2, #0]
    13f4:	3a01      	subs	r2, #1
    13f6:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    13f8:	2316      	movs	r3, #22
    13fa:	18fb      	adds	r3, r7, r3
    13fc:	881b      	ldrh	r3, [r3, #0]
    13fe:	2bff      	cmp	r3, #255	; 0xff
    1400:	d901      	bls.n	1406 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1402:	2340      	movs	r3, #64	; 0x40
    1404:	e005      	b.n	1412 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    1406:	687b      	ldr	r3, [r7, #4]
    1408:	2216      	movs	r2, #22
    140a:	18ba      	adds	r2, r7, r2
    140c:	8812      	ldrh	r2, [r2, #0]
    140e:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    1410:	2300      	movs	r3, #0
	}
}
    1412:	0018      	movs	r0, r3
    1414:	46bd      	mov	sp, r7
    1416:	b006      	add	sp, #24
    1418:	bd80      	pop	{r7, pc}
	...

0000141c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    141c:	b5f0      	push	{r4, r5, r6, r7, lr}
    141e:	b0a1      	sub	sp, #132	; 0x84
    1420:	af00      	add	r7, sp, #0
    1422:	64f8      	str	r0, [r7, #76]	; 0x4c
    1424:	64b9      	str	r1, [r7, #72]	; 0x48
    1426:	647a      	str	r2, [r7, #68]	; 0x44
    1428:	2243      	movs	r2, #67	; 0x43
    142a:	18ba      	adds	r2, r7, r2
    142c:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    142e:	2300      	movs	r3, #0
    1430:	2400      	movs	r4, #0
    1432:	673b      	str	r3, [r7, #112]	; 0x70
    1434:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    1436:	2300      	movs	r3, #0
    1438:	2400      	movs	r4, #0
    143a:	66bb      	str	r3, [r7, #104]	; 0x68
    143c:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    143e:	2300      	movs	r3, #0
    1440:	2400      	movs	r4, #0
    1442:	67bb      	str	r3, [r7, #120]	; 0x78
    1444:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    1446:	2300      	movs	r3, #0
    1448:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    144a:	2358      	movs	r3, #88	; 0x58
    144c:	2240      	movs	r2, #64	; 0x40
    144e:	4694      	mov	ip, r2
    1450:	44bc      	add	ip, r7
    1452:	4463      	add	r3, ip
    1454:	781a      	ldrb	r2, [r3, #0]
    1456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1458:	435a      	muls	r2, r3
    145a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    145c:	429a      	cmp	r2, r3
    145e:	d901      	bls.n	1464 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1460:	2340      	movs	r3, #64	; 0x40
    1462:	e0b3      	b.n	15cc <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1464:	2343      	movs	r3, #67	; 0x43
    1466:	18fb      	adds	r3, r7, r3
    1468:	781b      	ldrb	r3, [r3, #0]
    146a:	2b00      	cmp	r3, #0
    146c:	d13d      	bne.n	14ea <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    146e:	2358      	movs	r3, #88	; 0x58
    1470:	2240      	movs	r2, #64	; 0x40
    1472:	4694      	mov	ip, r2
    1474:	44bc      	add	ip, r7
    1476:	4463      	add	r3, ip
    1478:	781b      	ldrb	r3, [r3, #0]
    147a:	b2db      	uxtb	r3, r3
    147c:	613b      	str	r3, [r7, #16]
    147e:	2300      	movs	r3, #0
    1480:	617b      	str	r3, [r7, #20]
    1482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1484:	60bb      	str	r3, [r7, #8]
    1486:	2300      	movs	r3, #0
    1488:	60fb      	str	r3, [r7, #12]
    148a:	4c52      	ldr	r4, [pc, #328]	; (15d4 <_sercom_get_async_baud_val+0x1b8>)
    148c:	68ba      	ldr	r2, [r7, #8]
    148e:	68fb      	ldr	r3, [r7, #12]
    1490:	6938      	ldr	r0, [r7, #16]
    1492:	6979      	ldr	r1, [r7, #20]
    1494:	47a0      	blx	r4
    1496:	0003      	movs	r3, r0
    1498:	000c      	movs	r4, r1
    149a:	001b      	movs	r3, r3
    149c:	65fb      	str	r3, [r7, #92]	; 0x5c
    149e:	2300      	movs	r3, #0
    14a0:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    14a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    14a4:	603b      	str	r3, [r7, #0]
    14a6:	2300      	movs	r3, #0
    14a8:	607b      	str	r3, [r7, #4]
    14aa:	6db8      	ldr	r0, [r7, #88]	; 0x58
    14ac:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    14ae:	683a      	ldr	r2, [r7, #0]
    14b0:	687b      	ldr	r3, [r7, #4]
    14b2:	4c49      	ldr	r4, [pc, #292]	; (15d8 <_sercom_get_async_baud_val+0x1bc>)
    14b4:	47a0      	blx	r4
    14b6:	0003      	movs	r3, r0
    14b8:	000c      	movs	r4, r1
    14ba:	673b      	str	r3, [r7, #112]	; 0x70
    14bc:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    14be:	2100      	movs	r1, #0
    14c0:	2201      	movs	r2, #1
    14c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    14c4:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    14c6:	1ac9      	subs	r1, r1, r3
    14c8:	41a2      	sbcs	r2, r4
    14ca:	000b      	movs	r3, r1
    14cc:	0014      	movs	r4, r2
    14ce:	66bb      	str	r3, [r7, #104]	; 0x68
    14d0:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    14d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    14d4:	0c1b      	lsrs	r3, r3, #16
    14d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    14d8:	0416      	lsls	r6, r2, #16
    14da:	431e      	orrs	r6, r3
    14dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    14de:	041d      	lsls	r5, r3, #16
    14e0:	0033      	movs	r3, r6
    14e2:	67bb      	str	r3, [r7, #120]	; 0x78
    14e4:	2300      	movs	r3, #0
    14e6:	67fb      	str	r3, [r7, #124]	; 0x7c
    14e8:	e06a      	b.n	15c0 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    14ea:	2343      	movs	r3, #67	; 0x43
    14ec:	18fb      	adds	r3, r7, r3
    14ee:	781b      	ldrb	r3, [r3, #0]
    14f0:	2b01      	cmp	r3, #1
    14f2:	d165      	bne.n	15c0 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    14f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    14f6:	633b      	str	r3, [r7, #48]	; 0x30
    14f8:	2300      	movs	r3, #0
    14fa:	637b      	str	r3, [r7, #52]	; 0x34
    14fc:	2358      	movs	r3, #88	; 0x58
    14fe:	2240      	movs	r2, #64	; 0x40
    1500:	4694      	mov	ip, r2
    1502:	44bc      	add	ip, r7
    1504:	4463      	add	r3, ip
    1506:	781b      	ldrb	r3, [r3, #0]
    1508:	b2db      	uxtb	r3, r3
    150a:	62bb      	str	r3, [r7, #40]	; 0x28
    150c:	2300      	movs	r3, #0
    150e:	62fb      	str	r3, [r7, #44]	; 0x2c
    1510:	4c30      	ldr	r4, [pc, #192]	; (15d4 <_sercom_get_async_baud_val+0x1b8>)
    1512:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1516:	6b38      	ldr	r0, [r7, #48]	; 0x30
    1518:	6b79      	ldr	r1, [r7, #52]	; 0x34
    151a:	47a0      	blx	r4
    151c:	0003      	movs	r3, r0
    151e:	000c      	movs	r4, r1
    1520:	65bb      	str	r3, [r7, #88]	; 0x58
    1522:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    1524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1526:	623b      	str	r3, [r7, #32]
    1528:	2300      	movs	r3, #0
    152a:	627b      	str	r3, [r7, #36]	; 0x24
    152c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    152e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    1530:	001a      	movs	r2, r3
    1532:	0023      	movs	r3, r4
    1534:	6a38      	ldr	r0, [r7, #32]
    1536:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1538:	4c27      	ldr	r4, [pc, #156]	; (15d8 <_sercom_get_async_baud_val+0x1bc>)
    153a:	47a0      	blx	r4
    153c:	0003      	movs	r3, r0
    153e:	000c      	movs	r4, r1
    1540:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    1542:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    1544:	2380      	movs	r3, #128	; 0x80
    1546:	019b      	lsls	r3, r3, #6
    1548:	429a      	cmp	r2, r3
    154a:	d901      	bls.n	1550 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    154c:	2340      	movs	r3, #64	; 0x40
    154e:	e03d      	b.n	15cc <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1552:	61bb      	str	r3, [r7, #24]
    1554:	2300      	movs	r3, #0
    1556:	61fb      	str	r3, [r7, #28]
    1558:	69b9      	ldr	r1, [r7, #24]
    155a:	69fa      	ldr	r2, [r7, #28]
    155c:	000b      	movs	r3, r1
    155e:	0f5b      	lsrs	r3, r3, #29
    1560:	0010      	movs	r0, r2
    1562:	00c0      	lsls	r0, r0, #3
    1564:	63f8      	str	r0, [r7, #60]	; 0x3c
    1566:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    1568:	4318      	orrs	r0, r3
    156a:	63f8      	str	r0, [r7, #60]	; 0x3c
    156c:	000b      	movs	r3, r1
    156e:	00db      	lsls	r3, r3, #3
    1570:	63bb      	str	r3, [r7, #56]	; 0x38
    1572:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1574:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    1576:	001a      	movs	r2, r3
    1578:	0023      	movs	r3, r4
    157a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    157c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    157e:	4c16      	ldr	r4, [pc, #88]	; (15d8 <_sercom_get_async_baud_val+0x1bc>)
    1580:	47a0      	blx	r4
    1582:	0003      	movs	r3, r0
    1584:	000c      	movs	r4, r1
    1586:	65bb      	str	r3, [r7, #88]	; 0x58
    1588:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    158a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    158c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    158e:	b2d9      	uxtb	r1, r3
    1590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1592:	b2db      	uxtb	r3, r3
    1594:	00db      	lsls	r3, r3, #3
    1596:	b2da      	uxtb	r2, r3
    1598:	2317      	movs	r3, #23
    159a:	2040      	movs	r0, #64	; 0x40
    159c:	4684      	mov	ip, r0
    159e:	44bc      	add	ip, r7
    15a0:	4463      	add	r3, ip
    15a2:	1a8a      	subs	r2, r1, r2
    15a4:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    15a6:	2317      	movs	r3, #23
    15a8:	2240      	movs	r2, #64	; 0x40
    15aa:	4694      	mov	ip, r2
    15ac:	44bc      	add	ip, r7
    15ae:	4463      	add	r3, ip
    15b0:	781b      	ldrb	r3, [r3, #0]
    15b2:	035b      	lsls	r3, r3, #13
    15b4:	001a      	movs	r2, r3
    15b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    15b8:	4313      	orrs	r3, r2
    15ba:	67bb      	str	r3, [r7, #120]	; 0x78
    15bc:	2300      	movs	r3, #0
    15be:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    15c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    15c2:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    15c4:	b29a      	uxth	r2, r3
    15c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    15c8:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    15ca:	2300      	movs	r3, #0
}
    15cc:	0018      	movs	r0, r3
    15ce:	46bd      	mov	sp, r7
    15d0:	b021      	add	sp, #132	; 0x84
    15d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15d4:	000039ad 	.word	0x000039ad
    15d8:	000012bf 	.word	0x000012bf

000015dc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    15dc:	b580      	push	{r7, lr}
    15de:	b084      	sub	sp, #16
    15e0:	af00      	add	r7, sp, #0
    15e2:	0002      	movs	r2, r0
    15e4:	1dfb      	adds	r3, r7, #7
    15e6:	701a      	strb	r2, [r3, #0]
    15e8:	1dbb      	adds	r3, r7, #6
    15ea:	1c0a      	adds	r2, r1, #0
    15ec:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    15ee:	4b1a      	ldr	r3, [pc, #104]	; (1658 <sercom_set_gclk_generator+0x7c>)
    15f0:	781b      	ldrb	r3, [r3, #0]
    15f2:	2201      	movs	r2, #1
    15f4:	4053      	eors	r3, r2
    15f6:	b2db      	uxtb	r3, r3
    15f8:	2b00      	cmp	r3, #0
    15fa:	d103      	bne.n	1604 <sercom_set_gclk_generator+0x28>
    15fc:	1dbb      	adds	r3, r7, #6
    15fe:	781b      	ldrb	r3, [r3, #0]
    1600:	2b00      	cmp	r3, #0
    1602:	d01b      	beq.n	163c <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1604:	230c      	movs	r3, #12
    1606:	18fb      	adds	r3, r7, r3
    1608:	0018      	movs	r0, r3
    160a:	4b14      	ldr	r3, [pc, #80]	; (165c <sercom_set_gclk_generator+0x80>)
    160c:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    160e:	230c      	movs	r3, #12
    1610:	18fb      	adds	r3, r7, r3
    1612:	1dfa      	adds	r2, r7, #7
    1614:	7812      	ldrb	r2, [r2, #0]
    1616:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1618:	230c      	movs	r3, #12
    161a:	18fb      	adds	r3, r7, r3
    161c:	0019      	movs	r1, r3
    161e:	2013      	movs	r0, #19
    1620:	4b0f      	ldr	r3, [pc, #60]	; (1660 <sercom_set_gclk_generator+0x84>)
    1622:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1624:	2013      	movs	r0, #19
    1626:	4b0f      	ldr	r3, [pc, #60]	; (1664 <sercom_set_gclk_generator+0x88>)
    1628:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    162a:	4b0b      	ldr	r3, [pc, #44]	; (1658 <sercom_set_gclk_generator+0x7c>)
    162c:	1dfa      	adds	r2, r7, #7
    162e:	7812      	ldrb	r2, [r2, #0]
    1630:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    1632:	4b09      	ldr	r3, [pc, #36]	; (1658 <sercom_set_gclk_generator+0x7c>)
    1634:	2201      	movs	r2, #1
    1636:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    1638:	2300      	movs	r3, #0
    163a:	e008      	b.n	164e <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    163c:	4b06      	ldr	r3, [pc, #24]	; (1658 <sercom_set_gclk_generator+0x7c>)
    163e:	785b      	ldrb	r3, [r3, #1]
    1640:	1dfa      	adds	r2, r7, #7
    1642:	7812      	ldrb	r2, [r2, #0]
    1644:	429a      	cmp	r2, r3
    1646:	d101      	bne.n	164c <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    1648:	2300      	movs	r3, #0
    164a:	e000      	b.n	164e <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    164c:	231d      	movs	r3, #29
}
    164e:	0018      	movs	r0, r3
    1650:	46bd      	mov	sp, r7
    1652:	b004      	add	sp, #16
    1654:	bd80      	pop	{r7, pc}
    1656:	46c0      	nop			; (mov r8, r8)
    1658:	20000094 	.word	0x20000094
    165c:	000012a9 	.word	0x000012a9
    1660:	00002ca1 	.word	0x00002ca1
    1664:	00002ce5 	.word	0x00002ce5

00001668 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    1668:	b580      	push	{r7, lr}
    166a:	b082      	sub	sp, #8
    166c:	af00      	add	r7, sp, #0
    166e:	6078      	str	r0, [r7, #4]
    1670:	000a      	movs	r2, r1
    1672:	1cfb      	adds	r3, r7, #3
    1674:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    1676:	687b      	ldr	r3, [r7, #4]
    1678:	4a4d      	ldr	r2, [pc, #308]	; (17b0 <_sercom_get_default_pad+0x148>)
    167a:	4293      	cmp	r3, r2
    167c:	d03f      	beq.n	16fe <_sercom_get_default_pad+0x96>
    167e:	4a4c      	ldr	r2, [pc, #304]	; (17b0 <_sercom_get_default_pad+0x148>)
    1680:	4293      	cmp	r3, r2
    1682:	d806      	bhi.n	1692 <_sercom_get_default_pad+0x2a>
    1684:	4a4b      	ldr	r2, [pc, #300]	; (17b4 <_sercom_get_default_pad+0x14c>)
    1686:	4293      	cmp	r3, r2
    1688:	d00f      	beq.n	16aa <_sercom_get_default_pad+0x42>
    168a:	4a4b      	ldr	r2, [pc, #300]	; (17b8 <_sercom_get_default_pad+0x150>)
    168c:	4293      	cmp	r3, r2
    168e:	d021      	beq.n	16d4 <_sercom_get_default_pad+0x6c>
    1690:	e089      	b.n	17a6 <_sercom_get_default_pad+0x13e>
    1692:	4a4a      	ldr	r2, [pc, #296]	; (17bc <_sercom_get_default_pad+0x154>)
    1694:	4293      	cmp	r3, r2
    1696:	d100      	bne.n	169a <_sercom_get_default_pad+0x32>
    1698:	e05b      	b.n	1752 <_sercom_get_default_pad+0xea>
    169a:	4a49      	ldr	r2, [pc, #292]	; (17c0 <_sercom_get_default_pad+0x158>)
    169c:	4293      	cmp	r3, r2
    169e:	d100      	bne.n	16a2 <_sercom_get_default_pad+0x3a>
    16a0:	e06c      	b.n	177c <_sercom_get_default_pad+0x114>
    16a2:	4a48      	ldr	r2, [pc, #288]	; (17c4 <_sercom_get_default_pad+0x15c>)
    16a4:	4293      	cmp	r3, r2
    16a6:	d03f      	beq.n	1728 <_sercom_get_default_pad+0xc0>
    16a8:	e07d      	b.n	17a6 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    16aa:	1cfb      	adds	r3, r7, #3
    16ac:	781b      	ldrb	r3, [r3, #0]
    16ae:	2b01      	cmp	r3, #1
    16b0:	d00a      	beq.n	16c8 <_sercom_get_default_pad+0x60>
    16b2:	dc02      	bgt.n	16ba <_sercom_get_default_pad+0x52>
    16b4:	2b00      	cmp	r3, #0
    16b6:	d005      	beq.n	16c4 <_sercom_get_default_pad+0x5c>
    16b8:	e075      	b.n	17a6 <_sercom_get_default_pad+0x13e>
    16ba:	2b02      	cmp	r3, #2
    16bc:	d006      	beq.n	16cc <_sercom_get_default_pad+0x64>
    16be:	2b03      	cmp	r3, #3
    16c0:	d006      	beq.n	16d0 <_sercom_get_default_pad+0x68>
    16c2:	e070      	b.n	17a6 <_sercom_get_default_pad+0x13e>
    16c4:	4b40      	ldr	r3, [pc, #256]	; (17c8 <_sercom_get_default_pad+0x160>)
    16c6:	e06f      	b.n	17a8 <_sercom_get_default_pad+0x140>
    16c8:	4b40      	ldr	r3, [pc, #256]	; (17cc <_sercom_get_default_pad+0x164>)
    16ca:	e06d      	b.n	17a8 <_sercom_get_default_pad+0x140>
    16cc:	4b40      	ldr	r3, [pc, #256]	; (17d0 <_sercom_get_default_pad+0x168>)
    16ce:	e06b      	b.n	17a8 <_sercom_get_default_pad+0x140>
    16d0:	4b40      	ldr	r3, [pc, #256]	; (17d4 <_sercom_get_default_pad+0x16c>)
    16d2:	e069      	b.n	17a8 <_sercom_get_default_pad+0x140>
    16d4:	1cfb      	adds	r3, r7, #3
    16d6:	781b      	ldrb	r3, [r3, #0]
    16d8:	2b01      	cmp	r3, #1
    16da:	d00a      	beq.n	16f2 <_sercom_get_default_pad+0x8a>
    16dc:	dc02      	bgt.n	16e4 <_sercom_get_default_pad+0x7c>
    16de:	2b00      	cmp	r3, #0
    16e0:	d005      	beq.n	16ee <_sercom_get_default_pad+0x86>
    16e2:	e060      	b.n	17a6 <_sercom_get_default_pad+0x13e>
    16e4:	2b02      	cmp	r3, #2
    16e6:	d006      	beq.n	16f6 <_sercom_get_default_pad+0x8e>
    16e8:	2b03      	cmp	r3, #3
    16ea:	d006      	beq.n	16fa <_sercom_get_default_pad+0x92>
    16ec:	e05b      	b.n	17a6 <_sercom_get_default_pad+0x13e>
    16ee:	2303      	movs	r3, #3
    16f0:	e05a      	b.n	17a8 <_sercom_get_default_pad+0x140>
    16f2:	4b39      	ldr	r3, [pc, #228]	; (17d8 <_sercom_get_default_pad+0x170>)
    16f4:	e058      	b.n	17a8 <_sercom_get_default_pad+0x140>
    16f6:	4b39      	ldr	r3, [pc, #228]	; (17dc <_sercom_get_default_pad+0x174>)
    16f8:	e056      	b.n	17a8 <_sercom_get_default_pad+0x140>
    16fa:	4b39      	ldr	r3, [pc, #228]	; (17e0 <_sercom_get_default_pad+0x178>)
    16fc:	e054      	b.n	17a8 <_sercom_get_default_pad+0x140>
    16fe:	1cfb      	adds	r3, r7, #3
    1700:	781b      	ldrb	r3, [r3, #0]
    1702:	2b01      	cmp	r3, #1
    1704:	d00a      	beq.n	171c <_sercom_get_default_pad+0xb4>
    1706:	dc02      	bgt.n	170e <_sercom_get_default_pad+0xa6>
    1708:	2b00      	cmp	r3, #0
    170a:	d005      	beq.n	1718 <_sercom_get_default_pad+0xb0>
    170c:	e04b      	b.n	17a6 <_sercom_get_default_pad+0x13e>
    170e:	2b02      	cmp	r3, #2
    1710:	d006      	beq.n	1720 <_sercom_get_default_pad+0xb8>
    1712:	2b03      	cmp	r3, #3
    1714:	d006      	beq.n	1724 <_sercom_get_default_pad+0xbc>
    1716:	e046      	b.n	17a6 <_sercom_get_default_pad+0x13e>
    1718:	4b32      	ldr	r3, [pc, #200]	; (17e4 <_sercom_get_default_pad+0x17c>)
    171a:	e045      	b.n	17a8 <_sercom_get_default_pad+0x140>
    171c:	4b32      	ldr	r3, [pc, #200]	; (17e8 <_sercom_get_default_pad+0x180>)
    171e:	e043      	b.n	17a8 <_sercom_get_default_pad+0x140>
    1720:	4b32      	ldr	r3, [pc, #200]	; (17ec <_sercom_get_default_pad+0x184>)
    1722:	e041      	b.n	17a8 <_sercom_get_default_pad+0x140>
    1724:	4b32      	ldr	r3, [pc, #200]	; (17f0 <_sercom_get_default_pad+0x188>)
    1726:	e03f      	b.n	17a8 <_sercom_get_default_pad+0x140>
    1728:	1cfb      	adds	r3, r7, #3
    172a:	781b      	ldrb	r3, [r3, #0]
    172c:	2b01      	cmp	r3, #1
    172e:	d00a      	beq.n	1746 <_sercom_get_default_pad+0xde>
    1730:	dc02      	bgt.n	1738 <_sercom_get_default_pad+0xd0>
    1732:	2b00      	cmp	r3, #0
    1734:	d005      	beq.n	1742 <_sercom_get_default_pad+0xda>
    1736:	e036      	b.n	17a6 <_sercom_get_default_pad+0x13e>
    1738:	2b02      	cmp	r3, #2
    173a:	d006      	beq.n	174a <_sercom_get_default_pad+0xe2>
    173c:	2b03      	cmp	r3, #3
    173e:	d006      	beq.n	174e <_sercom_get_default_pad+0xe6>
    1740:	e031      	b.n	17a6 <_sercom_get_default_pad+0x13e>
    1742:	4b2c      	ldr	r3, [pc, #176]	; (17f4 <_sercom_get_default_pad+0x18c>)
    1744:	e030      	b.n	17a8 <_sercom_get_default_pad+0x140>
    1746:	4b2c      	ldr	r3, [pc, #176]	; (17f8 <_sercom_get_default_pad+0x190>)
    1748:	e02e      	b.n	17a8 <_sercom_get_default_pad+0x140>
    174a:	4b2c      	ldr	r3, [pc, #176]	; (17fc <_sercom_get_default_pad+0x194>)
    174c:	e02c      	b.n	17a8 <_sercom_get_default_pad+0x140>
    174e:	4b2c      	ldr	r3, [pc, #176]	; (1800 <_sercom_get_default_pad+0x198>)
    1750:	e02a      	b.n	17a8 <_sercom_get_default_pad+0x140>
    1752:	1cfb      	adds	r3, r7, #3
    1754:	781b      	ldrb	r3, [r3, #0]
    1756:	2b01      	cmp	r3, #1
    1758:	d00a      	beq.n	1770 <_sercom_get_default_pad+0x108>
    175a:	dc02      	bgt.n	1762 <_sercom_get_default_pad+0xfa>
    175c:	2b00      	cmp	r3, #0
    175e:	d005      	beq.n	176c <_sercom_get_default_pad+0x104>
    1760:	e021      	b.n	17a6 <_sercom_get_default_pad+0x13e>
    1762:	2b02      	cmp	r3, #2
    1764:	d006      	beq.n	1774 <_sercom_get_default_pad+0x10c>
    1766:	2b03      	cmp	r3, #3
    1768:	d006      	beq.n	1778 <_sercom_get_default_pad+0x110>
    176a:	e01c      	b.n	17a6 <_sercom_get_default_pad+0x13e>
    176c:	4b25      	ldr	r3, [pc, #148]	; (1804 <_sercom_get_default_pad+0x19c>)
    176e:	e01b      	b.n	17a8 <_sercom_get_default_pad+0x140>
    1770:	4b25      	ldr	r3, [pc, #148]	; (1808 <_sercom_get_default_pad+0x1a0>)
    1772:	e019      	b.n	17a8 <_sercom_get_default_pad+0x140>
    1774:	4b25      	ldr	r3, [pc, #148]	; (180c <_sercom_get_default_pad+0x1a4>)
    1776:	e017      	b.n	17a8 <_sercom_get_default_pad+0x140>
    1778:	4b25      	ldr	r3, [pc, #148]	; (1810 <_sercom_get_default_pad+0x1a8>)
    177a:	e015      	b.n	17a8 <_sercom_get_default_pad+0x140>
    177c:	1cfb      	adds	r3, r7, #3
    177e:	781b      	ldrb	r3, [r3, #0]
    1780:	2b01      	cmp	r3, #1
    1782:	d00a      	beq.n	179a <_sercom_get_default_pad+0x132>
    1784:	dc02      	bgt.n	178c <_sercom_get_default_pad+0x124>
    1786:	2b00      	cmp	r3, #0
    1788:	d005      	beq.n	1796 <_sercom_get_default_pad+0x12e>
    178a:	e00c      	b.n	17a6 <_sercom_get_default_pad+0x13e>
    178c:	2b02      	cmp	r3, #2
    178e:	d006      	beq.n	179e <_sercom_get_default_pad+0x136>
    1790:	2b03      	cmp	r3, #3
    1792:	d006      	beq.n	17a2 <_sercom_get_default_pad+0x13a>
    1794:	e007      	b.n	17a6 <_sercom_get_default_pad+0x13e>
    1796:	4b1f      	ldr	r3, [pc, #124]	; (1814 <_sercom_get_default_pad+0x1ac>)
    1798:	e006      	b.n	17a8 <_sercom_get_default_pad+0x140>
    179a:	4b1f      	ldr	r3, [pc, #124]	; (1818 <_sercom_get_default_pad+0x1b0>)
    179c:	e004      	b.n	17a8 <_sercom_get_default_pad+0x140>
    179e:	4b1f      	ldr	r3, [pc, #124]	; (181c <_sercom_get_default_pad+0x1b4>)
    17a0:	e002      	b.n	17a8 <_sercom_get_default_pad+0x140>
    17a2:	4b1f      	ldr	r3, [pc, #124]	; (1820 <_sercom_get_default_pad+0x1b8>)
    17a4:	e000      	b.n	17a8 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    17a6:	2300      	movs	r3, #0
}
    17a8:	0018      	movs	r0, r3
    17aa:	46bd      	mov	sp, r7
    17ac:	b002      	add	sp, #8
    17ae:	bd80      	pop	{r7, pc}
    17b0:	42001000 	.word	0x42001000
    17b4:	42000800 	.word	0x42000800
    17b8:	42000c00 	.word	0x42000c00
    17bc:	42001800 	.word	0x42001800
    17c0:	42001c00 	.word	0x42001c00
    17c4:	42001400 	.word	0x42001400
    17c8:	00040003 	.word	0x00040003
    17cc:	00050003 	.word	0x00050003
    17d0:	00060003 	.word	0x00060003
    17d4:	00070003 	.word	0x00070003
    17d8:	00010003 	.word	0x00010003
    17dc:	001e0003 	.word	0x001e0003
    17e0:	001f0003 	.word	0x001f0003
    17e4:	00080003 	.word	0x00080003
    17e8:	00090003 	.word	0x00090003
    17ec:	000a0003 	.word	0x000a0003
    17f0:	000b0003 	.word	0x000b0003
    17f4:	00100003 	.word	0x00100003
    17f8:	00110003 	.word	0x00110003
    17fc:	00120003 	.word	0x00120003
    1800:	00130003 	.word	0x00130003
    1804:	000c0003 	.word	0x000c0003
    1808:	000d0003 	.word	0x000d0003
    180c:	000e0003 	.word	0x000e0003
    1810:	000f0003 	.word	0x000f0003
    1814:	00160003 	.word	0x00160003
    1818:	00170003 	.word	0x00170003
    181c:	00180003 	.word	0x00180003
    1820:	00190003 	.word	0x00190003

00001824 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1824:	b590      	push	{r4, r7, lr}
    1826:	b08b      	sub	sp, #44	; 0x2c
    1828:	af00      	add	r7, sp, #0
    182a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    182c:	230c      	movs	r3, #12
    182e:	18fb      	adds	r3, r7, r3
    1830:	4a0f      	ldr	r2, [pc, #60]	; (1870 <_sercom_get_sercom_inst_index+0x4c>)
    1832:	ca13      	ldmia	r2!, {r0, r1, r4}
    1834:	c313      	stmia	r3!, {r0, r1, r4}
    1836:	ca13      	ldmia	r2!, {r0, r1, r4}
    1838:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    183a:	2300      	movs	r3, #0
    183c:	627b      	str	r3, [r7, #36]	; 0x24
    183e:	e00e      	b.n	185e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1840:	230c      	movs	r3, #12
    1842:	18fb      	adds	r3, r7, r3
    1844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1846:	0092      	lsls	r2, r2, #2
    1848:	58d3      	ldr	r3, [r2, r3]
    184a:	001a      	movs	r2, r3
    184c:	687b      	ldr	r3, [r7, #4]
    184e:	429a      	cmp	r2, r3
    1850:	d102      	bne.n	1858 <_sercom_get_sercom_inst_index+0x34>
			return i;
    1852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1854:	b2db      	uxtb	r3, r3
    1856:	e006      	b.n	1866 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    185a:	3301      	adds	r3, #1
    185c:	627b      	str	r3, [r7, #36]	; 0x24
    185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1860:	2b05      	cmp	r3, #5
    1862:	d9ed      	bls.n	1840 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1864:	2300      	movs	r3, #0
}
    1866:	0018      	movs	r0, r3
    1868:	46bd      	mov	sp, r7
    186a:	b00b      	add	sp, #44	; 0x2c
    186c:	bd90      	pop	{r4, r7, pc}
    186e:	46c0      	nop			; (mov r8, r8)
    1870:	00005dfc 	.word	0x00005dfc

00001874 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    1874:	b580      	push	{r7, lr}
    1876:	b082      	sub	sp, #8
    1878:	af00      	add	r7, sp, #0
    187a:	0002      	movs	r2, r0
    187c:	1dfb      	adds	r3, r7, #7
    187e:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    1880:	46c0      	nop			; (mov r8, r8)
    1882:	46bd      	mov	sp, r7
    1884:	b002      	add	sp, #8
    1886:	bd80      	pop	{r7, pc}

00001888 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1888:	b580      	push	{r7, lr}
    188a:	b084      	sub	sp, #16
    188c:	af00      	add	r7, sp, #0
    188e:	0002      	movs	r2, r0
    1890:	6039      	str	r1, [r7, #0]
    1892:	1dfb      	adds	r3, r7, #7
    1894:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1896:	4b13      	ldr	r3, [pc, #76]	; (18e4 <_sercom_set_handler+0x5c>)
    1898:	781b      	ldrb	r3, [r3, #0]
    189a:	2201      	movs	r2, #1
    189c:	4053      	eors	r3, r2
    189e:	b2db      	uxtb	r3, r3
    18a0:	2b00      	cmp	r3, #0
    18a2:	d015      	beq.n	18d0 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    18a4:	2300      	movs	r3, #0
    18a6:	60fb      	str	r3, [r7, #12]
    18a8:	e00c      	b.n	18c4 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    18aa:	4b0f      	ldr	r3, [pc, #60]	; (18e8 <_sercom_set_handler+0x60>)
    18ac:	68fa      	ldr	r2, [r7, #12]
    18ae:	0092      	lsls	r2, r2, #2
    18b0:	490e      	ldr	r1, [pc, #56]	; (18ec <_sercom_set_handler+0x64>)
    18b2:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    18b4:	4b0e      	ldr	r3, [pc, #56]	; (18f0 <_sercom_set_handler+0x68>)
    18b6:	68fa      	ldr	r2, [r7, #12]
    18b8:	0092      	lsls	r2, r2, #2
    18ba:	2100      	movs	r1, #0
    18bc:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    18be:	68fb      	ldr	r3, [r7, #12]
    18c0:	3301      	adds	r3, #1
    18c2:	60fb      	str	r3, [r7, #12]
    18c4:	68fb      	ldr	r3, [r7, #12]
    18c6:	2b05      	cmp	r3, #5
    18c8:	d9ef      	bls.n	18aa <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    18ca:	4b06      	ldr	r3, [pc, #24]	; (18e4 <_sercom_set_handler+0x5c>)
    18cc:	2201      	movs	r2, #1
    18ce:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    18d0:	1dfb      	adds	r3, r7, #7
    18d2:	781a      	ldrb	r2, [r3, #0]
    18d4:	4b04      	ldr	r3, [pc, #16]	; (18e8 <_sercom_set_handler+0x60>)
    18d6:	0092      	lsls	r2, r2, #2
    18d8:	6839      	ldr	r1, [r7, #0]
    18da:	50d1      	str	r1, [r2, r3]
}
    18dc:	46c0      	nop			; (mov r8, r8)
    18de:	46bd      	mov	sp, r7
    18e0:	b004      	add	sp, #16
    18e2:	bd80      	pop	{r7, pc}
    18e4:	20000096 	.word	0x20000096
    18e8:	20000098 	.word	0x20000098
    18ec:	00001875 	.word	0x00001875
    18f0:	2000010c 	.word	0x2000010c

000018f4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    18f4:	b590      	push	{r4, r7, lr}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    18fc:	2308      	movs	r3, #8
    18fe:	18fa      	adds	r2, r7, r3
    1900:	4b0c      	ldr	r3, [pc, #48]	; (1934 <_sercom_get_interrupt_vector+0x40>)
    1902:	0010      	movs	r0, r2
    1904:	0019      	movs	r1, r3
    1906:	2306      	movs	r3, #6
    1908:	001a      	movs	r2, r3
    190a:	4b0b      	ldr	r3, [pc, #44]	; (1938 <_sercom_get_interrupt_vector+0x44>)
    190c:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    190e:	230f      	movs	r3, #15
    1910:	18fc      	adds	r4, r7, r3
    1912:	687b      	ldr	r3, [r7, #4]
    1914:	0018      	movs	r0, r3
    1916:	4b09      	ldr	r3, [pc, #36]	; (193c <_sercom_get_interrupt_vector+0x48>)
    1918:	4798      	blx	r3
    191a:	0003      	movs	r3, r0
    191c:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    191e:	230f      	movs	r3, #15
    1920:	18fb      	adds	r3, r7, r3
    1922:	781b      	ldrb	r3, [r3, #0]
    1924:	2208      	movs	r2, #8
    1926:	18ba      	adds	r2, r7, r2
    1928:	5cd3      	ldrb	r3, [r2, r3]
    192a:	b25b      	sxtb	r3, r3
}
    192c:	0018      	movs	r0, r3
    192e:	46bd      	mov	sp, r7
    1930:	b005      	add	sp, #20
    1932:	bd90      	pop	{r4, r7, pc}
    1934:	00005e14 	.word	0x00005e14
    1938:	00005311 	.word	0x00005311
    193c:	00001825 	.word	0x00001825

00001940 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1940:	b580      	push	{r7, lr}
    1942:	af00      	add	r7, sp, #0
    1944:	4b03      	ldr	r3, [pc, #12]	; (1954 <SERCOM0_Handler+0x14>)
    1946:	681b      	ldr	r3, [r3, #0]
    1948:	2000      	movs	r0, #0
    194a:	4798      	blx	r3
    194c:	46c0      	nop			; (mov r8, r8)
    194e:	46bd      	mov	sp, r7
    1950:	bd80      	pop	{r7, pc}
    1952:	46c0      	nop			; (mov r8, r8)
    1954:	20000098 	.word	0x20000098

00001958 <SERCOM1_Handler>:
    1958:	b580      	push	{r7, lr}
    195a:	af00      	add	r7, sp, #0
    195c:	4b03      	ldr	r3, [pc, #12]	; (196c <SERCOM1_Handler+0x14>)
    195e:	685b      	ldr	r3, [r3, #4]
    1960:	2001      	movs	r0, #1
    1962:	4798      	blx	r3
    1964:	46c0      	nop			; (mov r8, r8)
    1966:	46bd      	mov	sp, r7
    1968:	bd80      	pop	{r7, pc}
    196a:	46c0      	nop			; (mov r8, r8)
    196c:	20000098 	.word	0x20000098

00001970 <SERCOM2_Handler>:
    1970:	b580      	push	{r7, lr}
    1972:	af00      	add	r7, sp, #0
    1974:	4b03      	ldr	r3, [pc, #12]	; (1984 <SERCOM2_Handler+0x14>)
    1976:	689b      	ldr	r3, [r3, #8]
    1978:	2002      	movs	r0, #2
    197a:	4798      	blx	r3
    197c:	46c0      	nop			; (mov r8, r8)
    197e:	46bd      	mov	sp, r7
    1980:	bd80      	pop	{r7, pc}
    1982:	46c0      	nop			; (mov r8, r8)
    1984:	20000098 	.word	0x20000098

00001988 <SERCOM3_Handler>:
    1988:	b580      	push	{r7, lr}
    198a:	af00      	add	r7, sp, #0
    198c:	4b03      	ldr	r3, [pc, #12]	; (199c <SERCOM3_Handler+0x14>)
    198e:	68db      	ldr	r3, [r3, #12]
    1990:	2003      	movs	r0, #3
    1992:	4798      	blx	r3
    1994:	46c0      	nop			; (mov r8, r8)
    1996:	46bd      	mov	sp, r7
    1998:	bd80      	pop	{r7, pc}
    199a:	46c0      	nop			; (mov r8, r8)
    199c:	20000098 	.word	0x20000098

000019a0 <SERCOM4_Handler>:
    19a0:	b580      	push	{r7, lr}
    19a2:	af00      	add	r7, sp, #0
    19a4:	4b03      	ldr	r3, [pc, #12]	; (19b4 <SERCOM4_Handler+0x14>)
    19a6:	691b      	ldr	r3, [r3, #16]
    19a8:	2004      	movs	r0, #4
    19aa:	4798      	blx	r3
    19ac:	46c0      	nop			; (mov r8, r8)
    19ae:	46bd      	mov	sp, r7
    19b0:	bd80      	pop	{r7, pc}
    19b2:	46c0      	nop			; (mov r8, r8)
    19b4:	20000098 	.word	0x20000098

000019b8 <SERCOM5_Handler>:
    19b8:	b580      	push	{r7, lr}
    19ba:	af00      	add	r7, sp, #0
    19bc:	4b03      	ldr	r3, [pc, #12]	; (19cc <SERCOM5_Handler+0x14>)
    19be:	695b      	ldr	r3, [r3, #20]
    19c0:	2005      	movs	r0, #5
    19c2:	4798      	blx	r3
    19c4:	46c0      	nop			; (mov r8, r8)
    19c6:	46bd      	mov	sp, r7
    19c8:	bd80      	pop	{r7, pc}
    19ca:	46c0      	nop			; (mov r8, r8)
    19cc:	20000098 	.word	0x20000098

000019d0 <system_gclk_chan_get_config_defaults>:
{
    19d0:	b580      	push	{r7, lr}
    19d2:	b082      	sub	sp, #8
    19d4:	af00      	add	r7, sp, #0
    19d6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    19d8:	687b      	ldr	r3, [r7, #4]
    19da:	2200      	movs	r2, #0
    19dc:	701a      	strb	r2, [r3, #0]
}
    19de:	46c0      	nop			; (mov r8, r8)
    19e0:	46bd      	mov	sp, r7
    19e2:	b002      	add	sp, #8
    19e4:	bd80      	pop	{r7, pc}
	...

000019e8 <system_apb_clock_set_mask>:
{
    19e8:	b580      	push	{r7, lr}
    19ea:	b082      	sub	sp, #8
    19ec:	af00      	add	r7, sp, #0
    19ee:	0002      	movs	r2, r0
    19f0:	6039      	str	r1, [r7, #0]
    19f2:	1dfb      	adds	r3, r7, #7
    19f4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    19f6:	1dfb      	adds	r3, r7, #7
    19f8:	781b      	ldrb	r3, [r3, #0]
    19fa:	2b01      	cmp	r3, #1
    19fc:	d00a      	beq.n	1a14 <system_apb_clock_set_mask+0x2c>
    19fe:	2b02      	cmp	r3, #2
    1a00:	d00f      	beq.n	1a22 <system_apb_clock_set_mask+0x3a>
    1a02:	2b00      	cmp	r3, #0
    1a04:	d114      	bne.n	1a30 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    1a06:	4b0e      	ldr	r3, [pc, #56]	; (1a40 <system_apb_clock_set_mask+0x58>)
    1a08:	4a0d      	ldr	r2, [pc, #52]	; (1a40 <system_apb_clock_set_mask+0x58>)
    1a0a:	6991      	ldr	r1, [r2, #24]
    1a0c:	683a      	ldr	r2, [r7, #0]
    1a0e:	430a      	orrs	r2, r1
    1a10:	619a      	str	r2, [r3, #24]
			break;
    1a12:	e00f      	b.n	1a34 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    1a14:	4b0a      	ldr	r3, [pc, #40]	; (1a40 <system_apb_clock_set_mask+0x58>)
    1a16:	4a0a      	ldr	r2, [pc, #40]	; (1a40 <system_apb_clock_set_mask+0x58>)
    1a18:	69d1      	ldr	r1, [r2, #28]
    1a1a:	683a      	ldr	r2, [r7, #0]
    1a1c:	430a      	orrs	r2, r1
    1a1e:	61da      	str	r2, [r3, #28]
			break;
    1a20:	e008      	b.n	1a34 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    1a22:	4b07      	ldr	r3, [pc, #28]	; (1a40 <system_apb_clock_set_mask+0x58>)
    1a24:	4a06      	ldr	r2, [pc, #24]	; (1a40 <system_apb_clock_set_mask+0x58>)
    1a26:	6a11      	ldr	r1, [r2, #32]
    1a28:	683a      	ldr	r2, [r7, #0]
    1a2a:	430a      	orrs	r2, r1
    1a2c:	621a      	str	r2, [r3, #32]
			break;
    1a2e:	e001      	b.n	1a34 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    1a30:	2317      	movs	r3, #23
    1a32:	e000      	b.n	1a36 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    1a34:	2300      	movs	r3, #0
}
    1a36:	0018      	movs	r0, r3
    1a38:	46bd      	mov	sp, r7
    1a3a:	b002      	add	sp, #8
    1a3c:	bd80      	pop	{r7, pc}
    1a3e:	46c0      	nop			; (mov r8, r8)
    1a40:	40000400 	.word	0x40000400

00001a44 <system_pinmux_get_config_defaults>:
{
    1a44:	b580      	push	{r7, lr}
    1a46:	b082      	sub	sp, #8
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1a4c:	687b      	ldr	r3, [r7, #4]
    1a4e:	2280      	movs	r2, #128	; 0x80
    1a50:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1a52:	687b      	ldr	r3, [r7, #4]
    1a54:	2200      	movs	r2, #0
    1a56:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1a58:	687b      	ldr	r3, [r7, #4]
    1a5a:	2201      	movs	r2, #1
    1a5c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1a5e:	687b      	ldr	r3, [r7, #4]
    1a60:	2200      	movs	r2, #0
    1a62:	70da      	strb	r2, [r3, #3]
}
    1a64:	46c0      	nop			; (mov r8, r8)
    1a66:	46bd      	mov	sp, r7
    1a68:	b002      	add	sp, #8
    1a6a:	bd80      	pop	{r7, pc}

00001a6c <system_is_debugger_present>:
{
    1a6c:	b580      	push	{r7, lr}
    1a6e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1a70:	4b05      	ldr	r3, [pc, #20]	; (1a88 <system_is_debugger_present+0x1c>)
    1a72:	789b      	ldrb	r3, [r3, #2]
    1a74:	b2db      	uxtb	r3, r3
    1a76:	001a      	movs	r2, r3
    1a78:	2302      	movs	r3, #2
    1a7a:	4013      	ands	r3, r2
    1a7c:	1e5a      	subs	r2, r3, #1
    1a7e:	4193      	sbcs	r3, r2
    1a80:	b2db      	uxtb	r3, r3
}
    1a82:	0018      	movs	r0, r3
    1a84:	46bd      	mov	sp, r7
    1a86:	bd80      	pop	{r7, pc}
    1a88:	41002000 	.word	0x41002000

00001a8c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    1a8c:	b580      	push	{r7, lr}
    1a8e:	b084      	sub	sp, #16
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1a94:	687b      	ldr	r3, [r7, #4]
    1a96:	681b      	ldr	r3, [r3, #0]
    1a98:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1a9a:	68fb      	ldr	r3, [r7, #12]
    1a9c:	69db      	ldr	r3, [r3, #28]
    1a9e:	1e5a      	subs	r2, r3, #1
    1aa0:	4193      	sbcs	r3, r2
    1aa2:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    1aa4:	0018      	movs	r0, r3
    1aa6:	46bd      	mov	sp, r7
    1aa8:	b004      	add	sp, #16
    1aaa:	bd80      	pop	{r7, pc}

00001aac <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    1aac:	b580      	push	{r7, lr}
    1aae:	b082      	sub	sp, #8
    1ab0:	af00      	add	r7, sp, #0
    1ab2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1ab4:	46c0      	nop			; (mov r8, r8)
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	0018      	movs	r0, r3
    1aba:	4b04      	ldr	r3, [pc, #16]	; (1acc <_usart_wait_for_sync+0x20>)
    1abc:	4798      	blx	r3
    1abe:	1e03      	subs	r3, r0, #0
    1ac0:	d1f9      	bne.n	1ab6 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    1ac2:	46c0      	nop			; (mov r8, r8)
    1ac4:	46bd      	mov	sp, r7
    1ac6:	b002      	add	sp, #8
    1ac8:	bd80      	pop	{r7, pc}
    1aca:	46c0      	nop			; (mov r8, r8)
    1acc:	00001a8d 	.word	0x00001a8d

00001ad0 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    1ad0:	b5b0      	push	{r4, r5, r7, lr}
    1ad2:	b08c      	sub	sp, #48	; 0x30
    1ad4:	af02      	add	r7, sp, #8
    1ad6:	6078      	str	r0, [r7, #4]
    1ad8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ada:	687b      	ldr	r3, [r7, #4]
    1adc:	681b      	ldr	r3, [r3, #0]
    1ade:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	681b      	ldr	r3, [r3, #0]
    1ae4:	0018      	movs	r0, r3
    1ae6:	4bab      	ldr	r3, [pc, #684]	; (1d94 <_usart_set_config+0x2c4>)
    1ae8:	4798      	blx	r3
    1aea:	0003      	movs	r3, r0
    1aec:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1aee:	697b      	ldr	r3, [r7, #20]
    1af0:	3314      	adds	r3, #20
    1af2:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    1af4:	2300      	movs	r3, #0
    1af6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    1af8:	2300      	movs	r3, #0
    1afa:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    1afc:	230a      	movs	r3, #10
    1afe:	18fb      	adds	r3, r7, r3
    1b00:	2200      	movs	r2, #0
    1b02:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1b04:	231f      	movs	r3, #31
    1b06:	18fb      	adds	r3, r7, r3
    1b08:	2200      	movs	r2, #0
    1b0a:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1b0c:	231e      	movs	r3, #30
    1b0e:	18fb      	adds	r3, r7, r3
    1b10:	2210      	movs	r2, #16
    1b12:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    1b14:	683b      	ldr	r3, [r7, #0]
    1b16:	8a1b      	ldrh	r3, [r3, #16]
    1b18:	2280      	movs	r2, #128	; 0x80
    1b1a:	01d2      	lsls	r2, r2, #7
    1b1c:	4293      	cmp	r3, r2
    1b1e:	d01c      	beq.n	1b5a <_usart_set_config+0x8a>
    1b20:	2280      	movs	r2, #128	; 0x80
    1b22:	01d2      	lsls	r2, r2, #7
    1b24:	4293      	cmp	r3, r2
    1b26:	dc06      	bgt.n	1b36 <_usart_set_config+0x66>
    1b28:	2b00      	cmp	r3, #0
    1b2a:	d00d      	beq.n	1b48 <_usart_set_config+0x78>
    1b2c:	2280      	movs	r2, #128	; 0x80
    1b2e:	0192      	lsls	r2, r2, #6
    1b30:	4293      	cmp	r3, r2
    1b32:	d024      	beq.n	1b7e <_usart_set_config+0xae>
    1b34:	e035      	b.n	1ba2 <_usart_set_config+0xd2>
    1b36:	22c0      	movs	r2, #192	; 0xc0
    1b38:	01d2      	lsls	r2, r2, #7
    1b3a:	4293      	cmp	r3, r2
    1b3c:	d028      	beq.n	1b90 <_usart_set_config+0xc0>
    1b3e:	2280      	movs	r2, #128	; 0x80
    1b40:	0212      	lsls	r2, r2, #8
    1b42:	4293      	cmp	r3, r2
    1b44:	d012      	beq.n	1b6c <_usart_set_config+0x9c>
    1b46:	e02c      	b.n	1ba2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1b48:	231f      	movs	r3, #31
    1b4a:	18fb      	adds	r3, r7, r3
    1b4c:	2200      	movs	r2, #0
    1b4e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1b50:	231e      	movs	r3, #30
    1b52:	18fb      	adds	r3, r7, r3
    1b54:	2210      	movs	r2, #16
    1b56:	701a      	strb	r2, [r3, #0]
			break;
    1b58:	e023      	b.n	1ba2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1b5a:	231f      	movs	r3, #31
    1b5c:	18fb      	adds	r3, r7, r3
    1b5e:	2200      	movs	r2, #0
    1b60:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1b62:	231e      	movs	r3, #30
    1b64:	18fb      	adds	r3, r7, r3
    1b66:	2208      	movs	r2, #8
    1b68:	701a      	strb	r2, [r3, #0]
			break;
    1b6a:	e01a      	b.n	1ba2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1b6c:	231f      	movs	r3, #31
    1b6e:	18fb      	adds	r3, r7, r3
    1b70:	2200      	movs	r2, #0
    1b72:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1b74:	231e      	movs	r3, #30
    1b76:	18fb      	adds	r3, r7, r3
    1b78:	2203      	movs	r2, #3
    1b7a:	701a      	strb	r2, [r3, #0]
			break;
    1b7c:	e011      	b.n	1ba2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1b7e:	231f      	movs	r3, #31
    1b80:	18fb      	adds	r3, r7, r3
    1b82:	2201      	movs	r2, #1
    1b84:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1b86:	231e      	movs	r3, #30
    1b88:	18fb      	adds	r3, r7, r3
    1b8a:	2210      	movs	r2, #16
    1b8c:	701a      	strb	r2, [r3, #0]
			break;
    1b8e:	e008      	b.n	1ba2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1b90:	231f      	movs	r3, #31
    1b92:	18fb      	adds	r3, r7, r3
    1b94:	2201      	movs	r2, #1
    1b96:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1b98:	231e      	movs	r3, #30
    1b9a:	18fb      	adds	r3, r7, r3
    1b9c:	2208      	movs	r2, #8
    1b9e:	701a      	strb	r2, [r3, #0]
			break;
    1ba0:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1ba2:	683b      	ldr	r3, [r7, #0]
    1ba4:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    1ba6:	683b      	ldr	r3, [r7, #0]
    1ba8:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    1baa:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1bac:	683b      	ldr	r3, [r7, #0]
    1bae:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    1bb0:	4313      	orrs	r3, r2
		config->sample_rate |
    1bb2:	683a      	ldr	r2, [r7, #0]
    1bb4:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    1bb6:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1bb8:	683a      	ldr	r2, [r7, #0]
    1bba:	7e12      	ldrb	r2, [r2, #24]
    1bbc:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    1bbe:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1bc0:	683a      	ldr	r2, [r7, #0]
    1bc2:	2126      	movs	r1, #38	; 0x26
    1bc4:	5c52      	ldrb	r2, [r2, r1]
    1bc6:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    1bc8:	4313      	orrs	r3, r2
    1bca:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    1bcc:	231d      	movs	r3, #29
    1bce:	18fb      	adds	r3, r7, r3
    1bd0:	2200      	movs	r2, #0
    1bd2:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    1bd4:	683b      	ldr	r3, [r7, #0]
    1bd6:	685b      	ldr	r3, [r3, #4]
    1bd8:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1bda:	68fb      	ldr	r3, [r7, #12]
    1bdc:	2b00      	cmp	r3, #0
    1bde:	d01e      	beq.n	1c1e <_usart_set_config+0x14e>
    1be0:	2280      	movs	r2, #128	; 0x80
    1be2:	0552      	lsls	r2, r2, #21
    1be4:	4293      	cmp	r3, r2
    1be6:	d14f      	bne.n	1c88 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    1be8:	683b      	ldr	r3, [r7, #0]
    1bea:	2227      	movs	r2, #39	; 0x27
    1bec:	5c9b      	ldrb	r3, [r3, r2]
    1bee:	2201      	movs	r2, #1
    1bf0:	4053      	eors	r3, r2
    1bf2:	b2db      	uxtb	r3, r3
    1bf4:	2b00      	cmp	r3, #0
    1bf6:	d046      	beq.n	1c86 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1bf8:	683b      	ldr	r3, [r7, #0]
    1bfa:	6a1d      	ldr	r5, [r3, #32]
    1bfc:	693b      	ldr	r3, [r7, #16]
    1bfe:	b2db      	uxtb	r3, r3
    1c00:	0018      	movs	r0, r3
    1c02:	4b65      	ldr	r3, [pc, #404]	; (1d98 <_usart_set_config+0x2c8>)
    1c04:	4798      	blx	r3
    1c06:	0001      	movs	r1, r0
    1c08:	231d      	movs	r3, #29
    1c0a:	18fc      	adds	r4, r7, r3
    1c0c:	230a      	movs	r3, #10
    1c0e:	18fb      	adds	r3, r7, r3
    1c10:	001a      	movs	r2, r3
    1c12:	0028      	movs	r0, r5
    1c14:	4b61      	ldr	r3, [pc, #388]	; (1d9c <_usart_set_config+0x2cc>)
    1c16:	4798      	blx	r3
    1c18:	0003      	movs	r3, r0
    1c1a:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    1c1c:	e033      	b.n	1c86 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    1c1e:	683b      	ldr	r3, [r7, #0]
    1c20:	2227      	movs	r2, #39	; 0x27
    1c22:	5c9b      	ldrb	r3, [r3, r2]
    1c24:	2b00      	cmp	r3, #0
    1c26:	d014      	beq.n	1c52 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1c28:	683b      	ldr	r3, [r7, #0]
    1c2a:	6a18      	ldr	r0, [r3, #32]
    1c2c:	683b      	ldr	r3, [r7, #0]
    1c2e:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    1c30:	231d      	movs	r3, #29
    1c32:	18fc      	adds	r4, r7, r3
    1c34:	231f      	movs	r3, #31
    1c36:	18fb      	adds	r3, r7, r3
    1c38:	781d      	ldrb	r5, [r3, #0]
    1c3a:	230a      	movs	r3, #10
    1c3c:	18fa      	adds	r2, r7, r3
    1c3e:	231e      	movs	r3, #30
    1c40:	18fb      	adds	r3, r7, r3
    1c42:	781b      	ldrb	r3, [r3, #0]
    1c44:	9300      	str	r3, [sp, #0]
    1c46:	002b      	movs	r3, r5
    1c48:	4d55      	ldr	r5, [pc, #340]	; (1da0 <_usart_set_config+0x2d0>)
    1c4a:	47a8      	blx	r5
    1c4c:	0003      	movs	r3, r0
    1c4e:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    1c50:	e01a      	b.n	1c88 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    1c52:	683b      	ldr	r3, [r7, #0]
    1c54:	6a1d      	ldr	r5, [r3, #32]
    1c56:	693b      	ldr	r3, [r7, #16]
    1c58:	b2db      	uxtb	r3, r3
    1c5a:	0018      	movs	r0, r3
    1c5c:	4b4e      	ldr	r3, [pc, #312]	; (1d98 <_usart_set_config+0x2c8>)
    1c5e:	4798      	blx	r3
				status_code =
    1c60:	231d      	movs	r3, #29
    1c62:	18fc      	adds	r4, r7, r3
    1c64:	231f      	movs	r3, #31
    1c66:	18fb      	adds	r3, r7, r3
    1c68:	7819      	ldrb	r1, [r3, #0]
    1c6a:	230a      	movs	r3, #10
    1c6c:	18fa      	adds	r2, r7, r3
    1c6e:	231e      	movs	r3, #30
    1c70:	18fb      	adds	r3, r7, r3
    1c72:	781b      	ldrb	r3, [r3, #0]
    1c74:	9300      	str	r3, [sp, #0]
    1c76:	000b      	movs	r3, r1
    1c78:	0001      	movs	r1, r0
    1c7a:	0028      	movs	r0, r5
    1c7c:	4d48      	ldr	r5, [pc, #288]	; (1da0 <_usart_set_config+0x2d0>)
    1c7e:	47a8      	blx	r5
    1c80:	0003      	movs	r3, r0
    1c82:	7023      	strb	r3, [r4, #0]
			break;
    1c84:	e000      	b.n	1c88 <_usart_set_config+0x1b8>
			break;
    1c86:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    1c88:	231d      	movs	r3, #29
    1c8a:	18fb      	adds	r3, r7, r3
    1c8c:	781b      	ldrb	r3, [r3, #0]
    1c8e:	2b00      	cmp	r3, #0
    1c90:	d003      	beq.n	1c9a <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    1c92:	231d      	movs	r3, #29
    1c94:	18fb      	adds	r3, r7, r3
    1c96:	781b      	ldrb	r3, [r3, #0]
    1c98:	e077      	b.n	1d8a <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1c9a:	683b      	ldr	r3, [r7, #0]
    1c9c:	7e5b      	ldrb	r3, [r3, #25]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d003      	beq.n	1caa <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1ca2:	683b      	ldr	r3, [r7, #0]
    1ca4:	7e9a      	ldrb	r2, [r3, #26]
    1ca6:	69bb      	ldr	r3, [r7, #24]
    1ca8:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1caa:	687b      	ldr	r3, [r7, #4]
    1cac:	0018      	movs	r0, r3
    1cae:	4b3d      	ldr	r3, [pc, #244]	; (1da4 <_usart_set_config+0x2d4>)
    1cb0:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    1cb2:	230a      	movs	r3, #10
    1cb4:	18fb      	adds	r3, r7, r3
    1cb6:	881a      	ldrh	r2, [r3, #0]
    1cb8:	69bb      	ldr	r3, [r7, #24]
    1cba:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    1cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1cbe:	68fb      	ldr	r3, [r7, #12]
    1cc0:	4313      	orrs	r3, r2
    1cc2:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    1cc4:	683b      	ldr	r3, [r7, #0]
    1cc6:	2227      	movs	r2, #39	; 0x27
    1cc8:	5c9b      	ldrb	r3, [r3, r2]
    1cca:	2201      	movs	r2, #1
    1ccc:	4053      	eors	r3, r2
    1cce:	b2db      	uxtb	r3, r3
    1cd0:	2b00      	cmp	r3, #0
    1cd2:	d003      	beq.n	1cdc <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1cd6:	2204      	movs	r2, #4
    1cd8:	4313      	orrs	r3, r2
    1cda:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1cdc:	683b      	ldr	r3, [r7, #0]
    1cde:	7e5b      	ldrb	r3, [r3, #25]
    1ce0:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1ce2:	683b      	ldr	r3, [r7, #0]
    1ce4:	7f1b      	ldrb	r3, [r3, #28]
    1ce6:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1ce8:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1cea:	683b      	ldr	r3, [r7, #0]
    1cec:	7f5b      	ldrb	r3, [r3, #29]
    1cee:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1cf0:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1cf2:	683b      	ldr	r3, [r7, #0]
    1cf4:	2124      	movs	r1, #36	; 0x24
    1cf6:	5c5b      	ldrb	r3, [r3, r1]
    1cf8:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1cfa:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1cfc:	683b      	ldr	r3, [r7, #0]
    1cfe:	2125      	movs	r1, #37	; 0x25
    1d00:	5c5b      	ldrb	r3, [r3, r1]
    1d02:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1d04:	4313      	orrs	r3, r2
	ctrlb =  
    1d06:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    1d08:	683b      	ldr	r3, [r7, #0]
    1d0a:	7a9b      	ldrb	r3, [r3, #10]
    1d0c:	001a      	movs	r2, r3
    1d0e:	6a3b      	ldr	r3, [r7, #32]
    1d10:	4313      	orrs	r3, r2
    1d12:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    1d14:	683b      	ldr	r3, [r7, #0]
    1d16:	7adb      	ldrb	r3, [r3, #11]
    1d18:	001a      	movs	r2, r3
    1d1a:	6a3b      	ldr	r3, [r7, #32]
    1d1c:	4313      	orrs	r3, r2
    1d1e:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1d20:	683b      	ldr	r3, [r7, #0]
    1d22:	891b      	ldrh	r3, [r3, #8]
    1d24:	2bff      	cmp	r3, #255	; 0xff
    1d26:	d00b      	beq.n	1d40 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1d2a:	2280      	movs	r2, #128	; 0x80
    1d2c:	0452      	lsls	r2, r2, #17
    1d2e:	4313      	orrs	r3, r2
    1d30:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    1d32:	683b      	ldr	r3, [r7, #0]
    1d34:	891b      	ldrh	r3, [r3, #8]
    1d36:	001a      	movs	r2, r3
    1d38:	6a3b      	ldr	r3, [r7, #32]
    1d3a:	4313      	orrs	r3, r2
    1d3c:	623b      	str	r3, [r7, #32]
    1d3e:	e008      	b.n	1d52 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1d40:	683b      	ldr	r3, [r7, #0]
    1d42:	7edb      	ldrb	r3, [r3, #27]
    1d44:	2b00      	cmp	r3, #0
    1d46:	d004      	beq.n	1d52 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1d4a:	2280      	movs	r2, #128	; 0x80
    1d4c:	04d2      	lsls	r2, r2, #19
    1d4e:	4313      	orrs	r3, r2
    1d50:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1d52:	683b      	ldr	r3, [r7, #0]
    1d54:	222c      	movs	r2, #44	; 0x2c
    1d56:	5c9b      	ldrb	r3, [r3, r2]
    1d58:	2b00      	cmp	r3, #0
    1d5a:	d103      	bne.n	1d64 <_usart_set_config+0x294>
    1d5c:	4b12      	ldr	r3, [pc, #72]	; (1da8 <_usart_set_config+0x2d8>)
    1d5e:	4798      	blx	r3
    1d60:	1e03      	subs	r3, r0, #0
    1d62:	d003      	beq.n	1d6c <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1d66:	2280      	movs	r2, #128	; 0x80
    1d68:	4313      	orrs	r3, r2
    1d6a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1d6c:	687b      	ldr	r3, [r7, #4]
    1d6e:	0018      	movs	r0, r3
    1d70:	4b0c      	ldr	r3, [pc, #48]	; (1da4 <_usart_set_config+0x2d4>)
    1d72:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1d74:	69bb      	ldr	r3, [r7, #24]
    1d76:	6a3a      	ldr	r2, [r7, #32]
    1d78:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1d7a:	687b      	ldr	r3, [r7, #4]
    1d7c:	0018      	movs	r0, r3
    1d7e:	4b09      	ldr	r3, [pc, #36]	; (1da4 <_usart_set_config+0x2d4>)
    1d80:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    1d82:	69bb      	ldr	r3, [r7, #24]
    1d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1d86:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    1d88:	2300      	movs	r3, #0
}
    1d8a:	0018      	movs	r0, r3
    1d8c:	46bd      	mov	sp, r7
    1d8e:	b00a      	add	sp, #40	; 0x28
    1d90:	bdb0      	pop	{r4, r5, r7, pc}
    1d92:	46c0      	nop			; (mov r8, r8)
    1d94:	00001825 	.word	0x00001825
    1d98:	00002dc5 	.word	0x00002dc5
    1d9c:	0000139f 	.word	0x0000139f
    1da0:	0000141d 	.word	0x0000141d
    1da4:	00001aad 	.word	0x00001aad
    1da8:	00001a6d 	.word	0x00001a6d

00001dac <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1dac:	b590      	push	{r4, r7, lr}
    1dae:	b093      	sub	sp, #76	; 0x4c
    1db0:	af00      	add	r7, sp, #0
    1db2:	60f8      	str	r0, [r7, #12]
    1db4:	60b9      	str	r1, [r7, #8]
    1db6:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    1db8:	233b      	movs	r3, #59	; 0x3b
    1dba:	18fb      	adds	r3, r7, r3
    1dbc:	2200      	movs	r2, #0
    1dbe:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1dc0:	68fb      	ldr	r3, [r7, #12]
    1dc2:	68ba      	ldr	r2, [r7, #8]
    1dc4:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1dc6:	68fb      	ldr	r3, [r7, #12]
    1dc8:	681b      	ldr	r3, [r3, #0]
    1dca:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1dcc:	68fb      	ldr	r3, [r7, #12]
    1dce:	681b      	ldr	r3, [r3, #0]
    1dd0:	0018      	movs	r0, r3
    1dd2:	4b86      	ldr	r3, [pc, #536]	; (1fec <usart_init+0x240>)
    1dd4:	4798      	blx	r3
    1dd6:	0003      	movs	r3, r0
    1dd8:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1ddc:	3302      	adds	r3, #2
    1dde:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1de2:	3314      	adds	r3, #20
    1de4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1de8:	681b      	ldr	r3, [r3, #0]
    1dea:	2201      	movs	r2, #1
    1dec:	4013      	ands	r3, r2
    1dee:	d001      	beq.n	1df4 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1df0:	2305      	movs	r3, #5
    1df2:	e0f6      	b.n	1fe2 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1df6:	681b      	ldr	r3, [r3, #0]
    1df8:	2202      	movs	r2, #2
    1dfa:	4013      	ands	r3, r2
    1dfc:	d001      	beq.n	1e02 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    1dfe:	231c      	movs	r3, #28
    1e00:	e0ef      	b.n	1fe2 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1e02:	2201      	movs	r2, #1
    1e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1e06:	409a      	lsls	r2, r3
    1e08:	0013      	movs	r3, r2
    1e0a:	0019      	movs	r1, r3
    1e0c:	2002      	movs	r0, #2
    1e0e:	4b78      	ldr	r3, [pc, #480]	; (1ff0 <usart_init+0x244>)
    1e10:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1e12:	2324      	movs	r3, #36	; 0x24
    1e14:	18fb      	adds	r3, r7, r3
    1e16:	0018      	movs	r0, r3
    1e18:	4b76      	ldr	r3, [pc, #472]	; (1ff4 <usart_init+0x248>)
    1e1a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1e1c:	687b      	ldr	r3, [r7, #4]
    1e1e:	222d      	movs	r2, #45	; 0x2d
    1e20:	5c9a      	ldrb	r2, [r3, r2]
    1e22:	2324      	movs	r3, #36	; 0x24
    1e24:	18fb      	adds	r3, r7, r3
    1e26:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1e2a:	b2db      	uxtb	r3, r3
    1e2c:	2224      	movs	r2, #36	; 0x24
    1e2e:	18ba      	adds	r2, r7, r2
    1e30:	0011      	movs	r1, r2
    1e32:	0018      	movs	r0, r3
    1e34:	4b70      	ldr	r3, [pc, #448]	; (1ff8 <usart_init+0x24c>)
    1e36:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1e3a:	b2db      	uxtb	r3, r3
    1e3c:	0018      	movs	r0, r3
    1e3e:	4b6f      	ldr	r3, [pc, #444]	; (1ffc <usart_init+0x250>)
    1e40:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1e42:	687b      	ldr	r3, [r7, #4]
    1e44:	222d      	movs	r2, #45	; 0x2d
    1e46:	5c9b      	ldrb	r3, [r3, r2]
    1e48:	2100      	movs	r1, #0
    1e4a:	0018      	movs	r0, r3
    1e4c:	4b6c      	ldr	r3, [pc, #432]	; (2000 <STACK_SIZE>)
    1e4e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    1e50:	687b      	ldr	r3, [r7, #4]
    1e52:	7ada      	ldrb	r2, [r3, #11]
    1e54:	68fb      	ldr	r3, [r7, #12]
    1e56:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    1e58:	687b      	ldr	r3, [r7, #4]
    1e5a:	2224      	movs	r2, #36	; 0x24
    1e5c:	5c9a      	ldrb	r2, [r3, r2]
    1e5e:	68fb      	ldr	r3, [r7, #12]
    1e60:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1e62:	687b      	ldr	r3, [r7, #4]
    1e64:	2225      	movs	r2, #37	; 0x25
    1e66:	5c9a      	ldrb	r2, [r3, r2]
    1e68:	68fb      	ldr	r3, [r7, #12]
    1e6a:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1e6c:	687b      	ldr	r3, [r7, #4]
    1e6e:	7eda      	ldrb	r2, [r3, #27]
    1e70:	68fb      	ldr	r3, [r7, #12]
    1e72:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1e74:	687b      	ldr	r3, [r7, #4]
    1e76:	7f1a      	ldrb	r2, [r3, #28]
    1e78:	68fb      	ldr	r3, [r7, #12]
    1e7a:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    1e7c:	233b      	movs	r3, #59	; 0x3b
    1e7e:	18fc      	adds	r4, r7, r3
    1e80:	687a      	ldr	r2, [r7, #4]
    1e82:	68fb      	ldr	r3, [r7, #12]
    1e84:	0011      	movs	r1, r2
    1e86:	0018      	movs	r0, r3
    1e88:	4b5e      	ldr	r3, [pc, #376]	; (2004 <STACK_SIZE+0x4>)
    1e8a:	4798      	blx	r3
    1e8c:	0003      	movs	r3, r0
    1e8e:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    1e90:	233b      	movs	r3, #59	; 0x3b
    1e92:	18fb      	adds	r3, r7, r3
    1e94:	781b      	ldrb	r3, [r3, #0]
    1e96:	2b00      	cmp	r3, #0
    1e98:	d003      	beq.n	1ea2 <usart_init+0xf6>
		return status_code;
    1e9a:	233b      	movs	r3, #59	; 0x3b
    1e9c:	18fb      	adds	r3, r7, r3
    1e9e:	781b      	ldrb	r3, [r3, #0]
    1ea0:	e09f      	b.n	1fe2 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    1ea2:	2320      	movs	r3, #32
    1ea4:	18fb      	adds	r3, r7, r3
    1ea6:	0018      	movs	r0, r3
    1ea8:	4b57      	ldr	r3, [pc, #348]	; (2008 <STACK_SIZE+0x8>)
    1eaa:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1eac:	2320      	movs	r3, #32
    1eae:	18fb      	adds	r3, r7, r3
    1eb0:	2200      	movs	r2, #0
    1eb2:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1eb4:	2320      	movs	r3, #32
    1eb6:	18fb      	adds	r3, r7, r3
    1eb8:	2200      	movs	r2, #0
    1eba:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    1ebc:	687b      	ldr	r3, [r7, #4]
    1ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    1ec0:	2310      	movs	r3, #16
    1ec2:	18fb      	adds	r3, r7, r3
    1ec4:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    1ec6:	687b      	ldr	r3, [r7, #4]
    1ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    1eca:	2310      	movs	r3, #16
    1ecc:	18fb      	adds	r3, r7, r3
    1ece:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    1ed0:	687b      	ldr	r3, [r7, #4]
    1ed2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    1ed4:	2310      	movs	r3, #16
    1ed6:	18fb      	adds	r3, r7, r3
    1ed8:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    1eda:	687b      	ldr	r3, [r7, #4]
    1edc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    1ede:	2310      	movs	r3, #16
    1ee0:	18fb      	adds	r3, r7, r3
    1ee2:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1ee4:	2347      	movs	r3, #71	; 0x47
    1ee6:	18fb      	adds	r3, r7, r3
    1ee8:	2200      	movs	r2, #0
    1eea:	701a      	strb	r2, [r3, #0]
    1eec:	e02c      	b.n	1f48 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1eee:	2347      	movs	r3, #71	; 0x47
    1ef0:	18fb      	adds	r3, r7, r3
    1ef2:	781a      	ldrb	r2, [r3, #0]
    1ef4:	2310      	movs	r3, #16
    1ef6:	18fb      	adds	r3, r7, r3
    1ef8:	0092      	lsls	r2, r2, #2
    1efa:	58d3      	ldr	r3, [r2, r3]
    1efc:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    1efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1f00:	2b00      	cmp	r3, #0
    1f02:	d109      	bne.n	1f18 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1f04:	2347      	movs	r3, #71	; 0x47
    1f06:	18fb      	adds	r3, r7, r3
    1f08:	781a      	ldrb	r2, [r3, #0]
    1f0a:	68bb      	ldr	r3, [r7, #8]
    1f0c:	0011      	movs	r1, r2
    1f0e:	0018      	movs	r0, r3
    1f10:	4b3e      	ldr	r3, [pc, #248]	; (200c <STACK_SIZE+0xc>)
    1f12:	4798      	blx	r3
    1f14:	0003      	movs	r3, r0
    1f16:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1f1a:	3301      	adds	r3, #1
    1f1c:	d00d      	beq.n	1f3a <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1f20:	b2da      	uxtb	r2, r3
    1f22:	2320      	movs	r3, #32
    1f24:	18fb      	adds	r3, r7, r3
    1f26:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1f2a:	0c1b      	lsrs	r3, r3, #16
    1f2c:	b2db      	uxtb	r3, r3
    1f2e:	2220      	movs	r2, #32
    1f30:	18ba      	adds	r2, r7, r2
    1f32:	0011      	movs	r1, r2
    1f34:	0018      	movs	r0, r3
    1f36:	4b36      	ldr	r3, [pc, #216]	; (2010 <STACK_SIZE+0x10>)
    1f38:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    1f3a:	2347      	movs	r3, #71	; 0x47
    1f3c:	18fb      	adds	r3, r7, r3
    1f3e:	781a      	ldrb	r2, [r3, #0]
    1f40:	2347      	movs	r3, #71	; 0x47
    1f42:	18fb      	adds	r3, r7, r3
    1f44:	3201      	adds	r2, #1
    1f46:	701a      	strb	r2, [r3, #0]
    1f48:	2347      	movs	r3, #71	; 0x47
    1f4a:	18fb      	adds	r3, r7, r3
    1f4c:	781b      	ldrb	r3, [r3, #0]
    1f4e:	2b03      	cmp	r3, #3
    1f50:	d9cd      	bls.n	1eee <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    1f52:	2300      	movs	r3, #0
    1f54:	63fb      	str	r3, [r7, #60]	; 0x3c
    1f56:	e00a      	b.n	1f6e <usart_init+0x1c2>
		module->callback[i]            = NULL;
    1f58:	68fa      	ldr	r2, [r7, #12]
    1f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f5c:	3302      	adds	r3, #2
    1f5e:	009b      	lsls	r3, r3, #2
    1f60:	18d3      	adds	r3, r2, r3
    1f62:	3304      	adds	r3, #4
    1f64:	2200      	movs	r2, #0
    1f66:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    1f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f6a:	3301      	adds	r3, #1
    1f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    1f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f70:	2b05      	cmp	r3, #5
    1f72:	d9f1      	bls.n	1f58 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    1f74:	68fb      	ldr	r3, [r7, #12]
    1f76:	2200      	movs	r2, #0
    1f78:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1f7a:	68fb      	ldr	r3, [r7, #12]
    1f7c:	2200      	movs	r2, #0
    1f7e:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1f80:	68fb      	ldr	r3, [r7, #12]
    1f82:	2200      	movs	r2, #0
    1f84:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1f86:	68fb      	ldr	r3, [r7, #12]
    1f88:	2200      	movs	r2, #0
    1f8a:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1f8c:	68fb      	ldr	r3, [r7, #12]
    1f8e:	2230      	movs	r2, #48	; 0x30
    1f90:	2100      	movs	r1, #0
    1f92:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    1f94:	68fb      	ldr	r3, [r7, #12]
    1f96:	2231      	movs	r2, #49	; 0x31
    1f98:	2100      	movs	r1, #0
    1f9a:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    1f9c:	68fb      	ldr	r3, [r7, #12]
    1f9e:	2232      	movs	r2, #50	; 0x32
    1fa0:	2100      	movs	r1, #0
    1fa2:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    1fa4:	68fb      	ldr	r3, [r7, #12]
    1fa6:	2233      	movs	r2, #51	; 0x33
    1fa8:	2100      	movs	r1, #0
    1faa:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1fac:	68fb      	ldr	r3, [r7, #12]
    1fae:	681b      	ldr	r3, [r3, #0]
    1fb0:	2227      	movs	r2, #39	; 0x27
    1fb2:	18bc      	adds	r4, r7, r2
    1fb4:	0018      	movs	r0, r3
    1fb6:	4b0d      	ldr	r3, [pc, #52]	; (1fec <usart_init+0x240>)
    1fb8:	4798      	blx	r3
    1fba:	0003      	movs	r3, r0
    1fbc:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1fbe:	4a15      	ldr	r2, [pc, #84]	; (2014 <STACK_SIZE+0x14>)
    1fc0:	2327      	movs	r3, #39	; 0x27
    1fc2:	18fb      	adds	r3, r7, r3
    1fc4:	781b      	ldrb	r3, [r3, #0]
    1fc6:	0011      	movs	r1, r2
    1fc8:	0018      	movs	r0, r3
    1fca:	4b13      	ldr	r3, [pc, #76]	; (2018 <STACK_SIZE+0x18>)
    1fcc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1fce:	2327      	movs	r3, #39	; 0x27
    1fd0:	18fb      	adds	r3, r7, r3
    1fd2:	781a      	ldrb	r2, [r3, #0]
    1fd4:	4b11      	ldr	r3, [pc, #68]	; (201c <STACK_SIZE+0x1c>)
    1fd6:	0092      	lsls	r2, r2, #2
    1fd8:	68f9      	ldr	r1, [r7, #12]
    1fda:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    1fdc:	233b      	movs	r3, #59	; 0x3b
    1fde:	18fb      	adds	r3, r7, r3
    1fe0:	781b      	ldrb	r3, [r3, #0]
}
    1fe2:	0018      	movs	r0, r3
    1fe4:	46bd      	mov	sp, r7
    1fe6:	b013      	add	sp, #76	; 0x4c
    1fe8:	bd90      	pop	{r4, r7, pc}
    1fea:	46c0      	nop			; (mov r8, r8)
    1fec:	00001825 	.word	0x00001825
    1ff0:	000019e9 	.word	0x000019e9
    1ff4:	000019d1 	.word	0x000019d1
    1ff8:	00002ca1 	.word	0x00002ca1
    1ffc:	00002ce5 	.word	0x00002ce5
    2000:	000015dd 	.word	0x000015dd
    2004:	00001ad1 	.word	0x00001ad1
    2008:	00001a45 	.word	0x00001a45
    200c:	00001669 	.word	0x00001669
    2010:	00002f8d 	.word	0x00002f8d
    2014:	000021b5 	.word	0x000021b5
    2018:	00001889 	.word	0x00001889
    201c:	2000010c 	.word	0x2000010c

00002020 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    2020:	b580      	push	{r7, lr}
    2022:	b084      	sub	sp, #16
    2024:	af00      	add	r7, sp, #0
    2026:	6078      	str	r0, [r7, #4]
    2028:	000a      	movs	r2, r1
    202a:	1cbb      	adds	r3, r7, #2
    202c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    202e:	687b      	ldr	r3, [r7, #4]
    2030:	681b      	ldr	r3, [r3, #0]
    2032:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2034:	687b      	ldr	r3, [r7, #4]
    2036:	79db      	ldrb	r3, [r3, #7]
    2038:	2201      	movs	r2, #1
    203a:	4053      	eors	r3, r2
    203c:	b2db      	uxtb	r3, r3
    203e:	2b00      	cmp	r3, #0
    2040:	d001      	beq.n	2046 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    2042:	231c      	movs	r3, #28
    2044:	e017      	b.n	2076 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    2046:	687b      	ldr	r3, [r7, #4]
    2048:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    204a:	b29b      	uxth	r3, r3
    204c:	2b00      	cmp	r3, #0
    204e:	d001      	beq.n	2054 <usart_write_wait+0x34>
		return STATUS_BUSY;
    2050:	2305      	movs	r3, #5
    2052:	e010      	b.n	2076 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2054:	687b      	ldr	r3, [r7, #4]
    2056:	0018      	movs	r0, r3
    2058:	4b09      	ldr	r3, [pc, #36]	; (2080 <usart_write_wait+0x60>)
    205a:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    205c:	68fb      	ldr	r3, [r7, #12]
    205e:	1cba      	adds	r2, r7, #2
    2060:	8812      	ldrh	r2, [r2, #0]
    2062:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2064:	46c0      	nop			; (mov r8, r8)
    2066:	68fb      	ldr	r3, [r7, #12]
    2068:	7e1b      	ldrb	r3, [r3, #24]
    206a:	b2db      	uxtb	r3, r3
    206c:	001a      	movs	r2, r3
    206e:	2302      	movs	r3, #2
    2070:	4013      	ands	r3, r2
    2072:	d0f8      	beq.n	2066 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    2074:	2300      	movs	r3, #0
}
    2076:	0018      	movs	r0, r3
    2078:	46bd      	mov	sp, r7
    207a:	b004      	add	sp, #16
    207c:	bd80      	pop	{r7, pc}
    207e:	46c0      	nop			; (mov r8, r8)
    2080:	00001aad 	.word	0x00001aad

00002084 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    2084:	b580      	push	{r7, lr}
    2086:	b084      	sub	sp, #16
    2088:	af00      	add	r7, sp, #0
    208a:	6078      	str	r0, [r7, #4]
    208c:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    208e:	687b      	ldr	r3, [r7, #4]
    2090:	681b      	ldr	r3, [r3, #0]
    2092:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2094:	687b      	ldr	r3, [r7, #4]
    2096:	799b      	ldrb	r3, [r3, #6]
    2098:	2201      	movs	r2, #1
    209a:	4053      	eors	r3, r2
    209c:	b2db      	uxtb	r3, r3
    209e:	2b00      	cmp	r3, #0
    20a0:	d001      	beq.n	20a6 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    20a2:	231c      	movs	r3, #28
    20a4:	e05e      	b.n	2164 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    20a6:	687b      	ldr	r3, [r7, #4]
    20a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    20aa:	b29b      	uxth	r3, r3
    20ac:	2b00      	cmp	r3, #0
    20ae:	d001      	beq.n	20b4 <usart_read_wait+0x30>
		return STATUS_BUSY;
    20b0:	2305      	movs	r3, #5
    20b2:	e057      	b.n	2164 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    20b4:	68fb      	ldr	r3, [r7, #12]
    20b6:	7e1b      	ldrb	r3, [r3, #24]
    20b8:	b2db      	uxtb	r3, r3
    20ba:	001a      	movs	r2, r3
    20bc:	2304      	movs	r3, #4
    20be:	4013      	ands	r3, r2
    20c0:	d101      	bne.n	20c6 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    20c2:	2305      	movs	r3, #5
    20c4:	e04e      	b.n	2164 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    20c6:	687b      	ldr	r3, [r7, #4]
    20c8:	0018      	movs	r0, r3
    20ca:	4b28      	ldr	r3, [pc, #160]	; (216c <usart_read_wait+0xe8>)
    20cc:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    20ce:	68fb      	ldr	r3, [r7, #12]
    20d0:	8b5b      	ldrh	r3, [r3, #26]
    20d2:	b29b      	uxth	r3, r3
    20d4:	b2da      	uxtb	r2, r3
    20d6:	230b      	movs	r3, #11
    20d8:	18fb      	adds	r3, r7, r3
    20da:	213f      	movs	r1, #63	; 0x3f
    20dc:	400a      	ands	r2, r1
    20de:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    20e0:	230b      	movs	r3, #11
    20e2:	18fb      	adds	r3, r7, r3
    20e4:	781b      	ldrb	r3, [r3, #0]
    20e6:	2b00      	cmp	r3, #0
    20e8:	d036      	beq.n	2158 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    20ea:	230b      	movs	r3, #11
    20ec:	18fb      	adds	r3, r7, r3
    20ee:	781b      	ldrb	r3, [r3, #0]
    20f0:	2202      	movs	r2, #2
    20f2:	4013      	ands	r3, r2
    20f4:	d004      	beq.n	2100 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    20f6:	68fb      	ldr	r3, [r7, #12]
    20f8:	2202      	movs	r2, #2
    20fa:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    20fc:	231a      	movs	r3, #26
    20fe:	e031      	b.n	2164 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2100:	230b      	movs	r3, #11
    2102:	18fb      	adds	r3, r7, r3
    2104:	781b      	ldrb	r3, [r3, #0]
    2106:	2204      	movs	r2, #4
    2108:	4013      	ands	r3, r2
    210a:	d004      	beq.n	2116 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    210c:	68fb      	ldr	r3, [r7, #12]
    210e:	2204      	movs	r2, #4
    2110:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    2112:	231e      	movs	r3, #30
    2114:	e026      	b.n	2164 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2116:	230b      	movs	r3, #11
    2118:	18fb      	adds	r3, r7, r3
    211a:	781b      	ldrb	r3, [r3, #0]
    211c:	2201      	movs	r2, #1
    211e:	4013      	ands	r3, r2
    2120:	d004      	beq.n	212c <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2122:	68fb      	ldr	r3, [r7, #12]
    2124:	2201      	movs	r2, #1
    2126:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    2128:	2313      	movs	r3, #19
    212a:	e01b      	b.n	2164 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    212c:	230b      	movs	r3, #11
    212e:	18fb      	adds	r3, r7, r3
    2130:	781b      	ldrb	r3, [r3, #0]
    2132:	2210      	movs	r2, #16
    2134:	4013      	ands	r3, r2
    2136:	d004      	beq.n	2142 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2138:	68fb      	ldr	r3, [r7, #12]
    213a:	2210      	movs	r2, #16
    213c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    213e:	2342      	movs	r3, #66	; 0x42
    2140:	e010      	b.n	2164 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2142:	230b      	movs	r3, #11
    2144:	18fb      	adds	r3, r7, r3
    2146:	781b      	ldrb	r3, [r3, #0]
    2148:	2220      	movs	r2, #32
    214a:	4013      	ands	r3, r2
    214c:	d004      	beq.n	2158 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    214e:	68fb      	ldr	r3, [r7, #12]
    2150:	2220      	movs	r2, #32
    2152:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    2154:	2341      	movs	r3, #65	; 0x41
    2156:	e005      	b.n	2164 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    2158:	68fb      	ldr	r3, [r7, #12]
    215a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    215c:	b29a      	uxth	r2, r3
    215e:	683b      	ldr	r3, [r7, #0]
    2160:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    2162:	2300      	movs	r3, #0
}
    2164:	0018      	movs	r0, r3
    2166:	46bd      	mov	sp, r7
    2168:	b004      	add	sp, #16
    216a:	bd80      	pop	{r7, pc}
    216c:	00001aad 	.word	0x00001aad

00002170 <usart_is_syncing>:
{
    2170:	b580      	push	{r7, lr}
    2172:	b084      	sub	sp, #16
    2174:	af00      	add	r7, sp, #0
    2176:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2178:	687b      	ldr	r3, [r7, #4]
    217a:	681b      	ldr	r3, [r3, #0]
    217c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    217e:	68fb      	ldr	r3, [r7, #12]
    2180:	69db      	ldr	r3, [r3, #28]
    2182:	1e5a      	subs	r2, r3, #1
    2184:	4193      	sbcs	r3, r2
    2186:	b2db      	uxtb	r3, r3
}
    2188:	0018      	movs	r0, r3
    218a:	46bd      	mov	sp, r7
    218c:	b004      	add	sp, #16
    218e:	bd80      	pop	{r7, pc}

00002190 <_usart_wait_for_sync>:
{
    2190:	b580      	push	{r7, lr}
    2192:	b082      	sub	sp, #8
    2194:	af00      	add	r7, sp, #0
    2196:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    2198:	46c0      	nop			; (mov r8, r8)
    219a:	687b      	ldr	r3, [r7, #4]
    219c:	0018      	movs	r0, r3
    219e:	4b04      	ldr	r3, [pc, #16]	; (21b0 <_usart_wait_for_sync+0x20>)
    21a0:	4798      	blx	r3
    21a2:	1e03      	subs	r3, r0, #0
    21a4:	d1f9      	bne.n	219a <_usart_wait_for_sync+0xa>
}
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	46bd      	mov	sp, r7
    21aa:	b002      	add	sp, #8
    21ac:	bd80      	pop	{r7, pc}
    21ae:	46c0      	nop			; (mov r8, r8)
    21b0:	00002171 	.word	0x00002171

000021b4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    21b4:	b580      	push	{r7, lr}
    21b6:	b088      	sub	sp, #32
    21b8:	af00      	add	r7, sp, #0
    21ba:	0002      	movs	r2, r0
    21bc:	1dfb      	adds	r3, r7, #7
    21be:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    21c0:	1dfb      	adds	r3, r7, #7
    21c2:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    21c4:	4ba3      	ldr	r3, [pc, #652]	; (2454 <_usart_interrupt_handler+0x2a0>)
    21c6:	0092      	lsls	r2, r2, #2
    21c8:	58d3      	ldr	r3, [r2, r3]
    21ca:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    21cc:	69bb      	ldr	r3, [r7, #24]
    21ce:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    21d0:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    21d2:	69bb      	ldr	r3, [r7, #24]
    21d4:	0018      	movs	r0, r3
    21d6:	4ba0      	ldr	r3, [pc, #640]	; (2458 <_usart_interrupt_handler+0x2a4>)
    21d8:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    21da:	697b      	ldr	r3, [r7, #20]
    21dc:	7e1b      	ldrb	r3, [r3, #24]
    21de:	b2da      	uxtb	r2, r3
    21e0:	2312      	movs	r3, #18
    21e2:	18fb      	adds	r3, r7, r3
    21e4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    21e6:	697b      	ldr	r3, [r7, #20]
    21e8:	7d9b      	ldrb	r3, [r3, #22]
    21ea:	b2db      	uxtb	r3, r3
    21ec:	b29a      	uxth	r2, r3
    21ee:	2312      	movs	r3, #18
    21f0:	18fb      	adds	r3, r7, r3
    21f2:	2112      	movs	r1, #18
    21f4:	1879      	adds	r1, r7, r1
    21f6:	8809      	ldrh	r1, [r1, #0]
    21f8:	400a      	ands	r2, r1
    21fa:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    21fc:	69bb      	ldr	r3, [r7, #24]
    21fe:	2230      	movs	r2, #48	; 0x30
    2200:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    2202:	69ba      	ldr	r2, [r7, #24]
    2204:	2131      	movs	r1, #49	; 0x31
    2206:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    2208:	4013      	ands	r3, r2
    220a:	b2da      	uxtb	r2, r3
    220c:	2310      	movs	r3, #16
    220e:	18fb      	adds	r3, r7, r3
    2210:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2212:	2312      	movs	r3, #18
    2214:	18fb      	adds	r3, r7, r3
    2216:	881b      	ldrh	r3, [r3, #0]
    2218:	2201      	movs	r2, #1
    221a:	4013      	ands	r3, r2
    221c:	d044      	beq.n	22a8 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    221e:	69bb      	ldr	r3, [r7, #24]
    2220:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    2222:	b29b      	uxth	r3, r3
    2224:	2b00      	cmp	r3, #0
    2226:	d03c      	beq.n	22a2 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2228:	69bb      	ldr	r3, [r7, #24]
    222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    222c:	781b      	ldrb	r3, [r3, #0]
    222e:	b2da      	uxtb	r2, r3
    2230:	231c      	movs	r3, #28
    2232:	18fb      	adds	r3, r7, r3
    2234:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2236:	69bb      	ldr	r3, [r7, #24]
    2238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    223a:	1c5a      	adds	r2, r3, #1
    223c:	69bb      	ldr	r3, [r7, #24]
    223e:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2240:	69bb      	ldr	r3, [r7, #24]
    2242:	795b      	ldrb	r3, [r3, #5]
    2244:	2b01      	cmp	r3, #1
    2246:	d113      	bne.n	2270 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2248:	69bb      	ldr	r3, [r7, #24]
    224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    224c:	781b      	ldrb	r3, [r3, #0]
    224e:	b2db      	uxtb	r3, r3
    2250:	021b      	lsls	r3, r3, #8
    2252:	b21a      	sxth	r2, r3
    2254:	231c      	movs	r3, #28
    2256:	18fb      	adds	r3, r7, r3
    2258:	2100      	movs	r1, #0
    225a:	5e5b      	ldrsh	r3, [r3, r1]
    225c:	4313      	orrs	r3, r2
    225e:	b21a      	sxth	r2, r3
    2260:	231c      	movs	r3, #28
    2262:	18fb      	adds	r3, r7, r3
    2264:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    2266:	69bb      	ldr	r3, [r7, #24]
    2268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    226a:	1c5a      	adds	r2, r3, #1
    226c:	69bb      	ldr	r3, [r7, #24]
    226e:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2270:	231c      	movs	r3, #28
    2272:	18fb      	adds	r3, r7, r3
    2274:	881b      	ldrh	r3, [r3, #0]
    2276:	05db      	lsls	r3, r3, #23
    2278:	0ddb      	lsrs	r3, r3, #23
    227a:	b29a      	uxth	r2, r3
    227c:	697b      	ldr	r3, [r7, #20]
    227e:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2280:	69bb      	ldr	r3, [r7, #24]
    2282:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    2284:	b29b      	uxth	r3, r3
    2286:	3b01      	subs	r3, #1
    2288:	b29b      	uxth	r3, r3
    228a:	69ba      	ldr	r2, [r7, #24]
    228c:	1c19      	adds	r1, r3, #0
    228e:	85d1      	strh	r1, [r2, #46]	; 0x2e
    2290:	2b00      	cmp	r3, #0
    2292:	d109      	bne.n	22a8 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2294:	697b      	ldr	r3, [r7, #20]
    2296:	2201      	movs	r2, #1
    2298:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    229a:	697b      	ldr	r3, [r7, #20]
    229c:	2202      	movs	r2, #2
    229e:	759a      	strb	r2, [r3, #22]
    22a0:	e002      	b.n	22a8 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    22a2:	697b      	ldr	r3, [r7, #20]
    22a4:	2201      	movs	r2, #1
    22a6:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    22a8:	2312      	movs	r3, #18
    22aa:	18fb      	adds	r3, r7, r3
    22ac:	881b      	ldrh	r3, [r3, #0]
    22ae:	2202      	movs	r2, #2
    22b0:	4013      	ands	r3, r2
    22b2:	d011      	beq.n	22d8 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    22b4:	697b      	ldr	r3, [r7, #20]
    22b6:	2202      	movs	r2, #2
    22b8:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    22ba:	69bb      	ldr	r3, [r7, #24]
    22bc:	2233      	movs	r2, #51	; 0x33
    22be:	2100      	movs	r1, #0
    22c0:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    22c2:	2310      	movs	r3, #16
    22c4:	18fb      	adds	r3, r7, r3
    22c6:	881b      	ldrh	r3, [r3, #0]
    22c8:	2201      	movs	r2, #1
    22ca:	4013      	ands	r3, r2
    22cc:	d004      	beq.n	22d8 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    22ce:	69bb      	ldr	r3, [r7, #24]
    22d0:	68db      	ldr	r3, [r3, #12]
    22d2:	69ba      	ldr	r2, [r7, #24]
    22d4:	0010      	movs	r0, r2
    22d6:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    22d8:	2312      	movs	r3, #18
    22da:	18fb      	adds	r3, r7, r3
    22dc:	881b      	ldrh	r3, [r3, #0]
    22de:	2204      	movs	r2, #4
    22e0:	4013      	ands	r3, r2
    22e2:	d100      	bne.n	22e6 <_usart_interrupt_handler+0x132>
    22e4:	e0bd      	b.n	2462 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    22e6:	69bb      	ldr	r3, [r7, #24]
    22e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    22ea:	b29b      	uxth	r3, r3
    22ec:	2b00      	cmp	r3, #0
    22ee:	d100      	bne.n	22f2 <_usart_interrupt_handler+0x13e>
    22f0:	e0b4      	b.n	245c <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    22f2:	697b      	ldr	r3, [r7, #20]
    22f4:	8b5b      	ldrh	r3, [r3, #26]
    22f6:	b29b      	uxth	r3, r3
    22f8:	b2da      	uxtb	r2, r3
    22fa:	231f      	movs	r3, #31
    22fc:	18fb      	adds	r3, r7, r3
    22fe:	213f      	movs	r1, #63	; 0x3f
    2300:	400a      	ands	r2, r1
    2302:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2304:	231f      	movs	r3, #31
    2306:	18fb      	adds	r3, r7, r3
    2308:	781b      	ldrb	r3, [r3, #0]
    230a:	2208      	movs	r2, #8
    230c:	4013      	ands	r3, r2
    230e:	d007      	beq.n	2320 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2310:	231f      	movs	r3, #31
    2312:	18fb      	adds	r3, r7, r3
    2314:	221f      	movs	r2, #31
    2316:	18ba      	adds	r2, r7, r2
    2318:	7812      	ldrb	r2, [r2, #0]
    231a:	2108      	movs	r1, #8
    231c:	438a      	bics	r2, r1
    231e:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2320:	231f      	movs	r3, #31
    2322:	18fb      	adds	r3, r7, r3
    2324:	781b      	ldrb	r3, [r3, #0]
    2326:	2b00      	cmp	r3, #0
    2328:	d050      	beq.n	23cc <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    232a:	231f      	movs	r3, #31
    232c:	18fb      	adds	r3, r7, r3
    232e:	781b      	ldrb	r3, [r3, #0]
    2330:	2202      	movs	r2, #2
    2332:	4013      	ands	r3, r2
    2334:	d007      	beq.n	2346 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2336:	69bb      	ldr	r3, [r7, #24]
    2338:	2232      	movs	r2, #50	; 0x32
    233a:	211a      	movs	r1, #26
    233c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    233e:	697b      	ldr	r3, [r7, #20]
    2340:	2202      	movs	r2, #2
    2342:	835a      	strh	r2, [r3, #26]
    2344:	e036      	b.n	23b4 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2346:	231f      	movs	r3, #31
    2348:	18fb      	adds	r3, r7, r3
    234a:	781b      	ldrb	r3, [r3, #0]
    234c:	2204      	movs	r2, #4
    234e:	4013      	ands	r3, r2
    2350:	d007      	beq.n	2362 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    2352:	69bb      	ldr	r3, [r7, #24]
    2354:	2232      	movs	r2, #50	; 0x32
    2356:	211e      	movs	r1, #30
    2358:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    235a:	697b      	ldr	r3, [r7, #20]
    235c:	2204      	movs	r2, #4
    235e:	835a      	strh	r2, [r3, #26]
    2360:	e028      	b.n	23b4 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2362:	231f      	movs	r3, #31
    2364:	18fb      	adds	r3, r7, r3
    2366:	781b      	ldrb	r3, [r3, #0]
    2368:	2201      	movs	r2, #1
    236a:	4013      	ands	r3, r2
    236c:	d007      	beq.n	237e <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    236e:	69bb      	ldr	r3, [r7, #24]
    2370:	2232      	movs	r2, #50	; 0x32
    2372:	2113      	movs	r1, #19
    2374:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2376:	697b      	ldr	r3, [r7, #20]
    2378:	2201      	movs	r2, #1
    237a:	835a      	strh	r2, [r3, #26]
    237c:	e01a      	b.n	23b4 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    237e:	231f      	movs	r3, #31
    2380:	18fb      	adds	r3, r7, r3
    2382:	781b      	ldrb	r3, [r3, #0]
    2384:	2210      	movs	r2, #16
    2386:	4013      	ands	r3, r2
    2388:	d007      	beq.n	239a <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    238a:	69bb      	ldr	r3, [r7, #24]
    238c:	2232      	movs	r2, #50	; 0x32
    238e:	2142      	movs	r1, #66	; 0x42
    2390:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2392:	697b      	ldr	r3, [r7, #20]
    2394:	2210      	movs	r2, #16
    2396:	835a      	strh	r2, [r3, #26]
    2398:	e00c      	b.n	23b4 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    239a:	231f      	movs	r3, #31
    239c:	18fb      	adds	r3, r7, r3
    239e:	781b      	ldrb	r3, [r3, #0]
    23a0:	2220      	movs	r2, #32
    23a2:	4013      	ands	r3, r2
    23a4:	d006      	beq.n	23b4 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    23a6:	69bb      	ldr	r3, [r7, #24]
    23a8:	2232      	movs	r2, #50	; 0x32
    23aa:	2141      	movs	r1, #65	; 0x41
    23ac:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    23ae:	697b      	ldr	r3, [r7, #20]
    23b0:	2220      	movs	r2, #32
    23b2:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    23b4:	2310      	movs	r3, #16
    23b6:	18fb      	adds	r3, r7, r3
    23b8:	881b      	ldrh	r3, [r3, #0]
    23ba:	2204      	movs	r2, #4
    23bc:	4013      	ands	r3, r2
				if (callback_status
    23be:	d050      	beq.n	2462 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    23c0:	69bb      	ldr	r3, [r7, #24]
    23c2:	695b      	ldr	r3, [r3, #20]
    23c4:	69ba      	ldr	r2, [r7, #24]
    23c6:	0010      	movs	r0, r2
    23c8:	4798      	blx	r3
    23ca:	e04a      	b.n	2462 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    23cc:	697b      	ldr	r3, [r7, #20]
    23ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    23d0:	b29a      	uxth	r2, r3
    23d2:	230e      	movs	r3, #14
    23d4:	18fb      	adds	r3, r7, r3
    23d6:	05d2      	lsls	r2, r2, #23
    23d8:	0dd2      	lsrs	r2, r2, #23
    23da:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    23dc:	69bb      	ldr	r3, [r7, #24]
    23de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    23e0:	220e      	movs	r2, #14
    23e2:	18ba      	adds	r2, r7, r2
    23e4:	8812      	ldrh	r2, [r2, #0]
    23e6:	b2d2      	uxtb	r2, r2
    23e8:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    23ea:	69bb      	ldr	r3, [r7, #24]
    23ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    23ee:	1c5a      	adds	r2, r3, #1
    23f0:	69bb      	ldr	r3, [r7, #24]
    23f2:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    23f4:	69bb      	ldr	r3, [r7, #24]
    23f6:	795b      	ldrb	r3, [r3, #5]
    23f8:	2b01      	cmp	r3, #1
    23fa:	d10d      	bne.n	2418 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    23fc:	69bb      	ldr	r3, [r7, #24]
    23fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2400:	220e      	movs	r2, #14
    2402:	18ba      	adds	r2, r7, r2
    2404:	8812      	ldrh	r2, [r2, #0]
    2406:	0a12      	lsrs	r2, r2, #8
    2408:	b292      	uxth	r2, r2
    240a:	b2d2      	uxtb	r2, r2
    240c:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    240e:	69bb      	ldr	r3, [r7, #24]
    2410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2412:	1c5a      	adds	r2, r3, #1
    2414:	69bb      	ldr	r3, [r7, #24]
    2416:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2418:	69bb      	ldr	r3, [r7, #24]
    241a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    241c:	b29b      	uxth	r3, r3
    241e:	3b01      	subs	r3, #1
    2420:	b29b      	uxth	r3, r3
    2422:	69ba      	ldr	r2, [r7, #24]
    2424:	1c19      	adds	r1, r3, #0
    2426:	8591      	strh	r1, [r2, #44]	; 0x2c
    2428:	2b00      	cmp	r3, #0
    242a:	d11a      	bne.n	2462 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    242c:	697b      	ldr	r3, [r7, #20]
    242e:	2204      	movs	r2, #4
    2430:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    2432:	69bb      	ldr	r3, [r7, #24]
    2434:	2232      	movs	r2, #50	; 0x32
    2436:	2100      	movs	r1, #0
    2438:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    243a:	2310      	movs	r3, #16
    243c:	18fb      	adds	r3, r7, r3
    243e:	881b      	ldrh	r3, [r3, #0]
    2440:	2202      	movs	r2, #2
    2442:	4013      	ands	r3, r2
					if (callback_status
    2444:	d00d      	beq.n	2462 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2446:	69bb      	ldr	r3, [r7, #24]
    2448:	691b      	ldr	r3, [r3, #16]
    244a:	69ba      	ldr	r2, [r7, #24]
    244c:	0010      	movs	r0, r2
    244e:	4798      	blx	r3
    2450:	e007      	b.n	2462 <_usart_interrupt_handler+0x2ae>
    2452:	46c0      	nop			; (mov r8, r8)
    2454:	2000010c 	.word	0x2000010c
    2458:	00002191 	.word	0x00002191
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    245c:	697b      	ldr	r3, [r7, #20]
    245e:	2204      	movs	r2, #4
    2460:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2462:	2312      	movs	r3, #18
    2464:	18fb      	adds	r3, r7, r3
    2466:	881b      	ldrh	r3, [r3, #0]
    2468:	2210      	movs	r2, #16
    246a:	4013      	ands	r3, r2
    246c:	d010      	beq.n	2490 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    246e:	697b      	ldr	r3, [r7, #20]
    2470:	2210      	movs	r2, #16
    2472:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2474:	697b      	ldr	r3, [r7, #20]
    2476:	2210      	movs	r2, #16
    2478:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    247a:	2310      	movs	r3, #16
    247c:	18fb      	adds	r3, r7, r3
    247e:	881b      	ldrh	r3, [r3, #0]
    2480:	2210      	movs	r2, #16
    2482:	4013      	ands	r3, r2
    2484:	d004      	beq.n	2490 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2486:	69bb      	ldr	r3, [r7, #24]
    2488:	69db      	ldr	r3, [r3, #28]
    248a:	69ba      	ldr	r2, [r7, #24]
    248c:	0010      	movs	r0, r2
    248e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2490:	2312      	movs	r3, #18
    2492:	18fb      	adds	r3, r7, r3
    2494:	881b      	ldrh	r3, [r3, #0]
    2496:	2220      	movs	r2, #32
    2498:	4013      	ands	r3, r2
    249a:	d010      	beq.n	24be <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    249c:	697b      	ldr	r3, [r7, #20]
    249e:	2220      	movs	r2, #32
    24a0:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    24a2:	697b      	ldr	r3, [r7, #20]
    24a4:	2220      	movs	r2, #32
    24a6:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    24a8:	2310      	movs	r3, #16
    24aa:	18fb      	adds	r3, r7, r3
    24ac:	881b      	ldrh	r3, [r3, #0]
    24ae:	2208      	movs	r2, #8
    24b0:	4013      	ands	r3, r2
    24b2:	d004      	beq.n	24be <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    24b4:	69bb      	ldr	r3, [r7, #24]
    24b6:	699b      	ldr	r3, [r3, #24]
    24b8:	69ba      	ldr	r2, [r7, #24]
    24ba:	0010      	movs	r0, r2
    24bc:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    24be:	2312      	movs	r3, #18
    24c0:	18fb      	adds	r3, r7, r3
    24c2:	881b      	ldrh	r3, [r3, #0]
    24c4:	2208      	movs	r2, #8
    24c6:	4013      	ands	r3, r2
    24c8:	d010      	beq.n	24ec <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    24ca:	697b      	ldr	r3, [r7, #20]
    24cc:	2208      	movs	r2, #8
    24ce:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    24d0:	697b      	ldr	r3, [r7, #20]
    24d2:	2208      	movs	r2, #8
    24d4:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    24d6:	2310      	movs	r3, #16
    24d8:	18fb      	adds	r3, r7, r3
    24da:	881b      	ldrh	r3, [r3, #0]
    24dc:	2220      	movs	r2, #32
    24de:	4013      	ands	r3, r2
    24e0:	d004      	beq.n	24ec <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    24e2:	69bb      	ldr	r3, [r7, #24]
    24e4:	6a1b      	ldr	r3, [r3, #32]
    24e6:	69ba      	ldr	r2, [r7, #24]
    24e8:	0010      	movs	r0, r2
    24ea:	4798      	blx	r3
		}
	}
#endif
}
    24ec:	46c0      	nop			; (mov r8, r8)
    24ee:	46bd      	mov	sp, r7
    24f0:	b008      	add	sp, #32
    24f2:	bd80      	pop	{r7, pc}

000024f4 <system_gclk_gen_get_config_defaults>:
{
    24f4:	b580      	push	{r7, lr}
    24f6:	b082      	sub	sp, #8
    24f8:	af00      	add	r7, sp, #0
    24fa:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    24fc:	687b      	ldr	r3, [r7, #4]
    24fe:	2201      	movs	r2, #1
    2500:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    2502:	687b      	ldr	r3, [r7, #4]
    2504:	2200      	movs	r2, #0
    2506:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2508:	687b      	ldr	r3, [r7, #4]
    250a:	2206      	movs	r2, #6
    250c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    250e:	687b      	ldr	r3, [r7, #4]
    2510:	2200      	movs	r2, #0
    2512:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    2514:	687b      	ldr	r3, [r7, #4]
    2516:	2200      	movs	r2, #0
    2518:	725a      	strb	r2, [r3, #9]
}
    251a:	46c0      	nop			; (mov r8, r8)
    251c:	46bd      	mov	sp, r7
    251e:	b002      	add	sp, #8
    2520:	bd80      	pop	{r7, pc}

00002522 <system_clock_source_osc8m_get_config_defaults>:
{
    2522:	b580      	push	{r7, lr}
    2524:	b082      	sub	sp, #8
    2526:	af00      	add	r7, sp, #0
    2528:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    252a:	687b      	ldr	r3, [r7, #4]
    252c:	2203      	movs	r2, #3
    252e:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    2530:	687b      	ldr	r3, [r7, #4]
    2532:	2200      	movs	r2, #0
    2534:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    2536:	687b      	ldr	r3, [r7, #4]
    2538:	2201      	movs	r2, #1
    253a:	709a      	strb	r2, [r3, #2]
}
    253c:	46c0      	nop			; (mov r8, r8)
    253e:	46bd      	mov	sp, r7
    2540:	b002      	add	sp, #8
    2542:	bd80      	pop	{r7, pc}

00002544 <system_cpu_clock_set_divider>:
{
    2544:	b580      	push	{r7, lr}
    2546:	b082      	sub	sp, #8
    2548:	af00      	add	r7, sp, #0
    254a:	0002      	movs	r2, r0
    254c:	1dfb      	adds	r3, r7, #7
    254e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    2550:	4a03      	ldr	r2, [pc, #12]	; (2560 <system_cpu_clock_set_divider+0x1c>)
    2552:	1dfb      	adds	r3, r7, #7
    2554:	781b      	ldrb	r3, [r3, #0]
    2556:	7213      	strb	r3, [r2, #8]
}
    2558:	46c0      	nop			; (mov r8, r8)
    255a:	46bd      	mov	sp, r7
    255c:	b002      	add	sp, #8
    255e:	bd80      	pop	{r7, pc}
    2560:	40000400 	.word	0x40000400

00002564 <system_apb_clock_set_divider>:
{
    2564:	b580      	push	{r7, lr}
    2566:	b082      	sub	sp, #8
    2568:	af00      	add	r7, sp, #0
    256a:	0002      	movs	r2, r0
    256c:	1dfb      	adds	r3, r7, #7
    256e:	701a      	strb	r2, [r3, #0]
    2570:	1dbb      	adds	r3, r7, #6
    2572:	1c0a      	adds	r2, r1, #0
    2574:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2576:	1dfb      	adds	r3, r7, #7
    2578:	781b      	ldrb	r3, [r3, #0]
    257a:	2b01      	cmp	r3, #1
    257c:	d008      	beq.n	2590 <system_apb_clock_set_divider+0x2c>
    257e:	2b02      	cmp	r3, #2
    2580:	d00b      	beq.n	259a <system_apb_clock_set_divider+0x36>
    2582:	2b00      	cmp	r3, #0
    2584:	d10e      	bne.n	25a4 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    2586:	4a0b      	ldr	r2, [pc, #44]	; (25b4 <system_apb_clock_set_divider+0x50>)
    2588:	1dbb      	adds	r3, r7, #6
    258a:	781b      	ldrb	r3, [r3, #0]
    258c:	7253      	strb	r3, [r2, #9]
			break;
    258e:	e00b      	b.n	25a8 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    2590:	4a08      	ldr	r2, [pc, #32]	; (25b4 <system_apb_clock_set_divider+0x50>)
    2592:	1dbb      	adds	r3, r7, #6
    2594:	781b      	ldrb	r3, [r3, #0]
    2596:	7293      	strb	r3, [r2, #10]
			break;
    2598:	e006      	b.n	25a8 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    259a:	4a06      	ldr	r2, [pc, #24]	; (25b4 <system_apb_clock_set_divider+0x50>)
    259c:	1dbb      	adds	r3, r7, #6
    259e:	781b      	ldrb	r3, [r3, #0]
    25a0:	72d3      	strb	r3, [r2, #11]
			break;
    25a2:	e001      	b.n	25a8 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    25a4:	2317      	movs	r3, #23
    25a6:	e000      	b.n	25aa <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    25a8:	2300      	movs	r3, #0
}
    25aa:	0018      	movs	r0, r3
    25ac:	46bd      	mov	sp, r7
    25ae:	b002      	add	sp, #8
    25b0:	bd80      	pop	{r7, pc}
    25b2:	46c0      	nop			; (mov r8, r8)
    25b4:	40000400 	.word	0x40000400

000025b8 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    25b8:	b580      	push	{r7, lr}
    25ba:	b082      	sub	sp, #8
    25bc:	af00      	add	r7, sp, #0
    25be:	0002      	movs	r2, r0
    25c0:	1dfb      	adds	r3, r7, #7
    25c2:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    25c4:	4a08      	ldr	r2, [pc, #32]	; (25e8 <system_flash_set_waitstates+0x30>)
    25c6:	1dfb      	adds	r3, r7, #7
    25c8:	781b      	ldrb	r3, [r3, #0]
    25ca:	210f      	movs	r1, #15
    25cc:	400b      	ands	r3, r1
    25ce:	b2d9      	uxtb	r1, r3
    25d0:	6853      	ldr	r3, [r2, #4]
    25d2:	200f      	movs	r0, #15
    25d4:	4001      	ands	r1, r0
    25d6:	0049      	lsls	r1, r1, #1
    25d8:	201e      	movs	r0, #30
    25da:	4383      	bics	r3, r0
    25dc:	430b      	orrs	r3, r1
    25de:	6053      	str	r3, [r2, #4]
}
    25e0:	46c0      	nop			; (mov r8, r8)
    25e2:	46bd      	mov	sp, r7
    25e4:	b002      	add	sp, #8
    25e6:	bd80      	pop	{r7, pc}
    25e8:	41004000 	.word	0x41004000

000025ec <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    25ec:	b580      	push	{r7, lr}
    25ee:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    25f0:	46c0      	nop			; (mov r8, r8)
    25f2:	4b04      	ldr	r3, [pc, #16]	; (2604 <_system_dfll_wait_for_sync+0x18>)
    25f4:	68db      	ldr	r3, [r3, #12]
    25f6:	2210      	movs	r2, #16
    25f8:	4013      	ands	r3, r2
    25fa:	d0fa      	beq.n	25f2 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    25fc:	46c0      	nop			; (mov r8, r8)
    25fe:	46bd      	mov	sp, r7
    2600:	bd80      	pop	{r7, pc}
    2602:	46c0      	nop			; (mov r8, r8)
    2604:	40000800 	.word	0x40000800

00002608 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    2608:	b580      	push	{r7, lr}
    260a:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    260c:	4b0c      	ldr	r3, [pc, #48]	; (2640 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    260e:	2202      	movs	r2, #2
    2610:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    2612:	4b0c      	ldr	r3, [pc, #48]	; (2644 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    2614:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2616:	4a0a      	ldr	r2, [pc, #40]	; (2640 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2618:	4b0b      	ldr	r3, [pc, #44]	; (2648 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    261a:	689b      	ldr	r3, [r3, #8]
    261c:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    261e:	4a08      	ldr	r2, [pc, #32]	; (2640 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2620:	4b09      	ldr	r3, [pc, #36]	; (2648 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    2622:	685b      	ldr	r3, [r3, #4]
    2624:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    2626:	4b06      	ldr	r3, [pc, #24]	; (2640 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2628:	2200      	movs	r2, #0
    262a:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    262c:	4b05      	ldr	r3, [pc, #20]	; (2644 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    262e:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2630:	4a03      	ldr	r2, [pc, #12]	; (2640 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2632:	4b05      	ldr	r3, [pc, #20]	; (2648 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    2634:	681b      	ldr	r3, [r3, #0]
    2636:	b29b      	uxth	r3, r3
    2638:	8493      	strh	r3, [r2, #36]	; 0x24
}
    263a:	46c0      	nop			; (mov r8, r8)
    263c:	46bd      	mov	sp, r7
    263e:	bd80      	pop	{r7, pc}
    2640:	40000800 	.word	0x40000800
    2644:	000025ed 	.word	0x000025ed
    2648:	200000b0 	.word	0x200000b0

0000264c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    264c:	b580      	push	{r7, lr}
    264e:	b082      	sub	sp, #8
    2650:	af00      	add	r7, sp, #0
    2652:	0002      	movs	r2, r0
    2654:	1dfb      	adds	r3, r7, #7
    2656:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    2658:	1dfb      	adds	r3, r7, #7
    265a:	781b      	ldrb	r3, [r3, #0]
    265c:	2b08      	cmp	r3, #8
    265e:	d840      	bhi.n	26e2 <system_clock_source_get_hz+0x96>
    2660:	009a      	lsls	r2, r3, #2
    2662:	4b22      	ldr	r3, [pc, #136]	; (26ec <system_clock_source_get_hz+0xa0>)
    2664:	18d3      	adds	r3, r2, r3
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    266a:	4b21      	ldr	r3, [pc, #132]	; (26f0 <system_clock_source_get_hz+0xa4>)
    266c:	691b      	ldr	r3, [r3, #16]
    266e:	e039      	b.n	26e4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2670:	4b20      	ldr	r3, [pc, #128]	; (26f4 <system_clock_source_get_hz+0xa8>)
    2672:	6a1b      	ldr	r3, [r3, #32]
    2674:	059b      	lsls	r3, r3, #22
    2676:	0f9b      	lsrs	r3, r3, #30
    2678:	b2db      	uxtb	r3, r3
    267a:	001a      	movs	r2, r3
    267c:	4b1e      	ldr	r3, [pc, #120]	; (26f8 <system_clock_source_get_hz+0xac>)
    267e:	40d3      	lsrs	r3, r2
    2680:	e030      	b.n	26e4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    2682:	2380      	movs	r3, #128	; 0x80
    2684:	021b      	lsls	r3, r3, #8
    2686:	e02d      	b.n	26e4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    2688:	2380      	movs	r3, #128	; 0x80
    268a:	021b      	lsls	r3, r3, #8
    268c:	e02a      	b.n	26e4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    268e:	4b18      	ldr	r3, [pc, #96]	; (26f0 <system_clock_source_get_hz+0xa4>)
    2690:	695b      	ldr	r3, [r3, #20]
    2692:	e027      	b.n	26e4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2694:	4b16      	ldr	r3, [pc, #88]	; (26f0 <system_clock_source_get_hz+0xa4>)
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	2202      	movs	r2, #2
    269a:	4013      	ands	r3, r2
    269c:	d101      	bne.n	26a2 <system_clock_source_get_hz+0x56>
			return 0;
    269e:	2300      	movs	r3, #0
    26a0:	e020      	b.n	26e4 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    26a2:	4b16      	ldr	r3, [pc, #88]	; (26fc <system_clock_source_get_hz+0xb0>)
    26a4:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    26a6:	4b12      	ldr	r3, [pc, #72]	; (26f0 <system_clock_source_get_hz+0xa4>)
    26a8:	681b      	ldr	r3, [r3, #0]
    26aa:	2204      	movs	r2, #4
    26ac:	4013      	ands	r3, r2
    26ae:	d009      	beq.n	26c4 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    26b0:	2000      	movs	r0, #0
    26b2:	4b13      	ldr	r3, [pc, #76]	; (2700 <system_clock_source_get_hz+0xb4>)
    26b4:	4798      	blx	r3
    26b6:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    26b8:	4b0d      	ldr	r3, [pc, #52]	; (26f0 <system_clock_source_get_hz+0xa4>)
    26ba:	689b      	ldr	r3, [r3, #8]
    26bc:	041b      	lsls	r3, r3, #16
    26be:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    26c0:	4353      	muls	r3, r2
    26c2:	e00f      	b.n	26e4 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    26c4:	4b0f      	ldr	r3, [pc, #60]	; (2704 <system_clock_source_get_hz+0xb8>)
    26c6:	e00d      	b.n	26e4 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    26c8:	4a0a      	ldr	r2, [pc, #40]	; (26f4 <system_clock_source_get_hz+0xa8>)
    26ca:	2350      	movs	r3, #80	; 0x50
    26cc:	5cd3      	ldrb	r3, [r2, r3]
    26ce:	b2db      	uxtb	r3, r3
    26d0:	001a      	movs	r2, r3
    26d2:	2304      	movs	r3, #4
    26d4:	4013      	ands	r3, r2
    26d6:	d101      	bne.n	26dc <system_clock_source_get_hz+0x90>
			return 0;
    26d8:	2300      	movs	r3, #0
    26da:	e003      	b.n	26e4 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    26dc:	4b04      	ldr	r3, [pc, #16]	; (26f0 <system_clock_source_get_hz+0xa4>)
    26de:	68db      	ldr	r3, [r3, #12]
    26e0:	e000      	b.n	26e4 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    26e2:	2300      	movs	r3, #0
	}
}
    26e4:	0018      	movs	r0, r3
    26e6:	46bd      	mov	sp, r7
    26e8:	b002      	add	sp, #8
    26ea:	bd80      	pop	{r7, pc}
    26ec:	00005e1c 	.word	0x00005e1c
    26f0:	200000b0 	.word	0x200000b0
    26f4:	40000800 	.word	0x40000800
    26f8:	007a1200 	.word	0x007a1200
    26fc:	000025ed 	.word	0x000025ed
    2700:	00002dc5 	.word	0x00002dc5
    2704:	02dc6c00 	.word	0x02dc6c00

00002708 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2708:	b580      	push	{r7, lr}
    270a:	b084      	sub	sp, #16
    270c:	af00      	add	r7, sp, #0
    270e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2710:	4b1a      	ldr	r3, [pc, #104]	; (277c <system_clock_source_osc8m_set_config+0x74>)
    2712:	6a1b      	ldr	r3, [r3, #32]
    2714:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2716:	687b      	ldr	r3, [r7, #4]
    2718:	781b      	ldrb	r3, [r3, #0]
    271a:	1c1a      	adds	r2, r3, #0
    271c:	2303      	movs	r3, #3
    271e:	4013      	ands	r3, r2
    2720:	b2da      	uxtb	r2, r3
    2722:	230d      	movs	r3, #13
    2724:	18fb      	adds	r3, r7, r3
    2726:	2103      	movs	r1, #3
    2728:	400a      	ands	r2, r1
    272a:	0010      	movs	r0, r2
    272c:	781a      	ldrb	r2, [r3, #0]
    272e:	2103      	movs	r1, #3
    2730:	438a      	bics	r2, r1
    2732:	1c11      	adds	r1, r2, #0
    2734:	1c02      	adds	r2, r0, #0
    2736:	430a      	orrs	r2, r1
    2738:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    273a:	687b      	ldr	r3, [r7, #4]
    273c:	789a      	ldrb	r2, [r3, #2]
    273e:	230c      	movs	r3, #12
    2740:	18fb      	adds	r3, r7, r3
    2742:	01d0      	lsls	r0, r2, #7
    2744:	781a      	ldrb	r2, [r3, #0]
    2746:	217f      	movs	r1, #127	; 0x7f
    2748:	400a      	ands	r2, r1
    274a:	1c11      	adds	r1, r2, #0
    274c:	1c02      	adds	r2, r0, #0
    274e:	430a      	orrs	r2, r1
    2750:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2752:	687b      	ldr	r3, [r7, #4]
    2754:	785a      	ldrb	r2, [r3, #1]
    2756:	230c      	movs	r3, #12
    2758:	18fb      	adds	r3, r7, r3
    275a:	2101      	movs	r1, #1
    275c:	400a      	ands	r2, r1
    275e:	0190      	lsls	r0, r2, #6
    2760:	781a      	ldrb	r2, [r3, #0]
    2762:	2140      	movs	r1, #64	; 0x40
    2764:	438a      	bics	r2, r1
    2766:	1c11      	adds	r1, r2, #0
    2768:	1c02      	adds	r2, r0, #0
    276a:	430a      	orrs	r2, r1
    276c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    276e:	4b03      	ldr	r3, [pc, #12]	; (277c <system_clock_source_osc8m_set_config+0x74>)
    2770:	68fa      	ldr	r2, [r7, #12]
    2772:	621a      	str	r2, [r3, #32]
}
    2774:	46c0      	nop			; (mov r8, r8)
    2776:	46bd      	mov	sp, r7
    2778:	b004      	add	sp, #16
    277a:	bd80      	pop	{r7, pc}
    277c:	40000800 	.word	0x40000800

00002780 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    2780:	b580      	push	{r7, lr}
    2782:	b082      	sub	sp, #8
    2784:	af00      	add	r7, sp, #0
    2786:	0002      	movs	r2, r0
    2788:	1dfb      	adds	r3, r7, #7
    278a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    278c:	1dfb      	adds	r3, r7, #7
    278e:	781b      	ldrb	r3, [r3, #0]
    2790:	2b08      	cmp	r3, #8
    2792:	d83b      	bhi.n	280c <system_clock_source_enable+0x8c>
    2794:	009a      	lsls	r2, r3, #2
    2796:	4b21      	ldr	r3, [pc, #132]	; (281c <system_clock_source_enable+0x9c>)
    2798:	18d3      	adds	r3, r2, r3
    279a:	681b      	ldr	r3, [r3, #0]
    279c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    279e:	4b20      	ldr	r3, [pc, #128]	; (2820 <system_clock_source_enable+0xa0>)
    27a0:	4a1f      	ldr	r2, [pc, #124]	; (2820 <system_clock_source_enable+0xa0>)
    27a2:	6a12      	ldr	r2, [r2, #32]
    27a4:	2102      	movs	r1, #2
    27a6:	430a      	orrs	r2, r1
    27a8:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    27aa:	2300      	movs	r3, #0
    27ac:	e031      	b.n	2812 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    27ae:	4b1c      	ldr	r3, [pc, #112]	; (2820 <system_clock_source_enable+0xa0>)
    27b0:	4a1b      	ldr	r2, [pc, #108]	; (2820 <system_clock_source_enable+0xa0>)
    27b2:	6992      	ldr	r2, [r2, #24]
    27b4:	2102      	movs	r1, #2
    27b6:	430a      	orrs	r2, r1
    27b8:	619a      	str	r2, [r3, #24]
		break;
    27ba:	e029      	b.n	2810 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    27bc:	4a18      	ldr	r2, [pc, #96]	; (2820 <system_clock_source_enable+0xa0>)
    27be:	4b18      	ldr	r3, [pc, #96]	; (2820 <system_clock_source_enable+0xa0>)
    27c0:	8a1b      	ldrh	r3, [r3, #16]
    27c2:	b29b      	uxth	r3, r3
    27c4:	2102      	movs	r1, #2
    27c6:	430b      	orrs	r3, r1
    27c8:	b29b      	uxth	r3, r3
    27ca:	8213      	strh	r3, [r2, #16]
		break;
    27cc:	e020      	b.n	2810 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    27ce:	4a14      	ldr	r2, [pc, #80]	; (2820 <system_clock_source_enable+0xa0>)
    27d0:	4b13      	ldr	r3, [pc, #76]	; (2820 <system_clock_source_enable+0xa0>)
    27d2:	8a9b      	ldrh	r3, [r3, #20]
    27d4:	b29b      	uxth	r3, r3
    27d6:	2102      	movs	r1, #2
    27d8:	430b      	orrs	r3, r1
    27da:	b29b      	uxth	r3, r3
    27dc:	8293      	strh	r3, [r2, #20]
		break;
    27de:	e017      	b.n	2810 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    27e0:	4b10      	ldr	r3, [pc, #64]	; (2824 <system_clock_source_enable+0xa4>)
    27e2:	681b      	ldr	r3, [r3, #0]
    27e4:	2202      	movs	r2, #2
    27e6:	431a      	orrs	r2, r3
    27e8:	4b0e      	ldr	r3, [pc, #56]	; (2824 <system_clock_source_enable+0xa4>)
    27ea:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    27ec:	4b0e      	ldr	r3, [pc, #56]	; (2828 <system_clock_source_enable+0xa8>)
    27ee:	4798      	blx	r3
		break;
    27f0:	e00e      	b.n	2810 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    27f2:	4a0b      	ldr	r2, [pc, #44]	; (2820 <system_clock_source_enable+0xa0>)
    27f4:	490a      	ldr	r1, [pc, #40]	; (2820 <system_clock_source_enable+0xa0>)
    27f6:	2344      	movs	r3, #68	; 0x44
    27f8:	5ccb      	ldrb	r3, [r1, r3]
    27fa:	b2db      	uxtb	r3, r3
    27fc:	2102      	movs	r1, #2
    27fe:	430b      	orrs	r3, r1
    2800:	b2d9      	uxtb	r1, r3
    2802:	2344      	movs	r3, #68	; 0x44
    2804:	54d1      	strb	r1, [r2, r3]
		break;
    2806:	e003      	b.n	2810 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    2808:	2300      	movs	r3, #0
    280a:	e002      	b.n	2812 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    280c:	2317      	movs	r3, #23
    280e:	e000      	b.n	2812 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    2810:	2300      	movs	r3, #0
}
    2812:	0018      	movs	r0, r3
    2814:	46bd      	mov	sp, r7
    2816:	b002      	add	sp, #8
    2818:	bd80      	pop	{r7, pc}
    281a:	46c0      	nop			; (mov r8, r8)
    281c:	00005e40 	.word	0x00005e40
    2820:	40000800 	.word	0x40000800
    2824:	200000b0 	.word	0x200000b0
    2828:	00002609 	.word	0x00002609

0000282c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    282c:	b580      	push	{r7, lr}
    282e:	b082      	sub	sp, #8
    2830:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2832:	003b      	movs	r3, r7
    2834:	2202      	movs	r2, #2
    2836:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2838:	2300      	movs	r3, #0
    283a:	607b      	str	r3, [r7, #4]
    283c:	e009      	b.n	2852 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    283e:	687b      	ldr	r3, [r7, #4]
    2840:	b2db      	uxtb	r3, r3
    2842:	003a      	movs	r2, r7
    2844:	0011      	movs	r1, r2
    2846:	0018      	movs	r0, r3
    2848:	4b05      	ldr	r3, [pc, #20]	; (2860 <_switch_peripheral_gclk+0x34>)
    284a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    284c:	687b      	ldr	r3, [r7, #4]
    284e:	3301      	adds	r3, #1
    2850:	607b      	str	r3, [r7, #4]
    2852:	687b      	ldr	r3, [r7, #4]
    2854:	2b24      	cmp	r3, #36	; 0x24
    2856:	d9f2      	bls.n	283e <_switch_peripheral_gclk+0x12>
	}
}
    2858:	46c0      	nop			; (mov r8, r8)
    285a:	46bd      	mov	sp, r7
    285c:	b002      	add	sp, #8
    285e:	bd80      	pop	{r7, pc}
    2860:	00002ca1 	.word	0x00002ca1

00002864 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2864:	b580      	push	{r7, lr}
    2866:	b0a0      	sub	sp, #128	; 0x80
    2868:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    286a:	4b36      	ldr	r3, [pc, #216]	; (2944 <system_clock_init+0xe0>)
    286c:	22c2      	movs	r2, #194	; 0xc2
    286e:	00d2      	lsls	r2, r2, #3
    2870:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    2872:	2000      	movs	r0, #0
    2874:	4b34      	ldr	r3, [pc, #208]	; (2948 <system_clock_init+0xe4>)
    2876:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    2878:	4b34      	ldr	r3, [pc, #208]	; (294c <system_clock_init+0xe8>)
    287a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    287c:	237c      	movs	r3, #124	; 0x7c
    287e:	18fb      	adds	r3, r7, r3
    2880:	0018      	movs	r0, r3
    2882:	4b33      	ldr	r3, [pc, #204]	; (2950 <system_clock_init+0xec>)
    2884:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2886:	237c      	movs	r3, #124	; 0x7c
    2888:	18fb      	adds	r3, r7, r3
    288a:	2200      	movs	r2, #0
    288c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    288e:	237c      	movs	r3, #124	; 0x7c
    2890:	18fb      	adds	r3, r7, r3
    2892:	2201      	movs	r2, #1
    2894:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    2896:	237c      	movs	r3, #124	; 0x7c
    2898:	18fb      	adds	r3, r7, r3
    289a:	2200      	movs	r2, #0
    289c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    289e:	237c      	movs	r3, #124	; 0x7c
    28a0:	18fb      	adds	r3, r7, r3
    28a2:	0018      	movs	r0, r3
    28a4:	4b2b      	ldr	r3, [pc, #172]	; (2954 <system_clock_init+0xf0>)
    28a6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    28a8:	2006      	movs	r0, #6
    28aa:	4b2b      	ldr	r3, [pc, #172]	; (2958 <system_clock_init+0xf4>)
    28ac:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    28ae:	4b2b      	ldr	r3, [pc, #172]	; (295c <system_clock_init+0xf8>)
    28b0:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    28b2:	2364      	movs	r3, #100	; 0x64
    28b4:	18fb      	adds	r3, r7, r3
    28b6:	0018      	movs	r0, r3
    28b8:	4b29      	ldr	r3, [pc, #164]	; (2960 <system_clock_init+0xfc>)
    28ba:	4798      	blx	r3
    28bc:	2364      	movs	r3, #100	; 0x64
    28be:	18fb      	adds	r3, r7, r3
    28c0:	2204      	movs	r2, #4
    28c2:	701a      	strb	r2, [r3, #0]
    28c4:	2364      	movs	r3, #100	; 0x64
    28c6:	18fb      	adds	r3, r7, r3
    28c8:	2201      	movs	r2, #1
    28ca:	605a      	str	r2, [r3, #4]
    28cc:	2364      	movs	r3, #100	; 0x64
    28ce:	18fb      	adds	r3, r7, r3
    28d0:	2200      	movs	r2, #0
    28d2:	721a      	strb	r2, [r3, #8]
    28d4:	2364      	movs	r3, #100	; 0x64
    28d6:	18fb      	adds	r3, r7, r3
    28d8:	2200      	movs	r2, #0
    28da:	725a      	strb	r2, [r3, #9]
    28dc:	2364      	movs	r3, #100	; 0x64
    28de:	18fb      	adds	r3, r7, r3
    28e0:	0019      	movs	r1, r3
    28e2:	2001      	movs	r0, #1
    28e4:	4b1f      	ldr	r3, [pc, #124]	; (2964 <system_clock_init+0x100>)
    28e6:	4798      	blx	r3
    28e8:	2001      	movs	r0, #1
    28ea:	4b1f      	ldr	r3, [pc, #124]	; (2968 <system_clock_init+0x104>)
    28ec:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    28ee:	2000      	movs	r0, #0
    28f0:	4b1e      	ldr	r3, [pc, #120]	; (296c <system_clock_init+0x108>)
    28f2:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    28f4:	2100      	movs	r1, #0
    28f6:	2000      	movs	r0, #0
    28f8:	4b1d      	ldr	r3, [pc, #116]	; (2970 <system_clock_init+0x10c>)
    28fa:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    28fc:	2100      	movs	r1, #0
    28fe:	2001      	movs	r0, #1
    2900:	4b1b      	ldr	r3, [pc, #108]	; (2970 <system_clock_init+0x10c>)
    2902:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    2904:	2100      	movs	r1, #0
    2906:	2002      	movs	r0, #2
    2908:	4b19      	ldr	r3, [pc, #100]	; (2970 <system_clock_init+0x10c>)
    290a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    290c:	1d3b      	adds	r3, r7, #4
    290e:	0018      	movs	r0, r3
    2910:	4b13      	ldr	r3, [pc, #76]	; (2960 <system_clock_init+0xfc>)
    2912:	4798      	blx	r3
    2914:	1d3b      	adds	r3, r7, #4
    2916:	2206      	movs	r2, #6
    2918:	701a      	strb	r2, [r3, #0]
    291a:	1d3b      	adds	r3, r7, #4
    291c:	2201      	movs	r2, #1
    291e:	605a      	str	r2, [r3, #4]
    2920:	1d3b      	adds	r3, r7, #4
    2922:	2200      	movs	r2, #0
    2924:	721a      	strb	r2, [r3, #8]
    2926:	1d3b      	adds	r3, r7, #4
    2928:	2200      	movs	r2, #0
    292a:	725a      	strb	r2, [r3, #9]
    292c:	1d3b      	adds	r3, r7, #4
    292e:	0019      	movs	r1, r3
    2930:	2000      	movs	r0, #0
    2932:	4b0c      	ldr	r3, [pc, #48]	; (2964 <system_clock_init+0x100>)
    2934:	4798      	blx	r3
    2936:	2000      	movs	r0, #0
    2938:	4b0b      	ldr	r3, [pc, #44]	; (2968 <system_clock_init+0x104>)
    293a:	4798      	blx	r3
#endif
}
    293c:	46c0      	nop			; (mov r8, r8)
    293e:	46bd      	mov	sp, r7
    2940:	b020      	add	sp, #128	; 0x80
    2942:	bd80      	pop	{r7, pc}
    2944:	40000800 	.word	0x40000800
    2948:	000025b9 	.word	0x000025b9
    294c:	0000282d 	.word	0x0000282d
    2950:	00002523 	.word	0x00002523
    2954:	00002709 	.word	0x00002709
    2958:	00002781 	.word	0x00002781
    295c:	00002a19 	.word	0x00002a19
    2960:	000024f5 	.word	0x000024f5
    2964:	00002a49 	.word	0x00002a49
    2968:	00002b6d 	.word	0x00002b6d
    296c:	00002545 	.word	0x00002545
    2970:	00002565 	.word	0x00002565

00002974 <system_apb_clock_set_mask>:
{
    2974:	b580      	push	{r7, lr}
    2976:	b082      	sub	sp, #8
    2978:	af00      	add	r7, sp, #0
    297a:	0002      	movs	r2, r0
    297c:	6039      	str	r1, [r7, #0]
    297e:	1dfb      	adds	r3, r7, #7
    2980:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2982:	1dfb      	adds	r3, r7, #7
    2984:	781b      	ldrb	r3, [r3, #0]
    2986:	2b01      	cmp	r3, #1
    2988:	d00a      	beq.n	29a0 <system_apb_clock_set_mask+0x2c>
    298a:	2b02      	cmp	r3, #2
    298c:	d00f      	beq.n	29ae <system_apb_clock_set_mask+0x3a>
    298e:	2b00      	cmp	r3, #0
    2990:	d114      	bne.n	29bc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    2992:	4b0e      	ldr	r3, [pc, #56]	; (29cc <system_apb_clock_set_mask+0x58>)
    2994:	4a0d      	ldr	r2, [pc, #52]	; (29cc <system_apb_clock_set_mask+0x58>)
    2996:	6991      	ldr	r1, [r2, #24]
    2998:	683a      	ldr	r2, [r7, #0]
    299a:	430a      	orrs	r2, r1
    299c:	619a      	str	r2, [r3, #24]
			break;
    299e:	e00f      	b.n	29c0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    29a0:	4b0a      	ldr	r3, [pc, #40]	; (29cc <system_apb_clock_set_mask+0x58>)
    29a2:	4a0a      	ldr	r2, [pc, #40]	; (29cc <system_apb_clock_set_mask+0x58>)
    29a4:	69d1      	ldr	r1, [r2, #28]
    29a6:	683a      	ldr	r2, [r7, #0]
    29a8:	430a      	orrs	r2, r1
    29aa:	61da      	str	r2, [r3, #28]
			break;
    29ac:	e008      	b.n	29c0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    29ae:	4b07      	ldr	r3, [pc, #28]	; (29cc <system_apb_clock_set_mask+0x58>)
    29b0:	4a06      	ldr	r2, [pc, #24]	; (29cc <system_apb_clock_set_mask+0x58>)
    29b2:	6a11      	ldr	r1, [r2, #32]
    29b4:	683a      	ldr	r2, [r7, #0]
    29b6:	430a      	orrs	r2, r1
    29b8:	621a      	str	r2, [r3, #32]
			break;
    29ba:	e001      	b.n	29c0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    29bc:	2317      	movs	r3, #23
    29be:	e000      	b.n	29c2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    29c0:	2300      	movs	r3, #0
}
    29c2:	0018      	movs	r0, r3
    29c4:	46bd      	mov	sp, r7
    29c6:	b002      	add	sp, #8
    29c8:	bd80      	pop	{r7, pc}
    29ca:	46c0      	nop			; (mov r8, r8)
    29cc:	40000400 	.word	0x40000400

000029d0 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    29d0:	b580      	push	{r7, lr}
    29d2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    29d4:	4b02      	ldr	r3, [pc, #8]	; (29e0 <system_interrupt_enter_critical_section+0x10>)
    29d6:	4798      	blx	r3
}
    29d8:	46c0      	nop			; (mov r8, r8)
    29da:	46bd      	mov	sp, r7
    29dc:	bd80      	pop	{r7, pc}
    29de:	46c0      	nop			; (mov r8, r8)
    29e0:	000001d1 	.word	0x000001d1

000029e4 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    29e4:	b580      	push	{r7, lr}
    29e6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    29e8:	4b02      	ldr	r3, [pc, #8]	; (29f4 <system_interrupt_leave_critical_section+0x10>)
    29ea:	4798      	blx	r3
}
    29ec:	46c0      	nop			; (mov r8, r8)
    29ee:	46bd      	mov	sp, r7
    29f0:	bd80      	pop	{r7, pc}
    29f2:	46c0      	nop			; (mov r8, r8)
    29f4:	00000225 	.word	0x00000225

000029f8 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    29f8:	b580      	push	{r7, lr}
    29fa:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    29fc:	4b05      	ldr	r3, [pc, #20]	; (2a14 <system_gclk_is_syncing+0x1c>)
    29fe:	785b      	ldrb	r3, [r3, #1]
    2a00:	b2db      	uxtb	r3, r3
    2a02:	b25b      	sxtb	r3, r3
    2a04:	2b00      	cmp	r3, #0
    2a06:	da01      	bge.n	2a0c <system_gclk_is_syncing+0x14>
		return true;
    2a08:	2301      	movs	r3, #1
    2a0a:	e000      	b.n	2a0e <system_gclk_is_syncing+0x16>
	}

	return false;
    2a0c:	2300      	movs	r3, #0
}
    2a0e:	0018      	movs	r0, r3
    2a10:	46bd      	mov	sp, r7
    2a12:	bd80      	pop	{r7, pc}
    2a14:	40000c00 	.word	0x40000c00

00002a18 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    2a18:	b580      	push	{r7, lr}
    2a1a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    2a1c:	2108      	movs	r1, #8
    2a1e:	2000      	movs	r0, #0
    2a20:	4b07      	ldr	r3, [pc, #28]	; (2a40 <system_gclk_init+0x28>)
    2a22:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2a24:	4b07      	ldr	r3, [pc, #28]	; (2a44 <system_gclk_init+0x2c>)
    2a26:	2201      	movs	r2, #1
    2a28:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2a2a:	46c0      	nop			; (mov r8, r8)
    2a2c:	4b05      	ldr	r3, [pc, #20]	; (2a44 <system_gclk_init+0x2c>)
    2a2e:	781b      	ldrb	r3, [r3, #0]
    2a30:	b2db      	uxtb	r3, r3
    2a32:	001a      	movs	r2, r3
    2a34:	2301      	movs	r3, #1
    2a36:	4013      	ands	r3, r2
    2a38:	d1f8      	bne.n	2a2c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    2a3a:	46c0      	nop			; (mov r8, r8)
    2a3c:	46bd      	mov	sp, r7
    2a3e:	bd80      	pop	{r7, pc}
    2a40:	00002975 	.word	0x00002975
    2a44:	40000c00 	.word	0x40000c00

00002a48 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2a48:	b580      	push	{r7, lr}
    2a4a:	b086      	sub	sp, #24
    2a4c:	af00      	add	r7, sp, #0
    2a4e:	0002      	movs	r2, r0
    2a50:	6039      	str	r1, [r7, #0]
    2a52:	1dfb      	adds	r3, r7, #7
    2a54:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2a56:	1dfb      	adds	r3, r7, #7
    2a58:	781b      	ldrb	r3, [r3, #0]
    2a5a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    2a5c:	1dfb      	adds	r3, r7, #7
    2a5e:	781b      	ldrb	r3, [r3, #0]
    2a60:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2a62:	683b      	ldr	r3, [r7, #0]
    2a64:	781b      	ldrb	r3, [r3, #0]
    2a66:	021b      	lsls	r3, r3, #8
    2a68:	001a      	movs	r2, r3
    2a6a:	697b      	ldr	r3, [r7, #20]
    2a6c:	4313      	orrs	r3, r2
    2a6e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2a70:	683b      	ldr	r3, [r7, #0]
    2a72:	785b      	ldrb	r3, [r3, #1]
    2a74:	2b00      	cmp	r3, #0
    2a76:	d004      	beq.n	2a82 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2a78:	697b      	ldr	r3, [r7, #20]
    2a7a:	2280      	movs	r2, #128	; 0x80
    2a7c:	02d2      	lsls	r2, r2, #11
    2a7e:	4313      	orrs	r3, r2
    2a80:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2a82:	683b      	ldr	r3, [r7, #0]
    2a84:	7a5b      	ldrb	r3, [r3, #9]
    2a86:	2b00      	cmp	r3, #0
    2a88:	d004      	beq.n	2a94 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2a8a:	697b      	ldr	r3, [r7, #20]
    2a8c:	2280      	movs	r2, #128	; 0x80
    2a8e:	0312      	lsls	r2, r2, #12
    2a90:	4313      	orrs	r3, r2
    2a92:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2a94:	683b      	ldr	r3, [r7, #0]
    2a96:	685b      	ldr	r3, [r3, #4]
    2a98:	2b01      	cmp	r3, #1
    2a9a:	d92c      	bls.n	2af6 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2a9c:	683b      	ldr	r3, [r7, #0]
    2a9e:	685a      	ldr	r2, [r3, #4]
    2aa0:	683b      	ldr	r3, [r7, #0]
    2aa2:	685b      	ldr	r3, [r3, #4]
    2aa4:	3b01      	subs	r3, #1
    2aa6:	4013      	ands	r3, r2
    2aa8:	d11a      	bne.n	2ae0 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    2aaa:	2300      	movs	r3, #0
    2aac:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2aae:	2302      	movs	r3, #2
    2ab0:	60bb      	str	r3, [r7, #8]
    2ab2:	e005      	b.n	2ac0 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    2ab4:	68fb      	ldr	r3, [r7, #12]
    2ab6:	3301      	adds	r3, #1
    2ab8:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    2aba:	68bb      	ldr	r3, [r7, #8]
    2abc:	005b      	lsls	r3, r3, #1
    2abe:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    2ac0:	683b      	ldr	r3, [r7, #0]
    2ac2:	685a      	ldr	r2, [r3, #4]
    2ac4:	68bb      	ldr	r3, [r7, #8]
    2ac6:	429a      	cmp	r2, r3
    2ac8:	d8f4      	bhi.n	2ab4 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2aca:	68fb      	ldr	r3, [r7, #12]
    2acc:	021b      	lsls	r3, r3, #8
    2ace:	693a      	ldr	r2, [r7, #16]
    2ad0:	4313      	orrs	r3, r2
    2ad2:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2ad4:	697b      	ldr	r3, [r7, #20]
    2ad6:	2280      	movs	r2, #128	; 0x80
    2ad8:	0352      	lsls	r2, r2, #13
    2ada:	4313      	orrs	r3, r2
    2adc:	617b      	str	r3, [r7, #20]
    2ade:	e00a      	b.n	2af6 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2ae0:	683b      	ldr	r3, [r7, #0]
    2ae2:	685b      	ldr	r3, [r3, #4]
    2ae4:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    2ae6:	693a      	ldr	r2, [r7, #16]
    2ae8:	4313      	orrs	r3, r2
    2aea:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2aec:	697b      	ldr	r3, [r7, #20]
    2aee:	2280      	movs	r2, #128	; 0x80
    2af0:	0292      	lsls	r2, r2, #10
    2af2:	4313      	orrs	r3, r2
    2af4:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2af6:	683b      	ldr	r3, [r7, #0]
    2af8:	7a1b      	ldrb	r3, [r3, #8]
    2afa:	2b00      	cmp	r3, #0
    2afc:	d004      	beq.n	2b08 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2afe:	697b      	ldr	r3, [r7, #20]
    2b00:	2280      	movs	r2, #128	; 0x80
    2b02:	0392      	lsls	r2, r2, #14
    2b04:	4313      	orrs	r3, r2
    2b06:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    2b08:	46c0      	nop			; (mov r8, r8)
    2b0a:	4b13      	ldr	r3, [pc, #76]	; (2b58 <system_gclk_gen_set_config+0x110>)
    2b0c:	4798      	blx	r3
    2b0e:	1e03      	subs	r3, r0, #0
    2b10:	d1fb      	bne.n	2b0a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2b12:	4b12      	ldr	r3, [pc, #72]	; (2b5c <system_gclk_gen_set_config+0x114>)
    2b14:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2b16:	4a12      	ldr	r2, [pc, #72]	; (2b60 <system_gclk_gen_set_config+0x118>)
    2b18:	1dfb      	adds	r3, r7, #7
    2b1a:	781b      	ldrb	r3, [r3, #0]
    2b1c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2b1e:	46c0      	nop			; (mov r8, r8)
    2b20:	4b0d      	ldr	r3, [pc, #52]	; (2b58 <system_gclk_gen_set_config+0x110>)
    2b22:	4798      	blx	r3
    2b24:	1e03      	subs	r3, r0, #0
    2b26:	d1fb      	bne.n	2b20 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2b28:	4b0e      	ldr	r3, [pc, #56]	; (2b64 <system_gclk_gen_set_config+0x11c>)
    2b2a:	693a      	ldr	r2, [r7, #16]
    2b2c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    2b2e:	46c0      	nop			; (mov r8, r8)
    2b30:	4b09      	ldr	r3, [pc, #36]	; (2b58 <system_gclk_gen_set_config+0x110>)
    2b32:	4798      	blx	r3
    2b34:	1e03      	subs	r3, r0, #0
    2b36:	d1fb      	bne.n	2b30 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2b38:	4b0a      	ldr	r3, [pc, #40]	; (2b64 <system_gclk_gen_set_config+0x11c>)
    2b3a:	4a0a      	ldr	r2, [pc, #40]	; (2b64 <system_gclk_gen_set_config+0x11c>)
    2b3c:	6851      	ldr	r1, [r2, #4]
    2b3e:	2280      	movs	r2, #128	; 0x80
    2b40:	0252      	lsls	r2, r2, #9
    2b42:	4011      	ands	r1, r2
    2b44:	697a      	ldr	r2, [r7, #20]
    2b46:	430a      	orrs	r2, r1
    2b48:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    2b4a:	4b07      	ldr	r3, [pc, #28]	; (2b68 <system_gclk_gen_set_config+0x120>)
    2b4c:	4798      	blx	r3
}
    2b4e:	46c0      	nop			; (mov r8, r8)
    2b50:	46bd      	mov	sp, r7
    2b52:	b006      	add	sp, #24
    2b54:	bd80      	pop	{r7, pc}
    2b56:	46c0      	nop			; (mov r8, r8)
    2b58:	000029f9 	.word	0x000029f9
    2b5c:	000029d1 	.word	0x000029d1
    2b60:	40000c08 	.word	0x40000c08
    2b64:	40000c00 	.word	0x40000c00
    2b68:	000029e5 	.word	0x000029e5

00002b6c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2b6c:	b580      	push	{r7, lr}
    2b6e:	b082      	sub	sp, #8
    2b70:	af00      	add	r7, sp, #0
    2b72:	0002      	movs	r2, r0
    2b74:	1dfb      	adds	r3, r7, #7
    2b76:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    2b78:	46c0      	nop			; (mov r8, r8)
    2b7a:	4b0e      	ldr	r3, [pc, #56]	; (2bb4 <system_gclk_gen_enable+0x48>)
    2b7c:	4798      	blx	r3
    2b7e:	1e03      	subs	r3, r0, #0
    2b80:	d1fb      	bne.n	2b7a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2b82:	4b0d      	ldr	r3, [pc, #52]	; (2bb8 <system_gclk_gen_enable+0x4c>)
    2b84:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2b86:	4a0d      	ldr	r2, [pc, #52]	; (2bbc <system_gclk_gen_enable+0x50>)
    2b88:	1dfb      	adds	r3, r7, #7
    2b8a:	781b      	ldrb	r3, [r3, #0]
    2b8c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    2b8e:	46c0      	nop			; (mov r8, r8)
    2b90:	4b08      	ldr	r3, [pc, #32]	; (2bb4 <system_gclk_gen_enable+0x48>)
    2b92:	4798      	blx	r3
    2b94:	1e03      	subs	r3, r0, #0
    2b96:	d1fb      	bne.n	2b90 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2b98:	4b09      	ldr	r3, [pc, #36]	; (2bc0 <system_gclk_gen_enable+0x54>)
    2b9a:	4a09      	ldr	r2, [pc, #36]	; (2bc0 <system_gclk_gen_enable+0x54>)
    2b9c:	6852      	ldr	r2, [r2, #4]
    2b9e:	2180      	movs	r1, #128	; 0x80
    2ba0:	0249      	lsls	r1, r1, #9
    2ba2:	430a      	orrs	r2, r1
    2ba4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    2ba6:	4b07      	ldr	r3, [pc, #28]	; (2bc4 <system_gclk_gen_enable+0x58>)
    2ba8:	4798      	blx	r3
}
    2baa:	46c0      	nop			; (mov r8, r8)
    2bac:	46bd      	mov	sp, r7
    2bae:	b002      	add	sp, #8
    2bb0:	bd80      	pop	{r7, pc}
    2bb2:	46c0      	nop			; (mov r8, r8)
    2bb4:	000029f9 	.word	0x000029f9
    2bb8:	000029d1 	.word	0x000029d1
    2bbc:	40000c04 	.word	0x40000c04
    2bc0:	40000c00 	.word	0x40000c00
    2bc4:	000029e5 	.word	0x000029e5

00002bc8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2bc8:	b580      	push	{r7, lr}
    2bca:	b086      	sub	sp, #24
    2bcc:	af00      	add	r7, sp, #0
    2bce:	0002      	movs	r2, r0
    2bd0:	1dfb      	adds	r3, r7, #7
    2bd2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    2bd4:	46c0      	nop			; (mov r8, r8)
    2bd6:	4b2a      	ldr	r3, [pc, #168]	; (2c80 <system_gclk_gen_get_hz+0xb8>)
    2bd8:	4798      	blx	r3
    2bda:	1e03      	subs	r3, r0, #0
    2bdc:	d1fb      	bne.n	2bd6 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2bde:	4b29      	ldr	r3, [pc, #164]	; (2c84 <system_gclk_gen_get_hz+0xbc>)
    2be0:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2be2:	4a29      	ldr	r2, [pc, #164]	; (2c88 <system_gclk_gen_get_hz+0xc0>)
    2be4:	1dfb      	adds	r3, r7, #7
    2be6:	781b      	ldrb	r3, [r3, #0]
    2be8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    2bea:	46c0      	nop			; (mov r8, r8)
    2bec:	4b24      	ldr	r3, [pc, #144]	; (2c80 <system_gclk_gen_get_hz+0xb8>)
    2bee:	4798      	blx	r3
    2bf0:	1e03      	subs	r3, r0, #0
    2bf2:	d1fb      	bne.n	2bec <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2bf4:	4b25      	ldr	r3, [pc, #148]	; (2c8c <system_gclk_gen_get_hz+0xc4>)
    2bf6:	685b      	ldr	r3, [r3, #4]
    2bf8:	04db      	lsls	r3, r3, #19
    2bfa:	0edb      	lsrs	r3, r3, #27
    2bfc:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2bfe:	0018      	movs	r0, r3
    2c00:	4b23      	ldr	r3, [pc, #140]	; (2c90 <system_gclk_gen_get_hz+0xc8>)
    2c02:	4798      	blx	r3
    2c04:	0003      	movs	r3, r0
    2c06:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2c08:	4a1f      	ldr	r2, [pc, #124]	; (2c88 <system_gclk_gen_get_hz+0xc0>)
    2c0a:	1dfb      	adds	r3, r7, #7
    2c0c:	781b      	ldrb	r3, [r3, #0]
    2c0e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2c10:	4b1e      	ldr	r3, [pc, #120]	; (2c8c <system_gclk_gen_get_hz+0xc4>)
    2c12:	685b      	ldr	r3, [r3, #4]
    2c14:	02db      	lsls	r3, r3, #11
    2c16:	0fdb      	lsrs	r3, r3, #31
    2c18:	b2da      	uxtb	r2, r3
    2c1a:	2313      	movs	r3, #19
    2c1c:	18fb      	adds	r3, r7, r3
    2c1e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2c20:	4a1c      	ldr	r2, [pc, #112]	; (2c94 <system_gclk_gen_get_hz+0xcc>)
    2c22:	1dfb      	adds	r3, r7, #7
    2c24:	781b      	ldrb	r3, [r3, #0]
    2c26:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    2c28:	46c0      	nop			; (mov r8, r8)
    2c2a:	4b15      	ldr	r3, [pc, #84]	; (2c80 <system_gclk_gen_get_hz+0xb8>)
    2c2c:	4798      	blx	r3
    2c2e:	1e03      	subs	r3, r0, #0
    2c30:	d1fb      	bne.n	2c2a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2c32:	4b16      	ldr	r3, [pc, #88]	; (2c8c <system_gclk_gen_get_hz+0xc4>)
    2c34:	689b      	ldr	r3, [r3, #8]
    2c36:	021b      	lsls	r3, r3, #8
    2c38:	0c1b      	lsrs	r3, r3, #16
    2c3a:	b29b      	uxth	r3, r3
    2c3c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    2c3e:	4b16      	ldr	r3, [pc, #88]	; (2c98 <system_gclk_gen_get_hz+0xd0>)
    2c40:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2c42:	2313      	movs	r3, #19
    2c44:	18fb      	adds	r3, r7, r3
    2c46:	781b      	ldrb	r3, [r3, #0]
    2c48:	2b00      	cmp	r3, #0
    2c4a:	d109      	bne.n	2c60 <system_gclk_gen_get_hz+0x98>
    2c4c:	68fb      	ldr	r3, [r7, #12]
    2c4e:	2b01      	cmp	r3, #1
    2c50:	d906      	bls.n	2c60 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    2c52:	4b12      	ldr	r3, [pc, #72]	; (2c9c <system_gclk_gen_get_hz+0xd4>)
    2c54:	68f9      	ldr	r1, [r7, #12]
    2c56:	6978      	ldr	r0, [r7, #20]
    2c58:	4798      	blx	r3
    2c5a:	0003      	movs	r3, r0
    2c5c:	617b      	str	r3, [r7, #20]
    2c5e:	e00a      	b.n	2c76 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    2c60:	2313      	movs	r3, #19
    2c62:	18fb      	adds	r3, r7, r3
    2c64:	781b      	ldrb	r3, [r3, #0]
    2c66:	2b00      	cmp	r3, #0
    2c68:	d005      	beq.n	2c76 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    2c6a:	68fb      	ldr	r3, [r7, #12]
    2c6c:	3301      	adds	r3, #1
    2c6e:	697a      	ldr	r2, [r7, #20]
    2c70:	40da      	lsrs	r2, r3
    2c72:	0013      	movs	r3, r2
    2c74:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    2c76:	697b      	ldr	r3, [r7, #20]
}
    2c78:	0018      	movs	r0, r3
    2c7a:	46bd      	mov	sp, r7
    2c7c:	b006      	add	sp, #24
    2c7e:	bd80      	pop	{r7, pc}
    2c80:	000029f9 	.word	0x000029f9
    2c84:	000029d1 	.word	0x000029d1
    2c88:	40000c04 	.word	0x40000c04
    2c8c:	40000c00 	.word	0x40000c00
    2c90:	0000264d 	.word	0x0000264d
    2c94:	40000c08 	.word	0x40000c08
    2c98:	000029e5 	.word	0x000029e5
    2c9c:	00003895 	.word	0x00003895

00002ca0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    2ca0:	b580      	push	{r7, lr}
    2ca2:	b084      	sub	sp, #16
    2ca4:	af00      	add	r7, sp, #0
    2ca6:	0002      	movs	r2, r0
    2ca8:	6039      	str	r1, [r7, #0]
    2caa:	1dfb      	adds	r3, r7, #7
    2cac:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    2cae:	1dfb      	adds	r3, r7, #7
    2cb0:	781b      	ldrb	r3, [r3, #0]
    2cb2:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2cb4:	683b      	ldr	r3, [r7, #0]
    2cb6:	781b      	ldrb	r3, [r3, #0]
    2cb8:	021b      	lsls	r3, r3, #8
    2cba:	001a      	movs	r2, r3
    2cbc:	68fb      	ldr	r3, [r7, #12]
    2cbe:	4313      	orrs	r3, r2
    2cc0:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    2cc2:	1dfb      	adds	r3, r7, #7
    2cc4:	781b      	ldrb	r3, [r3, #0]
    2cc6:	0018      	movs	r0, r3
    2cc8:	4b04      	ldr	r3, [pc, #16]	; (2cdc <system_gclk_chan_set_config+0x3c>)
    2cca:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2ccc:	4b04      	ldr	r3, [pc, #16]	; (2ce0 <system_gclk_chan_set_config+0x40>)
    2cce:	68fa      	ldr	r2, [r7, #12]
    2cd0:	b292      	uxth	r2, r2
    2cd2:	805a      	strh	r2, [r3, #2]
}
    2cd4:	46c0      	nop			; (mov r8, r8)
    2cd6:	46bd      	mov	sp, r7
    2cd8:	b004      	add	sp, #16
    2cda:	bd80      	pop	{r7, pc}
    2cdc:	00002d2d 	.word	0x00002d2d
    2ce0:	40000c00 	.word	0x40000c00

00002ce4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2ce4:	b580      	push	{r7, lr}
    2ce6:	b082      	sub	sp, #8
    2ce8:	af00      	add	r7, sp, #0
    2cea:	0002      	movs	r2, r0
    2cec:	1dfb      	adds	r3, r7, #7
    2cee:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    2cf0:	4b0a      	ldr	r3, [pc, #40]	; (2d1c <system_gclk_chan_enable+0x38>)
    2cf2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2cf4:	4a0a      	ldr	r2, [pc, #40]	; (2d20 <system_gclk_chan_enable+0x3c>)
    2cf6:	1dfb      	adds	r3, r7, #7
    2cf8:	781b      	ldrb	r3, [r3, #0]
    2cfa:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2cfc:	4909      	ldr	r1, [pc, #36]	; (2d24 <system_gclk_chan_enable+0x40>)
    2cfe:	4b09      	ldr	r3, [pc, #36]	; (2d24 <system_gclk_chan_enable+0x40>)
    2d00:	885b      	ldrh	r3, [r3, #2]
    2d02:	b29b      	uxth	r3, r3
    2d04:	2280      	movs	r2, #128	; 0x80
    2d06:	01d2      	lsls	r2, r2, #7
    2d08:	4313      	orrs	r3, r2
    2d0a:	b29b      	uxth	r3, r3
    2d0c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    2d0e:	4b06      	ldr	r3, [pc, #24]	; (2d28 <system_gclk_chan_enable+0x44>)
    2d10:	4798      	blx	r3
}
    2d12:	46c0      	nop			; (mov r8, r8)
    2d14:	46bd      	mov	sp, r7
    2d16:	b002      	add	sp, #8
    2d18:	bd80      	pop	{r7, pc}
    2d1a:	46c0      	nop			; (mov r8, r8)
    2d1c:	000029d1 	.word	0x000029d1
    2d20:	40000c02 	.word	0x40000c02
    2d24:	40000c00 	.word	0x40000c00
    2d28:	000029e5 	.word	0x000029e5

00002d2c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2d2c:	b580      	push	{r7, lr}
    2d2e:	b084      	sub	sp, #16
    2d30:	af00      	add	r7, sp, #0
    2d32:	0002      	movs	r2, r0
    2d34:	1dfb      	adds	r3, r7, #7
    2d36:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    2d38:	4b1c      	ldr	r3, [pc, #112]	; (2dac <system_gclk_chan_disable+0x80>)
    2d3a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2d3c:	4a1c      	ldr	r2, [pc, #112]	; (2db0 <system_gclk_chan_disable+0x84>)
    2d3e:	1dfb      	adds	r3, r7, #7
    2d40:	781b      	ldrb	r3, [r3, #0]
    2d42:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2d44:	4b1b      	ldr	r3, [pc, #108]	; (2db4 <system_gclk_chan_disable+0x88>)
    2d46:	885b      	ldrh	r3, [r3, #2]
    2d48:	051b      	lsls	r3, r3, #20
    2d4a:	0f1b      	lsrs	r3, r3, #28
    2d4c:	b2db      	uxtb	r3, r3
    2d4e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    2d50:	4a18      	ldr	r2, [pc, #96]	; (2db4 <system_gclk_chan_disable+0x88>)
    2d52:	8853      	ldrh	r3, [r2, #2]
    2d54:	4918      	ldr	r1, [pc, #96]	; (2db8 <system_gclk_chan_disable+0x8c>)
    2d56:	400b      	ands	r3, r1
    2d58:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2d5a:	4a16      	ldr	r2, [pc, #88]	; (2db4 <system_gclk_chan_disable+0x88>)
    2d5c:	4b15      	ldr	r3, [pc, #84]	; (2db4 <system_gclk_chan_disable+0x88>)
    2d5e:	885b      	ldrh	r3, [r3, #2]
    2d60:	b29b      	uxth	r3, r3
    2d62:	4916      	ldr	r1, [pc, #88]	; (2dbc <system_gclk_chan_disable+0x90>)
    2d64:	400b      	ands	r3, r1
    2d66:	b29b      	uxth	r3, r3
    2d68:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2d6a:	46c0      	nop			; (mov r8, r8)
    2d6c:	4b11      	ldr	r3, [pc, #68]	; (2db4 <system_gclk_chan_disable+0x88>)
    2d6e:	885b      	ldrh	r3, [r3, #2]
    2d70:	b29b      	uxth	r3, r3
    2d72:	001a      	movs	r2, r3
    2d74:	2380      	movs	r3, #128	; 0x80
    2d76:	01db      	lsls	r3, r3, #7
    2d78:	4013      	ands	r3, r2
    2d7a:	d1f7      	bne.n	2d6c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2d7c:	4a0d      	ldr	r2, [pc, #52]	; (2db4 <system_gclk_chan_disable+0x88>)
    2d7e:	68fb      	ldr	r3, [r7, #12]
    2d80:	b2db      	uxtb	r3, r3
    2d82:	1c19      	adds	r1, r3, #0
    2d84:	230f      	movs	r3, #15
    2d86:	400b      	ands	r3, r1
    2d88:	b2d9      	uxtb	r1, r3
    2d8a:	8853      	ldrh	r3, [r2, #2]
    2d8c:	1c08      	adds	r0, r1, #0
    2d8e:	210f      	movs	r1, #15
    2d90:	4001      	ands	r1, r0
    2d92:	0208      	lsls	r0, r1, #8
    2d94:	4908      	ldr	r1, [pc, #32]	; (2db8 <system_gclk_chan_disable+0x8c>)
    2d96:	400b      	ands	r3, r1
    2d98:	1c19      	adds	r1, r3, #0
    2d9a:	1c03      	adds	r3, r0, #0
    2d9c:	430b      	orrs	r3, r1
    2d9e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    2da0:	4b07      	ldr	r3, [pc, #28]	; (2dc0 <system_gclk_chan_disable+0x94>)
    2da2:	4798      	blx	r3
}
    2da4:	46c0      	nop			; (mov r8, r8)
    2da6:	46bd      	mov	sp, r7
    2da8:	b004      	add	sp, #16
    2daa:	bd80      	pop	{r7, pc}
    2dac:	000029d1 	.word	0x000029d1
    2db0:	40000c02 	.word	0x40000c02
    2db4:	40000c00 	.word	0x40000c00
    2db8:	fffff0ff 	.word	0xfffff0ff
    2dbc:	ffffbfff 	.word	0xffffbfff
    2dc0:	000029e5 	.word	0x000029e5

00002dc4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2dc4:	b580      	push	{r7, lr}
    2dc6:	b084      	sub	sp, #16
    2dc8:	af00      	add	r7, sp, #0
    2dca:	0002      	movs	r2, r0
    2dcc:	1dfb      	adds	r3, r7, #7
    2dce:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    2dd0:	4b0d      	ldr	r3, [pc, #52]	; (2e08 <system_gclk_chan_get_hz+0x44>)
    2dd2:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2dd4:	4a0d      	ldr	r2, [pc, #52]	; (2e0c <system_gclk_chan_get_hz+0x48>)
    2dd6:	1dfb      	adds	r3, r7, #7
    2dd8:	781b      	ldrb	r3, [r3, #0]
    2dda:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2ddc:	4b0c      	ldr	r3, [pc, #48]	; (2e10 <system_gclk_chan_get_hz+0x4c>)
    2dde:	885b      	ldrh	r3, [r3, #2]
    2de0:	051b      	lsls	r3, r3, #20
    2de2:	0f1b      	lsrs	r3, r3, #28
    2de4:	b2da      	uxtb	r2, r3
    2de6:	230f      	movs	r3, #15
    2de8:	18fb      	adds	r3, r7, r3
    2dea:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    2dec:	4b09      	ldr	r3, [pc, #36]	; (2e14 <system_gclk_chan_get_hz+0x50>)
    2dee:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2df0:	230f      	movs	r3, #15
    2df2:	18fb      	adds	r3, r7, r3
    2df4:	781b      	ldrb	r3, [r3, #0]
    2df6:	0018      	movs	r0, r3
    2df8:	4b07      	ldr	r3, [pc, #28]	; (2e18 <system_gclk_chan_get_hz+0x54>)
    2dfa:	4798      	blx	r3
    2dfc:	0003      	movs	r3, r0
}
    2dfe:	0018      	movs	r0, r3
    2e00:	46bd      	mov	sp, r7
    2e02:	b004      	add	sp, #16
    2e04:	bd80      	pop	{r7, pc}
    2e06:	46c0      	nop			; (mov r8, r8)
    2e08:	000029d1 	.word	0x000029d1
    2e0c:	40000c02 	.word	0x40000c02
    2e10:	40000c00 	.word	0x40000c00
    2e14:	000029e5 	.word	0x000029e5
    2e18:	00002bc9 	.word	0x00002bc9

00002e1c <system_pinmux_get_group_from_gpio_pin>:
{
    2e1c:	b580      	push	{r7, lr}
    2e1e:	b084      	sub	sp, #16
    2e20:	af00      	add	r7, sp, #0
    2e22:	0002      	movs	r2, r0
    2e24:	1dfb      	adds	r3, r7, #7
    2e26:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2e28:	230f      	movs	r3, #15
    2e2a:	18fb      	adds	r3, r7, r3
    2e2c:	1dfa      	adds	r2, r7, #7
    2e2e:	7812      	ldrb	r2, [r2, #0]
    2e30:	09d2      	lsrs	r2, r2, #7
    2e32:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2e34:	230e      	movs	r3, #14
    2e36:	18fb      	adds	r3, r7, r3
    2e38:	1dfa      	adds	r2, r7, #7
    2e3a:	7812      	ldrb	r2, [r2, #0]
    2e3c:	0952      	lsrs	r2, r2, #5
    2e3e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2e40:	4b0d      	ldr	r3, [pc, #52]	; (2e78 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2e42:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    2e44:	230f      	movs	r3, #15
    2e46:	18fb      	adds	r3, r7, r3
    2e48:	781b      	ldrb	r3, [r3, #0]
    2e4a:	2b00      	cmp	r3, #0
    2e4c:	d10f      	bne.n	2e6e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2e4e:	230f      	movs	r3, #15
    2e50:	18fb      	adds	r3, r7, r3
    2e52:	781b      	ldrb	r3, [r3, #0]
    2e54:	009b      	lsls	r3, r3, #2
    2e56:	2210      	movs	r2, #16
    2e58:	4694      	mov	ip, r2
    2e5a:	44bc      	add	ip, r7
    2e5c:	4463      	add	r3, ip
    2e5e:	3b08      	subs	r3, #8
    2e60:	681a      	ldr	r2, [r3, #0]
    2e62:	230e      	movs	r3, #14
    2e64:	18fb      	adds	r3, r7, r3
    2e66:	781b      	ldrb	r3, [r3, #0]
    2e68:	01db      	lsls	r3, r3, #7
    2e6a:	18d3      	adds	r3, r2, r3
    2e6c:	e000      	b.n	2e70 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    2e6e:	2300      	movs	r3, #0
}
    2e70:	0018      	movs	r0, r3
    2e72:	46bd      	mov	sp, r7
    2e74:	b004      	add	sp, #16
    2e76:	bd80      	pop	{r7, pc}
    2e78:	41004400 	.word	0x41004400

00002e7c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2e7c:	b580      	push	{r7, lr}
    2e7e:	b088      	sub	sp, #32
    2e80:	af00      	add	r7, sp, #0
    2e82:	60f8      	str	r0, [r7, #12]
    2e84:	60b9      	str	r1, [r7, #8]
    2e86:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    2e88:	2300      	movs	r3, #0
    2e8a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2e8c:	687b      	ldr	r3, [r7, #4]
    2e8e:	78db      	ldrb	r3, [r3, #3]
    2e90:	2201      	movs	r2, #1
    2e92:	4053      	eors	r3, r2
    2e94:	b2db      	uxtb	r3, r3
    2e96:	2b00      	cmp	r3, #0
    2e98:	d035      	beq.n	2f06 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2e9a:	687b      	ldr	r3, [r7, #4]
    2e9c:	781b      	ldrb	r3, [r3, #0]
    2e9e:	2b80      	cmp	r3, #128	; 0x80
    2ea0:	d00b      	beq.n	2eba <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    2ea2:	69fb      	ldr	r3, [r7, #28]
    2ea4:	2280      	movs	r2, #128	; 0x80
    2ea6:	0252      	lsls	r2, r2, #9
    2ea8:	4313      	orrs	r3, r2
    2eaa:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2eac:	687b      	ldr	r3, [r7, #4]
    2eae:	781b      	ldrb	r3, [r3, #0]
    2eb0:	061b      	lsls	r3, r3, #24
    2eb2:	001a      	movs	r2, r3
    2eb4:	69fb      	ldr	r3, [r7, #28]
    2eb6:	4313      	orrs	r3, r2
    2eb8:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2eba:	687b      	ldr	r3, [r7, #4]
    2ebc:	785b      	ldrb	r3, [r3, #1]
    2ebe:	2b00      	cmp	r3, #0
    2ec0:	d003      	beq.n	2eca <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2ec2:	687b      	ldr	r3, [r7, #4]
    2ec4:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2ec6:	2b02      	cmp	r3, #2
    2ec8:	d110      	bne.n	2eec <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    2eca:	69fb      	ldr	r3, [r7, #28]
    2ecc:	2280      	movs	r2, #128	; 0x80
    2ece:	0292      	lsls	r2, r2, #10
    2ed0:	4313      	orrs	r3, r2
    2ed2:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2ed4:	687b      	ldr	r3, [r7, #4]
    2ed6:	789b      	ldrb	r3, [r3, #2]
    2ed8:	2b00      	cmp	r3, #0
    2eda:	d004      	beq.n	2ee6 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2edc:	69fb      	ldr	r3, [r7, #28]
    2ede:	2280      	movs	r2, #128	; 0x80
    2ee0:	02d2      	lsls	r2, r2, #11
    2ee2:	4313      	orrs	r3, r2
    2ee4:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2ee6:	68fb      	ldr	r3, [r7, #12]
    2ee8:	68ba      	ldr	r2, [r7, #8]
    2eea:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2eec:	687b      	ldr	r3, [r7, #4]
    2eee:	785b      	ldrb	r3, [r3, #1]
    2ef0:	2b01      	cmp	r3, #1
    2ef2:	d003      	beq.n	2efc <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2ef4:	687b      	ldr	r3, [r7, #4]
    2ef6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2ef8:	2b02      	cmp	r3, #2
    2efa:	d107      	bne.n	2f0c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2efc:	69fb      	ldr	r3, [r7, #28]
    2efe:	4a22      	ldr	r2, [pc, #136]	; (2f88 <_system_pinmux_config+0x10c>)
    2f00:	4013      	ands	r3, r2
    2f02:	61fb      	str	r3, [r7, #28]
    2f04:	e002      	b.n	2f0c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    2f06:	68fb      	ldr	r3, [r7, #12]
    2f08:	68ba      	ldr	r2, [r7, #8]
    2f0a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2f0c:	68bb      	ldr	r3, [r7, #8]
    2f0e:	041b      	lsls	r3, r3, #16
    2f10:	0c1b      	lsrs	r3, r3, #16
    2f12:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2f14:	68bb      	ldr	r3, [r7, #8]
    2f16:	0c1b      	lsrs	r3, r3, #16
    2f18:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2f1a:	69ba      	ldr	r2, [r7, #24]
    2f1c:	69fb      	ldr	r3, [r7, #28]
    2f1e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2f20:	22a0      	movs	r2, #160	; 0xa0
    2f22:	05d2      	lsls	r2, r2, #23
    2f24:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2f26:	68fb      	ldr	r3, [r7, #12]
    2f28:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2f2a:	697a      	ldr	r2, [r7, #20]
    2f2c:	69fb      	ldr	r3, [r7, #28]
    2f2e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2f30:	22d0      	movs	r2, #208	; 0xd0
    2f32:	0612      	lsls	r2, r2, #24
    2f34:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2f36:	68fb      	ldr	r3, [r7, #12]
    2f38:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2f3a:	687b      	ldr	r3, [r7, #4]
    2f3c:	78db      	ldrb	r3, [r3, #3]
    2f3e:	2201      	movs	r2, #1
    2f40:	4053      	eors	r3, r2
    2f42:	b2db      	uxtb	r3, r3
    2f44:	2b00      	cmp	r3, #0
    2f46:	d01a      	beq.n	2f7e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2f48:	69fa      	ldr	r2, [r7, #28]
    2f4a:	2380      	movs	r3, #128	; 0x80
    2f4c:	02db      	lsls	r3, r3, #11
    2f4e:	4013      	ands	r3, r2
    2f50:	d00a      	beq.n	2f68 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2f52:	687b      	ldr	r3, [r7, #4]
    2f54:	789b      	ldrb	r3, [r3, #2]
    2f56:	2b01      	cmp	r3, #1
    2f58:	d103      	bne.n	2f62 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    2f5a:	68fb      	ldr	r3, [r7, #12]
    2f5c:	68ba      	ldr	r2, [r7, #8]
    2f5e:	619a      	str	r2, [r3, #24]
    2f60:	e002      	b.n	2f68 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    2f62:	68fb      	ldr	r3, [r7, #12]
    2f64:	68ba      	ldr	r2, [r7, #8]
    2f66:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2f68:	687b      	ldr	r3, [r7, #4]
    2f6a:	785b      	ldrb	r3, [r3, #1]
    2f6c:	2b01      	cmp	r3, #1
    2f6e:	d003      	beq.n	2f78 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2f70:	687b      	ldr	r3, [r7, #4]
    2f72:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2f74:	2b02      	cmp	r3, #2
    2f76:	d102      	bne.n	2f7e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    2f78:	68fb      	ldr	r3, [r7, #12]
    2f7a:	68ba      	ldr	r2, [r7, #8]
    2f7c:	609a      	str	r2, [r3, #8]
		}
	}
}
    2f7e:	46c0      	nop			; (mov r8, r8)
    2f80:	46bd      	mov	sp, r7
    2f82:	b008      	add	sp, #32
    2f84:	bd80      	pop	{r7, pc}
    2f86:	46c0      	nop			; (mov r8, r8)
    2f88:	fffbffff 	.word	0xfffbffff

00002f8c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2f8c:	b580      	push	{r7, lr}
    2f8e:	b084      	sub	sp, #16
    2f90:	af00      	add	r7, sp, #0
    2f92:	0002      	movs	r2, r0
    2f94:	6039      	str	r1, [r7, #0]
    2f96:	1dfb      	adds	r3, r7, #7
    2f98:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2f9a:	1dfb      	adds	r3, r7, #7
    2f9c:	781b      	ldrb	r3, [r3, #0]
    2f9e:	0018      	movs	r0, r3
    2fa0:	4b0a      	ldr	r3, [pc, #40]	; (2fcc <system_pinmux_pin_set_config+0x40>)
    2fa2:	4798      	blx	r3
    2fa4:	0003      	movs	r3, r0
    2fa6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2fa8:	1dfb      	adds	r3, r7, #7
    2faa:	781b      	ldrb	r3, [r3, #0]
    2fac:	221f      	movs	r2, #31
    2fae:	4013      	ands	r3, r2
    2fb0:	2201      	movs	r2, #1
    2fb2:	409a      	lsls	r2, r3
    2fb4:	0013      	movs	r3, r2
    2fb6:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    2fb8:	683a      	ldr	r2, [r7, #0]
    2fba:	68b9      	ldr	r1, [r7, #8]
    2fbc:	68fb      	ldr	r3, [r7, #12]
    2fbe:	0018      	movs	r0, r3
    2fc0:	4b03      	ldr	r3, [pc, #12]	; (2fd0 <system_pinmux_pin_set_config+0x44>)
    2fc2:	4798      	blx	r3
}
    2fc4:	46c0      	nop			; (mov r8, r8)
    2fc6:	46bd      	mov	sp, r7
    2fc8:	b004      	add	sp, #16
    2fca:	bd80      	pop	{r7, pc}
    2fcc:	00002e1d 	.word	0x00002e1d
    2fd0:	00002e7d 	.word	0x00002e7d

00002fd4 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    2fd4:	b580      	push	{r7, lr}
    2fd6:	af00      	add	r7, sp, #0
	return;
    2fd8:	46c0      	nop			; (mov r8, r8)
}
    2fda:	46bd      	mov	sp, r7
    2fdc:	bd80      	pop	{r7, pc}
	...

00002fe0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2fe0:	b580      	push	{r7, lr}
    2fe2:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2fe4:	4b06      	ldr	r3, [pc, #24]	; (3000 <system_init+0x20>)
    2fe6:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2fe8:	4b06      	ldr	r3, [pc, #24]	; (3004 <system_init+0x24>)
    2fea:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2fec:	4b06      	ldr	r3, [pc, #24]	; (3008 <system_init+0x28>)
    2fee:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2ff0:	4b06      	ldr	r3, [pc, #24]	; (300c <system_init+0x2c>)
    2ff2:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2ff4:	4b06      	ldr	r3, [pc, #24]	; (3010 <system_init+0x30>)
    2ff6:	4798      	blx	r3
}
    2ff8:	46c0      	nop			; (mov r8, r8)
    2ffa:	46bd      	mov	sp, r7
    2ffc:	bd80      	pop	{r7, pc}
    2ffe:	46c0      	nop			; (mov r8, r8)
    3000:	00002865 	.word	0x00002865
    3004:	00000361 	.word	0x00000361
    3008:	00002fd5 	.word	0x00002fd5
    300c:	00002fd5 	.word	0x00002fd5
    3010:	00002fd5 	.word	0x00002fd5

00003014 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    3014:	b580      	push	{r7, lr}
    3016:	b082      	sub	sp, #8
    3018:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    301a:	4b2f      	ldr	r3, [pc, #188]	; (30d8 <Reset_Handler+0xc4>)
    301c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    301e:	4b2f      	ldr	r3, [pc, #188]	; (30dc <Reset_Handler+0xc8>)
    3020:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    3022:	687a      	ldr	r2, [r7, #4]
    3024:	683b      	ldr	r3, [r7, #0]
    3026:	429a      	cmp	r2, r3
    3028:	d00c      	beq.n	3044 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    302a:	e007      	b.n	303c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    302c:	683b      	ldr	r3, [r7, #0]
    302e:	1d1a      	adds	r2, r3, #4
    3030:	603a      	str	r2, [r7, #0]
    3032:	687a      	ldr	r2, [r7, #4]
    3034:	1d11      	adds	r1, r2, #4
    3036:	6079      	str	r1, [r7, #4]
    3038:	6812      	ldr	r2, [r2, #0]
    303a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    303c:	683a      	ldr	r2, [r7, #0]
    303e:	4b28      	ldr	r3, [pc, #160]	; (30e0 <Reset_Handler+0xcc>)
    3040:	429a      	cmp	r2, r3
    3042:	d3f3      	bcc.n	302c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3044:	4b27      	ldr	r3, [pc, #156]	; (30e4 <Reset_Handler+0xd0>)
    3046:	603b      	str	r3, [r7, #0]
    3048:	e004      	b.n	3054 <Reset_Handler+0x40>
                *pDest++ = 0;
    304a:	683b      	ldr	r3, [r7, #0]
    304c:	1d1a      	adds	r2, r3, #4
    304e:	603a      	str	r2, [r7, #0]
    3050:	2200      	movs	r2, #0
    3052:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    3054:	683a      	ldr	r2, [r7, #0]
    3056:	4b24      	ldr	r3, [pc, #144]	; (30e8 <Reset_Handler+0xd4>)
    3058:	429a      	cmp	r2, r3
    305a:	d3f6      	bcc.n	304a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    305c:	4b23      	ldr	r3, [pc, #140]	; (30ec <Reset_Handler+0xd8>)
    305e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3060:	4b23      	ldr	r3, [pc, #140]	; (30f0 <Reset_Handler+0xdc>)
    3062:	687a      	ldr	r2, [r7, #4]
    3064:	21ff      	movs	r1, #255	; 0xff
    3066:	438a      	bics	r2, r1
    3068:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    306a:	4a22      	ldr	r2, [pc, #136]	; (30f4 <Reset_Handler+0xe0>)
    306c:	2390      	movs	r3, #144	; 0x90
    306e:	005b      	lsls	r3, r3, #1
    3070:	2102      	movs	r1, #2
    3072:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3074:	4a20      	ldr	r2, [pc, #128]	; (30f8 <Reset_Handler+0xe4>)
    3076:	78d3      	ldrb	r3, [r2, #3]
    3078:	2103      	movs	r1, #3
    307a:	438b      	bics	r3, r1
    307c:	1c19      	adds	r1, r3, #0
    307e:	2302      	movs	r3, #2
    3080:	430b      	orrs	r3, r1
    3082:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3084:	4a1c      	ldr	r2, [pc, #112]	; (30f8 <Reset_Handler+0xe4>)
    3086:	78d3      	ldrb	r3, [r2, #3]
    3088:	210c      	movs	r1, #12
    308a:	438b      	bics	r3, r1
    308c:	1c19      	adds	r1, r3, #0
    308e:	2308      	movs	r3, #8
    3090:	430b      	orrs	r3, r1
    3092:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    3094:	4a19      	ldr	r2, [pc, #100]	; (30fc <Reset_Handler+0xe8>)
    3096:	7b93      	ldrb	r3, [r2, #14]
    3098:	2130      	movs	r1, #48	; 0x30
    309a:	438b      	bics	r3, r1
    309c:	1c19      	adds	r1, r3, #0
    309e:	2320      	movs	r3, #32
    30a0:	430b      	orrs	r3, r1
    30a2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    30a4:	4a15      	ldr	r2, [pc, #84]	; (30fc <Reset_Handler+0xe8>)
    30a6:	7b93      	ldrb	r3, [r2, #14]
    30a8:	210c      	movs	r1, #12
    30aa:	438b      	bics	r3, r1
    30ac:	1c19      	adds	r1, r3, #0
    30ae:	2308      	movs	r3, #8
    30b0:	430b      	orrs	r3, r1
    30b2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    30b4:	4a11      	ldr	r2, [pc, #68]	; (30fc <Reset_Handler+0xe8>)
    30b6:	7b93      	ldrb	r3, [r2, #14]
    30b8:	2103      	movs	r1, #3
    30ba:	438b      	bics	r3, r1
    30bc:	1c19      	adds	r1, r3, #0
    30be:	2302      	movs	r3, #2
    30c0:	430b      	orrs	r3, r1
    30c2:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    30c4:	4a0e      	ldr	r2, [pc, #56]	; (3100 <Reset_Handler+0xec>)
    30c6:	6853      	ldr	r3, [r2, #4]
    30c8:	2180      	movs	r1, #128	; 0x80
    30ca:	430b      	orrs	r3, r1
    30cc:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    30ce:	4b0d      	ldr	r3, [pc, #52]	; (3104 <Reset_Handler+0xf0>)
    30d0:	4798      	blx	r3

        /* Branch to main function */
        main();
    30d2:	4b0d      	ldr	r3, [pc, #52]	; (3108 <Reset_Handler+0xf4>)
    30d4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    30d6:	e7fe      	b.n	30d6 <Reset_Handler+0xc2>
    30d8:	00005fa0 	.word	0x00005fa0
    30dc:	20000000 	.word	0x20000000
    30e0:	20000070 	.word	0x20000070
    30e4:	20000070 	.word	0x20000070
    30e8:	20000174 	.word	0x20000174
    30ec:	00000000 	.word	0x00000000
    30f0:	e000ed00 	.word	0xe000ed00
    30f4:	41007000 	.word	0x41007000
    30f8:	41005000 	.word	0x41005000
    30fc:	41004800 	.word	0x41004800
    3100:	41004000 	.word	0x41004000
    3104:	000052c9 	.word	0x000052c9
    3108:	00003729 	.word	0x00003729

0000310c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    310c:	b580      	push	{r7, lr}
    310e:	af00      	add	r7, sp, #0
        while (1) {
    3110:	e7fe      	b.n	3110 <Dummy_Handler+0x4>
	...

00003114 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3114:	b580      	push	{r7, lr}
    3116:	b086      	sub	sp, #24
    3118:	af00      	add	r7, sp, #0
    311a:	60f8      	str	r0, [r7, #12]
    311c:	60b9      	str	r1, [r7, #8]
    311e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    3120:	2300      	movs	r3, #0
    3122:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    3124:	68fb      	ldr	r3, [r7, #12]
    3126:	2b00      	cmp	r3, #0
    3128:	d012      	beq.n	3150 <_read+0x3c>
		return -1;
    312a:	2301      	movs	r3, #1
    312c:	425b      	negs	r3, r3
    312e:	e013      	b.n	3158 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    3130:	4b0b      	ldr	r3, [pc, #44]	; (3160 <_read+0x4c>)
    3132:	681a      	ldr	r2, [r3, #0]
    3134:	4b0b      	ldr	r3, [pc, #44]	; (3164 <_read+0x50>)
    3136:	681b      	ldr	r3, [r3, #0]
    3138:	68b9      	ldr	r1, [r7, #8]
    313a:	0018      	movs	r0, r3
    313c:	4790      	blx	r2
		ptr++;
    313e:	68bb      	ldr	r3, [r7, #8]
    3140:	3301      	adds	r3, #1
    3142:	60bb      	str	r3, [r7, #8]
		nChars++;
    3144:	697b      	ldr	r3, [r7, #20]
    3146:	3301      	adds	r3, #1
    3148:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    314a:	687b      	ldr	r3, [r7, #4]
    314c:	3b01      	subs	r3, #1
    314e:	607b      	str	r3, [r7, #4]
    3150:	687b      	ldr	r3, [r7, #4]
    3152:	2b00      	cmp	r3, #0
    3154:	dcec      	bgt.n	3130 <_read+0x1c>
	}
	return nChars;
    3156:	697b      	ldr	r3, [r7, #20]
}
    3158:	0018      	movs	r0, r3
    315a:	46bd      	mov	sp, r7
    315c:	b006      	add	sp, #24
    315e:	bd80      	pop	{r7, pc}
    3160:	20000124 	.word	0x20000124
    3164:	2000012c 	.word	0x2000012c

00003168 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3168:	b580      	push	{r7, lr}
    316a:	b086      	sub	sp, #24
    316c:	af00      	add	r7, sp, #0
    316e:	60f8      	str	r0, [r7, #12]
    3170:	60b9      	str	r1, [r7, #8]
    3172:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    3174:	2300      	movs	r3, #0
    3176:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    3178:	68fb      	ldr	r3, [r7, #12]
    317a:	2b01      	cmp	r3, #1
    317c:	d01d      	beq.n	31ba <_write+0x52>
    317e:	68fb      	ldr	r3, [r7, #12]
    3180:	2b02      	cmp	r3, #2
    3182:	d01a      	beq.n	31ba <_write+0x52>
    3184:	68fb      	ldr	r3, [r7, #12]
    3186:	2b03      	cmp	r3, #3
    3188:	d017      	beq.n	31ba <_write+0x52>
		return -1;
    318a:	2301      	movs	r3, #1
    318c:	425b      	negs	r3, r3
    318e:	e018      	b.n	31c2 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3190:	4b0e      	ldr	r3, [pc, #56]	; (31cc <_write+0x64>)
    3192:	681a      	ldr	r2, [r3, #0]
    3194:	4b0e      	ldr	r3, [pc, #56]	; (31d0 <_write+0x68>)
    3196:	6818      	ldr	r0, [r3, #0]
    3198:	68bb      	ldr	r3, [r7, #8]
    319a:	1c59      	adds	r1, r3, #1
    319c:	60b9      	str	r1, [r7, #8]
    319e:	781b      	ldrb	r3, [r3, #0]
    31a0:	0019      	movs	r1, r3
    31a2:	4790      	blx	r2
    31a4:	1e03      	subs	r3, r0, #0
    31a6:	da02      	bge.n	31ae <_write+0x46>
			return -1;
    31a8:	2301      	movs	r3, #1
    31aa:	425b      	negs	r3, r3
    31ac:	e009      	b.n	31c2 <_write+0x5a>
		}
		++nChars;
    31ae:	697b      	ldr	r3, [r7, #20]
    31b0:	3301      	adds	r3, #1
    31b2:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    31b4:	687b      	ldr	r3, [r7, #4]
    31b6:	3b01      	subs	r3, #1
    31b8:	607b      	str	r3, [r7, #4]
    31ba:	687b      	ldr	r3, [r7, #4]
    31bc:	2b00      	cmp	r3, #0
    31be:	d1e7      	bne.n	3190 <_write+0x28>
	}
	return nChars;
    31c0:	697b      	ldr	r3, [r7, #20]
}
    31c2:	0018      	movs	r0, r3
    31c4:	46bd      	mov	sp, r7
    31c6:	b006      	add	sp, #24
    31c8:	bd80      	pop	{r7, pc}
    31ca:	46c0      	nop			; (mov r8, r8)
    31cc:	20000128 	.word	0x20000128
    31d0:	2000012c 	.word	0x2000012c

000031d4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    31d4:	b580      	push	{r7, lr}
    31d6:	b084      	sub	sp, #16
    31d8:	af00      	add	r7, sp, #0
    31da:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    31dc:	4b0a      	ldr	r3, [pc, #40]	; (3208 <_sbrk+0x34>)
    31de:	681b      	ldr	r3, [r3, #0]
    31e0:	2b00      	cmp	r3, #0
    31e2:	d102      	bne.n	31ea <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    31e4:	4b08      	ldr	r3, [pc, #32]	; (3208 <_sbrk+0x34>)
    31e6:	4a09      	ldr	r2, [pc, #36]	; (320c <_sbrk+0x38>)
    31e8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    31ea:	4b07      	ldr	r3, [pc, #28]	; (3208 <_sbrk+0x34>)
    31ec:	681b      	ldr	r3, [r3, #0]
    31ee:	60fb      	str	r3, [r7, #12]

	heap += incr;
    31f0:	4b05      	ldr	r3, [pc, #20]	; (3208 <_sbrk+0x34>)
    31f2:	681a      	ldr	r2, [r3, #0]
    31f4:	687b      	ldr	r3, [r7, #4]
    31f6:	18d2      	adds	r2, r2, r3
    31f8:	4b03      	ldr	r3, [pc, #12]	; (3208 <_sbrk+0x34>)
    31fa:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    31fc:	68fb      	ldr	r3, [r7, #12]
}
    31fe:	0018      	movs	r0, r3
    3200:	46bd      	mov	sp, r7
    3202:	b004      	add	sp, #16
    3204:	bd80      	pop	{r7, pc}
    3206:	46c0      	nop			; (mov r8, r8)
    3208:	200000c8 	.word	0x200000c8
    320c:	20002178 	.word	0x20002178

00003210 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    3210:	b580      	push	{r7, lr}
    3212:	b082      	sub	sp, #8
    3214:	af00      	add	r7, sp, #0
    3216:	6078      	str	r0, [r7, #4]
	return -1;
    3218:	2301      	movs	r3, #1
    321a:	425b      	negs	r3, r3
}
    321c:	0018      	movs	r0, r3
    321e:	46bd      	mov	sp, r7
    3220:	b002      	add	sp, #8
    3222:	bd80      	pop	{r7, pc}

00003224 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    3224:	b580      	push	{r7, lr}
    3226:	b082      	sub	sp, #8
    3228:	af00      	add	r7, sp, #0
    322a:	6078      	str	r0, [r7, #4]
    322c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    322e:	683b      	ldr	r3, [r7, #0]
    3230:	2280      	movs	r2, #128	; 0x80
    3232:	0192      	lsls	r2, r2, #6
    3234:	605a      	str	r2, [r3, #4]

	return 0;
    3236:	2300      	movs	r3, #0
}
    3238:	0018      	movs	r0, r3
    323a:	46bd      	mov	sp, r7
    323c:	b002      	add	sp, #8
    323e:	bd80      	pop	{r7, pc}

00003240 <_isatty>:

extern int _isatty(int file)
{
    3240:	b580      	push	{r7, lr}
    3242:	b082      	sub	sp, #8
    3244:	af00      	add	r7, sp, #0
    3246:	6078      	str	r0, [r7, #4]
	return 1;
    3248:	2301      	movs	r3, #1
}
    324a:	0018      	movs	r0, r3
    324c:	46bd      	mov	sp, r7
    324e:	b002      	add	sp, #8
    3250:	bd80      	pop	{r7, pc}

00003252 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    3252:	b580      	push	{r7, lr}
    3254:	b084      	sub	sp, #16
    3256:	af00      	add	r7, sp, #0
    3258:	60f8      	str	r0, [r7, #12]
    325a:	60b9      	str	r1, [r7, #8]
    325c:	607a      	str	r2, [r7, #4]
	return 0;
    325e:	2300      	movs	r3, #0
}
    3260:	0018      	movs	r0, r3
    3262:	46bd      	mov	sp, r7
    3264:	b004      	add	sp, #16
    3266:	bd80      	pop	{r7, pc}

00003268 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    3268:	b580      	push	{r7, lr}
    326a:	b082      	sub	sp, #8
    326c:	af00      	add	r7, sp, #0
    326e:	0002      	movs	r2, r0
    3270:	1dfb      	adds	r3, r7, #7
    3272:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3274:	4b06      	ldr	r3, [pc, #24]	; (3290 <system_interrupt_enable+0x28>)
    3276:	1dfa      	adds	r2, r7, #7
    3278:	7812      	ldrb	r2, [r2, #0]
    327a:	0011      	movs	r1, r2
    327c:	221f      	movs	r2, #31
    327e:	400a      	ands	r2, r1
    3280:	2101      	movs	r1, #1
    3282:	4091      	lsls	r1, r2
    3284:	000a      	movs	r2, r1
    3286:	601a      	str	r2, [r3, #0]
}
    3288:	46c0      	nop			; (mov r8, r8)
    328a:	46bd      	mov	sp, r7
    328c:	b002      	add	sp, #8
    328e:	bd80      	pop	{r7, pc}
    3290:	e000e100 	.word	0xe000e100

00003294 <i2c_master_is_syncing>:
{
    3294:	b580      	push	{r7, lr}
    3296:	b084      	sub	sp, #16
    3298:	af00      	add	r7, sp, #0
    329a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    329c:	687b      	ldr	r3, [r7, #4]
    329e:	681b      	ldr	r3, [r3, #0]
    32a0:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    32a2:	68fb      	ldr	r3, [r7, #12]
    32a4:	69db      	ldr	r3, [r3, #28]
    32a6:	2207      	movs	r2, #7
    32a8:	4013      	ands	r3, r2
    32aa:	1e5a      	subs	r2, r3, #1
    32ac:	4193      	sbcs	r3, r2
    32ae:	b2db      	uxtb	r3, r3
}
    32b0:	0018      	movs	r0, r3
    32b2:	46bd      	mov	sp, r7
    32b4:	b004      	add	sp, #16
    32b6:	bd80      	pop	{r7, pc}

000032b8 <_i2c_master_wait_for_sync>:
{
    32b8:	b580      	push	{r7, lr}
    32ba:	b082      	sub	sp, #8
    32bc:	af00      	add	r7, sp, #0
    32be:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    32c0:	46c0      	nop			; (mov r8, r8)
    32c2:	687b      	ldr	r3, [r7, #4]
    32c4:	0018      	movs	r0, r3
    32c6:	4b04      	ldr	r3, [pc, #16]	; (32d8 <_i2c_master_wait_for_sync+0x20>)
    32c8:	4798      	blx	r3
    32ca:	1e03      	subs	r3, r0, #0
    32cc:	d1f9      	bne.n	32c2 <_i2c_master_wait_for_sync+0xa>
}
    32ce:	46c0      	nop			; (mov r8, r8)
    32d0:	46bd      	mov	sp, r7
    32d2:	b002      	add	sp, #8
    32d4:	bd80      	pop	{r7, pc}
    32d6:	46c0      	nop			; (mov r8, r8)
    32d8:	00003295 	.word	0x00003295

000032dc <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    32dc:	b580      	push	{r7, lr}
    32de:	b082      	sub	sp, #8
    32e0:	af00      	add	r7, sp, #0
    32e2:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    32e4:	687b      	ldr	r3, [r7, #4]
    32e6:	2264      	movs	r2, #100	; 0x64
    32e8:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    32ea:	687b      	ldr	r3, [r7, #4]
    32ec:	4a1b      	ldr	r2, [pc, #108]	; (335c <i2c_master_get_config_defaults+0x80>)
    32ee:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    32f0:	687b      	ldr	r3, [r7, #4]
    32f2:	2200      	movs	r2, #0
    32f4:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    32f6:	687b      	ldr	r3, [r7, #4]
    32f8:	2200      	movs	r2, #0
    32fa:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    32fc:	687b      	ldr	r3, [r7, #4]
    32fe:	2200      	movs	r2, #0
    3300:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    3302:	687b      	ldr	r3, [r7, #4]
    3304:	2280      	movs	r2, #128	; 0x80
    3306:	0392      	lsls	r2, r2, #14
    3308:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    330a:	687b      	ldr	r3, [r7, #4]
    330c:	2201      	movs	r2, #1
    330e:	4252      	negs	r2, r2
    3310:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    3312:	687b      	ldr	r3, [r7, #4]
    3314:	2201      	movs	r2, #1
    3316:	4252      	negs	r2, r2
    3318:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    331a:	687b      	ldr	r3, [r7, #4]
    331c:	2200      	movs	r2, #0
    331e:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    3320:	687b      	ldr	r3, [r7, #4]
    3322:	2200      	movs	r2, #0
    3324:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    3326:	687b      	ldr	r3, [r7, #4]
    3328:	2224      	movs	r2, #36	; 0x24
    332a:	2100      	movs	r1, #0
    332c:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    332e:	687b      	ldr	r3, [r7, #4]
    3330:	2200      	movs	r2, #0
    3332:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    3334:	687b      	ldr	r3, [r7, #4]
    3336:	222c      	movs	r2, #44	; 0x2c
    3338:	2100      	movs	r1, #0
    333a:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    333c:	687b      	ldr	r3, [r7, #4]
    333e:	222d      	movs	r2, #45	; 0x2d
    3340:	2100      	movs	r1, #0
    3342:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    3344:	687b      	ldr	r3, [r7, #4]
    3346:	222e      	movs	r2, #46	; 0x2e
    3348:	2100      	movs	r1, #0
    334a:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    334c:	687b      	ldr	r3, [r7, #4]
    334e:	22d7      	movs	r2, #215	; 0xd7
    3350:	861a      	strh	r2, [r3, #48]	; 0x30
}
    3352:	46c0      	nop			; (mov r8, r8)
    3354:	46bd      	mov	sp, r7
    3356:	b002      	add	sp, #8
    3358:	bd80      	pop	{r7, pc}
    335a:	46c0      	nop			; (mov r8, r8)
    335c:	00000d48 	.word	0x00000d48

00003360 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    3360:	b580      	push	{r7, lr}
    3362:	b084      	sub	sp, #16
    3364:	af00      	add	r7, sp, #0
    3366:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3368:	687b      	ldr	r3, [r7, #4]
    336a:	681b      	ldr	r3, [r3, #0]
    336c:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    336e:	2300      	movs	r3, #0
    3370:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    3372:	687b      	ldr	r3, [r7, #4]
    3374:	0018      	movs	r0, r3
    3376:	4b14      	ldr	r3, [pc, #80]	; (33c8 <i2c_master_enable+0x68>)
    3378:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    337a:	68bb      	ldr	r3, [r7, #8]
    337c:	681b      	ldr	r3, [r3, #0]
    337e:	2202      	movs	r2, #2
    3380:	431a      	orrs	r2, r3
    3382:	68bb      	ldr	r3, [r7, #8]
    3384:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3386:	687b      	ldr	r3, [r7, #4]
    3388:	681b      	ldr	r3, [r3, #0]
    338a:	0018      	movs	r0, r3
    338c:	4b0f      	ldr	r3, [pc, #60]	; (33cc <i2c_master_enable+0x6c>)
    338e:	4798      	blx	r3
    3390:	0003      	movs	r3, r0
    3392:	0018      	movs	r0, r3
    3394:	4b0e      	ldr	r3, [pc, #56]	; (33d0 <i2c_master_enable+0x70>)
    3396:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    3398:	e00c      	b.n	33b4 <i2c_master_enable+0x54>
		timeout_counter++;
    339a:	68fb      	ldr	r3, [r7, #12]
    339c:	3301      	adds	r3, #1
    339e:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    33a0:	687b      	ldr	r3, [r7, #4]
    33a2:	88db      	ldrh	r3, [r3, #6]
    33a4:	001a      	movs	r2, r3
    33a6:	68fb      	ldr	r3, [r7, #12]
    33a8:	429a      	cmp	r2, r3
    33aa:	d803      	bhi.n	33b4 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    33ac:	68bb      	ldr	r3, [r7, #8]
    33ae:	2210      	movs	r2, #16
    33b0:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    33b2:	e006      	b.n	33c2 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    33b4:	68bb      	ldr	r3, [r7, #8]
    33b6:	8b5b      	ldrh	r3, [r3, #26]
    33b8:	b29b      	uxth	r3, r3
    33ba:	001a      	movs	r2, r3
    33bc:	2310      	movs	r3, #16
    33be:	4013      	ands	r3, r2
    33c0:	d0eb      	beq.n	339a <i2c_master_enable+0x3a>
		}
	}
}
    33c2:	46bd      	mov	sp, r7
    33c4:	b004      	add	sp, #16
    33c6:	bd80      	pop	{r7, pc}
    33c8:	000032b9 	.word	0x000032b9
    33cc:	000018f5 	.word	0x000018f5
    33d0:	00003269 	.word	0x00003269

000033d4 <i2c_master_get_job_status>:
 *                                      data, indicating that slave does not
 *                                      want more data and was not able to read
 */
static inline enum status_code i2c_master_get_job_status(
		struct i2c_master_module *const module)
{
    33d4:	b580      	push	{r7, lr}
    33d6:	b082      	sub	sp, #8
    33d8:	af00      	add	r7, sp, #0
    33da:	6078      	str	r0, [r7, #4]
	/* Check sanity */
	Assert(module);
	Assert(module->hw);

	/* Return current status code */
	return module->status;
    33dc:	687b      	ldr	r3, [r7, #4]
    33de:	2225      	movs	r2, #37	; 0x25
    33e0:	5c9b      	ldrb	r3, [r3, r2]
    33e2:	b2db      	uxtb	r3, r3
}
    33e4:	0018      	movs	r0, r3
    33e6:	46bd      	mov	sp, r7
    33e8:	b002      	add	sp, #8
    33ea:	bd80      	pop	{r7, pc}

000033ec <usart_is_syncing>:
{
    33ec:	b580      	push	{r7, lr}
    33ee:	b084      	sub	sp, #16
    33f0:	af00      	add	r7, sp, #0
    33f2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    33f4:	687b      	ldr	r3, [r7, #4]
    33f6:	681b      	ldr	r3, [r3, #0]
    33f8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    33fa:	68fb      	ldr	r3, [r7, #12]
    33fc:	69db      	ldr	r3, [r3, #28]
    33fe:	1e5a      	subs	r2, r3, #1
    3400:	4193      	sbcs	r3, r2
    3402:	b2db      	uxtb	r3, r3
}
    3404:	0018      	movs	r0, r3
    3406:	46bd      	mov	sp, r7
    3408:	b004      	add	sp, #16
    340a:	bd80      	pop	{r7, pc}

0000340c <_usart_wait_for_sync>:
{
    340c:	b580      	push	{r7, lr}
    340e:	b082      	sub	sp, #8
    3410:	af00      	add	r7, sp, #0
    3412:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    3414:	46c0      	nop			; (mov r8, r8)
    3416:	687b      	ldr	r3, [r7, #4]
    3418:	0018      	movs	r0, r3
    341a:	4b04      	ldr	r3, [pc, #16]	; (342c <_usart_wait_for_sync+0x20>)
    341c:	4798      	blx	r3
    341e:	1e03      	subs	r3, r0, #0
    3420:	d1f9      	bne.n	3416 <_usart_wait_for_sync+0xa>
}
    3422:	46c0      	nop			; (mov r8, r8)
    3424:	46bd      	mov	sp, r7
    3426:	b002      	add	sp, #8
    3428:	bd80      	pop	{r7, pc}
    342a:	46c0      	nop			; (mov r8, r8)
    342c:	000033ed 	.word	0x000033ed

00003430 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    3430:	b580      	push	{r7, lr}
    3432:	b082      	sub	sp, #8
    3434:	af00      	add	r7, sp, #0
    3436:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3438:	687b      	ldr	r3, [r7, #4]
    343a:	2280      	movs	r2, #128	; 0x80
    343c:	05d2      	lsls	r2, r2, #23
    343e:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3440:	687b      	ldr	r3, [r7, #4]
    3442:	2200      	movs	r2, #0
    3444:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    3446:	687b      	ldr	r3, [r7, #4]
    3448:	22ff      	movs	r2, #255	; 0xff
    344a:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    344c:	687b      	ldr	r3, [r7, #4]
    344e:	2200      	movs	r2, #0
    3450:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3452:	687b      	ldr	r3, [r7, #4]
    3454:	2200      	movs	r2, #0
    3456:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    3458:	687b      	ldr	r3, [r7, #4]
    345a:	2296      	movs	r2, #150	; 0x96
    345c:	0192      	lsls	r2, r2, #6
    345e:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    3460:	687b      	ldr	r3, [r7, #4]
    3462:	2224      	movs	r2, #36	; 0x24
    3464:	2101      	movs	r1, #1
    3466:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    3468:	687b      	ldr	r3, [r7, #4]
    346a:	2225      	movs	r2, #37	; 0x25
    346c:	2101      	movs	r1, #1
    346e:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    3470:	687b      	ldr	r3, [r7, #4]
    3472:	2226      	movs	r2, #38	; 0x26
    3474:	2100      	movs	r1, #0
    3476:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    3478:	687b      	ldr	r3, [r7, #4]
    347a:	2227      	movs	r2, #39	; 0x27
    347c:	2100      	movs	r1, #0
    347e:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    3480:	687b      	ldr	r3, [r7, #4]
    3482:	2200      	movs	r2, #0
    3484:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    3486:	687b      	ldr	r3, [r7, #4]
    3488:	2288      	movs	r2, #136	; 0x88
    348a:	0352      	lsls	r2, r2, #13
    348c:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    348e:	687b      	ldr	r3, [r7, #4]
    3490:	222c      	movs	r2, #44	; 0x2c
    3492:	2100      	movs	r1, #0
    3494:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    3496:	687b      	ldr	r3, [r7, #4]
    3498:	222d      	movs	r2, #45	; 0x2d
    349a:	2100      	movs	r1, #0
    349c:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    349e:	687b      	ldr	r3, [r7, #4]
    34a0:	2200      	movs	r2, #0
    34a2:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    34a4:	687b      	ldr	r3, [r7, #4]
    34a6:	2200      	movs	r2, #0
    34a8:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    34aa:	687b      	ldr	r3, [r7, #4]
    34ac:	2200      	movs	r2, #0
    34ae:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    34b0:	687b      	ldr	r3, [r7, #4]
    34b2:	2200      	movs	r2, #0
    34b4:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    34b6:	687b      	ldr	r3, [r7, #4]
    34b8:	2200      	movs	r2, #0
    34ba:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    34bc:	687b      	ldr	r3, [r7, #4]
    34be:	2200      	movs	r2, #0
    34c0:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    34c2:	687b      	ldr	r3, [r7, #4]
    34c4:	2200      	movs	r2, #0
    34c6:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    34c8:	687b      	ldr	r3, [r7, #4]
    34ca:	2200      	movs	r2, #0
    34cc:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    34ce:	687b      	ldr	r3, [r7, #4]
    34d0:	2200      	movs	r2, #0
    34d2:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    34d4:	687b      	ldr	r3, [r7, #4]
    34d6:	2200      	movs	r2, #0
    34d8:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    34da:	687b      	ldr	r3, [r7, #4]
    34dc:	2213      	movs	r2, #19
    34de:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    34e0:	687b      	ldr	r3, [r7, #4]
    34e2:	2200      	movs	r2, #0
    34e4:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    34e6:	46c0      	nop			; (mov r8, r8)
    34e8:	46bd      	mov	sp, r7
    34ea:	b002      	add	sp, #8
    34ec:	bd80      	pop	{r7, pc}
	...

000034f0 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    34f0:	b580      	push	{r7, lr}
    34f2:	b084      	sub	sp, #16
    34f4:	af00      	add	r7, sp, #0
    34f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    34f8:	687b      	ldr	r3, [r7, #4]
    34fa:	681b      	ldr	r3, [r3, #0]
    34fc:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    34fe:	687b      	ldr	r3, [r7, #4]
    3500:	681b      	ldr	r3, [r3, #0]
    3502:	0018      	movs	r0, r3
    3504:	4b09      	ldr	r3, [pc, #36]	; (352c <usart_enable+0x3c>)
    3506:	4798      	blx	r3
    3508:	0003      	movs	r3, r0
    350a:	0018      	movs	r0, r3
    350c:	4b08      	ldr	r3, [pc, #32]	; (3530 <usart_enable+0x40>)
    350e:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    3510:	687b      	ldr	r3, [r7, #4]
    3512:	0018      	movs	r0, r3
    3514:	4b07      	ldr	r3, [pc, #28]	; (3534 <usart_enable+0x44>)
    3516:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3518:	68fb      	ldr	r3, [r7, #12]
    351a:	681b      	ldr	r3, [r3, #0]
    351c:	2202      	movs	r2, #2
    351e:	431a      	orrs	r2, r3
    3520:	68fb      	ldr	r3, [r7, #12]
    3522:	601a      	str	r2, [r3, #0]
}
    3524:	46c0      	nop			; (mov r8, r8)
    3526:	46bd      	mov	sp, r7
    3528:	b004      	add	sp, #16
    352a:	bd80      	pop	{r7, pc}
    352c:	000018f5 	.word	0x000018f5
    3530:	00003269 	.word	0x00003269
    3534:	0000340d 	.word	0x0000340d

00003538 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    3538:	b580      	push	{r7, lr}
    353a:	b084      	sub	sp, #16
    353c:	af00      	add	r7, sp, #0
    353e:	60f8      	str	r0, [r7, #12]
    3540:	60b9      	str	r1, [r7, #8]
    3542:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    3544:	687a      	ldr	r2, [r7, #4]
    3546:	68b9      	ldr	r1, [r7, #8]
    3548:	68fb      	ldr	r3, [r7, #12]
    354a:	0018      	movs	r0, r3
    354c:	4b05      	ldr	r3, [pc, #20]	; (3564 <usart_serial_init+0x2c>)
    354e:	4798      	blx	r3
    3550:	1e03      	subs	r3, r0, #0
    3552:	d101      	bne.n	3558 <usart_serial_init+0x20>
		return true;
    3554:	2301      	movs	r3, #1
    3556:	e000      	b.n	355a <usart_serial_init+0x22>
	}
	else {
		return false;
    3558:	2300      	movs	r3, #0
	}
}
    355a:	0018      	movs	r0, r3
    355c:	46bd      	mov	sp, r7
    355e:	b004      	add	sp, #16
    3560:	bd80      	pop	{r7, pc}
    3562:	46c0      	nop			; (mov r8, r8)
    3564:	00001dad 	.word	0x00001dad

00003568 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    3568:	b580      	push	{r7, lr}
    356a:	b082      	sub	sp, #8
    356c:	af00      	add	r7, sp, #0
    356e:	6078      	str	r0, [r7, #4]
    3570:	000a      	movs	r2, r1
    3572:	1cfb      	adds	r3, r7, #3
    3574:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    3576:	46c0      	nop			; (mov r8, r8)
    3578:	1cfb      	adds	r3, r7, #3
    357a:	781b      	ldrb	r3, [r3, #0]
    357c:	b29a      	uxth	r2, r3
    357e:	687b      	ldr	r3, [r7, #4]
    3580:	0011      	movs	r1, r2
    3582:	0018      	movs	r0, r3
    3584:	4b04      	ldr	r3, [pc, #16]	; (3598 <usart_serial_putchar+0x30>)
    3586:	4798      	blx	r3
    3588:	1e03      	subs	r3, r0, #0
    358a:	d1f5      	bne.n	3578 <usart_serial_putchar+0x10>

	return STATUS_OK;
    358c:	2300      	movs	r3, #0
}
    358e:	0018      	movs	r0, r3
    3590:	46bd      	mov	sp, r7
    3592:	b002      	add	sp, #8
    3594:	bd80      	pop	{r7, pc}
    3596:	46c0      	nop			; (mov r8, r8)
    3598:	00002021 	.word	0x00002021

0000359c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    359c:	b580      	push	{r7, lr}
    359e:	b084      	sub	sp, #16
    35a0:	af00      	add	r7, sp, #0
    35a2:	6078      	str	r0, [r7, #4]
    35a4:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    35a6:	230e      	movs	r3, #14
    35a8:	18fb      	adds	r3, r7, r3
    35aa:	2200      	movs	r2, #0
    35ac:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    35ae:	46c0      	nop			; (mov r8, r8)
    35b0:	230e      	movs	r3, #14
    35b2:	18fa      	adds	r2, r7, r3
    35b4:	687b      	ldr	r3, [r7, #4]
    35b6:	0011      	movs	r1, r2
    35b8:	0018      	movs	r0, r3
    35ba:	4b07      	ldr	r3, [pc, #28]	; (35d8 <usart_serial_getchar+0x3c>)
    35bc:	4798      	blx	r3
    35be:	1e03      	subs	r3, r0, #0
    35c0:	d1f6      	bne.n	35b0 <usart_serial_getchar+0x14>

	*c = temp;
    35c2:	230e      	movs	r3, #14
    35c4:	18fb      	adds	r3, r7, r3
    35c6:	881b      	ldrh	r3, [r3, #0]
    35c8:	b2da      	uxtb	r2, r3
    35ca:	683b      	ldr	r3, [r7, #0]
    35cc:	701a      	strb	r2, [r3, #0]
}
    35ce:	46c0      	nop			; (mov r8, r8)
    35d0:	46bd      	mov	sp, r7
    35d2:	b004      	add	sp, #16
    35d4:	bd80      	pop	{r7, pc}
    35d6:	46c0      	nop			; (mov r8, r8)
    35d8:	00002085 	.word	0x00002085

000035dc <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    35dc:	b580      	push	{r7, lr}
    35de:	b084      	sub	sp, #16
    35e0:	af00      	add	r7, sp, #0
    35e2:	60f8      	str	r0, [r7, #12]
    35e4:	60b9      	str	r1, [r7, #8]
    35e6:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    35e8:	4b10      	ldr	r3, [pc, #64]	; (362c <stdio_serial_init+0x50>)
    35ea:	68fa      	ldr	r2, [r7, #12]
    35ec:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    35ee:	4b10      	ldr	r3, [pc, #64]	; (3630 <stdio_serial_init+0x54>)
    35f0:	4a10      	ldr	r2, [pc, #64]	; (3634 <stdio_serial_init+0x58>)
    35f2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    35f4:	4b10      	ldr	r3, [pc, #64]	; (3638 <stdio_serial_init+0x5c>)
    35f6:	4a11      	ldr	r2, [pc, #68]	; (363c <stdio_serial_init+0x60>)
    35f8:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    35fa:	687a      	ldr	r2, [r7, #4]
    35fc:	68b9      	ldr	r1, [r7, #8]
    35fe:	68fb      	ldr	r3, [r7, #12]
    3600:	0018      	movs	r0, r3
    3602:	4b0f      	ldr	r3, [pc, #60]	; (3640 <stdio_serial_init+0x64>)
    3604:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    3606:	4b0f      	ldr	r3, [pc, #60]	; (3644 <stdio_serial_init+0x68>)
    3608:	681b      	ldr	r3, [r3, #0]
    360a:	689b      	ldr	r3, [r3, #8]
    360c:	2100      	movs	r1, #0
    360e:	0018      	movs	r0, r3
    3610:	4b0d      	ldr	r3, [pc, #52]	; (3648 <stdio_serial_init+0x6c>)
    3612:	4798      	blx	r3
	setbuf(stdin, NULL);
    3614:	4b0b      	ldr	r3, [pc, #44]	; (3644 <stdio_serial_init+0x68>)
    3616:	681b      	ldr	r3, [r3, #0]
    3618:	685b      	ldr	r3, [r3, #4]
    361a:	2100      	movs	r1, #0
    361c:	0018      	movs	r0, r3
    361e:	4b0a      	ldr	r3, [pc, #40]	; (3648 <stdio_serial_init+0x6c>)
    3620:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    3622:	46c0      	nop			; (mov r8, r8)
    3624:	46bd      	mov	sp, r7
    3626:	b004      	add	sp, #16
    3628:	bd80      	pop	{r7, pc}
    362a:	46c0      	nop			; (mov r8, r8)
    362c:	2000012c 	.word	0x2000012c
    3630:	20000128 	.word	0x20000128
    3634:	00003569 	.word	0x00003569
    3638:	20000124 	.word	0x20000124
    363c:	0000359d 	.word	0x0000359d
    3640:	00003539 	.word	0x00003539
    3644:	2000000c 	.word	0x2000000c
    3648:	00005409 	.word	0x00005409

0000364c <configure_console>:
#define EDBG_CDC_SERCOM_PINMUX_PAD3  PINMUX_PB11D_SERCOM4_PAD3
#define EDBG_CDC_CLOCK                GCLK_GENERATOR_0

static struct usart_module uart_module;
/**  * \brief Configure UART console.  */ 
static void configure_console(void) {
    364c:	b580      	push	{r7, lr}
    364e:	b090      	sub	sp, #64	; 0x40
    3650:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;
	usart_get_config_defaults(&usart_conf);   
    3652:	003b      	movs	r3, r7
    3654:	0018      	movs	r0, r3
    3656:	4b15      	ldr	r3, [pc, #84]	; (36ac <configure_console+0x60>)
    3658:	4798      	blx	r3
	usart_conf.generator_source = EDBG_CDC_CLOCK;
    365a:	003b      	movs	r3, r7
    365c:	222d      	movs	r2, #45	; 0x2d
    365e:	2100      	movs	r1, #0
    3660:	5499      	strb	r1, [r3, r2]
	usart_conf.mux_setting      = EDBG_CDC_SERCOM_MUX_SETTING; 
    3662:	003b      	movs	r3, r7
    3664:	22c4      	movs	r2, #196	; 0xc4
    3666:	0392      	lsls	r2, r2, #14
    3668:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0      = EDBG_CDC_SERCOM_PINMUX_PAD0; 
    366a:	003b      	movs	r3, r7
    366c:	2201      	movs	r2, #1
    366e:	4252      	negs	r2, r2
    3670:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1      = EDBG_CDC_SERCOM_PINMUX_PAD1; 
    3672:	003b      	movs	r3, r7
    3674:	2201      	movs	r2, #1
    3676:	4252      	negs	r2, r2
    3678:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2      = EDBG_CDC_SERCOM_PINMUX_PAD2; 
    367a:	003b      	movs	r3, r7
    367c:	4a0c      	ldr	r2, [pc, #48]	; (36b0 <configure_console+0x64>)
    367e:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3      = EDBG_CDC_SERCOM_PINMUX_PAD3; 
    3680:	003b      	movs	r3, r7
    3682:	4a0c      	ldr	r2, [pc, #48]	; (36b4 <configure_console+0x68>)
    3684:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate         = 115200;
    3686:	003b      	movs	r3, r7
    3688:	22e1      	movs	r2, #225	; 0xe1
    368a:	0252      	lsls	r2, r2, #9
    368c:	621a      	str	r2, [r3, #32]
	stdio_serial_init(&uart_module, EDBG_CDC_MODULE, &usart_conf); 
    368e:	003a      	movs	r2, r7
    3690:	4909      	ldr	r1, [pc, #36]	; (36b8 <configure_console+0x6c>)
    3692:	4b0a      	ldr	r3, [pc, #40]	; (36bc <configure_console+0x70>)
    3694:	0018      	movs	r0, r3
    3696:	4b0a      	ldr	r3, [pc, #40]	; (36c0 <configure_console+0x74>)
    3698:	4798      	blx	r3
	usart_enable(&uart_module);
    369a:	4b08      	ldr	r3, [pc, #32]	; (36bc <configure_console+0x70>)
    369c:	0018      	movs	r0, r3
    369e:	4b09      	ldr	r3, [pc, #36]	; (36c4 <configure_console+0x78>)
    36a0:	4798      	blx	r3
}
    36a2:	46c0      	nop			; (mov r8, r8)
    36a4:	46bd      	mov	sp, r7
    36a6:	b010      	add	sp, #64	; 0x40
    36a8:	bd80      	pop	{r7, pc}
    36aa:	46c0      	nop			; (mov r8, r8)
    36ac:	00003431 	.word	0x00003431
    36b0:	002a0003 	.word	0x002a0003
    36b4:	002b0003 	.word	0x002b0003
    36b8:	42001800 	.word	0x42001800
    36bc:	200000cc 	.word	0x200000cc
    36c0:	000035dd 	.word	0x000035dd
    36c4:	000034f1 	.word	0x000034f1

000036c8 <configure_i2c>:
}
//! [callback_func]

//! [initialize_i2c]
void configure_i2c(void)
{
    36c8:	b580      	push	{r7, lr}
    36ca:	b08e      	sub	sp, #56	; 0x38
    36cc:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module */
	//! [init_conf]
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    36ce:	1d3b      	adds	r3, r7, #4
    36d0:	0018      	movs	r0, r3
    36d2:	4b0e      	ldr	r3, [pc, #56]	; (370c <configure_i2c+0x44>)
    36d4:	4798      	blx	r3
	//! [init_conf]

	/* Change buffer timeout to something longer */
	//! [conf_change]
	config_i2c_master.buffer_timeout = 65535;
    36d6:	1d3b      	adds	r3, r7, #4
    36d8:	2201      	movs	r2, #1
    36da:	4252      	negs	r2, r2
    36dc:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0    = PINMUX_PA08C_SERCOM0_PAD0;
    36de:	1d3b      	adds	r3, r7, #4
    36e0:	4a0b      	ldr	r2, [pc, #44]	; (3710 <configure_i2c+0x48>)
    36e2:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1    = PINMUX_PA09C_SERCOM0_PAD1;
    36e4:	1d3b      	adds	r3, r7, #4
    36e6:	4a0b      	ldr	r2, [pc, #44]	; (3714 <configure_i2c+0x4c>)
    36e8:	621a      	str	r2, [r3, #32]
	//! [conf_change]

	/* Initialize and enable device with config */
	//! [init_module]
	while(i2c_master_init(&i2c_master_instance, CONF_I2C_MASTER_MODULE, &config_i2c_master)     \
    36ea:	46c0      	nop			; (mov r8, r8)
    36ec:	1d3a      	adds	r2, r7, #4
    36ee:	490a      	ldr	r1, [pc, #40]	; (3718 <configure_i2c+0x50>)
    36f0:	4b0a      	ldr	r3, [pc, #40]	; (371c <configure_i2c+0x54>)
    36f2:	0018      	movs	r0, r3
    36f4:	4b0a      	ldr	r3, [pc, #40]	; (3720 <configure_i2c+0x58>)
    36f6:	4798      	blx	r3
    36f8:	1e03      	subs	r3, r0, #0
    36fa:	d1f7      	bne.n	36ec <configure_i2c+0x24>
			!= STATUS_OK);
	//! [init_module]

	//! [enable_module]
	i2c_master_enable(&i2c_master_instance);
    36fc:	4b07      	ldr	r3, [pc, #28]	; (371c <configure_i2c+0x54>)
    36fe:	0018      	movs	r0, r3
    3700:	4b08      	ldr	r3, [pc, #32]	; (3724 <configure_i2c+0x5c>)
    3702:	4798      	blx	r3
	//! [enable_module]
}
    3704:	46c0      	nop			; (mov r8, r8)
    3706:	46bd      	mov	sp, r7
    3708:	b00e      	add	sp, #56	; 0x38
    370a:	bd80      	pop	{r7, pc}
    370c:	000032dd 	.word	0x000032dd
    3710:	00080002 	.word	0x00080002
    3714:	00090002 	.word	0x00090002
    3718:	42000800 	.word	0x42000800
    371c:	2000013c 	.word	0x2000013c
    3720:	00000905 	.word	0x00000905
    3724:	00003361 	.word	0x00003361

00003728 <main>:
	////! [callback_en]
//}
//! [setup_callback]

int main(void)
{
    3728:	b580      	push	{r7, lr}
    372a:	b086      	sub	sp, #24
    372c:	af00      	add	r7, sp, #0
	system_init();
    372e:	4b48      	ldr	r3, [pc, #288]	; (3850 <main+0x128>)
    3730:	4798      	blx	r3
	//! [run_initialize_i2c]
	/* Configure device and enable. */
	//! [config]
	configure_i2c();
    3732:	4b48      	ldr	r3, [pc, #288]	; (3854 <main+0x12c>)
    3734:	4798      	blx	r3
	/* Configure callbacks and enable. */
	//! [config_callback]
	//configure_i2c_callbacks();
	//! [config_callback]
	//! [run_initialize_i2c]
	configure_console();
    3736:	4b48      	ldr	r3, [pc, #288]	; (3858 <main+0x130>)
    3738:	4798      	blx	r3
	delay_init();
    373a:	4b48      	ldr	r3, [pc, #288]	; (385c <main+0x134>)
    373c:	4798      	blx	r3
	/* Init i2c packet. */
	//! [write_packet]
	wr_packet.address     = SLAVE_RHT_ADDRESS_W;
    373e:	4b48      	ldr	r3, [pc, #288]	; (3860 <main+0x138>)
    3740:	2240      	movs	r2, #64	; 0x40
    3742:	801a      	strh	r2, [r3, #0]
	wr_packet.data_length = DATA_LENGTH;
    3744:	4b46      	ldr	r3, [pc, #280]	; (3860 <main+0x138>)
    3746:	2204      	movs	r2, #4
    3748:	805a      	strh	r2, [r3, #2]
	//wr_packet.data        = wr_buffer;
	//! [write_packet]
	//! [read_packet]
	rd_packet.address     = SLAVE_RHT_ADDRESS_R;
    374a:	4b46      	ldr	r3, [pc, #280]	; (3864 <main+0x13c>)
    374c:	2240      	movs	r2, #64	; 0x40
    374e:	801a      	strh	r2, [r3, #0]
	rd_packet.data_length = DATA_LENGTH;
    3750:	4b44      	ldr	r3, [pc, #272]	; (3864 <main+0x13c>)
    3752:	2204      	movs	r2, #4
    3754:	805a      	strh	r2, [r3, #2]
	rd_packet.data        = rd_buffer;
    3756:	4b43      	ldr	r3, [pc, #268]	; (3864 <main+0x13c>)
    3758:	4a43      	ldr	r2, [pc, #268]	; (3868 <main+0x140>)
    375a:	605a      	str	r2, [r3, #4]
	//! [read_packet]
	printf("setup complete \r\n");
    375c:	4b43      	ldr	r3, [pc, #268]	; (386c <main+0x144>)
    375e:	0018      	movs	r0, r3
    3760:	4b43      	ldr	r3, [pc, #268]	; (3870 <main+0x148>)
    3762:	4798      	blx	r3
	uint32_t t1 =0;
    3764:	2300      	movs	r3, #0
    3766:	617b      	str	r3, [r7, #20]
	uint32_t h1 =0;
    3768:	2300      	movs	r3, #0
    376a:	613b      	str	r3, [r7, #16]
	uint8_t tempC = 0;
    376c:	230f      	movs	r3, #15
    376e:	18fb      	adds	r3, r7, r3
    3770:	2200      	movs	r2, #0
    3772:	701a      	strb	r2, [r3, #0]
	uint8_t hum = 0;
    3774:	230e      	movs	r3, #14
    3776:	18fb      	adds	r3, r7, r3
    3778:	2200      	movs	r2, #0
    377a:	701a      	strb	r2, [r3, #0]
	//! [while]
	while (true)
	{
		 delay_ms(1000);
    377c:	23fa      	movs	r3, #250	; 0xfa
    377e:	009b      	lsls	r3, r3, #2
    3780:	0018      	movs	r0, r3
    3782:	4b3c      	ldr	r3, [pc, #240]	; (3874 <main+0x14c>)
    3784:	4798      	blx	r3
		 //Wake up RHT and get both temp and humidity reading.
		uint8_t wr_buffer1[3] = {0x02, 0x15, 0x00};
    3786:	2308      	movs	r3, #8
    3788:	18fa      	adds	r2, r7, r3
    378a:	4b3b      	ldr	r3, [pc, #236]	; (3878 <main+0x150>)
    378c:	0010      	movs	r0, r2
    378e:	0019      	movs	r1, r3
    3790:	2303      	movs	r3, #3
    3792:	001a      	movs	r2, r3
    3794:	4b39      	ldr	r3, [pc, #228]	; (387c <main+0x154>)
    3796:	4798      	blx	r3
		wr_packet.data = wr_buffer1; //setup
    3798:	4b31      	ldr	r3, [pc, #196]	; (3860 <main+0x138>)
    379a:	2208      	movs	r2, #8
    379c:	18ba      	adds	r2, r7, r2
    379e:	605a      	str	r2, [r3, #4]
		wr_packet.data_length = 3;
    37a0:	4b2f      	ldr	r3, [pc, #188]	; (3860 <main+0x138>)
    37a2:	2203      	movs	r2, #3
    37a4:	805a      	strh	r2, [r3, #2]
		i2c_master_write_packet_job(&i2c_master_instance, &wr_packet);	
    37a6:	4a2e      	ldr	r2, [pc, #184]	; (3860 <main+0x138>)
    37a8:	4b35      	ldr	r3, [pc, #212]	; (3880 <main+0x158>)
    37aa:	0011      	movs	r1, r2
    37ac:	0018      	movs	r0, r3
    37ae:	4b35      	ldr	r3, [pc, #212]	; (3884 <main+0x15c>)
    37b0:	4798      	blx	r3
		
		while(i2c_master_get_job_status	(&i2c_master_instance));
    37b2:	46c0      	nop			; (mov r8, r8)
    37b4:	4b32      	ldr	r3, [pc, #200]	; (3880 <main+0x158>)
    37b6:	0018      	movs	r0, r3
    37b8:	4b33      	ldr	r3, [pc, #204]	; (3888 <main+0x160>)
    37ba:	4798      	blx	r3
    37bc:	1e03      	subs	r3, r0, #0
    37be:	d1f9      	bne.n	37b4 <main+0x8c>
		uint8_t wr_buffer2[1] = {0x00};
    37c0:	1d3b      	adds	r3, r7, #4
    37c2:	2200      	movs	r2, #0
    37c4:	701a      	strb	r2, [r3, #0]
		wr_packet.data = wr_buffer2; //trigger a measurement
    37c6:	4b26      	ldr	r3, [pc, #152]	; (3860 <main+0x138>)
    37c8:	1d3a      	adds	r2, r7, #4
    37ca:	605a      	str	r2, [r3, #4]
		wr_packet.data_length = 1;
    37cc:	4b24      	ldr	r3, [pc, #144]	; (3860 <main+0x138>)
    37ce:	2201      	movs	r2, #1
    37d0:	805a      	strh	r2, [r3, #2]
		i2c_master_write_packet_job(&i2c_master_instance, &wr_packet);
    37d2:	4a23      	ldr	r2, [pc, #140]	; (3860 <main+0x138>)
    37d4:	4b2a      	ldr	r3, [pc, #168]	; (3880 <main+0x158>)
    37d6:	0011      	movs	r1, r2
    37d8:	0018      	movs	r0, r3
    37da:	4b2a      	ldr	r3, [pc, #168]	; (3884 <main+0x15c>)
    37dc:	4798      	blx	r3
	
		delay_ms(15); // wait for conversion 
    37de:	200f      	movs	r0, #15
    37e0:	4b24      	ldr	r3, [pc, #144]	; (3874 <main+0x14c>)
    37e2:	4798      	blx	r3
	
		rd_packet.data_length = 4;
    37e4:	4b1f      	ldr	r3, [pc, #124]	; (3864 <main+0x13c>)
    37e6:	2204      	movs	r2, #4
    37e8:	805a      	strh	r2, [r3, #2]
		i2c_master_read_packet_job(&i2c_master_instance, &rd_packet);
    37ea:	4a1e      	ldr	r2, [pc, #120]	; (3864 <main+0x13c>)
    37ec:	4b24      	ldr	r3, [pc, #144]	; (3880 <main+0x158>)
    37ee:	0011      	movs	r1, r2
    37f0:	0018      	movs	r0, r3
    37f2:	4b26      	ldr	r3, [pc, #152]	; (388c <main+0x164>)
    37f4:	4798      	blx	r3
		t1 =  ((uint32_t)rd_packet.data[0]<<8 | (uint32_t)rd_packet.data[1]);
    37f6:	4b1b      	ldr	r3, [pc, #108]	; (3864 <main+0x13c>)
    37f8:	685b      	ldr	r3, [r3, #4]
    37fa:	781b      	ldrb	r3, [r3, #0]
    37fc:	021a      	lsls	r2, r3, #8
    37fe:	4b19      	ldr	r3, [pc, #100]	; (3864 <main+0x13c>)
    3800:	685b      	ldr	r3, [r3, #4]
    3802:	3301      	adds	r3, #1
    3804:	781b      	ldrb	r3, [r3, #0]
    3806:	4313      	orrs	r3, r2
    3808:	617b      	str	r3, [r7, #20]
		h1 =  ((uint32_t)rd_packet.data[2]<<8 | (uint32_t)rd_packet.data[3]);
    380a:	4b16      	ldr	r3, [pc, #88]	; (3864 <main+0x13c>)
    380c:	685b      	ldr	r3, [r3, #4]
    380e:	3302      	adds	r3, #2
    3810:	781b      	ldrb	r3, [r3, #0]
    3812:	021a      	lsls	r2, r3, #8
    3814:	4b13      	ldr	r3, [pc, #76]	; (3864 <main+0x13c>)
    3816:	685b      	ldr	r3, [r3, #4]
    3818:	3303      	adds	r3, #3
    381a:	781b      	ldrb	r3, [r3, #0]
    381c:	4313      	orrs	r3, r2
    381e:	613b      	str	r3, [r7, #16]
		tempC = (uint8_t)((t1 * 0xA5)/ 0x10000 )- (uint8_t)0x28;
    3820:	697a      	ldr	r2, [r7, #20]
    3822:	0013      	movs	r3, r2
    3824:	009b      	lsls	r3, r3, #2
    3826:	189b      	adds	r3, r3, r2
    3828:	015a      	lsls	r2, r3, #5
    382a:	189b      	adds	r3, r3, r2
    382c:	0c1b      	lsrs	r3, r3, #16
    382e:	b2da      	uxtb	r2, r3
    3830:	230f      	movs	r3, #15
    3832:	18fb      	adds	r3, r7, r3
    3834:	3a28      	subs	r2, #40	; 0x28
    3836:	701a      	strb	r2, [r3, #0]
		hum = (uint8_t)((h1*0x64)/ 0x10000 );
    3838:	693b      	ldr	r3, [r7, #16]
    383a:	2264      	movs	r2, #100	; 0x64
    383c:	4353      	muls	r3, r2
    383e:	0c1a      	lsrs	r2, r3, #16
    3840:	230e      	movs	r3, #14
    3842:	18fb      	adds	r3, r7, r3
    3844:	701a      	strb	r2, [r3, #0]
		printf("Temp and humidity acquired! \r\n");
    3846:	4b12      	ldr	r3, [pc, #72]	; (3890 <main+0x168>)
    3848:	0018      	movs	r0, r3
    384a:	4b09      	ldr	r3, [pc, #36]	; (3870 <main+0x148>)
    384c:	4798      	blx	r3
	{
    384e:	e795      	b.n	377c <main+0x54>
    3850:	00002fe1 	.word	0x00002fe1
    3854:	000036c9 	.word	0x000036c9
    3858:	0000364d 	.word	0x0000364d
    385c:	00000149 	.word	0x00000149
    3860:	20000130 	.word	0x20000130
    3864:	20000164 	.word	0x20000164
    3868:	20000100 	.word	0x20000100
    386c:	00005e64 	.word	0x00005e64
    3870:	000053f5 	.word	0x000053f5
    3874:	000001a1 	.word	0x000001a1
    3878:	00005e98 	.word	0x00005e98
    387c:	00005311 	.word	0x00005311
    3880:	2000013c 	.word	0x2000013c
    3884:	00000ff5 	.word	0x00000ff5
    3888:	000033d5 	.word	0x000033d5
    388c:	00000f11 	.word	0x00000f11
    3890:	00005e78 	.word	0x00005e78

00003894 <__udivsi3>:
    3894:	2200      	movs	r2, #0
    3896:	0843      	lsrs	r3, r0, #1
    3898:	428b      	cmp	r3, r1
    389a:	d374      	bcc.n	3986 <__udivsi3+0xf2>
    389c:	0903      	lsrs	r3, r0, #4
    389e:	428b      	cmp	r3, r1
    38a0:	d35f      	bcc.n	3962 <__udivsi3+0xce>
    38a2:	0a03      	lsrs	r3, r0, #8
    38a4:	428b      	cmp	r3, r1
    38a6:	d344      	bcc.n	3932 <__udivsi3+0x9e>
    38a8:	0b03      	lsrs	r3, r0, #12
    38aa:	428b      	cmp	r3, r1
    38ac:	d328      	bcc.n	3900 <__udivsi3+0x6c>
    38ae:	0c03      	lsrs	r3, r0, #16
    38b0:	428b      	cmp	r3, r1
    38b2:	d30d      	bcc.n	38d0 <__udivsi3+0x3c>
    38b4:	22ff      	movs	r2, #255	; 0xff
    38b6:	0209      	lsls	r1, r1, #8
    38b8:	ba12      	rev	r2, r2
    38ba:	0c03      	lsrs	r3, r0, #16
    38bc:	428b      	cmp	r3, r1
    38be:	d302      	bcc.n	38c6 <__udivsi3+0x32>
    38c0:	1212      	asrs	r2, r2, #8
    38c2:	0209      	lsls	r1, r1, #8
    38c4:	d065      	beq.n	3992 <__udivsi3+0xfe>
    38c6:	0b03      	lsrs	r3, r0, #12
    38c8:	428b      	cmp	r3, r1
    38ca:	d319      	bcc.n	3900 <__udivsi3+0x6c>
    38cc:	e000      	b.n	38d0 <__udivsi3+0x3c>
    38ce:	0a09      	lsrs	r1, r1, #8
    38d0:	0bc3      	lsrs	r3, r0, #15
    38d2:	428b      	cmp	r3, r1
    38d4:	d301      	bcc.n	38da <__udivsi3+0x46>
    38d6:	03cb      	lsls	r3, r1, #15
    38d8:	1ac0      	subs	r0, r0, r3
    38da:	4152      	adcs	r2, r2
    38dc:	0b83      	lsrs	r3, r0, #14
    38de:	428b      	cmp	r3, r1
    38e0:	d301      	bcc.n	38e6 <__udivsi3+0x52>
    38e2:	038b      	lsls	r3, r1, #14
    38e4:	1ac0      	subs	r0, r0, r3
    38e6:	4152      	adcs	r2, r2
    38e8:	0b43      	lsrs	r3, r0, #13
    38ea:	428b      	cmp	r3, r1
    38ec:	d301      	bcc.n	38f2 <__udivsi3+0x5e>
    38ee:	034b      	lsls	r3, r1, #13
    38f0:	1ac0      	subs	r0, r0, r3
    38f2:	4152      	adcs	r2, r2
    38f4:	0b03      	lsrs	r3, r0, #12
    38f6:	428b      	cmp	r3, r1
    38f8:	d301      	bcc.n	38fe <__udivsi3+0x6a>
    38fa:	030b      	lsls	r3, r1, #12
    38fc:	1ac0      	subs	r0, r0, r3
    38fe:	4152      	adcs	r2, r2
    3900:	0ac3      	lsrs	r3, r0, #11
    3902:	428b      	cmp	r3, r1
    3904:	d301      	bcc.n	390a <__udivsi3+0x76>
    3906:	02cb      	lsls	r3, r1, #11
    3908:	1ac0      	subs	r0, r0, r3
    390a:	4152      	adcs	r2, r2
    390c:	0a83      	lsrs	r3, r0, #10
    390e:	428b      	cmp	r3, r1
    3910:	d301      	bcc.n	3916 <__udivsi3+0x82>
    3912:	028b      	lsls	r3, r1, #10
    3914:	1ac0      	subs	r0, r0, r3
    3916:	4152      	adcs	r2, r2
    3918:	0a43      	lsrs	r3, r0, #9
    391a:	428b      	cmp	r3, r1
    391c:	d301      	bcc.n	3922 <__udivsi3+0x8e>
    391e:	024b      	lsls	r3, r1, #9
    3920:	1ac0      	subs	r0, r0, r3
    3922:	4152      	adcs	r2, r2
    3924:	0a03      	lsrs	r3, r0, #8
    3926:	428b      	cmp	r3, r1
    3928:	d301      	bcc.n	392e <__udivsi3+0x9a>
    392a:	020b      	lsls	r3, r1, #8
    392c:	1ac0      	subs	r0, r0, r3
    392e:	4152      	adcs	r2, r2
    3930:	d2cd      	bcs.n	38ce <__udivsi3+0x3a>
    3932:	09c3      	lsrs	r3, r0, #7
    3934:	428b      	cmp	r3, r1
    3936:	d301      	bcc.n	393c <__udivsi3+0xa8>
    3938:	01cb      	lsls	r3, r1, #7
    393a:	1ac0      	subs	r0, r0, r3
    393c:	4152      	adcs	r2, r2
    393e:	0983      	lsrs	r3, r0, #6
    3940:	428b      	cmp	r3, r1
    3942:	d301      	bcc.n	3948 <__udivsi3+0xb4>
    3944:	018b      	lsls	r3, r1, #6
    3946:	1ac0      	subs	r0, r0, r3
    3948:	4152      	adcs	r2, r2
    394a:	0943      	lsrs	r3, r0, #5
    394c:	428b      	cmp	r3, r1
    394e:	d301      	bcc.n	3954 <__udivsi3+0xc0>
    3950:	014b      	lsls	r3, r1, #5
    3952:	1ac0      	subs	r0, r0, r3
    3954:	4152      	adcs	r2, r2
    3956:	0903      	lsrs	r3, r0, #4
    3958:	428b      	cmp	r3, r1
    395a:	d301      	bcc.n	3960 <__udivsi3+0xcc>
    395c:	010b      	lsls	r3, r1, #4
    395e:	1ac0      	subs	r0, r0, r3
    3960:	4152      	adcs	r2, r2
    3962:	08c3      	lsrs	r3, r0, #3
    3964:	428b      	cmp	r3, r1
    3966:	d301      	bcc.n	396c <__udivsi3+0xd8>
    3968:	00cb      	lsls	r3, r1, #3
    396a:	1ac0      	subs	r0, r0, r3
    396c:	4152      	adcs	r2, r2
    396e:	0883      	lsrs	r3, r0, #2
    3970:	428b      	cmp	r3, r1
    3972:	d301      	bcc.n	3978 <__udivsi3+0xe4>
    3974:	008b      	lsls	r3, r1, #2
    3976:	1ac0      	subs	r0, r0, r3
    3978:	4152      	adcs	r2, r2
    397a:	0843      	lsrs	r3, r0, #1
    397c:	428b      	cmp	r3, r1
    397e:	d301      	bcc.n	3984 <__udivsi3+0xf0>
    3980:	004b      	lsls	r3, r1, #1
    3982:	1ac0      	subs	r0, r0, r3
    3984:	4152      	adcs	r2, r2
    3986:	1a41      	subs	r1, r0, r1
    3988:	d200      	bcs.n	398c <__udivsi3+0xf8>
    398a:	4601      	mov	r1, r0
    398c:	4152      	adcs	r2, r2
    398e:	4610      	mov	r0, r2
    3990:	4770      	bx	lr
    3992:	e7ff      	b.n	3994 <__udivsi3+0x100>
    3994:	b501      	push	{r0, lr}
    3996:	2000      	movs	r0, #0
    3998:	f000 f806 	bl	39a8 <__aeabi_idiv0>
    399c:	bd02      	pop	{r1, pc}
    399e:	46c0      	nop			; (mov r8, r8)

000039a0 <__aeabi_uidivmod>:
    39a0:	2900      	cmp	r1, #0
    39a2:	d0f7      	beq.n	3994 <__udivsi3+0x100>
    39a4:	e776      	b.n	3894 <__udivsi3>
    39a6:	4770      	bx	lr

000039a8 <__aeabi_idiv0>:
    39a8:	4770      	bx	lr
    39aa:	46c0      	nop			; (mov r8, r8)

000039ac <__aeabi_lmul>:
    39ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    39ae:	46ce      	mov	lr, r9
    39b0:	4647      	mov	r7, r8
    39b2:	0415      	lsls	r5, r2, #16
    39b4:	0c2d      	lsrs	r5, r5, #16
    39b6:	002e      	movs	r6, r5
    39b8:	b580      	push	{r7, lr}
    39ba:	0407      	lsls	r7, r0, #16
    39bc:	0c14      	lsrs	r4, r2, #16
    39be:	0c3f      	lsrs	r7, r7, #16
    39c0:	4699      	mov	r9, r3
    39c2:	0c03      	lsrs	r3, r0, #16
    39c4:	437e      	muls	r6, r7
    39c6:	435d      	muls	r5, r3
    39c8:	4367      	muls	r7, r4
    39ca:	4363      	muls	r3, r4
    39cc:	197f      	adds	r7, r7, r5
    39ce:	0c34      	lsrs	r4, r6, #16
    39d0:	19e4      	adds	r4, r4, r7
    39d2:	469c      	mov	ip, r3
    39d4:	42a5      	cmp	r5, r4
    39d6:	d903      	bls.n	39e0 <__aeabi_lmul+0x34>
    39d8:	2380      	movs	r3, #128	; 0x80
    39da:	025b      	lsls	r3, r3, #9
    39dc:	4698      	mov	r8, r3
    39de:	44c4      	add	ip, r8
    39e0:	464b      	mov	r3, r9
    39e2:	4351      	muls	r1, r2
    39e4:	4343      	muls	r3, r0
    39e6:	0436      	lsls	r6, r6, #16
    39e8:	0c36      	lsrs	r6, r6, #16
    39ea:	0c25      	lsrs	r5, r4, #16
    39ec:	0424      	lsls	r4, r4, #16
    39ee:	4465      	add	r5, ip
    39f0:	19a4      	adds	r4, r4, r6
    39f2:	1859      	adds	r1, r3, r1
    39f4:	1949      	adds	r1, r1, r5
    39f6:	0020      	movs	r0, r4
    39f8:	bc0c      	pop	{r2, r3}
    39fa:	4690      	mov	r8, r2
    39fc:	4699      	mov	r9, r3
    39fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003a00 <__aeabi_dadd>:
    3a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a02:	4645      	mov	r5, r8
    3a04:	46de      	mov	lr, fp
    3a06:	4657      	mov	r7, sl
    3a08:	464e      	mov	r6, r9
    3a0a:	030c      	lsls	r4, r1, #12
    3a0c:	b5e0      	push	{r5, r6, r7, lr}
    3a0e:	004e      	lsls	r6, r1, #1
    3a10:	0fc9      	lsrs	r1, r1, #31
    3a12:	4688      	mov	r8, r1
    3a14:	000d      	movs	r5, r1
    3a16:	0a61      	lsrs	r1, r4, #9
    3a18:	0f44      	lsrs	r4, r0, #29
    3a1a:	430c      	orrs	r4, r1
    3a1c:	00c7      	lsls	r7, r0, #3
    3a1e:	0319      	lsls	r1, r3, #12
    3a20:	0058      	lsls	r0, r3, #1
    3a22:	0fdb      	lsrs	r3, r3, #31
    3a24:	469b      	mov	fp, r3
    3a26:	0a4b      	lsrs	r3, r1, #9
    3a28:	0f51      	lsrs	r1, r2, #29
    3a2a:	430b      	orrs	r3, r1
    3a2c:	0d76      	lsrs	r6, r6, #21
    3a2e:	0d40      	lsrs	r0, r0, #21
    3a30:	0019      	movs	r1, r3
    3a32:	00d2      	lsls	r2, r2, #3
    3a34:	45d8      	cmp	r8, fp
    3a36:	d100      	bne.n	3a3a <__aeabi_dadd+0x3a>
    3a38:	e0ae      	b.n	3b98 <__aeabi_dadd+0x198>
    3a3a:	1a35      	subs	r5, r6, r0
    3a3c:	2d00      	cmp	r5, #0
    3a3e:	dc00      	bgt.n	3a42 <__aeabi_dadd+0x42>
    3a40:	e0f6      	b.n	3c30 <__aeabi_dadd+0x230>
    3a42:	2800      	cmp	r0, #0
    3a44:	d10f      	bne.n	3a66 <__aeabi_dadd+0x66>
    3a46:	4313      	orrs	r3, r2
    3a48:	d100      	bne.n	3a4c <__aeabi_dadd+0x4c>
    3a4a:	e0db      	b.n	3c04 <__aeabi_dadd+0x204>
    3a4c:	1e6b      	subs	r3, r5, #1
    3a4e:	2b00      	cmp	r3, #0
    3a50:	d000      	beq.n	3a54 <__aeabi_dadd+0x54>
    3a52:	e137      	b.n	3cc4 <__aeabi_dadd+0x2c4>
    3a54:	1aba      	subs	r2, r7, r2
    3a56:	4297      	cmp	r7, r2
    3a58:	41bf      	sbcs	r7, r7
    3a5a:	1a64      	subs	r4, r4, r1
    3a5c:	427f      	negs	r7, r7
    3a5e:	1be4      	subs	r4, r4, r7
    3a60:	2601      	movs	r6, #1
    3a62:	0017      	movs	r7, r2
    3a64:	e024      	b.n	3ab0 <__aeabi_dadd+0xb0>
    3a66:	4bc6      	ldr	r3, [pc, #792]	; (3d80 <__aeabi_dadd+0x380>)
    3a68:	429e      	cmp	r6, r3
    3a6a:	d04d      	beq.n	3b08 <__aeabi_dadd+0x108>
    3a6c:	2380      	movs	r3, #128	; 0x80
    3a6e:	041b      	lsls	r3, r3, #16
    3a70:	4319      	orrs	r1, r3
    3a72:	2d38      	cmp	r5, #56	; 0x38
    3a74:	dd00      	ble.n	3a78 <__aeabi_dadd+0x78>
    3a76:	e107      	b.n	3c88 <__aeabi_dadd+0x288>
    3a78:	2d1f      	cmp	r5, #31
    3a7a:	dd00      	ble.n	3a7e <__aeabi_dadd+0x7e>
    3a7c:	e138      	b.n	3cf0 <__aeabi_dadd+0x2f0>
    3a7e:	2020      	movs	r0, #32
    3a80:	1b43      	subs	r3, r0, r5
    3a82:	469a      	mov	sl, r3
    3a84:	000b      	movs	r3, r1
    3a86:	4650      	mov	r0, sl
    3a88:	4083      	lsls	r3, r0
    3a8a:	4699      	mov	r9, r3
    3a8c:	0013      	movs	r3, r2
    3a8e:	4648      	mov	r0, r9
    3a90:	40eb      	lsrs	r3, r5
    3a92:	4318      	orrs	r0, r3
    3a94:	0003      	movs	r3, r0
    3a96:	4650      	mov	r0, sl
    3a98:	4082      	lsls	r2, r0
    3a9a:	1e50      	subs	r0, r2, #1
    3a9c:	4182      	sbcs	r2, r0
    3a9e:	40e9      	lsrs	r1, r5
    3aa0:	431a      	orrs	r2, r3
    3aa2:	1aba      	subs	r2, r7, r2
    3aa4:	1a61      	subs	r1, r4, r1
    3aa6:	4297      	cmp	r7, r2
    3aa8:	41a4      	sbcs	r4, r4
    3aaa:	0017      	movs	r7, r2
    3aac:	4264      	negs	r4, r4
    3aae:	1b0c      	subs	r4, r1, r4
    3ab0:	0223      	lsls	r3, r4, #8
    3ab2:	d562      	bpl.n	3b7a <__aeabi_dadd+0x17a>
    3ab4:	0264      	lsls	r4, r4, #9
    3ab6:	0a65      	lsrs	r5, r4, #9
    3ab8:	2d00      	cmp	r5, #0
    3aba:	d100      	bne.n	3abe <__aeabi_dadd+0xbe>
    3abc:	e0df      	b.n	3c7e <__aeabi_dadd+0x27e>
    3abe:	0028      	movs	r0, r5
    3ac0:	f001 fbe4 	bl	528c <__clzsi2>
    3ac4:	0003      	movs	r3, r0
    3ac6:	3b08      	subs	r3, #8
    3ac8:	2b1f      	cmp	r3, #31
    3aca:	dd00      	ble.n	3ace <__aeabi_dadd+0xce>
    3acc:	e0d2      	b.n	3c74 <__aeabi_dadd+0x274>
    3ace:	2220      	movs	r2, #32
    3ad0:	003c      	movs	r4, r7
    3ad2:	1ad2      	subs	r2, r2, r3
    3ad4:	409d      	lsls	r5, r3
    3ad6:	40d4      	lsrs	r4, r2
    3ad8:	409f      	lsls	r7, r3
    3ada:	4325      	orrs	r5, r4
    3adc:	429e      	cmp	r6, r3
    3ade:	dd00      	ble.n	3ae2 <__aeabi_dadd+0xe2>
    3ae0:	e0c4      	b.n	3c6c <__aeabi_dadd+0x26c>
    3ae2:	1b9e      	subs	r6, r3, r6
    3ae4:	1c73      	adds	r3, r6, #1
    3ae6:	2b1f      	cmp	r3, #31
    3ae8:	dd00      	ble.n	3aec <__aeabi_dadd+0xec>
    3aea:	e0f1      	b.n	3cd0 <__aeabi_dadd+0x2d0>
    3aec:	2220      	movs	r2, #32
    3aee:	0038      	movs	r0, r7
    3af0:	0029      	movs	r1, r5
    3af2:	1ad2      	subs	r2, r2, r3
    3af4:	40d8      	lsrs	r0, r3
    3af6:	4091      	lsls	r1, r2
    3af8:	4097      	lsls	r7, r2
    3afa:	002c      	movs	r4, r5
    3afc:	4301      	orrs	r1, r0
    3afe:	1e78      	subs	r0, r7, #1
    3b00:	4187      	sbcs	r7, r0
    3b02:	40dc      	lsrs	r4, r3
    3b04:	2600      	movs	r6, #0
    3b06:	430f      	orrs	r7, r1
    3b08:	077b      	lsls	r3, r7, #29
    3b0a:	d009      	beq.n	3b20 <__aeabi_dadd+0x120>
    3b0c:	230f      	movs	r3, #15
    3b0e:	403b      	ands	r3, r7
    3b10:	2b04      	cmp	r3, #4
    3b12:	d005      	beq.n	3b20 <__aeabi_dadd+0x120>
    3b14:	1d3b      	adds	r3, r7, #4
    3b16:	42bb      	cmp	r3, r7
    3b18:	41bf      	sbcs	r7, r7
    3b1a:	427f      	negs	r7, r7
    3b1c:	19e4      	adds	r4, r4, r7
    3b1e:	001f      	movs	r7, r3
    3b20:	0223      	lsls	r3, r4, #8
    3b22:	d52c      	bpl.n	3b7e <__aeabi_dadd+0x17e>
    3b24:	4b96      	ldr	r3, [pc, #600]	; (3d80 <__aeabi_dadd+0x380>)
    3b26:	3601      	adds	r6, #1
    3b28:	429e      	cmp	r6, r3
    3b2a:	d100      	bne.n	3b2e <__aeabi_dadd+0x12e>
    3b2c:	e09a      	b.n	3c64 <__aeabi_dadd+0x264>
    3b2e:	4645      	mov	r5, r8
    3b30:	4b94      	ldr	r3, [pc, #592]	; (3d84 <__aeabi_dadd+0x384>)
    3b32:	08ff      	lsrs	r7, r7, #3
    3b34:	401c      	ands	r4, r3
    3b36:	0760      	lsls	r0, r4, #29
    3b38:	0576      	lsls	r6, r6, #21
    3b3a:	0264      	lsls	r4, r4, #9
    3b3c:	4307      	orrs	r7, r0
    3b3e:	0b24      	lsrs	r4, r4, #12
    3b40:	0d76      	lsrs	r6, r6, #21
    3b42:	2100      	movs	r1, #0
    3b44:	0324      	lsls	r4, r4, #12
    3b46:	0b23      	lsrs	r3, r4, #12
    3b48:	0d0c      	lsrs	r4, r1, #20
    3b4a:	4a8f      	ldr	r2, [pc, #572]	; (3d88 <__aeabi_dadd+0x388>)
    3b4c:	0524      	lsls	r4, r4, #20
    3b4e:	431c      	orrs	r4, r3
    3b50:	4014      	ands	r4, r2
    3b52:	0533      	lsls	r3, r6, #20
    3b54:	4323      	orrs	r3, r4
    3b56:	005b      	lsls	r3, r3, #1
    3b58:	07ed      	lsls	r5, r5, #31
    3b5a:	085b      	lsrs	r3, r3, #1
    3b5c:	432b      	orrs	r3, r5
    3b5e:	0038      	movs	r0, r7
    3b60:	0019      	movs	r1, r3
    3b62:	bc3c      	pop	{r2, r3, r4, r5}
    3b64:	4690      	mov	r8, r2
    3b66:	4699      	mov	r9, r3
    3b68:	46a2      	mov	sl, r4
    3b6a:	46ab      	mov	fp, r5
    3b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b6e:	4664      	mov	r4, ip
    3b70:	4304      	orrs	r4, r0
    3b72:	d100      	bne.n	3b76 <__aeabi_dadd+0x176>
    3b74:	e211      	b.n	3f9a <__aeabi_dadd+0x59a>
    3b76:	0004      	movs	r4, r0
    3b78:	4667      	mov	r7, ip
    3b7a:	077b      	lsls	r3, r7, #29
    3b7c:	d1c6      	bne.n	3b0c <__aeabi_dadd+0x10c>
    3b7e:	4645      	mov	r5, r8
    3b80:	0760      	lsls	r0, r4, #29
    3b82:	08ff      	lsrs	r7, r7, #3
    3b84:	4307      	orrs	r7, r0
    3b86:	08e4      	lsrs	r4, r4, #3
    3b88:	4b7d      	ldr	r3, [pc, #500]	; (3d80 <__aeabi_dadd+0x380>)
    3b8a:	429e      	cmp	r6, r3
    3b8c:	d030      	beq.n	3bf0 <__aeabi_dadd+0x1f0>
    3b8e:	0324      	lsls	r4, r4, #12
    3b90:	0576      	lsls	r6, r6, #21
    3b92:	0b24      	lsrs	r4, r4, #12
    3b94:	0d76      	lsrs	r6, r6, #21
    3b96:	e7d4      	b.n	3b42 <__aeabi_dadd+0x142>
    3b98:	1a33      	subs	r3, r6, r0
    3b9a:	469a      	mov	sl, r3
    3b9c:	2b00      	cmp	r3, #0
    3b9e:	dd78      	ble.n	3c92 <__aeabi_dadd+0x292>
    3ba0:	2800      	cmp	r0, #0
    3ba2:	d031      	beq.n	3c08 <__aeabi_dadd+0x208>
    3ba4:	4876      	ldr	r0, [pc, #472]	; (3d80 <__aeabi_dadd+0x380>)
    3ba6:	4286      	cmp	r6, r0
    3ba8:	d0ae      	beq.n	3b08 <__aeabi_dadd+0x108>
    3baa:	2080      	movs	r0, #128	; 0x80
    3bac:	0400      	lsls	r0, r0, #16
    3bae:	4301      	orrs	r1, r0
    3bb0:	4653      	mov	r3, sl
    3bb2:	2b38      	cmp	r3, #56	; 0x38
    3bb4:	dc00      	bgt.n	3bb8 <__aeabi_dadd+0x1b8>
    3bb6:	e0e9      	b.n	3d8c <__aeabi_dadd+0x38c>
    3bb8:	430a      	orrs	r2, r1
    3bba:	1e51      	subs	r1, r2, #1
    3bbc:	418a      	sbcs	r2, r1
    3bbe:	2100      	movs	r1, #0
    3bc0:	19d2      	adds	r2, r2, r7
    3bc2:	42ba      	cmp	r2, r7
    3bc4:	41bf      	sbcs	r7, r7
    3bc6:	1909      	adds	r1, r1, r4
    3bc8:	427c      	negs	r4, r7
    3bca:	0017      	movs	r7, r2
    3bcc:	190c      	adds	r4, r1, r4
    3bce:	0223      	lsls	r3, r4, #8
    3bd0:	d5d3      	bpl.n	3b7a <__aeabi_dadd+0x17a>
    3bd2:	4b6b      	ldr	r3, [pc, #428]	; (3d80 <__aeabi_dadd+0x380>)
    3bd4:	3601      	adds	r6, #1
    3bd6:	429e      	cmp	r6, r3
    3bd8:	d100      	bne.n	3bdc <__aeabi_dadd+0x1dc>
    3bda:	e13a      	b.n	3e52 <__aeabi_dadd+0x452>
    3bdc:	2001      	movs	r0, #1
    3bde:	4b69      	ldr	r3, [pc, #420]	; (3d84 <__aeabi_dadd+0x384>)
    3be0:	401c      	ands	r4, r3
    3be2:	087b      	lsrs	r3, r7, #1
    3be4:	4007      	ands	r7, r0
    3be6:	431f      	orrs	r7, r3
    3be8:	07e0      	lsls	r0, r4, #31
    3bea:	4307      	orrs	r7, r0
    3bec:	0864      	lsrs	r4, r4, #1
    3bee:	e78b      	b.n	3b08 <__aeabi_dadd+0x108>
    3bf0:	0023      	movs	r3, r4
    3bf2:	433b      	orrs	r3, r7
    3bf4:	d100      	bne.n	3bf8 <__aeabi_dadd+0x1f8>
    3bf6:	e1cb      	b.n	3f90 <__aeabi_dadd+0x590>
    3bf8:	2280      	movs	r2, #128	; 0x80
    3bfa:	0312      	lsls	r2, r2, #12
    3bfc:	4314      	orrs	r4, r2
    3bfe:	0324      	lsls	r4, r4, #12
    3c00:	0b24      	lsrs	r4, r4, #12
    3c02:	e79e      	b.n	3b42 <__aeabi_dadd+0x142>
    3c04:	002e      	movs	r6, r5
    3c06:	e77f      	b.n	3b08 <__aeabi_dadd+0x108>
    3c08:	0008      	movs	r0, r1
    3c0a:	4310      	orrs	r0, r2
    3c0c:	d100      	bne.n	3c10 <__aeabi_dadd+0x210>
    3c0e:	e0b4      	b.n	3d7a <__aeabi_dadd+0x37a>
    3c10:	1e58      	subs	r0, r3, #1
    3c12:	2800      	cmp	r0, #0
    3c14:	d000      	beq.n	3c18 <__aeabi_dadd+0x218>
    3c16:	e0de      	b.n	3dd6 <__aeabi_dadd+0x3d6>
    3c18:	18ba      	adds	r2, r7, r2
    3c1a:	42ba      	cmp	r2, r7
    3c1c:	419b      	sbcs	r3, r3
    3c1e:	1864      	adds	r4, r4, r1
    3c20:	425b      	negs	r3, r3
    3c22:	18e4      	adds	r4, r4, r3
    3c24:	0017      	movs	r7, r2
    3c26:	2601      	movs	r6, #1
    3c28:	0223      	lsls	r3, r4, #8
    3c2a:	d5a6      	bpl.n	3b7a <__aeabi_dadd+0x17a>
    3c2c:	2602      	movs	r6, #2
    3c2e:	e7d5      	b.n	3bdc <__aeabi_dadd+0x1dc>
    3c30:	2d00      	cmp	r5, #0
    3c32:	d16e      	bne.n	3d12 <__aeabi_dadd+0x312>
    3c34:	1c70      	adds	r0, r6, #1
    3c36:	0540      	lsls	r0, r0, #21
    3c38:	0d40      	lsrs	r0, r0, #21
    3c3a:	2801      	cmp	r0, #1
    3c3c:	dc00      	bgt.n	3c40 <__aeabi_dadd+0x240>
    3c3e:	e0f9      	b.n	3e34 <__aeabi_dadd+0x434>
    3c40:	1ab8      	subs	r0, r7, r2
    3c42:	4684      	mov	ip, r0
    3c44:	4287      	cmp	r7, r0
    3c46:	4180      	sbcs	r0, r0
    3c48:	1ae5      	subs	r5, r4, r3
    3c4a:	4240      	negs	r0, r0
    3c4c:	1a2d      	subs	r5, r5, r0
    3c4e:	0228      	lsls	r0, r5, #8
    3c50:	d400      	bmi.n	3c54 <__aeabi_dadd+0x254>
    3c52:	e089      	b.n	3d68 <__aeabi_dadd+0x368>
    3c54:	1bd7      	subs	r7, r2, r7
    3c56:	42ba      	cmp	r2, r7
    3c58:	4192      	sbcs	r2, r2
    3c5a:	1b1c      	subs	r4, r3, r4
    3c5c:	4252      	negs	r2, r2
    3c5e:	1aa5      	subs	r5, r4, r2
    3c60:	46d8      	mov	r8, fp
    3c62:	e729      	b.n	3ab8 <__aeabi_dadd+0xb8>
    3c64:	4645      	mov	r5, r8
    3c66:	2400      	movs	r4, #0
    3c68:	2700      	movs	r7, #0
    3c6a:	e76a      	b.n	3b42 <__aeabi_dadd+0x142>
    3c6c:	4c45      	ldr	r4, [pc, #276]	; (3d84 <__aeabi_dadd+0x384>)
    3c6e:	1af6      	subs	r6, r6, r3
    3c70:	402c      	ands	r4, r5
    3c72:	e749      	b.n	3b08 <__aeabi_dadd+0x108>
    3c74:	003d      	movs	r5, r7
    3c76:	3828      	subs	r0, #40	; 0x28
    3c78:	4085      	lsls	r5, r0
    3c7a:	2700      	movs	r7, #0
    3c7c:	e72e      	b.n	3adc <__aeabi_dadd+0xdc>
    3c7e:	0038      	movs	r0, r7
    3c80:	f001 fb04 	bl	528c <__clzsi2>
    3c84:	3020      	adds	r0, #32
    3c86:	e71d      	b.n	3ac4 <__aeabi_dadd+0xc4>
    3c88:	430a      	orrs	r2, r1
    3c8a:	1e51      	subs	r1, r2, #1
    3c8c:	418a      	sbcs	r2, r1
    3c8e:	2100      	movs	r1, #0
    3c90:	e707      	b.n	3aa2 <__aeabi_dadd+0xa2>
    3c92:	2b00      	cmp	r3, #0
    3c94:	d000      	beq.n	3c98 <__aeabi_dadd+0x298>
    3c96:	e0f3      	b.n	3e80 <__aeabi_dadd+0x480>
    3c98:	1c70      	adds	r0, r6, #1
    3c9a:	0543      	lsls	r3, r0, #21
    3c9c:	0d5b      	lsrs	r3, r3, #21
    3c9e:	2b01      	cmp	r3, #1
    3ca0:	dc00      	bgt.n	3ca4 <__aeabi_dadd+0x2a4>
    3ca2:	e0ad      	b.n	3e00 <__aeabi_dadd+0x400>
    3ca4:	4b36      	ldr	r3, [pc, #216]	; (3d80 <__aeabi_dadd+0x380>)
    3ca6:	4298      	cmp	r0, r3
    3ca8:	d100      	bne.n	3cac <__aeabi_dadd+0x2ac>
    3caa:	e0d1      	b.n	3e50 <__aeabi_dadd+0x450>
    3cac:	18ba      	adds	r2, r7, r2
    3cae:	42ba      	cmp	r2, r7
    3cb0:	41bf      	sbcs	r7, r7
    3cb2:	1864      	adds	r4, r4, r1
    3cb4:	427f      	negs	r7, r7
    3cb6:	19e4      	adds	r4, r4, r7
    3cb8:	07e7      	lsls	r7, r4, #31
    3cba:	0852      	lsrs	r2, r2, #1
    3cbc:	4317      	orrs	r7, r2
    3cbe:	0864      	lsrs	r4, r4, #1
    3cc0:	0006      	movs	r6, r0
    3cc2:	e721      	b.n	3b08 <__aeabi_dadd+0x108>
    3cc4:	482e      	ldr	r0, [pc, #184]	; (3d80 <__aeabi_dadd+0x380>)
    3cc6:	4285      	cmp	r5, r0
    3cc8:	d100      	bne.n	3ccc <__aeabi_dadd+0x2cc>
    3cca:	e093      	b.n	3df4 <__aeabi_dadd+0x3f4>
    3ccc:	001d      	movs	r5, r3
    3cce:	e6d0      	b.n	3a72 <__aeabi_dadd+0x72>
    3cd0:	0029      	movs	r1, r5
    3cd2:	3e1f      	subs	r6, #31
    3cd4:	40f1      	lsrs	r1, r6
    3cd6:	2b20      	cmp	r3, #32
    3cd8:	d100      	bne.n	3cdc <__aeabi_dadd+0x2dc>
    3cda:	e08d      	b.n	3df8 <__aeabi_dadd+0x3f8>
    3cdc:	2240      	movs	r2, #64	; 0x40
    3cde:	1ad3      	subs	r3, r2, r3
    3ce0:	409d      	lsls	r5, r3
    3ce2:	432f      	orrs	r7, r5
    3ce4:	1e7d      	subs	r5, r7, #1
    3ce6:	41af      	sbcs	r7, r5
    3ce8:	2400      	movs	r4, #0
    3cea:	430f      	orrs	r7, r1
    3cec:	2600      	movs	r6, #0
    3cee:	e744      	b.n	3b7a <__aeabi_dadd+0x17a>
    3cf0:	002b      	movs	r3, r5
    3cf2:	0008      	movs	r0, r1
    3cf4:	3b20      	subs	r3, #32
    3cf6:	40d8      	lsrs	r0, r3
    3cf8:	0003      	movs	r3, r0
    3cfa:	2d20      	cmp	r5, #32
    3cfc:	d100      	bne.n	3d00 <__aeabi_dadd+0x300>
    3cfe:	e07d      	b.n	3dfc <__aeabi_dadd+0x3fc>
    3d00:	2040      	movs	r0, #64	; 0x40
    3d02:	1b45      	subs	r5, r0, r5
    3d04:	40a9      	lsls	r1, r5
    3d06:	430a      	orrs	r2, r1
    3d08:	1e51      	subs	r1, r2, #1
    3d0a:	418a      	sbcs	r2, r1
    3d0c:	2100      	movs	r1, #0
    3d0e:	431a      	orrs	r2, r3
    3d10:	e6c7      	b.n	3aa2 <__aeabi_dadd+0xa2>
    3d12:	2e00      	cmp	r6, #0
    3d14:	d050      	beq.n	3db8 <__aeabi_dadd+0x3b8>
    3d16:	4e1a      	ldr	r6, [pc, #104]	; (3d80 <__aeabi_dadd+0x380>)
    3d18:	42b0      	cmp	r0, r6
    3d1a:	d057      	beq.n	3dcc <__aeabi_dadd+0x3cc>
    3d1c:	2680      	movs	r6, #128	; 0x80
    3d1e:	426b      	negs	r3, r5
    3d20:	4699      	mov	r9, r3
    3d22:	0436      	lsls	r6, r6, #16
    3d24:	4334      	orrs	r4, r6
    3d26:	464b      	mov	r3, r9
    3d28:	2b38      	cmp	r3, #56	; 0x38
    3d2a:	dd00      	ble.n	3d2e <__aeabi_dadd+0x32e>
    3d2c:	e0d6      	b.n	3edc <__aeabi_dadd+0x4dc>
    3d2e:	2b1f      	cmp	r3, #31
    3d30:	dd00      	ble.n	3d34 <__aeabi_dadd+0x334>
    3d32:	e135      	b.n	3fa0 <__aeabi_dadd+0x5a0>
    3d34:	2620      	movs	r6, #32
    3d36:	1af5      	subs	r5, r6, r3
    3d38:	0026      	movs	r6, r4
    3d3a:	40ae      	lsls	r6, r5
    3d3c:	46b2      	mov	sl, r6
    3d3e:	003e      	movs	r6, r7
    3d40:	40de      	lsrs	r6, r3
    3d42:	46ac      	mov	ip, r5
    3d44:	0035      	movs	r5, r6
    3d46:	4656      	mov	r6, sl
    3d48:	432e      	orrs	r6, r5
    3d4a:	4665      	mov	r5, ip
    3d4c:	40af      	lsls	r7, r5
    3d4e:	1e7d      	subs	r5, r7, #1
    3d50:	41af      	sbcs	r7, r5
    3d52:	40dc      	lsrs	r4, r3
    3d54:	4337      	orrs	r7, r6
    3d56:	1bd7      	subs	r7, r2, r7
    3d58:	42ba      	cmp	r2, r7
    3d5a:	4192      	sbcs	r2, r2
    3d5c:	1b0c      	subs	r4, r1, r4
    3d5e:	4252      	negs	r2, r2
    3d60:	1aa4      	subs	r4, r4, r2
    3d62:	0006      	movs	r6, r0
    3d64:	46d8      	mov	r8, fp
    3d66:	e6a3      	b.n	3ab0 <__aeabi_dadd+0xb0>
    3d68:	4664      	mov	r4, ip
    3d6a:	4667      	mov	r7, ip
    3d6c:	432c      	orrs	r4, r5
    3d6e:	d000      	beq.n	3d72 <__aeabi_dadd+0x372>
    3d70:	e6a2      	b.n	3ab8 <__aeabi_dadd+0xb8>
    3d72:	2500      	movs	r5, #0
    3d74:	2600      	movs	r6, #0
    3d76:	2700      	movs	r7, #0
    3d78:	e706      	b.n	3b88 <__aeabi_dadd+0x188>
    3d7a:	001e      	movs	r6, r3
    3d7c:	e6c4      	b.n	3b08 <__aeabi_dadd+0x108>
    3d7e:	46c0      	nop			; (mov r8, r8)
    3d80:	000007ff 	.word	0x000007ff
    3d84:	ff7fffff 	.word	0xff7fffff
    3d88:	800fffff 	.word	0x800fffff
    3d8c:	2b1f      	cmp	r3, #31
    3d8e:	dc63      	bgt.n	3e58 <__aeabi_dadd+0x458>
    3d90:	2020      	movs	r0, #32
    3d92:	1ac3      	subs	r3, r0, r3
    3d94:	0008      	movs	r0, r1
    3d96:	4098      	lsls	r0, r3
    3d98:	469c      	mov	ip, r3
    3d9a:	4683      	mov	fp, r0
    3d9c:	4653      	mov	r3, sl
    3d9e:	0010      	movs	r0, r2
    3da0:	40d8      	lsrs	r0, r3
    3da2:	0003      	movs	r3, r0
    3da4:	4658      	mov	r0, fp
    3da6:	4318      	orrs	r0, r3
    3da8:	4663      	mov	r3, ip
    3daa:	409a      	lsls	r2, r3
    3dac:	1e53      	subs	r3, r2, #1
    3dae:	419a      	sbcs	r2, r3
    3db0:	4653      	mov	r3, sl
    3db2:	4302      	orrs	r2, r0
    3db4:	40d9      	lsrs	r1, r3
    3db6:	e703      	b.n	3bc0 <__aeabi_dadd+0x1c0>
    3db8:	0026      	movs	r6, r4
    3dba:	433e      	orrs	r6, r7
    3dbc:	d006      	beq.n	3dcc <__aeabi_dadd+0x3cc>
    3dbe:	43eb      	mvns	r3, r5
    3dc0:	4699      	mov	r9, r3
    3dc2:	2b00      	cmp	r3, #0
    3dc4:	d0c7      	beq.n	3d56 <__aeabi_dadd+0x356>
    3dc6:	4e94      	ldr	r6, [pc, #592]	; (4018 <__aeabi_dadd+0x618>)
    3dc8:	42b0      	cmp	r0, r6
    3dca:	d1ac      	bne.n	3d26 <__aeabi_dadd+0x326>
    3dcc:	000c      	movs	r4, r1
    3dce:	0017      	movs	r7, r2
    3dd0:	0006      	movs	r6, r0
    3dd2:	46d8      	mov	r8, fp
    3dd4:	e698      	b.n	3b08 <__aeabi_dadd+0x108>
    3dd6:	4b90      	ldr	r3, [pc, #576]	; (4018 <__aeabi_dadd+0x618>)
    3dd8:	459a      	cmp	sl, r3
    3dda:	d00b      	beq.n	3df4 <__aeabi_dadd+0x3f4>
    3ddc:	4682      	mov	sl, r0
    3dde:	e6e7      	b.n	3bb0 <__aeabi_dadd+0x1b0>
    3de0:	2800      	cmp	r0, #0
    3de2:	d000      	beq.n	3de6 <__aeabi_dadd+0x3e6>
    3de4:	e09e      	b.n	3f24 <__aeabi_dadd+0x524>
    3de6:	0018      	movs	r0, r3
    3de8:	4310      	orrs	r0, r2
    3dea:	d100      	bne.n	3dee <__aeabi_dadd+0x3ee>
    3dec:	e0e9      	b.n	3fc2 <__aeabi_dadd+0x5c2>
    3dee:	001c      	movs	r4, r3
    3df0:	0017      	movs	r7, r2
    3df2:	46d8      	mov	r8, fp
    3df4:	4e88      	ldr	r6, [pc, #544]	; (4018 <__aeabi_dadd+0x618>)
    3df6:	e687      	b.n	3b08 <__aeabi_dadd+0x108>
    3df8:	2500      	movs	r5, #0
    3dfa:	e772      	b.n	3ce2 <__aeabi_dadd+0x2e2>
    3dfc:	2100      	movs	r1, #0
    3dfe:	e782      	b.n	3d06 <__aeabi_dadd+0x306>
    3e00:	0023      	movs	r3, r4
    3e02:	433b      	orrs	r3, r7
    3e04:	2e00      	cmp	r6, #0
    3e06:	d000      	beq.n	3e0a <__aeabi_dadd+0x40a>
    3e08:	e0ab      	b.n	3f62 <__aeabi_dadd+0x562>
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d100      	bne.n	3e10 <__aeabi_dadd+0x410>
    3e0e:	e0e7      	b.n	3fe0 <__aeabi_dadd+0x5e0>
    3e10:	000b      	movs	r3, r1
    3e12:	4313      	orrs	r3, r2
    3e14:	d100      	bne.n	3e18 <__aeabi_dadd+0x418>
    3e16:	e677      	b.n	3b08 <__aeabi_dadd+0x108>
    3e18:	18ba      	adds	r2, r7, r2
    3e1a:	42ba      	cmp	r2, r7
    3e1c:	41bf      	sbcs	r7, r7
    3e1e:	1864      	adds	r4, r4, r1
    3e20:	427f      	negs	r7, r7
    3e22:	19e4      	adds	r4, r4, r7
    3e24:	0223      	lsls	r3, r4, #8
    3e26:	d400      	bmi.n	3e2a <__aeabi_dadd+0x42a>
    3e28:	e0f2      	b.n	4010 <__aeabi_dadd+0x610>
    3e2a:	4b7c      	ldr	r3, [pc, #496]	; (401c <__aeabi_dadd+0x61c>)
    3e2c:	0017      	movs	r7, r2
    3e2e:	401c      	ands	r4, r3
    3e30:	0006      	movs	r6, r0
    3e32:	e669      	b.n	3b08 <__aeabi_dadd+0x108>
    3e34:	0020      	movs	r0, r4
    3e36:	4338      	orrs	r0, r7
    3e38:	2e00      	cmp	r6, #0
    3e3a:	d1d1      	bne.n	3de0 <__aeabi_dadd+0x3e0>
    3e3c:	2800      	cmp	r0, #0
    3e3e:	d15b      	bne.n	3ef8 <__aeabi_dadd+0x4f8>
    3e40:	001c      	movs	r4, r3
    3e42:	4314      	orrs	r4, r2
    3e44:	d100      	bne.n	3e48 <__aeabi_dadd+0x448>
    3e46:	e0a8      	b.n	3f9a <__aeabi_dadd+0x59a>
    3e48:	001c      	movs	r4, r3
    3e4a:	0017      	movs	r7, r2
    3e4c:	46d8      	mov	r8, fp
    3e4e:	e65b      	b.n	3b08 <__aeabi_dadd+0x108>
    3e50:	0006      	movs	r6, r0
    3e52:	2400      	movs	r4, #0
    3e54:	2700      	movs	r7, #0
    3e56:	e697      	b.n	3b88 <__aeabi_dadd+0x188>
    3e58:	4650      	mov	r0, sl
    3e5a:	000b      	movs	r3, r1
    3e5c:	3820      	subs	r0, #32
    3e5e:	40c3      	lsrs	r3, r0
    3e60:	4699      	mov	r9, r3
    3e62:	4653      	mov	r3, sl
    3e64:	2b20      	cmp	r3, #32
    3e66:	d100      	bne.n	3e6a <__aeabi_dadd+0x46a>
    3e68:	e095      	b.n	3f96 <__aeabi_dadd+0x596>
    3e6a:	2340      	movs	r3, #64	; 0x40
    3e6c:	4650      	mov	r0, sl
    3e6e:	1a1b      	subs	r3, r3, r0
    3e70:	4099      	lsls	r1, r3
    3e72:	430a      	orrs	r2, r1
    3e74:	1e51      	subs	r1, r2, #1
    3e76:	418a      	sbcs	r2, r1
    3e78:	464b      	mov	r3, r9
    3e7a:	2100      	movs	r1, #0
    3e7c:	431a      	orrs	r2, r3
    3e7e:	e69f      	b.n	3bc0 <__aeabi_dadd+0x1c0>
    3e80:	2e00      	cmp	r6, #0
    3e82:	d130      	bne.n	3ee6 <__aeabi_dadd+0x4e6>
    3e84:	0026      	movs	r6, r4
    3e86:	433e      	orrs	r6, r7
    3e88:	d067      	beq.n	3f5a <__aeabi_dadd+0x55a>
    3e8a:	43db      	mvns	r3, r3
    3e8c:	469a      	mov	sl, r3
    3e8e:	2b00      	cmp	r3, #0
    3e90:	d01c      	beq.n	3ecc <__aeabi_dadd+0x4cc>
    3e92:	4e61      	ldr	r6, [pc, #388]	; (4018 <__aeabi_dadd+0x618>)
    3e94:	42b0      	cmp	r0, r6
    3e96:	d060      	beq.n	3f5a <__aeabi_dadd+0x55a>
    3e98:	4653      	mov	r3, sl
    3e9a:	2b38      	cmp	r3, #56	; 0x38
    3e9c:	dd00      	ble.n	3ea0 <__aeabi_dadd+0x4a0>
    3e9e:	e096      	b.n	3fce <__aeabi_dadd+0x5ce>
    3ea0:	2b1f      	cmp	r3, #31
    3ea2:	dd00      	ble.n	3ea6 <__aeabi_dadd+0x4a6>
    3ea4:	e09f      	b.n	3fe6 <__aeabi_dadd+0x5e6>
    3ea6:	2620      	movs	r6, #32
    3ea8:	1af3      	subs	r3, r6, r3
    3eaa:	0026      	movs	r6, r4
    3eac:	409e      	lsls	r6, r3
    3eae:	469c      	mov	ip, r3
    3eb0:	46b3      	mov	fp, r6
    3eb2:	4653      	mov	r3, sl
    3eb4:	003e      	movs	r6, r7
    3eb6:	40de      	lsrs	r6, r3
    3eb8:	0033      	movs	r3, r6
    3eba:	465e      	mov	r6, fp
    3ebc:	431e      	orrs	r6, r3
    3ebe:	4663      	mov	r3, ip
    3ec0:	409f      	lsls	r7, r3
    3ec2:	1e7b      	subs	r3, r7, #1
    3ec4:	419f      	sbcs	r7, r3
    3ec6:	4653      	mov	r3, sl
    3ec8:	40dc      	lsrs	r4, r3
    3eca:	4337      	orrs	r7, r6
    3ecc:	18bf      	adds	r7, r7, r2
    3ece:	4297      	cmp	r7, r2
    3ed0:	4192      	sbcs	r2, r2
    3ed2:	1864      	adds	r4, r4, r1
    3ed4:	4252      	negs	r2, r2
    3ed6:	18a4      	adds	r4, r4, r2
    3ed8:	0006      	movs	r6, r0
    3eda:	e678      	b.n	3bce <__aeabi_dadd+0x1ce>
    3edc:	4327      	orrs	r7, r4
    3ede:	1e7c      	subs	r4, r7, #1
    3ee0:	41a7      	sbcs	r7, r4
    3ee2:	2400      	movs	r4, #0
    3ee4:	e737      	b.n	3d56 <__aeabi_dadd+0x356>
    3ee6:	4e4c      	ldr	r6, [pc, #304]	; (4018 <__aeabi_dadd+0x618>)
    3ee8:	42b0      	cmp	r0, r6
    3eea:	d036      	beq.n	3f5a <__aeabi_dadd+0x55a>
    3eec:	2680      	movs	r6, #128	; 0x80
    3eee:	425b      	negs	r3, r3
    3ef0:	0436      	lsls	r6, r6, #16
    3ef2:	469a      	mov	sl, r3
    3ef4:	4334      	orrs	r4, r6
    3ef6:	e7cf      	b.n	3e98 <__aeabi_dadd+0x498>
    3ef8:	0018      	movs	r0, r3
    3efa:	4310      	orrs	r0, r2
    3efc:	d100      	bne.n	3f00 <__aeabi_dadd+0x500>
    3efe:	e603      	b.n	3b08 <__aeabi_dadd+0x108>
    3f00:	1ab8      	subs	r0, r7, r2
    3f02:	4684      	mov	ip, r0
    3f04:	4567      	cmp	r7, ip
    3f06:	41ad      	sbcs	r5, r5
    3f08:	1ae0      	subs	r0, r4, r3
    3f0a:	426d      	negs	r5, r5
    3f0c:	1b40      	subs	r0, r0, r5
    3f0e:	0205      	lsls	r5, r0, #8
    3f10:	d400      	bmi.n	3f14 <__aeabi_dadd+0x514>
    3f12:	e62c      	b.n	3b6e <__aeabi_dadd+0x16e>
    3f14:	1bd7      	subs	r7, r2, r7
    3f16:	42ba      	cmp	r2, r7
    3f18:	4192      	sbcs	r2, r2
    3f1a:	1b1c      	subs	r4, r3, r4
    3f1c:	4252      	negs	r2, r2
    3f1e:	1aa4      	subs	r4, r4, r2
    3f20:	46d8      	mov	r8, fp
    3f22:	e5f1      	b.n	3b08 <__aeabi_dadd+0x108>
    3f24:	0018      	movs	r0, r3
    3f26:	4310      	orrs	r0, r2
    3f28:	d100      	bne.n	3f2c <__aeabi_dadd+0x52c>
    3f2a:	e763      	b.n	3df4 <__aeabi_dadd+0x3f4>
    3f2c:	08f8      	lsrs	r0, r7, #3
    3f2e:	0767      	lsls	r7, r4, #29
    3f30:	4307      	orrs	r7, r0
    3f32:	2080      	movs	r0, #128	; 0x80
    3f34:	08e4      	lsrs	r4, r4, #3
    3f36:	0300      	lsls	r0, r0, #12
    3f38:	4204      	tst	r4, r0
    3f3a:	d008      	beq.n	3f4e <__aeabi_dadd+0x54e>
    3f3c:	08dd      	lsrs	r5, r3, #3
    3f3e:	4205      	tst	r5, r0
    3f40:	d105      	bne.n	3f4e <__aeabi_dadd+0x54e>
    3f42:	08d2      	lsrs	r2, r2, #3
    3f44:	0759      	lsls	r1, r3, #29
    3f46:	4311      	orrs	r1, r2
    3f48:	000f      	movs	r7, r1
    3f4a:	002c      	movs	r4, r5
    3f4c:	46d8      	mov	r8, fp
    3f4e:	0f7b      	lsrs	r3, r7, #29
    3f50:	00e4      	lsls	r4, r4, #3
    3f52:	431c      	orrs	r4, r3
    3f54:	00ff      	lsls	r7, r7, #3
    3f56:	4e30      	ldr	r6, [pc, #192]	; (4018 <__aeabi_dadd+0x618>)
    3f58:	e5d6      	b.n	3b08 <__aeabi_dadd+0x108>
    3f5a:	000c      	movs	r4, r1
    3f5c:	0017      	movs	r7, r2
    3f5e:	0006      	movs	r6, r0
    3f60:	e5d2      	b.n	3b08 <__aeabi_dadd+0x108>
    3f62:	2b00      	cmp	r3, #0
    3f64:	d038      	beq.n	3fd8 <__aeabi_dadd+0x5d8>
    3f66:	000b      	movs	r3, r1
    3f68:	4313      	orrs	r3, r2
    3f6a:	d100      	bne.n	3f6e <__aeabi_dadd+0x56e>
    3f6c:	e742      	b.n	3df4 <__aeabi_dadd+0x3f4>
    3f6e:	08f8      	lsrs	r0, r7, #3
    3f70:	0767      	lsls	r7, r4, #29
    3f72:	4307      	orrs	r7, r0
    3f74:	2080      	movs	r0, #128	; 0x80
    3f76:	08e4      	lsrs	r4, r4, #3
    3f78:	0300      	lsls	r0, r0, #12
    3f7a:	4204      	tst	r4, r0
    3f7c:	d0e7      	beq.n	3f4e <__aeabi_dadd+0x54e>
    3f7e:	08cb      	lsrs	r3, r1, #3
    3f80:	4203      	tst	r3, r0
    3f82:	d1e4      	bne.n	3f4e <__aeabi_dadd+0x54e>
    3f84:	08d2      	lsrs	r2, r2, #3
    3f86:	0749      	lsls	r1, r1, #29
    3f88:	4311      	orrs	r1, r2
    3f8a:	000f      	movs	r7, r1
    3f8c:	001c      	movs	r4, r3
    3f8e:	e7de      	b.n	3f4e <__aeabi_dadd+0x54e>
    3f90:	2700      	movs	r7, #0
    3f92:	2400      	movs	r4, #0
    3f94:	e5d5      	b.n	3b42 <__aeabi_dadd+0x142>
    3f96:	2100      	movs	r1, #0
    3f98:	e76b      	b.n	3e72 <__aeabi_dadd+0x472>
    3f9a:	2500      	movs	r5, #0
    3f9c:	2700      	movs	r7, #0
    3f9e:	e5f3      	b.n	3b88 <__aeabi_dadd+0x188>
    3fa0:	464e      	mov	r6, r9
    3fa2:	0025      	movs	r5, r4
    3fa4:	3e20      	subs	r6, #32
    3fa6:	40f5      	lsrs	r5, r6
    3fa8:	464b      	mov	r3, r9
    3faa:	002e      	movs	r6, r5
    3fac:	2b20      	cmp	r3, #32
    3fae:	d02d      	beq.n	400c <__aeabi_dadd+0x60c>
    3fb0:	2540      	movs	r5, #64	; 0x40
    3fb2:	1aed      	subs	r5, r5, r3
    3fb4:	40ac      	lsls	r4, r5
    3fb6:	4327      	orrs	r7, r4
    3fb8:	1e7c      	subs	r4, r7, #1
    3fba:	41a7      	sbcs	r7, r4
    3fbc:	2400      	movs	r4, #0
    3fbe:	4337      	orrs	r7, r6
    3fc0:	e6c9      	b.n	3d56 <__aeabi_dadd+0x356>
    3fc2:	2480      	movs	r4, #128	; 0x80
    3fc4:	2500      	movs	r5, #0
    3fc6:	0324      	lsls	r4, r4, #12
    3fc8:	4e13      	ldr	r6, [pc, #76]	; (4018 <__aeabi_dadd+0x618>)
    3fca:	2700      	movs	r7, #0
    3fcc:	e5dc      	b.n	3b88 <__aeabi_dadd+0x188>
    3fce:	4327      	orrs	r7, r4
    3fd0:	1e7c      	subs	r4, r7, #1
    3fd2:	41a7      	sbcs	r7, r4
    3fd4:	2400      	movs	r4, #0
    3fd6:	e779      	b.n	3ecc <__aeabi_dadd+0x4cc>
    3fd8:	000c      	movs	r4, r1
    3fda:	0017      	movs	r7, r2
    3fdc:	4e0e      	ldr	r6, [pc, #56]	; (4018 <__aeabi_dadd+0x618>)
    3fde:	e593      	b.n	3b08 <__aeabi_dadd+0x108>
    3fe0:	000c      	movs	r4, r1
    3fe2:	0017      	movs	r7, r2
    3fe4:	e590      	b.n	3b08 <__aeabi_dadd+0x108>
    3fe6:	4656      	mov	r6, sl
    3fe8:	0023      	movs	r3, r4
    3fea:	3e20      	subs	r6, #32
    3fec:	40f3      	lsrs	r3, r6
    3fee:	4699      	mov	r9, r3
    3ff0:	4653      	mov	r3, sl
    3ff2:	2b20      	cmp	r3, #32
    3ff4:	d00e      	beq.n	4014 <__aeabi_dadd+0x614>
    3ff6:	2340      	movs	r3, #64	; 0x40
    3ff8:	4656      	mov	r6, sl
    3ffa:	1b9b      	subs	r3, r3, r6
    3ffc:	409c      	lsls	r4, r3
    3ffe:	4327      	orrs	r7, r4
    4000:	1e7c      	subs	r4, r7, #1
    4002:	41a7      	sbcs	r7, r4
    4004:	464b      	mov	r3, r9
    4006:	2400      	movs	r4, #0
    4008:	431f      	orrs	r7, r3
    400a:	e75f      	b.n	3ecc <__aeabi_dadd+0x4cc>
    400c:	2400      	movs	r4, #0
    400e:	e7d2      	b.n	3fb6 <__aeabi_dadd+0x5b6>
    4010:	0017      	movs	r7, r2
    4012:	e5b2      	b.n	3b7a <__aeabi_dadd+0x17a>
    4014:	2400      	movs	r4, #0
    4016:	e7f2      	b.n	3ffe <__aeabi_dadd+0x5fe>
    4018:	000007ff 	.word	0x000007ff
    401c:	ff7fffff 	.word	0xff7fffff

00004020 <__aeabi_ddiv>:
    4020:	b5f0      	push	{r4, r5, r6, r7, lr}
    4022:	4657      	mov	r7, sl
    4024:	4645      	mov	r5, r8
    4026:	46de      	mov	lr, fp
    4028:	464e      	mov	r6, r9
    402a:	b5e0      	push	{r5, r6, r7, lr}
    402c:	004c      	lsls	r4, r1, #1
    402e:	030e      	lsls	r6, r1, #12
    4030:	b087      	sub	sp, #28
    4032:	4683      	mov	fp, r0
    4034:	4692      	mov	sl, r2
    4036:	001d      	movs	r5, r3
    4038:	4680      	mov	r8, r0
    403a:	0b36      	lsrs	r6, r6, #12
    403c:	0d64      	lsrs	r4, r4, #21
    403e:	0fcf      	lsrs	r7, r1, #31
    4040:	2c00      	cmp	r4, #0
    4042:	d04f      	beq.n	40e4 <__aeabi_ddiv+0xc4>
    4044:	4b6f      	ldr	r3, [pc, #444]	; (4204 <__aeabi_ddiv+0x1e4>)
    4046:	429c      	cmp	r4, r3
    4048:	d035      	beq.n	40b6 <__aeabi_ddiv+0x96>
    404a:	2380      	movs	r3, #128	; 0x80
    404c:	0f42      	lsrs	r2, r0, #29
    404e:	041b      	lsls	r3, r3, #16
    4050:	00f6      	lsls	r6, r6, #3
    4052:	4313      	orrs	r3, r2
    4054:	4333      	orrs	r3, r6
    4056:	4699      	mov	r9, r3
    4058:	00c3      	lsls	r3, r0, #3
    405a:	4698      	mov	r8, r3
    405c:	4b6a      	ldr	r3, [pc, #424]	; (4208 <__aeabi_ddiv+0x1e8>)
    405e:	2600      	movs	r6, #0
    4060:	469c      	mov	ip, r3
    4062:	2300      	movs	r3, #0
    4064:	4464      	add	r4, ip
    4066:	9303      	str	r3, [sp, #12]
    4068:	032b      	lsls	r3, r5, #12
    406a:	0b1b      	lsrs	r3, r3, #12
    406c:	469b      	mov	fp, r3
    406e:	006b      	lsls	r3, r5, #1
    4070:	0fed      	lsrs	r5, r5, #31
    4072:	4650      	mov	r0, sl
    4074:	0d5b      	lsrs	r3, r3, #21
    4076:	9501      	str	r5, [sp, #4]
    4078:	d05e      	beq.n	4138 <__aeabi_ddiv+0x118>
    407a:	4a62      	ldr	r2, [pc, #392]	; (4204 <__aeabi_ddiv+0x1e4>)
    407c:	4293      	cmp	r3, r2
    407e:	d053      	beq.n	4128 <__aeabi_ddiv+0x108>
    4080:	465a      	mov	r2, fp
    4082:	00d1      	lsls	r1, r2, #3
    4084:	2280      	movs	r2, #128	; 0x80
    4086:	0f40      	lsrs	r0, r0, #29
    4088:	0412      	lsls	r2, r2, #16
    408a:	4302      	orrs	r2, r0
    408c:	430a      	orrs	r2, r1
    408e:	4693      	mov	fp, r2
    4090:	4652      	mov	r2, sl
    4092:	00d1      	lsls	r1, r2, #3
    4094:	4a5c      	ldr	r2, [pc, #368]	; (4208 <__aeabi_ddiv+0x1e8>)
    4096:	4694      	mov	ip, r2
    4098:	2200      	movs	r2, #0
    409a:	4463      	add	r3, ip
    409c:	0038      	movs	r0, r7
    409e:	4068      	eors	r0, r5
    40a0:	4684      	mov	ip, r0
    40a2:	9002      	str	r0, [sp, #8]
    40a4:	1ae4      	subs	r4, r4, r3
    40a6:	4316      	orrs	r6, r2
    40a8:	2e0f      	cmp	r6, #15
    40aa:	d900      	bls.n	40ae <__aeabi_ddiv+0x8e>
    40ac:	e0b4      	b.n	4218 <__aeabi_ddiv+0x1f8>
    40ae:	4b57      	ldr	r3, [pc, #348]	; (420c <__aeabi_ddiv+0x1ec>)
    40b0:	00b6      	lsls	r6, r6, #2
    40b2:	599b      	ldr	r3, [r3, r6]
    40b4:	469f      	mov	pc, r3
    40b6:	0003      	movs	r3, r0
    40b8:	4333      	orrs	r3, r6
    40ba:	4699      	mov	r9, r3
    40bc:	d16c      	bne.n	4198 <__aeabi_ddiv+0x178>
    40be:	2300      	movs	r3, #0
    40c0:	4698      	mov	r8, r3
    40c2:	3302      	adds	r3, #2
    40c4:	2608      	movs	r6, #8
    40c6:	9303      	str	r3, [sp, #12]
    40c8:	e7ce      	b.n	4068 <__aeabi_ddiv+0x48>
    40ca:	46cb      	mov	fp, r9
    40cc:	4641      	mov	r1, r8
    40ce:	9a03      	ldr	r2, [sp, #12]
    40d0:	9701      	str	r7, [sp, #4]
    40d2:	2a02      	cmp	r2, #2
    40d4:	d165      	bne.n	41a2 <__aeabi_ddiv+0x182>
    40d6:	9b01      	ldr	r3, [sp, #4]
    40d8:	4c4a      	ldr	r4, [pc, #296]	; (4204 <__aeabi_ddiv+0x1e4>)
    40da:	469c      	mov	ip, r3
    40dc:	2300      	movs	r3, #0
    40de:	2200      	movs	r2, #0
    40e0:	4698      	mov	r8, r3
    40e2:	e06b      	b.n	41bc <__aeabi_ddiv+0x19c>
    40e4:	0003      	movs	r3, r0
    40e6:	4333      	orrs	r3, r6
    40e8:	4699      	mov	r9, r3
    40ea:	d04e      	beq.n	418a <__aeabi_ddiv+0x16a>
    40ec:	2e00      	cmp	r6, #0
    40ee:	d100      	bne.n	40f2 <__aeabi_ddiv+0xd2>
    40f0:	e1bc      	b.n	446c <__aeabi_ddiv+0x44c>
    40f2:	0030      	movs	r0, r6
    40f4:	f001 f8ca 	bl	528c <__clzsi2>
    40f8:	0003      	movs	r3, r0
    40fa:	3b0b      	subs	r3, #11
    40fc:	2b1c      	cmp	r3, #28
    40fe:	dd00      	ble.n	4102 <__aeabi_ddiv+0xe2>
    4100:	e1ac      	b.n	445c <__aeabi_ddiv+0x43c>
    4102:	221d      	movs	r2, #29
    4104:	1ad3      	subs	r3, r2, r3
    4106:	465a      	mov	r2, fp
    4108:	0001      	movs	r1, r0
    410a:	40da      	lsrs	r2, r3
    410c:	3908      	subs	r1, #8
    410e:	408e      	lsls	r6, r1
    4110:	0013      	movs	r3, r2
    4112:	4333      	orrs	r3, r6
    4114:	4699      	mov	r9, r3
    4116:	465b      	mov	r3, fp
    4118:	408b      	lsls	r3, r1
    411a:	4698      	mov	r8, r3
    411c:	2300      	movs	r3, #0
    411e:	4c3c      	ldr	r4, [pc, #240]	; (4210 <__aeabi_ddiv+0x1f0>)
    4120:	2600      	movs	r6, #0
    4122:	1a24      	subs	r4, r4, r0
    4124:	9303      	str	r3, [sp, #12]
    4126:	e79f      	b.n	4068 <__aeabi_ddiv+0x48>
    4128:	4651      	mov	r1, sl
    412a:	465a      	mov	r2, fp
    412c:	4311      	orrs	r1, r2
    412e:	d129      	bne.n	4184 <__aeabi_ddiv+0x164>
    4130:	2200      	movs	r2, #0
    4132:	4693      	mov	fp, r2
    4134:	3202      	adds	r2, #2
    4136:	e7b1      	b.n	409c <__aeabi_ddiv+0x7c>
    4138:	4659      	mov	r1, fp
    413a:	4301      	orrs	r1, r0
    413c:	d01e      	beq.n	417c <__aeabi_ddiv+0x15c>
    413e:	465b      	mov	r3, fp
    4140:	2b00      	cmp	r3, #0
    4142:	d100      	bne.n	4146 <__aeabi_ddiv+0x126>
    4144:	e19e      	b.n	4484 <__aeabi_ddiv+0x464>
    4146:	4658      	mov	r0, fp
    4148:	f001 f8a0 	bl	528c <__clzsi2>
    414c:	0003      	movs	r3, r0
    414e:	3b0b      	subs	r3, #11
    4150:	2b1c      	cmp	r3, #28
    4152:	dd00      	ble.n	4156 <__aeabi_ddiv+0x136>
    4154:	e18f      	b.n	4476 <__aeabi_ddiv+0x456>
    4156:	0002      	movs	r2, r0
    4158:	4659      	mov	r1, fp
    415a:	3a08      	subs	r2, #8
    415c:	4091      	lsls	r1, r2
    415e:	468b      	mov	fp, r1
    4160:	211d      	movs	r1, #29
    4162:	1acb      	subs	r3, r1, r3
    4164:	4651      	mov	r1, sl
    4166:	40d9      	lsrs	r1, r3
    4168:	000b      	movs	r3, r1
    416a:	4659      	mov	r1, fp
    416c:	430b      	orrs	r3, r1
    416e:	4651      	mov	r1, sl
    4170:	469b      	mov	fp, r3
    4172:	4091      	lsls	r1, r2
    4174:	4b26      	ldr	r3, [pc, #152]	; (4210 <__aeabi_ddiv+0x1f0>)
    4176:	2200      	movs	r2, #0
    4178:	1a1b      	subs	r3, r3, r0
    417a:	e78f      	b.n	409c <__aeabi_ddiv+0x7c>
    417c:	2300      	movs	r3, #0
    417e:	2201      	movs	r2, #1
    4180:	469b      	mov	fp, r3
    4182:	e78b      	b.n	409c <__aeabi_ddiv+0x7c>
    4184:	4651      	mov	r1, sl
    4186:	2203      	movs	r2, #3
    4188:	e788      	b.n	409c <__aeabi_ddiv+0x7c>
    418a:	2300      	movs	r3, #0
    418c:	4698      	mov	r8, r3
    418e:	3301      	adds	r3, #1
    4190:	2604      	movs	r6, #4
    4192:	2400      	movs	r4, #0
    4194:	9303      	str	r3, [sp, #12]
    4196:	e767      	b.n	4068 <__aeabi_ddiv+0x48>
    4198:	2303      	movs	r3, #3
    419a:	46b1      	mov	r9, r6
    419c:	9303      	str	r3, [sp, #12]
    419e:	260c      	movs	r6, #12
    41a0:	e762      	b.n	4068 <__aeabi_ddiv+0x48>
    41a2:	2a03      	cmp	r2, #3
    41a4:	d100      	bne.n	41a8 <__aeabi_ddiv+0x188>
    41a6:	e25c      	b.n	4662 <__aeabi_ddiv+0x642>
    41a8:	9b01      	ldr	r3, [sp, #4]
    41aa:	2a01      	cmp	r2, #1
    41ac:	d000      	beq.n	41b0 <__aeabi_ddiv+0x190>
    41ae:	e1e4      	b.n	457a <__aeabi_ddiv+0x55a>
    41b0:	4013      	ands	r3, r2
    41b2:	469c      	mov	ip, r3
    41b4:	2300      	movs	r3, #0
    41b6:	2400      	movs	r4, #0
    41b8:	2200      	movs	r2, #0
    41ba:	4698      	mov	r8, r3
    41bc:	2100      	movs	r1, #0
    41be:	0312      	lsls	r2, r2, #12
    41c0:	0b13      	lsrs	r3, r2, #12
    41c2:	0d0a      	lsrs	r2, r1, #20
    41c4:	0512      	lsls	r2, r2, #20
    41c6:	431a      	orrs	r2, r3
    41c8:	0523      	lsls	r3, r4, #20
    41ca:	4c12      	ldr	r4, [pc, #72]	; (4214 <__aeabi_ddiv+0x1f4>)
    41cc:	4640      	mov	r0, r8
    41ce:	4022      	ands	r2, r4
    41d0:	4313      	orrs	r3, r2
    41d2:	4662      	mov	r2, ip
    41d4:	005b      	lsls	r3, r3, #1
    41d6:	07d2      	lsls	r2, r2, #31
    41d8:	085b      	lsrs	r3, r3, #1
    41da:	4313      	orrs	r3, r2
    41dc:	0019      	movs	r1, r3
    41de:	b007      	add	sp, #28
    41e0:	bc3c      	pop	{r2, r3, r4, r5}
    41e2:	4690      	mov	r8, r2
    41e4:	4699      	mov	r9, r3
    41e6:	46a2      	mov	sl, r4
    41e8:	46ab      	mov	fp, r5
    41ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41ec:	2300      	movs	r3, #0
    41ee:	2280      	movs	r2, #128	; 0x80
    41f0:	469c      	mov	ip, r3
    41f2:	0312      	lsls	r2, r2, #12
    41f4:	4698      	mov	r8, r3
    41f6:	4c03      	ldr	r4, [pc, #12]	; (4204 <__aeabi_ddiv+0x1e4>)
    41f8:	e7e0      	b.n	41bc <__aeabi_ddiv+0x19c>
    41fa:	2300      	movs	r3, #0
    41fc:	4c01      	ldr	r4, [pc, #4]	; (4204 <__aeabi_ddiv+0x1e4>)
    41fe:	2200      	movs	r2, #0
    4200:	4698      	mov	r8, r3
    4202:	e7db      	b.n	41bc <__aeabi_ddiv+0x19c>
    4204:	000007ff 	.word	0x000007ff
    4208:	fffffc01 	.word	0xfffffc01
    420c:	00005e9c 	.word	0x00005e9c
    4210:	fffffc0d 	.word	0xfffffc0d
    4214:	800fffff 	.word	0x800fffff
    4218:	45d9      	cmp	r9, fp
    421a:	d900      	bls.n	421e <__aeabi_ddiv+0x1fe>
    421c:	e139      	b.n	4492 <__aeabi_ddiv+0x472>
    421e:	d100      	bne.n	4222 <__aeabi_ddiv+0x202>
    4220:	e134      	b.n	448c <__aeabi_ddiv+0x46c>
    4222:	2300      	movs	r3, #0
    4224:	4646      	mov	r6, r8
    4226:	464d      	mov	r5, r9
    4228:	469a      	mov	sl, r3
    422a:	3c01      	subs	r4, #1
    422c:	465b      	mov	r3, fp
    422e:	0e0a      	lsrs	r2, r1, #24
    4230:	021b      	lsls	r3, r3, #8
    4232:	431a      	orrs	r2, r3
    4234:	020b      	lsls	r3, r1, #8
    4236:	0c17      	lsrs	r7, r2, #16
    4238:	9303      	str	r3, [sp, #12]
    423a:	0413      	lsls	r3, r2, #16
    423c:	0c1b      	lsrs	r3, r3, #16
    423e:	0039      	movs	r1, r7
    4240:	0028      	movs	r0, r5
    4242:	4690      	mov	r8, r2
    4244:	9301      	str	r3, [sp, #4]
    4246:	f7ff fb25 	bl	3894 <__udivsi3>
    424a:	0002      	movs	r2, r0
    424c:	9b01      	ldr	r3, [sp, #4]
    424e:	4683      	mov	fp, r0
    4250:	435a      	muls	r2, r3
    4252:	0028      	movs	r0, r5
    4254:	0039      	movs	r1, r7
    4256:	4691      	mov	r9, r2
    4258:	f7ff fba2 	bl	39a0 <__aeabi_uidivmod>
    425c:	0c35      	lsrs	r5, r6, #16
    425e:	0409      	lsls	r1, r1, #16
    4260:	430d      	orrs	r5, r1
    4262:	45a9      	cmp	r9, r5
    4264:	d90d      	bls.n	4282 <__aeabi_ddiv+0x262>
    4266:	465b      	mov	r3, fp
    4268:	4445      	add	r5, r8
    426a:	3b01      	subs	r3, #1
    426c:	45a8      	cmp	r8, r5
    426e:	d900      	bls.n	4272 <__aeabi_ddiv+0x252>
    4270:	e13a      	b.n	44e8 <__aeabi_ddiv+0x4c8>
    4272:	45a9      	cmp	r9, r5
    4274:	d800      	bhi.n	4278 <__aeabi_ddiv+0x258>
    4276:	e137      	b.n	44e8 <__aeabi_ddiv+0x4c8>
    4278:	2302      	movs	r3, #2
    427a:	425b      	negs	r3, r3
    427c:	469c      	mov	ip, r3
    427e:	4445      	add	r5, r8
    4280:	44e3      	add	fp, ip
    4282:	464b      	mov	r3, r9
    4284:	1aeb      	subs	r3, r5, r3
    4286:	0039      	movs	r1, r7
    4288:	0018      	movs	r0, r3
    428a:	9304      	str	r3, [sp, #16]
    428c:	f7ff fb02 	bl	3894 <__udivsi3>
    4290:	9b01      	ldr	r3, [sp, #4]
    4292:	0005      	movs	r5, r0
    4294:	4343      	muls	r3, r0
    4296:	0039      	movs	r1, r7
    4298:	9804      	ldr	r0, [sp, #16]
    429a:	4699      	mov	r9, r3
    429c:	f7ff fb80 	bl	39a0 <__aeabi_uidivmod>
    42a0:	0433      	lsls	r3, r6, #16
    42a2:	0409      	lsls	r1, r1, #16
    42a4:	0c1b      	lsrs	r3, r3, #16
    42a6:	430b      	orrs	r3, r1
    42a8:	4599      	cmp	r9, r3
    42aa:	d909      	bls.n	42c0 <__aeabi_ddiv+0x2a0>
    42ac:	4443      	add	r3, r8
    42ae:	1e6a      	subs	r2, r5, #1
    42b0:	4598      	cmp	r8, r3
    42b2:	d900      	bls.n	42b6 <__aeabi_ddiv+0x296>
    42b4:	e11a      	b.n	44ec <__aeabi_ddiv+0x4cc>
    42b6:	4599      	cmp	r9, r3
    42b8:	d800      	bhi.n	42bc <__aeabi_ddiv+0x29c>
    42ba:	e117      	b.n	44ec <__aeabi_ddiv+0x4cc>
    42bc:	3d02      	subs	r5, #2
    42be:	4443      	add	r3, r8
    42c0:	464a      	mov	r2, r9
    42c2:	1a9b      	subs	r3, r3, r2
    42c4:	465a      	mov	r2, fp
    42c6:	0412      	lsls	r2, r2, #16
    42c8:	432a      	orrs	r2, r5
    42ca:	9903      	ldr	r1, [sp, #12]
    42cc:	4693      	mov	fp, r2
    42ce:	0c10      	lsrs	r0, r2, #16
    42d0:	0c0a      	lsrs	r2, r1, #16
    42d2:	4691      	mov	r9, r2
    42d4:	0409      	lsls	r1, r1, #16
    42d6:	465a      	mov	r2, fp
    42d8:	0c09      	lsrs	r1, r1, #16
    42da:	464e      	mov	r6, r9
    42dc:	000d      	movs	r5, r1
    42de:	0412      	lsls	r2, r2, #16
    42e0:	0c12      	lsrs	r2, r2, #16
    42e2:	4345      	muls	r5, r0
    42e4:	9105      	str	r1, [sp, #20]
    42e6:	4351      	muls	r1, r2
    42e8:	4372      	muls	r2, r6
    42ea:	4370      	muls	r0, r6
    42ec:	1952      	adds	r2, r2, r5
    42ee:	0c0e      	lsrs	r6, r1, #16
    42f0:	18b2      	adds	r2, r6, r2
    42f2:	4295      	cmp	r5, r2
    42f4:	d903      	bls.n	42fe <__aeabi_ddiv+0x2de>
    42f6:	2580      	movs	r5, #128	; 0x80
    42f8:	026d      	lsls	r5, r5, #9
    42fa:	46ac      	mov	ip, r5
    42fc:	4460      	add	r0, ip
    42fe:	0c15      	lsrs	r5, r2, #16
    4300:	0409      	lsls	r1, r1, #16
    4302:	0412      	lsls	r2, r2, #16
    4304:	0c09      	lsrs	r1, r1, #16
    4306:	1828      	adds	r0, r5, r0
    4308:	1852      	adds	r2, r2, r1
    430a:	4283      	cmp	r3, r0
    430c:	d200      	bcs.n	4310 <__aeabi_ddiv+0x2f0>
    430e:	e0ce      	b.n	44ae <__aeabi_ddiv+0x48e>
    4310:	d100      	bne.n	4314 <__aeabi_ddiv+0x2f4>
    4312:	e0c8      	b.n	44a6 <__aeabi_ddiv+0x486>
    4314:	1a1d      	subs	r5, r3, r0
    4316:	4653      	mov	r3, sl
    4318:	1a9e      	subs	r6, r3, r2
    431a:	45b2      	cmp	sl, r6
    431c:	4192      	sbcs	r2, r2
    431e:	4252      	negs	r2, r2
    4320:	1aab      	subs	r3, r5, r2
    4322:	469a      	mov	sl, r3
    4324:	4598      	cmp	r8, r3
    4326:	d100      	bne.n	432a <__aeabi_ddiv+0x30a>
    4328:	e117      	b.n	455a <__aeabi_ddiv+0x53a>
    432a:	0039      	movs	r1, r7
    432c:	0018      	movs	r0, r3
    432e:	f7ff fab1 	bl	3894 <__udivsi3>
    4332:	9b01      	ldr	r3, [sp, #4]
    4334:	0005      	movs	r5, r0
    4336:	4343      	muls	r3, r0
    4338:	0039      	movs	r1, r7
    433a:	4650      	mov	r0, sl
    433c:	9304      	str	r3, [sp, #16]
    433e:	f7ff fb2f 	bl	39a0 <__aeabi_uidivmod>
    4342:	9804      	ldr	r0, [sp, #16]
    4344:	040b      	lsls	r3, r1, #16
    4346:	0c31      	lsrs	r1, r6, #16
    4348:	4319      	orrs	r1, r3
    434a:	4288      	cmp	r0, r1
    434c:	d909      	bls.n	4362 <__aeabi_ddiv+0x342>
    434e:	4441      	add	r1, r8
    4350:	1e6b      	subs	r3, r5, #1
    4352:	4588      	cmp	r8, r1
    4354:	d900      	bls.n	4358 <__aeabi_ddiv+0x338>
    4356:	e107      	b.n	4568 <__aeabi_ddiv+0x548>
    4358:	4288      	cmp	r0, r1
    435a:	d800      	bhi.n	435e <__aeabi_ddiv+0x33e>
    435c:	e104      	b.n	4568 <__aeabi_ddiv+0x548>
    435e:	3d02      	subs	r5, #2
    4360:	4441      	add	r1, r8
    4362:	9b04      	ldr	r3, [sp, #16]
    4364:	1acb      	subs	r3, r1, r3
    4366:	0018      	movs	r0, r3
    4368:	0039      	movs	r1, r7
    436a:	9304      	str	r3, [sp, #16]
    436c:	f7ff fa92 	bl	3894 <__udivsi3>
    4370:	9b01      	ldr	r3, [sp, #4]
    4372:	4682      	mov	sl, r0
    4374:	4343      	muls	r3, r0
    4376:	0039      	movs	r1, r7
    4378:	9804      	ldr	r0, [sp, #16]
    437a:	9301      	str	r3, [sp, #4]
    437c:	f7ff fb10 	bl	39a0 <__aeabi_uidivmod>
    4380:	9801      	ldr	r0, [sp, #4]
    4382:	040b      	lsls	r3, r1, #16
    4384:	0431      	lsls	r1, r6, #16
    4386:	0c09      	lsrs	r1, r1, #16
    4388:	4319      	orrs	r1, r3
    438a:	4288      	cmp	r0, r1
    438c:	d90d      	bls.n	43aa <__aeabi_ddiv+0x38a>
    438e:	4653      	mov	r3, sl
    4390:	4441      	add	r1, r8
    4392:	3b01      	subs	r3, #1
    4394:	4588      	cmp	r8, r1
    4396:	d900      	bls.n	439a <__aeabi_ddiv+0x37a>
    4398:	e0e8      	b.n	456c <__aeabi_ddiv+0x54c>
    439a:	4288      	cmp	r0, r1
    439c:	d800      	bhi.n	43a0 <__aeabi_ddiv+0x380>
    439e:	e0e5      	b.n	456c <__aeabi_ddiv+0x54c>
    43a0:	2302      	movs	r3, #2
    43a2:	425b      	negs	r3, r3
    43a4:	469c      	mov	ip, r3
    43a6:	4441      	add	r1, r8
    43a8:	44e2      	add	sl, ip
    43aa:	9b01      	ldr	r3, [sp, #4]
    43ac:	042d      	lsls	r5, r5, #16
    43ae:	1ace      	subs	r6, r1, r3
    43b0:	4651      	mov	r1, sl
    43b2:	4329      	orrs	r1, r5
    43b4:	9d05      	ldr	r5, [sp, #20]
    43b6:	464f      	mov	r7, r9
    43b8:	002a      	movs	r2, r5
    43ba:	040b      	lsls	r3, r1, #16
    43bc:	0c08      	lsrs	r0, r1, #16
    43be:	0c1b      	lsrs	r3, r3, #16
    43c0:	435a      	muls	r2, r3
    43c2:	4345      	muls	r5, r0
    43c4:	437b      	muls	r3, r7
    43c6:	4378      	muls	r0, r7
    43c8:	195b      	adds	r3, r3, r5
    43ca:	0c17      	lsrs	r7, r2, #16
    43cc:	18fb      	adds	r3, r7, r3
    43ce:	429d      	cmp	r5, r3
    43d0:	d903      	bls.n	43da <__aeabi_ddiv+0x3ba>
    43d2:	2580      	movs	r5, #128	; 0x80
    43d4:	026d      	lsls	r5, r5, #9
    43d6:	46ac      	mov	ip, r5
    43d8:	4460      	add	r0, ip
    43da:	0c1d      	lsrs	r5, r3, #16
    43dc:	0412      	lsls	r2, r2, #16
    43de:	041b      	lsls	r3, r3, #16
    43e0:	0c12      	lsrs	r2, r2, #16
    43e2:	1828      	adds	r0, r5, r0
    43e4:	189b      	adds	r3, r3, r2
    43e6:	4286      	cmp	r6, r0
    43e8:	d200      	bcs.n	43ec <__aeabi_ddiv+0x3cc>
    43ea:	e093      	b.n	4514 <__aeabi_ddiv+0x4f4>
    43ec:	d100      	bne.n	43f0 <__aeabi_ddiv+0x3d0>
    43ee:	e08e      	b.n	450e <__aeabi_ddiv+0x4ee>
    43f0:	2301      	movs	r3, #1
    43f2:	4319      	orrs	r1, r3
    43f4:	4ba0      	ldr	r3, [pc, #640]	; (4678 <__aeabi_ddiv+0x658>)
    43f6:	18e3      	adds	r3, r4, r3
    43f8:	2b00      	cmp	r3, #0
    43fa:	dc00      	bgt.n	43fe <__aeabi_ddiv+0x3de>
    43fc:	e099      	b.n	4532 <__aeabi_ddiv+0x512>
    43fe:	074a      	lsls	r2, r1, #29
    4400:	d000      	beq.n	4404 <__aeabi_ddiv+0x3e4>
    4402:	e09e      	b.n	4542 <__aeabi_ddiv+0x522>
    4404:	465a      	mov	r2, fp
    4406:	01d2      	lsls	r2, r2, #7
    4408:	d506      	bpl.n	4418 <__aeabi_ddiv+0x3f8>
    440a:	465a      	mov	r2, fp
    440c:	4b9b      	ldr	r3, [pc, #620]	; (467c <__aeabi_ddiv+0x65c>)
    440e:	401a      	ands	r2, r3
    4410:	2380      	movs	r3, #128	; 0x80
    4412:	4693      	mov	fp, r2
    4414:	00db      	lsls	r3, r3, #3
    4416:	18e3      	adds	r3, r4, r3
    4418:	4a99      	ldr	r2, [pc, #612]	; (4680 <__aeabi_ddiv+0x660>)
    441a:	4293      	cmp	r3, r2
    441c:	dd68      	ble.n	44f0 <__aeabi_ddiv+0x4d0>
    441e:	2301      	movs	r3, #1
    4420:	9a02      	ldr	r2, [sp, #8]
    4422:	4c98      	ldr	r4, [pc, #608]	; (4684 <__aeabi_ddiv+0x664>)
    4424:	401a      	ands	r2, r3
    4426:	2300      	movs	r3, #0
    4428:	4694      	mov	ip, r2
    442a:	4698      	mov	r8, r3
    442c:	2200      	movs	r2, #0
    442e:	e6c5      	b.n	41bc <__aeabi_ddiv+0x19c>
    4430:	2280      	movs	r2, #128	; 0x80
    4432:	464b      	mov	r3, r9
    4434:	0312      	lsls	r2, r2, #12
    4436:	4213      	tst	r3, r2
    4438:	d00a      	beq.n	4450 <__aeabi_ddiv+0x430>
    443a:	465b      	mov	r3, fp
    443c:	4213      	tst	r3, r2
    443e:	d106      	bne.n	444e <__aeabi_ddiv+0x42e>
    4440:	431a      	orrs	r2, r3
    4442:	0312      	lsls	r2, r2, #12
    4444:	0b12      	lsrs	r2, r2, #12
    4446:	46ac      	mov	ip, r5
    4448:	4688      	mov	r8, r1
    444a:	4c8e      	ldr	r4, [pc, #568]	; (4684 <__aeabi_ddiv+0x664>)
    444c:	e6b6      	b.n	41bc <__aeabi_ddiv+0x19c>
    444e:	464b      	mov	r3, r9
    4450:	431a      	orrs	r2, r3
    4452:	0312      	lsls	r2, r2, #12
    4454:	0b12      	lsrs	r2, r2, #12
    4456:	46bc      	mov	ip, r7
    4458:	4c8a      	ldr	r4, [pc, #552]	; (4684 <__aeabi_ddiv+0x664>)
    445a:	e6af      	b.n	41bc <__aeabi_ddiv+0x19c>
    445c:	0003      	movs	r3, r0
    445e:	465a      	mov	r2, fp
    4460:	3b28      	subs	r3, #40	; 0x28
    4462:	409a      	lsls	r2, r3
    4464:	2300      	movs	r3, #0
    4466:	4691      	mov	r9, r2
    4468:	4698      	mov	r8, r3
    446a:	e657      	b.n	411c <__aeabi_ddiv+0xfc>
    446c:	4658      	mov	r0, fp
    446e:	f000 ff0d 	bl	528c <__clzsi2>
    4472:	3020      	adds	r0, #32
    4474:	e640      	b.n	40f8 <__aeabi_ddiv+0xd8>
    4476:	0003      	movs	r3, r0
    4478:	4652      	mov	r2, sl
    447a:	3b28      	subs	r3, #40	; 0x28
    447c:	409a      	lsls	r2, r3
    447e:	2100      	movs	r1, #0
    4480:	4693      	mov	fp, r2
    4482:	e677      	b.n	4174 <__aeabi_ddiv+0x154>
    4484:	f000 ff02 	bl	528c <__clzsi2>
    4488:	3020      	adds	r0, #32
    448a:	e65f      	b.n	414c <__aeabi_ddiv+0x12c>
    448c:	4588      	cmp	r8, r1
    448e:	d200      	bcs.n	4492 <__aeabi_ddiv+0x472>
    4490:	e6c7      	b.n	4222 <__aeabi_ddiv+0x202>
    4492:	464b      	mov	r3, r9
    4494:	07de      	lsls	r6, r3, #31
    4496:	085d      	lsrs	r5, r3, #1
    4498:	4643      	mov	r3, r8
    449a:	085b      	lsrs	r3, r3, #1
    449c:	431e      	orrs	r6, r3
    449e:	4643      	mov	r3, r8
    44a0:	07db      	lsls	r3, r3, #31
    44a2:	469a      	mov	sl, r3
    44a4:	e6c2      	b.n	422c <__aeabi_ddiv+0x20c>
    44a6:	2500      	movs	r5, #0
    44a8:	4592      	cmp	sl, r2
    44aa:	d300      	bcc.n	44ae <__aeabi_ddiv+0x48e>
    44ac:	e733      	b.n	4316 <__aeabi_ddiv+0x2f6>
    44ae:	9e03      	ldr	r6, [sp, #12]
    44b0:	4659      	mov	r1, fp
    44b2:	46b4      	mov	ip, r6
    44b4:	44e2      	add	sl, ip
    44b6:	45b2      	cmp	sl, r6
    44b8:	41ad      	sbcs	r5, r5
    44ba:	426d      	negs	r5, r5
    44bc:	4445      	add	r5, r8
    44be:	18eb      	adds	r3, r5, r3
    44c0:	3901      	subs	r1, #1
    44c2:	4598      	cmp	r8, r3
    44c4:	d207      	bcs.n	44d6 <__aeabi_ddiv+0x4b6>
    44c6:	4298      	cmp	r0, r3
    44c8:	d900      	bls.n	44cc <__aeabi_ddiv+0x4ac>
    44ca:	e07f      	b.n	45cc <__aeabi_ddiv+0x5ac>
    44cc:	d100      	bne.n	44d0 <__aeabi_ddiv+0x4b0>
    44ce:	e0bc      	b.n	464a <__aeabi_ddiv+0x62a>
    44d0:	1a1d      	subs	r5, r3, r0
    44d2:	468b      	mov	fp, r1
    44d4:	e71f      	b.n	4316 <__aeabi_ddiv+0x2f6>
    44d6:	4598      	cmp	r8, r3
    44d8:	d1fa      	bne.n	44d0 <__aeabi_ddiv+0x4b0>
    44da:	9d03      	ldr	r5, [sp, #12]
    44dc:	4555      	cmp	r5, sl
    44de:	d9f2      	bls.n	44c6 <__aeabi_ddiv+0x4a6>
    44e0:	4643      	mov	r3, r8
    44e2:	468b      	mov	fp, r1
    44e4:	1a1d      	subs	r5, r3, r0
    44e6:	e716      	b.n	4316 <__aeabi_ddiv+0x2f6>
    44e8:	469b      	mov	fp, r3
    44ea:	e6ca      	b.n	4282 <__aeabi_ddiv+0x262>
    44ec:	0015      	movs	r5, r2
    44ee:	e6e7      	b.n	42c0 <__aeabi_ddiv+0x2a0>
    44f0:	465a      	mov	r2, fp
    44f2:	08c9      	lsrs	r1, r1, #3
    44f4:	0752      	lsls	r2, r2, #29
    44f6:	430a      	orrs	r2, r1
    44f8:	055b      	lsls	r3, r3, #21
    44fa:	4690      	mov	r8, r2
    44fc:	0d5c      	lsrs	r4, r3, #21
    44fe:	465a      	mov	r2, fp
    4500:	2301      	movs	r3, #1
    4502:	9902      	ldr	r1, [sp, #8]
    4504:	0252      	lsls	r2, r2, #9
    4506:	4019      	ands	r1, r3
    4508:	0b12      	lsrs	r2, r2, #12
    450a:	468c      	mov	ip, r1
    450c:	e656      	b.n	41bc <__aeabi_ddiv+0x19c>
    450e:	2b00      	cmp	r3, #0
    4510:	d100      	bne.n	4514 <__aeabi_ddiv+0x4f4>
    4512:	e76f      	b.n	43f4 <__aeabi_ddiv+0x3d4>
    4514:	4446      	add	r6, r8
    4516:	1e4a      	subs	r2, r1, #1
    4518:	45b0      	cmp	r8, r6
    451a:	d929      	bls.n	4570 <__aeabi_ddiv+0x550>
    451c:	0011      	movs	r1, r2
    451e:	4286      	cmp	r6, r0
    4520:	d000      	beq.n	4524 <__aeabi_ddiv+0x504>
    4522:	e765      	b.n	43f0 <__aeabi_ddiv+0x3d0>
    4524:	9a03      	ldr	r2, [sp, #12]
    4526:	4293      	cmp	r3, r2
    4528:	d000      	beq.n	452c <__aeabi_ddiv+0x50c>
    452a:	e761      	b.n	43f0 <__aeabi_ddiv+0x3d0>
    452c:	e762      	b.n	43f4 <__aeabi_ddiv+0x3d4>
    452e:	2101      	movs	r1, #1
    4530:	4249      	negs	r1, r1
    4532:	2001      	movs	r0, #1
    4534:	1ac2      	subs	r2, r0, r3
    4536:	2a38      	cmp	r2, #56	; 0x38
    4538:	dd21      	ble.n	457e <__aeabi_ddiv+0x55e>
    453a:	9b02      	ldr	r3, [sp, #8]
    453c:	4003      	ands	r3, r0
    453e:	469c      	mov	ip, r3
    4540:	e638      	b.n	41b4 <__aeabi_ddiv+0x194>
    4542:	220f      	movs	r2, #15
    4544:	400a      	ands	r2, r1
    4546:	2a04      	cmp	r2, #4
    4548:	d100      	bne.n	454c <__aeabi_ddiv+0x52c>
    454a:	e75b      	b.n	4404 <__aeabi_ddiv+0x3e4>
    454c:	000a      	movs	r2, r1
    454e:	1d11      	adds	r1, r2, #4
    4550:	4291      	cmp	r1, r2
    4552:	4192      	sbcs	r2, r2
    4554:	4252      	negs	r2, r2
    4556:	4493      	add	fp, r2
    4558:	e754      	b.n	4404 <__aeabi_ddiv+0x3e4>
    455a:	4b47      	ldr	r3, [pc, #284]	; (4678 <__aeabi_ddiv+0x658>)
    455c:	18e3      	adds	r3, r4, r3
    455e:	2b00      	cmp	r3, #0
    4560:	dde5      	ble.n	452e <__aeabi_ddiv+0x50e>
    4562:	2201      	movs	r2, #1
    4564:	4252      	negs	r2, r2
    4566:	e7f2      	b.n	454e <__aeabi_ddiv+0x52e>
    4568:	001d      	movs	r5, r3
    456a:	e6fa      	b.n	4362 <__aeabi_ddiv+0x342>
    456c:	469a      	mov	sl, r3
    456e:	e71c      	b.n	43aa <__aeabi_ddiv+0x38a>
    4570:	42b0      	cmp	r0, r6
    4572:	d839      	bhi.n	45e8 <__aeabi_ddiv+0x5c8>
    4574:	d06e      	beq.n	4654 <__aeabi_ddiv+0x634>
    4576:	0011      	movs	r1, r2
    4578:	e73a      	b.n	43f0 <__aeabi_ddiv+0x3d0>
    457a:	9302      	str	r3, [sp, #8]
    457c:	e73a      	b.n	43f4 <__aeabi_ddiv+0x3d4>
    457e:	2a1f      	cmp	r2, #31
    4580:	dc3c      	bgt.n	45fc <__aeabi_ddiv+0x5dc>
    4582:	2320      	movs	r3, #32
    4584:	1a9b      	subs	r3, r3, r2
    4586:	000c      	movs	r4, r1
    4588:	4658      	mov	r0, fp
    458a:	4099      	lsls	r1, r3
    458c:	4098      	lsls	r0, r3
    458e:	1e4b      	subs	r3, r1, #1
    4590:	4199      	sbcs	r1, r3
    4592:	465b      	mov	r3, fp
    4594:	40d4      	lsrs	r4, r2
    4596:	40d3      	lsrs	r3, r2
    4598:	4320      	orrs	r0, r4
    459a:	4308      	orrs	r0, r1
    459c:	001a      	movs	r2, r3
    459e:	0743      	lsls	r3, r0, #29
    45a0:	d009      	beq.n	45b6 <__aeabi_ddiv+0x596>
    45a2:	230f      	movs	r3, #15
    45a4:	4003      	ands	r3, r0
    45a6:	2b04      	cmp	r3, #4
    45a8:	d005      	beq.n	45b6 <__aeabi_ddiv+0x596>
    45aa:	0001      	movs	r1, r0
    45ac:	1d08      	adds	r0, r1, #4
    45ae:	4288      	cmp	r0, r1
    45b0:	419b      	sbcs	r3, r3
    45b2:	425b      	negs	r3, r3
    45b4:	18d2      	adds	r2, r2, r3
    45b6:	0213      	lsls	r3, r2, #8
    45b8:	d53a      	bpl.n	4630 <__aeabi_ddiv+0x610>
    45ba:	2301      	movs	r3, #1
    45bc:	9a02      	ldr	r2, [sp, #8]
    45be:	2401      	movs	r4, #1
    45c0:	401a      	ands	r2, r3
    45c2:	2300      	movs	r3, #0
    45c4:	4694      	mov	ip, r2
    45c6:	4698      	mov	r8, r3
    45c8:	2200      	movs	r2, #0
    45ca:	e5f7      	b.n	41bc <__aeabi_ddiv+0x19c>
    45cc:	2102      	movs	r1, #2
    45ce:	4249      	negs	r1, r1
    45d0:	468c      	mov	ip, r1
    45d2:	9d03      	ldr	r5, [sp, #12]
    45d4:	44e3      	add	fp, ip
    45d6:	46ac      	mov	ip, r5
    45d8:	44e2      	add	sl, ip
    45da:	45aa      	cmp	sl, r5
    45dc:	41ad      	sbcs	r5, r5
    45de:	426d      	negs	r5, r5
    45e0:	4445      	add	r5, r8
    45e2:	18ed      	adds	r5, r5, r3
    45e4:	1a2d      	subs	r5, r5, r0
    45e6:	e696      	b.n	4316 <__aeabi_ddiv+0x2f6>
    45e8:	1e8a      	subs	r2, r1, #2
    45ea:	9903      	ldr	r1, [sp, #12]
    45ec:	004d      	lsls	r5, r1, #1
    45ee:	428d      	cmp	r5, r1
    45f0:	4189      	sbcs	r1, r1
    45f2:	4249      	negs	r1, r1
    45f4:	4441      	add	r1, r8
    45f6:	1876      	adds	r6, r6, r1
    45f8:	9503      	str	r5, [sp, #12]
    45fa:	e78f      	b.n	451c <__aeabi_ddiv+0x4fc>
    45fc:	201f      	movs	r0, #31
    45fe:	4240      	negs	r0, r0
    4600:	1ac3      	subs	r3, r0, r3
    4602:	4658      	mov	r0, fp
    4604:	40d8      	lsrs	r0, r3
    4606:	0003      	movs	r3, r0
    4608:	2a20      	cmp	r2, #32
    460a:	d028      	beq.n	465e <__aeabi_ddiv+0x63e>
    460c:	2040      	movs	r0, #64	; 0x40
    460e:	465d      	mov	r5, fp
    4610:	1a82      	subs	r2, r0, r2
    4612:	4095      	lsls	r5, r2
    4614:	4329      	orrs	r1, r5
    4616:	1e4a      	subs	r2, r1, #1
    4618:	4191      	sbcs	r1, r2
    461a:	4319      	orrs	r1, r3
    461c:	2307      	movs	r3, #7
    461e:	2200      	movs	r2, #0
    4620:	400b      	ands	r3, r1
    4622:	d009      	beq.n	4638 <__aeabi_ddiv+0x618>
    4624:	230f      	movs	r3, #15
    4626:	2200      	movs	r2, #0
    4628:	400b      	ands	r3, r1
    462a:	0008      	movs	r0, r1
    462c:	2b04      	cmp	r3, #4
    462e:	d1bd      	bne.n	45ac <__aeabi_ddiv+0x58c>
    4630:	0001      	movs	r1, r0
    4632:	0753      	lsls	r3, r2, #29
    4634:	0252      	lsls	r2, r2, #9
    4636:	0b12      	lsrs	r2, r2, #12
    4638:	08c9      	lsrs	r1, r1, #3
    463a:	4319      	orrs	r1, r3
    463c:	2301      	movs	r3, #1
    463e:	4688      	mov	r8, r1
    4640:	9902      	ldr	r1, [sp, #8]
    4642:	2400      	movs	r4, #0
    4644:	4019      	ands	r1, r3
    4646:	468c      	mov	ip, r1
    4648:	e5b8      	b.n	41bc <__aeabi_ddiv+0x19c>
    464a:	4552      	cmp	r2, sl
    464c:	d8be      	bhi.n	45cc <__aeabi_ddiv+0x5ac>
    464e:	468b      	mov	fp, r1
    4650:	2500      	movs	r5, #0
    4652:	e660      	b.n	4316 <__aeabi_ddiv+0x2f6>
    4654:	9d03      	ldr	r5, [sp, #12]
    4656:	429d      	cmp	r5, r3
    4658:	d3c6      	bcc.n	45e8 <__aeabi_ddiv+0x5c8>
    465a:	0011      	movs	r1, r2
    465c:	e762      	b.n	4524 <__aeabi_ddiv+0x504>
    465e:	2500      	movs	r5, #0
    4660:	e7d8      	b.n	4614 <__aeabi_ddiv+0x5f4>
    4662:	2280      	movs	r2, #128	; 0x80
    4664:	465b      	mov	r3, fp
    4666:	0312      	lsls	r2, r2, #12
    4668:	431a      	orrs	r2, r3
    466a:	9b01      	ldr	r3, [sp, #4]
    466c:	0312      	lsls	r2, r2, #12
    466e:	0b12      	lsrs	r2, r2, #12
    4670:	469c      	mov	ip, r3
    4672:	4688      	mov	r8, r1
    4674:	4c03      	ldr	r4, [pc, #12]	; (4684 <__aeabi_ddiv+0x664>)
    4676:	e5a1      	b.n	41bc <__aeabi_ddiv+0x19c>
    4678:	000003ff 	.word	0x000003ff
    467c:	feffffff 	.word	0xfeffffff
    4680:	000007fe 	.word	0x000007fe
    4684:	000007ff 	.word	0x000007ff

00004688 <__aeabi_dmul>:
    4688:	b5f0      	push	{r4, r5, r6, r7, lr}
    468a:	4657      	mov	r7, sl
    468c:	4645      	mov	r5, r8
    468e:	46de      	mov	lr, fp
    4690:	464e      	mov	r6, r9
    4692:	b5e0      	push	{r5, r6, r7, lr}
    4694:	030c      	lsls	r4, r1, #12
    4696:	4698      	mov	r8, r3
    4698:	004e      	lsls	r6, r1, #1
    469a:	0b23      	lsrs	r3, r4, #12
    469c:	b087      	sub	sp, #28
    469e:	0007      	movs	r7, r0
    46a0:	4692      	mov	sl, r2
    46a2:	469b      	mov	fp, r3
    46a4:	0d76      	lsrs	r6, r6, #21
    46a6:	0fcd      	lsrs	r5, r1, #31
    46a8:	2e00      	cmp	r6, #0
    46aa:	d06b      	beq.n	4784 <__aeabi_dmul+0xfc>
    46ac:	4b6d      	ldr	r3, [pc, #436]	; (4864 <__aeabi_dmul+0x1dc>)
    46ae:	429e      	cmp	r6, r3
    46b0:	d035      	beq.n	471e <__aeabi_dmul+0x96>
    46b2:	2480      	movs	r4, #128	; 0x80
    46b4:	465b      	mov	r3, fp
    46b6:	0f42      	lsrs	r2, r0, #29
    46b8:	0424      	lsls	r4, r4, #16
    46ba:	00db      	lsls	r3, r3, #3
    46bc:	4314      	orrs	r4, r2
    46be:	431c      	orrs	r4, r3
    46c0:	00c3      	lsls	r3, r0, #3
    46c2:	4699      	mov	r9, r3
    46c4:	4b68      	ldr	r3, [pc, #416]	; (4868 <__aeabi_dmul+0x1e0>)
    46c6:	46a3      	mov	fp, r4
    46c8:	469c      	mov	ip, r3
    46ca:	2300      	movs	r3, #0
    46cc:	2700      	movs	r7, #0
    46ce:	4466      	add	r6, ip
    46d0:	9302      	str	r3, [sp, #8]
    46d2:	4643      	mov	r3, r8
    46d4:	031c      	lsls	r4, r3, #12
    46d6:	005a      	lsls	r2, r3, #1
    46d8:	0fdb      	lsrs	r3, r3, #31
    46da:	4650      	mov	r0, sl
    46dc:	0b24      	lsrs	r4, r4, #12
    46de:	0d52      	lsrs	r2, r2, #21
    46e0:	4698      	mov	r8, r3
    46e2:	d100      	bne.n	46e6 <__aeabi_dmul+0x5e>
    46e4:	e076      	b.n	47d4 <__aeabi_dmul+0x14c>
    46e6:	4b5f      	ldr	r3, [pc, #380]	; (4864 <__aeabi_dmul+0x1dc>)
    46e8:	429a      	cmp	r2, r3
    46ea:	d06d      	beq.n	47c8 <__aeabi_dmul+0x140>
    46ec:	2380      	movs	r3, #128	; 0x80
    46ee:	0f41      	lsrs	r1, r0, #29
    46f0:	041b      	lsls	r3, r3, #16
    46f2:	430b      	orrs	r3, r1
    46f4:	495c      	ldr	r1, [pc, #368]	; (4868 <__aeabi_dmul+0x1e0>)
    46f6:	00e4      	lsls	r4, r4, #3
    46f8:	468c      	mov	ip, r1
    46fa:	431c      	orrs	r4, r3
    46fc:	00c3      	lsls	r3, r0, #3
    46fe:	2000      	movs	r0, #0
    4700:	4462      	add	r2, ip
    4702:	4641      	mov	r1, r8
    4704:	18b6      	adds	r6, r6, r2
    4706:	4069      	eors	r1, r5
    4708:	1c72      	adds	r2, r6, #1
    470a:	9101      	str	r1, [sp, #4]
    470c:	4694      	mov	ip, r2
    470e:	4307      	orrs	r7, r0
    4710:	2f0f      	cmp	r7, #15
    4712:	d900      	bls.n	4716 <__aeabi_dmul+0x8e>
    4714:	e0b0      	b.n	4878 <__aeabi_dmul+0x1f0>
    4716:	4a55      	ldr	r2, [pc, #340]	; (486c <__aeabi_dmul+0x1e4>)
    4718:	00bf      	lsls	r7, r7, #2
    471a:	59d2      	ldr	r2, [r2, r7]
    471c:	4697      	mov	pc, r2
    471e:	465b      	mov	r3, fp
    4720:	4303      	orrs	r3, r0
    4722:	4699      	mov	r9, r3
    4724:	d000      	beq.n	4728 <__aeabi_dmul+0xa0>
    4726:	e087      	b.n	4838 <__aeabi_dmul+0x1b0>
    4728:	2300      	movs	r3, #0
    472a:	469b      	mov	fp, r3
    472c:	3302      	adds	r3, #2
    472e:	2708      	movs	r7, #8
    4730:	9302      	str	r3, [sp, #8]
    4732:	e7ce      	b.n	46d2 <__aeabi_dmul+0x4a>
    4734:	4642      	mov	r2, r8
    4736:	9201      	str	r2, [sp, #4]
    4738:	2802      	cmp	r0, #2
    473a:	d067      	beq.n	480c <__aeabi_dmul+0x184>
    473c:	2803      	cmp	r0, #3
    473e:	d100      	bne.n	4742 <__aeabi_dmul+0xba>
    4740:	e20e      	b.n	4b60 <__aeabi_dmul+0x4d8>
    4742:	2801      	cmp	r0, #1
    4744:	d000      	beq.n	4748 <__aeabi_dmul+0xc0>
    4746:	e162      	b.n	4a0e <__aeabi_dmul+0x386>
    4748:	2300      	movs	r3, #0
    474a:	2400      	movs	r4, #0
    474c:	2200      	movs	r2, #0
    474e:	4699      	mov	r9, r3
    4750:	9901      	ldr	r1, [sp, #4]
    4752:	4001      	ands	r1, r0
    4754:	b2cd      	uxtb	r5, r1
    4756:	2100      	movs	r1, #0
    4758:	0312      	lsls	r2, r2, #12
    475a:	0d0b      	lsrs	r3, r1, #20
    475c:	0b12      	lsrs	r2, r2, #12
    475e:	051b      	lsls	r3, r3, #20
    4760:	4313      	orrs	r3, r2
    4762:	4a43      	ldr	r2, [pc, #268]	; (4870 <__aeabi_dmul+0x1e8>)
    4764:	0524      	lsls	r4, r4, #20
    4766:	4013      	ands	r3, r2
    4768:	431c      	orrs	r4, r3
    476a:	0064      	lsls	r4, r4, #1
    476c:	07ed      	lsls	r5, r5, #31
    476e:	0864      	lsrs	r4, r4, #1
    4770:	432c      	orrs	r4, r5
    4772:	4648      	mov	r0, r9
    4774:	0021      	movs	r1, r4
    4776:	b007      	add	sp, #28
    4778:	bc3c      	pop	{r2, r3, r4, r5}
    477a:	4690      	mov	r8, r2
    477c:	4699      	mov	r9, r3
    477e:	46a2      	mov	sl, r4
    4780:	46ab      	mov	fp, r5
    4782:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4784:	4303      	orrs	r3, r0
    4786:	4699      	mov	r9, r3
    4788:	d04f      	beq.n	482a <__aeabi_dmul+0x1a2>
    478a:	465b      	mov	r3, fp
    478c:	2b00      	cmp	r3, #0
    478e:	d100      	bne.n	4792 <__aeabi_dmul+0x10a>
    4790:	e189      	b.n	4aa6 <__aeabi_dmul+0x41e>
    4792:	4658      	mov	r0, fp
    4794:	f000 fd7a 	bl	528c <__clzsi2>
    4798:	0003      	movs	r3, r0
    479a:	3b0b      	subs	r3, #11
    479c:	2b1c      	cmp	r3, #28
    479e:	dd00      	ble.n	47a2 <__aeabi_dmul+0x11a>
    47a0:	e17a      	b.n	4a98 <__aeabi_dmul+0x410>
    47a2:	221d      	movs	r2, #29
    47a4:	1ad3      	subs	r3, r2, r3
    47a6:	003a      	movs	r2, r7
    47a8:	0001      	movs	r1, r0
    47aa:	465c      	mov	r4, fp
    47ac:	40da      	lsrs	r2, r3
    47ae:	3908      	subs	r1, #8
    47b0:	408c      	lsls	r4, r1
    47b2:	0013      	movs	r3, r2
    47b4:	408f      	lsls	r7, r1
    47b6:	4323      	orrs	r3, r4
    47b8:	469b      	mov	fp, r3
    47ba:	46b9      	mov	r9, r7
    47bc:	2300      	movs	r3, #0
    47be:	4e2d      	ldr	r6, [pc, #180]	; (4874 <__aeabi_dmul+0x1ec>)
    47c0:	2700      	movs	r7, #0
    47c2:	1a36      	subs	r6, r6, r0
    47c4:	9302      	str	r3, [sp, #8]
    47c6:	e784      	b.n	46d2 <__aeabi_dmul+0x4a>
    47c8:	4653      	mov	r3, sl
    47ca:	4323      	orrs	r3, r4
    47cc:	d12a      	bne.n	4824 <__aeabi_dmul+0x19c>
    47ce:	2400      	movs	r4, #0
    47d0:	2002      	movs	r0, #2
    47d2:	e796      	b.n	4702 <__aeabi_dmul+0x7a>
    47d4:	4653      	mov	r3, sl
    47d6:	4323      	orrs	r3, r4
    47d8:	d020      	beq.n	481c <__aeabi_dmul+0x194>
    47da:	2c00      	cmp	r4, #0
    47dc:	d100      	bne.n	47e0 <__aeabi_dmul+0x158>
    47de:	e157      	b.n	4a90 <__aeabi_dmul+0x408>
    47e0:	0020      	movs	r0, r4
    47e2:	f000 fd53 	bl	528c <__clzsi2>
    47e6:	0003      	movs	r3, r0
    47e8:	3b0b      	subs	r3, #11
    47ea:	2b1c      	cmp	r3, #28
    47ec:	dd00      	ble.n	47f0 <__aeabi_dmul+0x168>
    47ee:	e149      	b.n	4a84 <__aeabi_dmul+0x3fc>
    47f0:	211d      	movs	r1, #29
    47f2:	1acb      	subs	r3, r1, r3
    47f4:	4651      	mov	r1, sl
    47f6:	0002      	movs	r2, r0
    47f8:	40d9      	lsrs	r1, r3
    47fa:	4653      	mov	r3, sl
    47fc:	3a08      	subs	r2, #8
    47fe:	4094      	lsls	r4, r2
    4800:	4093      	lsls	r3, r2
    4802:	430c      	orrs	r4, r1
    4804:	4a1b      	ldr	r2, [pc, #108]	; (4874 <__aeabi_dmul+0x1ec>)
    4806:	1a12      	subs	r2, r2, r0
    4808:	2000      	movs	r0, #0
    480a:	e77a      	b.n	4702 <__aeabi_dmul+0x7a>
    480c:	2501      	movs	r5, #1
    480e:	9b01      	ldr	r3, [sp, #4]
    4810:	4c14      	ldr	r4, [pc, #80]	; (4864 <__aeabi_dmul+0x1dc>)
    4812:	401d      	ands	r5, r3
    4814:	2300      	movs	r3, #0
    4816:	2200      	movs	r2, #0
    4818:	4699      	mov	r9, r3
    481a:	e79c      	b.n	4756 <__aeabi_dmul+0xce>
    481c:	2400      	movs	r4, #0
    481e:	2200      	movs	r2, #0
    4820:	2001      	movs	r0, #1
    4822:	e76e      	b.n	4702 <__aeabi_dmul+0x7a>
    4824:	4653      	mov	r3, sl
    4826:	2003      	movs	r0, #3
    4828:	e76b      	b.n	4702 <__aeabi_dmul+0x7a>
    482a:	2300      	movs	r3, #0
    482c:	469b      	mov	fp, r3
    482e:	3301      	adds	r3, #1
    4830:	2704      	movs	r7, #4
    4832:	2600      	movs	r6, #0
    4834:	9302      	str	r3, [sp, #8]
    4836:	e74c      	b.n	46d2 <__aeabi_dmul+0x4a>
    4838:	2303      	movs	r3, #3
    483a:	4681      	mov	r9, r0
    483c:	270c      	movs	r7, #12
    483e:	9302      	str	r3, [sp, #8]
    4840:	e747      	b.n	46d2 <__aeabi_dmul+0x4a>
    4842:	2280      	movs	r2, #128	; 0x80
    4844:	2300      	movs	r3, #0
    4846:	2500      	movs	r5, #0
    4848:	0312      	lsls	r2, r2, #12
    484a:	4699      	mov	r9, r3
    484c:	4c05      	ldr	r4, [pc, #20]	; (4864 <__aeabi_dmul+0x1dc>)
    484e:	e782      	b.n	4756 <__aeabi_dmul+0xce>
    4850:	465c      	mov	r4, fp
    4852:	464b      	mov	r3, r9
    4854:	9802      	ldr	r0, [sp, #8]
    4856:	e76f      	b.n	4738 <__aeabi_dmul+0xb0>
    4858:	465c      	mov	r4, fp
    485a:	464b      	mov	r3, r9
    485c:	9501      	str	r5, [sp, #4]
    485e:	9802      	ldr	r0, [sp, #8]
    4860:	e76a      	b.n	4738 <__aeabi_dmul+0xb0>
    4862:	46c0      	nop			; (mov r8, r8)
    4864:	000007ff 	.word	0x000007ff
    4868:	fffffc01 	.word	0xfffffc01
    486c:	00005edc 	.word	0x00005edc
    4870:	800fffff 	.word	0x800fffff
    4874:	fffffc0d 	.word	0xfffffc0d
    4878:	464a      	mov	r2, r9
    487a:	4649      	mov	r1, r9
    487c:	0c17      	lsrs	r7, r2, #16
    487e:	0c1a      	lsrs	r2, r3, #16
    4880:	041b      	lsls	r3, r3, #16
    4882:	0c1b      	lsrs	r3, r3, #16
    4884:	0408      	lsls	r0, r1, #16
    4886:	0019      	movs	r1, r3
    4888:	0c00      	lsrs	r0, r0, #16
    488a:	4341      	muls	r1, r0
    488c:	0015      	movs	r5, r2
    488e:	4688      	mov	r8, r1
    4890:	0019      	movs	r1, r3
    4892:	437d      	muls	r5, r7
    4894:	4379      	muls	r1, r7
    4896:	9503      	str	r5, [sp, #12]
    4898:	4689      	mov	r9, r1
    489a:	0029      	movs	r1, r5
    489c:	0015      	movs	r5, r2
    489e:	4345      	muls	r5, r0
    48a0:	444d      	add	r5, r9
    48a2:	9502      	str	r5, [sp, #8]
    48a4:	4645      	mov	r5, r8
    48a6:	0c2d      	lsrs	r5, r5, #16
    48a8:	46aa      	mov	sl, r5
    48aa:	9d02      	ldr	r5, [sp, #8]
    48ac:	4455      	add	r5, sl
    48ae:	45a9      	cmp	r9, r5
    48b0:	d906      	bls.n	48c0 <__aeabi_dmul+0x238>
    48b2:	468a      	mov	sl, r1
    48b4:	2180      	movs	r1, #128	; 0x80
    48b6:	0249      	lsls	r1, r1, #9
    48b8:	4689      	mov	r9, r1
    48ba:	44ca      	add	sl, r9
    48bc:	4651      	mov	r1, sl
    48be:	9103      	str	r1, [sp, #12]
    48c0:	0c29      	lsrs	r1, r5, #16
    48c2:	9104      	str	r1, [sp, #16]
    48c4:	4641      	mov	r1, r8
    48c6:	0409      	lsls	r1, r1, #16
    48c8:	042d      	lsls	r5, r5, #16
    48ca:	0c09      	lsrs	r1, r1, #16
    48cc:	4688      	mov	r8, r1
    48ce:	0029      	movs	r1, r5
    48d0:	0c25      	lsrs	r5, r4, #16
    48d2:	0424      	lsls	r4, r4, #16
    48d4:	4441      	add	r1, r8
    48d6:	0c24      	lsrs	r4, r4, #16
    48d8:	9105      	str	r1, [sp, #20]
    48da:	0021      	movs	r1, r4
    48dc:	4341      	muls	r1, r0
    48de:	4688      	mov	r8, r1
    48e0:	0021      	movs	r1, r4
    48e2:	4379      	muls	r1, r7
    48e4:	468a      	mov	sl, r1
    48e6:	4368      	muls	r0, r5
    48e8:	4641      	mov	r1, r8
    48ea:	4450      	add	r0, sl
    48ec:	4681      	mov	r9, r0
    48ee:	0c08      	lsrs	r0, r1, #16
    48f0:	4448      	add	r0, r9
    48f2:	436f      	muls	r7, r5
    48f4:	4582      	cmp	sl, r0
    48f6:	d903      	bls.n	4900 <__aeabi_dmul+0x278>
    48f8:	2180      	movs	r1, #128	; 0x80
    48fa:	0249      	lsls	r1, r1, #9
    48fc:	4689      	mov	r9, r1
    48fe:	444f      	add	r7, r9
    4900:	0c01      	lsrs	r1, r0, #16
    4902:	4689      	mov	r9, r1
    4904:	0039      	movs	r1, r7
    4906:	4449      	add	r1, r9
    4908:	9102      	str	r1, [sp, #8]
    490a:	4641      	mov	r1, r8
    490c:	040f      	lsls	r7, r1, #16
    490e:	9904      	ldr	r1, [sp, #16]
    4910:	0c3f      	lsrs	r7, r7, #16
    4912:	4688      	mov	r8, r1
    4914:	0400      	lsls	r0, r0, #16
    4916:	19c0      	adds	r0, r0, r7
    4918:	4480      	add	r8, r0
    491a:	4641      	mov	r1, r8
    491c:	9104      	str	r1, [sp, #16]
    491e:	4659      	mov	r1, fp
    4920:	0c0f      	lsrs	r7, r1, #16
    4922:	0409      	lsls	r1, r1, #16
    4924:	0c09      	lsrs	r1, r1, #16
    4926:	4688      	mov	r8, r1
    4928:	4359      	muls	r1, r3
    492a:	468a      	mov	sl, r1
    492c:	0039      	movs	r1, r7
    492e:	4351      	muls	r1, r2
    4930:	4689      	mov	r9, r1
    4932:	4641      	mov	r1, r8
    4934:	434a      	muls	r2, r1
    4936:	4651      	mov	r1, sl
    4938:	0c09      	lsrs	r1, r1, #16
    493a:	468b      	mov	fp, r1
    493c:	437b      	muls	r3, r7
    493e:	18d2      	adds	r2, r2, r3
    4940:	445a      	add	r2, fp
    4942:	4293      	cmp	r3, r2
    4944:	d903      	bls.n	494e <__aeabi_dmul+0x2c6>
    4946:	2380      	movs	r3, #128	; 0x80
    4948:	025b      	lsls	r3, r3, #9
    494a:	469b      	mov	fp, r3
    494c:	44d9      	add	r9, fp
    494e:	4651      	mov	r1, sl
    4950:	0409      	lsls	r1, r1, #16
    4952:	0c09      	lsrs	r1, r1, #16
    4954:	468a      	mov	sl, r1
    4956:	4641      	mov	r1, r8
    4958:	4361      	muls	r1, r4
    495a:	437c      	muls	r4, r7
    495c:	0c13      	lsrs	r3, r2, #16
    495e:	0412      	lsls	r2, r2, #16
    4960:	444b      	add	r3, r9
    4962:	4452      	add	r2, sl
    4964:	46a1      	mov	r9, r4
    4966:	468a      	mov	sl, r1
    4968:	003c      	movs	r4, r7
    496a:	4641      	mov	r1, r8
    496c:	436c      	muls	r4, r5
    496e:	434d      	muls	r5, r1
    4970:	4651      	mov	r1, sl
    4972:	444d      	add	r5, r9
    4974:	0c0f      	lsrs	r7, r1, #16
    4976:	197d      	adds	r5, r7, r5
    4978:	45a9      	cmp	r9, r5
    497a:	d903      	bls.n	4984 <__aeabi_dmul+0x2fc>
    497c:	2180      	movs	r1, #128	; 0x80
    497e:	0249      	lsls	r1, r1, #9
    4980:	4688      	mov	r8, r1
    4982:	4444      	add	r4, r8
    4984:	9f04      	ldr	r7, [sp, #16]
    4986:	9903      	ldr	r1, [sp, #12]
    4988:	46b8      	mov	r8, r7
    498a:	4441      	add	r1, r8
    498c:	468b      	mov	fp, r1
    498e:	4583      	cmp	fp, r0
    4990:	4180      	sbcs	r0, r0
    4992:	4241      	negs	r1, r0
    4994:	4688      	mov	r8, r1
    4996:	4651      	mov	r1, sl
    4998:	0408      	lsls	r0, r1, #16
    499a:	042f      	lsls	r7, r5, #16
    499c:	0c00      	lsrs	r0, r0, #16
    499e:	183f      	adds	r7, r7, r0
    49a0:	4658      	mov	r0, fp
    49a2:	9902      	ldr	r1, [sp, #8]
    49a4:	1810      	adds	r0, r2, r0
    49a6:	4689      	mov	r9, r1
    49a8:	4290      	cmp	r0, r2
    49aa:	4192      	sbcs	r2, r2
    49ac:	444f      	add	r7, r9
    49ae:	46ba      	mov	sl, r7
    49b0:	4252      	negs	r2, r2
    49b2:	4699      	mov	r9, r3
    49b4:	4693      	mov	fp, r2
    49b6:	44c2      	add	sl, r8
    49b8:	44d1      	add	r9, sl
    49ba:	44cb      	add	fp, r9
    49bc:	428f      	cmp	r7, r1
    49be:	41bf      	sbcs	r7, r7
    49c0:	45c2      	cmp	sl, r8
    49c2:	4189      	sbcs	r1, r1
    49c4:	4599      	cmp	r9, r3
    49c6:	419b      	sbcs	r3, r3
    49c8:	4593      	cmp	fp, r2
    49ca:	4192      	sbcs	r2, r2
    49cc:	427f      	negs	r7, r7
    49ce:	4249      	negs	r1, r1
    49d0:	0c2d      	lsrs	r5, r5, #16
    49d2:	4252      	negs	r2, r2
    49d4:	430f      	orrs	r7, r1
    49d6:	425b      	negs	r3, r3
    49d8:	4313      	orrs	r3, r2
    49da:	197f      	adds	r7, r7, r5
    49dc:	18ff      	adds	r7, r7, r3
    49de:	465b      	mov	r3, fp
    49e0:	193c      	adds	r4, r7, r4
    49e2:	0ddb      	lsrs	r3, r3, #23
    49e4:	9a05      	ldr	r2, [sp, #20]
    49e6:	0264      	lsls	r4, r4, #9
    49e8:	431c      	orrs	r4, r3
    49ea:	0243      	lsls	r3, r0, #9
    49ec:	4313      	orrs	r3, r2
    49ee:	1e5d      	subs	r5, r3, #1
    49f0:	41ab      	sbcs	r3, r5
    49f2:	465a      	mov	r2, fp
    49f4:	0dc0      	lsrs	r0, r0, #23
    49f6:	4303      	orrs	r3, r0
    49f8:	0252      	lsls	r2, r2, #9
    49fa:	4313      	orrs	r3, r2
    49fc:	01e2      	lsls	r2, r4, #7
    49fe:	d556      	bpl.n	4aae <__aeabi_dmul+0x426>
    4a00:	2001      	movs	r0, #1
    4a02:	085a      	lsrs	r2, r3, #1
    4a04:	4003      	ands	r3, r0
    4a06:	4313      	orrs	r3, r2
    4a08:	07e2      	lsls	r2, r4, #31
    4a0a:	4313      	orrs	r3, r2
    4a0c:	0864      	lsrs	r4, r4, #1
    4a0e:	485a      	ldr	r0, [pc, #360]	; (4b78 <__aeabi_dmul+0x4f0>)
    4a10:	4460      	add	r0, ip
    4a12:	2800      	cmp	r0, #0
    4a14:	dd4d      	ble.n	4ab2 <__aeabi_dmul+0x42a>
    4a16:	075a      	lsls	r2, r3, #29
    4a18:	d009      	beq.n	4a2e <__aeabi_dmul+0x3a6>
    4a1a:	220f      	movs	r2, #15
    4a1c:	401a      	ands	r2, r3
    4a1e:	2a04      	cmp	r2, #4
    4a20:	d005      	beq.n	4a2e <__aeabi_dmul+0x3a6>
    4a22:	1d1a      	adds	r2, r3, #4
    4a24:	429a      	cmp	r2, r3
    4a26:	419b      	sbcs	r3, r3
    4a28:	425b      	negs	r3, r3
    4a2a:	18e4      	adds	r4, r4, r3
    4a2c:	0013      	movs	r3, r2
    4a2e:	01e2      	lsls	r2, r4, #7
    4a30:	d504      	bpl.n	4a3c <__aeabi_dmul+0x3b4>
    4a32:	2080      	movs	r0, #128	; 0x80
    4a34:	4a51      	ldr	r2, [pc, #324]	; (4b7c <__aeabi_dmul+0x4f4>)
    4a36:	00c0      	lsls	r0, r0, #3
    4a38:	4014      	ands	r4, r2
    4a3a:	4460      	add	r0, ip
    4a3c:	4a50      	ldr	r2, [pc, #320]	; (4b80 <__aeabi_dmul+0x4f8>)
    4a3e:	4290      	cmp	r0, r2
    4a40:	dd00      	ble.n	4a44 <__aeabi_dmul+0x3bc>
    4a42:	e6e3      	b.n	480c <__aeabi_dmul+0x184>
    4a44:	2501      	movs	r5, #1
    4a46:	08db      	lsrs	r3, r3, #3
    4a48:	0762      	lsls	r2, r4, #29
    4a4a:	431a      	orrs	r2, r3
    4a4c:	0264      	lsls	r4, r4, #9
    4a4e:	9b01      	ldr	r3, [sp, #4]
    4a50:	4691      	mov	r9, r2
    4a52:	0b22      	lsrs	r2, r4, #12
    4a54:	0544      	lsls	r4, r0, #21
    4a56:	0d64      	lsrs	r4, r4, #21
    4a58:	401d      	ands	r5, r3
    4a5a:	e67c      	b.n	4756 <__aeabi_dmul+0xce>
    4a5c:	2280      	movs	r2, #128	; 0x80
    4a5e:	4659      	mov	r1, fp
    4a60:	0312      	lsls	r2, r2, #12
    4a62:	4211      	tst	r1, r2
    4a64:	d008      	beq.n	4a78 <__aeabi_dmul+0x3f0>
    4a66:	4214      	tst	r4, r2
    4a68:	d106      	bne.n	4a78 <__aeabi_dmul+0x3f0>
    4a6a:	4322      	orrs	r2, r4
    4a6c:	0312      	lsls	r2, r2, #12
    4a6e:	0b12      	lsrs	r2, r2, #12
    4a70:	4645      	mov	r5, r8
    4a72:	4699      	mov	r9, r3
    4a74:	4c43      	ldr	r4, [pc, #268]	; (4b84 <__aeabi_dmul+0x4fc>)
    4a76:	e66e      	b.n	4756 <__aeabi_dmul+0xce>
    4a78:	465b      	mov	r3, fp
    4a7a:	431a      	orrs	r2, r3
    4a7c:	0312      	lsls	r2, r2, #12
    4a7e:	0b12      	lsrs	r2, r2, #12
    4a80:	4c40      	ldr	r4, [pc, #256]	; (4b84 <__aeabi_dmul+0x4fc>)
    4a82:	e668      	b.n	4756 <__aeabi_dmul+0xce>
    4a84:	0003      	movs	r3, r0
    4a86:	4654      	mov	r4, sl
    4a88:	3b28      	subs	r3, #40	; 0x28
    4a8a:	409c      	lsls	r4, r3
    4a8c:	2300      	movs	r3, #0
    4a8e:	e6b9      	b.n	4804 <__aeabi_dmul+0x17c>
    4a90:	f000 fbfc 	bl	528c <__clzsi2>
    4a94:	3020      	adds	r0, #32
    4a96:	e6a6      	b.n	47e6 <__aeabi_dmul+0x15e>
    4a98:	0003      	movs	r3, r0
    4a9a:	3b28      	subs	r3, #40	; 0x28
    4a9c:	409f      	lsls	r7, r3
    4a9e:	2300      	movs	r3, #0
    4aa0:	46bb      	mov	fp, r7
    4aa2:	4699      	mov	r9, r3
    4aa4:	e68a      	b.n	47bc <__aeabi_dmul+0x134>
    4aa6:	f000 fbf1 	bl	528c <__clzsi2>
    4aaa:	3020      	adds	r0, #32
    4aac:	e674      	b.n	4798 <__aeabi_dmul+0x110>
    4aae:	46b4      	mov	ip, r6
    4ab0:	e7ad      	b.n	4a0e <__aeabi_dmul+0x386>
    4ab2:	2501      	movs	r5, #1
    4ab4:	1a2a      	subs	r2, r5, r0
    4ab6:	2a38      	cmp	r2, #56	; 0x38
    4ab8:	dd06      	ble.n	4ac8 <__aeabi_dmul+0x440>
    4aba:	9b01      	ldr	r3, [sp, #4]
    4abc:	2400      	movs	r4, #0
    4abe:	401d      	ands	r5, r3
    4ac0:	2300      	movs	r3, #0
    4ac2:	2200      	movs	r2, #0
    4ac4:	4699      	mov	r9, r3
    4ac6:	e646      	b.n	4756 <__aeabi_dmul+0xce>
    4ac8:	2a1f      	cmp	r2, #31
    4aca:	dc21      	bgt.n	4b10 <__aeabi_dmul+0x488>
    4acc:	2520      	movs	r5, #32
    4ace:	0020      	movs	r0, r4
    4ad0:	1aad      	subs	r5, r5, r2
    4ad2:	001e      	movs	r6, r3
    4ad4:	40ab      	lsls	r3, r5
    4ad6:	40a8      	lsls	r0, r5
    4ad8:	40d6      	lsrs	r6, r2
    4ada:	1e5d      	subs	r5, r3, #1
    4adc:	41ab      	sbcs	r3, r5
    4ade:	4330      	orrs	r0, r6
    4ae0:	4318      	orrs	r0, r3
    4ae2:	40d4      	lsrs	r4, r2
    4ae4:	0743      	lsls	r3, r0, #29
    4ae6:	d009      	beq.n	4afc <__aeabi_dmul+0x474>
    4ae8:	230f      	movs	r3, #15
    4aea:	4003      	ands	r3, r0
    4aec:	2b04      	cmp	r3, #4
    4aee:	d005      	beq.n	4afc <__aeabi_dmul+0x474>
    4af0:	0003      	movs	r3, r0
    4af2:	1d18      	adds	r0, r3, #4
    4af4:	4298      	cmp	r0, r3
    4af6:	419b      	sbcs	r3, r3
    4af8:	425b      	negs	r3, r3
    4afa:	18e4      	adds	r4, r4, r3
    4afc:	0223      	lsls	r3, r4, #8
    4afe:	d521      	bpl.n	4b44 <__aeabi_dmul+0x4bc>
    4b00:	2501      	movs	r5, #1
    4b02:	9b01      	ldr	r3, [sp, #4]
    4b04:	2401      	movs	r4, #1
    4b06:	401d      	ands	r5, r3
    4b08:	2300      	movs	r3, #0
    4b0a:	2200      	movs	r2, #0
    4b0c:	4699      	mov	r9, r3
    4b0e:	e622      	b.n	4756 <__aeabi_dmul+0xce>
    4b10:	251f      	movs	r5, #31
    4b12:	0021      	movs	r1, r4
    4b14:	426d      	negs	r5, r5
    4b16:	1a28      	subs	r0, r5, r0
    4b18:	40c1      	lsrs	r1, r0
    4b1a:	0008      	movs	r0, r1
    4b1c:	2a20      	cmp	r2, #32
    4b1e:	d01d      	beq.n	4b5c <__aeabi_dmul+0x4d4>
    4b20:	355f      	adds	r5, #95	; 0x5f
    4b22:	1aaa      	subs	r2, r5, r2
    4b24:	4094      	lsls	r4, r2
    4b26:	4323      	orrs	r3, r4
    4b28:	1e5c      	subs	r4, r3, #1
    4b2a:	41a3      	sbcs	r3, r4
    4b2c:	2507      	movs	r5, #7
    4b2e:	4303      	orrs	r3, r0
    4b30:	401d      	ands	r5, r3
    4b32:	2200      	movs	r2, #0
    4b34:	2d00      	cmp	r5, #0
    4b36:	d009      	beq.n	4b4c <__aeabi_dmul+0x4c4>
    4b38:	220f      	movs	r2, #15
    4b3a:	2400      	movs	r4, #0
    4b3c:	401a      	ands	r2, r3
    4b3e:	0018      	movs	r0, r3
    4b40:	2a04      	cmp	r2, #4
    4b42:	d1d6      	bne.n	4af2 <__aeabi_dmul+0x46a>
    4b44:	0003      	movs	r3, r0
    4b46:	0765      	lsls	r5, r4, #29
    4b48:	0264      	lsls	r4, r4, #9
    4b4a:	0b22      	lsrs	r2, r4, #12
    4b4c:	08db      	lsrs	r3, r3, #3
    4b4e:	432b      	orrs	r3, r5
    4b50:	2501      	movs	r5, #1
    4b52:	4699      	mov	r9, r3
    4b54:	9b01      	ldr	r3, [sp, #4]
    4b56:	2400      	movs	r4, #0
    4b58:	401d      	ands	r5, r3
    4b5a:	e5fc      	b.n	4756 <__aeabi_dmul+0xce>
    4b5c:	2400      	movs	r4, #0
    4b5e:	e7e2      	b.n	4b26 <__aeabi_dmul+0x49e>
    4b60:	2280      	movs	r2, #128	; 0x80
    4b62:	2501      	movs	r5, #1
    4b64:	0312      	lsls	r2, r2, #12
    4b66:	4322      	orrs	r2, r4
    4b68:	9901      	ldr	r1, [sp, #4]
    4b6a:	0312      	lsls	r2, r2, #12
    4b6c:	0b12      	lsrs	r2, r2, #12
    4b6e:	400d      	ands	r5, r1
    4b70:	4699      	mov	r9, r3
    4b72:	4c04      	ldr	r4, [pc, #16]	; (4b84 <__aeabi_dmul+0x4fc>)
    4b74:	e5ef      	b.n	4756 <__aeabi_dmul+0xce>
    4b76:	46c0      	nop			; (mov r8, r8)
    4b78:	000003ff 	.word	0x000003ff
    4b7c:	feffffff 	.word	0xfeffffff
    4b80:	000007fe 	.word	0x000007fe
    4b84:	000007ff 	.word	0x000007ff

00004b88 <__aeabi_dsub>:
    4b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b8a:	4646      	mov	r6, r8
    4b8c:	46d6      	mov	lr, sl
    4b8e:	464f      	mov	r7, r9
    4b90:	030c      	lsls	r4, r1, #12
    4b92:	b5c0      	push	{r6, r7, lr}
    4b94:	0fcd      	lsrs	r5, r1, #31
    4b96:	004e      	lsls	r6, r1, #1
    4b98:	0a61      	lsrs	r1, r4, #9
    4b9a:	0f44      	lsrs	r4, r0, #29
    4b9c:	430c      	orrs	r4, r1
    4b9e:	00c1      	lsls	r1, r0, #3
    4ba0:	0058      	lsls	r0, r3, #1
    4ba2:	0d40      	lsrs	r0, r0, #21
    4ba4:	4684      	mov	ip, r0
    4ba6:	468a      	mov	sl, r1
    4ba8:	000f      	movs	r7, r1
    4baa:	0319      	lsls	r1, r3, #12
    4bac:	0f50      	lsrs	r0, r2, #29
    4bae:	0a49      	lsrs	r1, r1, #9
    4bb0:	4301      	orrs	r1, r0
    4bb2:	48c6      	ldr	r0, [pc, #792]	; (4ecc <__aeabi_dsub+0x344>)
    4bb4:	0d76      	lsrs	r6, r6, #21
    4bb6:	46a8      	mov	r8, r5
    4bb8:	0fdb      	lsrs	r3, r3, #31
    4bba:	00d2      	lsls	r2, r2, #3
    4bbc:	4584      	cmp	ip, r0
    4bbe:	d100      	bne.n	4bc2 <__aeabi_dsub+0x3a>
    4bc0:	e0d8      	b.n	4d74 <__aeabi_dsub+0x1ec>
    4bc2:	2001      	movs	r0, #1
    4bc4:	4043      	eors	r3, r0
    4bc6:	42ab      	cmp	r3, r5
    4bc8:	d100      	bne.n	4bcc <__aeabi_dsub+0x44>
    4bca:	e0a6      	b.n	4d1a <__aeabi_dsub+0x192>
    4bcc:	4660      	mov	r0, ip
    4bce:	1a35      	subs	r5, r6, r0
    4bd0:	2d00      	cmp	r5, #0
    4bd2:	dc00      	bgt.n	4bd6 <__aeabi_dsub+0x4e>
    4bd4:	e105      	b.n	4de2 <__aeabi_dsub+0x25a>
    4bd6:	2800      	cmp	r0, #0
    4bd8:	d110      	bne.n	4bfc <__aeabi_dsub+0x74>
    4bda:	000b      	movs	r3, r1
    4bdc:	4313      	orrs	r3, r2
    4bde:	d100      	bne.n	4be2 <__aeabi_dsub+0x5a>
    4be0:	e0d7      	b.n	4d92 <__aeabi_dsub+0x20a>
    4be2:	1e6b      	subs	r3, r5, #1
    4be4:	2b00      	cmp	r3, #0
    4be6:	d000      	beq.n	4bea <__aeabi_dsub+0x62>
    4be8:	e14b      	b.n	4e82 <__aeabi_dsub+0x2fa>
    4bea:	4653      	mov	r3, sl
    4bec:	1a9f      	subs	r7, r3, r2
    4bee:	45ba      	cmp	sl, r7
    4bf0:	4180      	sbcs	r0, r0
    4bf2:	1a64      	subs	r4, r4, r1
    4bf4:	4240      	negs	r0, r0
    4bf6:	1a24      	subs	r4, r4, r0
    4bf8:	2601      	movs	r6, #1
    4bfa:	e01e      	b.n	4c3a <__aeabi_dsub+0xb2>
    4bfc:	4bb3      	ldr	r3, [pc, #716]	; (4ecc <__aeabi_dsub+0x344>)
    4bfe:	429e      	cmp	r6, r3
    4c00:	d048      	beq.n	4c94 <__aeabi_dsub+0x10c>
    4c02:	2380      	movs	r3, #128	; 0x80
    4c04:	041b      	lsls	r3, r3, #16
    4c06:	4319      	orrs	r1, r3
    4c08:	2d38      	cmp	r5, #56	; 0x38
    4c0a:	dd00      	ble.n	4c0e <__aeabi_dsub+0x86>
    4c0c:	e119      	b.n	4e42 <__aeabi_dsub+0x2ba>
    4c0e:	2d1f      	cmp	r5, #31
    4c10:	dd00      	ble.n	4c14 <__aeabi_dsub+0x8c>
    4c12:	e14c      	b.n	4eae <__aeabi_dsub+0x326>
    4c14:	2320      	movs	r3, #32
    4c16:	000f      	movs	r7, r1
    4c18:	1b5b      	subs	r3, r3, r5
    4c1a:	0010      	movs	r0, r2
    4c1c:	409a      	lsls	r2, r3
    4c1e:	409f      	lsls	r7, r3
    4c20:	40e8      	lsrs	r0, r5
    4c22:	1e53      	subs	r3, r2, #1
    4c24:	419a      	sbcs	r2, r3
    4c26:	40e9      	lsrs	r1, r5
    4c28:	4307      	orrs	r7, r0
    4c2a:	4317      	orrs	r7, r2
    4c2c:	4653      	mov	r3, sl
    4c2e:	1bdf      	subs	r7, r3, r7
    4c30:	1a61      	subs	r1, r4, r1
    4c32:	45ba      	cmp	sl, r7
    4c34:	41a4      	sbcs	r4, r4
    4c36:	4264      	negs	r4, r4
    4c38:	1b0c      	subs	r4, r1, r4
    4c3a:	0223      	lsls	r3, r4, #8
    4c3c:	d400      	bmi.n	4c40 <__aeabi_dsub+0xb8>
    4c3e:	e0c5      	b.n	4dcc <__aeabi_dsub+0x244>
    4c40:	0264      	lsls	r4, r4, #9
    4c42:	0a65      	lsrs	r5, r4, #9
    4c44:	2d00      	cmp	r5, #0
    4c46:	d100      	bne.n	4c4a <__aeabi_dsub+0xc2>
    4c48:	e0f6      	b.n	4e38 <__aeabi_dsub+0x2b0>
    4c4a:	0028      	movs	r0, r5
    4c4c:	f000 fb1e 	bl	528c <__clzsi2>
    4c50:	0003      	movs	r3, r0
    4c52:	3b08      	subs	r3, #8
    4c54:	2b1f      	cmp	r3, #31
    4c56:	dd00      	ble.n	4c5a <__aeabi_dsub+0xd2>
    4c58:	e0e9      	b.n	4e2e <__aeabi_dsub+0x2a6>
    4c5a:	2220      	movs	r2, #32
    4c5c:	003c      	movs	r4, r7
    4c5e:	1ad2      	subs	r2, r2, r3
    4c60:	409d      	lsls	r5, r3
    4c62:	40d4      	lsrs	r4, r2
    4c64:	409f      	lsls	r7, r3
    4c66:	4325      	orrs	r5, r4
    4c68:	429e      	cmp	r6, r3
    4c6a:	dd00      	ble.n	4c6e <__aeabi_dsub+0xe6>
    4c6c:	e0db      	b.n	4e26 <__aeabi_dsub+0x29e>
    4c6e:	1b9e      	subs	r6, r3, r6
    4c70:	1c73      	adds	r3, r6, #1
    4c72:	2b1f      	cmp	r3, #31
    4c74:	dd00      	ble.n	4c78 <__aeabi_dsub+0xf0>
    4c76:	e10a      	b.n	4e8e <__aeabi_dsub+0x306>
    4c78:	2220      	movs	r2, #32
    4c7a:	0038      	movs	r0, r7
    4c7c:	1ad2      	subs	r2, r2, r3
    4c7e:	0029      	movs	r1, r5
    4c80:	4097      	lsls	r7, r2
    4c82:	002c      	movs	r4, r5
    4c84:	4091      	lsls	r1, r2
    4c86:	40d8      	lsrs	r0, r3
    4c88:	1e7a      	subs	r2, r7, #1
    4c8a:	4197      	sbcs	r7, r2
    4c8c:	40dc      	lsrs	r4, r3
    4c8e:	2600      	movs	r6, #0
    4c90:	4301      	orrs	r1, r0
    4c92:	430f      	orrs	r7, r1
    4c94:	077b      	lsls	r3, r7, #29
    4c96:	d009      	beq.n	4cac <__aeabi_dsub+0x124>
    4c98:	230f      	movs	r3, #15
    4c9a:	403b      	ands	r3, r7
    4c9c:	2b04      	cmp	r3, #4
    4c9e:	d005      	beq.n	4cac <__aeabi_dsub+0x124>
    4ca0:	1d3b      	adds	r3, r7, #4
    4ca2:	42bb      	cmp	r3, r7
    4ca4:	41bf      	sbcs	r7, r7
    4ca6:	427f      	negs	r7, r7
    4ca8:	19e4      	adds	r4, r4, r7
    4caa:	001f      	movs	r7, r3
    4cac:	0223      	lsls	r3, r4, #8
    4cae:	d525      	bpl.n	4cfc <__aeabi_dsub+0x174>
    4cb0:	4b86      	ldr	r3, [pc, #536]	; (4ecc <__aeabi_dsub+0x344>)
    4cb2:	3601      	adds	r6, #1
    4cb4:	429e      	cmp	r6, r3
    4cb6:	d100      	bne.n	4cba <__aeabi_dsub+0x132>
    4cb8:	e0af      	b.n	4e1a <__aeabi_dsub+0x292>
    4cba:	4b85      	ldr	r3, [pc, #532]	; (4ed0 <__aeabi_dsub+0x348>)
    4cbc:	2501      	movs	r5, #1
    4cbe:	401c      	ands	r4, r3
    4cc0:	4643      	mov	r3, r8
    4cc2:	0762      	lsls	r2, r4, #29
    4cc4:	08ff      	lsrs	r7, r7, #3
    4cc6:	0264      	lsls	r4, r4, #9
    4cc8:	0576      	lsls	r6, r6, #21
    4cca:	4317      	orrs	r7, r2
    4ccc:	0b24      	lsrs	r4, r4, #12
    4cce:	0d76      	lsrs	r6, r6, #21
    4cd0:	401d      	ands	r5, r3
    4cd2:	2100      	movs	r1, #0
    4cd4:	0324      	lsls	r4, r4, #12
    4cd6:	0b23      	lsrs	r3, r4, #12
    4cd8:	0d0c      	lsrs	r4, r1, #20
    4cda:	4a7e      	ldr	r2, [pc, #504]	; (4ed4 <__aeabi_dsub+0x34c>)
    4cdc:	0524      	lsls	r4, r4, #20
    4cde:	431c      	orrs	r4, r3
    4ce0:	4014      	ands	r4, r2
    4ce2:	0533      	lsls	r3, r6, #20
    4ce4:	4323      	orrs	r3, r4
    4ce6:	005b      	lsls	r3, r3, #1
    4ce8:	07ed      	lsls	r5, r5, #31
    4cea:	085b      	lsrs	r3, r3, #1
    4cec:	432b      	orrs	r3, r5
    4cee:	0038      	movs	r0, r7
    4cf0:	0019      	movs	r1, r3
    4cf2:	bc1c      	pop	{r2, r3, r4}
    4cf4:	4690      	mov	r8, r2
    4cf6:	4699      	mov	r9, r3
    4cf8:	46a2      	mov	sl, r4
    4cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4cfc:	2501      	movs	r5, #1
    4cfe:	4643      	mov	r3, r8
    4d00:	0762      	lsls	r2, r4, #29
    4d02:	08ff      	lsrs	r7, r7, #3
    4d04:	4317      	orrs	r7, r2
    4d06:	08e4      	lsrs	r4, r4, #3
    4d08:	401d      	ands	r5, r3
    4d0a:	4b70      	ldr	r3, [pc, #448]	; (4ecc <__aeabi_dsub+0x344>)
    4d0c:	429e      	cmp	r6, r3
    4d0e:	d036      	beq.n	4d7e <__aeabi_dsub+0x1f6>
    4d10:	0324      	lsls	r4, r4, #12
    4d12:	0576      	lsls	r6, r6, #21
    4d14:	0b24      	lsrs	r4, r4, #12
    4d16:	0d76      	lsrs	r6, r6, #21
    4d18:	e7db      	b.n	4cd2 <__aeabi_dsub+0x14a>
    4d1a:	4663      	mov	r3, ip
    4d1c:	1af3      	subs	r3, r6, r3
    4d1e:	2b00      	cmp	r3, #0
    4d20:	dc00      	bgt.n	4d24 <__aeabi_dsub+0x19c>
    4d22:	e094      	b.n	4e4e <__aeabi_dsub+0x2c6>
    4d24:	4660      	mov	r0, ip
    4d26:	2800      	cmp	r0, #0
    4d28:	d035      	beq.n	4d96 <__aeabi_dsub+0x20e>
    4d2a:	4868      	ldr	r0, [pc, #416]	; (4ecc <__aeabi_dsub+0x344>)
    4d2c:	4286      	cmp	r6, r0
    4d2e:	d0b1      	beq.n	4c94 <__aeabi_dsub+0x10c>
    4d30:	2780      	movs	r7, #128	; 0x80
    4d32:	043f      	lsls	r7, r7, #16
    4d34:	4339      	orrs	r1, r7
    4d36:	2b38      	cmp	r3, #56	; 0x38
    4d38:	dc00      	bgt.n	4d3c <__aeabi_dsub+0x1b4>
    4d3a:	e0fd      	b.n	4f38 <__aeabi_dsub+0x3b0>
    4d3c:	430a      	orrs	r2, r1
    4d3e:	0017      	movs	r7, r2
    4d40:	2100      	movs	r1, #0
    4d42:	1e7a      	subs	r2, r7, #1
    4d44:	4197      	sbcs	r7, r2
    4d46:	4457      	add	r7, sl
    4d48:	4557      	cmp	r7, sl
    4d4a:	4180      	sbcs	r0, r0
    4d4c:	1909      	adds	r1, r1, r4
    4d4e:	4244      	negs	r4, r0
    4d50:	190c      	adds	r4, r1, r4
    4d52:	0223      	lsls	r3, r4, #8
    4d54:	d53a      	bpl.n	4dcc <__aeabi_dsub+0x244>
    4d56:	4b5d      	ldr	r3, [pc, #372]	; (4ecc <__aeabi_dsub+0x344>)
    4d58:	3601      	adds	r6, #1
    4d5a:	429e      	cmp	r6, r3
    4d5c:	d100      	bne.n	4d60 <__aeabi_dsub+0x1d8>
    4d5e:	e14b      	b.n	4ff8 <__aeabi_dsub+0x470>
    4d60:	2201      	movs	r2, #1
    4d62:	4b5b      	ldr	r3, [pc, #364]	; (4ed0 <__aeabi_dsub+0x348>)
    4d64:	401c      	ands	r4, r3
    4d66:	087b      	lsrs	r3, r7, #1
    4d68:	4017      	ands	r7, r2
    4d6a:	431f      	orrs	r7, r3
    4d6c:	07e2      	lsls	r2, r4, #31
    4d6e:	4317      	orrs	r7, r2
    4d70:	0864      	lsrs	r4, r4, #1
    4d72:	e78f      	b.n	4c94 <__aeabi_dsub+0x10c>
    4d74:	0008      	movs	r0, r1
    4d76:	4310      	orrs	r0, r2
    4d78:	d000      	beq.n	4d7c <__aeabi_dsub+0x1f4>
    4d7a:	e724      	b.n	4bc6 <__aeabi_dsub+0x3e>
    4d7c:	e721      	b.n	4bc2 <__aeabi_dsub+0x3a>
    4d7e:	0023      	movs	r3, r4
    4d80:	433b      	orrs	r3, r7
    4d82:	d100      	bne.n	4d86 <__aeabi_dsub+0x1fe>
    4d84:	e1b9      	b.n	50fa <__aeabi_dsub+0x572>
    4d86:	2280      	movs	r2, #128	; 0x80
    4d88:	0312      	lsls	r2, r2, #12
    4d8a:	4314      	orrs	r4, r2
    4d8c:	0324      	lsls	r4, r4, #12
    4d8e:	0b24      	lsrs	r4, r4, #12
    4d90:	e79f      	b.n	4cd2 <__aeabi_dsub+0x14a>
    4d92:	002e      	movs	r6, r5
    4d94:	e77e      	b.n	4c94 <__aeabi_dsub+0x10c>
    4d96:	0008      	movs	r0, r1
    4d98:	4310      	orrs	r0, r2
    4d9a:	d100      	bne.n	4d9e <__aeabi_dsub+0x216>
    4d9c:	e0ca      	b.n	4f34 <__aeabi_dsub+0x3ac>
    4d9e:	1e58      	subs	r0, r3, #1
    4da0:	4684      	mov	ip, r0
    4da2:	2800      	cmp	r0, #0
    4da4:	d000      	beq.n	4da8 <__aeabi_dsub+0x220>
    4da6:	e0e7      	b.n	4f78 <__aeabi_dsub+0x3f0>
    4da8:	4452      	add	r2, sl
    4daa:	4552      	cmp	r2, sl
    4dac:	4180      	sbcs	r0, r0
    4dae:	1864      	adds	r4, r4, r1
    4db0:	4240      	negs	r0, r0
    4db2:	1824      	adds	r4, r4, r0
    4db4:	0017      	movs	r7, r2
    4db6:	2601      	movs	r6, #1
    4db8:	0223      	lsls	r3, r4, #8
    4dba:	d507      	bpl.n	4dcc <__aeabi_dsub+0x244>
    4dbc:	2602      	movs	r6, #2
    4dbe:	e7cf      	b.n	4d60 <__aeabi_dsub+0x1d8>
    4dc0:	4664      	mov	r4, ip
    4dc2:	432c      	orrs	r4, r5
    4dc4:	d100      	bne.n	4dc8 <__aeabi_dsub+0x240>
    4dc6:	e1b3      	b.n	5130 <__aeabi_dsub+0x5a8>
    4dc8:	002c      	movs	r4, r5
    4dca:	4667      	mov	r7, ip
    4dcc:	077b      	lsls	r3, r7, #29
    4dce:	d000      	beq.n	4dd2 <__aeabi_dsub+0x24a>
    4dd0:	e762      	b.n	4c98 <__aeabi_dsub+0x110>
    4dd2:	0763      	lsls	r3, r4, #29
    4dd4:	08ff      	lsrs	r7, r7, #3
    4dd6:	431f      	orrs	r7, r3
    4dd8:	2501      	movs	r5, #1
    4dda:	4643      	mov	r3, r8
    4ddc:	08e4      	lsrs	r4, r4, #3
    4dde:	401d      	ands	r5, r3
    4de0:	e793      	b.n	4d0a <__aeabi_dsub+0x182>
    4de2:	2d00      	cmp	r5, #0
    4de4:	d178      	bne.n	4ed8 <__aeabi_dsub+0x350>
    4de6:	1c75      	adds	r5, r6, #1
    4de8:	056d      	lsls	r5, r5, #21
    4dea:	0d6d      	lsrs	r5, r5, #21
    4dec:	2d01      	cmp	r5, #1
    4dee:	dc00      	bgt.n	4df2 <__aeabi_dsub+0x26a>
    4df0:	e0f2      	b.n	4fd8 <__aeabi_dsub+0x450>
    4df2:	4650      	mov	r0, sl
    4df4:	1a80      	subs	r0, r0, r2
    4df6:	4582      	cmp	sl, r0
    4df8:	41bf      	sbcs	r7, r7
    4dfa:	1a65      	subs	r5, r4, r1
    4dfc:	427f      	negs	r7, r7
    4dfe:	1bed      	subs	r5, r5, r7
    4e00:	4684      	mov	ip, r0
    4e02:	0228      	lsls	r0, r5, #8
    4e04:	d400      	bmi.n	4e08 <__aeabi_dsub+0x280>
    4e06:	e08c      	b.n	4f22 <__aeabi_dsub+0x39a>
    4e08:	4650      	mov	r0, sl
    4e0a:	1a17      	subs	r7, r2, r0
    4e0c:	42ba      	cmp	r2, r7
    4e0e:	4192      	sbcs	r2, r2
    4e10:	1b0c      	subs	r4, r1, r4
    4e12:	4255      	negs	r5, r2
    4e14:	1b65      	subs	r5, r4, r5
    4e16:	4698      	mov	r8, r3
    4e18:	e714      	b.n	4c44 <__aeabi_dsub+0xbc>
    4e1a:	2501      	movs	r5, #1
    4e1c:	4643      	mov	r3, r8
    4e1e:	2400      	movs	r4, #0
    4e20:	401d      	ands	r5, r3
    4e22:	2700      	movs	r7, #0
    4e24:	e755      	b.n	4cd2 <__aeabi_dsub+0x14a>
    4e26:	4c2a      	ldr	r4, [pc, #168]	; (4ed0 <__aeabi_dsub+0x348>)
    4e28:	1af6      	subs	r6, r6, r3
    4e2a:	402c      	ands	r4, r5
    4e2c:	e732      	b.n	4c94 <__aeabi_dsub+0x10c>
    4e2e:	003d      	movs	r5, r7
    4e30:	3828      	subs	r0, #40	; 0x28
    4e32:	4085      	lsls	r5, r0
    4e34:	2700      	movs	r7, #0
    4e36:	e717      	b.n	4c68 <__aeabi_dsub+0xe0>
    4e38:	0038      	movs	r0, r7
    4e3a:	f000 fa27 	bl	528c <__clzsi2>
    4e3e:	3020      	adds	r0, #32
    4e40:	e706      	b.n	4c50 <__aeabi_dsub+0xc8>
    4e42:	430a      	orrs	r2, r1
    4e44:	0017      	movs	r7, r2
    4e46:	2100      	movs	r1, #0
    4e48:	1e7a      	subs	r2, r7, #1
    4e4a:	4197      	sbcs	r7, r2
    4e4c:	e6ee      	b.n	4c2c <__aeabi_dsub+0xa4>
    4e4e:	2b00      	cmp	r3, #0
    4e50:	d000      	beq.n	4e54 <__aeabi_dsub+0x2cc>
    4e52:	e0e5      	b.n	5020 <__aeabi_dsub+0x498>
    4e54:	1c73      	adds	r3, r6, #1
    4e56:	469c      	mov	ip, r3
    4e58:	055b      	lsls	r3, r3, #21
    4e5a:	0d5b      	lsrs	r3, r3, #21
    4e5c:	2b01      	cmp	r3, #1
    4e5e:	dc00      	bgt.n	4e62 <__aeabi_dsub+0x2da>
    4e60:	e09f      	b.n	4fa2 <__aeabi_dsub+0x41a>
    4e62:	4b1a      	ldr	r3, [pc, #104]	; (4ecc <__aeabi_dsub+0x344>)
    4e64:	459c      	cmp	ip, r3
    4e66:	d100      	bne.n	4e6a <__aeabi_dsub+0x2e2>
    4e68:	e0c5      	b.n	4ff6 <__aeabi_dsub+0x46e>
    4e6a:	4452      	add	r2, sl
    4e6c:	4552      	cmp	r2, sl
    4e6e:	4180      	sbcs	r0, r0
    4e70:	1864      	adds	r4, r4, r1
    4e72:	4240      	negs	r0, r0
    4e74:	1824      	adds	r4, r4, r0
    4e76:	07e7      	lsls	r7, r4, #31
    4e78:	0852      	lsrs	r2, r2, #1
    4e7a:	4317      	orrs	r7, r2
    4e7c:	0864      	lsrs	r4, r4, #1
    4e7e:	4666      	mov	r6, ip
    4e80:	e708      	b.n	4c94 <__aeabi_dsub+0x10c>
    4e82:	4812      	ldr	r0, [pc, #72]	; (4ecc <__aeabi_dsub+0x344>)
    4e84:	4285      	cmp	r5, r0
    4e86:	d100      	bne.n	4e8a <__aeabi_dsub+0x302>
    4e88:	e085      	b.n	4f96 <__aeabi_dsub+0x40e>
    4e8a:	001d      	movs	r5, r3
    4e8c:	e6bc      	b.n	4c08 <__aeabi_dsub+0x80>
    4e8e:	0029      	movs	r1, r5
    4e90:	3e1f      	subs	r6, #31
    4e92:	40f1      	lsrs	r1, r6
    4e94:	2b20      	cmp	r3, #32
    4e96:	d100      	bne.n	4e9a <__aeabi_dsub+0x312>
    4e98:	e07f      	b.n	4f9a <__aeabi_dsub+0x412>
    4e9a:	2240      	movs	r2, #64	; 0x40
    4e9c:	1ad3      	subs	r3, r2, r3
    4e9e:	409d      	lsls	r5, r3
    4ea0:	432f      	orrs	r7, r5
    4ea2:	1e7d      	subs	r5, r7, #1
    4ea4:	41af      	sbcs	r7, r5
    4ea6:	2400      	movs	r4, #0
    4ea8:	430f      	orrs	r7, r1
    4eaa:	2600      	movs	r6, #0
    4eac:	e78e      	b.n	4dcc <__aeabi_dsub+0x244>
    4eae:	002b      	movs	r3, r5
    4eb0:	000f      	movs	r7, r1
    4eb2:	3b20      	subs	r3, #32
    4eb4:	40df      	lsrs	r7, r3
    4eb6:	2d20      	cmp	r5, #32
    4eb8:	d071      	beq.n	4f9e <__aeabi_dsub+0x416>
    4eba:	2340      	movs	r3, #64	; 0x40
    4ebc:	1b5d      	subs	r5, r3, r5
    4ebe:	40a9      	lsls	r1, r5
    4ec0:	430a      	orrs	r2, r1
    4ec2:	1e51      	subs	r1, r2, #1
    4ec4:	418a      	sbcs	r2, r1
    4ec6:	2100      	movs	r1, #0
    4ec8:	4317      	orrs	r7, r2
    4eca:	e6af      	b.n	4c2c <__aeabi_dsub+0xa4>
    4ecc:	000007ff 	.word	0x000007ff
    4ed0:	ff7fffff 	.word	0xff7fffff
    4ed4:	800fffff 	.word	0x800fffff
    4ed8:	2e00      	cmp	r6, #0
    4eda:	d03e      	beq.n	4f5a <__aeabi_dsub+0x3d2>
    4edc:	4eb3      	ldr	r6, [pc, #716]	; (51ac <__aeabi_dsub+0x624>)
    4ede:	45b4      	cmp	ip, r6
    4ee0:	d045      	beq.n	4f6e <__aeabi_dsub+0x3e6>
    4ee2:	2680      	movs	r6, #128	; 0x80
    4ee4:	0436      	lsls	r6, r6, #16
    4ee6:	426d      	negs	r5, r5
    4ee8:	4334      	orrs	r4, r6
    4eea:	2d38      	cmp	r5, #56	; 0x38
    4eec:	dd00      	ble.n	4ef0 <__aeabi_dsub+0x368>
    4eee:	e0a8      	b.n	5042 <__aeabi_dsub+0x4ba>
    4ef0:	2d1f      	cmp	r5, #31
    4ef2:	dd00      	ble.n	4ef6 <__aeabi_dsub+0x36e>
    4ef4:	e11f      	b.n	5136 <__aeabi_dsub+0x5ae>
    4ef6:	2620      	movs	r6, #32
    4ef8:	0027      	movs	r7, r4
    4efa:	4650      	mov	r0, sl
    4efc:	1b76      	subs	r6, r6, r5
    4efe:	40b7      	lsls	r7, r6
    4f00:	40e8      	lsrs	r0, r5
    4f02:	4307      	orrs	r7, r0
    4f04:	4650      	mov	r0, sl
    4f06:	40b0      	lsls	r0, r6
    4f08:	1e46      	subs	r6, r0, #1
    4f0a:	41b0      	sbcs	r0, r6
    4f0c:	40ec      	lsrs	r4, r5
    4f0e:	4338      	orrs	r0, r7
    4f10:	1a17      	subs	r7, r2, r0
    4f12:	42ba      	cmp	r2, r7
    4f14:	4192      	sbcs	r2, r2
    4f16:	1b0c      	subs	r4, r1, r4
    4f18:	4252      	negs	r2, r2
    4f1a:	1aa4      	subs	r4, r4, r2
    4f1c:	4666      	mov	r6, ip
    4f1e:	4698      	mov	r8, r3
    4f20:	e68b      	b.n	4c3a <__aeabi_dsub+0xb2>
    4f22:	4664      	mov	r4, ip
    4f24:	4667      	mov	r7, ip
    4f26:	432c      	orrs	r4, r5
    4f28:	d000      	beq.n	4f2c <__aeabi_dsub+0x3a4>
    4f2a:	e68b      	b.n	4c44 <__aeabi_dsub+0xbc>
    4f2c:	2500      	movs	r5, #0
    4f2e:	2600      	movs	r6, #0
    4f30:	2700      	movs	r7, #0
    4f32:	e6ea      	b.n	4d0a <__aeabi_dsub+0x182>
    4f34:	001e      	movs	r6, r3
    4f36:	e6ad      	b.n	4c94 <__aeabi_dsub+0x10c>
    4f38:	2b1f      	cmp	r3, #31
    4f3a:	dc60      	bgt.n	4ffe <__aeabi_dsub+0x476>
    4f3c:	2720      	movs	r7, #32
    4f3e:	1af8      	subs	r0, r7, r3
    4f40:	000f      	movs	r7, r1
    4f42:	4684      	mov	ip, r0
    4f44:	4087      	lsls	r7, r0
    4f46:	0010      	movs	r0, r2
    4f48:	40d8      	lsrs	r0, r3
    4f4a:	4307      	orrs	r7, r0
    4f4c:	4660      	mov	r0, ip
    4f4e:	4082      	lsls	r2, r0
    4f50:	1e50      	subs	r0, r2, #1
    4f52:	4182      	sbcs	r2, r0
    4f54:	40d9      	lsrs	r1, r3
    4f56:	4317      	orrs	r7, r2
    4f58:	e6f5      	b.n	4d46 <__aeabi_dsub+0x1be>
    4f5a:	0026      	movs	r6, r4
    4f5c:	4650      	mov	r0, sl
    4f5e:	4306      	orrs	r6, r0
    4f60:	d005      	beq.n	4f6e <__aeabi_dsub+0x3e6>
    4f62:	43ed      	mvns	r5, r5
    4f64:	2d00      	cmp	r5, #0
    4f66:	d0d3      	beq.n	4f10 <__aeabi_dsub+0x388>
    4f68:	4e90      	ldr	r6, [pc, #576]	; (51ac <__aeabi_dsub+0x624>)
    4f6a:	45b4      	cmp	ip, r6
    4f6c:	d1bd      	bne.n	4eea <__aeabi_dsub+0x362>
    4f6e:	000c      	movs	r4, r1
    4f70:	0017      	movs	r7, r2
    4f72:	4666      	mov	r6, ip
    4f74:	4698      	mov	r8, r3
    4f76:	e68d      	b.n	4c94 <__aeabi_dsub+0x10c>
    4f78:	488c      	ldr	r0, [pc, #560]	; (51ac <__aeabi_dsub+0x624>)
    4f7a:	4283      	cmp	r3, r0
    4f7c:	d00b      	beq.n	4f96 <__aeabi_dsub+0x40e>
    4f7e:	4663      	mov	r3, ip
    4f80:	e6d9      	b.n	4d36 <__aeabi_dsub+0x1ae>
    4f82:	2d00      	cmp	r5, #0
    4f84:	d000      	beq.n	4f88 <__aeabi_dsub+0x400>
    4f86:	e096      	b.n	50b6 <__aeabi_dsub+0x52e>
    4f88:	0008      	movs	r0, r1
    4f8a:	4310      	orrs	r0, r2
    4f8c:	d100      	bne.n	4f90 <__aeabi_dsub+0x408>
    4f8e:	e0e2      	b.n	5156 <__aeabi_dsub+0x5ce>
    4f90:	000c      	movs	r4, r1
    4f92:	0017      	movs	r7, r2
    4f94:	4698      	mov	r8, r3
    4f96:	4e85      	ldr	r6, [pc, #532]	; (51ac <__aeabi_dsub+0x624>)
    4f98:	e67c      	b.n	4c94 <__aeabi_dsub+0x10c>
    4f9a:	2500      	movs	r5, #0
    4f9c:	e780      	b.n	4ea0 <__aeabi_dsub+0x318>
    4f9e:	2100      	movs	r1, #0
    4fa0:	e78e      	b.n	4ec0 <__aeabi_dsub+0x338>
    4fa2:	0023      	movs	r3, r4
    4fa4:	4650      	mov	r0, sl
    4fa6:	4303      	orrs	r3, r0
    4fa8:	2e00      	cmp	r6, #0
    4faa:	d000      	beq.n	4fae <__aeabi_dsub+0x426>
    4fac:	e0a8      	b.n	5100 <__aeabi_dsub+0x578>
    4fae:	2b00      	cmp	r3, #0
    4fb0:	d100      	bne.n	4fb4 <__aeabi_dsub+0x42c>
    4fb2:	e0de      	b.n	5172 <__aeabi_dsub+0x5ea>
    4fb4:	000b      	movs	r3, r1
    4fb6:	4313      	orrs	r3, r2
    4fb8:	d100      	bne.n	4fbc <__aeabi_dsub+0x434>
    4fba:	e66b      	b.n	4c94 <__aeabi_dsub+0x10c>
    4fbc:	4452      	add	r2, sl
    4fbe:	4552      	cmp	r2, sl
    4fc0:	4180      	sbcs	r0, r0
    4fc2:	1864      	adds	r4, r4, r1
    4fc4:	4240      	negs	r0, r0
    4fc6:	1824      	adds	r4, r4, r0
    4fc8:	0017      	movs	r7, r2
    4fca:	0223      	lsls	r3, r4, #8
    4fcc:	d400      	bmi.n	4fd0 <__aeabi_dsub+0x448>
    4fce:	e6fd      	b.n	4dcc <__aeabi_dsub+0x244>
    4fd0:	4b77      	ldr	r3, [pc, #476]	; (51b0 <__aeabi_dsub+0x628>)
    4fd2:	4666      	mov	r6, ip
    4fd4:	401c      	ands	r4, r3
    4fd6:	e65d      	b.n	4c94 <__aeabi_dsub+0x10c>
    4fd8:	0025      	movs	r5, r4
    4fda:	4650      	mov	r0, sl
    4fdc:	4305      	orrs	r5, r0
    4fde:	2e00      	cmp	r6, #0
    4fe0:	d1cf      	bne.n	4f82 <__aeabi_dsub+0x3fa>
    4fe2:	2d00      	cmp	r5, #0
    4fe4:	d14f      	bne.n	5086 <__aeabi_dsub+0x4fe>
    4fe6:	000c      	movs	r4, r1
    4fe8:	4314      	orrs	r4, r2
    4fea:	d100      	bne.n	4fee <__aeabi_dsub+0x466>
    4fec:	e0a0      	b.n	5130 <__aeabi_dsub+0x5a8>
    4fee:	000c      	movs	r4, r1
    4ff0:	0017      	movs	r7, r2
    4ff2:	4698      	mov	r8, r3
    4ff4:	e64e      	b.n	4c94 <__aeabi_dsub+0x10c>
    4ff6:	4666      	mov	r6, ip
    4ff8:	2400      	movs	r4, #0
    4ffa:	2700      	movs	r7, #0
    4ffc:	e685      	b.n	4d0a <__aeabi_dsub+0x182>
    4ffe:	001f      	movs	r7, r3
    5000:	0008      	movs	r0, r1
    5002:	3f20      	subs	r7, #32
    5004:	40f8      	lsrs	r0, r7
    5006:	0007      	movs	r7, r0
    5008:	2b20      	cmp	r3, #32
    500a:	d100      	bne.n	500e <__aeabi_dsub+0x486>
    500c:	e08e      	b.n	512c <__aeabi_dsub+0x5a4>
    500e:	2040      	movs	r0, #64	; 0x40
    5010:	1ac3      	subs	r3, r0, r3
    5012:	4099      	lsls	r1, r3
    5014:	430a      	orrs	r2, r1
    5016:	1e51      	subs	r1, r2, #1
    5018:	418a      	sbcs	r2, r1
    501a:	2100      	movs	r1, #0
    501c:	4317      	orrs	r7, r2
    501e:	e692      	b.n	4d46 <__aeabi_dsub+0x1be>
    5020:	2e00      	cmp	r6, #0
    5022:	d114      	bne.n	504e <__aeabi_dsub+0x4c6>
    5024:	0026      	movs	r6, r4
    5026:	4650      	mov	r0, sl
    5028:	4306      	orrs	r6, r0
    502a:	d062      	beq.n	50f2 <__aeabi_dsub+0x56a>
    502c:	43db      	mvns	r3, r3
    502e:	2b00      	cmp	r3, #0
    5030:	d15c      	bne.n	50ec <__aeabi_dsub+0x564>
    5032:	1887      	adds	r7, r0, r2
    5034:	4297      	cmp	r7, r2
    5036:	4192      	sbcs	r2, r2
    5038:	1864      	adds	r4, r4, r1
    503a:	4252      	negs	r2, r2
    503c:	18a4      	adds	r4, r4, r2
    503e:	4666      	mov	r6, ip
    5040:	e687      	b.n	4d52 <__aeabi_dsub+0x1ca>
    5042:	4650      	mov	r0, sl
    5044:	4320      	orrs	r0, r4
    5046:	1e44      	subs	r4, r0, #1
    5048:	41a0      	sbcs	r0, r4
    504a:	2400      	movs	r4, #0
    504c:	e760      	b.n	4f10 <__aeabi_dsub+0x388>
    504e:	4e57      	ldr	r6, [pc, #348]	; (51ac <__aeabi_dsub+0x624>)
    5050:	45b4      	cmp	ip, r6
    5052:	d04e      	beq.n	50f2 <__aeabi_dsub+0x56a>
    5054:	2680      	movs	r6, #128	; 0x80
    5056:	0436      	lsls	r6, r6, #16
    5058:	425b      	negs	r3, r3
    505a:	4334      	orrs	r4, r6
    505c:	2b38      	cmp	r3, #56	; 0x38
    505e:	dd00      	ble.n	5062 <__aeabi_dsub+0x4da>
    5060:	e07f      	b.n	5162 <__aeabi_dsub+0x5da>
    5062:	2b1f      	cmp	r3, #31
    5064:	dd00      	ble.n	5068 <__aeabi_dsub+0x4e0>
    5066:	e08b      	b.n	5180 <__aeabi_dsub+0x5f8>
    5068:	2620      	movs	r6, #32
    506a:	0027      	movs	r7, r4
    506c:	4650      	mov	r0, sl
    506e:	1af6      	subs	r6, r6, r3
    5070:	40b7      	lsls	r7, r6
    5072:	40d8      	lsrs	r0, r3
    5074:	4307      	orrs	r7, r0
    5076:	4650      	mov	r0, sl
    5078:	40b0      	lsls	r0, r6
    507a:	1e46      	subs	r6, r0, #1
    507c:	41b0      	sbcs	r0, r6
    507e:	4307      	orrs	r7, r0
    5080:	40dc      	lsrs	r4, r3
    5082:	18bf      	adds	r7, r7, r2
    5084:	e7d6      	b.n	5034 <__aeabi_dsub+0x4ac>
    5086:	000d      	movs	r5, r1
    5088:	4315      	orrs	r5, r2
    508a:	d100      	bne.n	508e <__aeabi_dsub+0x506>
    508c:	e602      	b.n	4c94 <__aeabi_dsub+0x10c>
    508e:	4650      	mov	r0, sl
    5090:	1a80      	subs	r0, r0, r2
    5092:	4582      	cmp	sl, r0
    5094:	41bf      	sbcs	r7, r7
    5096:	1a65      	subs	r5, r4, r1
    5098:	427f      	negs	r7, r7
    509a:	1bed      	subs	r5, r5, r7
    509c:	4684      	mov	ip, r0
    509e:	0228      	lsls	r0, r5, #8
    50a0:	d400      	bmi.n	50a4 <__aeabi_dsub+0x51c>
    50a2:	e68d      	b.n	4dc0 <__aeabi_dsub+0x238>
    50a4:	4650      	mov	r0, sl
    50a6:	1a17      	subs	r7, r2, r0
    50a8:	42ba      	cmp	r2, r7
    50aa:	4192      	sbcs	r2, r2
    50ac:	1b0c      	subs	r4, r1, r4
    50ae:	4252      	negs	r2, r2
    50b0:	1aa4      	subs	r4, r4, r2
    50b2:	4698      	mov	r8, r3
    50b4:	e5ee      	b.n	4c94 <__aeabi_dsub+0x10c>
    50b6:	000d      	movs	r5, r1
    50b8:	4315      	orrs	r5, r2
    50ba:	d100      	bne.n	50be <__aeabi_dsub+0x536>
    50bc:	e76b      	b.n	4f96 <__aeabi_dsub+0x40e>
    50be:	4650      	mov	r0, sl
    50c0:	0767      	lsls	r7, r4, #29
    50c2:	08c0      	lsrs	r0, r0, #3
    50c4:	4307      	orrs	r7, r0
    50c6:	2080      	movs	r0, #128	; 0x80
    50c8:	08e4      	lsrs	r4, r4, #3
    50ca:	0300      	lsls	r0, r0, #12
    50cc:	4204      	tst	r4, r0
    50ce:	d007      	beq.n	50e0 <__aeabi_dsub+0x558>
    50d0:	08cd      	lsrs	r5, r1, #3
    50d2:	4205      	tst	r5, r0
    50d4:	d104      	bne.n	50e0 <__aeabi_dsub+0x558>
    50d6:	002c      	movs	r4, r5
    50d8:	4698      	mov	r8, r3
    50da:	08d7      	lsrs	r7, r2, #3
    50dc:	0749      	lsls	r1, r1, #29
    50de:	430f      	orrs	r7, r1
    50e0:	0f7b      	lsrs	r3, r7, #29
    50e2:	00e4      	lsls	r4, r4, #3
    50e4:	431c      	orrs	r4, r3
    50e6:	00ff      	lsls	r7, r7, #3
    50e8:	4e30      	ldr	r6, [pc, #192]	; (51ac <__aeabi_dsub+0x624>)
    50ea:	e5d3      	b.n	4c94 <__aeabi_dsub+0x10c>
    50ec:	4e2f      	ldr	r6, [pc, #188]	; (51ac <__aeabi_dsub+0x624>)
    50ee:	45b4      	cmp	ip, r6
    50f0:	d1b4      	bne.n	505c <__aeabi_dsub+0x4d4>
    50f2:	000c      	movs	r4, r1
    50f4:	0017      	movs	r7, r2
    50f6:	4666      	mov	r6, ip
    50f8:	e5cc      	b.n	4c94 <__aeabi_dsub+0x10c>
    50fa:	2700      	movs	r7, #0
    50fc:	2400      	movs	r4, #0
    50fe:	e5e8      	b.n	4cd2 <__aeabi_dsub+0x14a>
    5100:	2b00      	cmp	r3, #0
    5102:	d039      	beq.n	5178 <__aeabi_dsub+0x5f0>
    5104:	000b      	movs	r3, r1
    5106:	4313      	orrs	r3, r2
    5108:	d100      	bne.n	510c <__aeabi_dsub+0x584>
    510a:	e744      	b.n	4f96 <__aeabi_dsub+0x40e>
    510c:	08c0      	lsrs	r0, r0, #3
    510e:	0767      	lsls	r7, r4, #29
    5110:	4307      	orrs	r7, r0
    5112:	2080      	movs	r0, #128	; 0x80
    5114:	08e4      	lsrs	r4, r4, #3
    5116:	0300      	lsls	r0, r0, #12
    5118:	4204      	tst	r4, r0
    511a:	d0e1      	beq.n	50e0 <__aeabi_dsub+0x558>
    511c:	08cb      	lsrs	r3, r1, #3
    511e:	4203      	tst	r3, r0
    5120:	d1de      	bne.n	50e0 <__aeabi_dsub+0x558>
    5122:	08d7      	lsrs	r7, r2, #3
    5124:	0749      	lsls	r1, r1, #29
    5126:	430f      	orrs	r7, r1
    5128:	001c      	movs	r4, r3
    512a:	e7d9      	b.n	50e0 <__aeabi_dsub+0x558>
    512c:	2100      	movs	r1, #0
    512e:	e771      	b.n	5014 <__aeabi_dsub+0x48c>
    5130:	2500      	movs	r5, #0
    5132:	2700      	movs	r7, #0
    5134:	e5e9      	b.n	4d0a <__aeabi_dsub+0x182>
    5136:	002e      	movs	r6, r5
    5138:	0027      	movs	r7, r4
    513a:	3e20      	subs	r6, #32
    513c:	40f7      	lsrs	r7, r6
    513e:	2d20      	cmp	r5, #32
    5140:	d02f      	beq.n	51a2 <__aeabi_dsub+0x61a>
    5142:	2640      	movs	r6, #64	; 0x40
    5144:	1b75      	subs	r5, r6, r5
    5146:	40ac      	lsls	r4, r5
    5148:	4650      	mov	r0, sl
    514a:	4320      	orrs	r0, r4
    514c:	1e44      	subs	r4, r0, #1
    514e:	41a0      	sbcs	r0, r4
    5150:	2400      	movs	r4, #0
    5152:	4338      	orrs	r0, r7
    5154:	e6dc      	b.n	4f10 <__aeabi_dsub+0x388>
    5156:	2480      	movs	r4, #128	; 0x80
    5158:	2500      	movs	r5, #0
    515a:	0324      	lsls	r4, r4, #12
    515c:	4e13      	ldr	r6, [pc, #76]	; (51ac <__aeabi_dsub+0x624>)
    515e:	2700      	movs	r7, #0
    5160:	e5d3      	b.n	4d0a <__aeabi_dsub+0x182>
    5162:	4650      	mov	r0, sl
    5164:	4320      	orrs	r0, r4
    5166:	0007      	movs	r7, r0
    5168:	1e78      	subs	r0, r7, #1
    516a:	4187      	sbcs	r7, r0
    516c:	2400      	movs	r4, #0
    516e:	18bf      	adds	r7, r7, r2
    5170:	e760      	b.n	5034 <__aeabi_dsub+0x4ac>
    5172:	000c      	movs	r4, r1
    5174:	0017      	movs	r7, r2
    5176:	e58d      	b.n	4c94 <__aeabi_dsub+0x10c>
    5178:	000c      	movs	r4, r1
    517a:	0017      	movs	r7, r2
    517c:	4e0b      	ldr	r6, [pc, #44]	; (51ac <__aeabi_dsub+0x624>)
    517e:	e589      	b.n	4c94 <__aeabi_dsub+0x10c>
    5180:	001e      	movs	r6, r3
    5182:	0027      	movs	r7, r4
    5184:	3e20      	subs	r6, #32
    5186:	40f7      	lsrs	r7, r6
    5188:	2b20      	cmp	r3, #32
    518a:	d00c      	beq.n	51a6 <__aeabi_dsub+0x61e>
    518c:	2640      	movs	r6, #64	; 0x40
    518e:	1af3      	subs	r3, r6, r3
    5190:	409c      	lsls	r4, r3
    5192:	4650      	mov	r0, sl
    5194:	4320      	orrs	r0, r4
    5196:	1e44      	subs	r4, r0, #1
    5198:	41a0      	sbcs	r0, r4
    519a:	4307      	orrs	r7, r0
    519c:	2400      	movs	r4, #0
    519e:	18bf      	adds	r7, r7, r2
    51a0:	e748      	b.n	5034 <__aeabi_dsub+0x4ac>
    51a2:	2400      	movs	r4, #0
    51a4:	e7d0      	b.n	5148 <__aeabi_dsub+0x5c0>
    51a6:	2400      	movs	r4, #0
    51a8:	e7f3      	b.n	5192 <__aeabi_dsub+0x60a>
    51aa:	46c0      	nop			; (mov r8, r8)
    51ac:	000007ff 	.word	0x000007ff
    51b0:	ff7fffff 	.word	0xff7fffff

000051b4 <__aeabi_d2iz>:
    51b4:	b530      	push	{r4, r5, lr}
    51b6:	4d13      	ldr	r5, [pc, #76]	; (5204 <__aeabi_d2iz+0x50>)
    51b8:	030a      	lsls	r2, r1, #12
    51ba:	004b      	lsls	r3, r1, #1
    51bc:	0b12      	lsrs	r2, r2, #12
    51be:	0d5b      	lsrs	r3, r3, #21
    51c0:	0fc9      	lsrs	r1, r1, #31
    51c2:	2400      	movs	r4, #0
    51c4:	42ab      	cmp	r3, r5
    51c6:	dd10      	ble.n	51ea <__aeabi_d2iz+0x36>
    51c8:	4c0f      	ldr	r4, [pc, #60]	; (5208 <__aeabi_d2iz+0x54>)
    51ca:	42a3      	cmp	r3, r4
    51cc:	dc0f      	bgt.n	51ee <__aeabi_d2iz+0x3a>
    51ce:	2480      	movs	r4, #128	; 0x80
    51d0:	4d0e      	ldr	r5, [pc, #56]	; (520c <__aeabi_d2iz+0x58>)
    51d2:	0364      	lsls	r4, r4, #13
    51d4:	4322      	orrs	r2, r4
    51d6:	1aed      	subs	r5, r5, r3
    51d8:	2d1f      	cmp	r5, #31
    51da:	dd0b      	ble.n	51f4 <__aeabi_d2iz+0x40>
    51dc:	480c      	ldr	r0, [pc, #48]	; (5210 <__aeabi_d2iz+0x5c>)
    51de:	1ac3      	subs	r3, r0, r3
    51e0:	40da      	lsrs	r2, r3
    51e2:	4254      	negs	r4, r2
    51e4:	2900      	cmp	r1, #0
    51e6:	d100      	bne.n	51ea <__aeabi_d2iz+0x36>
    51e8:	0014      	movs	r4, r2
    51ea:	0020      	movs	r0, r4
    51ec:	bd30      	pop	{r4, r5, pc}
    51ee:	4b09      	ldr	r3, [pc, #36]	; (5214 <__aeabi_d2iz+0x60>)
    51f0:	18cc      	adds	r4, r1, r3
    51f2:	e7fa      	b.n	51ea <__aeabi_d2iz+0x36>
    51f4:	4c08      	ldr	r4, [pc, #32]	; (5218 <__aeabi_d2iz+0x64>)
    51f6:	40e8      	lsrs	r0, r5
    51f8:	46a4      	mov	ip, r4
    51fa:	4463      	add	r3, ip
    51fc:	409a      	lsls	r2, r3
    51fe:	4302      	orrs	r2, r0
    5200:	e7ef      	b.n	51e2 <__aeabi_d2iz+0x2e>
    5202:	46c0      	nop			; (mov r8, r8)
    5204:	000003fe 	.word	0x000003fe
    5208:	0000041d 	.word	0x0000041d
    520c:	00000433 	.word	0x00000433
    5210:	00000413 	.word	0x00000413
    5214:	7fffffff 	.word	0x7fffffff
    5218:	fffffbed 	.word	0xfffffbed

0000521c <__aeabi_ui2d>:
    521c:	b510      	push	{r4, lr}
    521e:	1e04      	subs	r4, r0, #0
    5220:	d028      	beq.n	5274 <__aeabi_ui2d+0x58>
    5222:	f000 f833 	bl	528c <__clzsi2>
    5226:	4b15      	ldr	r3, [pc, #84]	; (527c <__aeabi_ui2d+0x60>)
    5228:	4a15      	ldr	r2, [pc, #84]	; (5280 <__aeabi_ui2d+0x64>)
    522a:	1a1b      	subs	r3, r3, r0
    522c:	1ad2      	subs	r2, r2, r3
    522e:	2a1f      	cmp	r2, #31
    5230:	dd15      	ble.n	525e <__aeabi_ui2d+0x42>
    5232:	4a14      	ldr	r2, [pc, #80]	; (5284 <__aeabi_ui2d+0x68>)
    5234:	1ad2      	subs	r2, r2, r3
    5236:	4094      	lsls	r4, r2
    5238:	2200      	movs	r2, #0
    523a:	0324      	lsls	r4, r4, #12
    523c:	055b      	lsls	r3, r3, #21
    523e:	0b24      	lsrs	r4, r4, #12
    5240:	0d5b      	lsrs	r3, r3, #21
    5242:	2100      	movs	r1, #0
    5244:	0010      	movs	r0, r2
    5246:	0324      	lsls	r4, r4, #12
    5248:	0d0a      	lsrs	r2, r1, #20
    524a:	0b24      	lsrs	r4, r4, #12
    524c:	0512      	lsls	r2, r2, #20
    524e:	4322      	orrs	r2, r4
    5250:	4c0d      	ldr	r4, [pc, #52]	; (5288 <__aeabi_ui2d+0x6c>)
    5252:	051b      	lsls	r3, r3, #20
    5254:	4022      	ands	r2, r4
    5256:	4313      	orrs	r3, r2
    5258:	005b      	lsls	r3, r3, #1
    525a:	0859      	lsrs	r1, r3, #1
    525c:	bd10      	pop	{r4, pc}
    525e:	0021      	movs	r1, r4
    5260:	4091      	lsls	r1, r2
    5262:	000a      	movs	r2, r1
    5264:	210b      	movs	r1, #11
    5266:	1a08      	subs	r0, r1, r0
    5268:	40c4      	lsrs	r4, r0
    526a:	055b      	lsls	r3, r3, #21
    526c:	0324      	lsls	r4, r4, #12
    526e:	0b24      	lsrs	r4, r4, #12
    5270:	0d5b      	lsrs	r3, r3, #21
    5272:	e7e6      	b.n	5242 <__aeabi_ui2d+0x26>
    5274:	2300      	movs	r3, #0
    5276:	2400      	movs	r4, #0
    5278:	2200      	movs	r2, #0
    527a:	e7e2      	b.n	5242 <__aeabi_ui2d+0x26>
    527c:	0000041e 	.word	0x0000041e
    5280:	00000433 	.word	0x00000433
    5284:	00000413 	.word	0x00000413
    5288:	800fffff 	.word	0x800fffff

0000528c <__clzsi2>:
    528c:	211c      	movs	r1, #28
    528e:	2301      	movs	r3, #1
    5290:	041b      	lsls	r3, r3, #16
    5292:	4298      	cmp	r0, r3
    5294:	d301      	bcc.n	529a <__clzsi2+0xe>
    5296:	0c00      	lsrs	r0, r0, #16
    5298:	3910      	subs	r1, #16
    529a:	0a1b      	lsrs	r3, r3, #8
    529c:	4298      	cmp	r0, r3
    529e:	d301      	bcc.n	52a4 <__clzsi2+0x18>
    52a0:	0a00      	lsrs	r0, r0, #8
    52a2:	3908      	subs	r1, #8
    52a4:	091b      	lsrs	r3, r3, #4
    52a6:	4298      	cmp	r0, r3
    52a8:	d301      	bcc.n	52ae <__clzsi2+0x22>
    52aa:	0900      	lsrs	r0, r0, #4
    52ac:	3904      	subs	r1, #4
    52ae:	a202      	add	r2, pc, #8	; (adr r2, 52b8 <__clzsi2+0x2c>)
    52b0:	5c10      	ldrb	r0, [r2, r0]
    52b2:	1840      	adds	r0, r0, r1
    52b4:	4770      	bx	lr
    52b6:	46c0      	nop			; (mov r8, r8)
    52b8:	02020304 	.word	0x02020304
    52bc:	01010101 	.word	0x01010101
	...

000052c8 <__libc_init_array>:
    52c8:	b570      	push	{r4, r5, r6, lr}
    52ca:	2600      	movs	r6, #0
    52cc:	4d0c      	ldr	r5, [pc, #48]	; (5300 <__libc_init_array+0x38>)
    52ce:	4c0d      	ldr	r4, [pc, #52]	; (5304 <__libc_init_array+0x3c>)
    52d0:	1b64      	subs	r4, r4, r5
    52d2:	10a4      	asrs	r4, r4, #2
    52d4:	42a6      	cmp	r6, r4
    52d6:	d109      	bne.n	52ec <__libc_init_array+0x24>
    52d8:	2600      	movs	r6, #0
    52da:	f000 fe51 	bl	5f80 <_init>
    52de:	4d0a      	ldr	r5, [pc, #40]	; (5308 <__libc_init_array+0x40>)
    52e0:	4c0a      	ldr	r4, [pc, #40]	; (530c <__libc_init_array+0x44>)
    52e2:	1b64      	subs	r4, r4, r5
    52e4:	10a4      	asrs	r4, r4, #2
    52e6:	42a6      	cmp	r6, r4
    52e8:	d105      	bne.n	52f6 <__libc_init_array+0x2e>
    52ea:	bd70      	pop	{r4, r5, r6, pc}
    52ec:	00b3      	lsls	r3, r6, #2
    52ee:	58eb      	ldr	r3, [r5, r3]
    52f0:	4798      	blx	r3
    52f2:	3601      	adds	r6, #1
    52f4:	e7ee      	b.n	52d4 <__libc_init_array+0xc>
    52f6:	00b3      	lsls	r3, r6, #2
    52f8:	58eb      	ldr	r3, [r5, r3]
    52fa:	4798      	blx	r3
    52fc:	3601      	adds	r6, #1
    52fe:	e7f2      	b.n	52e6 <__libc_init_array+0x1e>
    5300:	00005f8c 	.word	0x00005f8c
    5304:	00005f8c 	.word	0x00005f8c
    5308:	00005f8c 	.word	0x00005f8c
    530c:	00005f90 	.word	0x00005f90

00005310 <memcpy>:
    5310:	2300      	movs	r3, #0
    5312:	b510      	push	{r4, lr}
    5314:	429a      	cmp	r2, r3
    5316:	d100      	bne.n	531a <memcpy+0xa>
    5318:	bd10      	pop	{r4, pc}
    531a:	5ccc      	ldrb	r4, [r1, r3]
    531c:	54c4      	strb	r4, [r0, r3]
    531e:	3301      	adds	r3, #1
    5320:	e7f8      	b.n	5314 <memcpy+0x4>

00005322 <memset>:
    5322:	0003      	movs	r3, r0
    5324:	1882      	adds	r2, r0, r2
    5326:	4293      	cmp	r3, r2
    5328:	d100      	bne.n	532c <memset+0xa>
    532a:	4770      	bx	lr
    532c:	7019      	strb	r1, [r3, #0]
    532e:	3301      	adds	r3, #1
    5330:	e7f9      	b.n	5326 <memset+0x4>
	...

00005334 <_puts_r>:
    5334:	b570      	push	{r4, r5, r6, lr}
    5336:	0005      	movs	r5, r0
    5338:	000e      	movs	r6, r1
    533a:	2800      	cmp	r0, #0
    533c:	d004      	beq.n	5348 <_puts_r+0x14>
    533e:	6983      	ldr	r3, [r0, #24]
    5340:	2b00      	cmp	r3, #0
    5342:	d101      	bne.n	5348 <_puts_r+0x14>
    5344:	f000 fada 	bl	58fc <__sinit>
    5348:	69ab      	ldr	r3, [r5, #24]
    534a:	68ac      	ldr	r4, [r5, #8]
    534c:	2b00      	cmp	r3, #0
    534e:	d102      	bne.n	5356 <_puts_r+0x22>
    5350:	0028      	movs	r0, r5
    5352:	f000 fad3 	bl	58fc <__sinit>
    5356:	4b24      	ldr	r3, [pc, #144]	; (53e8 <_puts_r+0xb4>)
    5358:	429c      	cmp	r4, r3
    535a:	d10f      	bne.n	537c <_puts_r+0x48>
    535c:	686c      	ldr	r4, [r5, #4]
    535e:	89a3      	ldrh	r3, [r4, #12]
    5360:	071b      	lsls	r3, r3, #28
    5362:	d502      	bpl.n	536a <_puts_r+0x36>
    5364:	6923      	ldr	r3, [r4, #16]
    5366:	2b00      	cmp	r3, #0
    5368:	d120      	bne.n	53ac <_puts_r+0x78>
    536a:	0021      	movs	r1, r4
    536c:	0028      	movs	r0, r5
    536e:	f000 f957 	bl	5620 <__swsetup_r>
    5372:	2800      	cmp	r0, #0
    5374:	d01a      	beq.n	53ac <_puts_r+0x78>
    5376:	2001      	movs	r0, #1
    5378:	4240      	negs	r0, r0
    537a:	bd70      	pop	{r4, r5, r6, pc}
    537c:	4b1b      	ldr	r3, [pc, #108]	; (53ec <_puts_r+0xb8>)
    537e:	429c      	cmp	r4, r3
    5380:	d101      	bne.n	5386 <_puts_r+0x52>
    5382:	68ac      	ldr	r4, [r5, #8]
    5384:	e7eb      	b.n	535e <_puts_r+0x2a>
    5386:	4b1a      	ldr	r3, [pc, #104]	; (53f0 <_puts_r+0xbc>)
    5388:	429c      	cmp	r4, r3
    538a:	d1e8      	bne.n	535e <_puts_r+0x2a>
    538c:	68ec      	ldr	r4, [r5, #12]
    538e:	e7e6      	b.n	535e <_puts_r+0x2a>
    5390:	3b01      	subs	r3, #1
    5392:	3601      	adds	r6, #1
    5394:	60a3      	str	r3, [r4, #8]
    5396:	2b00      	cmp	r3, #0
    5398:	da04      	bge.n	53a4 <_puts_r+0x70>
    539a:	69a2      	ldr	r2, [r4, #24]
    539c:	4293      	cmp	r3, r2
    539e:	db16      	blt.n	53ce <_puts_r+0x9a>
    53a0:	290a      	cmp	r1, #10
    53a2:	d014      	beq.n	53ce <_puts_r+0x9a>
    53a4:	6823      	ldr	r3, [r4, #0]
    53a6:	1c5a      	adds	r2, r3, #1
    53a8:	6022      	str	r2, [r4, #0]
    53aa:	7019      	strb	r1, [r3, #0]
    53ac:	7831      	ldrb	r1, [r6, #0]
    53ae:	68a3      	ldr	r3, [r4, #8]
    53b0:	2900      	cmp	r1, #0
    53b2:	d1ed      	bne.n	5390 <_puts_r+0x5c>
    53b4:	3b01      	subs	r3, #1
    53b6:	60a3      	str	r3, [r4, #8]
    53b8:	2b00      	cmp	r3, #0
    53ba:	da0f      	bge.n	53dc <_puts_r+0xa8>
    53bc:	0022      	movs	r2, r4
    53be:	310a      	adds	r1, #10
    53c0:	0028      	movs	r0, r5
    53c2:	f000 f8d7 	bl	5574 <__swbuf_r>
    53c6:	1c43      	adds	r3, r0, #1
    53c8:	d0d5      	beq.n	5376 <_puts_r+0x42>
    53ca:	200a      	movs	r0, #10
    53cc:	e7d5      	b.n	537a <_puts_r+0x46>
    53ce:	0022      	movs	r2, r4
    53d0:	0028      	movs	r0, r5
    53d2:	f000 f8cf 	bl	5574 <__swbuf_r>
    53d6:	1c43      	adds	r3, r0, #1
    53d8:	d1e8      	bne.n	53ac <_puts_r+0x78>
    53da:	e7cc      	b.n	5376 <_puts_r+0x42>
    53dc:	200a      	movs	r0, #10
    53de:	6823      	ldr	r3, [r4, #0]
    53e0:	1c5a      	adds	r2, r3, #1
    53e2:	6022      	str	r2, [r4, #0]
    53e4:	7018      	strb	r0, [r3, #0]
    53e6:	e7c8      	b.n	537a <_puts_r+0x46>
    53e8:	00005f40 	.word	0x00005f40
    53ec:	00005f60 	.word	0x00005f60
    53f0:	00005f20 	.word	0x00005f20

000053f4 <puts>:
    53f4:	b510      	push	{r4, lr}
    53f6:	4b03      	ldr	r3, [pc, #12]	; (5404 <puts+0x10>)
    53f8:	0001      	movs	r1, r0
    53fa:	6818      	ldr	r0, [r3, #0]
    53fc:	f7ff ff9a 	bl	5334 <_puts_r>
    5400:	bd10      	pop	{r4, pc}
    5402:	46c0      	nop			; (mov r8, r8)
    5404:	2000000c 	.word	0x2000000c

00005408 <setbuf>:
    5408:	424a      	negs	r2, r1
    540a:	414a      	adcs	r2, r1
    540c:	2380      	movs	r3, #128	; 0x80
    540e:	b510      	push	{r4, lr}
    5410:	0052      	lsls	r2, r2, #1
    5412:	00db      	lsls	r3, r3, #3
    5414:	f000 f802 	bl	541c <setvbuf>
    5418:	bd10      	pop	{r4, pc}
	...

0000541c <setvbuf>:
    541c:	b5f0      	push	{r4, r5, r6, r7, lr}
    541e:	001d      	movs	r5, r3
    5420:	4b4f      	ldr	r3, [pc, #316]	; (5560 <setvbuf+0x144>)
    5422:	b085      	sub	sp, #20
    5424:	681e      	ldr	r6, [r3, #0]
    5426:	0004      	movs	r4, r0
    5428:	000f      	movs	r7, r1
    542a:	9200      	str	r2, [sp, #0]
    542c:	2e00      	cmp	r6, #0
    542e:	d005      	beq.n	543c <setvbuf+0x20>
    5430:	69b3      	ldr	r3, [r6, #24]
    5432:	2b00      	cmp	r3, #0
    5434:	d102      	bne.n	543c <setvbuf+0x20>
    5436:	0030      	movs	r0, r6
    5438:	f000 fa60 	bl	58fc <__sinit>
    543c:	4b49      	ldr	r3, [pc, #292]	; (5564 <setvbuf+0x148>)
    543e:	429c      	cmp	r4, r3
    5440:	d150      	bne.n	54e4 <setvbuf+0xc8>
    5442:	6874      	ldr	r4, [r6, #4]
    5444:	9b00      	ldr	r3, [sp, #0]
    5446:	2b02      	cmp	r3, #2
    5448:	d005      	beq.n	5456 <setvbuf+0x3a>
    544a:	2b01      	cmp	r3, #1
    544c:	d900      	bls.n	5450 <setvbuf+0x34>
    544e:	e084      	b.n	555a <setvbuf+0x13e>
    5450:	2d00      	cmp	r5, #0
    5452:	da00      	bge.n	5456 <setvbuf+0x3a>
    5454:	e081      	b.n	555a <setvbuf+0x13e>
    5456:	0021      	movs	r1, r4
    5458:	0030      	movs	r0, r6
    545a:	f000 f9e1 	bl	5820 <_fflush_r>
    545e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5460:	2900      	cmp	r1, #0
    5462:	d008      	beq.n	5476 <setvbuf+0x5a>
    5464:	0023      	movs	r3, r4
    5466:	3344      	adds	r3, #68	; 0x44
    5468:	4299      	cmp	r1, r3
    546a:	d002      	beq.n	5472 <setvbuf+0x56>
    546c:	0030      	movs	r0, r6
    546e:	f000 fb4b 	bl	5b08 <_free_r>
    5472:	2300      	movs	r3, #0
    5474:	6363      	str	r3, [r4, #52]	; 0x34
    5476:	2300      	movs	r3, #0
    5478:	61a3      	str	r3, [r4, #24]
    547a:	6063      	str	r3, [r4, #4]
    547c:	89a3      	ldrh	r3, [r4, #12]
    547e:	061b      	lsls	r3, r3, #24
    5480:	d503      	bpl.n	548a <setvbuf+0x6e>
    5482:	6921      	ldr	r1, [r4, #16]
    5484:	0030      	movs	r0, r6
    5486:	f000 fb3f 	bl	5b08 <_free_r>
    548a:	89a3      	ldrh	r3, [r4, #12]
    548c:	4a36      	ldr	r2, [pc, #216]	; (5568 <setvbuf+0x14c>)
    548e:	4013      	ands	r3, r2
    5490:	81a3      	strh	r3, [r4, #12]
    5492:	9b00      	ldr	r3, [sp, #0]
    5494:	2b02      	cmp	r3, #2
    5496:	d05a      	beq.n	554e <setvbuf+0x132>
    5498:	ab03      	add	r3, sp, #12
    549a:	aa02      	add	r2, sp, #8
    549c:	0021      	movs	r1, r4
    549e:	0030      	movs	r0, r6
    54a0:	f000 fac2 	bl	5a28 <__swhatbuf_r>
    54a4:	89a3      	ldrh	r3, [r4, #12]
    54a6:	4318      	orrs	r0, r3
    54a8:	81a0      	strh	r0, [r4, #12]
    54aa:	2d00      	cmp	r5, #0
    54ac:	d124      	bne.n	54f8 <setvbuf+0xdc>
    54ae:	9d02      	ldr	r5, [sp, #8]
    54b0:	0028      	movs	r0, r5
    54b2:	f000 fb1f 	bl	5af4 <malloc>
    54b6:	9501      	str	r5, [sp, #4]
    54b8:	1e07      	subs	r7, r0, #0
    54ba:	d142      	bne.n	5542 <setvbuf+0x126>
    54bc:	9b02      	ldr	r3, [sp, #8]
    54be:	9301      	str	r3, [sp, #4]
    54c0:	42ab      	cmp	r3, r5
    54c2:	d139      	bne.n	5538 <setvbuf+0x11c>
    54c4:	2001      	movs	r0, #1
    54c6:	4240      	negs	r0, r0
    54c8:	2302      	movs	r3, #2
    54ca:	89a2      	ldrh	r2, [r4, #12]
    54cc:	4313      	orrs	r3, r2
    54ce:	81a3      	strh	r3, [r4, #12]
    54d0:	2300      	movs	r3, #0
    54d2:	60a3      	str	r3, [r4, #8]
    54d4:	0023      	movs	r3, r4
    54d6:	3347      	adds	r3, #71	; 0x47
    54d8:	6023      	str	r3, [r4, #0]
    54da:	6123      	str	r3, [r4, #16]
    54dc:	2301      	movs	r3, #1
    54de:	6163      	str	r3, [r4, #20]
    54e0:	b005      	add	sp, #20
    54e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54e4:	4b21      	ldr	r3, [pc, #132]	; (556c <setvbuf+0x150>)
    54e6:	429c      	cmp	r4, r3
    54e8:	d101      	bne.n	54ee <setvbuf+0xd2>
    54ea:	68b4      	ldr	r4, [r6, #8]
    54ec:	e7aa      	b.n	5444 <setvbuf+0x28>
    54ee:	4b20      	ldr	r3, [pc, #128]	; (5570 <setvbuf+0x154>)
    54f0:	429c      	cmp	r4, r3
    54f2:	d1a7      	bne.n	5444 <setvbuf+0x28>
    54f4:	68f4      	ldr	r4, [r6, #12]
    54f6:	e7a5      	b.n	5444 <setvbuf+0x28>
    54f8:	2f00      	cmp	r7, #0
    54fa:	d0d9      	beq.n	54b0 <setvbuf+0x94>
    54fc:	69b3      	ldr	r3, [r6, #24]
    54fe:	2b00      	cmp	r3, #0
    5500:	d102      	bne.n	5508 <setvbuf+0xec>
    5502:	0030      	movs	r0, r6
    5504:	f000 f9fa 	bl	58fc <__sinit>
    5508:	9b00      	ldr	r3, [sp, #0]
    550a:	2b01      	cmp	r3, #1
    550c:	d103      	bne.n	5516 <setvbuf+0xfa>
    550e:	89a3      	ldrh	r3, [r4, #12]
    5510:	9a00      	ldr	r2, [sp, #0]
    5512:	431a      	orrs	r2, r3
    5514:	81a2      	strh	r2, [r4, #12]
    5516:	2008      	movs	r0, #8
    5518:	89a3      	ldrh	r3, [r4, #12]
    551a:	6027      	str	r7, [r4, #0]
    551c:	6127      	str	r7, [r4, #16]
    551e:	6165      	str	r5, [r4, #20]
    5520:	4018      	ands	r0, r3
    5522:	d018      	beq.n	5556 <setvbuf+0x13a>
    5524:	2001      	movs	r0, #1
    5526:	4018      	ands	r0, r3
    5528:	2300      	movs	r3, #0
    552a:	4298      	cmp	r0, r3
    552c:	d011      	beq.n	5552 <setvbuf+0x136>
    552e:	426d      	negs	r5, r5
    5530:	60a3      	str	r3, [r4, #8]
    5532:	61a5      	str	r5, [r4, #24]
    5534:	0018      	movs	r0, r3
    5536:	e7d3      	b.n	54e0 <setvbuf+0xc4>
    5538:	9801      	ldr	r0, [sp, #4]
    553a:	f000 fadb 	bl	5af4 <malloc>
    553e:	1e07      	subs	r7, r0, #0
    5540:	d0c0      	beq.n	54c4 <setvbuf+0xa8>
    5542:	2380      	movs	r3, #128	; 0x80
    5544:	89a2      	ldrh	r2, [r4, #12]
    5546:	9d01      	ldr	r5, [sp, #4]
    5548:	4313      	orrs	r3, r2
    554a:	81a3      	strh	r3, [r4, #12]
    554c:	e7d6      	b.n	54fc <setvbuf+0xe0>
    554e:	2000      	movs	r0, #0
    5550:	e7ba      	b.n	54c8 <setvbuf+0xac>
    5552:	60a5      	str	r5, [r4, #8]
    5554:	e7c4      	b.n	54e0 <setvbuf+0xc4>
    5556:	60a0      	str	r0, [r4, #8]
    5558:	e7c2      	b.n	54e0 <setvbuf+0xc4>
    555a:	2001      	movs	r0, #1
    555c:	4240      	negs	r0, r0
    555e:	e7bf      	b.n	54e0 <setvbuf+0xc4>
    5560:	2000000c 	.word	0x2000000c
    5564:	00005f40 	.word	0x00005f40
    5568:	fffff35c 	.word	0xfffff35c
    556c:	00005f60 	.word	0x00005f60
    5570:	00005f20 	.word	0x00005f20

00005574 <__swbuf_r>:
    5574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5576:	0005      	movs	r5, r0
    5578:	000e      	movs	r6, r1
    557a:	0014      	movs	r4, r2
    557c:	2800      	cmp	r0, #0
    557e:	d004      	beq.n	558a <__swbuf_r+0x16>
    5580:	6983      	ldr	r3, [r0, #24]
    5582:	2b00      	cmp	r3, #0
    5584:	d101      	bne.n	558a <__swbuf_r+0x16>
    5586:	f000 f9b9 	bl	58fc <__sinit>
    558a:	4b22      	ldr	r3, [pc, #136]	; (5614 <__swbuf_r+0xa0>)
    558c:	429c      	cmp	r4, r3
    558e:	d12d      	bne.n	55ec <__swbuf_r+0x78>
    5590:	686c      	ldr	r4, [r5, #4]
    5592:	69a3      	ldr	r3, [r4, #24]
    5594:	60a3      	str	r3, [r4, #8]
    5596:	89a3      	ldrh	r3, [r4, #12]
    5598:	071b      	lsls	r3, r3, #28
    559a:	d531      	bpl.n	5600 <__swbuf_r+0x8c>
    559c:	6923      	ldr	r3, [r4, #16]
    559e:	2b00      	cmp	r3, #0
    55a0:	d02e      	beq.n	5600 <__swbuf_r+0x8c>
    55a2:	6823      	ldr	r3, [r4, #0]
    55a4:	6922      	ldr	r2, [r4, #16]
    55a6:	b2f7      	uxtb	r7, r6
    55a8:	1a98      	subs	r0, r3, r2
    55aa:	6963      	ldr	r3, [r4, #20]
    55ac:	b2f6      	uxtb	r6, r6
    55ae:	4298      	cmp	r0, r3
    55b0:	db05      	blt.n	55be <__swbuf_r+0x4a>
    55b2:	0021      	movs	r1, r4
    55b4:	0028      	movs	r0, r5
    55b6:	f000 f933 	bl	5820 <_fflush_r>
    55ba:	2800      	cmp	r0, #0
    55bc:	d126      	bne.n	560c <__swbuf_r+0x98>
    55be:	68a3      	ldr	r3, [r4, #8]
    55c0:	3001      	adds	r0, #1
    55c2:	3b01      	subs	r3, #1
    55c4:	60a3      	str	r3, [r4, #8]
    55c6:	6823      	ldr	r3, [r4, #0]
    55c8:	1c5a      	adds	r2, r3, #1
    55ca:	6022      	str	r2, [r4, #0]
    55cc:	701f      	strb	r7, [r3, #0]
    55ce:	6963      	ldr	r3, [r4, #20]
    55d0:	4298      	cmp	r0, r3
    55d2:	d004      	beq.n	55de <__swbuf_r+0x6a>
    55d4:	89a3      	ldrh	r3, [r4, #12]
    55d6:	07db      	lsls	r3, r3, #31
    55d8:	d51a      	bpl.n	5610 <__swbuf_r+0x9c>
    55da:	2e0a      	cmp	r6, #10
    55dc:	d118      	bne.n	5610 <__swbuf_r+0x9c>
    55de:	0021      	movs	r1, r4
    55e0:	0028      	movs	r0, r5
    55e2:	f000 f91d 	bl	5820 <_fflush_r>
    55e6:	2800      	cmp	r0, #0
    55e8:	d012      	beq.n	5610 <__swbuf_r+0x9c>
    55ea:	e00f      	b.n	560c <__swbuf_r+0x98>
    55ec:	4b0a      	ldr	r3, [pc, #40]	; (5618 <__swbuf_r+0xa4>)
    55ee:	429c      	cmp	r4, r3
    55f0:	d101      	bne.n	55f6 <__swbuf_r+0x82>
    55f2:	68ac      	ldr	r4, [r5, #8]
    55f4:	e7cd      	b.n	5592 <__swbuf_r+0x1e>
    55f6:	4b09      	ldr	r3, [pc, #36]	; (561c <__swbuf_r+0xa8>)
    55f8:	429c      	cmp	r4, r3
    55fa:	d1ca      	bne.n	5592 <__swbuf_r+0x1e>
    55fc:	68ec      	ldr	r4, [r5, #12]
    55fe:	e7c8      	b.n	5592 <__swbuf_r+0x1e>
    5600:	0021      	movs	r1, r4
    5602:	0028      	movs	r0, r5
    5604:	f000 f80c 	bl	5620 <__swsetup_r>
    5608:	2800      	cmp	r0, #0
    560a:	d0ca      	beq.n	55a2 <__swbuf_r+0x2e>
    560c:	2601      	movs	r6, #1
    560e:	4276      	negs	r6, r6
    5610:	0030      	movs	r0, r6
    5612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5614:	00005f40 	.word	0x00005f40
    5618:	00005f60 	.word	0x00005f60
    561c:	00005f20 	.word	0x00005f20

00005620 <__swsetup_r>:
    5620:	4b36      	ldr	r3, [pc, #216]	; (56fc <__swsetup_r+0xdc>)
    5622:	b570      	push	{r4, r5, r6, lr}
    5624:	681d      	ldr	r5, [r3, #0]
    5626:	0006      	movs	r6, r0
    5628:	000c      	movs	r4, r1
    562a:	2d00      	cmp	r5, #0
    562c:	d005      	beq.n	563a <__swsetup_r+0x1a>
    562e:	69ab      	ldr	r3, [r5, #24]
    5630:	2b00      	cmp	r3, #0
    5632:	d102      	bne.n	563a <__swsetup_r+0x1a>
    5634:	0028      	movs	r0, r5
    5636:	f000 f961 	bl	58fc <__sinit>
    563a:	4b31      	ldr	r3, [pc, #196]	; (5700 <__swsetup_r+0xe0>)
    563c:	429c      	cmp	r4, r3
    563e:	d10f      	bne.n	5660 <__swsetup_r+0x40>
    5640:	686c      	ldr	r4, [r5, #4]
    5642:	230c      	movs	r3, #12
    5644:	5ee2      	ldrsh	r2, [r4, r3]
    5646:	b293      	uxth	r3, r2
    5648:	0719      	lsls	r1, r3, #28
    564a:	d42d      	bmi.n	56a8 <__swsetup_r+0x88>
    564c:	06d9      	lsls	r1, r3, #27
    564e:	d411      	bmi.n	5674 <__swsetup_r+0x54>
    5650:	2309      	movs	r3, #9
    5652:	2001      	movs	r0, #1
    5654:	6033      	str	r3, [r6, #0]
    5656:	3337      	adds	r3, #55	; 0x37
    5658:	4313      	orrs	r3, r2
    565a:	81a3      	strh	r3, [r4, #12]
    565c:	4240      	negs	r0, r0
    565e:	bd70      	pop	{r4, r5, r6, pc}
    5660:	4b28      	ldr	r3, [pc, #160]	; (5704 <__swsetup_r+0xe4>)
    5662:	429c      	cmp	r4, r3
    5664:	d101      	bne.n	566a <__swsetup_r+0x4a>
    5666:	68ac      	ldr	r4, [r5, #8]
    5668:	e7eb      	b.n	5642 <__swsetup_r+0x22>
    566a:	4b27      	ldr	r3, [pc, #156]	; (5708 <__swsetup_r+0xe8>)
    566c:	429c      	cmp	r4, r3
    566e:	d1e8      	bne.n	5642 <__swsetup_r+0x22>
    5670:	68ec      	ldr	r4, [r5, #12]
    5672:	e7e6      	b.n	5642 <__swsetup_r+0x22>
    5674:	075b      	lsls	r3, r3, #29
    5676:	d513      	bpl.n	56a0 <__swsetup_r+0x80>
    5678:	6b61      	ldr	r1, [r4, #52]	; 0x34
    567a:	2900      	cmp	r1, #0
    567c:	d008      	beq.n	5690 <__swsetup_r+0x70>
    567e:	0023      	movs	r3, r4
    5680:	3344      	adds	r3, #68	; 0x44
    5682:	4299      	cmp	r1, r3
    5684:	d002      	beq.n	568c <__swsetup_r+0x6c>
    5686:	0030      	movs	r0, r6
    5688:	f000 fa3e 	bl	5b08 <_free_r>
    568c:	2300      	movs	r3, #0
    568e:	6363      	str	r3, [r4, #52]	; 0x34
    5690:	2224      	movs	r2, #36	; 0x24
    5692:	89a3      	ldrh	r3, [r4, #12]
    5694:	4393      	bics	r3, r2
    5696:	81a3      	strh	r3, [r4, #12]
    5698:	2300      	movs	r3, #0
    569a:	6063      	str	r3, [r4, #4]
    569c:	6923      	ldr	r3, [r4, #16]
    569e:	6023      	str	r3, [r4, #0]
    56a0:	2308      	movs	r3, #8
    56a2:	89a2      	ldrh	r2, [r4, #12]
    56a4:	4313      	orrs	r3, r2
    56a6:	81a3      	strh	r3, [r4, #12]
    56a8:	6923      	ldr	r3, [r4, #16]
    56aa:	2b00      	cmp	r3, #0
    56ac:	d10b      	bne.n	56c6 <__swsetup_r+0xa6>
    56ae:	21a0      	movs	r1, #160	; 0xa0
    56b0:	2280      	movs	r2, #128	; 0x80
    56b2:	89a3      	ldrh	r3, [r4, #12]
    56b4:	0089      	lsls	r1, r1, #2
    56b6:	0092      	lsls	r2, r2, #2
    56b8:	400b      	ands	r3, r1
    56ba:	4293      	cmp	r3, r2
    56bc:	d003      	beq.n	56c6 <__swsetup_r+0xa6>
    56be:	0021      	movs	r1, r4
    56c0:	0030      	movs	r0, r6
    56c2:	f000 f9d9 	bl	5a78 <__smakebuf_r>
    56c6:	2301      	movs	r3, #1
    56c8:	89a2      	ldrh	r2, [r4, #12]
    56ca:	4013      	ands	r3, r2
    56cc:	d011      	beq.n	56f2 <__swsetup_r+0xd2>
    56ce:	2300      	movs	r3, #0
    56d0:	60a3      	str	r3, [r4, #8]
    56d2:	6963      	ldr	r3, [r4, #20]
    56d4:	425b      	negs	r3, r3
    56d6:	61a3      	str	r3, [r4, #24]
    56d8:	2000      	movs	r0, #0
    56da:	6923      	ldr	r3, [r4, #16]
    56dc:	4283      	cmp	r3, r0
    56de:	d1be      	bne.n	565e <__swsetup_r+0x3e>
    56e0:	230c      	movs	r3, #12
    56e2:	5ee2      	ldrsh	r2, [r4, r3]
    56e4:	0613      	lsls	r3, r2, #24
    56e6:	d5ba      	bpl.n	565e <__swsetup_r+0x3e>
    56e8:	2340      	movs	r3, #64	; 0x40
    56ea:	4313      	orrs	r3, r2
    56ec:	81a3      	strh	r3, [r4, #12]
    56ee:	3801      	subs	r0, #1
    56f0:	e7b5      	b.n	565e <__swsetup_r+0x3e>
    56f2:	0792      	lsls	r2, r2, #30
    56f4:	d400      	bmi.n	56f8 <__swsetup_r+0xd8>
    56f6:	6963      	ldr	r3, [r4, #20]
    56f8:	60a3      	str	r3, [r4, #8]
    56fa:	e7ed      	b.n	56d8 <__swsetup_r+0xb8>
    56fc:	2000000c 	.word	0x2000000c
    5700:	00005f40 	.word	0x00005f40
    5704:	00005f60 	.word	0x00005f60
    5708:	00005f20 	.word	0x00005f20

0000570c <__sflush_r>:
    570c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    570e:	898a      	ldrh	r2, [r1, #12]
    5710:	0005      	movs	r5, r0
    5712:	000c      	movs	r4, r1
    5714:	0713      	lsls	r3, r2, #28
    5716:	d460      	bmi.n	57da <__sflush_r+0xce>
    5718:	684b      	ldr	r3, [r1, #4]
    571a:	2b00      	cmp	r3, #0
    571c:	dc04      	bgt.n	5728 <__sflush_r+0x1c>
    571e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    5720:	2b00      	cmp	r3, #0
    5722:	dc01      	bgt.n	5728 <__sflush_r+0x1c>
    5724:	2000      	movs	r0, #0
    5726:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5728:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    572a:	2f00      	cmp	r7, #0
    572c:	d0fa      	beq.n	5724 <__sflush_r+0x18>
    572e:	2300      	movs	r3, #0
    5730:	682e      	ldr	r6, [r5, #0]
    5732:	602b      	str	r3, [r5, #0]
    5734:	2380      	movs	r3, #128	; 0x80
    5736:	015b      	lsls	r3, r3, #5
    5738:	401a      	ands	r2, r3
    573a:	d034      	beq.n	57a6 <__sflush_r+0x9a>
    573c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    573e:	89a3      	ldrh	r3, [r4, #12]
    5740:	075b      	lsls	r3, r3, #29
    5742:	d506      	bpl.n	5752 <__sflush_r+0x46>
    5744:	6863      	ldr	r3, [r4, #4]
    5746:	1ac0      	subs	r0, r0, r3
    5748:	6b63      	ldr	r3, [r4, #52]	; 0x34
    574a:	2b00      	cmp	r3, #0
    574c:	d001      	beq.n	5752 <__sflush_r+0x46>
    574e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5750:	1ac0      	subs	r0, r0, r3
    5752:	0002      	movs	r2, r0
    5754:	6a21      	ldr	r1, [r4, #32]
    5756:	2300      	movs	r3, #0
    5758:	0028      	movs	r0, r5
    575a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    575c:	47b8      	blx	r7
    575e:	89a1      	ldrh	r1, [r4, #12]
    5760:	1c43      	adds	r3, r0, #1
    5762:	d106      	bne.n	5772 <__sflush_r+0x66>
    5764:	682b      	ldr	r3, [r5, #0]
    5766:	2b1d      	cmp	r3, #29
    5768:	d831      	bhi.n	57ce <__sflush_r+0xc2>
    576a:	4a2c      	ldr	r2, [pc, #176]	; (581c <__sflush_r+0x110>)
    576c:	40da      	lsrs	r2, r3
    576e:	07d3      	lsls	r3, r2, #31
    5770:	d52d      	bpl.n	57ce <__sflush_r+0xc2>
    5772:	2300      	movs	r3, #0
    5774:	6063      	str	r3, [r4, #4]
    5776:	6923      	ldr	r3, [r4, #16]
    5778:	6023      	str	r3, [r4, #0]
    577a:	04cb      	lsls	r3, r1, #19
    577c:	d505      	bpl.n	578a <__sflush_r+0x7e>
    577e:	1c43      	adds	r3, r0, #1
    5780:	d102      	bne.n	5788 <__sflush_r+0x7c>
    5782:	682b      	ldr	r3, [r5, #0]
    5784:	2b00      	cmp	r3, #0
    5786:	d100      	bne.n	578a <__sflush_r+0x7e>
    5788:	6560      	str	r0, [r4, #84]	; 0x54
    578a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    578c:	602e      	str	r6, [r5, #0]
    578e:	2900      	cmp	r1, #0
    5790:	d0c8      	beq.n	5724 <__sflush_r+0x18>
    5792:	0023      	movs	r3, r4
    5794:	3344      	adds	r3, #68	; 0x44
    5796:	4299      	cmp	r1, r3
    5798:	d002      	beq.n	57a0 <__sflush_r+0x94>
    579a:	0028      	movs	r0, r5
    579c:	f000 f9b4 	bl	5b08 <_free_r>
    57a0:	2000      	movs	r0, #0
    57a2:	6360      	str	r0, [r4, #52]	; 0x34
    57a4:	e7bf      	b.n	5726 <__sflush_r+0x1a>
    57a6:	2301      	movs	r3, #1
    57a8:	6a21      	ldr	r1, [r4, #32]
    57aa:	0028      	movs	r0, r5
    57ac:	47b8      	blx	r7
    57ae:	1c43      	adds	r3, r0, #1
    57b0:	d1c5      	bne.n	573e <__sflush_r+0x32>
    57b2:	682b      	ldr	r3, [r5, #0]
    57b4:	2b00      	cmp	r3, #0
    57b6:	d0c2      	beq.n	573e <__sflush_r+0x32>
    57b8:	2b1d      	cmp	r3, #29
    57ba:	d001      	beq.n	57c0 <__sflush_r+0xb4>
    57bc:	2b16      	cmp	r3, #22
    57be:	d101      	bne.n	57c4 <__sflush_r+0xb8>
    57c0:	602e      	str	r6, [r5, #0]
    57c2:	e7af      	b.n	5724 <__sflush_r+0x18>
    57c4:	2340      	movs	r3, #64	; 0x40
    57c6:	89a2      	ldrh	r2, [r4, #12]
    57c8:	4313      	orrs	r3, r2
    57ca:	81a3      	strh	r3, [r4, #12]
    57cc:	e7ab      	b.n	5726 <__sflush_r+0x1a>
    57ce:	2340      	movs	r3, #64	; 0x40
    57d0:	430b      	orrs	r3, r1
    57d2:	2001      	movs	r0, #1
    57d4:	81a3      	strh	r3, [r4, #12]
    57d6:	4240      	negs	r0, r0
    57d8:	e7a5      	b.n	5726 <__sflush_r+0x1a>
    57da:	690f      	ldr	r7, [r1, #16]
    57dc:	2f00      	cmp	r7, #0
    57de:	d0a1      	beq.n	5724 <__sflush_r+0x18>
    57e0:	680b      	ldr	r3, [r1, #0]
    57e2:	600f      	str	r7, [r1, #0]
    57e4:	1bdb      	subs	r3, r3, r7
    57e6:	9301      	str	r3, [sp, #4]
    57e8:	2300      	movs	r3, #0
    57ea:	0792      	lsls	r2, r2, #30
    57ec:	d100      	bne.n	57f0 <__sflush_r+0xe4>
    57ee:	694b      	ldr	r3, [r1, #20]
    57f0:	60a3      	str	r3, [r4, #8]
    57f2:	9b01      	ldr	r3, [sp, #4]
    57f4:	2b00      	cmp	r3, #0
    57f6:	dc00      	bgt.n	57fa <__sflush_r+0xee>
    57f8:	e794      	b.n	5724 <__sflush_r+0x18>
    57fa:	9b01      	ldr	r3, [sp, #4]
    57fc:	003a      	movs	r2, r7
    57fe:	6a21      	ldr	r1, [r4, #32]
    5800:	0028      	movs	r0, r5
    5802:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    5804:	47b0      	blx	r6
    5806:	2800      	cmp	r0, #0
    5808:	dc03      	bgt.n	5812 <__sflush_r+0x106>
    580a:	2340      	movs	r3, #64	; 0x40
    580c:	89a2      	ldrh	r2, [r4, #12]
    580e:	4313      	orrs	r3, r2
    5810:	e7df      	b.n	57d2 <__sflush_r+0xc6>
    5812:	9b01      	ldr	r3, [sp, #4]
    5814:	183f      	adds	r7, r7, r0
    5816:	1a1b      	subs	r3, r3, r0
    5818:	9301      	str	r3, [sp, #4]
    581a:	e7ea      	b.n	57f2 <__sflush_r+0xe6>
    581c:	20400001 	.word	0x20400001

00005820 <_fflush_r>:
    5820:	690b      	ldr	r3, [r1, #16]
    5822:	b570      	push	{r4, r5, r6, lr}
    5824:	0005      	movs	r5, r0
    5826:	000c      	movs	r4, r1
    5828:	2b00      	cmp	r3, #0
    582a:	d101      	bne.n	5830 <_fflush_r+0x10>
    582c:	2000      	movs	r0, #0
    582e:	bd70      	pop	{r4, r5, r6, pc}
    5830:	2800      	cmp	r0, #0
    5832:	d004      	beq.n	583e <_fflush_r+0x1e>
    5834:	6983      	ldr	r3, [r0, #24]
    5836:	2b00      	cmp	r3, #0
    5838:	d101      	bne.n	583e <_fflush_r+0x1e>
    583a:	f000 f85f 	bl	58fc <__sinit>
    583e:	4b0b      	ldr	r3, [pc, #44]	; (586c <_fflush_r+0x4c>)
    5840:	429c      	cmp	r4, r3
    5842:	d109      	bne.n	5858 <_fflush_r+0x38>
    5844:	686c      	ldr	r4, [r5, #4]
    5846:	220c      	movs	r2, #12
    5848:	5ea3      	ldrsh	r3, [r4, r2]
    584a:	2b00      	cmp	r3, #0
    584c:	d0ee      	beq.n	582c <_fflush_r+0xc>
    584e:	0021      	movs	r1, r4
    5850:	0028      	movs	r0, r5
    5852:	f7ff ff5b 	bl	570c <__sflush_r>
    5856:	e7ea      	b.n	582e <_fflush_r+0xe>
    5858:	4b05      	ldr	r3, [pc, #20]	; (5870 <_fflush_r+0x50>)
    585a:	429c      	cmp	r4, r3
    585c:	d101      	bne.n	5862 <_fflush_r+0x42>
    585e:	68ac      	ldr	r4, [r5, #8]
    5860:	e7f1      	b.n	5846 <_fflush_r+0x26>
    5862:	4b04      	ldr	r3, [pc, #16]	; (5874 <_fflush_r+0x54>)
    5864:	429c      	cmp	r4, r3
    5866:	d1ee      	bne.n	5846 <_fflush_r+0x26>
    5868:	68ec      	ldr	r4, [r5, #12]
    586a:	e7ec      	b.n	5846 <_fflush_r+0x26>
    586c:	00005f40 	.word	0x00005f40
    5870:	00005f60 	.word	0x00005f60
    5874:	00005f20 	.word	0x00005f20

00005878 <_cleanup_r>:
    5878:	b510      	push	{r4, lr}
    587a:	4902      	ldr	r1, [pc, #8]	; (5884 <_cleanup_r+0xc>)
    587c:	f000 f8b2 	bl	59e4 <_fwalk_reent>
    5880:	bd10      	pop	{r4, pc}
    5882:	46c0      	nop			; (mov r8, r8)
    5884:	00005821 	.word	0x00005821

00005888 <std.isra.0>:
    5888:	2300      	movs	r3, #0
    588a:	b510      	push	{r4, lr}
    588c:	0004      	movs	r4, r0
    588e:	6003      	str	r3, [r0, #0]
    5890:	6043      	str	r3, [r0, #4]
    5892:	6083      	str	r3, [r0, #8]
    5894:	8181      	strh	r1, [r0, #12]
    5896:	6643      	str	r3, [r0, #100]	; 0x64
    5898:	81c2      	strh	r2, [r0, #14]
    589a:	6103      	str	r3, [r0, #16]
    589c:	6143      	str	r3, [r0, #20]
    589e:	6183      	str	r3, [r0, #24]
    58a0:	0019      	movs	r1, r3
    58a2:	2208      	movs	r2, #8
    58a4:	305c      	adds	r0, #92	; 0x5c
    58a6:	f7ff fd3c 	bl	5322 <memset>
    58aa:	4b05      	ldr	r3, [pc, #20]	; (58c0 <std.isra.0+0x38>)
    58ac:	6224      	str	r4, [r4, #32]
    58ae:	6263      	str	r3, [r4, #36]	; 0x24
    58b0:	4b04      	ldr	r3, [pc, #16]	; (58c4 <std.isra.0+0x3c>)
    58b2:	62a3      	str	r3, [r4, #40]	; 0x28
    58b4:	4b04      	ldr	r3, [pc, #16]	; (58c8 <std.isra.0+0x40>)
    58b6:	62e3      	str	r3, [r4, #44]	; 0x2c
    58b8:	4b04      	ldr	r3, [pc, #16]	; (58cc <std.isra.0+0x44>)
    58ba:	6323      	str	r3, [r4, #48]	; 0x30
    58bc:	bd10      	pop	{r4, pc}
    58be:	46c0      	nop			; (mov r8, r8)
    58c0:	00005c7d 	.word	0x00005c7d
    58c4:	00005ca5 	.word	0x00005ca5
    58c8:	00005cdd 	.word	0x00005cdd
    58cc:	00005d09 	.word	0x00005d09

000058d0 <__sfmoreglue>:
    58d0:	b570      	push	{r4, r5, r6, lr}
    58d2:	2568      	movs	r5, #104	; 0x68
    58d4:	1e4a      	subs	r2, r1, #1
    58d6:	4355      	muls	r5, r2
    58d8:	000e      	movs	r6, r1
    58da:	0029      	movs	r1, r5
    58dc:	3174      	adds	r1, #116	; 0x74
    58de:	f000 f95d 	bl	5b9c <_malloc_r>
    58e2:	1e04      	subs	r4, r0, #0
    58e4:	d008      	beq.n	58f8 <__sfmoreglue+0x28>
    58e6:	2100      	movs	r1, #0
    58e8:	002a      	movs	r2, r5
    58ea:	6001      	str	r1, [r0, #0]
    58ec:	6046      	str	r6, [r0, #4]
    58ee:	300c      	adds	r0, #12
    58f0:	60a0      	str	r0, [r4, #8]
    58f2:	3268      	adds	r2, #104	; 0x68
    58f4:	f7ff fd15 	bl	5322 <memset>
    58f8:	0020      	movs	r0, r4
    58fa:	bd70      	pop	{r4, r5, r6, pc}

000058fc <__sinit>:
    58fc:	6983      	ldr	r3, [r0, #24]
    58fe:	b513      	push	{r0, r1, r4, lr}
    5900:	0004      	movs	r4, r0
    5902:	2b00      	cmp	r3, #0
    5904:	d128      	bne.n	5958 <__sinit+0x5c>
    5906:	6483      	str	r3, [r0, #72]	; 0x48
    5908:	64c3      	str	r3, [r0, #76]	; 0x4c
    590a:	6503      	str	r3, [r0, #80]	; 0x50
    590c:	4b13      	ldr	r3, [pc, #76]	; (595c <__sinit+0x60>)
    590e:	4a14      	ldr	r2, [pc, #80]	; (5960 <__sinit+0x64>)
    5910:	681b      	ldr	r3, [r3, #0]
    5912:	6282      	str	r2, [r0, #40]	; 0x28
    5914:	9301      	str	r3, [sp, #4]
    5916:	4298      	cmp	r0, r3
    5918:	d101      	bne.n	591e <__sinit+0x22>
    591a:	2301      	movs	r3, #1
    591c:	6183      	str	r3, [r0, #24]
    591e:	0020      	movs	r0, r4
    5920:	f000 f820 	bl	5964 <__sfp>
    5924:	6060      	str	r0, [r4, #4]
    5926:	0020      	movs	r0, r4
    5928:	f000 f81c 	bl	5964 <__sfp>
    592c:	60a0      	str	r0, [r4, #8]
    592e:	0020      	movs	r0, r4
    5930:	f000 f818 	bl	5964 <__sfp>
    5934:	2200      	movs	r2, #0
    5936:	60e0      	str	r0, [r4, #12]
    5938:	2104      	movs	r1, #4
    593a:	6860      	ldr	r0, [r4, #4]
    593c:	f7ff ffa4 	bl	5888 <std.isra.0>
    5940:	2201      	movs	r2, #1
    5942:	2109      	movs	r1, #9
    5944:	68a0      	ldr	r0, [r4, #8]
    5946:	f7ff ff9f 	bl	5888 <std.isra.0>
    594a:	2202      	movs	r2, #2
    594c:	2112      	movs	r1, #18
    594e:	68e0      	ldr	r0, [r4, #12]
    5950:	f7ff ff9a 	bl	5888 <std.isra.0>
    5954:	2301      	movs	r3, #1
    5956:	61a3      	str	r3, [r4, #24]
    5958:	bd13      	pop	{r0, r1, r4, pc}
    595a:	46c0      	nop			; (mov r8, r8)
    595c:	00005f1c 	.word	0x00005f1c
    5960:	00005879 	.word	0x00005879

00005964 <__sfp>:
    5964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5966:	4b1e      	ldr	r3, [pc, #120]	; (59e0 <__sfp+0x7c>)
    5968:	0007      	movs	r7, r0
    596a:	681e      	ldr	r6, [r3, #0]
    596c:	69b3      	ldr	r3, [r6, #24]
    596e:	2b00      	cmp	r3, #0
    5970:	d102      	bne.n	5978 <__sfp+0x14>
    5972:	0030      	movs	r0, r6
    5974:	f7ff ffc2 	bl	58fc <__sinit>
    5978:	3648      	adds	r6, #72	; 0x48
    597a:	68b4      	ldr	r4, [r6, #8]
    597c:	6873      	ldr	r3, [r6, #4]
    597e:	3b01      	subs	r3, #1
    5980:	d504      	bpl.n	598c <__sfp+0x28>
    5982:	6833      	ldr	r3, [r6, #0]
    5984:	2b00      	cmp	r3, #0
    5986:	d007      	beq.n	5998 <__sfp+0x34>
    5988:	6836      	ldr	r6, [r6, #0]
    598a:	e7f6      	b.n	597a <__sfp+0x16>
    598c:	220c      	movs	r2, #12
    598e:	5ea5      	ldrsh	r5, [r4, r2]
    5990:	2d00      	cmp	r5, #0
    5992:	d00d      	beq.n	59b0 <__sfp+0x4c>
    5994:	3468      	adds	r4, #104	; 0x68
    5996:	e7f2      	b.n	597e <__sfp+0x1a>
    5998:	2104      	movs	r1, #4
    599a:	0038      	movs	r0, r7
    599c:	f7ff ff98 	bl	58d0 <__sfmoreglue>
    59a0:	6030      	str	r0, [r6, #0]
    59a2:	2800      	cmp	r0, #0
    59a4:	d1f0      	bne.n	5988 <__sfp+0x24>
    59a6:	230c      	movs	r3, #12
    59a8:	0004      	movs	r4, r0
    59aa:	603b      	str	r3, [r7, #0]
    59ac:	0020      	movs	r0, r4
    59ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    59b0:	2301      	movs	r3, #1
    59b2:	0020      	movs	r0, r4
    59b4:	425b      	negs	r3, r3
    59b6:	81e3      	strh	r3, [r4, #14]
    59b8:	3302      	adds	r3, #2
    59ba:	81a3      	strh	r3, [r4, #12]
    59bc:	6665      	str	r5, [r4, #100]	; 0x64
    59be:	6025      	str	r5, [r4, #0]
    59c0:	60a5      	str	r5, [r4, #8]
    59c2:	6065      	str	r5, [r4, #4]
    59c4:	6125      	str	r5, [r4, #16]
    59c6:	6165      	str	r5, [r4, #20]
    59c8:	61a5      	str	r5, [r4, #24]
    59ca:	2208      	movs	r2, #8
    59cc:	0029      	movs	r1, r5
    59ce:	305c      	adds	r0, #92	; 0x5c
    59d0:	f7ff fca7 	bl	5322 <memset>
    59d4:	6365      	str	r5, [r4, #52]	; 0x34
    59d6:	63a5      	str	r5, [r4, #56]	; 0x38
    59d8:	64a5      	str	r5, [r4, #72]	; 0x48
    59da:	64e5      	str	r5, [r4, #76]	; 0x4c
    59dc:	e7e6      	b.n	59ac <__sfp+0x48>
    59de:	46c0      	nop			; (mov r8, r8)
    59e0:	00005f1c 	.word	0x00005f1c

000059e4 <_fwalk_reent>:
    59e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    59e6:	0004      	movs	r4, r0
    59e8:	0007      	movs	r7, r0
    59ea:	2600      	movs	r6, #0
    59ec:	9101      	str	r1, [sp, #4]
    59ee:	3448      	adds	r4, #72	; 0x48
    59f0:	2c00      	cmp	r4, #0
    59f2:	d101      	bne.n	59f8 <_fwalk_reent+0x14>
    59f4:	0030      	movs	r0, r6
    59f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    59f8:	6863      	ldr	r3, [r4, #4]
    59fa:	68a5      	ldr	r5, [r4, #8]
    59fc:	9300      	str	r3, [sp, #0]
    59fe:	9b00      	ldr	r3, [sp, #0]
    5a00:	3b01      	subs	r3, #1
    5a02:	9300      	str	r3, [sp, #0]
    5a04:	d501      	bpl.n	5a0a <_fwalk_reent+0x26>
    5a06:	6824      	ldr	r4, [r4, #0]
    5a08:	e7f2      	b.n	59f0 <_fwalk_reent+0xc>
    5a0a:	89ab      	ldrh	r3, [r5, #12]
    5a0c:	2b01      	cmp	r3, #1
    5a0e:	d908      	bls.n	5a22 <_fwalk_reent+0x3e>
    5a10:	220e      	movs	r2, #14
    5a12:	5eab      	ldrsh	r3, [r5, r2]
    5a14:	3301      	adds	r3, #1
    5a16:	d004      	beq.n	5a22 <_fwalk_reent+0x3e>
    5a18:	0029      	movs	r1, r5
    5a1a:	0038      	movs	r0, r7
    5a1c:	9b01      	ldr	r3, [sp, #4]
    5a1e:	4798      	blx	r3
    5a20:	4306      	orrs	r6, r0
    5a22:	3568      	adds	r5, #104	; 0x68
    5a24:	e7eb      	b.n	59fe <_fwalk_reent+0x1a>
	...

00005a28 <__swhatbuf_r>:
    5a28:	b570      	push	{r4, r5, r6, lr}
    5a2a:	000e      	movs	r6, r1
    5a2c:	001d      	movs	r5, r3
    5a2e:	230e      	movs	r3, #14
    5a30:	5ec9      	ldrsh	r1, [r1, r3]
    5a32:	b090      	sub	sp, #64	; 0x40
    5a34:	0014      	movs	r4, r2
    5a36:	2900      	cmp	r1, #0
    5a38:	da07      	bge.n	5a4a <__swhatbuf_r+0x22>
    5a3a:	2300      	movs	r3, #0
    5a3c:	602b      	str	r3, [r5, #0]
    5a3e:	89b3      	ldrh	r3, [r6, #12]
    5a40:	061b      	lsls	r3, r3, #24
    5a42:	d411      	bmi.n	5a68 <__swhatbuf_r+0x40>
    5a44:	2380      	movs	r3, #128	; 0x80
    5a46:	00db      	lsls	r3, r3, #3
    5a48:	e00f      	b.n	5a6a <__swhatbuf_r+0x42>
    5a4a:	aa01      	add	r2, sp, #4
    5a4c:	f000 f988 	bl	5d60 <_fstat_r>
    5a50:	2800      	cmp	r0, #0
    5a52:	dbf2      	blt.n	5a3a <__swhatbuf_r+0x12>
    5a54:	22f0      	movs	r2, #240	; 0xf0
    5a56:	9b02      	ldr	r3, [sp, #8]
    5a58:	0212      	lsls	r2, r2, #8
    5a5a:	4013      	ands	r3, r2
    5a5c:	4a05      	ldr	r2, [pc, #20]	; (5a74 <__swhatbuf_r+0x4c>)
    5a5e:	189b      	adds	r3, r3, r2
    5a60:	425a      	negs	r2, r3
    5a62:	4153      	adcs	r3, r2
    5a64:	602b      	str	r3, [r5, #0]
    5a66:	e7ed      	b.n	5a44 <__swhatbuf_r+0x1c>
    5a68:	2340      	movs	r3, #64	; 0x40
    5a6a:	2000      	movs	r0, #0
    5a6c:	6023      	str	r3, [r4, #0]
    5a6e:	b010      	add	sp, #64	; 0x40
    5a70:	bd70      	pop	{r4, r5, r6, pc}
    5a72:	46c0      	nop			; (mov r8, r8)
    5a74:	ffffe000 	.word	0xffffe000

00005a78 <__smakebuf_r>:
    5a78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5a7a:	2602      	movs	r6, #2
    5a7c:	898b      	ldrh	r3, [r1, #12]
    5a7e:	0005      	movs	r5, r0
    5a80:	000c      	movs	r4, r1
    5a82:	4233      	tst	r3, r6
    5a84:	d006      	beq.n	5a94 <__smakebuf_r+0x1c>
    5a86:	0023      	movs	r3, r4
    5a88:	3347      	adds	r3, #71	; 0x47
    5a8a:	6023      	str	r3, [r4, #0]
    5a8c:	6123      	str	r3, [r4, #16]
    5a8e:	2301      	movs	r3, #1
    5a90:	6163      	str	r3, [r4, #20]
    5a92:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    5a94:	ab01      	add	r3, sp, #4
    5a96:	466a      	mov	r2, sp
    5a98:	f7ff ffc6 	bl	5a28 <__swhatbuf_r>
    5a9c:	9900      	ldr	r1, [sp, #0]
    5a9e:	0007      	movs	r7, r0
    5aa0:	0028      	movs	r0, r5
    5aa2:	f000 f87b 	bl	5b9c <_malloc_r>
    5aa6:	2800      	cmp	r0, #0
    5aa8:	d106      	bne.n	5ab8 <__smakebuf_r+0x40>
    5aaa:	220c      	movs	r2, #12
    5aac:	5ea3      	ldrsh	r3, [r4, r2]
    5aae:	059a      	lsls	r2, r3, #22
    5ab0:	d4ef      	bmi.n	5a92 <__smakebuf_r+0x1a>
    5ab2:	431e      	orrs	r6, r3
    5ab4:	81a6      	strh	r6, [r4, #12]
    5ab6:	e7e6      	b.n	5a86 <__smakebuf_r+0xe>
    5ab8:	4b0d      	ldr	r3, [pc, #52]	; (5af0 <__smakebuf_r+0x78>)
    5aba:	62ab      	str	r3, [r5, #40]	; 0x28
    5abc:	2380      	movs	r3, #128	; 0x80
    5abe:	89a2      	ldrh	r2, [r4, #12]
    5ac0:	6020      	str	r0, [r4, #0]
    5ac2:	4313      	orrs	r3, r2
    5ac4:	81a3      	strh	r3, [r4, #12]
    5ac6:	9b00      	ldr	r3, [sp, #0]
    5ac8:	6120      	str	r0, [r4, #16]
    5aca:	6163      	str	r3, [r4, #20]
    5acc:	9b01      	ldr	r3, [sp, #4]
    5ace:	2b00      	cmp	r3, #0
    5ad0:	d00a      	beq.n	5ae8 <__smakebuf_r+0x70>
    5ad2:	230e      	movs	r3, #14
    5ad4:	5ee1      	ldrsh	r1, [r4, r3]
    5ad6:	0028      	movs	r0, r5
    5ad8:	f000 f954 	bl	5d84 <_isatty_r>
    5adc:	2800      	cmp	r0, #0
    5ade:	d003      	beq.n	5ae8 <__smakebuf_r+0x70>
    5ae0:	2301      	movs	r3, #1
    5ae2:	89a2      	ldrh	r2, [r4, #12]
    5ae4:	4313      	orrs	r3, r2
    5ae6:	81a3      	strh	r3, [r4, #12]
    5ae8:	89a0      	ldrh	r0, [r4, #12]
    5aea:	4338      	orrs	r0, r7
    5aec:	81a0      	strh	r0, [r4, #12]
    5aee:	e7d0      	b.n	5a92 <__smakebuf_r+0x1a>
    5af0:	00005879 	.word	0x00005879

00005af4 <malloc>:
    5af4:	b510      	push	{r4, lr}
    5af6:	4b03      	ldr	r3, [pc, #12]	; (5b04 <malloc+0x10>)
    5af8:	0001      	movs	r1, r0
    5afa:	6818      	ldr	r0, [r3, #0]
    5afc:	f000 f84e 	bl	5b9c <_malloc_r>
    5b00:	bd10      	pop	{r4, pc}
    5b02:	46c0      	nop			; (mov r8, r8)
    5b04:	2000000c 	.word	0x2000000c

00005b08 <_free_r>:
    5b08:	b570      	push	{r4, r5, r6, lr}
    5b0a:	0005      	movs	r5, r0
    5b0c:	2900      	cmp	r1, #0
    5b0e:	d010      	beq.n	5b32 <_free_r+0x2a>
    5b10:	1f0c      	subs	r4, r1, #4
    5b12:	6823      	ldr	r3, [r4, #0]
    5b14:	2b00      	cmp	r3, #0
    5b16:	da00      	bge.n	5b1a <_free_r+0x12>
    5b18:	18e4      	adds	r4, r4, r3
    5b1a:	0028      	movs	r0, r5
    5b1c:	f000 f958 	bl	5dd0 <__malloc_lock>
    5b20:	4a1d      	ldr	r2, [pc, #116]	; (5b98 <_free_r+0x90>)
    5b22:	6813      	ldr	r3, [r2, #0]
    5b24:	2b00      	cmp	r3, #0
    5b26:	d105      	bne.n	5b34 <_free_r+0x2c>
    5b28:	6063      	str	r3, [r4, #4]
    5b2a:	6014      	str	r4, [r2, #0]
    5b2c:	0028      	movs	r0, r5
    5b2e:	f000 f950 	bl	5dd2 <__malloc_unlock>
    5b32:	bd70      	pop	{r4, r5, r6, pc}
    5b34:	42a3      	cmp	r3, r4
    5b36:	d909      	bls.n	5b4c <_free_r+0x44>
    5b38:	6821      	ldr	r1, [r4, #0]
    5b3a:	1860      	adds	r0, r4, r1
    5b3c:	4283      	cmp	r3, r0
    5b3e:	d1f3      	bne.n	5b28 <_free_r+0x20>
    5b40:	6818      	ldr	r0, [r3, #0]
    5b42:	685b      	ldr	r3, [r3, #4]
    5b44:	1841      	adds	r1, r0, r1
    5b46:	6021      	str	r1, [r4, #0]
    5b48:	e7ee      	b.n	5b28 <_free_r+0x20>
    5b4a:	0013      	movs	r3, r2
    5b4c:	685a      	ldr	r2, [r3, #4]
    5b4e:	2a00      	cmp	r2, #0
    5b50:	d001      	beq.n	5b56 <_free_r+0x4e>
    5b52:	42a2      	cmp	r2, r4
    5b54:	d9f9      	bls.n	5b4a <_free_r+0x42>
    5b56:	6819      	ldr	r1, [r3, #0]
    5b58:	1858      	adds	r0, r3, r1
    5b5a:	42a0      	cmp	r0, r4
    5b5c:	d10b      	bne.n	5b76 <_free_r+0x6e>
    5b5e:	6820      	ldr	r0, [r4, #0]
    5b60:	1809      	adds	r1, r1, r0
    5b62:	1858      	adds	r0, r3, r1
    5b64:	6019      	str	r1, [r3, #0]
    5b66:	4282      	cmp	r2, r0
    5b68:	d1e0      	bne.n	5b2c <_free_r+0x24>
    5b6a:	6810      	ldr	r0, [r2, #0]
    5b6c:	6852      	ldr	r2, [r2, #4]
    5b6e:	1841      	adds	r1, r0, r1
    5b70:	6019      	str	r1, [r3, #0]
    5b72:	605a      	str	r2, [r3, #4]
    5b74:	e7da      	b.n	5b2c <_free_r+0x24>
    5b76:	42a0      	cmp	r0, r4
    5b78:	d902      	bls.n	5b80 <_free_r+0x78>
    5b7a:	230c      	movs	r3, #12
    5b7c:	602b      	str	r3, [r5, #0]
    5b7e:	e7d5      	b.n	5b2c <_free_r+0x24>
    5b80:	6821      	ldr	r1, [r4, #0]
    5b82:	1860      	adds	r0, r4, r1
    5b84:	4282      	cmp	r2, r0
    5b86:	d103      	bne.n	5b90 <_free_r+0x88>
    5b88:	6810      	ldr	r0, [r2, #0]
    5b8a:	6852      	ldr	r2, [r2, #4]
    5b8c:	1841      	adds	r1, r0, r1
    5b8e:	6021      	str	r1, [r4, #0]
    5b90:	6062      	str	r2, [r4, #4]
    5b92:	605c      	str	r4, [r3, #4]
    5b94:	e7ca      	b.n	5b2c <_free_r+0x24>
    5b96:	46c0      	nop			; (mov r8, r8)
    5b98:	20000104 	.word	0x20000104

00005b9c <_malloc_r>:
    5b9c:	2303      	movs	r3, #3
    5b9e:	b570      	push	{r4, r5, r6, lr}
    5ba0:	1ccd      	adds	r5, r1, #3
    5ba2:	439d      	bics	r5, r3
    5ba4:	3508      	adds	r5, #8
    5ba6:	0006      	movs	r6, r0
    5ba8:	2d0c      	cmp	r5, #12
    5baa:	d21e      	bcs.n	5bea <_malloc_r+0x4e>
    5bac:	250c      	movs	r5, #12
    5bae:	42a9      	cmp	r1, r5
    5bb0:	d81d      	bhi.n	5bee <_malloc_r+0x52>
    5bb2:	0030      	movs	r0, r6
    5bb4:	f000 f90c 	bl	5dd0 <__malloc_lock>
    5bb8:	4a25      	ldr	r2, [pc, #148]	; (5c50 <_malloc_r+0xb4>)
    5bba:	6814      	ldr	r4, [r2, #0]
    5bbc:	0021      	movs	r1, r4
    5bbe:	2900      	cmp	r1, #0
    5bc0:	d119      	bne.n	5bf6 <_malloc_r+0x5a>
    5bc2:	4c24      	ldr	r4, [pc, #144]	; (5c54 <_malloc_r+0xb8>)
    5bc4:	6823      	ldr	r3, [r4, #0]
    5bc6:	2b00      	cmp	r3, #0
    5bc8:	d103      	bne.n	5bd2 <_malloc_r+0x36>
    5bca:	0030      	movs	r0, r6
    5bcc:	f000 f844 	bl	5c58 <_sbrk_r>
    5bd0:	6020      	str	r0, [r4, #0]
    5bd2:	0029      	movs	r1, r5
    5bd4:	0030      	movs	r0, r6
    5bd6:	f000 f83f 	bl	5c58 <_sbrk_r>
    5bda:	1c43      	adds	r3, r0, #1
    5bdc:	d12c      	bne.n	5c38 <_malloc_r+0x9c>
    5bde:	230c      	movs	r3, #12
    5be0:	0030      	movs	r0, r6
    5be2:	6033      	str	r3, [r6, #0]
    5be4:	f000 f8f5 	bl	5dd2 <__malloc_unlock>
    5be8:	e003      	b.n	5bf2 <_malloc_r+0x56>
    5bea:	2d00      	cmp	r5, #0
    5bec:	dadf      	bge.n	5bae <_malloc_r+0x12>
    5bee:	230c      	movs	r3, #12
    5bf0:	6033      	str	r3, [r6, #0]
    5bf2:	2000      	movs	r0, #0
    5bf4:	bd70      	pop	{r4, r5, r6, pc}
    5bf6:	680b      	ldr	r3, [r1, #0]
    5bf8:	1b5b      	subs	r3, r3, r5
    5bfa:	d41a      	bmi.n	5c32 <_malloc_r+0x96>
    5bfc:	2b0b      	cmp	r3, #11
    5bfe:	d903      	bls.n	5c08 <_malloc_r+0x6c>
    5c00:	600b      	str	r3, [r1, #0]
    5c02:	18cc      	adds	r4, r1, r3
    5c04:	6025      	str	r5, [r4, #0]
    5c06:	e003      	b.n	5c10 <_malloc_r+0x74>
    5c08:	428c      	cmp	r4, r1
    5c0a:	d10e      	bne.n	5c2a <_malloc_r+0x8e>
    5c0c:	6863      	ldr	r3, [r4, #4]
    5c0e:	6013      	str	r3, [r2, #0]
    5c10:	0030      	movs	r0, r6
    5c12:	f000 f8de 	bl	5dd2 <__malloc_unlock>
    5c16:	0020      	movs	r0, r4
    5c18:	2207      	movs	r2, #7
    5c1a:	300b      	adds	r0, #11
    5c1c:	1d23      	adds	r3, r4, #4
    5c1e:	4390      	bics	r0, r2
    5c20:	1ac3      	subs	r3, r0, r3
    5c22:	d0e7      	beq.n	5bf4 <_malloc_r+0x58>
    5c24:	425a      	negs	r2, r3
    5c26:	50e2      	str	r2, [r4, r3]
    5c28:	e7e4      	b.n	5bf4 <_malloc_r+0x58>
    5c2a:	684b      	ldr	r3, [r1, #4]
    5c2c:	6063      	str	r3, [r4, #4]
    5c2e:	000c      	movs	r4, r1
    5c30:	e7ee      	b.n	5c10 <_malloc_r+0x74>
    5c32:	000c      	movs	r4, r1
    5c34:	6849      	ldr	r1, [r1, #4]
    5c36:	e7c2      	b.n	5bbe <_malloc_r+0x22>
    5c38:	2303      	movs	r3, #3
    5c3a:	1cc4      	adds	r4, r0, #3
    5c3c:	439c      	bics	r4, r3
    5c3e:	42a0      	cmp	r0, r4
    5c40:	d0e0      	beq.n	5c04 <_malloc_r+0x68>
    5c42:	1a21      	subs	r1, r4, r0
    5c44:	0030      	movs	r0, r6
    5c46:	f000 f807 	bl	5c58 <_sbrk_r>
    5c4a:	1c43      	adds	r3, r0, #1
    5c4c:	d1da      	bne.n	5c04 <_malloc_r+0x68>
    5c4e:	e7c6      	b.n	5bde <_malloc_r+0x42>
    5c50:	20000104 	.word	0x20000104
    5c54:	20000108 	.word	0x20000108

00005c58 <_sbrk_r>:
    5c58:	2300      	movs	r3, #0
    5c5a:	b570      	push	{r4, r5, r6, lr}
    5c5c:	4c06      	ldr	r4, [pc, #24]	; (5c78 <_sbrk_r+0x20>)
    5c5e:	0005      	movs	r5, r0
    5c60:	0008      	movs	r0, r1
    5c62:	6023      	str	r3, [r4, #0]
    5c64:	f7fd fab6 	bl	31d4 <_sbrk>
    5c68:	1c43      	adds	r3, r0, #1
    5c6a:	d103      	bne.n	5c74 <_sbrk_r+0x1c>
    5c6c:	6823      	ldr	r3, [r4, #0]
    5c6e:	2b00      	cmp	r3, #0
    5c70:	d000      	beq.n	5c74 <_sbrk_r+0x1c>
    5c72:	602b      	str	r3, [r5, #0]
    5c74:	bd70      	pop	{r4, r5, r6, pc}
    5c76:	46c0      	nop			; (mov r8, r8)
    5c78:	20000170 	.word	0x20000170

00005c7c <__sread>:
    5c7c:	b570      	push	{r4, r5, r6, lr}
    5c7e:	000c      	movs	r4, r1
    5c80:	250e      	movs	r5, #14
    5c82:	5f49      	ldrsh	r1, [r1, r5]
    5c84:	f000 f8a6 	bl	5dd4 <_read_r>
    5c88:	2800      	cmp	r0, #0
    5c8a:	db03      	blt.n	5c94 <__sread+0x18>
    5c8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5c8e:	181b      	adds	r3, r3, r0
    5c90:	6563      	str	r3, [r4, #84]	; 0x54
    5c92:	bd70      	pop	{r4, r5, r6, pc}
    5c94:	89a3      	ldrh	r3, [r4, #12]
    5c96:	4a02      	ldr	r2, [pc, #8]	; (5ca0 <__sread+0x24>)
    5c98:	4013      	ands	r3, r2
    5c9a:	81a3      	strh	r3, [r4, #12]
    5c9c:	e7f9      	b.n	5c92 <__sread+0x16>
    5c9e:	46c0      	nop			; (mov r8, r8)
    5ca0:	ffffefff 	.word	0xffffefff

00005ca4 <__swrite>:
    5ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ca6:	001f      	movs	r7, r3
    5ca8:	898b      	ldrh	r3, [r1, #12]
    5caa:	0005      	movs	r5, r0
    5cac:	000c      	movs	r4, r1
    5cae:	0016      	movs	r6, r2
    5cb0:	05db      	lsls	r3, r3, #23
    5cb2:	d505      	bpl.n	5cc0 <__swrite+0x1c>
    5cb4:	230e      	movs	r3, #14
    5cb6:	5ec9      	ldrsh	r1, [r1, r3]
    5cb8:	2200      	movs	r2, #0
    5cba:	2302      	movs	r3, #2
    5cbc:	f000 f874 	bl	5da8 <_lseek_r>
    5cc0:	89a3      	ldrh	r3, [r4, #12]
    5cc2:	4a05      	ldr	r2, [pc, #20]	; (5cd8 <__swrite+0x34>)
    5cc4:	0028      	movs	r0, r5
    5cc6:	4013      	ands	r3, r2
    5cc8:	81a3      	strh	r3, [r4, #12]
    5cca:	0032      	movs	r2, r6
    5ccc:	230e      	movs	r3, #14
    5cce:	5ee1      	ldrsh	r1, [r4, r3]
    5cd0:	003b      	movs	r3, r7
    5cd2:	f000 f81f 	bl	5d14 <_write_r>
    5cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5cd8:	ffffefff 	.word	0xffffefff

00005cdc <__sseek>:
    5cdc:	b570      	push	{r4, r5, r6, lr}
    5cde:	000c      	movs	r4, r1
    5ce0:	250e      	movs	r5, #14
    5ce2:	5f49      	ldrsh	r1, [r1, r5]
    5ce4:	f000 f860 	bl	5da8 <_lseek_r>
    5ce8:	89a3      	ldrh	r3, [r4, #12]
    5cea:	1c42      	adds	r2, r0, #1
    5cec:	d103      	bne.n	5cf6 <__sseek+0x1a>
    5cee:	4a05      	ldr	r2, [pc, #20]	; (5d04 <__sseek+0x28>)
    5cf0:	4013      	ands	r3, r2
    5cf2:	81a3      	strh	r3, [r4, #12]
    5cf4:	bd70      	pop	{r4, r5, r6, pc}
    5cf6:	2280      	movs	r2, #128	; 0x80
    5cf8:	0152      	lsls	r2, r2, #5
    5cfa:	4313      	orrs	r3, r2
    5cfc:	81a3      	strh	r3, [r4, #12]
    5cfe:	6560      	str	r0, [r4, #84]	; 0x54
    5d00:	e7f8      	b.n	5cf4 <__sseek+0x18>
    5d02:	46c0      	nop			; (mov r8, r8)
    5d04:	ffffefff 	.word	0xffffefff

00005d08 <__sclose>:
    5d08:	b510      	push	{r4, lr}
    5d0a:	230e      	movs	r3, #14
    5d0c:	5ec9      	ldrsh	r1, [r1, r3]
    5d0e:	f000 f815 	bl	5d3c <_close_r>
    5d12:	bd10      	pop	{r4, pc}

00005d14 <_write_r>:
    5d14:	b570      	push	{r4, r5, r6, lr}
    5d16:	0005      	movs	r5, r0
    5d18:	0008      	movs	r0, r1
    5d1a:	0011      	movs	r1, r2
    5d1c:	2200      	movs	r2, #0
    5d1e:	4c06      	ldr	r4, [pc, #24]	; (5d38 <_write_r+0x24>)
    5d20:	6022      	str	r2, [r4, #0]
    5d22:	001a      	movs	r2, r3
    5d24:	f7fd fa20 	bl	3168 <_write>
    5d28:	1c43      	adds	r3, r0, #1
    5d2a:	d103      	bne.n	5d34 <_write_r+0x20>
    5d2c:	6823      	ldr	r3, [r4, #0]
    5d2e:	2b00      	cmp	r3, #0
    5d30:	d000      	beq.n	5d34 <_write_r+0x20>
    5d32:	602b      	str	r3, [r5, #0]
    5d34:	bd70      	pop	{r4, r5, r6, pc}
    5d36:	46c0      	nop			; (mov r8, r8)
    5d38:	20000170 	.word	0x20000170

00005d3c <_close_r>:
    5d3c:	2300      	movs	r3, #0
    5d3e:	b570      	push	{r4, r5, r6, lr}
    5d40:	4c06      	ldr	r4, [pc, #24]	; (5d5c <_close_r+0x20>)
    5d42:	0005      	movs	r5, r0
    5d44:	0008      	movs	r0, r1
    5d46:	6023      	str	r3, [r4, #0]
    5d48:	f7fd fa62 	bl	3210 <_close>
    5d4c:	1c43      	adds	r3, r0, #1
    5d4e:	d103      	bne.n	5d58 <_close_r+0x1c>
    5d50:	6823      	ldr	r3, [r4, #0]
    5d52:	2b00      	cmp	r3, #0
    5d54:	d000      	beq.n	5d58 <_close_r+0x1c>
    5d56:	602b      	str	r3, [r5, #0]
    5d58:	bd70      	pop	{r4, r5, r6, pc}
    5d5a:	46c0      	nop			; (mov r8, r8)
    5d5c:	20000170 	.word	0x20000170

00005d60 <_fstat_r>:
    5d60:	2300      	movs	r3, #0
    5d62:	b570      	push	{r4, r5, r6, lr}
    5d64:	4c06      	ldr	r4, [pc, #24]	; (5d80 <_fstat_r+0x20>)
    5d66:	0005      	movs	r5, r0
    5d68:	0008      	movs	r0, r1
    5d6a:	0011      	movs	r1, r2
    5d6c:	6023      	str	r3, [r4, #0]
    5d6e:	f7fd fa59 	bl	3224 <_fstat>
    5d72:	1c43      	adds	r3, r0, #1
    5d74:	d103      	bne.n	5d7e <_fstat_r+0x1e>
    5d76:	6823      	ldr	r3, [r4, #0]
    5d78:	2b00      	cmp	r3, #0
    5d7a:	d000      	beq.n	5d7e <_fstat_r+0x1e>
    5d7c:	602b      	str	r3, [r5, #0]
    5d7e:	bd70      	pop	{r4, r5, r6, pc}
    5d80:	20000170 	.word	0x20000170

00005d84 <_isatty_r>:
    5d84:	2300      	movs	r3, #0
    5d86:	b570      	push	{r4, r5, r6, lr}
    5d88:	4c06      	ldr	r4, [pc, #24]	; (5da4 <_isatty_r+0x20>)
    5d8a:	0005      	movs	r5, r0
    5d8c:	0008      	movs	r0, r1
    5d8e:	6023      	str	r3, [r4, #0]
    5d90:	f7fd fa56 	bl	3240 <_isatty>
    5d94:	1c43      	adds	r3, r0, #1
    5d96:	d103      	bne.n	5da0 <_isatty_r+0x1c>
    5d98:	6823      	ldr	r3, [r4, #0]
    5d9a:	2b00      	cmp	r3, #0
    5d9c:	d000      	beq.n	5da0 <_isatty_r+0x1c>
    5d9e:	602b      	str	r3, [r5, #0]
    5da0:	bd70      	pop	{r4, r5, r6, pc}
    5da2:	46c0      	nop			; (mov r8, r8)
    5da4:	20000170 	.word	0x20000170

00005da8 <_lseek_r>:
    5da8:	b570      	push	{r4, r5, r6, lr}
    5daa:	0005      	movs	r5, r0
    5dac:	0008      	movs	r0, r1
    5dae:	0011      	movs	r1, r2
    5db0:	2200      	movs	r2, #0
    5db2:	4c06      	ldr	r4, [pc, #24]	; (5dcc <_lseek_r+0x24>)
    5db4:	6022      	str	r2, [r4, #0]
    5db6:	001a      	movs	r2, r3
    5db8:	f7fd fa4b 	bl	3252 <_lseek>
    5dbc:	1c43      	adds	r3, r0, #1
    5dbe:	d103      	bne.n	5dc8 <_lseek_r+0x20>
    5dc0:	6823      	ldr	r3, [r4, #0]
    5dc2:	2b00      	cmp	r3, #0
    5dc4:	d000      	beq.n	5dc8 <_lseek_r+0x20>
    5dc6:	602b      	str	r3, [r5, #0]
    5dc8:	bd70      	pop	{r4, r5, r6, pc}
    5dca:	46c0      	nop			; (mov r8, r8)
    5dcc:	20000170 	.word	0x20000170

00005dd0 <__malloc_lock>:
    5dd0:	4770      	bx	lr

00005dd2 <__malloc_unlock>:
    5dd2:	4770      	bx	lr

00005dd4 <_read_r>:
    5dd4:	b570      	push	{r4, r5, r6, lr}
    5dd6:	0005      	movs	r5, r0
    5dd8:	0008      	movs	r0, r1
    5dda:	0011      	movs	r1, r2
    5ddc:	2200      	movs	r2, #0
    5dde:	4c06      	ldr	r4, [pc, #24]	; (5df8 <_read_r+0x24>)
    5de0:	6022      	str	r2, [r4, #0]
    5de2:	001a      	movs	r2, r3
    5de4:	f7fd f996 	bl	3114 <_read>
    5de8:	1c43      	adds	r3, r0, #1
    5dea:	d103      	bne.n	5df4 <_read_r+0x20>
    5dec:	6823      	ldr	r3, [r4, #0]
    5dee:	2b00      	cmp	r3, #0
    5df0:	d000      	beq.n	5df4 <_read_r+0x20>
    5df2:	602b      	str	r3, [r5, #0]
    5df4:	bd70      	pop	{r4, r5, r6, pc}
    5df6:	46c0      	nop			; (mov r8, r8)
    5df8:	20000170 	.word	0x20000170
    5dfc:	42000800 	.word	0x42000800
    5e00:	42000c00 	.word	0x42000c00
    5e04:	42001000 	.word	0x42001000
    5e08:	42001400 	.word	0x42001400
    5e0c:	42001800 	.word	0x42001800
    5e10:	42001c00 	.word	0x42001c00
    5e14:	0c0b0a09 	.word	0x0c0b0a09
    5e18:	00000e0d 	.word	0x00000e0d
    5e1c:	0000266a 	.word	0x0000266a
    5e20:	000026e2 	.word	0x000026e2
    5e24:	000026e2 	.word	0x000026e2
    5e28:	00002688 	.word	0x00002688
    5e2c:	00002682 	.word	0x00002682
    5e30:	0000268e 	.word	0x0000268e
    5e34:	00002670 	.word	0x00002670
    5e38:	00002694 	.word	0x00002694
    5e3c:	000026c8 	.word	0x000026c8
    5e40:	000027bc 	.word	0x000027bc
    5e44:	0000280c 	.word	0x0000280c
    5e48:	0000280c 	.word	0x0000280c
    5e4c:	00002808 	.word	0x00002808
    5e50:	000027ae 	.word	0x000027ae
    5e54:	000027ce 	.word	0x000027ce
    5e58:	0000279e 	.word	0x0000279e
    5e5c:	000027e0 	.word	0x000027e0
    5e60:	000027f2 	.word	0x000027f2
    5e64:	75746573 	.word	0x75746573
    5e68:	6f632070 	.word	0x6f632070
    5e6c:	656c706d 	.word	0x656c706d
    5e70:	0d206574 	.word	0x0d206574
    5e74:	00000000 	.word	0x00000000
    5e78:	706d6554 	.word	0x706d6554
    5e7c:	646e6120 	.word	0x646e6120
    5e80:	6d756820 	.word	0x6d756820
    5e84:	74696469 	.word	0x74696469
    5e88:	63612079 	.word	0x63612079
    5e8c:	72697571 	.word	0x72697571
    5e90:	20216465 	.word	0x20216465
    5e94:	0000000d 	.word	0x0000000d
    5e98:	00001502 	.word	0x00001502
    5e9c:	00004218 	.word	0x00004218
    5ea0:	000041fa 	.word	0x000041fa
    5ea4:	000041b4 	.word	0x000041b4
    5ea8:	000040d2 	.word	0x000040d2
    5eac:	000041b4 	.word	0x000041b4
    5eb0:	000041ec 	.word	0x000041ec
    5eb4:	000041b4 	.word	0x000041b4
    5eb8:	000040d2 	.word	0x000040d2
    5ebc:	000041fa 	.word	0x000041fa
    5ec0:	000041fa 	.word	0x000041fa
    5ec4:	000041ec 	.word	0x000041ec
    5ec8:	000040d2 	.word	0x000040d2
    5ecc:	000040ca 	.word	0x000040ca
    5ed0:	000040ca 	.word	0x000040ca
    5ed4:	000040ca 	.word	0x000040ca
    5ed8:	00004430 	.word	0x00004430
    5edc:	00004878 	.word	0x00004878
    5ee0:	00004738 	.word	0x00004738
    5ee4:	00004738 	.word	0x00004738
    5ee8:	00004734 	.word	0x00004734
    5eec:	00004850 	.word	0x00004850
    5ef0:	00004850 	.word	0x00004850
    5ef4:	00004842 	.word	0x00004842
    5ef8:	00004734 	.word	0x00004734
    5efc:	00004850 	.word	0x00004850
    5f00:	00004842 	.word	0x00004842
    5f04:	00004850 	.word	0x00004850
    5f08:	00004734 	.word	0x00004734
    5f0c:	00004858 	.word	0x00004858
    5f10:	00004858 	.word	0x00004858
    5f14:	00004858 	.word	0x00004858
    5f18:	00004a5c 	.word	0x00004a5c

00005f1c <_global_impure_ptr>:
    5f1c:	20000010                                ... 

00005f20 <__sf_fake_stderr>:
	...

00005f40 <__sf_fake_stdin>:
	...

00005f60 <__sf_fake_stdout>:
	...

00005f80 <_init>:
    5f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f82:	46c0      	nop			; (mov r8, r8)
    5f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5f86:	bc08      	pop	{r3}
    5f88:	469e      	mov	lr, r3
    5f8a:	4770      	bx	lr

00005f8c <__init_array_start>:
    5f8c:	000000dd 	.word	0x000000dd

00005f90 <_fini>:
    5f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f92:	46c0      	nop			; (mov r8, r8)
    5f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5f96:	bc08      	pop	{r3}
    5f98:	469e      	mov	lr, r3
    5f9a:	4770      	bx	lr

00005f9c <__fini_array_start>:
    5f9c:	000000b5 	.word	0x000000b5
