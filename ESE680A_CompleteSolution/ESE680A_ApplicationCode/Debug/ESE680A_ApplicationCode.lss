
ESE680A_ApplicationCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010eec  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e8  20000000  00010eec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c24  200001e8  000110d4  000301e8  2**2
                  ALLOC
  3 .stack        00002004  20000e0c  00011cf8  000301e8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
  6 .debug_info   00062311  00000000  00000000  00030269  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007a16  00000000  00000000  0009257a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007afe  00000000  00000000  00099f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000015b8  00000000  00000000  000a1a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000013f8  00000000  00000000  000a3046  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00023ca1  00000000  00000000  000a443e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00021078  00000000  00000000  000c80df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009535b  00000000  00000000  000e9157  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000056ec  00000000  00000000  0017e4b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	10 2e 00 20 b9 8a 00 00 b1 8b 00 00 b1 8b 00 00     ... ............
	...
	rtc_calendar_get_time(module, &time);

	/* Check current mode. */
	if (module->clock_24h) {
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);
      2c:	b1 8b 00 00 00 00 00 00 00 00 00 00 b1 8b 00 00     ................
      3c:	b1 8b 00 00 b1 8b 00 00 b1 8b 00 00 b1 8b 00 00     ................

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
      4c:	09 61 00 00 1d 5c 00 00 b1 8b 00 00 b1 8b 00 00     .a...\..........
		if (time.hour == 0) {
      5c:	b1 8b 00 00 b1 8b 00 00 19 a5 00 00 31 a5 00 00     ............1...
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      6c:	49 a5 00 00 61 a5 00 00 79 a5 00 00 91 a5 00 00     I...a...y.......
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      7c:	0d 6d 00 00 21 6d 00 00 35 6d 00 00 b1 8b 00 00     .m..!m..5m......
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
      8c:	b1 8b 00 00 b1 8b 00 00 00 00 00 00 00 00 00 00     ................
      9c:	b1 8b 00 00 b1 8b 00 00 b1 8b 00 00 b1 8b 00 00     ................
			alarm.time.hour = alarm.time.hour % 12;
      ac:	b1 8b 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
			if (alarm.time.hour == 0) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
				alarm.time.hour = 12;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
			}
			module->clock_24h = false;
      d0:	200001e8 	.word	0x200001e8
      d4:	00000000 	.word	0x00000000
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      d8:	00010eec 	.word	0x00010eec

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
			module->clock_24h = true;
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001ec 	.word	0x200001ec
		}

		/* Change value in configuration structure. */
		module->clock_24h = false;
     108:	00010eec 	.word	0x00010eec
     10c:	00010eec 	.word	0x00010eec
	} else {
		/* Set hour value based on pm flag. */
		if (time.pm == 1) {
     110:	00000000 	.word	0x00000000

00000114 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     120:	230f      	movs	r3, #15
     122:	18fb      	adds	r3, r7, r3
     124:	1dfa      	adds	r2, r7, #7
     126:	7812      	ldrb	r2, [r2, #0]
     128:	09d2      	lsrs	r2, r2, #7
     12a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     12c:	230e      	movs	r3, #14
     12e:	18fb      	adds	r3, r7, r3
     130:	1dfa      	adds	r2, r7, #7
     132:	7812      	ldrb	r2, [r2, #0]
     134:	0952      	lsrs	r2, r2, #5
     136:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     138:	4b0d      	ldr	r3, [pc, #52]	; (170 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     13a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     13c:	230f      	movs	r3, #15
     13e:	18fb      	adds	r3, r7, r3
     140:	781b      	ldrb	r3, [r3, #0]
     142:	2b00      	cmp	r3, #0
     144:	d10f      	bne.n	166 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     146:	230f      	movs	r3, #15
     148:	18fb      	adds	r3, r7, r3
     14a:	781b      	ldrb	r3, [r3, #0]
     14c:	009b      	lsls	r3, r3, #2
     14e:	2210      	movs	r2, #16
     150:	4694      	mov	ip, r2
     152:	44bc      	add	ip, r7
     154:	4463      	add	r3, ip
     156:	3b08      	subs	r3, #8
     158:	681a      	ldr	r2, [r3, #0]
     15a:	230e      	movs	r3, #14
     15c:	18fb      	adds	r3, r7, r3
     15e:	781b      	ldrb	r3, [r3, #0]
     160:	01db      	lsls	r3, r3, #7
     162:	18d3      	adds	r3, r2, r3
     164:	e000      	b.n	168 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     166:	2300      	movs	r3, #0
	}
}
     168:	0018      	movs	r0, r3
     16a:	46bd      	mov	sp, r7
     16c:	b004      	add	sp, #16
     16e:	bd80      	pop	{r7, pc}
     170:	41004400 	.word	0x41004400

00000174 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     174:	b580      	push	{r7, lr}
     176:	b082      	sub	sp, #8
     178:	af00      	add	r7, sp, #0
     17a:	0002      	movs	r2, r0
     17c:	1dfb      	adds	r3, r7, #7
     17e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     180:	1dfb      	adds	r3, r7, #7
     182:	781b      	ldrb	r3, [r3, #0]
     184:	0018      	movs	r0, r3
     186:	4b03      	ldr	r3, [pc, #12]	; (194 <port_get_group_from_gpio_pin+0x20>)
     188:	4798      	blx	r3
     18a:	0003      	movs	r3, r0
}
     18c:	0018      	movs	r0, r3
     18e:	46bd      	mov	sp, r7
     190:	b002      	add	sp, #8
     192:	bd80      	pop	{r7, pc}
     194:	00000115 	.word	0x00000115

00000198 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     198:	b580      	push	{r7, lr}
     19a:	b082      	sub	sp, #8
     19c:	af00      	add	r7, sp, #0
     19e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     1a0:	687b      	ldr	r3, [r7, #4]
     1a2:	2200      	movs	r2, #0
     1a4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     1a6:	687b      	ldr	r3, [r7, #4]
     1a8:	2201      	movs	r2, #1
     1aa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     1ac:	687b      	ldr	r3, [r7, #4]
     1ae:	2200      	movs	r2, #0
     1b0:	709a      	strb	r2, [r3, #2]
}
     1b2:	46c0      	nop			; (mov r8, r8)
     1b4:	46bd      	mov	sp, r7
     1b6:	b002      	add	sp, #8
     1b8:	bd80      	pop	{r7, pc}
	...

000001bc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     1bc:	b580      	push	{r7, lr}
     1be:	b084      	sub	sp, #16
     1c0:	af00      	add	r7, sp, #0
     1c2:	0002      	movs	r2, r0
     1c4:	1dfb      	adds	r3, r7, #7
     1c6:	701a      	strb	r2, [r3, #0]
     1c8:	1dbb      	adds	r3, r7, #6
     1ca:	1c0a      	adds	r2, r1, #0
     1cc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     1ce:	1dfb      	adds	r3, r7, #7
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	0018      	movs	r0, r3
     1d4:	4b0d      	ldr	r3, [pc, #52]	; (20c <port_pin_set_output_level+0x50>)
     1d6:	4798      	blx	r3
     1d8:	0003      	movs	r3, r0
     1da:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1dc:	1dfb      	adds	r3, r7, #7
     1de:	781b      	ldrb	r3, [r3, #0]
     1e0:	221f      	movs	r2, #31
     1e2:	4013      	ands	r3, r2
     1e4:	2201      	movs	r2, #1
     1e6:	409a      	lsls	r2, r3
     1e8:	0013      	movs	r3, r2
     1ea:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     1ec:	1dbb      	adds	r3, r7, #6
     1ee:	781b      	ldrb	r3, [r3, #0]
     1f0:	2b00      	cmp	r3, #0
     1f2:	d003      	beq.n	1fc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     1f4:	68fb      	ldr	r3, [r7, #12]
     1f6:	68ba      	ldr	r2, [r7, #8]
     1f8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     1fa:	e002      	b.n	202 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     1fc:	68fb      	ldr	r3, [r7, #12]
     1fe:	68ba      	ldr	r2, [r7, #8]
     200:	615a      	str	r2, [r3, #20]
}
     202:	46c0      	nop			; (mov r8, r8)
     204:	46bd      	mov	sp, r7
     206:	b004      	add	sp, #16
     208:	bd80      	pop	{r7, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	00000175 	.word	0x00000175

00000210 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     210:	b580      	push	{r7, lr}
     212:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     214:	4b04      	ldr	r3, [pc, #16]	; (228 <system_interrupt_enable_global+0x18>)
     216:	2201      	movs	r2, #1
     218:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     21a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     21e:	b662      	cpsie	i
}
     220:	46c0      	nop			; (mov r8, r8)
     222:	46bd      	mov	sp, r7
     224:	bd80      	pop	{r7, pc}
     226:	46c0      	nop			; (mov r8, r8)
     228:	2000000c 	.word	0x2000000c

0000022c <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     22c:	b580      	push	{r7, lr}
     22e:	af00      	add	r7, sp, #0
	if (gpfIsr) {
     230:	4b04      	ldr	r3, [pc, #16]	; (244 <chip_isr+0x18>)
     232:	681b      	ldr	r3, [r3, #0]
     234:	2b00      	cmp	r3, #0
     236:	d002      	beq.n	23e <chip_isr+0x12>
		gpfIsr();
     238:	4b02      	ldr	r3, [pc, #8]	; (244 <chip_isr+0x18>)
     23a:	681b      	ldr	r3, [r3, #0]
     23c:	4798      	blx	r3
	}
}
     23e:	46c0      	nop			; (mov r8, r8)
     240:	46bd      	mov	sp, r7
     242:	bd80      	pop	{r7, pc}
     244:	20000204 	.word	0x20000204

00000248 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
     248:	b580      	push	{r7, lr}
     24a:	b082      	sub	sp, #8
     24c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
     24e:	1d3b      	adds	r3, r7, #4
     250:	0018      	movs	r0, r3
     252:	4b10      	ldr	r3, [pc, #64]	; (294 <init_chip_pins+0x4c>)
     254:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     256:	1d3b      	adds	r3, r7, #4
     258:	2201      	movs	r2, #1
     25a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     25c:	1d3b      	adds	r3, r7, #4
     25e:	0019      	movs	r1, r3
     260:	201b      	movs	r0, #27
     262:	4b0d      	ldr	r3, [pc, #52]	; (298 <init_chip_pins+0x50>)
     264:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     266:	1d3b      	adds	r3, r7, #4
     268:	0019      	movs	r1, r3
     26a:	201c      	movs	r0, #28
     26c:	4b0a      	ldr	r3, [pc, #40]	; (298 <init_chip_pins+0x50>)
     26e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     270:	1d3b      	adds	r3, r7, #4
     272:	0019      	movs	r1, r3
     274:	2028      	movs	r0, #40	; 0x28
     276:	4b08      	ldr	r3, [pc, #32]	; (298 <init_chip_pins+0x50>)
     278:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
     27a:	2100      	movs	r1, #0
     27c:	201c      	movs	r0, #28
     27e:	4b07      	ldr	r3, [pc, #28]	; (29c <init_chip_pins+0x54>)
     280:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
     282:	2100      	movs	r1, #0
     284:	201b      	movs	r0, #27
     286:	4b05      	ldr	r3, [pc, #20]	; (29c <init_chip_pins+0x54>)
     288:	4798      	blx	r3
}
     28a:	46c0      	nop			; (mov r8, r8)
     28c:	46bd      	mov	sp, r7
     28e:	b002      	add	sp, #8
     290:	bd80      	pop	{r7, pc}
     292:	46c0      	nop			; (mov r8, r8)
     294:	00000199 	.word	0x00000199
     298:	00009e21 	.word	0x00009e21
     29c:	000001bd 	.word	0x000001bd

000002a0 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
     2a0:	b580      	push	{r7, lr}
     2a2:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
     2a4:	4b0c      	ldr	r3, [pc, #48]	; (2d8 <nm_bsp_init+0x38>)
     2a6:	2200      	movs	r2, #0
     2a8:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
     2aa:	4b0c      	ldr	r3, [pc, #48]	; (2dc <nm_bsp_init+0x3c>)
     2ac:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     2ae:	4b0c      	ldr	r3, [pc, #48]	; (2e0 <nm_bsp_init+0x40>)
     2b0:	681b      	ldr	r3, [r3, #0]
     2b2:	2201      	movs	r2, #1
     2b4:	4013      	ands	r3, r2
     2b6:	d004      	beq.n	2c2 <nm_bsp_init+0x22>
     2b8:	4b09      	ldr	r3, [pc, #36]	; (2e0 <nm_bsp_init+0x40>)
     2ba:	681b      	ldr	r3, [r3, #0]
     2bc:	2202      	movs	r2, #2
     2be:	4013      	ands	r3, r2
     2c0:	d101      	bne.n	2c6 <nm_bsp_init+0x26>
	    delay_init();
     2c2:	4b08      	ldr	r3, [pc, #32]	; (2e4 <nm_bsp_init+0x44>)
     2c4:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
     2c6:	4b08      	ldr	r3, [pc, #32]	; (2e8 <nm_bsp_init+0x48>)
     2c8:	4798      	blx	r3

	system_interrupt_enable_global();
     2ca:	4b08      	ldr	r3, [pc, #32]	; (2ec <nm_bsp_init+0x4c>)
     2cc:	4798      	blx	r3

	return M2M_SUCCESS;
     2ce:	2300      	movs	r3, #0
}
     2d0:	0018      	movs	r0, r3
     2d2:	46bd      	mov	sp, r7
     2d4:	bd80      	pop	{r7, pc}
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	20000204 	.word	0x20000204
     2dc:	00000249 	.word	0x00000249
     2e0:	e000e010 	.word	0xe000e010
     2e4:	00009a3d 	.word	0x00009a3d
     2e8:	000002f1 	.word	0x000002f1
     2ec:	00000211 	.word	0x00000211

000002f0 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
     2f0:	b580      	push	{r7, lr}
     2f2:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
     2f4:	2100      	movs	r1, #0
     2f6:	201c      	movs	r0, #28
     2f8:	4b0c      	ldr	r3, [pc, #48]	; (32c <nm_bsp_reset+0x3c>)
     2fa:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
     2fc:	2100      	movs	r1, #0
     2fe:	201b      	movs	r0, #27
     300:	4b0a      	ldr	r3, [pc, #40]	; (32c <nm_bsp_reset+0x3c>)
     302:	4798      	blx	r3
	nm_bsp_sleep(100);
     304:	2064      	movs	r0, #100	; 0x64
     306:	4b0a      	ldr	r3, [pc, #40]	; (330 <nm_bsp_reset+0x40>)
     308:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
     30a:	2101      	movs	r1, #1
     30c:	201c      	movs	r0, #28
     30e:	4b07      	ldr	r3, [pc, #28]	; (32c <nm_bsp_reset+0x3c>)
     310:	4798      	blx	r3
	nm_bsp_sleep(100);
     312:	2064      	movs	r0, #100	; 0x64
     314:	4b06      	ldr	r3, [pc, #24]	; (330 <nm_bsp_reset+0x40>)
     316:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
     318:	2101      	movs	r1, #1
     31a:	201b      	movs	r0, #27
     31c:	4b03      	ldr	r3, [pc, #12]	; (32c <nm_bsp_reset+0x3c>)
     31e:	4798      	blx	r3
	nm_bsp_sleep(100);
     320:	2064      	movs	r0, #100	; 0x64
     322:	4b03      	ldr	r3, [pc, #12]	; (330 <nm_bsp_reset+0x40>)
     324:	4798      	blx	r3
}
     326:	46c0      	nop			; (mov r8, r8)
     328:	46bd      	mov	sp, r7
     32a:	bd80      	pop	{r7, pc}
     32c:	000001bd 	.word	0x000001bd
     330:	00000335 	.word	0x00000335

00000334 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     334:	b580      	push	{r7, lr}
     336:	b082      	sub	sp, #8
     338:	af00      	add	r7, sp, #0
     33a:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
     33c:	e002      	b.n	344 <nm_bsp_sleep+0x10>
		delay_ms(1);
     33e:	2001      	movs	r0, #1
     340:	4b05      	ldr	r3, [pc, #20]	; (358 <nm_bsp_sleep+0x24>)
     342:	4798      	blx	r3
	while (u32TimeMsec--) {
     344:	687b      	ldr	r3, [r7, #4]
     346:	1e5a      	subs	r2, r3, #1
     348:	607a      	str	r2, [r7, #4]
     34a:	2b00      	cmp	r3, #0
     34c:	d1f7      	bne.n	33e <nm_bsp_sleep+0xa>
	}
}
     34e:	46c0      	nop			; (mov r8, r8)
     350:	46bd      	mov	sp, r7
     352:	b002      	add	sp, #8
     354:	bd80      	pop	{r7, pc}
     356:	46c0      	nop			; (mov r8, r8)
     358:	00009a95 	.word	0x00009a95

0000035c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     35c:	b580      	push	{r7, lr}
     35e:	b086      	sub	sp, #24
     360:	af00      	add	r7, sp, #0
     362:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     364:	4b15      	ldr	r3, [pc, #84]	; (3bc <nm_bsp_register_isr+0x60>)
     366:	687a      	ldr	r2, [r7, #4]
     368:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     36a:	230c      	movs	r3, #12
     36c:	18fb      	adds	r3, r7, r3
     36e:	0018      	movs	r0, r3
     370:	4b13      	ldr	r3, [pc, #76]	; (3c0 <nm_bsp_register_isr+0x64>)
     372:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     374:	230c      	movs	r3, #12
     376:	18fb      	adds	r3, r7, r3
     378:	2229      	movs	r2, #41	; 0x29
     37a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     37c:	230c      	movs	r3, #12
     37e:	18fb      	adds	r3, r7, r3
     380:	2200      	movs	r2, #0
     382:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     384:	230c      	movs	r3, #12
     386:	18fb      	adds	r3, r7, r3
     388:	2201      	movs	r2, #1
     38a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     38c:	230c      	movs	r3, #12
     38e:	18fb      	adds	r3, r7, r3
     390:	2202      	movs	r2, #2
     392:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     394:	230c      	movs	r3, #12
     396:	18fb      	adds	r3, r7, r3
     398:	0019      	movs	r1, r3
     39a:	2009      	movs	r0, #9
     39c:	4b09      	ldr	r3, [pc, #36]	; (3c4 <nm_bsp_register_isr+0x68>)
     39e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     3a0:	4b09      	ldr	r3, [pc, #36]	; (3c8 <nm_bsp_register_isr+0x6c>)
     3a2:	2200      	movs	r2, #0
     3a4:	2109      	movs	r1, #9
     3a6:	0018      	movs	r0, r3
     3a8:	4b08      	ldr	r3, [pc, #32]	; (3cc <nm_bsp_register_isr+0x70>)
     3aa:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     3ac:	2100      	movs	r1, #0
     3ae:	2009      	movs	r0, #9
     3b0:	4b07      	ldr	r3, [pc, #28]	; (3d0 <nm_bsp_register_isr+0x74>)
     3b2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     3b4:	46c0      	nop			; (mov r8, r8)
     3b6:	46bd      	mov	sp, r7
     3b8:	b006      	add	sp, #24
     3ba:	bd80      	pop	{r7, pc}
     3bc:	20000204 	.word	0x20000204
     3c0:	00005f29 	.word	0x00005f29
     3c4:	00005f5d 	.word	0x00005f5d
     3c8:	0000022d 	.word	0x0000022d
     3cc:	00005b29 	.word	0x00005b29
     3d0:	00005b8d 	.word	0x00005b8d

000003d4 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     3d4:	b580      	push	{r7, lr}
     3d6:	b082      	sub	sp, #8
     3d8:	af00      	add	r7, sp, #0
     3da:	0002      	movs	r2, r0
     3dc:	1dfb      	adds	r3, r7, #7
     3de:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
     3e0:	1dfb      	adds	r3, r7, #7
     3e2:	781b      	ldrb	r3, [r3, #0]
     3e4:	2b00      	cmp	r3, #0
     3e6:	d004      	beq.n	3f2 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     3e8:	2100      	movs	r1, #0
     3ea:	2009      	movs	r0, #9
     3ec:	4b05      	ldr	r3, [pc, #20]	; (404 <nm_bsp_interrupt_ctrl+0x30>)
     3ee:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     3f0:	e003      	b.n	3fa <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     3f2:	2100      	movs	r1, #0
     3f4:	2009      	movs	r0, #9
     3f6:	4b04      	ldr	r3, [pc, #16]	; (408 <nm_bsp_interrupt_ctrl+0x34>)
     3f8:	4798      	blx	r3
}
     3fa:	46c0      	nop			; (mov r8, r8)
     3fc:	46bd      	mov	sp, r7
     3fe:	b002      	add	sp, #8
     400:	bd80      	pop	{r7, pc}
     402:	46c0      	nop			; (mov r8, r8)
     404:	00005b8d 	.word	0x00005b8d
     408:	00005bd5 	.word	0x00005bd5

0000040c <system_pinmux_get_group_from_gpio_pin>:
{
     40c:	b580      	push	{r7, lr}
     40e:	b084      	sub	sp, #16
     410:	af00      	add	r7, sp, #0
     412:	0002      	movs	r2, r0
     414:	1dfb      	adds	r3, r7, #7
     416:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     418:	230f      	movs	r3, #15
     41a:	18fb      	adds	r3, r7, r3
     41c:	1dfa      	adds	r2, r7, #7
     41e:	7812      	ldrb	r2, [r2, #0]
     420:	09d2      	lsrs	r2, r2, #7
     422:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     424:	230e      	movs	r3, #14
     426:	18fb      	adds	r3, r7, r3
     428:	1dfa      	adds	r2, r7, #7
     42a:	7812      	ldrb	r2, [r2, #0]
     42c:	0952      	lsrs	r2, r2, #5
     42e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     430:	4b0d      	ldr	r3, [pc, #52]	; (468 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     432:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
     434:	230f      	movs	r3, #15
     436:	18fb      	adds	r3, r7, r3
     438:	781b      	ldrb	r3, [r3, #0]
     43a:	2b00      	cmp	r3, #0
     43c:	d10f      	bne.n	45e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     43e:	230f      	movs	r3, #15
     440:	18fb      	adds	r3, r7, r3
     442:	781b      	ldrb	r3, [r3, #0]
     444:	009b      	lsls	r3, r3, #2
     446:	2210      	movs	r2, #16
     448:	4694      	mov	ip, r2
     44a:	44bc      	add	ip, r7
     44c:	4463      	add	r3, ip
     44e:	3b08      	subs	r3, #8
     450:	681a      	ldr	r2, [r3, #0]
     452:	230e      	movs	r3, #14
     454:	18fb      	adds	r3, r7, r3
     456:	781b      	ldrb	r3, [r3, #0]
     458:	01db      	lsls	r3, r3, #7
     45a:	18d3      	adds	r3, r2, r3
     45c:	e000      	b.n	460 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
     45e:	2300      	movs	r3, #0
}
     460:	0018      	movs	r0, r3
     462:	46bd      	mov	sp, r7
     464:	b004      	add	sp, #16
     466:	bd80      	pop	{r7, pc}
     468:	41004400 	.word	0x41004400

0000046c <port_get_group_from_gpio_pin>:
{
     46c:	b580      	push	{r7, lr}
     46e:	b082      	sub	sp, #8
     470:	af00      	add	r7, sp, #0
     472:	0002      	movs	r2, r0
     474:	1dfb      	adds	r3, r7, #7
     476:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     478:	1dfb      	adds	r3, r7, #7
     47a:	781b      	ldrb	r3, [r3, #0]
     47c:	0018      	movs	r0, r3
     47e:	4b03      	ldr	r3, [pc, #12]	; (48c <port_get_group_from_gpio_pin+0x20>)
     480:	4798      	blx	r3
     482:	0003      	movs	r3, r0
}
     484:	0018      	movs	r0, r3
     486:	46bd      	mov	sp, r7
     488:	b002      	add	sp, #8
     48a:	bd80      	pop	{r7, pc}
     48c:	0000040d 	.word	0x0000040d

00000490 <port_get_config_defaults>:
{
     490:	b580      	push	{r7, lr}
     492:	b082      	sub	sp, #8
     494:	af00      	add	r7, sp, #0
     496:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
     498:	687b      	ldr	r3, [r7, #4]
     49a:	2200      	movs	r2, #0
     49c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     49e:	687b      	ldr	r3, [r7, #4]
     4a0:	2201      	movs	r2, #1
     4a2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     4a4:	687b      	ldr	r3, [r7, #4]
     4a6:	2200      	movs	r2, #0
     4a8:	709a      	strb	r2, [r3, #2]
}
     4aa:	46c0      	nop			; (mov r8, r8)
     4ac:	46bd      	mov	sp, r7
     4ae:	b002      	add	sp, #8
     4b0:	bd80      	pop	{r7, pc}
	...

000004b4 <port_pin_set_output_level>:
{
     4b4:	b580      	push	{r7, lr}
     4b6:	b084      	sub	sp, #16
     4b8:	af00      	add	r7, sp, #0
     4ba:	0002      	movs	r2, r0
     4bc:	1dfb      	adds	r3, r7, #7
     4be:	701a      	strb	r2, [r3, #0]
     4c0:	1dbb      	adds	r3, r7, #6
     4c2:	1c0a      	adds	r2, r1, #0
     4c4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     4c6:	1dfb      	adds	r3, r7, #7
     4c8:	781b      	ldrb	r3, [r3, #0]
     4ca:	0018      	movs	r0, r3
     4cc:	4b0d      	ldr	r3, [pc, #52]	; (504 <port_pin_set_output_level+0x50>)
     4ce:	4798      	blx	r3
     4d0:	0003      	movs	r3, r0
     4d2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     4d4:	1dfb      	adds	r3, r7, #7
     4d6:	781b      	ldrb	r3, [r3, #0]
     4d8:	221f      	movs	r2, #31
     4da:	4013      	ands	r3, r2
     4dc:	2201      	movs	r2, #1
     4de:	409a      	lsls	r2, r3
     4e0:	0013      	movs	r3, r2
     4e2:	60bb      	str	r3, [r7, #8]
	if (level) {
     4e4:	1dbb      	adds	r3, r7, #6
     4e6:	781b      	ldrb	r3, [r3, #0]
     4e8:	2b00      	cmp	r3, #0
     4ea:	d003      	beq.n	4f4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     4ec:	68fb      	ldr	r3, [r7, #12]
     4ee:	68ba      	ldr	r2, [r7, #8]
     4f0:	619a      	str	r2, [r3, #24]
}
     4f2:	e002      	b.n	4fa <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     4f4:	68fb      	ldr	r3, [r7, #12]
     4f6:	68ba      	ldr	r2, [r7, #8]
     4f8:	615a      	str	r2, [r3, #20]
}
     4fa:	46c0      	nop			; (mov r8, r8)
     4fc:	46bd      	mov	sp, r7
     4fe:	b004      	add	sp, #16
     500:	bd80      	pop	{r7, pc}
     502:	46c0      	nop			; (mov r8, r8)
     504:	0000046d 	.word	0x0000046d

00000508 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     508:	b580      	push	{r7, lr}
     50a:	b082      	sub	sp, #8
     50c:	af00      	add	r7, sp, #0
     50e:	0002      	movs	r2, r0
     510:	1dfb      	adds	r3, r7, #7
     512:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     514:	4b06      	ldr	r3, [pc, #24]	; (530 <system_interrupt_enable+0x28>)
     516:	1dfa      	adds	r2, r7, #7
     518:	7812      	ldrb	r2, [r2, #0]
     51a:	0011      	movs	r1, r2
     51c:	221f      	movs	r2, #31
     51e:	400a      	ands	r2, r1
     520:	2101      	movs	r1, #1
     522:	4091      	lsls	r1, r2
     524:	000a      	movs	r2, r1
     526:	601a      	str	r2, [r3, #0]
}
     528:	46c0      	nop			; (mov r8, r8)
     52a:	46bd      	mov	sp, r7
     52c:	b002      	add	sp, #8
     52e:	bd80      	pop	{r7, pc}
     530:	e000e100 	.word	0xe000e100

00000534 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     534:	b580      	push	{r7, lr}
     536:	b082      	sub	sp, #8
     538:	af00      	add	r7, sp, #0
     53a:	0002      	movs	r2, r0
     53c:	1dfb      	adds	r3, r7, #7
     53e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     540:	4a07      	ldr	r2, [pc, #28]	; (560 <system_interrupt_disable+0x2c>)
     542:	1dfb      	adds	r3, r7, #7
     544:	781b      	ldrb	r3, [r3, #0]
     546:	0019      	movs	r1, r3
     548:	231f      	movs	r3, #31
     54a:	400b      	ands	r3, r1
     54c:	2101      	movs	r1, #1
     54e:	4099      	lsls	r1, r3
     550:	000b      	movs	r3, r1
     552:	0019      	movs	r1, r3
     554:	2380      	movs	r3, #128	; 0x80
     556:	50d1      	str	r1, [r2, r3]
}
     558:	46c0      	nop			; (mov r8, r8)
     55a:	46bd      	mov	sp, r7
     55c:	b002      	add	sp, #8
     55e:	bd80      	pop	{r7, pc}
     560:	e000e100 	.word	0xe000e100

00000564 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     564:	b580      	push	{r7, lr}
     566:	b084      	sub	sp, #16
     568:	af00      	add	r7, sp, #0
     56a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     56c:	687b      	ldr	r3, [r7, #4]
     56e:	681b      	ldr	r3, [r3, #0]
     570:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     572:	68fb      	ldr	r3, [r7, #12]
     574:	69db      	ldr	r3, [r3, #28]
     576:	1e5a      	subs	r2, r3, #1
     578:	4193      	sbcs	r3, r2
     57a:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     57c:	0018      	movs	r0, r3
     57e:	46bd      	mov	sp, r7
     580:	b004      	add	sp, #16
     582:	bd80      	pop	{r7, pc}

00000584 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
     584:	b580      	push	{r7, lr}
     586:	b082      	sub	sp, #8
     588:	af00      	add	r7, sp, #0
     58a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     58c:	687b      	ldr	r3, [r7, #4]
     58e:	2201      	movs	r2, #1
     590:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     592:	687b      	ldr	r3, [r7, #4]
     594:	2200      	movs	r2, #0
     596:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     598:	687b      	ldr	r3, [r7, #4]
     59a:	2200      	movs	r2, #0
     59c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     59e:	687b      	ldr	r3, [r7, #4]
     5a0:	22c0      	movs	r2, #192	; 0xc0
     5a2:	0392      	lsls	r2, r2, #14
     5a4:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     5a6:	687b      	ldr	r3, [r7, #4]
     5a8:	2200      	movs	r2, #0
     5aa:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
     5ac:	687b      	ldr	r3, [r7, #4]
     5ae:	2200      	movs	r2, #0
     5b0:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
     5b2:	687b      	ldr	r3, [r7, #4]
     5b4:	2201      	movs	r2, #1
     5b6:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     5b8:	687b      	ldr	r3, [r7, #4]
     5ba:	2201      	movs	r2, #1
     5bc:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     5be:	687b      	ldr	r3, [r7, #4]
     5c0:	2200      	movs	r2, #0
     5c2:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     5c4:	687b      	ldr	r3, [r7, #4]
     5c6:	2224      	movs	r2, #36	; 0x24
     5c8:	2100      	movs	r1, #0
     5ca:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     5cc:	687b      	ldr	r3, [r7, #4]
     5ce:	3318      	adds	r3, #24
     5d0:	220c      	movs	r2, #12
     5d2:	2100      	movs	r1, #0
     5d4:	0018      	movs	r0, r3
     5d6:	4b0a      	ldr	r3, [pc, #40]	; (600 <spi_get_config_defaults+0x7c>)
     5d8:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	4a09      	ldr	r2, [pc, #36]	; (604 <spi_get_config_defaults+0x80>)
     5de:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
     5e0:	687b      	ldr	r3, [r7, #4]
     5e2:	2200      	movs	r2, #0
     5e4:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
     5e6:	687b      	ldr	r3, [r7, #4]
     5e8:	2200      	movs	r2, #0
     5ea:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
     5ec:	687b      	ldr	r3, [r7, #4]
     5ee:	2200      	movs	r2, #0
     5f0:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
     5f2:	687b      	ldr	r3, [r7, #4]
     5f4:	2200      	movs	r2, #0
     5f6:	635a      	str	r2, [r3, #52]	; 0x34

};
     5f8:	46c0      	nop			; (mov r8, r8)
     5fa:	46bd      	mov	sp, r7
     5fc:	b002      	add	sp, #8
     5fe:	bd80      	pop	{r7, pc}
     600:	0000de4b 	.word	0x0000de4b
     604:	000186a0 	.word	0x000186a0

00000608 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
     608:	b580      	push	{r7, lr}
     60a:	b082      	sub	sp, #8
     60c:	af00      	add	r7, sp, #0
     60e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
     610:	687b      	ldr	r3, [r7, #4]
     612:	220a      	movs	r2, #10
     614:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
     616:	687b      	ldr	r3, [r7, #4]
     618:	2200      	movs	r2, #0
     61a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
     61c:	687b      	ldr	r3, [r7, #4]
     61e:	2200      	movs	r2, #0
     620:	709a      	strb	r2, [r3, #2]
}
     622:	46c0      	nop			; (mov r8, r8)
     624:	46bd      	mov	sp, r7
     626:	b002      	add	sp, #8
     628:	bd80      	pop	{r7, pc}
	...

0000062c <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
     62c:	b580      	push	{r7, lr}
     62e:	b084      	sub	sp, #16
     630:	af00      	add	r7, sp, #0
     632:	6078      	str	r0, [r7, #4]
     634:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     636:	683b      	ldr	r3, [r7, #0]
     638:	781a      	ldrb	r2, [r3, #0]
     63a:	687b      	ldr	r3, [r7, #4]
     63c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
     63e:	683b      	ldr	r3, [r7, #0]
     640:	785a      	ldrb	r2, [r3, #1]
     642:	687b      	ldr	r3, [r7, #4]
     644:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
     646:	683b      	ldr	r3, [r7, #0]
     648:	789a      	ldrb	r2, [r3, #2]
     64a:	687b      	ldr	r3, [r7, #4]
     64c:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     64e:	230c      	movs	r3, #12
     650:	18fb      	adds	r3, r7, r3
     652:	0018      	movs	r0, r3
     654:	4b0b      	ldr	r3, [pc, #44]	; (684 <spi_attach_slave+0x58>)
     656:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     658:	230c      	movs	r3, #12
     65a:	18fb      	adds	r3, r7, r3
     65c:	2201      	movs	r2, #1
     65e:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     660:	687b      	ldr	r3, [r7, #4]
     662:	781b      	ldrb	r3, [r3, #0]
     664:	220c      	movs	r2, #12
     666:	18ba      	adds	r2, r7, r2
     668:	0011      	movs	r1, r2
     66a:	0018      	movs	r0, r3
     66c:	4b06      	ldr	r3, [pc, #24]	; (688 <spi_attach_slave+0x5c>)
     66e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     670:	687b      	ldr	r3, [r7, #4]
     672:	781b      	ldrb	r3, [r3, #0]
     674:	2101      	movs	r1, #1
     676:	0018      	movs	r0, r3
     678:	4b04      	ldr	r3, [pc, #16]	; (68c <spi_attach_slave+0x60>)
     67a:	4798      	blx	r3
}
     67c:	46c0      	nop			; (mov r8, r8)
     67e:	46bd      	mov	sp, r7
     680:	b004      	add	sp, #16
     682:	bd80      	pop	{r7, pc}
     684:	00000491 	.word	0x00000491
     688:	00009e21 	.word	0x00009e21
     68c:	000004b5 	.word	0x000004b5

00000690 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     690:	b580      	push	{r7, lr}
     692:	b084      	sub	sp, #16
     694:	af00      	add	r7, sp, #0
     696:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     698:	687b      	ldr	r3, [r7, #4]
     69a:	681b      	ldr	r3, [r3, #0]
     69c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     69e:	687b      	ldr	r3, [r7, #4]
     6a0:	681b      	ldr	r3, [r3, #0]
     6a2:	0018      	movs	r0, r3
     6a4:	4b0b      	ldr	r3, [pc, #44]	; (6d4 <spi_enable+0x44>)
     6a6:	4798      	blx	r3
     6a8:	0003      	movs	r3, r0
     6aa:	0018      	movs	r0, r3
     6ac:	4b0a      	ldr	r3, [pc, #40]	; (6d8 <spi_enable+0x48>)
     6ae:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     6b0:	46c0      	nop			; (mov r8, r8)
     6b2:	687b      	ldr	r3, [r7, #4]
     6b4:	0018      	movs	r0, r3
     6b6:	4b09      	ldr	r3, [pc, #36]	; (6dc <spi_enable+0x4c>)
     6b8:	4798      	blx	r3
     6ba:	1e03      	subs	r3, r0, #0
     6bc:	d1f9      	bne.n	6b2 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     6be:	68fb      	ldr	r3, [r7, #12]
     6c0:	681b      	ldr	r3, [r3, #0]
     6c2:	2202      	movs	r2, #2
     6c4:	431a      	orrs	r2, r3
     6c6:	68fb      	ldr	r3, [r7, #12]
     6c8:	601a      	str	r2, [r3, #0]
}
     6ca:	46c0      	nop			; (mov r8, r8)
     6cc:	46bd      	mov	sp, r7
     6ce:	b004      	add	sp, #16
     6d0:	bd80      	pop	{r7, pc}
     6d2:	46c0      	nop			; (mov r8, r8)
     6d4:	0000a4cd 	.word	0x0000a4cd
     6d8:	00000509 	.word	0x00000509
     6dc:	00000565 	.word	0x00000565

000006e0 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
     6e0:	b580      	push	{r7, lr}
     6e2:	b084      	sub	sp, #16
     6e4:	af00      	add	r7, sp, #0
     6e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     6e8:	687b      	ldr	r3, [r7, #4]
     6ea:	681b      	ldr	r3, [r3, #0]
     6ec:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     6ee:	687b      	ldr	r3, [r7, #4]
     6f0:	681b      	ldr	r3, [r3, #0]
     6f2:	0018      	movs	r0, r3
     6f4:	4b0e      	ldr	r3, [pc, #56]	; (730 <spi_disable+0x50>)
     6f6:	4798      	blx	r3
     6f8:	0003      	movs	r3, r0
     6fa:	0018      	movs	r0, r3
     6fc:	4b0d      	ldr	r3, [pc, #52]	; (734 <spi_disable+0x54>)
     6fe:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     700:	46c0      	nop			; (mov r8, r8)
     702:	687b      	ldr	r3, [r7, #4]
     704:	0018      	movs	r0, r3
     706:	4b0c      	ldr	r3, [pc, #48]	; (738 <spi_disable+0x58>)
     708:	4798      	blx	r3
     70a:	1e03      	subs	r3, r0, #0
     70c:	d1f9      	bne.n	702 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
     70e:	68fb      	ldr	r3, [r7, #12]
     710:	228f      	movs	r2, #143	; 0x8f
     712:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
     714:	68fb      	ldr	r3, [r7, #12]
     716:	228f      	movs	r2, #143	; 0x8f
     718:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     71a:	68fb      	ldr	r3, [r7, #12]
     71c:	681b      	ldr	r3, [r3, #0]
     71e:	2202      	movs	r2, #2
     720:	4393      	bics	r3, r2
     722:	001a      	movs	r2, r3
     724:	68fb      	ldr	r3, [r7, #12]
     726:	601a      	str	r2, [r3, #0]
}
     728:	46c0      	nop			; (mov r8, r8)
     72a:	46bd      	mov	sp, r7
     72c:	b004      	add	sp, #16
     72e:	bd80      	pop	{r7, pc}
     730:	0000a4cd 	.word	0x0000a4cd
     734:	00000535 	.word	0x00000535
     738:	00000565 	.word	0x00000565

0000073c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
     73c:	b580      	push	{r7, lr}
     73e:	b084      	sub	sp, #16
     740:	af00      	add	r7, sp, #0
     742:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     744:	687b      	ldr	r3, [r7, #4]
     746:	681b      	ldr	r3, [r3, #0]
     748:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     74a:	68fb      	ldr	r3, [r7, #12]
     74c:	7e1b      	ldrb	r3, [r3, #24]
     74e:	b2db      	uxtb	r3, r3
     750:	001a      	movs	r2, r3
     752:	2302      	movs	r3, #2
     754:	4013      	ands	r3, r2
     756:	1e5a      	subs	r2, r3, #1
     758:	4193      	sbcs	r3, r2
     75a:	b2db      	uxtb	r3, r3
}
     75c:	0018      	movs	r0, r3
     75e:	46bd      	mov	sp, r7
     760:	b004      	add	sp, #16
     762:	bd80      	pop	{r7, pc}

00000764 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     764:	b580      	push	{r7, lr}
     766:	b084      	sub	sp, #16
     768:	af00      	add	r7, sp, #0
     76a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     76c:	687b      	ldr	r3, [r7, #4]
     76e:	681b      	ldr	r3, [r3, #0]
     770:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     772:	68fb      	ldr	r3, [r7, #12]
     774:	7e1b      	ldrb	r3, [r3, #24]
     776:	b2db      	uxtb	r3, r3
     778:	001a      	movs	r2, r3
     77a:	2301      	movs	r3, #1
     77c:	4013      	ands	r3, r2
     77e:	1e5a      	subs	r2, r3, #1
     780:	4193      	sbcs	r3, r2
     782:	b2db      	uxtb	r3, r3
}
     784:	0018      	movs	r0, r3
     786:	46bd      	mov	sp, r7
     788:	b004      	add	sp, #16
     78a:	bd80      	pop	{r7, pc}

0000078c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     78c:	b580      	push	{r7, lr}
     78e:	b084      	sub	sp, #16
     790:	af00      	add	r7, sp, #0
     792:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     794:	687b      	ldr	r3, [r7, #4]
     796:	681b      	ldr	r3, [r3, #0]
     798:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     79a:	68fb      	ldr	r3, [r7, #12]
     79c:	7e1b      	ldrb	r3, [r3, #24]
     79e:	b2db      	uxtb	r3, r3
     7a0:	001a      	movs	r2, r3
     7a2:	2304      	movs	r3, #4
     7a4:	4013      	ands	r3, r2
     7a6:	1e5a      	subs	r2, r3, #1
     7a8:	4193      	sbcs	r3, r2
     7aa:	b2db      	uxtb	r3, r3
}
     7ac:	0018      	movs	r0, r3
     7ae:	46bd      	mov	sp, r7
     7b0:	b004      	add	sp, #16
     7b2:	bd80      	pop	{r7, pc}

000007b4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     7b4:	b580      	push	{r7, lr}
     7b6:	b084      	sub	sp, #16
     7b8:	af00      	add	r7, sp, #0
     7ba:	6078      	str	r0, [r7, #4]
     7bc:	000a      	movs	r2, r1
     7be:	1cbb      	adds	r3, r7, #2
     7c0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     7c2:	687b      	ldr	r3, [r7, #4]
     7c4:	681b      	ldr	r3, [r3, #0]
     7c6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     7c8:	687b      	ldr	r3, [r7, #4]
     7ca:	0018      	movs	r0, r3
     7cc:	4b0a      	ldr	r3, [pc, #40]	; (7f8 <spi_write+0x44>)
     7ce:	4798      	blx	r3
     7d0:	0003      	movs	r3, r0
     7d2:	001a      	movs	r2, r3
     7d4:	2301      	movs	r3, #1
     7d6:	4053      	eors	r3, r2
     7d8:	b2db      	uxtb	r3, r3
     7da:	2b00      	cmp	r3, #0
     7dc:	d001      	beq.n	7e2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     7de:	2305      	movs	r3, #5
     7e0:	e006      	b.n	7f0 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     7e2:	1cbb      	adds	r3, r7, #2
     7e4:	881b      	ldrh	r3, [r3, #0]
     7e6:	05db      	lsls	r3, r3, #23
     7e8:	0dda      	lsrs	r2, r3, #23
     7ea:	68fb      	ldr	r3, [r7, #12]
     7ec:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     7ee:	2300      	movs	r3, #0
}
     7f0:	0018      	movs	r0, r3
     7f2:	46bd      	mov	sp, r7
     7f4:	b004      	add	sp, #16
     7f6:	bd80      	pop	{r7, pc}
     7f8:	00000765 	.word	0x00000765

000007fc <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     7fc:	b580      	push	{r7, lr}
     7fe:	b084      	sub	sp, #16
     800:	af00      	add	r7, sp, #0
     802:	6078      	str	r0, [r7, #4]
     804:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     806:	687b      	ldr	r3, [r7, #4]
     808:	681b      	ldr	r3, [r3, #0]
     80a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     80c:	687b      	ldr	r3, [r7, #4]
     80e:	0018      	movs	r0, r3
     810:	4b1b      	ldr	r3, [pc, #108]	; (880 <spi_read+0x84>)
     812:	4798      	blx	r3
     814:	0003      	movs	r3, r0
     816:	001a      	movs	r2, r3
     818:	2301      	movs	r3, #1
     81a:	4053      	eors	r3, r2
     81c:	b2db      	uxtb	r3, r3
     81e:	2b00      	cmp	r3, #0
     820:	d001      	beq.n	826 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     822:	2310      	movs	r3, #16
     824:	e027      	b.n	876 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     826:	230f      	movs	r3, #15
     828:	18fb      	adds	r3, r7, r3
     82a:	2200      	movs	r2, #0
     82c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     82e:	68bb      	ldr	r3, [r7, #8]
     830:	8b5b      	ldrh	r3, [r3, #26]
     832:	b29b      	uxth	r3, r3
     834:	001a      	movs	r2, r3
     836:	2304      	movs	r3, #4
     838:	4013      	ands	r3, r2
     83a:	d006      	beq.n	84a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
     83c:	230f      	movs	r3, #15
     83e:	18fb      	adds	r3, r7, r3
     840:	221e      	movs	r2, #30
     842:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     844:	68bb      	ldr	r3, [r7, #8]
     846:	2204      	movs	r2, #4
     848:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     84a:	687b      	ldr	r3, [r7, #4]
     84c:	799b      	ldrb	r3, [r3, #6]
     84e:	2b01      	cmp	r3, #1
     850:	d108      	bne.n	864 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     852:	68bb      	ldr	r3, [r7, #8]
     854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     856:	b29b      	uxth	r3, r3
     858:	05db      	lsls	r3, r3, #23
     85a:	0ddb      	lsrs	r3, r3, #23
     85c:	b29a      	uxth	r2, r3
     85e:	683b      	ldr	r3, [r7, #0]
     860:	801a      	strh	r2, [r3, #0]
     862:	e005      	b.n	870 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     864:	68bb      	ldr	r3, [r7, #8]
     866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     868:	b2db      	uxtb	r3, r3
     86a:	b29a      	uxth	r2, r3
     86c:	683b      	ldr	r3, [r7, #0]
     86e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     870:	230f      	movs	r3, #15
     872:	18fb      	adds	r3, r7, r3
     874:	781b      	ldrb	r3, [r3, #0]
}
     876:	0018      	movs	r0, r3
     878:	46bd      	mov	sp, r7
     87a:	b004      	add	sp, #16
     87c:	bd80      	pop	{r7, pc}
     87e:	46c0      	nop			; (mov r8, r8)
     880:	0000078d 	.word	0x0000078d

00000884 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
     884:	b580      	push	{r7, lr}
     886:	b086      	sub	sp, #24
     888:	af00      	add	r7, sp, #0
     88a:	60f8      	str	r0, [r7, #12]
     88c:	60b9      	str	r1, [r7, #8]
     88e:	1dbb      	adds	r3, r7, #6
     890:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
     892:	2313      	movs	r3, #19
     894:	18fb      	adds	r3, r7, r3
     896:	2200      	movs	r2, #0
     898:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     89a:	2317      	movs	r3, #23
     89c:	18fb      	adds	r3, r7, r3
     89e:	2200      	movs	r2, #0
     8a0:	701a      	strb	r2, [r3, #0]
     8a2:	2316      	movs	r3, #22
     8a4:	18fb      	adds	r3, r7, r3
     8a6:	2200      	movs	r2, #0
     8a8:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
     8aa:	2314      	movs	r3, #20
     8ac:	18fb      	adds	r3, r7, r3
     8ae:	2200      	movs	r2, #0
     8b0:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
     8b2:	2310      	movs	r3, #16
     8b4:	18fb      	adds	r3, r7, r3
     8b6:	2200      	movs	r2, #0
     8b8:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     8ba:	68bb      	ldr	r3, [r7, #8]
     8bc:	2b00      	cmp	r3, #0
     8be:	d102      	bne.n	8c6 <spi_rw+0x42>
     8c0:	68fb      	ldr	r3, [r7, #12]
     8c2:	2b00      	cmp	r3, #0
     8c4:	d003      	beq.n	8ce <spi_rw+0x4a>
     8c6:	1dbb      	adds	r3, r7, #6
     8c8:	881b      	ldrh	r3, [r3, #0]
     8ca:	2b00      	cmp	r3, #0
     8cc:	d102      	bne.n	8d4 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
     8ce:	230f      	movs	r3, #15
     8d0:	425b      	negs	r3, r3
     8d2:	e07e      	b.n	9d2 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
     8d4:	68fb      	ldr	r3, [r7, #12]
     8d6:	2b00      	cmp	r3, #0
     8d8:	d106      	bne.n	8e8 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
     8da:	2313      	movs	r3, #19
     8dc:	18fb      	adds	r3, r7, r3
     8de:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
     8e0:	2317      	movs	r3, #23
     8e2:	18fb      	adds	r3, r7, r3
     8e4:	2201      	movs	r2, #1
     8e6:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
     8e8:	68bb      	ldr	r3, [r7, #8]
     8ea:	2b00      	cmp	r3, #0
     8ec:	d106      	bne.n	8fc <spi_rw+0x78>
		pu8Miso = &u8Dummy;
     8ee:	2313      	movs	r3, #19
     8f0:	18fb      	adds	r3, r7, r3
     8f2:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
     8f4:	2316      	movs	r3, #22
     8f6:	18fb      	adds	r3, r7, r3
     8f8:	2201      	movs	r2, #1
     8fa:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
     8fc:	4937      	ldr	r1, [pc, #220]	; (9dc <spi_rw+0x158>)
     8fe:	4b38      	ldr	r3, [pc, #224]	; (9e0 <spi_rw+0x15c>)
     900:	2201      	movs	r2, #1
     902:	0018      	movs	r0, r3
     904:	4b37      	ldr	r3, [pc, #220]	; (9e4 <spi_rw+0x160>)
     906:	4798      	blx	r3

	while (u16Sz) {
     908:	e04c      	b.n	9a4 <spi_rw+0x120>
		txd_data = *pu8Mosi;
     90a:	68fb      	ldr	r3, [r7, #12]
     90c:	781a      	ldrb	r2, [r3, #0]
     90e:	2314      	movs	r3, #20
     910:	18fb      	adds	r3, r7, r3
     912:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
     914:	46c0      	nop			; (mov r8, r8)
     916:	4b32      	ldr	r3, [pc, #200]	; (9e0 <spi_rw+0x15c>)
     918:	0018      	movs	r0, r3
     91a:	4b33      	ldr	r3, [pc, #204]	; (9e8 <spi_rw+0x164>)
     91c:	4798      	blx	r3
     91e:	0003      	movs	r3, r0
     920:	001a      	movs	r2, r3
     922:	2301      	movs	r3, #1
     924:	4053      	eors	r3, r2
     926:	b2db      	uxtb	r3, r3
     928:	2b00      	cmp	r3, #0
     92a:	d1f4      	bne.n	916 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
     92c:	46c0      	nop			; (mov r8, r8)
     92e:	2314      	movs	r3, #20
     930:	18fb      	adds	r3, r7, r3
     932:	881a      	ldrh	r2, [r3, #0]
     934:	4b2a      	ldr	r3, [pc, #168]	; (9e0 <spi_rw+0x15c>)
     936:	0011      	movs	r1, r2
     938:	0018      	movs	r0, r3
     93a:	4b2c      	ldr	r3, [pc, #176]	; (9ec <spi_rw+0x168>)
     93c:	4798      	blx	r3
     93e:	1e03      	subs	r3, r0, #0
     940:	d1f5      	bne.n	92e <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
     942:	46c0      	nop			; (mov r8, r8)
     944:	4b26      	ldr	r3, [pc, #152]	; (9e0 <spi_rw+0x15c>)
     946:	0018      	movs	r0, r3
     948:	4b29      	ldr	r3, [pc, #164]	; (9f0 <spi_rw+0x16c>)
     94a:	4798      	blx	r3
     94c:	0003      	movs	r3, r0
     94e:	001a      	movs	r2, r3
     950:	2301      	movs	r3, #1
     952:	4053      	eors	r3, r2
     954:	b2db      	uxtb	r3, r3
     956:	2b00      	cmp	r3, #0
     958:	d1f4      	bne.n	944 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     95a:	46c0      	nop			; (mov r8, r8)
     95c:	2310      	movs	r3, #16
     95e:	18fa      	adds	r2, r7, r3
     960:	4b1f      	ldr	r3, [pc, #124]	; (9e0 <spi_rw+0x15c>)
     962:	0011      	movs	r1, r2
     964:	0018      	movs	r0, r3
     966:	4b23      	ldr	r3, [pc, #140]	; (9f4 <spi_rw+0x170>)
     968:	4798      	blx	r3
     96a:	1e03      	subs	r3, r0, #0
     96c:	d1f6      	bne.n	95c <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
     96e:	2310      	movs	r3, #16
     970:	18fb      	adds	r3, r7, r3
     972:	881b      	ldrh	r3, [r3, #0]
     974:	b2da      	uxtb	r2, r3
     976:	68bb      	ldr	r3, [r7, #8]
     978:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
     97a:	1dbb      	adds	r3, r7, #6
     97c:	881a      	ldrh	r2, [r3, #0]
     97e:	1dbb      	adds	r3, r7, #6
     980:	3a01      	subs	r2, #1
     982:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
     984:	2316      	movs	r3, #22
     986:	18fb      	adds	r3, r7, r3
     988:	781b      	ldrb	r3, [r3, #0]
     98a:	2b00      	cmp	r3, #0
     98c:	d102      	bne.n	994 <spi_rw+0x110>
			pu8Miso++;
     98e:	68bb      	ldr	r3, [r7, #8]
     990:	3301      	adds	r3, #1
     992:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
     994:	2317      	movs	r3, #23
     996:	18fb      	adds	r3, r7, r3
     998:	781b      	ldrb	r3, [r3, #0]
     99a:	2b00      	cmp	r3, #0
     99c:	d102      	bne.n	9a4 <spi_rw+0x120>
			pu8Mosi++;
     99e:	68fb      	ldr	r3, [r7, #12]
     9a0:	3301      	adds	r3, #1
     9a2:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
     9a4:	1dbb      	adds	r3, r7, #6
     9a6:	881b      	ldrh	r3, [r3, #0]
     9a8:	2b00      	cmp	r3, #0
     9aa:	d1ae      	bne.n	90a <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
     9ac:	46c0      	nop			; (mov r8, r8)
     9ae:	4b0c      	ldr	r3, [pc, #48]	; (9e0 <spi_rw+0x15c>)
     9b0:	0018      	movs	r0, r3
     9b2:	4b11      	ldr	r3, [pc, #68]	; (9f8 <spi_rw+0x174>)
     9b4:	4798      	blx	r3
     9b6:	0003      	movs	r3, r0
     9b8:	001a      	movs	r2, r3
     9ba:	2301      	movs	r3, #1
     9bc:	4053      	eors	r3, r2
     9be:	b2db      	uxtb	r3, r3
     9c0:	2b00      	cmp	r3, #0
     9c2:	d1f4      	bne.n	9ae <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
     9c4:	4905      	ldr	r1, [pc, #20]	; (9dc <spi_rw+0x158>)
     9c6:	4b06      	ldr	r3, [pc, #24]	; (9e0 <spi_rw+0x15c>)
     9c8:	2200      	movs	r2, #0
     9ca:	0018      	movs	r0, r3
     9cc:	4b05      	ldr	r3, [pc, #20]	; (9e4 <spi_rw+0x160>)
     9ce:	4798      	blx	r3

	return M2M_SUCCESS;
     9d0:	2300      	movs	r3, #0
}
     9d2:	0018      	movs	r0, r3
     9d4:	46bd      	mov	sp, r7
     9d6:	b006      	add	sp, #24
     9d8:	bd80      	pop	{r7, pc}
     9da:	46c0      	nop			; (mov r8, r8)
     9dc:	200002ac 	.word	0x200002ac
     9e0:	200002b0 	.word	0x200002b0
     9e4:	0000ad59 	.word	0x0000ad59
     9e8:	00000765 	.word	0x00000765
     9ec:	000007b5 	.word	0x000007b5
     9f0:	0000078d 	.word	0x0000078d
     9f4:	000007fd 	.word	0x000007fd
     9f8:	0000073d 	.word	0x0000073d

000009fc <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     9fc:	b580      	push	{r7, lr}
     9fe:	b092      	sub	sp, #72	; 0x48
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
     a04:	2347      	movs	r3, #71	; 0x47
     a06:	18fb      	adds	r3, r7, r3
     a08:	2200      	movs	r2, #0
     a0a:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
     a0c:	2308      	movs	r3, #8
     a0e:	18fb      	adds	r3, r7, r3
     a10:	0018      	movs	r0, r3
     a12:	4b26      	ldr	r3, [pc, #152]	; (aac <nm_bus_init+0xb0>)
     a14:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
     a16:	2308      	movs	r3, #8
     a18:	18fb      	adds	r3, r7, r3
     a1a:	220e      	movs	r2, #14
     a1c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
     a1e:	2308      	movs	r3, #8
     a20:	18fa      	adds	r2, r7, r3
     a22:	4b23      	ldr	r3, [pc, #140]	; (ab0 <nm_bus_init+0xb4>)
     a24:	0011      	movs	r1, r2
     a26:	0018      	movs	r0, r3
     a28:	4b22      	ldr	r3, [pc, #136]	; (ab4 <nm_bus_init+0xb8>)
     a2a:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
     a2c:	230c      	movs	r3, #12
     a2e:	18fb      	adds	r3, r7, r3
     a30:	0018      	movs	r0, r3
     a32:	4b21      	ldr	r3, [pc, #132]	; (ab8 <nm_bus_init+0xbc>)
     a34:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
     a36:	230c      	movs	r3, #12
     a38:	18fb      	adds	r3, r7, r3
     a3a:	22c0      	movs	r2, #192	; 0xc0
     a3c:	0392      	lsls	r2, r2, #14
     a3e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     a40:	230c      	movs	r3, #12
     a42:	18fb      	adds	r3, r7, r3
     a44:	4a1d      	ldr	r2, [pc, #116]	; (abc <nm_bus_init+0xc0>)
     a46:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     a48:	230c      	movs	r3, #12
     a4a:	18fb      	adds	r3, r7, r3
     a4c:	4a1c      	ldr	r2, [pc, #112]	; (ac0 <nm_bus_init+0xc4>)
     a4e:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     a50:	230c      	movs	r3, #12
     a52:	18fb      	adds	r3, r7, r3
     a54:	2201      	movs	r2, #1
     a56:	4252      	negs	r2, r2
     a58:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     a5a:	230c      	movs	r3, #12
     a5c:	18fb      	adds	r3, r7, r3
     a5e:	4a19      	ldr	r2, [pc, #100]	; (ac4 <nm_bus_init+0xc8>)
     a60:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
     a62:	230c      	movs	r3, #12
     a64:	18fb      	adds	r3, r7, r3
     a66:	2200      	movs	r2, #0
     a68:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     a6a:	230c      	movs	r3, #12
     a6c:	18fb      	adds	r3, r7, r3
     a6e:	4a16      	ldr	r2, [pc, #88]	; (ac8 <nm_bus_init+0xcc>)
     a70:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     a72:	230c      	movs	r3, #12
     a74:	18fa      	adds	r2, r7, r3
     a76:	4915      	ldr	r1, [pc, #84]	; (acc <nm_bus_init+0xd0>)
     a78:	4b15      	ldr	r3, [pc, #84]	; (ad0 <nm_bus_init+0xd4>)
     a7a:	0018      	movs	r0, r3
     a7c:	4b15      	ldr	r3, [pc, #84]	; (ad4 <nm_bus_init+0xd8>)
     a7e:	4798      	blx	r3
     a80:	1e03      	subs	r3, r0, #0
     a82:	d002      	beq.n	a8a <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
     a84:	2306      	movs	r3, #6
     a86:	425b      	negs	r3, r3
     a88:	e00c      	b.n	aa4 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
     a8a:	4b11      	ldr	r3, [pc, #68]	; (ad0 <nm_bus_init+0xd4>)
     a8c:	0018      	movs	r0, r3
     a8e:	4b12      	ldr	r3, [pc, #72]	; (ad8 <nm_bus_init+0xdc>)
     a90:	4798      	blx	r3

	nm_bsp_reset();
     a92:	4b12      	ldr	r3, [pc, #72]	; (adc <nm_bus_init+0xe0>)
     a94:	4798      	blx	r3
	nm_bsp_sleep(1);
     a96:	2001      	movs	r0, #1
     a98:	4b11      	ldr	r3, [pc, #68]	; (ae0 <nm_bus_init+0xe4>)
     a9a:	4798      	blx	r3
#endif
	return result;
     a9c:	2347      	movs	r3, #71	; 0x47
     a9e:	18fb      	adds	r3, r7, r3
     aa0:	781b      	ldrb	r3, [r3, #0]
     aa2:	b25b      	sxtb	r3, r3
}
     aa4:	0018      	movs	r0, r3
     aa6:	46bd      	mov	sp, r7
     aa8:	b012      	add	sp, #72	; 0x48
     aaa:	bd80      	pop	{r7, pc}
     aac:	00000609 	.word	0x00000609
     ab0:	200002ac 	.word	0x200002ac
     ab4:	0000062d 	.word	0x0000062d
     ab8:	00000585 	.word	0x00000585
     abc:	000c0002 	.word	0x000c0002
     ac0:	000d0002 	.word	0x000d0002
     ac4:	000f0002 	.word	0x000f0002
     ac8:	00b71b00 	.word	0x00b71b00
     acc:	42001000 	.word	0x42001000
     ad0:	200002b0 	.word	0x200002b0
     ad4:	0000aa95 	.word	0x0000aa95
     ad8:	00000691 	.word	0x00000691
     adc:	000002f1 	.word	0x000002f1
     ae0:	00000335 	.word	0x00000335

00000ae4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     ae4:	b590      	push	{r4, r7, lr}
     ae6:	b085      	sub	sp, #20
     ae8:	af00      	add	r7, sp, #0
     aea:	0002      	movs	r2, r0
     aec:	6039      	str	r1, [r7, #0]
     aee:	1dfb      	adds	r3, r7, #7
     af0:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
     af2:	230f      	movs	r3, #15
     af4:	18fb      	adds	r3, r7, r3
     af6:	2200      	movs	r2, #0
     af8:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
     afa:	1dfb      	adds	r3, r7, #7
     afc:	781b      	ldrb	r3, [r3, #0]
     afe:	2b03      	cmp	r3, #3
     b00:	d10f      	bne.n	b22 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
     b02:	683b      	ldr	r3, [r7, #0]
     b04:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     b06:	68bb      	ldr	r3, [r7, #8]
     b08:	6818      	ldr	r0, [r3, #0]
     b0a:	68bb      	ldr	r3, [r7, #8]
     b0c:	6859      	ldr	r1, [r3, #4]
     b0e:	68bb      	ldr	r3, [r7, #8]
     b10:	891b      	ldrh	r3, [r3, #8]
     b12:	220f      	movs	r2, #15
     b14:	18bc      	adds	r4, r7, r2
     b16:	001a      	movs	r2, r3
     b18:	4b10      	ldr	r3, [pc, #64]	; (b5c <nm_bus_ioctl+0x78>)
     b1a:	4798      	blx	r3
     b1c:	0003      	movs	r3, r0
     b1e:	7023      	strb	r3, [r4, #0]
		}
		break;
     b20:	e013      	b.n	b4a <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
     b22:	230f      	movs	r3, #15
     b24:	18fb      	adds	r3, r7, r3
     b26:	22ff      	movs	r2, #255	; 0xff
     b28:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
     b2a:	230e      	movs	r3, #14
     b2c:	33ff      	adds	r3, #255	; 0xff
     b2e:	001a      	movs	r2, r3
     b30:	490b      	ldr	r1, [pc, #44]	; (b60 <nm_bus_ioctl+0x7c>)
     b32:	4b0c      	ldr	r3, [pc, #48]	; (b64 <nm_bus_ioctl+0x80>)
     b34:	0018      	movs	r0, r3
     b36:	4b0c      	ldr	r3, [pc, #48]	; (b68 <nm_bus_ioctl+0x84>)
     b38:	4798      	blx	r3
     b3a:	4b0c      	ldr	r3, [pc, #48]	; (b6c <nm_bus_ioctl+0x88>)
     b3c:	0018      	movs	r0, r3
     b3e:	4b0c      	ldr	r3, [pc, #48]	; (b70 <nm_bus_ioctl+0x8c>)
     b40:	4798      	blx	r3
     b42:	200d      	movs	r0, #13
     b44:	4b0b      	ldr	r3, [pc, #44]	; (b74 <nm_bus_ioctl+0x90>)
     b46:	4798      	blx	r3
			break;
     b48:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
     b4a:	230f      	movs	r3, #15
     b4c:	18fb      	adds	r3, r7, r3
     b4e:	781b      	ldrb	r3, [r3, #0]
     b50:	b25b      	sxtb	r3, r3
}
     b52:	0018      	movs	r0, r3
     b54:	46bd      	mov	sp, r7
     b56:	b005      	add	sp, #20
     b58:	bd90      	pop	{r4, r7, pc}
     b5a:	46c0      	nop			; (mov r8, r8)
     b5c:	00000885 	.word	0x00000885
     b60:	0000f550 	.word	0x0000f550
     b64:	0000f528 	.word	0x0000f528
     b68:	0000dfad 	.word	0x0000dfad
     b6c:	0000f53c 	.word	0x0000f53c
     b70:	0000e0c9 	.word	0x0000e0c9
     b74:	0000dfe1 	.word	0x0000dfe1

00000b78 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     b78:	b580      	push	{r7, lr}
     b7a:	b082      	sub	sp, #8
     b7c:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
     b7e:	1dfb      	adds	r3, r7, #7
     b80:	2200      	movs	r2, #0
     b82:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
     b84:	1d3b      	adds	r3, r7, #4
     b86:	0018      	movs	r0, r3
     b88:	4b13      	ldr	r3, [pc, #76]	; (bd8 <nm_bus_deinit+0x60>)
     b8a:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     b8c:	1d3b      	adds	r3, r7, #4
     b8e:	2200      	movs	r2, #0
     b90:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
     b92:	1d3b      	adds	r3, r7, #4
     b94:	2200      	movs	r2, #0
     b96:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
     b98:	4b10      	ldr	r3, [pc, #64]	; (bdc <nm_bus_deinit+0x64>)
     b9a:	0018      	movs	r0, r3
     b9c:	4b10      	ldr	r3, [pc, #64]	; (be0 <nm_bus_deinit+0x68>)
     b9e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
     ba0:	1d3b      	adds	r3, r7, #4
     ba2:	0019      	movs	r1, r3
     ba4:	200c      	movs	r0, #12
     ba6:	4b0f      	ldr	r3, [pc, #60]	; (be4 <nm_bus_deinit+0x6c>)
     ba8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
     baa:	1d3b      	adds	r3, r7, #4
     bac:	0019      	movs	r1, r3
     bae:	200f      	movs	r0, #15
     bb0:	4b0c      	ldr	r3, [pc, #48]	; (be4 <nm_bus_deinit+0x6c>)
     bb2:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
     bb4:	1d3b      	adds	r3, r7, #4
     bb6:	0019      	movs	r1, r3
     bb8:	200d      	movs	r0, #13
     bba:	4b0a      	ldr	r3, [pc, #40]	; (be4 <nm_bus_deinit+0x6c>)
     bbc:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
     bbe:	1d3b      	adds	r3, r7, #4
     bc0:	0019      	movs	r1, r3
     bc2:	200e      	movs	r0, #14
     bc4:	4b07      	ldr	r3, [pc, #28]	; (be4 <nm_bus_deinit+0x6c>)
     bc6:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
     bc8:	1dfb      	adds	r3, r7, #7
     bca:	781b      	ldrb	r3, [r3, #0]
     bcc:	b25b      	sxtb	r3, r3
}
     bce:	0018      	movs	r0, r3
     bd0:	46bd      	mov	sp, r7
     bd2:	b002      	add	sp, #8
     bd4:	bd80      	pop	{r7, pc}
     bd6:	46c0      	nop			; (mov r8, r8)
     bd8:	00000491 	.word	0x00000491
     bdc:	200002b0 	.word	0x200002b0
     be0:	000006e1 	.word	0x000006e1
     be4:	00009e21 	.word	0x00009e21

00000be8 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
     be8:	b580      	push	{r7, lr}
     bea:	b084      	sub	sp, #16
     bec:	af00      	add	r7, sp, #0
     bee:	60f8      	str	r0, [r7, #12]
     bf0:	60b9      	str	r1, [r7, #8]
     bf2:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
     bf4:	687b      	ldr	r3, [r7, #4]
     bf6:	2b00      	cmp	r3, #0
     bf8:	d010      	beq.n	c1c <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
     bfa:	68bb      	ldr	r3, [r7, #8]
     bfc:	781a      	ldrb	r2, [r3, #0]
     bfe:	68fb      	ldr	r3, [r7, #12]
     c00:	701a      	strb	r2, [r3, #0]
		pDst++;
     c02:	68fb      	ldr	r3, [r7, #12]
     c04:	3301      	adds	r3, #1
     c06:	60fb      	str	r3, [r7, #12]
		pSrc++;
     c08:	68bb      	ldr	r3, [r7, #8]
     c0a:	3301      	adds	r3, #1
     c0c:	60bb      	str	r3, [r7, #8]
	}while(--sz);
     c0e:	687b      	ldr	r3, [r7, #4]
     c10:	3b01      	subs	r3, #1
     c12:	607b      	str	r3, [r7, #4]
     c14:	687b      	ldr	r3, [r7, #4]
     c16:	2b00      	cmp	r3, #0
     c18:	d1ef      	bne.n	bfa <m2m_memcpy+0x12>
     c1a:	e000      	b.n	c1e <m2m_memcpy+0x36>
	if(sz == 0) return;
     c1c:	46c0      	nop			; (mov r8, r8)
}
     c1e:	46bd      	mov	sp, r7
     c20:	b004      	add	sp, #16
     c22:	bd80      	pop	{r7, pc}

00000c24 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
     c24:	b580      	push	{r7, lr}
     c26:	b084      	sub	sp, #16
     c28:	af00      	add	r7, sp, #0
     c2a:	60f8      	str	r0, [r7, #12]
     c2c:	607a      	str	r2, [r7, #4]
     c2e:	230b      	movs	r3, #11
     c30:	18fb      	adds	r3, r7, r3
     c32:	1c0a      	adds	r2, r1, #0
     c34:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
     c36:	687b      	ldr	r3, [r7, #4]
     c38:	2b00      	cmp	r3, #0
     c3a:	d00e      	beq.n	c5a <m2m_memset+0x36>
	do
	{
		*pBuf = val;
     c3c:	68fb      	ldr	r3, [r7, #12]
     c3e:	220b      	movs	r2, #11
     c40:	18ba      	adds	r2, r7, r2
     c42:	7812      	ldrb	r2, [r2, #0]
     c44:	701a      	strb	r2, [r3, #0]
		pBuf++;
     c46:	68fb      	ldr	r3, [r7, #12]
     c48:	3301      	adds	r3, #1
     c4a:	60fb      	str	r3, [r7, #12]
	}while(--sz);
     c4c:	687b      	ldr	r3, [r7, #4]
     c4e:	3b01      	subs	r3, #1
     c50:	607b      	str	r3, [r7, #4]
     c52:	687b      	ldr	r3, [r7, #4]
     c54:	2b00      	cmp	r3, #0
     c56:	d1f1      	bne.n	c3c <m2m_memset+0x18>
     c58:	e000      	b.n	c5c <m2m_memset+0x38>
	if(sz == 0) return;
     c5a:	46c0      	nop			; (mov r8, r8)
}
     c5c:	46bd      	mov	sp, r7
     c5e:	b004      	add	sp, #16
     c60:	bd80      	pop	{r7, pc}

00000c62 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
     c62:	b580      	push	{r7, lr}
     c64:	b084      	sub	sp, #16
     c66:	af00      	add	r7, sp, #0
     c68:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
     c6a:	230e      	movs	r3, #14
     c6c:	18fb      	adds	r3, r7, r3
     c6e:	2200      	movs	r2, #0
     c70:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
     c72:	e009      	b.n	c88 <m2m_strlen+0x26>
	{
		u16StrLen ++;
     c74:	230e      	movs	r3, #14
     c76:	18fb      	adds	r3, r7, r3
     c78:	881a      	ldrh	r2, [r3, #0]
     c7a:	230e      	movs	r3, #14
     c7c:	18fb      	adds	r3, r7, r3
     c7e:	3201      	adds	r2, #1
     c80:	801a      	strh	r2, [r3, #0]
		pcStr++;
     c82:	687b      	ldr	r3, [r7, #4]
     c84:	3301      	adds	r3, #1
     c86:	607b      	str	r3, [r7, #4]
	while(*pcStr)
     c88:	687b      	ldr	r3, [r7, #4]
     c8a:	781b      	ldrb	r3, [r3, #0]
     c8c:	2b00      	cmp	r3, #0
     c8e:	d1f1      	bne.n	c74 <m2m_strlen+0x12>
	}
	return u16StrLen;
     c90:	230e      	movs	r3, #14
     c92:	18fb      	adds	r3, r7, r3
     c94:	881b      	ldrh	r3, [r3, #0]
}
     c96:	0018      	movs	r0, r3
     c98:	46bd      	mov	sp, r7
     c9a:	b004      	add	sp, #16
     c9c:	bd80      	pop	{r7, pc}
	...

00000ca0 <isr>:
}tstrHifContext;

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
     ca0:	b580      	push	{r7, lr}
     ca2:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
     ca4:	4b04      	ldr	r3, [pc, #16]	; (cb8 <isr+0x18>)
     ca6:	78db      	ldrb	r3, [r3, #3]
     ca8:	b2db      	uxtb	r3, r3
     caa:	3301      	adds	r3, #1
     cac:	b2da      	uxtb	r2, r3
     cae:	4b02      	ldr	r3, [pc, #8]	; (cb8 <isr+0x18>)
     cb0:	70da      	strb	r2, [r3, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
     cb2:	46c0      	nop			; (mov r8, r8)
     cb4:	46bd      	mov	sp, r7
     cb6:	bd80      	pop	{r7, pc}
     cb8:	200002ec 	.word	0x200002ec

00000cbc <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
     cbc:	b590      	push	{r4, r7, lr}
     cbe:	b083      	sub	sp, #12
     cc0:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
     cc2:	1dfb      	adds	r3, r7, #7
     cc4:	2200      	movs	r2, #0
     cc6:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
     cc8:	4b14      	ldr	r3, [pc, #80]	; (d1c <hif_set_rx_done+0x60>)
     cca:	2200      	movs	r2, #0
     ccc:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
     cce:	2001      	movs	r0, #1
     cd0:	4b13      	ldr	r3, [pc, #76]	; (d20 <hif_set_rx_done+0x64>)
     cd2:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     cd4:	1dfc      	adds	r4, r7, #7
     cd6:	003b      	movs	r3, r7
     cd8:	4a12      	ldr	r2, [pc, #72]	; (d24 <hif_set_rx_done+0x68>)
     cda:	0019      	movs	r1, r3
     cdc:	0010      	movs	r0, r2
     cde:	4b12      	ldr	r3, [pc, #72]	; (d28 <hif_set_rx_done+0x6c>)
     ce0:	4798      	blx	r3
     ce2:	0003      	movs	r3, r0
     ce4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
     ce6:	1dfb      	adds	r3, r7, #7
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b25b      	sxtb	r3, r3
     cec:	2b00      	cmp	r3, #0
     cee:	d10d      	bne.n	d0c <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
     cf0:	683b      	ldr	r3, [r7, #0]
     cf2:	2202      	movs	r2, #2
     cf4:	4313      	orrs	r3, r2
     cf6:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     cf8:	683b      	ldr	r3, [r7, #0]
     cfa:	1dfc      	adds	r4, r7, #7
     cfc:	4a09      	ldr	r2, [pc, #36]	; (d24 <hif_set_rx_done+0x68>)
     cfe:	0019      	movs	r1, r3
     d00:	0010      	movs	r0, r2
     d02:	4b0a      	ldr	r3, [pc, #40]	; (d2c <hif_set_rx_done+0x70>)
     d04:	4798      	blx	r3
     d06:	0003      	movs	r3, r0
     d08:	7023      	strb	r3, [r4, #0]
     d0a:	e000      	b.n	d0e <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
     d0c:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
     d0e:	1dfb      	adds	r3, r7, #7
     d10:	781b      	ldrb	r3, [r3, #0]
     d12:	b25b      	sxtb	r3, r3

}
     d14:	0018      	movs	r0, r3
     d16:	46bd      	mov	sp, r7
     d18:	b003      	add	sp, #12
     d1a:	bd90      	pop	{r4, r7, pc}
     d1c:	200002ec 	.word	0x200002ec
     d20:	000003d5 	.word	0x000003d5
     d24:	00001070 	.word	0x00001070
     d28:	00002c61 	.word	0x00002c61
     d2c:	00002c85 	.word	0x00002c85

00000d30 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
     d30:	b580      	push	{r7, lr}
     d32:	b082      	sub	sp, #8
     d34:	af00      	add	r7, sp, #0
     d36:	603a      	str	r2, [r7, #0]
     d38:	1dfb      	adds	r3, r7, #7
     d3a:	1c02      	adds	r2, r0, #0
     d3c:	701a      	strb	r2, [r3, #0]
     d3e:	1d3b      	adds	r3, r7, #4
     d40:	1c0a      	adds	r2, r1, #0
     d42:	801a      	strh	r2, [r3, #0]


}
     d44:	46c0      	nop			; (mov r8, r8)
     d46:	46bd      	mov	sp, r7
     d48:	b002      	add	sp, #8
     d4a:	bd80      	pop	{r7, pc}

00000d4c <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     d4c:	b590      	push	{r4, r7, lr}
     d4e:	b083      	sub	sp, #12
     d50:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
     d52:	1dfb      	adds	r3, r7, #7
     d54:	2200      	movs	r2, #0
     d56:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
     d58:	4b16      	ldr	r3, [pc, #88]	; (db4 <hif_chip_wake+0x68>)
     d5a:	789b      	ldrb	r3, [r3, #2]
     d5c:	b2db      	uxtb	r3, r3
     d5e:	2b00      	cmp	r3, #0
     d60:	d003      	beq.n	d6a <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
     d62:	1dfb      	adds	r3, r7, #7
     d64:	781b      	ldrb	r3, [r3, #0]
     d66:	b25b      	sxtb	r3, r3
     d68:	e01f      	b.n	daa <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
     d6a:	4b12      	ldr	r3, [pc, #72]	; (db4 <hif_chip_wake+0x68>)
     d6c:	785b      	ldrb	r3, [r3, #1]
     d6e:	b2db      	uxtb	r3, r3
     d70:	2b00      	cmp	r3, #0
     d72:	d10e      	bne.n	d92 <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     d74:	4b0f      	ldr	r3, [pc, #60]	; (db4 <hif_chip_wake+0x68>)
     d76:	781b      	ldrb	r3, [r3, #0]
     d78:	b2db      	uxtb	r3, r3
     d7a:	2b00      	cmp	r3, #0
     d7c:	d009      	beq.n	d92 <hif_chip_wake+0x46>
		{
			ret = chip_wake();
     d7e:	1dfc      	adds	r4, r7, #7
     d80:	4b0d      	ldr	r3, [pc, #52]	; (db8 <hif_chip_wake+0x6c>)
     d82:	4798      	blx	r3
     d84:	0003      	movs	r3, r0
     d86:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
     d88:	1dfb      	adds	r3, r7, #7
     d8a:	781b      	ldrb	r3, [r3, #0]
     d8c:	b25b      	sxtb	r3, r3
     d8e:	2b00      	cmp	r3, #0
     d90:	d107      	bne.n	da2 <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
     d92:	4b08      	ldr	r3, [pc, #32]	; (db4 <hif_chip_wake+0x68>)
     d94:	785b      	ldrb	r3, [r3, #1]
     d96:	b2db      	uxtb	r3, r3
     d98:	3301      	adds	r3, #1
     d9a:	b2da      	uxtb	r2, r3
     d9c:	4b05      	ldr	r3, [pc, #20]	; (db4 <hif_chip_wake+0x68>)
     d9e:	705a      	strb	r2, [r3, #1]
     da0:	e000      	b.n	da4 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
     da2:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
     da4:	1dfb      	adds	r3, r7, #7
     da6:	781b      	ldrb	r3, [r3, #0]
     da8:	b25b      	sxtb	r3, r3
}
     daa:	0018      	movs	r0, r3
     dac:	46bd      	mov	sp, r7
     dae:	b003      	add	sp, #12
     db0:	bd90      	pop	{r4, r7, pc}
     db2:	46c0      	nop			; (mov r8, r8)
     db4:	200002ec 	.word	0x200002ec
     db8:	00002735 	.word	0x00002735

00000dbc <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
     dbc:	b580      	push	{r7, lr}
     dbe:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
     dc0:	4b07      	ldr	r3, [pc, #28]	; (de0 <hif_chip_sleep_sc+0x24>)
     dc2:	785b      	ldrb	r3, [r3, #1]
     dc4:	b2db      	uxtb	r3, r3
     dc6:	2b00      	cmp	r3, #0
     dc8:	d006      	beq.n	dd8 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
     dca:	4b05      	ldr	r3, [pc, #20]	; (de0 <hif_chip_sleep_sc+0x24>)
     dcc:	785b      	ldrb	r3, [r3, #1]
     dce:	b2db      	uxtb	r3, r3
     dd0:	3b01      	subs	r3, #1
     dd2:	b2da      	uxtb	r2, r3
     dd4:	4b02      	ldr	r3, [pc, #8]	; (de0 <hif_chip_sleep_sc+0x24>)
     dd6:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
     dd8:	2300      	movs	r3, #0
}
     dda:	0018      	movs	r0, r3
     ddc:	46bd      	mov	sp, r7
     dde:	bd80      	pop	{r7, pc}
     de0:	200002ec 	.word	0x200002ec

00000de4 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     de4:	b590      	push	{r4, r7, lr}
     de6:	b083      	sub	sp, #12
     de8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
     dea:	1dfb      	adds	r3, r7, #7
     dec:	2200      	movs	r2, #0
     dee:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
     df0:	4b10      	ldr	r3, [pc, #64]	; (e34 <hif_chip_sleep+0x50>)
     df2:	785b      	ldrb	r3, [r3, #1]
     df4:	b2db      	uxtb	r3, r3
     df6:	2b00      	cmp	r3, #0
     df8:	d006      	beq.n	e08 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
     dfa:	4b0e      	ldr	r3, [pc, #56]	; (e34 <hif_chip_sleep+0x50>)
     dfc:	785b      	ldrb	r3, [r3, #1]
     dfe:	b2db      	uxtb	r3, r3
     e00:	3b01      	subs	r3, #1
     e02:	b2da      	uxtb	r2, r3
     e04:	4b0b      	ldr	r3, [pc, #44]	; (e34 <hif_chip_sleep+0x50>)
     e06:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
     e08:	4b0a      	ldr	r3, [pc, #40]	; (e34 <hif_chip_sleep+0x50>)
     e0a:	785b      	ldrb	r3, [r3, #1]
     e0c:	b2db      	uxtb	r3, r3
     e0e:	2b00      	cmp	r3, #0
     e10:	d109      	bne.n	e26 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     e12:	4b08      	ldr	r3, [pc, #32]	; (e34 <hif_chip_sleep+0x50>)
     e14:	781b      	ldrb	r3, [r3, #0]
     e16:	b2db      	uxtb	r3, r3
     e18:	2b00      	cmp	r3, #0
     e1a:	d004      	beq.n	e26 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
     e1c:	1dfc      	adds	r4, r7, #7
     e1e:	4b06      	ldr	r3, [pc, #24]	; (e38 <hif_chip_sleep+0x54>)
     e20:	4798      	blx	r3
     e22:	0003      	movs	r3, r0
     e24:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
     e26:	1dfb      	adds	r3, r7, #7
     e28:	781b      	ldrb	r3, [r3, #0]
     e2a:	b25b      	sxtb	r3, r3
}
     e2c:	0018      	movs	r0, r3
     e2e:	46bd      	mov	sp, r7
     e30:	b003      	add	sp, #12
     e32:	bd90      	pop	{r4, r7, pc}
     e34:	200002ec 	.word	0x200002ec
     e38:	0000265d 	.word	0x0000265d

00000e3c <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
     e3c:	b580      	push	{r7, lr}
     e3e:	b082      	sub	sp, #8
     e40:	af00      	add	r7, sp, #0
     e42:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
     e44:	4b09      	ldr	r3, [pc, #36]	; (e6c <hif_init+0x30>)
     e46:	2228      	movs	r2, #40	; 0x28
     e48:	2100      	movs	r1, #0
     e4a:	0018      	movs	r0, r3
     e4c:	4b08      	ldr	r3, [pc, #32]	; (e70 <hif_init+0x34>)
     e4e:	4798      	blx	r3
	nm_bsp_register_isr(isr);
     e50:	4b08      	ldr	r3, [pc, #32]	; (e74 <hif_init+0x38>)
     e52:	0018      	movs	r0, r3
     e54:	4b08      	ldr	r3, [pc, #32]	; (e78 <hif_init+0x3c>)
     e56:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
     e58:	4b08      	ldr	r3, [pc, #32]	; (e7c <hif_init+0x40>)
     e5a:	0019      	movs	r1, r3
     e5c:	2003      	movs	r0, #3
     e5e:	4b08      	ldr	r3, [pc, #32]	; (e80 <hif_init+0x44>)
     e60:	4798      	blx	r3
	return M2M_SUCCESS;
     e62:	2300      	movs	r3, #0
}
     e64:	0018      	movs	r0, r3
     e66:	46bd      	mov	sp, r7
     e68:	b002      	add	sp, #8
     e6a:	bd80      	pop	{r7, pc}
     e6c:	200002ec 	.word	0x200002ec
     e70:	00000c25 	.word	0x00000c25
     e74:	00000ca1 	.word	0x00000ca1
     e78:	0000035d 	.word	0x0000035d
     e7c:	00000d31 	.word	0x00000d31
     e80:	000018f9 	.word	0x000018f9

00000e84 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     e84:	b590      	push	{r4, r7, lr}
     e86:	b089      	sub	sp, #36	; 0x24
     e88:	af00      	add	r7, sp, #0
     e8a:	0004      	movs	r4, r0
     e8c:	0008      	movs	r0, r1
     e8e:	603a      	str	r2, [r7, #0]
     e90:	0019      	movs	r1, r3
     e92:	1dfb      	adds	r3, r7, #7
     e94:	1c22      	adds	r2, r4, #0
     e96:	701a      	strb	r2, [r3, #0]
     e98:	1dbb      	adds	r3, r7, #6
     e9a:	1c02      	adds	r2, r0, #0
     e9c:	701a      	strb	r2, [r3, #0]
     e9e:	1d3b      	adds	r3, r7, #4
     ea0:	1c0a      	adds	r2, r1, #0
     ea2:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
     ea4:	231f      	movs	r3, #31
     ea6:	18fb      	adds	r3, r7, r3
     ea8:	22ff      	movs	r2, #255	; 0xff
     eaa:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     eac:	1dbb      	adds	r3, r7, #6
     eae:	781b      	ldrb	r3, [r3, #0]
     eb0:	227f      	movs	r2, #127	; 0x7f
     eb2:	4013      	ands	r3, r2
     eb4:	b2da      	uxtb	r2, r3
     eb6:	2318      	movs	r3, #24
     eb8:	18fb      	adds	r3, r7, r3
     eba:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
     ebc:	2318      	movs	r3, #24
     ebe:	18fb      	adds	r3, r7, r3
     ec0:	1dfa      	adds	r2, r7, #7
     ec2:	7812      	ldrb	r2, [r2, #0]
     ec4:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
     ec6:	2318      	movs	r3, #24
     ec8:	18fb      	adds	r3, r7, r3
     eca:	2208      	movs	r2, #8
     ecc:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
     ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ed0:	2b00      	cmp	r3, #0
     ed2:	d011      	beq.n	ef8 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     ed4:	2318      	movs	r3, #24
     ed6:	18fb      	adds	r3, r7, r3
     ed8:	885b      	ldrh	r3, [r3, #2]
     eda:	b29a      	uxth	r2, r3
     edc:	2338      	movs	r3, #56	; 0x38
     ede:	18f9      	adds	r1, r7, r3
     ee0:	2334      	movs	r3, #52	; 0x34
     ee2:	18fb      	adds	r3, r7, r3
     ee4:	8809      	ldrh	r1, [r1, #0]
     ee6:	881b      	ldrh	r3, [r3, #0]
     ee8:	18cb      	adds	r3, r1, r3
     eea:	b29b      	uxth	r3, r3
     eec:	18d3      	adds	r3, r2, r3
     eee:	b29a      	uxth	r2, r3
     ef0:	2318      	movs	r3, #24
     ef2:	18fb      	adds	r3, r7, r3
     ef4:	805a      	strh	r2, [r3, #2]
     ef6:	e00a      	b.n	f0e <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
     ef8:	2318      	movs	r3, #24
     efa:	18fb      	adds	r3, r7, r3
     efc:	885b      	ldrh	r3, [r3, #2]
     efe:	b29a      	uxth	r2, r3
     f00:	1d3b      	adds	r3, r7, #4
     f02:	881b      	ldrh	r3, [r3, #0]
     f04:	18d3      	adds	r3, r2, r3
     f06:	b29a      	uxth	r2, r3
     f08:	2318      	movs	r3, #24
     f0a:	18fb      	adds	r3, r7, r3
     f0c:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
     f0e:	231f      	movs	r3, #31
     f10:	18fc      	adds	r4, r7, r3
     f12:	4bb0      	ldr	r3, [pc, #704]	; (11d4 <hif_send+0x350>)
     f14:	4798      	blx	r3
     f16:	0003      	movs	r3, r0
     f18:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
     f1a:	231f      	movs	r3, #31
     f1c:	18fb      	adds	r3, r7, r3
     f1e:	781b      	ldrb	r3, [r3, #0]
     f20:	b25b      	sxtb	r3, r3
     f22:	2b00      	cmp	r3, #0
     f24:	d000      	beq.n	f28 <hif_send+0xa4>
     f26:	e127      	b.n	1178 <hif_send+0x2f4>
	{
		volatile uint32 reg, dma_addr = 0;
     f28:	2300      	movs	r3, #0
     f2a:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
     f2c:	230e      	movs	r3, #14
     f2e:	18fb      	adds	r3, r7, r3
     f30:	2200      	movs	r2, #0
     f32:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
     f34:	2300      	movs	r3, #0
     f36:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
     f38:	1dfb      	adds	r3, r7, #7
     f3a:	781a      	ldrb	r2, [r3, #0]
     f3c:	697b      	ldr	r3, [r7, #20]
     f3e:	4313      	orrs	r3, r2
     f40:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
     f42:	1dbb      	adds	r3, r7, #6
     f44:	781b      	ldrb	r3, [r3, #0]
     f46:	021a      	lsls	r2, r3, #8
     f48:	697b      	ldr	r3, [r7, #20]
     f4a:	4313      	orrs	r3, r2
     f4c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
     f4e:	2318      	movs	r3, #24
     f50:	18fb      	adds	r3, r7, r3
     f52:	885b      	ldrh	r3, [r3, #2]
     f54:	b29b      	uxth	r3, r3
     f56:	041a      	lsls	r2, r3, #16
     f58:	697b      	ldr	r3, [r7, #20]
     f5a:	4313      	orrs	r3, r2
     f5c:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
     f5e:	697b      	ldr	r3, [r7, #20]
     f60:	221f      	movs	r2, #31
     f62:	18bc      	adds	r4, r7, r2
     f64:	4a9c      	ldr	r2, [pc, #624]	; (11d8 <hif_send+0x354>)
     f66:	0019      	movs	r1, r3
     f68:	0010      	movs	r0, r2
     f6a:	4b9c      	ldr	r3, [pc, #624]	; (11dc <hif_send+0x358>)
     f6c:	4798      	blx	r3
     f6e:	0003      	movs	r3, r0
     f70:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
     f72:	231f      	movs	r3, #31
     f74:	18fb      	adds	r3, r7, r3
     f76:	781b      	ldrb	r3, [r3, #0]
     f78:	b25b      	sxtb	r3, r3
     f7a:	2b00      	cmp	r3, #0
     f7c:	d000      	beq.n	f80 <hif_send+0xfc>
     f7e:	e115      	b.n	11ac <hif_send+0x328>

		reg = 0UL;
     f80:	2300      	movs	r3, #0
     f82:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
     f84:	697b      	ldr	r3, [r7, #20]
     f86:	2202      	movs	r2, #2
     f88:	4313      	orrs	r3, r2
     f8a:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
     f8c:	697b      	ldr	r3, [r7, #20]
     f8e:	221f      	movs	r2, #31
     f90:	18bc      	adds	r4, r7, r2
     f92:	4a93      	ldr	r2, [pc, #588]	; (11e0 <hif_send+0x35c>)
     f94:	0019      	movs	r1, r3
     f96:	0010      	movs	r0, r2
     f98:	4b90      	ldr	r3, [pc, #576]	; (11dc <hif_send+0x358>)
     f9a:	4798      	blx	r3
     f9c:	0003      	movs	r3, r0
     f9e:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
     fa0:	231f      	movs	r3, #31
     fa2:	18fb      	adds	r3, r7, r3
     fa4:	781b      	ldrb	r3, [r3, #0]
     fa6:	b25b      	sxtb	r3, r3
     fa8:	2b00      	cmp	r3, #0
     faa:	d000      	beq.n	fae <hif_send+0x12a>
     fac:	e100      	b.n	11b0 <hif_send+0x32c>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
     fae:	2300      	movs	r3, #0
     fb0:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
     fb2:	230e      	movs	r3, #14
     fb4:	18fb      	adds	r3, r7, r3
     fb6:	2200      	movs	r2, #0
     fb8:	801a      	strh	r2, [r3, #0]
     fba:	e04f      	b.n	105c <hif_send+0x1d8>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     fbc:	231f      	movs	r3, #31
     fbe:	18fc      	adds	r4, r7, r3
     fc0:	2314      	movs	r3, #20
     fc2:	18fb      	adds	r3, r7, r3
     fc4:	4a86      	ldr	r2, [pc, #536]	; (11e0 <hif_send+0x35c>)
     fc6:	0019      	movs	r1, r3
     fc8:	0010      	movs	r0, r2
     fca:	4b86      	ldr	r3, [pc, #536]	; (11e4 <hif_send+0x360>)
     fcc:	4798      	blx	r3
     fce:	0003      	movs	r3, r0
     fd0:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
     fd2:	231f      	movs	r3, #31
     fd4:	18fb      	adds	r3, r7, r3
     fd6:	781b      	ldrb	r3, [r3, #0]
     fd8:	b25b      	sxtb	r3, r3
     fda:	2b00      	cmp	r3, #0
     fdc:	d146      	bne.n	106c <hif_send+0x1e8>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
     fde:	230e      	movs	r3, #14
     fe0:	18fb      	adds	r3, r7, r3
     fe2:	881b      	ldrh	r3, [r3, #0]
     fe4:	b29a      	uxth	r2, r3
     fe6:	23f4      	movs	r3, #244	; 0xf4
     fe8:	33ff      	adds	r3, #255	; 0xff
     fea:	429a      	cmp	r2, r3
     fec:	d915      	bls.n	101a <hif_send+0x196>
				if(cnt < 501) {
     fee:	230e      	movs	r3, #14
     ff0:	18fb      	adds	r3, r7, r3
     ff2:	881b      	ldrh	r3, [r3, #0]
     ff4:	b29a      	uxth	r2, r3
     ff6:	23fa      	movs	r3, #250	; 0xfa
     ff8:	005b      	lsls	r3, r3, #1
     ffa:	429a      	cmp	r2, r3
     ffc:	d80a      	bhi.n	1014 <hif_send+0x190>
					M2M_INFO("Slowing down...\n");
     ffe:	4b7a      	ldr	r3, [pc, #488]	; (11e8 <hif_send+0x364>)
    1000:	0018      	movs	r0, r3
    1002:	4b7a      	ldr	r3, [pc, #488]	; (11ec <hif_send+0x368>)
    1004:	4798      	blx	r3
    1006:	4b7a      	ldr	r3, [pc, #488]	; (11f0 <hif_send+0x36c>)
    1008:	0018      	movs	r0, r3
    100a:	4b7a      	ldr	r3, [pc, #488]	; (11f4 <hif_send+0x370>)
    100c:	4798      	blx	r3
    100e:	200d      	movs	r0, #13
    1010:	4b79      	ldr	r3, [pc, #484]	; (11f8 <hif_send+0x374>)
    1012:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
    1014:	2001      	movs	r0, #1
    1016:	4b79      	ldr	r3, [pc, #484]	; (11fc <hif_send+0x378>)
    1018:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
    101a:	697b      	ldr	r3, [r7, #20]
    101c:	2202      	movs	r2, #2
    101e:	4013      	ands	r3, r2
    1020:	d113      	bne.n	104a <hif_send+0x1c6>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    1022:	231f      	movs	r3, #31
    1024:	18fc      	adds	r4, r7, r3
    1026:	2310      	movs	r3, #16
    1028:	18fb      	adds	r3, r7, r3
    102a:	4a75      	ldr	r2, [pc, #468]	; (1200 <hif_send+0x37c>)
    102c:	0019      	movs	r1, r3
    102e:	0010      	movs	r0, r2
    1030:	4b6c      	ldr	r3, [pc, #432]	; (11e4 <hif_send+0x360>)
    1032:	4798      	blx	r3
    1034:	0003      	movs	r3, r0
    1036:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    1038:	231f      	movs	r3, #31
    103a:	18fb      	adds	r3, r7, r3
    103c:	781b      	ldrb	r3, [r3, #0]
    103e:	b25b      	sxtb	r3, r3
    1040:	2b00      	cmp	r3, #0
    1042:	d015      	beq.n	1070 <hif_send+0x1ec>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    1044:	2300      	movs	r3, #0
    1046:	613b      	str	r3, [r7, #16]
					goto ERR1;
    1048:	e0b9      	b.n	11be <hif_send+0x33a>
		for(cnt = 0; cnt < 1000; cnt ++)
    104a:	230e      	movs	r3, #14
    104c:	18fb      	adds	r3, r7, r3
    104e:	881b      	ldrh	r3, [r3, #0]
    1050:	b29b      	uxth	r3, r3
    1052:	3301      	adds	r3, #1
    1054:	b29a      	uxth	r2, r3
    1056:	230e      	movs	r3, #14
    1058:	18fb      	adds	r3, r7, r3
    105a:	801a      	strh	r2, [r3, #0]
    105c:	230e      	movs	r3, #14
    105e:	18fb      	adds	r3, r7, r3
    1060:	881b      	ldrh	r3, [r3, #0]
    1062:	b29b      	uxth	r3, r3
    1064:	4a67      	ldr	r2, [pc, #412]	; (1204 <hif_send+0x380>)
    1066:	4293      	cmp	r3, r2
    1068:	d9a8      	bls.n	fbc <hif_send+0x138>
    106a:	e002      	b.n	1072 <hif_send+0x1ee>
			if(ret != M2M_SUCCESS) break;
    106c:	46c0      	nop			; (mov r8, r8)
    106e:	e000      	b.n	1072 <hif_send+0x1ee>
				}
				/*in case of success break */
				break;
    1070:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
    1072:	693b      	ldr	r3, [r7, #16]
    1074:	2b00      	cmp	r3, #0
    1076:	d100      	bne.n	107a <hif_send+0x1f6>
    1078:	e073      	b.n	1162 <hif_send+0x2de>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    107a:	693b      	ldr	r3, [r7, #16]
    107c:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    107e:	2318      	movs	r3, #24
    1080:	18fb      	adds	r3, r7, r3
    1082:	885b      	ldrh	r3, [r3, #2]
    1084:	b29a      	uxth	r2, r3
    1086:	2318      	movs	r3, #24
    1088:	18fb      	adds	r3, r7, r3
    108a:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    108c:	68bb      	ldr	r3, [r7, #8]
    108e:	221f      	movs	r2, #31
    1090:	18bc      	adds	r4, r7, r2
    1092:	2218      	movs	r2, #24
    1094:	18b9      	adds	r1, r7, r2
    1096:	2208      	movs	r2, #8
    1098:	0018      	movs	r0, r3
    109a:	4b5b      	ldr	r3, [pc, #364]	; (1208 <hif_send+0x384>)
    109c:	4798      	blx	r3
    109e:	0003      	movs	r3, r0
    10a0:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    10a2:	231f      	movs	r3, #31
    10a4:	18fb      	adds	r3, r7, r3
    10a6:	781b      	ldrb	r3, [r3, #0]
    10a8:	b25b      	sxtb	r3, r3
    10aa:	2b00      	cmp	r3, #0
    10ac:	d000      	beq.n	10b0 <hif_send+0x22c>
    10ae:	e081      	b.n	11b4 <hif_send+0x330>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    10b0:	68bb      	ldr	r3, [r7, #8]
    10b2:	3308      	adds	r3, #8
    10b4:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    10b6:	683b      	ldr	r3, [r7, #0]
    10b8:	2b00      	cmp	r3, #0
    10ba:	d015      	beq.n	10e8 <hif_send+0x264>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    10bc:	68b8      	ldr	r0, [r7, #8]
    10be:	1d3b      	adds	r3, r7, #4
    10c0:	881a      	ldrh	r2, [r3, #0]
    10c2:	231f      	movs	r3, #31
    10c4:	18fc      	adds	r4, r7, r3
    10c6:	683b      	ldr	r3, [r7, #0]
    10c8:	0019      	movs	r1, r3
    10ca:	4b4f      	ldr	r3, [pc, #316]	; (1208 <hif_send+0x384>)
    10cc:	4798      	blx	r3
    10ce:	0003      	movs	r3, r0
    10d0:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    10d2:	231f      	movs	r3, #31
    10d4:	18fb      	adds	r3, r7, r3
    10d6:	781b      	ldrb	r3, [r3, #0]
    10d8:	b25b      	sxtb	r3, r3
    10da:	2b00      	cmp	r3, #0
    10dc:	d16c      	bne.n	11b8 <hif_send+0x334>
				u32CurrAddr += u16CtrlBufSize;
    10de:	1d3b      	adds	r3, r7, #4
    10e0:	881a      	ldrh	r2, [r3, #0]
    10e2:	68bb      	ldr	r3, [r7, #8]
    10e4:	18d3      	adds	r3, r2, r3
    10e6:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    10e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    10ea:	2b00      	cmp	r3, #0
    10ec:	d021      	beq.n	1132 <hif_send+0x2ae>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    10ee:	2338      	movs	r3, #56	; 0x38
    10f0:	18fb      	adds	r3, r7, r3
    10f2:	881a      	ldrh	r2, [r3, #0]
    10f4:	1d3b      	adds	r3, r7, #4
    10f6:	881b      	ldrh	r3, [r3, #0]
    10f8:	1ad3      	subs	r3, r2, r3
    10fa:	001a      	movs	r2, r3
    10fc:	68bb      	ldr	r3, [r7, #8]
    10fe:	18d3      	adds	r3, r2, r3
    1100:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    1102:	68b8      	ldr	r0, [r7, #8]
    1104:	2334      	movs	r3, #52	; 0x34
    1106:	18fb      	adds	r3, r7, r3
    1108:	881a      	ldrh	r2, [r3, #0]
    110a:	231f      	movs	r3, #31
    110c:	18fc      	adds	r4, r7, r3
    110e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1110:	0019      	movs	r1, r3
    1112:	4b3d      	ldr	r3, [pc, #244]	; (1208 <hif_send+0x384>)
    1114:	4798      	blx	r3
    1116:	0003      	movs	r3, r0
    1118:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    111a:	231f      	movs	r3, #31
    111c:	18fb      	adds	r3, r7, r3
    111e:	781b      	ldrb	r3, [r3, #0]
    1120:	b25b      	sxtb	r3, r3
    1122:	2b00      	cmp	r3, #0
    1124:	d14a      	bne.n	11bc <hif_send+0x338>
				u32CurrAddr += u16DataSize;
    1126:	2334      	movs	r3, #52	; 0x34
    1128:	18fb      	adds	r3, r7, r3
    112a:	881a      	ldrh	r2, [r3, #0]
    112c:	68bb      	ldr	r3, [r7, #8]
    112e:	18d3      	adds	r3, r2, r3
    1130:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    1132:	693b      	ldr	r3, [r7, #16]
    1134:	009b      	lsls	r3, r3, #2
    1136:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
    1138:	697b      	ldr	r3, [r7, #20]
    113a:	2202      	movs	r2, #2
    113c:	4313      	orrs	r3, r2
    113e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    1140:	697b      	ldr	r3, [r7, #20]
    1142:	221f      	movs	r2, #31
    1144:	18bc      	adds	r4, r7, r2
    1146:	4a31      	ldr	r2, [pc, #196]	; (120c <hif_send+0x388>)
    1148:	0019      	movs	r1, r3
    114a:	0010      	movs	r0, r2
    114c:	4b23      	ldr	r3, [pc, #140]	; (11dc <hif_send+0x358>)
    114e:	4798      	blx	r3
    1150:	0003      	movs	r3, r0
    1152:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    1154:	231f      	movs	r3, #31
    1156:	18fb      	adds	r3, r7, r3
    1158:	781b      	ldrb	r3, [r3, #0]
    115a:	b25b      	sxtb	r3, r3
    115c:	2b00      	cmp	r3, #0
    115e:	d01a      	beq.n	1196 <hif_send+0x312>
    1160:	e02d      	b.n	11be <hif_send+0x33a>
		}
		else
		{
			ret = hif_chip_sleep();
    1162:	231f      	movs	r3, #31
    1164:	18fc      	adds	r4, r7, r3
    1166:	4b2a      	ldr	r3, [pc, #168]	; (1210 <hif_send+0x38c>)
    1168:	4798      	blx	r3
    116a:	0003      	movs	r3, r0
    116c:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    116e:	231f      	movs	r3, #31
    1170:	18fb      	adds	r3, r7, r3
    1172:	22fd      	movs	r2, #253	; 0xfd
    1174:	701a      	strb	r2, [r3, #0]
			goto ERR2;
    1176:	e024      	b.n	11c2 <hif_send+0x33e>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    1178:	23cb      	movs	r3, #203	; 0xcb
    117a:	005a      	lsls	r2, r3, #1
    117c:	4925      	ldr	r1, [pc, #148]	; (1214 <hif_send+0x390>)
    117e:	4b26      	ldr	r3, [pc, #152]	; (1218 <hif_send+0x394>)
    1180:	0018      	movs	r0, r3
    1182:	4b1a      	ldr	r3, [pc, #104]	; (11ec <hif_send+0x368>)
    1184:	4798      	blx	r3
    1186:	4b25      	ldr	r3, [pc, #148]	; (121c <hif_send+0x398>)
    1188:	0018      	movs	r0, r3
    118a:	4b1a      	ldr	r3, [pc, #104]	; (11f4 <hif_send+0x370>)
    118c:	4798      	blx	r3
    118e:	200d      	movs	r0, #13
    1190:	4b19      	ldr	r3, [pc, #100]	; (11f8 <hif_send+0x374>)
    1192:	4798      	blx	r3
		goto ERR2;
    1194:	e015      	b.n	11c2 <hif_send+0x33e>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    1196:	231f      	movs	r3, #31
    1198:	18fc      	adds	r4, r7, r3
    119a:	4b1d      	ldr	r3, [pc, #116]	; (1210 <hif_send+0x38c>)
    119c:	4798      	blx	r3
    119e:	0003      	movs	r3, r0
    11a0:	7023      	strb	r3, [r4, #0]
	return ret;
    11a2:	231f      	movs	r3, #31
    11a4:	18fb      	adds	r3, r7, r3
    11a6:	781b      	ldrb	r3, [r3, #0]
    11a8:	b25b      	sxtb	r3, r3
    11aa:	e00e      	b.n	11ca <hif_send+0x346>
		if(M2M_SUCCESS != ret) goto ERR1;
    11ac:	46c0      	nop			; (mov r8, r8)
    11ae:	e006      	b.n	11be <hif_send+0x33a>
		if(M2M_SUCCESS != ret) goto ERR1;
    11b0:	46c0      	nop			; (mov r8, r8)
    11b2:	e004      	b.n	11be <hif_send+0x33a>
			if(M2M_SUCCESS != ret) goto ERR1;
    11b4:	46c0      	nop			; (mov r8, r8)
    11b6:	e002      	b.n	11be <hif_send+0x33a>
				if(M2M_SUCCESS != ret) goto ERR1;
    11b8:	46c0      	nop			; (mov r8, r8)
    11ba:	e000      	b.n	11be <hif_send+0x33a>
				if(M2M_SUCCESS != ret) goto ERR1;
    11bc:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    11be:	4b18      	ldr	r3, [pc, #96]	; (1220 <hif_send+0x39c>)
    11c0:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
    11c2:	231f      	movs	r3, #31
    11c4:	18fb      	adds	r3, r7, r3
    11c6:	781b      	ldrb	r3, [r3, #0]
    11c8:	b25b      	sxtb	r3, r3
}
    11ca:	0018      	movs	r0, r3
    11cc:	46bd      	mov	sp, r7
    11ce:	b009      	add	sp, #36	; 0x24
    11d0:	bd90      	pop	{r4, r7, pc}
    11d2:	46c0      	nop			; (mov r8, r8)
    11d4:	00000d4d 	.word	0x00000d4d
    11d8:	0000108c 	.word	0x0000108c
    11dc:	00002c85 	.word	0x00002c85
    11e0:	00001078 	.word	0x00001078
    11e4:	00002c61 	.word	0x00002c61
    11e8:	0000f560 	.word	0x0000f560
    11ec:	0000dfad 	.word	0x0000dfad
    11f0:	0000f56c 	.word	0x0000f56c
    11f4:	0000e0c9 	.word	0x0000e0c9
    11f8:	0000dfe1 	.word	0x0000dfe1
    11fc:	00000335 	.word	0x00000335
    1200:	00150400 	.word	0x00150400
    1204:	000003e7 	.word	0x000003e7
    1208:	00002dcd 	.word	0x00002dcd
    120c:	0000106c 	.word	0x0000106c
    1210:	00000de5 	.word	0x00000de5
    1214:	0000f874 	.word	0x0000f874
    1218:	0000f57c 	.word	0x0000f57c
    121c:	0000f590 	.word	0x0000f590
    1220:	00000dbd 	.word	0x00000dbd

00001224 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    1224:	b590      	push	{r4, r7, lr}
    1226:	b087      	sub	sp, #28
    1228:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
    122a:	230f      	movs	r3, #15
    122c:	18fb      	adds	r3, r7, r3
    122e:	2200      	movs	r2, #0
    1230:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    1232:	230f      	movs	r3, #15
    1234:	18fc      	adds	r4, r7, r3
    1236:	2308      	movs	r3, #8
    1238:	18fb      	adds	r3, r7, r3
    123a:	4ad6      	ldr	r2, [pc, #856]	; (1594 <hif_isr+0x370>)
    123c:	0019      	movs	r1, r3
    123e:	0010      	movs	r0, r2
    1240:	4bd5      	ldr	r3, [pc, #852]	; (1598 <hif_isr+0x374>)
    1242:	4798      	blx	r3
    1244:	0003      	movs	r3, r0
    1246:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
    1248:	230f      	movs	r3, #15
    124a:	18fb      	adds	r3, r7, r3
    124c:	781b      	ldrb	r3, [r3, #0]
    124e:	b25b      	sxtb	r3, r3
    1250:	2b00      	cmp	r3, #0
    1252:	d000      	beq.n	1256 <hif_isr+0x32>
    1254:	e217      	b.n	1686 <hif_isr+0x462>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    1256:	68bb      	ldr	r3, [r7, #8]
    1258:	2201      	movs	r2, #1
    125a:	4013      	ands	r3, r2
    125c:	d100      	bne.n	1260 <hif_isr+0x3c>
    125e:	e1fd      	b.n	165c <hif_isr+0x438>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    1260:	2000      	movs	r0, #0
    1262:	4bce      	ldr	r3, [pc, #824]	; (159c <hif_isr+0x378>)
    1264:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    1266:	68bb      	ldr	r3, [r7, #8]
    1268:	2201      	movs	r2, #1
    126a:	4393      	bics	r3, r2
    126c:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    126e:	68bb      	ldr	r3, [r7, #8]
    1270:	220f      	movs	r2, #15
    1272:	18bc      	adds	r4, r7, r2
    1274:	4ac7      	ldr	r2, [pc, #796]	; (1594 <hif_isr+0x370>)
    1276:	0019      	movs	r1, r3
    1278:	0010      	movs	r0, r2
    127a:	4bc9      	ldr	r3, [pc, #804]	; (15a0 <hif_isr+0x37c>)
    127c:	4798      	blx	r3
    127e:	0003      	movs	r3, r0
    1280:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    1282:	230f      	movs	r3, #15
    1284:	18fb      	adds	r3, r7, r3
    1286:	781b      	ldrb	r3, [r3, #0]
    1288:	b25b      	sxtb	r3, r3
    128a:	2b00      	cmp	r3, #0
    128c:	d000      	beq.n	1290 <hif_isr+0x6c>
    128e:	e208      	b.n	16a2 <hif_isr+0x47e>
			gstrHifCxt.u8HifRXDone = 1;
    1290:	4bc4      	ldr	r3, [pc, #784]	; (15a4 <hif_isr+0x380>)
    1292:	2201      	movs	r2, #1
    1294:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    1296:	68bb      	ldr	r3, [r7, #8]
    1298:	089b      	lsrs	r3, r3, #2
    129a:	b29a      	uxth	r2, r3
    129c:	230c      	movs	r3, #12
    129e:	18fb      	adds	r3, r7, r3
    12a0:	0512      	lsls	r2, r2, #20
    12a2:	0d12      	lsrs	r2, r2, #20
    12a4:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
    12a6:	230c      	movs	r3, #12
    12a8:	18fb      	adds	r3, r7, r3
    12aa:	881b      	ldrh	r3, [r3, #0]
    12ac:	2b00      	cmp	r3, #0
    12ae:	d100      	bne.n	12b2 <hif_isr+0x8e>
    12b0:	e1c1      	b.n	1636 <hif_isr+0x412>
				uint32 address = 0;
    12b2:	2300      	movs	r3, #0
    12b4:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    12b6:	230f      	movs	r3, #15
    12b8:	18fc      	adds	r4, r7, r3
    12ba:	003b      	movs	r3, r7
    12bc:	4aba      	ldr	r2, [pc, #744]	; (15a8 <hif_isr+0x384>)
    12be:	0019      	movs	r1, r3
    12c0:	0010      	movs	r0, r2
    12c2:	4bb5      	ldr	r3, [pc, #724]	; (1598 <hif_isr+0x374>)
    12c4:	4798      	blx	r3
    12c6:	0003      	movs	r3, r0
    12c8:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
    12ca:	230f      	movs	r3, #15
    12cc:	18fb      	adds	r3, r7, r3
    12ce:	781b      	ldrb	r3, [r3, #0]
    12d0:	b25b      	sxtb	r3, r3
    12d2:	2b00      	cmp	r3, #0
    12d4:	d012      	beq.n	12fc <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    12d6:	23c8      	movs	r3, #200	; 0xc8
    12d8:	33ff      	adds	r3, #255	; 0xff
    12da:	001a      	movs	r2, r3
    12dc:	49b3      	ldr	r1, [pc, #716]	; (15ac <hif_isr+0x388>)
    12de:	4bb4      	ldr	r3, [pc, #720]	; (15b0 <hif_isr+0x38c>)
    12e0:	0018      	movs	r0, r3
    12e2:	4bb4      	ldr	r3, [pc, #720]	; (15b4 <hif_isr+0x390>)
    12e4:	4798      	blx	r3
    12e6:	4bb4      	ldr	r3, [pc, #720]	; (15b8 <hif_isr+0x394>)
    12e8:	0018      	movs	r0, r3
    12ea:	4bb4      	ldr	r3, [pc, #720]	; (15bc <hif_isr+0x398>)
    12ec:	4798      	blx	r3
    12ee:	200d      	movs	r0, #13
    12f0:	4bb3      	ldr	r3, [pc, #716]	; (15c0 <hif_isr+0x39c>)
    12f2:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    12f4:	2001      	movs	r0, #1
    12f6:	4ba9      	ldr	r3, [pc, #676]	; (159c <hif_isr+0x378>)
    12f8:	4798      	blx	r3
					goto ERR1;
    12fa:	e1d3      	b.n	16a4 <hif_isr+0x480>
				}
				gstrHifCxt.u32RxAddr = address;
    12fc:	683a      	ldr	r2, [r7, #0]
    12fe:	4ba9      	ldr	r3, [pc, #676]	; (15a4 <hif_isr+0x380>)
    1300:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    1302:	230c      	movs	r3, #12
    1304:	18fb      	adds	r3, r7, r3
    1306:	881a      	ldrh	r2, [r3, #0]
    1308:	4ba6      	ldr	r3, [pc, #664]	; (15a4 <hif_isr+0x380>)
    130a:	609a      	str	r2, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    130c:	683b      	ldr	r3, [r7, #0]
    130e:	220f      	movs	r2, #15
    1310:	18bc      	adds	r4, r7, r2
    1312:	1d39      	adds	r1, r7, #4
    1314:	2204      	movs	r2, #4
    1316:	0018      	movs	r0, r3
    1318:	4baa      	ldr	r3, [pc, #680]	; (15c4 <hif_isr+0x3a0>)
    131a:	4798      	blx	r3
    131c:	0003      	movs	r3, r0
    131e:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    1320:	1d3b      	adds	r3, r7, #4
    1322:	885b      	ldrh	r3, [r3, #2]
    1324:	b29a      	uxth	r2, r3
    1326:	1d3b      	adds	r3, r7, #4
    1328:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
    132a:	230f      	movs	r3, #15
    132c:	18fb      	adds	r3, r7, r3
    132e:	781b      	ldrb	r3, [r3, #0]
    1330:	b25b      	sxtb	r3, r3
    1332:	2b00      	cmp	r3, #0
    1334:	d012      	beq.n	135c <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
    1336:	23d2      	movs	r3, #210	; 0xd2
    1338:	33ff      	adds	r3, #255	; 0xff
    133a:	001a      	movs	r2, r3
    133c:	499b      	ldr	r1, [pc, #620]	; (15ac <hif_isr+0x388>)
    133e:	4b9c      	ldr	r3, [pc, #624]	; (15b0 <hif_isr+0x38c>)
    1340:	0018      	movs	r0, r3
    1342:	4b9c      	ldr	r3, [pc, #624]	; (15b4 <hif_isr+0x390>)
    1344:	4798      	blx	r3
    1346:	4ba0      	ldr	r3, [pc, #640]	; (15c8 <hif_isr+0x3a4>)
    1348:	0018      	movs	r0, r3
    134a:	4b9c      	ldr	r3, [pc, #624]	; (15bc <hif_isr+0x398>)
    134c:	4798      	blx	r3
    134e:	200d      	movs	r0, #13
    1350:	4b9b      	ldr	r3, [pc, #620]	; (15c0 <hif_isr+0x39c>)
    1352:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1354:	2001      	movs	r0, #1
    1356:	4b91      	ldr	r3, [pc, #580]	; (159c <hif_isr+0x378>)
    1358:	4798      	blx	r3
					goto ERR1;
    135a:	e1a3      	b.n	16a4 <hif_isr+0x480>
				}
				if(strHif.u16Length != size)
    135c:	1d3b      	adds	r3, r7, #4
    135e:	885b      	ldrh	r3, [r3, #2]
    1360:	b29b      	uxth	r3, r3
    1362:	220c      	movs	r2, #12
    1364:	18ba      	adds	r2, r7, r2
    1366:	8812      	ldrh	r2, [r2, #0]
    1368:	429a      	cmp	r2, r3
    136a:	d02d      	beq.n	13c8 <hif_isr+0x1a4>
				{
					if((size - strHif.u16Length) > 4)
    136c:	230c      	movs	r3, #12
    136e:	18fb      	adds	r3, r7, r3
    1370:	881b      	ldrh	r3, [r3, #0]
    1372:	1d3a      	adds	r2, r7, #4
    1374:	8852      	ldrh	r2, [r2, #2]
    1376:	b292      	uxth	r2, r2
    1378:	1a9b      	subs	r3, r3, r2
    137a:	2b04      	cmp	r3, #4
    137c:	dd24      	ble.n	13c8 <hif_isr+0x1a4>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    137e:	23ed      	movs	r3, #237	; 0xed
    1380:	005a      	lsls	r2, r3, #1
    1382:	498a      	ldr	r1, [pc, #552]	; (15ac <hif_isr+0x388>)
    1384:	4b8a      	ldr	r3, [pc, #552]	; (15b0 <hif_isr+0x38c>)
    1386:	0018      	movs	r0, r3
    1388:	4b8a      	ldr	r3, [pc, #552]	; (15b4 <hif_isr+0x390>)
    138a:	4798      	blx	r3
    138c:	230c      	movs	r3, #12
    138e:	18fb      	adds	r3, r7, r3
    1390:	8819      	ldrh	r1, [r3, #0]
    1392:	1d3b      	adds	r3, r7, #4
    1394:	885b      	ldrh	r3, [r3, #2]
    1396:	b29b      	uxth	r3, r3
    1398:	001a      	movs	r2, r3
    139a:	1d3b      	adds	r3, r7, #4
    139c:	781b      	ldrb	r3, [r3, #0]
    139e:	b2db      	uxtb	r3, r3
    13a0:	001c      	movs	r4, r3
    13a2:	1d3b      	adds	r3, r7, #4
    13a4:	785b      	ldrb	r3, [r3, #1]
    13a6:	b2db      	uxtb	r3, r3
    13a8:	4888      	ldr	r0, [pc, #544]	; (15cc <hif_isr+0x3a8>)
    13aa:	9300      	str	r3, [sp, #0]
    13ac:	0023      	movs	r3, r4
    13ae:	4c81      	ldr	r4, [pc, #516]	; (15b4 <hif_isr+0x390>)
    13b0:	47a0      	blx	r4
    13b2:	200d      	movs	r0, #13
    13b4:	4b82      	ldr	r3, [pc, #520]	; (15c0 <hif_isr+0x39c>)
    13b6:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    13b8:	2001      	movs	r0, #1
    13ba:	4b78      	ldr	r3, [pc, #480]	; (159c <hif_isr+0x378>)
    13bc:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    13be:	230f      	movs	r3, #15
    13c0:	18fb      	adds	r3, r7, r3
    13c2:	22fa      	movs	r2, #250	; 0xfa
    13c4:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    13c6:	e16d      	b.n	16a4 <hif_isr+0x480>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    13c8:	1d3b      	adds	r3, r7, #4
    13ca:	781b      	ldrb	r3, [r3, #0]
    13cc:	b2db      	uxtb	r3, r3
    13ce:	2b01      	cmp	r3, #1
    13d0:	d120      	bne.n	1414 <hif_isr+0x1f0>
				{
					if(gstrHifCxt.pfWifiCb)
    13d2:	4b74      	ldr	r3, [pc, #464]	; (15a4 <hif_isr+0x380>)
    13d4:	68db      	ldr	r3, [r3, #12]
    13d6:	2b00      	cmp	r3, #0
    13d8:	d00d      	beq.n	13f6 <hif_isr+0x1d2>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    13da:	4b72      	ldr	r3, [pc, #456]	; (15a4 <hif_isr+0x380>)
    13dc:	68db      	ldr	r3, [r3, #12]
    13de:	1d3a      	adds	r2, r7, #4
    13e0:	7852      	ldrb	r2, [r2, #1]
    13e2:	b2d0      	uxtb	r0, r2
    13e4:	1d3a      	adds	r2, r7, #4
    13e6:	8852      	ldrh	r2, [r2, #2]
    13e8:	b292      	uxth	r2, r2
    13ea:	3a08      	subs	r2, #8
    13ec:	b291      	uxth	r1, r2
    13ee:	683a      	ldr	r2, [r7, #0]
    13f0:	3208      	adds	r2, #8
    13f2:	4798      	blx	r3
    13f4:	e0fe      	b.n	15f4 <hif_isr+0x3d0>
					else
						M2M_ERR("WIFI callback is not registered\n");
    13f6:	23f3      	movs	r3, #243	; 0xf3
    13f8:	005a      	lsls	r2, r3, #1
    13fa:	496c      	ldr	r1, [pc, #432]	; (15ac <hif_isr+0x388>)
    13fc:	4b6c      	ldr	r3, [pc, #432]	; (15b0 <hif_isr+0x38c>)
    13fe:	0018      	movs	r0, r3
    1400:	4b6c      	ldr	r3, [pc, #432]	; (15b4 <hif_isr+0x390>)
    1402:	4798      	blx	r3
    1404:	4b72      	ldr	r3, [pc, #456]	; (15d0 <hif_isr+0x3ac>)
    1406:	0018      	movs	r0, r3
    1408:	4b6c      	ldr	r3, [pc, #432]	; (15bc <hif_isr+0x398>)
    140a:	4798      	blx	r3
    140c:	200d      	movs	r0, #13
    140e:	4b6c      	ldr	r3, [pc, #432]	; (15c0 <hif_isr+0x39c>)
    1410:	4798      	blx	r3
    1412:	e0ef      	b.n	15f4 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    1414:	1d3b      	adds	r3, r7, #4
    1416:	781b      	ldrb	r3, [r3, #0]
    1418:	b2db      	uxtb	r3, r3
    141a:	2b02      	cmp	r3, #2
    141c:	d120      	bne.n	1460 <hif_isr+0x23c>
				{
					if(gstrHifCxt.pfIpCb)
    141e:	4b61      	ldr	r3, [pc, #388]	; (15a4 <hif_isr+0x380>)
    1420:	691b      	ldr	r3, [r3, #16]
    1422:	2b00      	cmp	r3, #0
    1424:	d00d      	beq.n	1442 <hif_isr+0x21e>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1426:	4b5f      	ldr	r3, [pc, #380]	; (15a4 <hif_isr+0x380>)
    1428:	691b      	ldr	r3, [r3, #16]
    142a:	1d3a      	adds	r2, r7, #4
    142c:	7852      	ldrb	r2, [r2, #1]
    142e:	b2d0      	uxtb	r0, r2
    1430:	1d3a      	adds	r2, r7, #4
    1432:	8852      	ldrh	r2, [r2, #2]
    1434:	b292      	uxth	r2, r2
    1436:	3a08      	subs	r2, #8
    1438:	b291      	uxth	r1, r2
    143a:	683a      	ldr	r2, [r7, #0]
    143c:	3208      	adds	r2, #8
    143e:	4798      	blx	r3
    1440:	e0d8      	b.n	15f4 <hif_isr+0x3d0>
					else
						M2M_ERR("Scoket callback is not registered\n");
    1442:	23f7      	movs	r3, #247	; 0xf7
    1444:	005a      	lsls	r2, r3, #1
    1446:	4959      	ldr	r1, [pc, #356]	; (15ac <hif_isr+0x388>)
    1448:	4b59      	ldr	r3, [pc, #356]	; (15b0 <hif_isr+0x38c>)
    144a:	0018      	movs	r0, r3
    144c:	4b59      	ldr	r3, [pc, #356]	; (15b4 <hif_isr+0x390>)
    144e:	4798      	blx	r3
    1450:	4b60      	ldr	r3, [pc, #384]	; (15d4 <hif_isr+0x3b0>)
    1452:	0018      	movs	r0, r3
    1454:	4b59      	ldr	r3, [pc, #356]	; (15bc <hif_isr+0x398>)
    1456:	4798      	blx	r3
    1458:	200d      	movs	r0, #13
    145a:	4b59      	ldr	r3, [pc, #356]	; (15c0 <hif_isr+0x39c>)
    145c:	4798      	blx	r3
    145e:	e0c9      	b.n	15f4 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    1460:	1d3b      	adds	r3, r7, #4
    1462:	781b      	ldrb	r3, [r3, #0]
    1464:	b2db      	uxtb	r3, r3
    1466:	2b04      	cmp	r3, #4
    1468:	d120      	bne.n	14ac <hif_isr+0x288>
				{
					if(gstrHifCxt.pfOtaCb)
    146a:	4b4e      	ldr	r3, [pc, #312]	; (15a4 <hif_isr+0x380>)
    146c:	695b      	ldr	r3, [r3, #20]
    146e:	2b00      	cmp	r3, #0
    1470:	d00d      	beq.n	148e <hif_isr+0x26a>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1472:	4b4c      	ldr	r3, [pc, #304]	; (15a4 <hif_isr+0x380>)
    1474:	695b      	ldr	r3, [r3, #20]
    1476:	1d3a      	adds	r2, r7, #4
    1478:	7852      	ldrb	r2, [r2, #1]
    147a:	b2d0      	uxtb	r0, r2
    147c:	1d3a      	adds	r2, r7, #4
    147e:	8852      	ldrh	r2, [r2, #2]
    1480:	b292      	uxth	r2, r2
    1482:	3a08      	subs	r2, #8
    1484:	b291      	uxth	r1, r2
    1486:	683a      	ldr	r2, [r7, #0]
    1488:	3208      	adds	r2, #8
    148a:	4798      	blx	r3
    148c:	e0b2      	b.n	15f4 <hif_isr+0x3d0>
					else
						M2M_ERR("Ota callback is not registered\n");
    148e:	23fb      	movs	r3, #251	; 0xfb
    1490:	005a      	lsls	r2, r3, #1
    1492:	4946      	ldr	r1, [pc, #280]	; (15ac <hif_isr+0x388>)
    1494:	4b46      	ldr	r3, [pc, #280]	; (15b0 <hif_isr+0x38c>)
    1496:	0018      	movs	r0, r3
    1498:	4b46      	ldr	r3, [pc, #280]	; (15b4 <hif_isr+0x390>)
    149a:	4798      	blx	r3
    149c:	4b4e      	ldr	r3, [pc, #312]	; (15d8 <hif_isr+0x3b4>)
    149e:	0018      	movs	r0, r3
    14a0:	4b46      	ldr	r3, [pc, #280]	; (15bc <hif_isr+0x398>)
    14a2:	4798      	blx	r3
    14a4:	200d      	movs	r0, #13
    14a6:	4b46      	ldr	r3, [pc, #280]	; (15c0 <hif_isr+0x39c>)
    14a8:	4798      	blx	r3
    14aa:	e0a3      	b.n	15f4 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    14ac:	1d3b      	adds	r3, r7, #4
    14ae:	781b      	ldrb	r3, [r3, #0]
    14b0:	b2db      	uxtb	r3, r3
    14b2:	2b06      	cmp	r3, #6
    14b4:	d11f      	bne.n	14f6 <hif_isr+0x2d2>
				{
					if(gstrHifCxt.pfCryptoCb)
    14b6:	4b3b      	ldr	r3, [pc, #236]	; (15a4 <hif_isr+0x380>)
    14b8:	6a1b      	ldr	r3, [r3, #32]
    14ba:	2b00      	cmp	r3, #0
    14bc:	d00d      	beq.n	14da <hif_isr+0x2b6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    14be:	4b39      	ldr	r3, [pc, #228]	; (15a4 <hif_isr+0x380>)
    14c0:	6a1b      	ldr	r3, [r3, #32]
    14c2:	1d3a      	adds	r2, r7, #4
    14c4:	7852      	ldrb	r2, [r2, #1]
    14c6:	b2d0      	uxtb	r0, r2
    14c8:	1d3a      	adds	r2, r7, #4
    14ca:	8852      	ldrh	r2, [r2, #2]
    14cc:	b292      	uxth	r2, r2
    14ce:	3a08      	subs	r2, #8
    14d0:	b291      	uxth	r1, r2
    14d2:	683a      	ldr	r2, [r7, #0]
    14d4:	3208      	adds	r2, #8
    14d6:	4798      	blx	r3
    14d8:	e08c      	b.n	15f4 <hif_isr+0x3d0>

					else
						M2M_ERR("Crypto callback is not registered\n");
    14da:	4a40      	ldr	r2, [pc, #256]	; (15dc <hif_isr+0x3b8>)
    14dc:	4933      	ldr	r1, [pc, #204]	; (15ac <hif_isr+0x388>)
    14de:	4b34      	ldr	r3, [pc, #208]	; (15b0 <hif_isr+0x38c>)
    14e0:	0018      	movs	r0, r3
    14e2:	4b34      	ldr	r3, [pc, #208]	; (15b4 <hif_isr+0x390>)
    14e4:	4798      	blx	r3
    14e6:	4b3e      	ldr	r3, [pc, #248]	; (15e0 <hif_isr+0x3bc>)
    14e8:	0018      	movs	r0, r3
    14ea:	4b34      	ldr	r3, [pc, #208]	; (15bc <hif_isr+0x398>)
    14ec:	4798      	blx	r3
    14ee:	200d      	movs	r0, #13
    14f0:	4b33      	ldr	r3, [pc, #204]	; (15c0 <hif_isr+0x39c>)
    14f2:	4798      	blx	r3
    14f4:	e07e      	b.n	15f4 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    14f6:	1d3b      	adds	r3, r7, #4
    14f8:	781b      	ldrb	r3, [r3, #0]
    14fa:	b2db      	uxtb	r3, r3
    14fc:	2b07      	cmp	r3, #7
    14fe:	d11f      	bne.n	1540 <hif_isr+0x31c>
				{
					if(gstrHifCxt.pfSigmaCb)
    1500:	4b28      	ldr	r3, [pc, #160]	; (15a4 <hif_isr+0x380>)
    1502:	699b      	ldr	r3, [r3, #24]
    1504:	2b00      	cmp	r3, #0
    1506:	d00d      	beq.n	1524 <hif_isr+0x300>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1508:	4b26      	ldr	r3, [pc, #152]	; (15a4 <hif_isr+0x380>)
    150a:	699b      	ldr	r3, [r3, #24]
    150c:	1d3a      	adds	r2, r7, #4
    150e:	7852      	ldrb	r2, [r2, #1]
    1510:	b2d0      	uxtb	r0, r2
    1512:	1d3a      	adds	r2, r7, #4
    1514:	8852      	ldrh	r2, [r2, #2]
    1516:	b292      	uxth	r2, r2
    1518:	3a08      	subs	r2, #8
    151a:	b291      	uxth	r1, r2
    151c:	683a      	ldr	r2, [r7, #0]
    151e:	3208      	adds	r2, #8
    1520:	4798      	blx	r3
    1522:	e067      	b.n	15f4 <hif_isr+0x3d0>
					else
						M2M_ERR("Sigma callback is not registered\n");
    1524:	4a2f      	ldr	r2, [pc, #188]	; (15e4 <hif_isr+0x3c0>)
    1526:	4921      	ldr	r1, [pc, #132]	; (15ac <hif_isr+0x388>)
    1528:	4b21      	ldr	r3, [pc, #132]	; (15b0 <hif_isr+0x38c>)
    152a:	0018      	movs	r0, r3
    152c:	4b21      	ldr	r3, [pc, #132]	; (15b4 <hif_isr+0x390>)
    152e:	4798      	blx	r3
    1530:	4b2d      	ldr	r3, [pc, #180]	; (15e8 <hif_isr+0x3c4>)
    1532:	0018      	movs	r0, r3
    1534:	4b21      	ldr	r3, [pc, #132]	; (15bc <hif_isr+0x398>)
    1536:	4798      	blx	r3
    1538:	200d      	movs	r0, #13
    153a:	4b21      	ldr	r3, [pc, #132]	; (15c0 <hif_isr+0x39c>)
    153c:	4798      	blx	r3
    153e:	e059      	b.n	15f4 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    1540:	1d3b      	adds	r3, r7, #4
    1542:	781b      	ldrb	r3, [r3, #0]
    1544:	b2db      	uxtb	r3, r3
    1546:	2b05      	cmp	r3, #5
    1548:	d111      	bne.n	156e <hif_isr+0x34a>
				{
				    if(gstrHifCxt.pfSslCb)
    154a:	4b16      	ldr	r3, [pc, #88]	; (15a4 <hif_isr+0x380>)
    154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    154e:	2b00      	cmp	r3, #0
    1550:	d050      	beq.n	15f4 <hif_isr+0x3d0>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1552:	4b14      	ldr	r3, [pc, #80]	; (15a4 <hif_isr+0x380>)
    1554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1556:	1d3a      	adds	r2, r7, #4
    1558:	7852      	ldrb	r2, [r2, #1]
    155a:	b2d0      	uxtb	r0, r2
    155c:	1d3a      	adds	r2, r7, #4
    155e:	8852      	ldrh	r2, [r2, #2]
    1560:	b292      	uxth	r2, r2
    1562:	3a08      	subs	r2, #8
    1564:	b291      	uxth	r1, r2
    1566:	683a      	ldr	r2, [r7, #0]
    1568:	3208      	adds	r2, #8
    156a:	4798      	blx	r3
    156c:	e042      	b.n	15f4 <hif_isr+0x3d0>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
    156e:	4a1f      	ldr	r2, [pc, #124]	; (15ec <hif_isr+0x3c8>)
    1570:	490e      	ldr	r1, [pc, #56]	; (15ac <hif_isr+0x388>)
    1572:	4b0f      	ldr	r3, [pc, #60]	; (15b0 <hif_isr+0x38c>)
    1574:	0018      	movs	r0, r3
    1576:	4b0f      	ldr	r3, [pc, #60]	; (15b4 <hif_isr+0x390>)
    1578:	4798      	blx	r3
    157a:	4b1d      	ldr	r3, [pc, #116]	; (15f0 <hif_isr+0x3cc>)
    157c:	0018      	movs	r0, r3
    157e:	4b0f      	ldr	r3, [pc, #60]	; (15bc <hif_isr+0x398>)
    1580:	4798      	blx	r3
    1582:	200d      	movs	r0, #13
    1584:	4b0e      	ldr	r3, [pc, #56]	; (15c0 <hif_isr+0x39c>)
    1586:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    1588:	230f      	movs	r3, #15
    158a:	18fb      	adds	r3, r7, r3
    158c:	22fa      	movs	r2, #250	; 0xfa
    158e:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    1590:	e088      	b.n	16a4 <hif_isr+0x480>
    1592:	46c0      	nop			; (mov r8, r8)
    1594:	00001070 	.word	0x00001070
    1598:	00002c61 	.word	0x00002c61
    159c:	000003d5 	.word	0x000003d5
    15a0:	00002c85 	.word	0x00002c85
    15a4:	200002ec 	.word	0x200002ec
    15a8:	00001084 	.word	0x00001084
    15ac:	0000f880 	.word	0x0000f880
    15b0:	0000f57c 	.word	0x0000f57c
    15b4:	0000dfad 	.word	0x0000dfad
    15b8:	0000f5ac 	.word	0x0000f5ac
    15bc:	0000e0c9 	.word	0x0000e0c9
    15c0:	0000dfe1 	.word	0x0000dfe1
    15c4:	00002cd5 	.word	0x00002cd5
    15c8:	0000f5d0 	.word	0x0000f5d0
    15cc:	0000f5e8 	.word	0x0000f5e8
    15d0:	0000f628 	.word	0x0000f628
    15d4:	0000f648 	.word	0x0000f648
    15d8:	0000f66c 	.word	0x0000f66c
    15dc:	000001ff 	.word	0x000001ff
    15e0:	0000f68c 	.word	0x0000f68c
    15e4:	00000206 	.word	0x00000206
    15e8:	0000f6b0 	.word	0x0000f6b0
    15ec:	0000020f 	.word	0x0000020f
    15f0:	0000f6d4 	.word	0x0000f6d4
				}
				if(gstrHifCxt.u8HifRXDone)
    15f4:	4b2f      	ldr	r3, [pc, #188]	; (16b4 <hif_isr+0x490>)
    15f6:	789b      	ldrb	r3, [r3, #2]
    15f8:	b2db      	uxtb	r3, r3
    15fa:	2b00      	cmp	r3, #0
    15fc:	d052      	beq.n	16a4 <hif_isr+0x480>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    15fe:	4a2e      	ldr	r2, [pc, #184]	; (16b8 <hif_isr+0x494>)
    1600:	492e      	ldr	r1, [pc, #184]	; (16bc <hif_isr+0x498>)
    1602:	4b2f      	ldr	r3, [pc, #188]	; (16c0 <hif_isr+0x49c>)
    1604:	0018      	movs	r0, r3
    1606:	4b2f      	ldr	r3, [pc, #188]	; (16c4 <hif_isr+0x4a0>)
    1608:	4798      	blx	r3
    160a:	1d3b      	adds	r3, r7, #4
    160c:	781b      	ldrb	r3, [r3, #0]
    160e:	b2db      	uxtb	r3, r3
    1610:	0019      	movs	r1, r3
    1612:	1d3b      	adds	r3, r7, #4
    1614:	785b      	ldrb	r3, [r3, #1]
    1616:	b2db      	uxtb	r3, r3
    1618:	001a      	movs	r2, r3
    161a:	4b2b      	ldr	r3, [pc, #172]	; (16c8 <hif_isr+0x4a4>)
    161c:	0018      	movs	r0, r3
    161e:	4b29      	ldr	r3, [pc, #164]	; (16c4 <hif_isr+0x4a0>)
    1620:	4798      	blx	r3
    1622:	200d      	movs	r0, #13
    1624:	4b29      	ldr	r3, [pc, #164]	; (16cc <hif_isr+0x4a8>)
    1626:	4798      	blx	r3
					ret = hif_set_rx_done();
    1628:	230f      	movs	r3, #15
    162a:	18fc      	adds	r4, r7, r3
    162c:	4b28      	ldr	r3, [pc, #160]	; (16d0 <hif_isr+0x4ac>)
    162e:	4798      	blx	r3
    1630:	0003      	movs	r3, r0
    1632:	7023      	strb	r3, [r4, #0]
    1634:	e036      	b.n	16a4 <hif_isr+0x480>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
    1636:	2387      	movs	r3, #135	; 0x87
    1638:	009a      	lsls	r2, r3, #2
    163a:	4920      	ldr	r1, [pc, #128]	; (16bc <hif_isr+0x498>)
    163c:	4b20      	ldr	r3, [pc, #128]	; (16c0 <hif_isr+0x49c>)
    163e:	0018      	movs	r0, r3
    1640:	4b20      	ldr	r3, [pc, #128]	; (16c4 <hif_isr+0x4a0>)
    1642:	4798      	blx	r3
    1644:	4b23      	ldr	r3, [pc, #140]	; (16d4 <hif_isr+0x4b0>)
    1646:	0018      	movs	r0, r3
    1648:	4b23      	ldr	r3, [pc, #140]	; (16d8 <hif_isr+0x4b4>)
    164a:	4798      	blx	r3
    164c:	200d      	movs	r0, #13
    164e:	4b1f      	ldr	r3, [pc, #124]	; (16cc <hif_isr+0x4a8>)
    1650:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    1652:	230f      	movs	r3, #15
    1654:	18fb      	adds	r3, r7, r3
    1656:	22fe      	movs	r2, #254	; 0xfe
    1658:	701a      	strb	r2, [r3, #0]
				goto ERR1;
    165a:	e023      	b.n	16a4 <hif_isr+0x480>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
    165c:	2389      	movs	r3, #137	; 0x89
    165e:	009a      	lsls	r2, r3, #2
    1660:	4916      	ldr	r1, [pc, #88]	; (16bc <hif_isr+0x498>)
    1662:	4b17      	ldr	r3, [pc, #92]	; (16c0 <hif_isr+0x49c>)
    1664:	0018      	movs	r0, r3
    1666:	4b17      	ldr	r3, [pc, #92]	; (16c4 <hif_isr+0x4a0>)
    1668:	4798      	blx	r3
    166a:	68ba      	ldr	r2, [r7, #8]
    166c:	4b1b      	ldr	r3, [pc, #108]	; (16dc <hif_isr+0x4b8>)
    166e:	0011      	movs	r1, r2
    1670:	0018      	movs	r0, r3
    1672:	4b14      	ldr	r3, [pc, #80]	; (16c4 <hif_isr+0x4a0>)
    1674:	4798      	blx	r3
    1676:	200d      	movs	r0, #13
    1678:	4b14      	ldr	r3, [pc, #80]	; (16cc <hif_isr+0x4a8>)
    167a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    167c:	230f      	movs	r3, #15
    167e:	18fb      	adds	r3, r7, r3
    1680:	22f4      	movs	r2, #244	; 0xf4
    1682:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1684:	e00e      	b.n	16a4 <hif_isr+0x480>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    1686:	4a16      	ldr	r2, [pc, #88]	; (16e0 <hif_isr+0x4bc>)
    1688:	490c      	ldr	r1, [pc, #48]	; (16bc <hif_isr+0x498>)
    168a:	4b0d      	ldr	r3, [pc, #52]	; (16c0 <hif_isr+0x49c>)
    168c:	0018      	movs	r0, r3
    168e:	4b0d      	ldr	r3, [pc, #52]	; (16c4 <hif_isr+0x4a0>)
    1690:	4798      	blx	r3
    1692:	4b14      	ldr	r3, [pc, #80]	; (16e4 <hif_isr+0x4c0>)
    1694:	0018      	movs	r0, r3
    1696:	4b10      	ldr	r3, [pc, #64]	; (16d8 <hif_isr+0x4b4>)
    1698:	4798      	blx	r3
    169a:	200d      	movs	r0, #13
    169c:	4b0b      	ldr	r3, [pc, #44]	; (16cc <hif_isr+0x4a8>)
    169e:	4798      	blx	r3
		goto ERR1;
    16a0:	e000      	b.n	16a4 <hif_isr+0x480>
			if(ret != M2M_SUCCESS)goto ERR1;
    16a2:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    16a4:	230f      	movs	r3, #15
    16a6:	18fb      	adds	r3, r7, r3
    16a8:	781b      	ldrb	r3, [r3, #0]
    16aa:	b25b      	sxtb	r3, r3
}
    16ac:	0018      	movs	r0, r3
    16ae:	46bd      	mov	sp, r7
    16b0:	b005      	add	sp, #20
    16b2:	bd90      	pop	{r4, r7, pc}
    16b4:	200002ec 	.word	0x200002ec
    16b8:	00000215 	.word	0x00000215
    16bc:	0000f880 	.word	0x0000f880
    16c0:	0000f57c 	.word	0x0000f57c
    16c4:	0000dfad 	.word	0x0000dfad
    16c8:	0000f6ec 	.word	0x0000f6ec
    16cc:	0000dfe1 	.word	0x0000dfe1
    16d0:	00000cbd 	.word	0x00000cbd
    16d4:	0000f718 	.word	0x0000f718
    16d8:	0000e0c9 	.word	0x0000e0c9
    16dc:	0000f72c 	.word	0x0000f72c
    16e0:	0000022d 	.word	0x0000022d
    16e4:	0000f748 	.word	0x0000f748

000016e8 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    16e8:	b590      	push	{r4, r7, lr}
    16ea:	b083      	sub	sp, #12
    16ec:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
    16ee:	1dfb      	adds	r3, r7, #7
    16f0:	2200      	movs	r2, #0
    16f2:	701a      	strb	r2, [r3, #0]
	while (gstrHifCxt.u8Interrupt) {
    16f4:	e023      	b.n	173e <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    16f6:	4b18      	ldr	r3, [pc, #96]	; (1758 <hif_handle_isr+0x70>)
    16f8:	78db      	ldrb	r3, [r3, #3]
    16fa:	b2db      	uxtb	r3, r3
    16fc:	3b01      	subs	r3, #1
    16fe:	b2da      	uxtb	r2, r3
    1700:	4b15      	ldr	r3, [pc, #84]	; (1758 <hif_handle_isr+0x70>)
    1702:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
    1704:	1dfc      	adds	r4, r7, #7
    1706:	4b15      	ldr	r3, [pc, #84]	; (175c <hif_handle_isr+0x74>)
    1708:	4798      	blx	r3
    170a:	0003      	movs	r3, r0
    170c:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    170e:	1dfb      	adds	r3, r7, #7
    1710:	781b      	ldrb	r3, [r3, #0]
    1712:	b25b      	sxtb	r3, r3
    1714:	2b00      	cmp	r3, #0
    1716:	d100      	bne.n	171a <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    1718:	e011      	b.n	173e <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    171a:	4a11      	ldr	r2, [pc, #68]	; (1760 <hif_handle_isr+0x78>)
    171c:	4911      	ldr	r1, [pc, #68]	; (1764 <hif_handle_isr+0x7c>)
    171e:	4b12      	ldr	r3, [pc, #72]	; (1768 <hif_handle_isr+0x80>)
    1720:	0018      	movs	r0, r3
    1722:	4b12      	ldr	r3, [pc, #72]	; (176c <hif_handle_isr+0x84>)
    1724:	4798      	blx	r3
    1726:	1dfb      	adds	r3, r7, #7
    1728:	2200      	movs	r2, #0
    172a:	569a      	ldrsb	r2, [r3, r2]
    172c:	4b10      	ldr	r3, [pc, #64]	; (1770 <hif_handle_isr+0x88>)
    172e:	0011      	movs	r1, r2
    1730:	0018      	movs	r0, r3
    1732:	4b0e      	ldr	r3, [pc, #56]	; (176c <hif_handle_isr+0x84>)
    1734:	4798      	blx	r3
    1736:	200d      	movs	r0, #13
    1738:	4b0e      	ldr	r3, [pc, #56]	; (1774 <hif_handle_isr+0x8c>)
    173a:	4798      	blx	r3
			ret = hif_isr();
    173c:	e7e2      	b.n	1704 <hif_handle_isr+0x1c>
	while (gstrHifCxt.u8Interrupt) {
    173e:	4b06      	ldr	r3, [pc, #24]	; (1758 <hif_handle_isr+0x70>)
    1740:	78db      	ldrb	r3, [r3, #3]
    1742:	b2db      	uxtb	r3, r3
    1744:	2b00      	cmp	r3, #0
    1746:	d1d6      	bne.n	16f6 <hif_handle_isr+0xe>
			}
		}
	}

	return ret;
    1748:	1dfb      	adds	r3, r7, #7
    174a:	781b      	ldrb	r3, [r3, #0]
    174c:	b25b      	sxtb	r3, r3
}
    174e:	0018      	movs	r0, r3
    1750:	46bd      	mov	sp, r7
    1752:	b003      	add	sp, #12
    1754:	bd90      	pop	{r4, r7, pc}
    1756:	46c0      	nop			; (mov r8, r8)
    1758:	200002ec 	.word	0x200002ec
    175c:	00001225 	.word	0x00001225
    1760:	0000024a 	.word	0x0000024a
    1764:	0000f888 	.word	0x0000f888
    1768:	0000f57c 	.word	0x0000f57c
    176c:	0000dfad 	.word	0x0000dfad
    1770:	0000f76c 	.word	0x0000f76c
    1774:	0000dfe1 	.word	0x0000dfe1

00001778 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    1778:	b590      	push	{r4, r7, lr}
    177a:	b087      	sub	sp, #28
    177c:	af00      	add	r7, sp, #0
    177e:	60f8      	str	r0, [r7, #12]
    1780:	60b9      	str	r1, [r7, #8]
    1782:	0019      	movs	r1, r3
    1784:	1dbb      	adds	r3, r7, #6
    1786:	801a      	strh	r2, [r3, #0]
    1788:	1d7b      	adds	r3, r7, #5
    178a:	1c0a      	adds	r2, r1, #0
    178c:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    178e:	2317      	movs	r3, #23
    1790:	18fb      	adds	r3, r7, r3
    1792:	2200      	movs	r2, #0
    1794:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    1796:	68fb      	ldr	r3, [r7, #12]
    1798:	2b00      	cmp	r3, #0
    179a:	d006      	beq.n	17aa <hif_receive+0x32>
    179c:	68bb      	ldr	r3, [r7, #8]
    179e:	2b00      	cmp	r3, #0
    17a0:	d003      	beq.n	17aa <hif_receive+0x32>
    17a2:	1dbb      	adds	r3, r7, #6
    17a4:	881b      	ldrh	r3, [r3, #0]
    17a6:	2b00      	cmp	r3, #0
    17a8:	d11c      	bne.n	17e4 <hif_receive+0x6c>
	{
		if(isDone)
    17aa:	1d7b      	adds	r3, r7, #5
    17ac:	781b      	ldrb	r3, [r3, #0]
    17ae:	2b00      	cmp	r3, #0
    17b0:	d006      	beq.n	17c0 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    17b2:	2317      	movs	r3, #23
    17b4:	18fc      	adds	r4, r7, r3
    17b6:	4b42      	ldr	r3, [pc, #264]	; (18c0 <hif_receive+0x148>)
    17b8:	4798      	blx	r3
    17ba:	0003      	movs	r3, r0
    17bc:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    17be:	e077      	b.n	18b0 <hif_receive+0x138>
			ret = M2M_ERR_FAIL;
    17c0:	2317      	movs	r3, #23
    17c2:	18fb      	adds	r3, r7, r3
    17c4:	22f4      	movs	r2, #244	; 0xf4
    17c6:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    17c8:	4a3e      	ldr	r2, [pc, #248]	; (18c4 <hif_receive+0x14c>)
    17ca:	493f      	ldr	r1, [pc, #252]	; (18c8 <hif_receive+0x150>)
    17cc:	4b3f      	ldr	r3, [pc, #252]	; (18cc <hif_receive+0x154>)
    17ce:	0018      	movs	r0, r3
    17d0:	4b3f      	ldr	r3, [pc, #252]	; (18d0 <hif_receive+0x158>)
    17d2:	4798      	blx	r3
    17d4:	4b3f      	ldr	r3, [pc, #252]	; (18d4 <hif_receive+0x15c>)
    17d6:	0018      	movs	r0, r3
    17d8:	4b3f      	ldr	r3, [pc, #252]	; (18d8 <hif_receive+0x160>)
    17da:	4798      	blx	r3
    17dc:	200d      	movs	r0, #13
    17de:	4b3f      	ldr	r3, [pc, #252]	; (18dc <hif_receive+0x164>)
    17e0:	4798      	blx	r3
		goto ERR1;
    17e2:	e065      	b.n	18b0 <hif_receive+0x138>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    17e4:	1dbb      	adds	r3, r7, #6
    17e6:	881a      	ldrh	r2, [r3, #0]
    17e8:	4b3d      	ldr	r3, [pc, #244]	; (18e0 <hif_receive+0x168>)
    17ea:	689b      	ldr	r3, [r3, #8]
    17ec:	429a      	cmp	r2, r3
    17ee:	d915      	bls.n	181c <hif_receive+0xa4>
	{
		ret = M2M_ERR_FAIL;
    17f0:	2317      	movs	r3, #23
    17f2:	18fb      	adds	r3, r7, r3
    17f4:	22f4      	movs	r2, #244	; 0xf4
    17f6:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    17f8:	4a3a      	ldr	r2, [pc, #232]	; (18e4 <hif_receive+0x16c>)
    17fa:	4933      	ldr	r1, [pc, #204]	; (18c8 <hif_receive+0x150>)
    17fc:	4b33      	ldr	r3, [pc, #204]	; (18cc <hif_receive+0x154>)
    17fe:	0018      	movs	r0, r3
    1800:	4b33      	ldr	r3, [pc, #204]	; (18d0 <hif_receive+0x158>)
    1802:	4798      	blx	r3
    1804:	1dbb      	adds	r3, r7, #6
    1806:	8819      	ldrh	r1, [r3, #0]
    1808:	4b35      	ldr	r3, [pc, #212]	; (18e0 <hif_receive+0x168>)
    180a:	689a      	ldr	r2, [r3, #8]
    180c:	4b36      	ldr	r3, [pc, #216]	; (18e8 <hif_receive+0x170>)
    180e:	0018      	movs	r0, r3
    1810:	4b2f      	ldr	r3, [pc, #188]	; (18d0 <hif_receive+0x158>)
    1812:	4798      	blx	r3
    1814:	200d      	movs	r0, #13
    1816:	4b31      	ldr	r3, [pc, #196]	; (18dc <hif_receive+0x164>)
    1818:	4798      	blx	r3
		goto ERR1;
    181a:	e049      	b.n	18b0 <hif_receive+0x138>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    181c:	4b30      	ldr	r3, [pc, #192]	; (18e0 <hif_receive+0x168>)
    181e:	685a      	ldr	r2, [r3, #4]
    1820:	68fb      	ldr	r3, [r7, #12]
    1822:	429a      	cmp	r2, r3
    1824:	d80a      	bhi.n	183c <hif_receive+0xc4>
    1826:	1dbb      	adds	r3, r7, #6
    1828:	881a      	ldrh	r2, [r3, #0]
    182a:	68fb      	ldr	r3, [r7, #12]
    182c:	18d2      	adds	r2, r2, r3
    182e:	4b2c      	ldr	r3, [pc, #176]	; (18e0 <hif_receive+0x168>)
    1830:	6859      	ldr	r1, [r3, #4]
    1832:	4b2b      	ldr	r3, [pc, #172]	; (18e0 <hif_receive+0x168>)
    1834:	689b      	ldr	r3, [r3, #8]
    1836:	18cb      	adds	r3, r1, r3
    1838:	429a      	cmp	r2, r3
    183a:	d911      	bls.n	1860 <hif_receive+0xe8>
	{
		ret = M2M_ERR_FAIL;
    183c:	2317      	movs	r3, #23
    183e:	18fb      	adds	r3, r7, r3
    1840:	22f4      	movs	r2, #244	; 0xf4
    1842:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    1844:	4a29      	ldr	r2, [pc, #164]	; (18ec <hif_receive+0x174>)
    1846:	4920      	ldr	r1, [pc, #128]	; (18c8 <hif_receive+0x150>)
    1848:	4b20      	ldr	r3, [pc, #128]	; (18cc <hif_receive+0x154>)
    184a:	0018      	movs	r0, r3
    184c:	4b20      	ldr	r3, [pc, #128]	; (18d0 <hif_receive+0x158>)
    184e:	4798      	blx	r3
    1850:	4b27      	ldr	r3, [pc, #156]	; (18f0 <hif_receive+0x178>)
    1852:	0018      	movs	r0, r3
    1854:	4b20      	ldr	r3, [pc, #128]	; (18d8 <hif_receive+0x160>)
    1856:	4798      	blx	r3
    1858:	200d      	movs	r0, #13
    185a:	4b20      	ldr	r3, [pc, #128]	; (18dc <hif_receive+0x164>)
    185c:	4798      	blx	r3
		goto ERR1;
    185e:	e027      	b.n	18b0 <hif_receive+0x138>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    1860:	1dbb      	adds	r3, r7, #6
    1862:	881a      	ldrh	r2, [r3, #0]
    1864:	2317      	movs	r3, #23
    1866:	18fc      	adds	r4, r7, r3
    1868:	68b9      	ldr	r1, [r7, #8]
    186a:	68fb      	ldr	r3, [r7, #12]
    186c:	0018      	movs	r0, r3
    186e:	4b21      	ldr	r3, [pc, #132]	; (18f4 <hif_receive+0x17c>)
    1870:	4798      	blx	r3
    1872:	0003      	movs	r3, r0
    1874:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    1876:	2317      	movs	r3, #23
    1878:	18fb      	adds	r3, r7, r3
    187a:	781b      	ldrb	r3, [r3, #0]
    187c:	b25b      	sxtb	r3, r3
    187e:	2b00      	cmp	r3, #0
    1880:	d115      	bne.n	18ae <hif_receive+0x136>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    1882:	4b17      	ldr	r3, [pc, #92]	; (18e0 <hif_receive+0x168>)
    1884:	685a      	ldr	r2, [r3, #4]
    1886:	4b16      	ldr	r3, [pc, #88]	; (18e0 <hif_receive+0x168>)
    1888:	689b      	ldr	r3, [r3, #8]
    188a:	18d2      	adds	r2, r2, r3
    188c:	1dbb      	adds	r3, r7, #6
    188e:	8819      	ldrh	r1, [r3, #0]
    1890:	68fb      	ldr	r3, [r7, #12]
    1892:	18cb      	adds	r3, r1, r3
    1894:	429a      	cmp	r2, r3
    1896:	d003      	beq.n	18a0 <hif_receive+0x128>
    1898:	1d7b      	adds	r3, r7, #5
    189a:	781b      	ldrb	r3, [r3, #0]
    189c:	2b00      	cmp	r3, #0
    189e:	d007      	beq.n	18b0 <hif_receive+0x138>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    18a0:	2317      	movs	r3, #23
    18a2:	18fc      	adds	r4, r7, r3
    18a4:	4b06      	ldr	r3, [pc, #24]	; (18c0 <hif_receive+0x148>)
    18a6:	4798      	blx	r3
    18a8:	0003      	movs	r3, r0
    18aa:	7023      	strb	r3, [r4, #0]
    18ac:	e000      	b.n	18b0 <hif_receive+0x138>
	if(ret != M2M_SUCCESS)goto ERR1;
    18ae:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    18b0:	2317      	movs	r3, #23
    18b2:	18fb      	adds	r3, r7, r3
    18b4:	781b      	ldrb	r3, [r3, #0]
    18b6:	b25b      	sxtb	r3, r3
}
    18b8:	0018      	movs	r0, r3
    18ba:	46bd      	mov	sp, r7
    18bc:	b007      	add	sp, #28
    18be:	bd90      	pop	{r4, r7, pc}
    18c0:	00000cbd 	.word	0x00000cbd
    18c4:	0000026b 	.word	0x0000026b
    18c8:	0000f898 	.word	0x0000f898
    18cc:	0000f57c 	.word	0x0000f57c
    18d0:	0000dfad 	.word	0x0000dfad
    18d4:	0000f79c 	.word	0x0000f79c
    18d8:	0000e0c9 	.word	0x0000e0c9
    18dc:	0000dfe1 	.word	0x0000dfe1
    18e0:	200002ec 	.word	0x200002ec
    18e4:	00000273 	.word	0x00000273
    18e8:	0000f7bc 	.word	0x0000f7bc
    18ec:	00000279 	.word	0x00000279
    18f0:	0000f804 	.word	0x0000f804
    18f4:	00002cd5 	.word	0x00002cd5

000018f8 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    18f8:	b580      	push	{r7, lr}
    18fa:	b084      	sub	sp, #16
    18fc:	af00      	add	r7, sp, #0
    18fe:	0002      	movs	r2, r0
    1900:	6039      	str	r1, [r7, #0]
    1902:	1dfb      	adds	r3, r7, #7
    1904:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    1906:	230f      	movs	r3, #15
    1908:	18fb      	adds	r3, r7, r3
    190a:	2200      	movs	r2, #0
    190c:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    190e:	1dfb      	adds	r3, r7, #7
    1910:	781b      	ldrb	r3, [r3, #0]
    1912:	2b07      	cmp	r3, #7
    1914:	d820      	bhi.n	1958 <hif_register_cb+0x60>
    1916:	009a      	lsls	r2, r3, #2
    1918:	4b1e      	ldr	r3, [pc, #120]	; (1994 <hif_register_cb+0x9c>)
    191a:	18d3      	adds	r3, r2, r3
    191c:	681b      	ldr	r3, [r3, #0]
    191e:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    1920:	4b1d      	ldr	r3, [pc, #116]	; (1998 <hif_register_cb+0xa0>)
    1922:	683a      	ldr	r2, [r7, #0]
    1924:	611a      	str	r2, [r3, #16]
			break;
    1926:	e02c      	b.n	1982 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    1928:	4b1b      	ldr	r3, [pc, #108]	; (1998 <hif_register_cb+0xa0>)
    192a:	683a      	ldr	r2, [r7, #0]
    192c:	60da      	str	r2, [r3, #12]
			break;
    192e:	e028      	b.n	1982 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    1930:	4b19      	ldr	r3, [pc, #100]	; (1998 <hif_register_cb+0xa0>)
    1932:	683a      	ldr	r2, [r7, #0]
    1934:	615a      	str	r2, [r3, #20]
			break;
    1936:	e024      	b.n	1982 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    1938:	4b17      	ldr	r3, [pc, #92]	; (1998 <hif_register_cb+0xa0>)
    193a:	683a      	ldr	r2, [r7, #0]
    193c:	61da      	str	r2, [r3, #28]
			break;
    193e:	e020      	b.n	1982 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    1940:	4b15      	ldr	r3, [pc, #84]	; (1998 <hif_register_cb+0xa0>)
    1942:	683a      	ldr	r2, [r7, #0]
    1944:	621a      	str	r2, [r3, #32]
			break;
    1946:	e01c      	b.n	1982 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    1948:	4b13      	ldr	r3, [pc, #76]	; (1998 <hif_register_cb+0xa0>)
    194a:	683a      	ldr	r2, [r7, #0]
    194c:	619a      	str	r2, [r3, #24]
			break;
    194e:	e018      	b.n	1982 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    1950:	4b11      	ldr	r3, [pc, #68]	; (1998 <hif_register_cb+0xa0>)
    1952:	683a      	ldr	r2, [r7, #0]
    1954:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    1956:	e014      	b.n	1982 <hif_register_cb+0x8a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    1958:	4a10      	ldr	r2, [pc, #64]	; (199c <hif_register_cb+0xa4>)
    195a:	4911      	ldr	r1, [pc, #68]	; (19a0 <hif_register_cb+0xa8>)
    195c:	4b11      	ldr	r3, [pc, #68]	; (19a4 <hif_register_cb+0xac>)
    195e:	0018      	movs	r0, r3
    1960:	4b11      	ldr	r3, [pc, #68]	; (19a8 <hif_register_cb+0xb0>)
    1962:	4798      	blx	r3
    1964:	1dfb      	adds	r3, r7, #7
    1966:	781a      	ldrb	r2, [r3, #0]
    1968:	4b10      	ldr	r3, [pc, #64]	; (19ac <hif_register_cb+0xb4>)
    196a:	0011      	movs	r1, r2
    196c:	0018      	movs	r0, r3
    196e:	4b0e      	ldr	r3, [pc, #56]	; (19a8 <hif_register_cb+0xb0>)
    1970:	4798      	blx	r3
    1972:	200d      	movs	r0, #13
    1974:	4b0e      	ldr	r3, [pc, #56]	; (19b0 <hif_register_cb+0xb8>)
    1976:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1978:	230f      	movs	r3, #15
    197a:	18fb      	adds	r3, r7, r3
    197c:	22f4      	movs	r2, #244	; 0xf4
    197e:	701a      	strb	r2, [r3, #0]
			break;
    1980:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    1982:	230f      	movs	r3, #15
    1984:	18fb      	adds	r3, r7, r3
    1986:	781b      	ldrb	r3, [r3, #0]
    1988:	b25b      	sxtb	r3, r3
}
    198a:	0018      	movs	r0, r3
    198c:	46bd      	mov	sp, r7
    198e:	b004      	add	sp, #16
    1990:	bd80      	pop	{r7, pc}
    1992:	46c0      	nop			; (mov r8, r8)
    1994:	0000f854 	.word	0x0000f854
    1998:	200002ec 	.word	0x200002ec
    199c:	000002b1 	.word	0x000002b1
    19a0:	0000f8a4 	.word	0x0000f8a4
    19a4:	0000f57c 	.word	0x0000f57c
    19a8:	0000dfad 	.word	0x0000dfad
    19ac:	0000f848 	.word	0x0000f848
    19b0:	0000dfe1 	.word	0x0000dfe1

000019b4 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    19b4:	b590      	push	{r4, r7, lr}
    19b6:	b0ad      	sub	sp, #180	; 0xb4
    19b8:	af02      	add	r7, sp, #8
    19ba:	603a      	str	r2, [r7, #0]
    19bc:	1dfb      	adds	r3, r7, #7
    19be:	1c02      	adds	r2, r0, #0
    19c0:	701a      	strb	r2, [r3, #0]
    19c2:	1d3b      	adds	r3, r7, #4
    19c4:	1c0a      	adds	r2, r1, #0
    19c6:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    19c8:	1dfb      	adds	r3, r7, #7
    19ca:	781b      	ldrb	r3, [r3, #0]
    19cc:	2b2c      	cmp	r3, #44	; 0x2c
    19ce:	d116      	bne.n	19fe <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    19d0:	239c      	movs	r3, #156	; 0x9c
    19d2:	18f9      	adds	r1, r7, r3
    19d4:	6838      	ldr	r0, [r7, #0]
    19d6:	2300      	movs	r3, #0
    19d8:	2204      	movs	r2, #4
    19da:	4cc6      	ldr	r4, [pc, #792]	; (1cf4 <m2m_wifi_cb+0x340>)
    19dc:	47a0      	blx	r4
    19de:	1e03      	subs	r3, r0, #0
    19e0:	d000      	beq.n	19e4 <m2m_wifi_cb+0x30>
    19e2:	e1aa      	b.n	1d3a <m2m_wifi_cb+0x386>
		{
			if (gpfAppWifiCb)
    19e4:	4bc4      	ldr	r3, [pc, #784]	; (1cf8 <m2m_wifi_cb+0x344>)
    19e6:	681b      	ldr	r3, [r3, #0]
    19e8:	2b00      	cmp	r3, #0
    19ea:	d100      	bne.n	19ee <m2m_wifi_cb+0x3a>
    19ec:	e1a5      	b.n	1d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    19ee:	4bc2      	ldr	r3, [pc, #776]	; (1cf8 <m2m_wifi_cb+0x344>)
    19f0:	681b      	ldr	r3, [r3, #0]
    19f2:	229c      	movs	r2, #156	; 0x9c
    19f4:	18ba      	adds	r2, r7, r2
    19f6:	0011      	movs	r1, r2
    19f8:	202c      	movs	r0, #44	; 0x2c
    19fa:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    19fc:	e19d      	b.n	1d3a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    19fe:	1dfb      	adds	r3, r7, #7
    1a00:	781b      	ldrb	r3, [r3, #0]
    1a02:	2b1b      	cmp	r3, #27
    1a04:	d116      	bne.n	1a34 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    1a06:	2394      	movs	r3, #148	; 0x94
    1a08:	18f9      	adds	r1, r7, r3
    1a0a:	6838      	ldr	r0, [r7, #0]
    1a0c:	2300      	movs	r3, #0
    1a0e:	2208      	movs	r2, #8
    1a10:	4cb8      	ldr	r4, [pc, #736]	; (1cf4 <m2m_wifi_cb+0x340>)
    1a12:	47a0      	blx	r4
    1a14:	1e03      	subs	r3, r0, #0
    1a16:	d000      	beq.n	1a1a <m2m_wifi_cb+0x66>
    1a18:	e18f      	b.n	1d3a <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1a1a:	4bb7      	ldr	r3, [pc, #732]	; (1cf8 <m2m_wifi_cb+0x344>)
    1a1c:	681b      	ldr	r3, [r3, #0]
    1a1e:	2b00      	cmp	r3, #0
    1a20:	d100      	bne.n	1a24 <m2m_wifi_cb+0x70>
    1a22:	e18a      	b.n	1d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    1a24:	4bb4      	ldr	r3, [pc, #720]	; (1cf8 <m2m_wifi_cb+0x344>)
    1a26:	681b      	ldr	r3, [r3, #0]
    1a28:	2294      	movs	r2, #148	; 0x94
    1a2a:	18ba      	adds	r2, r7, r2
    1a2c:	0011      	movs	r1, r2
    1a2e:	201b      	movs	r0, #27
    1a30:	4798      	blx	r3
}
    1a32:	e182      	b.n	1d3a <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    1a34:	1dfb      	adds	r3, r7, #7
    1a36:	781b      	ldrb	r3, [r3, #0]
    1a38:	2b06      	cmp	r3, #6
    1a3a:	d116      	bne.n	1a6a <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    1a3c:	2308      	movs	r3, #8
    1a3e:	18f9      	adds	r1, r7, r3
    1a40:	6838      	ldr	r0, [r7, #0]
    1a42:	2301      	movs	r3, #1
    1a44:	2230      	movs	r2, #48	; 0x30
    1a46:	4cab      	ldr	r4, [pc, #684]	; (1cf4 <m2m_wifi_cb+0x340>)
    1a48:	47a0      	blx	r4
    1a4a:	1e03      	subs	r3, r0, #0
    1a4c:	d000      	beq.n	1a50 <m2m_wifi_cb+0x9c>
    1a4e:	e174      	b.n	1d3a <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    1a50:	4ba9      	ldr	r3, [pc, #676]	; (1cf8 <m2m_wifi_cb+0x344>)
    1a52:	681b      	ldr	r3, [r3, #0]
    1a54:	2b00      	cmp	r3, #0
    1a56:	d100      	bne.n	1a5a <m2m_wifi_cb+0xa6>
    1a58:	e16f      	b.n	1d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    1a5a:	4ba7      	ldr	r3, [pc, #668]	; (1cf8 <m2m_wifi_cb+0x344>)
    1a5c:	681b      	ldr	r3, [r3, #0]
    1a5e:	2208      	movs	r2, #8
    1a60:	18ba      	adds	r2, r7, r2
    1a62:	0011      	movs	r1, r2
    1a64:	2006      	movs	r0, #6
    1a66:	4798      	blx	r3
}
    1a68:	e167      	b.n	1d3a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    1a6a:	1dfb      	adds	r3, r7, #7
    1a6c:	781b      	ldrb	r3, [r3, #0]
    1a6e:	2b0e      	cmp	r3, #14
    1a70:	d100      	bne.n	1a74 <m2m_wifi_cb+0xc0>
    1a72:	e162      	b.n	1d3a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    1a74:	1dfb      	adds	r3, r7, #7
    1a76:	781b      	ldrb	r3, [r3, #0]
    1a78:	2b32      	cmp	r3, #50	; 0x32
    1a7a:	d116      	bne.n	1aaa <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    1a7c:	2380      	movs	r3, #128	; 0x80
    1a7e:	18f9      	adds	r1, r7, r3
    1a80:	6838      	ldr	r0, [r7, #0]
    1a82:	2300      	movs	r3, #0
    1a84:	2214      	movs	r2, #20
    1a86:	4c9b      	ldr	r4, [pc, #620]	; (1cf4 <m2m_wifi_cb+0x340>)
    1a88:	47a0      	blx	r4
    1a8a:	1e03      	subs	r3, r0, #0
    1a8c:	d000      	beq.n	1a90 <m2m_wifi_cb+0xdc>
    1a8e:	e154      	b.n	1d3a <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1a90:	4b99      	ldr	r3, [pc, #612]	; (1cf8 <m2m_wifi_cb+0x344>)
    1a92:	681b      	ldr	r3, [r3, #0]
    1a94:	2b00      	cmp	r3, #0
    1a96:	d100      	bne.n	1a9a <m2m_wifi_cb+0xe6>
    1a98:	e14f      	b.n	1d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    1a9a:	4b97      	ldr	r3, [pc, #604]	; (1cf8 <m2m_wifi_cb+0x344>)
    1a9c:	681b      	ldr	r3, [r3, #0]
    1a9e:	2280      	movs	r2, #128	; 0x80
    1aa0:	18ba      	adds	r2, r7, r2
    1aa2:	0011      	movs	r1, r2
    1aa4:	2032      	movs	r0, #50	; 0x32
    1aa6:	4798      	blx	r3
}
    1aa8:	e147      	b.n	1d3a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    1aaa:	1dfb      	adds	r3, r7, #7
    1aac:	781b      	ldrb	r3, [r3, #0]
    1aae:	2b2f      	cmp	r3, #47	; 0x2f
    1ab0:	d11d      	bne.n	1aee <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    1ab2:	2308      	movs	r3, #8
    1ab4:	18fb      	adds	r3, r7, r3
    1ab6:	2264      	movs	r2, #100	; 0x64
    1ab8:	2100      	movs	r1, #0
    1aba:	0018      	movs	r0, r3
    1abc:	4b8f      	ldr	r3, [pc, #572]	; (1cfc <m2m_wifi_cb+0x348>)
    1abe:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    1ac0:	2308      	movs	r3, #8
    1ac2:	18f9      	adds	r1, r7, r3
    1ac4:	6838      	ldr	r0, [r7, #0]
    1ac6:	2300      	movs	r3, #0
    1ac8:	2264      	movs	r2, #100	; 0x64
    1aca:	4c8a      	ldr	r4, [pc, #552]	; (1cf4 <m2m_wifi_cb+0x340>)
    1acc:	47a0      	blx	r4
    1ace:	1e03      	subs	r3, r0, #0
    1ad0:	d000      	beq.n	1ad4 <m2m_wifi_cb+0x120>
    1ad2:	e132      	b.n	1d3a <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1ad4:	4b88      	ldr	r3, [pc, #544]	; (1cf8 <m2m_wifi_cb+0x344>)
    1ad6:	681b      	ldr	r3, [r3, #0]
    1ad8:	2b00      	cmp	r3, #0
    1ada:	d100      	bne.n	1ade <m2m_wifi_cb+0x12a>
    1adc:	e12d      	b.n	1d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    1ade:	4b86      	ldr	r3, [pc, #536]	; (1cf8 <m2m_wifi_cb+0x344>)
    1ae0:	681b      	ldr	r3, [r3, #0]
    1ae2:	2208      	movs	r2, #8
    1ae4:	18ba      	adds	r2, r7, r2
    1ae6:	0011      	movs	r1, r2
    1ae8:	202f      	movs	r0, #47	; 0x2f
    1aea:	4798      	blx	r3
}
    1aec:	e125      	b.n	1d3a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    1aee:	1dfb      	adds	r3, r7, #7
    1af0:	781b      	ldrb	r3, [r3, #0]
    1af2:	2b34      	cmp	r3, #52	; 0x34
    1af4:	d12e      	bne.n	1b54 <m2m_wifi_cb+0x1a0>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    1af6:	237c      	movs	r3, #124	; 0x7c
    1af8:	18f9      	adds	r1, r7, r3
    1afa:	6838      	ldr	r0, [r7, #0]
    1afc:	2300      	movs	r3, #0
    1afe:	2204      	movs	r2, #4
    1b00:	4c7c      	ldr	r4, [pc, #496]	; (1cf4 <m2m_wifi_cb+0x340>)
    1b02:	47a0      	blx	r4
    1b04:	1e03      	subs	r3, r0, #0
    1b06:	d000      	beq.n	1b0a <m2m_wifi_cb+0x156>
    1b08:	e117      	b.n	1d3a <m2m_wifi_cb+0x386>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    1b0a:	4b7d      	ldr	r3, [pc, #500]	; (1d00 <m2m_wifi_cb+0x34c>)
    1b0c:	0018      	movs	r0, r3
    1b0e:	4b7d      	ldr	r3, [pc, #500]	; (1d04 <m2m_wifi_cb+0x350>)
    1b10:	4798      	blx	r3
    1b12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1b14:	0e1b      	lsrs	r3, r3, #24
    1b16:	b2db      	uxtb	r3, r3
    1b18:	0019      	movs	r1, r3
    1b1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1b1c:	0c1b      	lsrs	r3, r3, #16
    1b1e:	b2db      	uxtb	r3, r3
    1b20:	001a      	movs	r2, r3
    1b22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1b24:	0a1b      	lsrs	r3, r3, #8
    1b26:	b2db      	uxtb	r3, r3
    1b28:	001c      	movs	r4, r3
    1b2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1b2c:	b2db      	uxtb	r3, r3
    1b2e:	4876      	ldr	r0, [pc, #472]	; (1d08 <m2m_wifi_cb+0x354>)
    1b30:	9300      	str	r3, [sp, #0]
    1b32:	0023      	movs	r3, r4
    1b34:	4c73      	ldr	r4, [pc, #460]	; (1d04 <m2m_wifi_cb+0x350>)
    1b36:	47a0      	blx	r4
    1b38:	200d      	movs	r0, #13
    1b3a:	4b74      	ldr	r3, [pc, #464]	; (1d0c <m2m_wifi_cb+0x358>)
    1b3c:	4798      	blx	r3
			if (gpfAppWifiCb)
    1b3e:	4b6e      	ldr	r3, [pc, #440]	; (1cf8 <m2m_wifi_cb+0x344>)
    1b40:	681b      	ldr	r3, [r3, #0]
    1b42:	2b00      	cmp	r3, #0
    1b44:	d100      	bne.n	1b48 <m2m_wifi_cb+0x194>
    1b46:	e0f8      	b.n	1d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    1b48:	4b6b      	ldr	r3, [pc, #428]	; (1cf8 <m2m_wifi_cb+0x344>)
    1b4a:	681b      	ldr	r3, [r3, #0]
    1b4c:	2100      	movs	r1, #0
    1b4e:	2034      	movs	r0, #52	; 0x34
    1b50:	4798      	blx	r3
}
    1b52:	e0f2      	b.n	1d3a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    1b54:	1dfb      	adds	r3, r7, #7
    1b56:	781b      	ldrb	r3, [r3, #0]
    1b58:	2b11      	cmp	r3, #17
    1b5a:	d11e      	bne.n	1b9a <m2m_wifi_cb+0x1e6>
		gu8scanInProgress = 0;
    1b5c:	4b6c      	ldr	r3, [pc, #432]	; (1d10 <m2m_wifi_cb+0x35c>)
    1b5e:	2200      	movs	r2, #0
    1b60:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    1b62:	2378      	movs	r3, #120	; 0x78
    1b64:	18f9      	adds	r1, r7, r3
    1b66:	6838      	ldr	r0, [r7, #0]
    1b68:	2300      	movs	r3, #0
    1b6a:	2204      	movs	r2, #4
    1b6c:	4c61      	ldr	r4, [pc, #388]	; (1cf4 <m2m_wifi_cb+0x340>)
    1b6e:	47a0      	blx	r4
    1b70:	1e03      	subs	r3, r0, #0
    1b72:	d000      	beq.n	1b76 <m2m_wifi_cb+0x1c2>
    1b74:	e0e1      	b.n	1d3a <m2m_wifi_cb+0x386>
			gu8ChNum = strState.u8NumofCh;
    1b76:	2378      	movs	r3, #120	; 0x78
    1b78:	18fb      	adds	r3, r7, r3
    1b7a:	781a      	ldrb	r2, [r3, #0]
    1b7c:	4b65      	ldr	r3, [pc, #404]	; (1d14 <m2m_wifi_cb+0x360>)
    1b7e:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    1b80:	4b5d      	ldr	r3, [pc, #372]	; (1cf8 <m2m_wifi_cb+0x344>)
    1b82:	681b      	ldr	r3, [r3, #0]
    1b84:	2b00      	cmp	r3, #0
    1b86:	d100      	bne.n	1b8a <m2m_wifi_cb+0x1d6>
    1b88:	e0d7      	b.n	1d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    1b8a:	4b5b      	ldr	r3, [pc, #364]	; (1cf8 <m2m_wifi_cb+0x344>)
    1b8c:	681b      	ldr	r3, [r3, #0]
    1b8e:	2278      	movs	r2, #120	; 0x78
    1b90:	18ba      	adds	r2, r7, r2
    1b92:	0011      	movs	r1, r2
    1b94:	2011      	movs	r0, #17
    1b96:	4798      	blx	r3
}
    1b98:	e0cf      	b.n	1d3a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    1b9a:	1dfb      	adds	r3, r7, #7
    1b9c:	781b      	ldrb	r3, [r3, #0]
    1b9e:	2b13      	cmp	r3, #19
    1ba0:	d116      	bne.n	1bd0 <m2m_wifi_cb+0x21c>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    1ba2:	2308      	movs	r3, #8
    1ba4:	18f9      	adds	r1, r7, r3
    1ba6:	6838      	ldr	r0, [r7, #0]
    1ba8:	2300      	movs	r3, #0
    1baa:	222c      	movs	r2, #44	; 0x2c
    1bac:	4c51      	ldr	r4, [pc, #324]	; (1cf4 <m2m_wifi_cb+0x340>)
    1bae:	47a0      	blx	r4
    1bb0:	1e03      	subs	r3, r0, #0
    1bb2:	d000      	beq.n	1bb6 <m2m_wifi_cb+0x202>
    1bb4:	e0c1      	b.n	1d3a <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1bb6:	4b50      	ldr	r3, [pc, #320]	; (1cf8 <m2m_wifi_cb+0x344>)
    1bb8:	681b      	ldr	r3, [r3, #0]
    1bba:	2b00      	cmp	r3, #0
    1bbc:	d100      	bne.n	1bc0 <m2m_wifi_cb+0x20c>
    1bbe:	e0bc      	b.n	1d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    1bc0:	4b4d      	ldr	r3, [pc, #308]	; (1cf8 <m2m_wifi_cb+0x344>)
    1bc2:	681b      	ldr	r3, [r3, #0]
    1bc4:	2208      	movs	r2, #8
    1bc6:	18ba      	adds	r2, r7, r2
    1bc8:	0011      	movs	r1, r2
    1bca:	2013      	movs	r0, #19
    1bcc:	4798      	blx	r3
}
    1bce:	e0b4      	b.n	1d3a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    1bd0:	1dfb      	adds	r3, r7, #7
    1bd2:	781b      	ldrb	r3, [r3, #0]
    1bd4:	2b04      	cmp	r3, #4
    1bd6:	d116      	bne.n	1c06 <m2m_wifi_cb+0x252>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1bd8:	23a0      	movs	r3, #160	; 0xa0
    1bda:	18f9      	adds	r1, r7, r3
    1bdc:	6838      	ldr	r0, [r7, #0]
    1bde:	2300      	movs	r3, #0
    1be0:	2204      	movs	r2, #4
    1be2:	4c44      	ldr	r4, [pc, #272]	; (1cf4 <m2m_wifi_cb+0x340>)
    1be4:	47a0      	blx	r4
    1be6:	1e03      	subs	r3, r0, #0
    1be8:	d000      	beq.n	1bec <m2m_wifi_cb+0x238>
    1bea:	e0a6      	b.n	1d3a <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1bec:	4b42      	ldr	r3, [pc, #264]	; (1cf8 <m2m_wifi_cb+0x344>)
    1bee:	681b      	ldr	r3, [r3, #0]
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	d100      	bne.n	1bf6 <m2m_wifi_cb+0x242>
    1bf4:	e0a1      	b.n	1d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    1bf6:	4b40      	ldr	r3, [pc, #256]	; (1cf8 <m2m_wifi_cb+0x344>)
    1bf8:	681b      	ldr	r3, [r3, #0]
    1bfa:	22a0      	movs	r2, #160	; 0xa0
    1bfc:	18ba      	adds	r2, r7, r2
    1bfe:	0011      	movs	r1, r2
    1c00:	2004      	movs	r0, #4
    1c02:	4798      	blx	r3
}
    1c04:	e099      	b.n	1d3a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    1c06:	1dfb      	adds	r3, r7, #7
    1c08:	781b      	ldrb	r3, [r3, #0]
    1c0a:	2b65      	cmp	r3, #101	; 0x65
    1c0c:	d116      	bne.n	1c3c <m2m_wifi_cb+0x288>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1c0e:	23a0      	movs	r3, #160	; 0xa0
    1c10:	18f9      	adds	r1, r7, r3
    1c12:	6838      	ldr	r0, [r7, #0]
    1c14:	2300      	movs	r3, #0
    1c16:	2204      	movs	r2, #4
    1c18:	4c36      	ldr	r4, [pc, #216]	; (1cf4 <m2m_wifi_cb+0x340>)
    1c1a:	47a0      	blx	r4
    1c1c:	1e03      	subs	r3, r0, #0
    1c1e:	d000      	beq.n	1c22 <m2m_wifi_cb+0x26e>
    1c20:	e08b      	b.n	1d3a <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1c22:	4b35      	ldr	r3, [pc, #212]	; (1cf8 <m2m_wifi_cb+0x344>)
    1c24:	681b      	ldr	r3, [r3, #0]
    1c26:	2b00      	cmp	r3, #0
    1c28:	d100      	bne.n	1c2c <m2m_wifi_cb+0x278>
    1c2a:	e086      	b.n	1d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    1c2c:	4b32      	ldr	r3, [pc, #200]	; (1cf8 <m2m_wifi_cb+0x344>)
    1c2e:	681b      	ldr	r3, [r3, #0]
    1c30:	22a0      	movs	r2, #160	; 0xa0
    1c32:	18ba      	adds	r2, r7, r2
    1c34:	0011      	movs	r1, r2
    1c36:	2065      	movs	r0, #101	; 0x65
    1c38:	4798      	blx	r3
}
    1c3a:	e07e      	b.n	1d3a <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    1c3c:	1dfb      	adds	r3, r7, #7
    1c3e:	781b      	ldrb	r3, [r3, #0]
    1c40:	2b09      	cmp	r3, #9
    1c42:	d116      	bne.n	1c72 <m2m_wifi_cb+0x2be>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    1c44:	2308      	movs	r3, #8
    1c46:	18f9      	adds	r1, r7, r3
    1c48:	6838      	ldr	r0, [r7, #0]
    1c4a:	2301      	movs	r3, #1
    1c4c:	2264      	movs	r2, #100	; 0x64
    1c4e:	4c29      	ldr	r4, [pc, #164]	; (1cf4 <m2m_wifi_cb+0x340>)
    1c50:	47a0      	blx	r4
    1c52:	1e03      	subs	r3, r0, #0
    1c54:	d000      	beq.n	1c58 <m2m_wifi_cb+0x2a4>
    1c56:	e070      	b.n	1d3a <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    1c58:	4b27      	ldr	r3, [pc, #156]	; (1cf8 <m2m_wifi_cb+0x344>)
    1c5a:	681b      	ldr	r3, [r3, #0]
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	d100      	bne.n	1c62 <m2m_wifi_cb+0x2ae>
    1c60:	e06b      	b.n	1d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    1c62:	4b25      	ldr	r3, [pc, #148]	; (1cf8 <m2m_wifi_cb+0x344>)
    1c64:	681b      	ldr	r3, [r3, #0]
    1c66:	2208      	movs	r2, #8
    1c68:	18ba      	adds	r2, r7, r2
    1c6a:	0011      	movs	r1, r2
    1c6c:	2009      	movs	r0, #9
    1c6e:	4798      	blx	r3
}
    1c70:	e063      	b.n	1d3a <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    1c72:	1dfb      	adds	r3, r7, #7
    1c74:	781b      	ldrb	r3, [r3, #0]
    1c76:	2b2a      	cmp	r3, #42	; 0x2a
    1c78:	d114      	bne.n	1ca4 <m2m_wifi_cb+0x2f0>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    1c7a:	2374      	movs	r3, #116	; 0x74
    1c7c:	18f9      	adds	r1, r7, r3
    1c7e:	6838      	ldr	r0, [r7, #0]
    1c80:	2301      	movs	r3, #1
    1c82:	2204      	movs	r2, #4
    1c84:	4c1b      	ldr	r4, [pc, #108]	; (1cf4 <m2m_wifi_cb+0x340>)
    1c86:	47a0      	blx	r4
    1c88:	1e03      	subs	r3, r0, #0
    1c8a:	d156      	bne.n	1d3a <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    1c8c:	4b1a      	ldr	r3, [pc, #104]	; (1cf8 <m2m_wifi_cb+0x344>)
    1c8e:	681b      	ldr	r3, [r3, #0]
    1c90:	2b00      	cmp	r3, #0
    1c92:	d052      	beq.n	1d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    1c94:	4b18      	ldr	r3, [pc, #96]	; (1cf8 <m2m_wifi_cb+0x344>)
    1c96:	681b      	ldr	r3, [r3, #0]
    1c98:	2274      	movs	r2, #116	; 0x74
    1c9a:	18ba      	adds	r2, r7, r2
    1c9c:	0011      	movs	r1, r2
    1c9e:	202a      	movs	r0, #42	; 0x2a
    1ca0:	4798      	blx	r3
}
    1ca2:	e04a      	b.n	1d3a <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    1ca4:	1dfb      	adds	r3, r7, #7
    1ca6:	781b      	ldrb	r3, [r3, #0]
    1ca8:	2b20      	cmp	r3, #32
    1caa:	d135      	bne.n	1d18 <m2m_wifi_cb+0x364>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    1cac:	236c      	movs	r3, #108	; 0x6c
    1cae:	18f9      	adds	r1, r7, r3
    1cb0:	6838      	ldr	r0, [r7, #0]
    1cb2:	2300      	movs	r3, #0
    1cb4:	2208      	movs	r2, #8
    1cb6:	4c0f      	ldr	r4, [pc, #60]	; (1cf4 <m2m_wifi_cb+0x340>)
    1cb8:	47a0      	blx	r4
    1cba:	1e03      	subs	r3, r0, #0
    1cbc:	d13d      	bne.n	1d3a <m2m_wifi_cb+0x386>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    1cbe:	683b      	ldr	r3, [r7, #0]
    1cc0:	3308      	adds	r3, #8
    1cc2:	0018      	movs	r0, r3
    1cc4:	236c      	movs	r3, #108	; 0x6c
    1cc6:	18fb      	adds	r3, r7, r3
    1cc8:	6819      	ldr	r1, [r3, #0]
    1cca:	236c      	movs	r3, #108	; 0x6c
    1ccc:	18fb      	adds	r3, r7, r3
    1cce:	889a      	ldrh	r2, [r3, #4]
    1cd0:	2301      	movs	r3, #1
    1cd2:	4c08      	ldr	r4, [pc, #32]	; (1cf4 <m2m_wifi_cb+0x340>)
    1cd4:	47a0      	blx	r4
    1cd6:	1e03      	subs	r3, r0, #0
    1cd8:	d12f      	bne.n	1d3a <m2m_wifi_cb+0x386>
				if(gpfAppWifiCb)
    1cda:	4b07      	ldr	r3, [pc, #28]	; (1cf8 <m2m_wifi_cb+0x344>)
    1cdc:	681b      	ldr	r3, [r3, #0]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d02b      	beq.n	1d3a <m2m_wifi_cb+0x386>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    1ce2:	4b05      	ldr	r3, [pc, #20]	; (1cf8 <m2m_wifi_cb+0x344>)
    1ce4:	681b      	ldr	r3, [r3, #0]
    1ce6:	226c      	movs	r2, #108	; 0x6c
    1ce8:	18ba      	adds	r2, r7, r2
    1cea:	0011      	movs	r1, r2
    1cec:	2020      	movs	r0, #32
    1cee:	4798      	blx	r3
}
    1cf0:	e023      	b.n	1d3a <m2m_wifi_cb+0x386>
    1cf2:	46c0      	nop			; (mov r8, r8)
    1cf4:	00001779 	.word	0x00001779
    1cf8:	2000020c 	.word	0x2000020c
    1cfc:	00000c25 	.word	0x00000c25
    1d00:	0000f8b4 	.word	0x0000f8b4
    1d04:	0000dfad 	.word	0x0000dfad
    1d08:	0000f8c0 	.word	0x0000f8c0
    1d0c:	0000dfe1 	.word	0x0000dfe1
    1d10:	20000209 	.word	0x20000209
    1d14:	20000208 	.word	0x20000208
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    1d18:	2392      	movs	r3, #146	; 0x92
    1d1a:	005a      	lsls	r2, r3, #1
    1d1c:	4909      	ldr	r1, [pc, #36]	; (1d44 <m2m_wifi_cb+0x390>)
    1d1e:	4b0a      	ldr	r3, [pc, #40]	; (1d48 <m2m_wifi_cb+0x394>)
    1d20:	0018      	movs	r0, r3
    1d22:	4b0a      	ldr	r3, [pc, #40]	; (1d4c <m2m_wifi_cb+0x398>)
    1d24:	4798      	blx	r3
    1d26:	1dfb      	adds	r3, r7, #7
    1d28:	781a      	ldrb	r2, [r3, #0]
    1d2a:	4b09      	ldr	r3, [pc, #36]	; (1d50 <m2m_wifi_cb+0x39c>)
    1d2c:	0011      	movs	r1, r2
    1d2e:	0018      	movs	r0, r3
    1d30:	4b06      	ldr	r3, [pc, #24]	; (1d4c <m2m_wifi_cb+0x398>)
    1d32:	4798      	blx	r3
    1d34:	200d      	movs	r0, #13
    1d36:	4b07      	ldr	r3, [pc, #28]	; (1d54 <m2m_wifi_cb+0x3a0>)
    1d38:	4798      	blx	r3
}
    1d3a:	46c0      	nop			; (mov r8, r8)
    1d3c:	46bd      	mov	sp, r7
    1d3e:	b02b      	add	sp, #172	; 0xac
    1d40:	bd90      	pop	{r4, r7, pc}
    1d42:	46c0      	nop			; (mov r8, r8)
    1d44:	0000fc68 	.word	0x0000fc68
    1d48:	0000f8e0 	.word	0x0000f8e0
    1d4c:	0000dfad 	.word	0x0000dfad
    1d50:	0000f8f4 	.word	0x0000f8f4
    1d54:	0000dfe1 	.word	0x0000dfe1

00001d58 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    1d58:	b590      	push	{r4, r7, lr}
    1d5a:	b091      	sub	sp, #68	; 0x44
    1d5c:	af02      	add	r7, sp, #8
    1d5e:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    1d60:	2337      	movs	r3, #55	; 0x37
    1d62:	18fb      	adds	r3, r7, r3
    1d64:	2200      	movs	r2, #0
    1d66:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    1d68:	230b      	movs	r3, #11
    1d6a:	18fb      	adds	r3, r7, r3
    1d6c:	2201      	movs	r2, #1
    1d6e:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    1d70:	687b      	ldr	r3, [r7, #4]
    1d72:	2b00      	cmp	r3, #0
    1d74:	d104      	bne.n	1d80 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    1d76:	2337      	movs	r3, #55	; 0x37
    1d78:	18fb      	adds	r3, r7, r3
    1d7a:	22f4      	movs	r2, #244	; 0xf4
    1d7c:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    1d7e:	e0ad      	b.n	1edc <m2m_wifi_init+0x184>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    1d80:	687b      	ldr	r3, [r7, #4]
    1d82:	681a      	ldr	r2, [r3, #0]
    1d84:	4b59      	ldr	r3, [pc, #356]	; (1eec <m2m_wifi_init+0x194>)
    1d86:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    1d88:	4b59      	ldr	r3, [pc, #356]	; (1ef0 <m2m_wifi_init+0x198>)
    1d8a:	2200      	movs	r2, #0
    1d8c:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    1d8e:	2337      	movs	r3, #55	; 0x37
    1d90:	18fc      	adds	r4, r7, r3
    1d92:	230b      	movs	r3, #11
    1d94:	18fb      	adds	r3, r7, r3
    1d96:	0018      	movs	r0, r3
    1d98:	4b56      	ldr	r3, [pc, #344]	; (1ef4 <m2m_wifi_init+0x19c>)
    1d9a:	4798      	blx	r3
    1d9c:	0003      	movs	r3, r0
    1d9e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1da0:	2337      	movs	r3, #55	; 0x37
    1da2:	18fb      	adds	r3, r7, r3
    1da4:	781b      	ldrb	r3, [r3, #0]
    1da6:	b25b      	sxtb	r3, r3
    1da8:	2b00      	cmp	r3, #0
    1daa:	d000      	beq.n	1dae <m2m_wifi_init+0x56>
    1dac:	e093      	b.n	1ed6 <m2m_wifi_init+0x17e>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    1dae:	2337      	movs	r3, #55	; 0x37
    1db0:	18fc      	adds	r4, r7, r3
    1db2:	2000      	movs	r0, #0
    1db4:	4b50      	ldr	r3, [pc, #320]	; (1ef8 <m2m_wifi_init+0x1a0>)
    1db6:	4798      	blx	r3
    1db8:	0003      	movs	r3, r0
    1dba:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    1dbc:	2337      	movs	r3, #55	; 0x37
    1dbe:	18fb      	adds	r3, r7, r3
    1dc0:	781b      	ldrb	r3, [r3, #0]
    1dc2:	b25b      	sxtb	r3, r3
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	d000      	beq.n	1dca <m2m_wifi_init+0x72>
    1dc8:	e080      	b.n	1ecc <m2m_wifi_init+0x174>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    1dca:	4b4c      	ldr	r3, [pc, #304]	; (1efc <m2m_wifi_init+0x1a4>)
    1dcc:	0019      	movs	r1, r3
    1dce:	2001      	movs	r0, #1
    1dd0:	4b4b      	ldr	r3, [pc, #300]	; (1f00 <m2m_wifi_init+0x1a8>)
    1dd2:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
    1dd4:	2337      	movs	r3, #55	; 0x37
    1dd6:	18fc      	adds	r4, r7, r3
    1dd8:	230c      	movs	r3, #12
    1dda:	18fb      	adds	r3, r7, r3
    1ddc:	0018      	movs	r0, r3
    1dde:	4b49      	ldr	r3, [pc, #292]	; (1f04 <m2m_wifi_init+0x1ac>)
    1de0:	4798      	blx	r3
    1de2:	0003      	movs	r3, r0
    1de4:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    1de6:	4b48      	ldr	r3, [pc, #288]	; (1f08 <m2m_wifi_init+0x1b0>)
    1de8:	0018      	movs	r0, r3
    1dea:	4b48      	ldr	r3, [pc, #288]	; (1f0c <m2m_wifi_init+0x1b4>)
    1dec:	4798      	blx	r3
    1dee:	230c      	movs	r3, #12
    1df0:	18fb      	adds	r3, r7, r3
    1df2:	791b      	ldrb	r3, [r3, #4]
    1df4:	0019      	movs	r1, r3
    1df6:	230c      	movs	r3, #12
    1df8:	18fb      	adds	r3, r7, r3
    1dfa:	795b      	ldrb	r3, [r3, #5]
    1dfc:	001a      	movs	r2, r3
    1dfe:	230c      	movs	r3, #12
    1e00:	18fb      	adds	r3, r7, r3
    1e02:	799b      	ldrb	r3, [r3, #6]
    1e04:	001c      	movs	r4, r3
    1e06:	230c      	movs	r3, #12
    1e08:	18fb      	adds	r3, r7, r3
    1e0a:	8c1b      	ldrh	r3, [r3, #32]
    1e0c:	4840      	ldr	r0, [pc, #256]	; (1f10 <m2m_wifi_init+0x1b8>)
    1e0e:	9300      	str	r3, [sp, #0]
    1e10:	0023      	movs	r3, r4
    1e12:	4c3e      	ldr	r4, [pc, #248]	; (1f0c <m2m_wifi_init+0x1b4>)
    1e14:	47a0      	blx	r4
    1e16:	200d      	movs	r0, #13
    1e18:	4b3e      	ldr	r3, [pc, #248]	; (1f14 <m2m_wifi_init+0x1bc>)
    1e1a:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    1e1c:	4b3a      	ldr	r3, [pc, #232]	; (1f08 <m2m_wifi_init+0x1b0>)
    1e1e:	0018      	movs	r0, r3
    1e20:	4b3a      	ldr	r3, [pc, #232]	; (1f0c <m2m_wifi_init+0x1b4>)
    1e22:	4798      	blx	r3
    1e24:	230c      	movs	r3, #12
    1e26:	18fb      	adds	r3, r7, r3
    1e28:	3316      	adds	r3, #22
    1e2a:	001a      	movs	r2, r3
    1e2c:	230c      	movs	r3, #12
    1e2e:	18fb      	adds	r3, r7, r3
    1e30:	330a      	adds	r3, #10
    1e32:	0019      	movs	r1, r3
    1e34:	4b38      	ldr	r3, [pc, #224]	; (1f18 <m2m_wifi_init+0x1c0>)
    1e36:	0018      	movs	r0, r3
    1e38:	4b34      	ldr	r3, [pc, #208]	; (1f0c <m2m_wifi_init+0x1b4>)
    1e3a:	4798      	blx	r3
    1e3c:	200d      	movs	r0, #13
    1e3e:	4b35      	ldr	r3, [pc, #212]	; (1f14 <m2m_wifi_init+0x1bc>)
    1e40:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    1e42:	4b31      	ldr	r3, [pc, #196]	; (1f08 <m2m_wifi_init+0x1b0>)
    1e44:	0018      	movs	r0, r3
    1e46:	4b31      	ldr	r3, [pc, #196]	; (1f0c <m2m_wifi_init+0x1b4>)
    1e48:	4798      	blx	r3
    1e4a:	230c      	movs	r3, #12
    1e4c:	18fb      	adds	r3, r7, r3
    1e4e:	79db      	ldrb	r3, [r3, #7]
    1e50:	0019      	movs	r1, r3
    1e52:	230c      	movs	r3, #12
    1e54:	18fb      	adds	r3, r7, r3
    1e56:	7a1b      	ldrb	r3, [r3, #8]
    1e58:	001a      	movs	r2, r3
    1e5a:	230c      	movs	r3, #12
    1e5c:	18fb      	adds	r3, r7, r3
    1e5e:	7a5b      	ldrb	r3, [r3, #9]
    1e60:	482e      	ldr	r0, [pc, #184]	; (1f1c <m2m_wifi_init+0x1c4>)
    1e62:	4c2a      	ldr	r4, [pc, #168]	; (1f0c <m2m_wifi_init+0x1b4>)
    1e64:	47a0      	blx	r4
    1e66:	200d      	movs	r0, #13
    1e68:	4b2a      	ldr	r3, [pc, #168]	; (1f14 <m2m_wifi_init+0x1bc>)
    1e6a:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    1e6c:	4b26      	ldr	r3, [pc, #152]	; (1f08 <m2m_wifi_init+0x1b0>)
    1e6e:	0018      	movs	r0, r3
    1e70:	4b26      	ldr	r3, [pc, #152]	; (1f0c <m2m_wifi_init+0x1b4>)
    1e72:	4798      	blx	r3
    1e74:	482a      	ldr	r0, [pc, #168]	; (1f20 <m2m_wifi_init+0x1c8>)
    1e76:	2302      	movs	r3, #2
    1e78:	2205      	movs	r2, #5
    1e7a:	2113      	movs	r1, #19
    1e7c:	4c23      	ldr	r4, [pc, #140]	; (1f0c <m2m_wifi_init+0x1b4>)
    1e7e:	47a0      	blx	r4
    1e80:	200d      	movs	r0, #13
    1e82:	4b24      	ldr	r3, [pc, #144]	; (1f14 <m2m_wifi_init+0x1bc>)
    1e84:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    1e86:	4b20      	ldr	r3, [pc, #128]	; (1f08 <m2m_wifi_init+0x1b0>)
    1e88:	0018      	movs	r0, r3
    1e8a:	4b20      	ldr	r3, [pc, #128]	; (1f0c <m2m_wifi_init+0x1b4>)
    1e8c:	4798      	blx	r3
    1e8e:	4a25      	ldr	r2, [pc, #148]	; (1f24 <m2m_wifi_init+0x1cc>)
    1e90:	4925      	ldr	r1, [pc, #148]	; (1f28 <m2m_wifi_init+0x1d0>)
    1e92:	4b26      	ldr	r3, [pc, #152]	; (1f2c <m2m_wifi_init+0x1d4>)
    1e94:	0018      	movs	r0, r3
    1e96:	4b1d      	ldr	r3, [pc, #116]	; (1f0c <m2m_wifi_init+0x1b4>)
    1e98:	4798      	blx	r3
    1e9a:	200d      	movs	r0, #13
    1e9c:	4b1d      	ldr	r3, [pc, #116]	; (1f14 <m2m_wifi_init+0x1bc>)
    1e9e:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    1ea0:	2337      	movs	r3, #55	; 0x37
    1ea2:	18fb      	adds	r3, r7, r3
    1ea4:	781b      	ldrb	r3, [r3, #0]
    1ea6:	b25b      	sxtb	r3, r3
    1ea8:	330d      	adds	r3, #13
    1eaa:	d116      	bne.n	1eda <m2m_wifi_init+0x182>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    1eac:	23e8      	movs	r3, #232	; 0xe8
    1eae:	33ff      	adds	r3, #255	; 0xff
    1eb0:	001a      	movs	r2, r3
    1eb2:	491f      	ldr	r1, [pc, #124]	; (1f30 <m2m_wifi_init+0x1d8>)
    1eb4:	4b1f      	ldr	r3, [pc, #124]	; (1f34 <m2m_wifi_init+0x1dc>)
    1eb6:	0018      	movs	r0, r3
    1eb8:	4b14      	ldr	r3, [pc, #80]	; (1f0c <m2m_wifi_init+0x1b4>)
    1eba:	4798      	blx	r3
    1ebc:	4b1e      	ldr	r3, [pc, #120]	; (1f38 <m2m_wifi_init+0x1e0>)
    1ebe:	0018      	movs	r0, r3
    1ec0:	4b1e      	ldr	r3, [pc, #120]	; (1f3c <m2m_wifi_init+0x1e4>)
    1ec2:	4798      	blx	r3
    1ec4:	200d      	movs	r0, #13
    1ec6:	4b13      	ldr	r3, [pc, #76]	; (1f14 <m2m_wifi_init+0x1bc>)
    1ec8:	4798      	blx	r3
	}

	goto _EXIT0;
    1eca:	e006      	b.n	1eda <m2m_wifi_init+0x182>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    1ecc:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
    1ece:	2000      	movs	r0, #0
    1ed0:	4b1b      	ldr	r3, [pc, #108]	; (1f40 <m2m_wifi_init+0x1e8>)
    1ed2:	4798      	blx	r3
    1ed4:	e002      	b.n	1edc <m2m_wifi_init+0x184>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1ed6:	46c0      	nop			; (mov r8, r8)
    1ed8:	e000      	b.n	1edc <m2m_wifi_init+0x184>
	goto _EXIT0;
    1eda:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
    1edc:	2337      	movs	r3, #55	; 0x37
    1ede:	18fb      	adds	r3, r7, r3
    1ee0:	781b      	ldrb	r3, [r3, #0]
    1ee2:	b25b      	sxtb	r3, r3
}
    1ee4:	0018      	movs	r0, r3
    1ee6:	46bd      	mov	sp, r7
    1ee8:	b00f      	add	sp, #60	; 0x3c
    1eea:	bd90      	pop	{r4, r7, pc}
    1eec:	2000020c 	.word	0x2000020c
    1ef0:	20000209 	.word	0x20000209
    1ef4:	00003065 	.word	0x00003065
    1ef8:	00000e3d 	.word	0x00000e3d
    1efc:	000019b5 	.word	0x000019b5
    1f00:	000018f9 	.word	0x000018f9
    1f04:	00002e99 	.word	0x00002e99
    1f08:	0000f8b4 	.word	0x0000f8b4
    1f0c:	0000dfad 	.word	0x0000dfad
    1f10:	0000fa48 	.word	0x0000fa48
    1f14:	0000dfe1 	.word	0x0000dfe1
    1f18:	0000fa70 	.word	0x0000fa70
    1f1c:	0000fa8c 	.word	0x0000fa8c
    1f20:	0000fab0 	.word	0x0000fab0
    1f24:	0000fac8 	.word	0x0000fac8
    1f28:	0000fad4 	.word	0x0000fad4
    1f2c:	0000fae0 	.word	0x0000fae0
    1f30:	0000fc74 	.word	0x0000fc74
    1f34:	0000f8e0 	.word	0x0000f8e0
    1f38:	0000faf8 	.word	0x0000faf8
    1f3c:	0000e0c9 	.word	0x0000e0c9
    1f40:	000031f9 	.word	0x000031f9

00001f44 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    1f44:	b580      	push	{r7, lr}
    1f46:	b082      	sub	sp, #8
    1f48:	af00      	add	r7, sp, #0
    1f4a:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    1f4c:	4b03      	ldr	r3, [pc, #12]	; (1f5c <m2m_wifi_handle_events+0x18>)
    1f4e:	4798      	blx	r3
    1f50:	0003      	movs	r3, r0
}
    1f52:	0018      	movs	r0, r3
    1f54:	46bd      	mov	sp, r7
    1f56:	b002      	add	sp, #8
    1f58:	bd80      	pop	{r7, pc}
    1f5a:	46c0      	nop			; (mov r8, r8)
    1f5c:	000016e9 	.word	0x000016e9

00001f60 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    1f60:	b590      	push	{r4, r7, lr}
    1f62:	b087      	sub	sp, #28
    1f64:	af02      	add	r7, sp, #8
    1f66:	60f8      	str	r0, [r7, #12]
    1f68:	0008      	movs	r0, r1
    1f6a:	0011      	movs	r1, r2
    1f6c:	607b      	str	r3, [r7, #4]
    1f6e:	230b      	movs	r3, #11
    1f70:	18fb      	adds	r3, r7, r3
    1f72:	1c02      	adds	r2, r0, #0
    1f74:	701a      	strb	r2, [r3, #0]
    1f76:	230a      	movs	r3, #10
    1f78:	18fb      	adds	r3, r7, r3
    1f7a:	1c0a      	adds	r2, r1, #0
    1f7c:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    1f7e:	687c      	ldr	r4, [r7, #4]
    1f80:	230a      	movs	r3, #10
    1f82:	18fb      	adds	r3, r7, r3
    1f84:	781a      	ldrb	r2, [r3, #0]
    1f86:	230b      	movs	r3, #11
    1f88:	18fb      	adds	r3, r7, r3
    1f8a:	7819      	ldrb	r1, [r3, #0]
    1f8c:	68f8      	ldr	r0, [r7, #12]
    1f8e:	2300      	movs	r3, #0
    1f90:	9301      	str	r3, [sp, #4]
    1f92:	2320      	movs	r3, #32
    1f94:	18fb      	adds	r3, r7, r3
    1f96:	881b      	ldrh	r3, [r3, #0]
    1f98:	9300      	str	r3, [sp, #0]
    1f9a:	0023      	movs	r3, r4
    1f9c:	4c03      	ldr	r4, [pc, #12]	; (1fac <m2m_wifi_connect+0x4c>)
    1f9e:	47a0      	blx	r4
    1fa0:	0003      	movs	r3, r0
}
    1fa2:	0018      	movs	r0, r3
    1fa4:	46bd      	mov	sp, r7
    1fa6:	b005      	add	sp, #20
    1fa8:	bd90      	pop	{r4, r7, pc}
    1faa:	46c0      	nop			; (mov r8, r8)
    1fac:	00001fb1 	.word	0x00001fb1

00001fb0 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    1fb0:	b5b0      	push	{r4, r5, r7, lr}
    1fb2:	b0aa      	sub	sp, #168	; 0xa8
    1fb4:	af04      	add	r7, sp, #16
    1fb6:	60f8      	str	r0, [r7, #12]
    1fb8:	0008      	movs	r0, r1
    1fba:	0011      	movs	r1, r2
    1fbc:	607b      	str	r3, [r7, #4]
    1fbe:	230b      	movs	r3, #11
    1fc0:	18fb      	adds	r3, r7, r3
    1fc2:	1c02      	adds	r2, r0, #0
    1fc4:	701a      	strb	r2, [r3, #0]
    1fc6:	230a      	movs	r3, #10
    1fc8:	18fb      	adds	r3, r7, r3
    1fca:	1c0a      	adds	r2, r1, #0
    1fcc:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    1fce:	2397      	movs	r3, #151	; 0x97
    1fd0:	18fb      	adds	r3, r7, r3
    1fd2:	2200      	movs	r2, #0
    1fd4:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    1fd6:	230a      	movs	r3, #10
    1fd8:	18fb      	adds	r3, r7, r3
    1fda:	781b      	ldrb	r3, [r3, #0]
    1fdc:	2b01      	cmp	r3, #1
    1fde:	d100      	bne.n	1fe2 <m2m_wifi_connect_sc+0x32>
    1fe0:	e083      	b.n	20ea <STACK_SIZE+0xea>
	{
		if(pvAuthInfo == NULL)
    1fe2:	687b      	ldr	r3, [r7, #4]
    1fe4:	2b00      	cmp	r3, #0
    1fe6:	d111      	bne.n	200c <STACK_SIZE+0xc>
		{
			M2M_ERR("Key is not valid\n");
    1fe8:	4adb      	ldr	r2, [pc, #876]	; (2358 <STACK_SIZE+0x358>)
    1fea:	49dc      	ldr	r1, [pc, #880]	; (235c <STACK_SIZE+0x35c>)
    1fec:	4bdc      	ldr	r3, [pc, #880]	; (2360 <STACK_SIZE+0x360>)
    1fee:	0018      	movs	r0, r3
    1ff0:	4bdc      	ldr	r3, [pc, #880]	; (2364 <STACK_SIZE+0x364>)
    1ff2:	4798      	blx	r3
    1ff4:	4bdc      	ldr	r3, [pc, #880]	; (2368 <STACK_SIZE+0x368>)
    1ff6:	0018      	movs	r0, r3
    1ff8:	4bdc      	ldr	r3, [pc, #880]	; (236c <STACK_SIZE+0x36c>)
    1ffa:	4798      	blx	r3
    1ffc:	200d      	movs	r0, #13
    1ffe:	4bdc      	ldr	r3, [pc, #880]	; (2370 <STACK_SIZE+0x370>)
    2000:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2002:	2397      	movs	r3, #151	; 0x97
    2004:	18fb      	adds	r3, r7, r3
    2006:	22f4      	movs	r2, #244	; 0xf4
    2008:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    200a:	e1f5      	b.n	23f8 <STACK_SIZE+0x3f8>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    200c:	230a      	movs	r3, #10
    200e:	18fb      	adds	r3, r7, r3
    2010:	781b      	ldrb	r3, [r3, #0]
    2012:	2b02      	cmp	r3, #2
    2014:	d169      	bne.n	20ea <STACK_SIZE+0xea>
    2016:	687b      	ldr	r3, [r7, #4]
    2018:	0018      	movs	r0, r3
    201a:	4bd6      	ldr	r3, [pc, #856]	; (2374 <STACK_SIZE+0x374>)
    201c:	4798      	blx	r3
    201e:	0003      	movs	r3, r0
    2020:	2b40      	cmp	r3, #64	; 0x40
    2022:	d162      	bne.n	20ea <STACK_SIZE+0xea>
		{
			uint8 i = 0;
    2024:	2396      	movs	r3, #150	; 0x96
    2026:	18fb      	adds	r3, r7, r3
    2028:	2200      	movs	r2, #0
    202a:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    202c:	687b      	ldr	r3, [r7, #4]
    202e:	2290      	movs	r2, #144	; 0x90
    2030:	18ba      	adds	r2, r7, r2
    2032:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    2034:	e054      	b.n	20e0 <STACK_SIZE+0xe0>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    2036:	2396      	movs	r3, #150	; 0x96
    2038:	18fb      	adds	r3, r7, r3
    203a:	781b      	ldrb	r3, [r3, #0]
    203c:	2290      	movs	r2, #144	; 0x90
    203e:	18ba      	adds	r2, r7, r2
    2040:	6812      	ldr	r2, [r2, #0]
    2042:	18d3      	adds	r3, r2, r3
    2044:	781b      	ldrb	r3, [r3, #0]
    2046:	2b2f      	cmp	r3, #47	; 0x2f
    2048:	d931      	bls.n	20ae <STACK_SIZE+0xae>
    204a:	2396      	movs	r3, #150	; 0x96
    204c:	18fb      	adds	r3, r7, r3
    204e:	781b      	ldrb	r3, [r3, #0]
    2050:	2290      	movs	r2, #144	; 0x90
    2052:	18ba      	adds	r2, r7, r2
    2054:	6812      	ldr	r2, [r2, #0]
    2056:	18d3      	adds	r3, r2, r3
    2058:	781b      	ldrb	r3, [r3, #0]
    205a:	2b39      	cmp	r3, #57	; 0x39
    205c:	d909      	bls.n	2072 <STACK_SIZE+0x72>
    205e:	2396      	movs	r3, #150	; 0x96
    2060:	18fb      	adds	r3, r7, r3
    2062:	781b      	ldrb	r3, [r3, #0]
    2064:	2290      	movs	r2, #144	; 0x90
    2066:	18ba      	adds	r2, r7, r2
    2068:	6812      	ldr	r2, [r2, #0]
    206a:	18d3      	adds	r3, r2, r3
    206c:	781b      	ldrb	r3, [r3, #0]
    206e:	2b40      	cmp	r3, #64	; 0x40
    2070:	d91d      	bls.n	20ae <STACK_SIZE+0xae>
    2072:	2396      	movs	r3, #150	; 0x96
    2074:	18fb      	adds	r3, r7, r3
    2076:	781b      	ldrb	r3, [r3, #0]
    2078:	2290      	movs	r2, #144	; 0x90
    207a:	18ba      	adds	r2, r7, r2
    207c:	6812      	ldr	r2, [r2, #0]
    207e:	18d3      	adds	r3, r2, r3
    2080:	781b      	ldrb	r3, [r3, #0]
    2082:	2b46      	cmp	r3, #70	; 0x46
    2084:	d909      	bls.n	209a <STACK_SIZE+0x9a>
    2086:	2396      	movs	r3, #150	; 0x96
    2088:	18fb      	adds	r3, r7, r3
    208a:	781b      	ldrb	r3, [r3, #0]
    208c:	2290      	movs	r2, #144	; 0x90
    208e:	18ba      	adds	r2, r7, r2
    2090:	6812      	ldr	r2, [r2, #0]
    2092:	18d3      	adds	r3, r2, r3
    2094:	781b      	ldrb	r3, [r3, #0]
    2096:	2b60      	cmp	r3, #96	; 0x60
    2098:	d909      	bls.n	20ae <STACK_SIZE+0xae>
    209a:	2396      	movs	r3, #150	; 0x96
    209c:	18fb      	adds	r3, r7, r3
    209e:	781b      	ldrb	r3, [r3, #0]
    20a0:	2290      	movs	r2, #144	; 0x90
    20a2:	18ba      	adds	r2, r7, r2
    20a4:	6812      	ldr	r2, [r2, #0]
    20a6:	18d3      	adds	r3, r2, r3
    20a8:	781b      	ldrb	r3, [r3, #0]
    20aa:	2b66      	cmp	r3, #102	; 0x66
    20ac:	d911      	bls.n	20d2 <STACK_SIZE+0xd2>
				{
					M2M_ERR("Invalid Key\n");
    20ae:	4ab2      	ldr	r2, [pc, #712]	; (2378 <STACK_SIZE+0x378>)
    20b0:	49aa      	ldr	r1, [pc, #680]	; (235c <STACK_SIZE+0x35c>)
    20b2:	4bab      	ldr	r3, [pc, #684]	; (2360 <STACK_SIZE+0x360>)
    20b4:	0018      	movs	r0, r3
    20b6:	4bab      	ldr	r3, [pc, #684]	; (2364 <STACK_SIZE+0x364>)
    20b8:	4798      	blx	r3
    20ba:	4bb0      	ldr	r3, [pc, #704]	; (237c <STACK_SIZE+0x37c>)
    20bc:	0018      	movs	r0, r3
    20be:	4bab      	ldr	r3, [pc, #684]	; (236c <STACK_SIZE+0x36c>)
    20c0:	4798      	blx	r3
    20c2:	200d      	movs	r0, #13
    20c4:	4baa      	ldr	r3, [pc, #680]	; (2370 <STACK_SIZE+0x370>)
    20c6:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    20c8:	2397      	movs	r3, #151	; 0x97
    20ca:	18fb      	adds	r3, r7, r3
    20cc:	22f4      	movs	r2, #244	; 0xf4
    20ce:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    20d0:	e192      	b.n	23f8 <STACK_SIZE+0x3f8>
				}
				i++;
    20d2:	2396      	movs	r3, #150	; 0x96
    20d4:	18fb      	adds	r3, r7, r3
    20d6:	781a      	ldrb	r2, [r3, #0]
    20d8:	2396      	movs	r3, #150	; 0x96
    20da:	18fb      	adds	r3, r7, r3
    20dc:	3201      	adds	r2, #1
    20de:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    20e0:	2396      	movs	r3, #150	; 0x96
    20e2:	18fb      	adds	r3, r7, r3
    20e4:	781b      	ldrb	r3, [r3, #0]
    20e6:	2b3f      	cmp	r3, #63	; 0x3f
    20e8:	d9a5      	bls.n	2036 <STACK_SIZE+0x36>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    20ea:	230b      	movs	r3, #11
    20ec:	18fb      	adds	r3, r7, r3
    20ee:	781b      	ldrb	r3, [r3, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d004      	beq.n	20fe <STACK_SIZE+0xfe>
    20f4:	230b      	movs	r3, #11
    20f6:	18fb      	adds	r3, r7, r3
    20f8:	781b      	ldrb	r3, [r3, #0]
    20fa:	2b20      	cmp	r3, #32
    20fc:	d911      	bls.n	2122 <STACK_SIZE+0x122>
	{
		M2M_ERR("SSID LEN INVALID\n");
    20fe:	4aa0      	ldr	r2, [pc, #640]	; (2380 <STACK_SIZE+0x380>)
    2100:	4996      	ldr	r1, [pc, #600]	; (235c <STACK_SIZE+0x35c>)
    2102:	4b97      	ldr	r3, [pc, #604]	; (2360 <STACK_SIZE+0x360>)
    2104:	0018      	movs	r0, r3
    2106:	4b97      	ldr	r3, [pc, #604]	; (2364 <STACK_SIZE+0x364>)
    2108:	4798      	blx	r3
    210a:	4b9e      	ldr	r3, [pc, #632]	; (2384 <STACK_SIZE+0x384>)
    210c:	0018      	movs	r0, r3
    210e:	4b97      	ldr	r3, [pc, #604]	; (236c <STACK_SIZE+0x36c>)
    2110:	4798      	blx	r3
    2112:	200d      	movs	r0, #13
    2114:	4b96      	ldr	r3, [pc, #600]	; (2370 <STACK_SIZE+0x370>)
    2116:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    2118:	2397      	movs	r3, #151	; 0x97
    211a:	18fb      	adds	r3, r7, r3
    211c:	22f4      	movs	r2, #244	; 0xf4
    211e:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    2120:	e16a      	b.n	23f8 <STACK_SIZE+0x3f8>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    2122:	23a8      	movs	r3, #168	; 0xa8
    2124:	18fb      	adds	r3, r7, r3
    2126:	881b      	ldrh	r3, [r3, #0]
    2128:	2b00      	cmp	r3, #0
    212a:	d004      	beq.n	2136 <STACK_SIZE+0x136>
    212c:	23a8      	movs	r3, #168	; 0xa8
    212e:	18fb      	adds	r3, r7, r3
    2130:	881b      	ldrh	r3, [r3, #0]
    2132:	2b0e      	cmp	r3, #14
    2134:	d917      	bls.n	2166 <STACK_SIZE+0x166>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    2136:	23a8      	movs	r3, #168	; 0xa8
    2138:	18fb      	adds	r3, r7, r3
    213a:	881b      	ldrh	r3, [r3, #0]
    213c:	2bff      	cmp	r3, #255	; 0xff
    213e:	d012      	beq.n	2166 <STACK_SIZE+0x166>
		{
			M2M_ERR("CH INVALID\n");
    2140:	238d      	movs	r3, #141	; 0x8d
    2142:	009a      	lsls	r2, r3, #2
    2144:	4985      	ldr	r1, [pc, #532]	; (235c <STACK_SIZE+0x35c>)
    2146:	4b86      	ldr	r3, [pc, #536]	; (2360 <STACK_SIZE+0x360>)
    2148:	0018      	movs	r0, r3
    214a:	4b86      	ldr	r3, [pc, #536]	; (2364 <STACK_SIZE+0x364>)
    214c:	4798      	blx	r3
    214e:	4b8e      	ldr	r3, [pc, #568]	; (2388 <STACK_SIZE+0x388>)
    2150:	0018      	movs	r0, r3
    2152:	4b86      	ldr	r3, [pc, #536]	; (236c <STACK_SIZE+0x36c>)
    2154:	4798      	blx	r3
    2156:	200d      	movs	r0, #13
    2158:	4b85      	ldr	r3, [pc, #532]	; (2370 <STACK_SIZE+0x370>)
    215a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    215c:	2397      	movs	r3, #151	; 0x97
    215e:	18fb      	adds	r3, r7, r3
    2160:	22f4      	movs	r2, #244	; 0xf4
    2162:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2164:	e148      	b.n	23f8 <STACK_SIZE+0x3f8>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    2166:	230b      	movs	r3, #11
    2168:	18fb      	adds	r3, r7, r3
    216a:	781a      	ldrb	r2, [r3, #0]
    216c:	68f9      	ldr	r1, [r7, #12]
    216e:	2314      	movs	r3, #20
    2170:	18fb      	adds	r3, r7, r3
    2172:	3346      	adds	r3, #70	; 0x46
    2174:	0018      	movs	r0, r3
    2176:	4b85      	ldr	r3, [pc, #532]	; (238c <STACK_SIZE+0x38c>)
    2178:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    217a:	230b      	movs	r3, #11
    217c:	18fb      	adds	r3, r7, r3
    217e:	781b      	ldrb	r3, [r3, #0]
    2180:	2214      	movs	r2, #20
    2182:	18ba      	adds	r2, r7, r2
    2184:	2146      	movs	r1, #70	; 0x46
    2186:	18d3      	adds	r3, r2, r3
    2188:	185b      	adds	r3, r3, r1
    218a:	2200      	movs	r2, #0
    218c:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    218e:	2314      	movs	r3, #20
    2190:	18fb      	adds	r3, r7, r3
    2192:	22a8      	movs	r2, #168	; 0xa8
    2194:	18ba      	adds	r2, r7, r2
    2196:	2144      	movs	r1, #68	; 0x44
    2198:	8812      	ldrh	r2, [r2, #0]
    219a:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    219c:	23ac      	movs	r3, #172	; 0xac
    219e:	18fb      	adds	r3, r7, r3
    21a0:	781b      	ldrb	r3, [r3, #0]
    21a2:	1e5a      	subs	r2, r3, #1
    21a4:	4193      	sbcs	r3, r2
    21a6:	b2db      	uxtb	r3, r3
    21a8:	0019      	movs	r1, r3
    21aa:	2314      	movs	r3, #20
    21ac:	18fb      	adds	r3, r7, r3
    21ae:	2267      	movs	r2, #103	; 0x67
    21b0:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    21b2:	2314      	movs	r3, #20
    21b4:	18fb      	adds	r3, r7, r3
    21b6:	228c      	movs	r2, #140	; 0x8c
    21b8:	18ba      	adds	r2, r7, r2
    21ba:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    21bc:	238c      	movs	r3, #140	; 0x8c
    21be:	18fb      	adds	r3, r7, r3
    21c0:	681b      	ldr	r3, [r3, #0]
    21c2:	220a      	movs	r2, #10
    21c4:	18ba      	adds	r2, r7, r2
    21c6:	2141      	movs	r1, #65	; 0x41
    21c8:	7812      	ldrb	r2, [r2, #0]
    21ca:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    21cc:	230a      	movs	r3, #10
    21ce:	18fb      	adds	r3, r7, r3
    21d0:	781b      	ldrb	r3, [r3, #0]
    21d2:	2b03      	cmp	r3, #3
    21d4:	d000      	beq.n	21d8 <STACK_SIZE+0x1d8>
    21d6:	e07a      	b.n	22ce <STACK_SIZE+0x2ce>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    21d8:	687b      	ldr	r3, [r7, #4]
    21da:	2288      	movs	r2, #136	; 0x88
    21dc:	18ba      	adds	r2, r7, r2
    21de:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    21e0:	238c      	movs	r3, #140	; 0x8c
    21e2:	18fb      	adds	r3, r7, r3
    21e4:	681b      	ldr	r3, [r3, #0]
    21e6:	2284      	movs	r2, #132	; 0x84
    21e8:	18ba      	adds	r2, r7, r2
    21ea:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    21ec:	2388      	movs	r3, #136	; 0x88
    21ee:	18fb      	adds	r3, r7, r3
    21f0:	681b      	ldr	r3, [r3, #0]
    21f2:	781b      	ldrb	r3, [r3, #0]
    21f4:	3b01      	subs	r3, #1
    21f6:	b2da      	uxtb	r2, r3
    21f8:	2384      	movs	r3, #132	; 0x84
    21fa:	18fb      	adds	r3, r7, r3
    21fc:	681b      	ldr	r3, [r3, #0]
    21fe:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    2200:	2384      	movs	r3, #132	; 0x84
    2202:	18fb      	adds	r3, r7, r3
    2204:	681b      	ldr	r3, [r3, #0]
    2206:	781b      	ldrb	r3, [r3, #0]
    2208:	2b03      	cmp	r3, #3
    220a:	d917      	bls.n	223c <STACK_SIZE+0x23c>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    220c:	4a60      	ldr	r2, [pc, #384]	; (2390 <STACK_SIZE+0x390>)
    220e:	4953      	ldr	r1, [pc, #332]	; (235c <STACK_SIZE+0x35c>)
    2210:	4b53      	ldr	r3, [pc, #332]	; (2360 <STACK_SIZE+0x360>)
    2212:	0018      	movs	r0, r3
    2214:	4b53      	ldr	r3, [pc, #332]	; (2364 <STACK_SIZE+0x364>)
    2216:	4798      	blx	r3
    2218:	2384      	movs	r3, #132	; 0x84
    221a:	18fb      	adds	r3, r7, r3
    221c:	681b      	ldr	r3, [r3, #0]
    221e:	781b      	ldrb	r3, [r3, #0]
    2220:	001a      	movs	r2, r3
    2222:	4b5c      	ldr	r3, [pc, #368]	; (2394 <STACK_SIZE+0x394>)
    2224:	0011      	movs	r1, r2
    2226:	0018      	movs	r0, r3
    2228:	4b4e      	ldr	r3, [pc, #312]	; (2364 <STACK_SIZE+0x364>)
    222a:	4798      	blx	r3
    222c:	200d      	movs	r0, #13
    222e:	4b50      	ldr	r3, [pc, #320]	; (2370 <STACK_SIZE+0x370>)
    2230:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2232:	2397      	movs	r3, #151	; 0x97
    2234:	18fb      	adds	r3, r7, r3
    2236:	22f4      	movs	r2, #244	; 0xf4
    2238:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    223a:	e0dd      	b.n	23f8 <STACK_SIZE+0x3f8>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    223c:	2388      	movs	r3, #136	; 0x88
    223e:	18fb      	adds	r3, r7, r3
    2240:	681b      	ldr	r3, [r3, #0]
    2242:	785b      	ldrb	r3, [r3, #1]
    2244:	3b01      	subs	r3, #1
    2246:	b2da      	uxtb	r2, r3
    2248:	2384      	movs	r3, #132	; 0x84
    224a:	18fb      	adds	r3, r7, r3
    224c:	681b      	ldr	r3, [r3, #0]
    224e:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    2250:	2384      	movs	r3, #132	; 0x84
    2252:	18fb      	adds	r3, r7, r3
    2254:	681b      	ldr	r3, [r3, #0]
    2256:	785b      	ldrb	r3, [r3, #1]
    2258:	2b0a      	cmp	r3, #10
    225a:	d01d      	beq.n	2298 <STACK_SIZE+0x298>
    225c:	2384      	movs	r3, #132	; 0x84
    225e:	18fb      	adds	r3, r7, r3
    2260:	681b      	ldr	r3, [r3, #0]
    2262:	785b      	ldrb	r3, [r3, #1]
    2264:	2b1a      	cmp	r3, #26
    2266:	d017      	beq.n	2298 <STACK_SIZE+0x298>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    2268:	4a4b      	ldr	r2, [pc, #300]	; (2398 <STACK_SIZE+0x398>)
    226a:	493c      	ldr	r1, [pc, #240]	; (235c <STACK_SIZE+0x35c>)
    226c:	4b3c      	ldr	r3, [pc, #240]	; (2360 <STACK_SIZE+0x360>)
    226e:	0018      	movs	r0, r3
    2270:	4b3c      	ldr	r3, [pc, #240]	; (2364 <STACK_SIZE+0x364>)
    2272:	4798      	blx	r3
    2274:	2384      	movs	r3, #132	; 0x84
    2276:	18fb      	adds	r3, r7, r3
    2278:	681b      	ldr	r3, [r3, #0]
    227a:	785b      	ldrb	r3, [r3, #1]
    227c:	001a      	movs	r2, r3
    227e:	4b47      	ldr	r3, [pc, #284]	; (239c <STACK_SIZE+0x39c>)
    2280:	0011      	movs	r1, r2
    2282:	0018      	movs	r0, r3
    2284:	4b37      	ldr	r3, [pc, #220]	; (2364 <STACK_SIZE+0x364>)
    2286:	4798      	blx	r3
    2288:	200d      	movs	r0, #13
    228a:	4b39      	ldr	r3, [pc, #228]	; (2370 <STACK_SIZE+0x370>)
    228c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    228e:	2397      	movs	r3, #151	; 0x97
    2290:	18fb      	adds	r3, r7, r3
    2292:	22f4      	movs	r2, #244	; 0xf4
    2294:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2296:	e0af      	b.n	23f8 <STACK_SIZE+0x3f8>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    2298:	2384      	movs	r3, #132	; 0x84
    229a:	18fb      	adds	r3, r7, r3
    229c:	681b      	ldr	r3, [r3, #0]
    229e:	1c98      	adds	r0, r3, #2
    22a0:	2388      	movs	r3, #136	; 0x88
    22a2:	18fb      	adds	r3, r7, r3
    22a4:	681b      	ldr	r3, [r3, #0]
    22a6:	1c99      	adds	r1, r3, #2
    22a8:	2388      	movs	r3, #136	; 0x88
    22aa:	18fb      	adds	r3, r7, r3
    22ac:	681b      	ldr	r3, [r3, #0]
    22ae:	785b      	ldrb	r3, [r3, #1]
    22b0:	001a      	movs	r2, r3
    22b2:	4b36      	ldr	r3, [pc, #216]	; (238c <STACK_SIZE+0x38c>)
    22b4:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    22b6:	2388      	movs	r3, #136	; 0x88
    22b8:	18fb      	adds	r3, r7, r3
    22ba:	681b      	ldr	r3, [r3, #0]
    22bc:	785b      	ldrb	r3, [r3, #1]
    22be:	001a      	movs	r2, r3
    22c0:	2384      	movs	r3, #132	; 0x84
    22c2:	18fb      	adds	r3, r7, r3
    22c4:	681b      	ldr	r3, [r3, #0]
    22c6:	189b      	adds	r3, r3, r2
    22c8:	2200      	movs	r2, #0
    22ca:	709a      	strb	r2, [r3, #2]
    22cc:	e083      	b.n	23d6 <STACK_SIZE+0x3d6>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    22ce:	230a      	movs	r3, #10
    22d0:	18fb      	adds	r3, r7, r3
    22d2:	781b      	ldrb	r3, [r3, #0]
    22d4:	2b02      	cmp	r3, #2
    22d6:	d130      	bne.n	233a <STACK_SIZE+0x33a>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    22d8:	2382      	movs	r3, #130	; 0x82
    22da:	18fc      	adds	r4, r7, r3
    22dc:	687b      	ldr	r3, [r7, #4]
    22de:	0018      	movs	r0, r3
    22e0:	4b24      	ldr	r3, [pc, #144]	; (2374 <STACK_SIZE+0x374>)
    22e2:	4798      	blx	r3
    22e4:	0003      	movs	r3, r0
    22e6:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    22e8:	2382      	movs	r3, #130	; 0x82
    22ea:	18fb      	adds	r3, r7, r3
    22ec:	881b      	ldrh	r3, [r3, #0]
    22ee:	2b00      	cmp	r3, #0
    22f0:	d004      	beq.n	22fc <STACK_SIZE+0x2fc>
    22f2:	2382      	movs	r3, #130	; 0x82
    22f4:	18fb      	adds	r3, r7, r3
    22f6:	881b      	ldrh	r3, [r3, #0]
    22f8:	2b40      	cmp	r3, #64	; 0x40
    22fa:	d911      	bls.n	2320 <STACK_SIZE+0x320>
		{
			M2M_ERR("Incorrect PSK key length\n");
    22fc:	4a28      	ldr	r2, [pc, #160]	; (23a0 <STACK_SIZE+0x3a0>)
    22fe:	4917      	ldr	r1, [pc, #92]	; (235c <STACK_SIZE+0x35c>)
    2300:	4b17      	ldr	r3, [pc, #92]	; (2360 <STACK_SIZE+0x360>)
    2302:	0018      	movs	r0, r3
    2304:	4b17      	ldr	r3, [pc, #92]	; (2364 <STACK_SIZE+0x364>)
    2306:	4798      	blx	r3
    2308:	4b26      	ldr	r3, [pc, #152]	; (23a4 <STACK_SIZE+0x3a4>)
    230a:	0018      	movs	r0, r3
    230c:	4b17      	ldr	r3, [pc, #92]	; (236c <STACK_SIZE+0x36c>)
    230e:	4798      	blx	r3
    2310:	200d      	movs	r0, #13
    2312:	4b17      	ldr	r3, [pc, #92]	; (2370 <STACK_SIZE+0x370>)
    2314:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2316:	2397      	movs	r3, #151	; 0x97
    2318:	18fb      	adds	r3, r7, r3
    231a:	22f4      	movs	r2, #244	; 0xf4
    231c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    231e:	e06b      	b.n	23f8 <STACK_SIZE+0x3f8>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    2320:	238c      	movs	r3, #140	; 0x8c
    2322:	18fb      	adds	r3, r7, r3
    2324:	6818      	ldr	r0, [r3, #0]
    2326:	2382      	movs	r3, #130	; 0x82
    2328:	18fb      	adds	r3, r7, r3
    232a:	881b      	ldrh	r3, [r3, #0]
    232c:	3301      	adds	r3, #1
    232e:	001a      	movs	r2, r3
    2330:	687b      	ldr	r3, [r7, #4]
    2332:	0019      	movs	r1, r3
    2334:	4b15      	ldr	r3, [pc, #84]	; (238c <STACK_SIZE+0x38c>)
    2336:	4798      	blx	r3
    2338:	e04d      	b.n	23d6 <STACK_SIZE+0x3d6>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    233a:	230a      	movs	r3, #10
    233c:	18fb      	adds	r3, r7, r3
    233e:	781b      	ldrb	r3, [r3, #0]
    2340:	2b04      	cmp	r3, #4
    2342:	d131      	bne.n	23a8 <STACK_SIZE+0x3a8>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    2344:	238c      	movs	r3, #140	; 0x8c
    2346:	18fb      	adds	r3, r7, r3
    2348:	681b      	ldr	r3, [r3, #0]
    234a:	6879      	ldr	r1, [r7, #4]
    234c:	223e      	movs	r2, #62	; 0x3e
    234e:	0018      	movs	r0, r3
    2350:	4b0e      	ldr	r3, [pc, #56]	; (238c <STACK_SIZE+0x38c>)
    2352:	4798      	blx	r3
    2354:	e03f      	b.n	23d6 <STACK_SIZE+0x3d6>
    2356:	46c0      	nop			; (mov r8, r8)
    2358:	00000215 	.word	0x00000215
    235c:	0000fc84 	.word	0x0000fc84
    2360:	0000f8e0 	.word	0x0000f8e0
    2364:	0000dfad 	.word	0x0000dfad
    2368:	0000fb14 	.word	0x0000fb14
    236c:	0000e0c9 	.word	0x0000e0c9
    2370:	0000dfe1 	.word	0x0000dfe1
    2374:	00000c63 	.word	0x00000c63
    2378:	00000221 	.word	0x00000221
    237c:	0000fb28 	.word	0x0000fb28
    2380:	0000022b 	.word	0x0000022b
    2384:	0000fb34 	.word	0x0000fb34
    2388:	0000fb48 	.word	0x0000fb48
    238c:	00000be9 	.word	0x00000be9
    2390:	0000024b 	.word	0x0000024b
    2394:	0000fb54 	.word	0x0000fb54
    2398:	00000252 	.word	0x00000252
    239c:	0000fb70 	.word	0x0000fb70
    23a0:	00000261 	.word	0x00000261
    23a4:	0000fb8c 	.word	0x0000fb8c
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    23a8:	230a      	movs	r3, #10
    23aa:	18fb      	adds	r3, r7, r3
    23ac:	781b      	ldrb	r3, [r3, #0]
    23ae:	2b01      	cmp	r3, #1
    23b0:	d011      	beq.n	23d6 <STACK_SIZE+0x3d6>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    23b2:	4a15      	ldr	r2, [pc, #84]	; (2408 <STACK_SIZE+0x408>)
    23b4:	4915      	ldr	r1, [pc, #84]	; (240c <STACK_SIZE+0x40c>)
    23b6:	4b16      	ldr	r3, [pc, #88]	; (2410 <STACK_SIZE+0x410>)
    23b8:	0018      	movs	r0, r3
    23ba:	4b16      	ldr	r3, [pc, #88]	; (2414 <STACK_SIZE+0x414>)
    23bc:	4798      	blx	r3
    23be:	4b16      	ldr	r3, [pc, #88]	; (2418 <STACK_SIZE+0x418>)
    23c0:	0018      	movs	r0, r3
    23c2:	4b16      	ldr	r3, [pc, #88]	; (241c <STACK_SIZE+0x41c>)
    23c4:	4798      	blx	r3
    23c6:	200d      	movs	r0, #13
    23c8:	4b15      	ldr	r3, [pc, #84]	; (2420 <STACK_SIZE+0x420>)
    23ca:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    23cc:	2397      	movs	r3, #151	; 0x97
    23ce:	18fb      	adds	r3, r7, r3
    23d0:	22f4      	movs	r2, #244	; 0xf4
    23d2:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    23d4:	e010      	b.n	23f8 <STACK_SIZE+0x3f8>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    23d6:	2397      	movs	r3, #151	; 0x97
    23d8:	18fc      	adds	r4, r7, r3
    23da:	2314      	movs	r3, #20
    23dc:	18fa      	adds	r2, r7, r3
    23de:	2300      	movs	r3, #0
    23e0:	9302      	str	r3, [sp, #8]
    23e2:	2300      	movs	r3, #0
    23e4:	9301      	str	r3, [sp, #4]
    23e6:	2300      	movs	r3, #0
    23e8:	9300      	str	r3, [sp, #0]
    23ea:	236c      	movs	r3, #108	; 0x6c
    23ec:	2128      	movs	r1, #40	; 0x28
    23ee:	2001      	movs	r0, #1
    23f0:	4d0c      	ldr	r5, [pc, #48]	; (2424 <STACK_SIZE+0x424>)
    23f2:	47a8      	blx	r5
    23f4:	0003      	movs	r3, r0
    23f6:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    23f8:	2397      	movs	r3, #151	; 0x97
    23fa:	18fb      	adds	r3, r7, r3
    23fc:	781b      	ldrb	r3, [r3, #0]
    23fe:	b25b      	sxtb	r3, r3
}
    2400:	0018      	movs	r0, r3
    2402:	46bd      	mov	sp, r7
    2404:	b026      	add	sp, #152	; 0x98
    2406:	bdb0      	pop	{r4, r5, r7, pc}
    2408:	00000271 	.word	0x00000271
    240c:	0000fc84 	.word	0x0000fc84
    2410:	0000f8e0 	.word	0x0000f8e0
    2414:	0000dfad 	.word	0x0000dfad
    2418:	0000fba8 	.word	0x0000fba8
    241c:	0000e0c9 	.word	0x0000e0c9
    2420:	0000dfe1 	.word	0x0000dfe1
    2424:	00000e85 	.word	0x00000e85

00002428 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
    2428:	b580      	push	{r7, lr}
    242a:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
    242c:	2300      	movs	r3, #0
}
    242e:	0018      	movs	r0, r3
    2430:	46bd      	mov	sp, r7
    2432:	bd80      	pop	{r7, pc}

00002434 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    2434:	b590      	push	{r4, r7, lr}
    2436:	b087      	sub	sp, #28
    2438:	af00      	add	r7, sp, #0
    243a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    243c:	2317      	movs	r3, #23
    243e:	18fb      	adds	r3, r7, r3
    2440:	2200      	movs	r2, #0
    2442:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    2444:	687b      	ldr	r3, [r7, #4]
    2446:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    2448:	693b      	ldr	r3, [r7, #16]
    244a:	2280      	movs	r2, #128	; 0x80
    244c:	0052      	lsls	r2, r2, #1
    244e:	4313      	orrs	r3, r2
    2450:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    2452:	693a      	ldr	r2, [r7, #16]
    2454:	23a5      	movs	r3, #165	; 0xa5
    2456:	015b      	lsls	r3, r3, #5
    2458:	0011      	movs	r1, r2
    245a:	0018      	movs	r0, r3
    245c:	4b12      	ldr	r3, [pc, #72]	; (24a8 <chip_apply_conf+0x74>)
    245e:	4798      	blx	r3
		if(val32 != 0) {		
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	2b00      	cmp	r3, #0
    2464:	d018      	beq.n	2498 <chip_apply_conf+0x64>
			uint32 reg = 0;
    2466:	2300      	movs	r3, #0
    2468:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    246a:	2317      	movs	r3, #23
    246c:	18fc      	adds	r4, r7, r3
    246e:	230c      	movs	r3, #12
    2470:	18fa      	adds	r2, r7, r3
    2472:	23a5      	movs	r3, #165	; 0xa5
    2474:	015b      	lsls	r3, r3, #5
    2476:	0011      	movs	r1, r2
    2478:	0018      	movs	r0, r3
    247a:	4b0c      	ldr	r3, [pc, #48]	; (24ac <chip_apply_conf+0x78>)
    247c:	4798      	blx	r3
    247e:	0003      	movs	r3, r0
    2480:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    2482:	2317      	movs	r3, #23
    2484:	18fb      	adds	r3, r7, r3
    2486:	781b      	ldrb	r3, [r3, #0]
    2488:	b25b      	sxtb	r3, r3
    248a:	2b00      	cmp	r3, #0
    248c:	d1e1      	bne.n	2452 <chip_apply_conf+0x1e>
				if(reg == val32)
    248e:	68fa      	ldr	r2, [r7, #12]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	429a      	cmp	r2, r3
    2494:	d002      	beq.n	249c <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
    2496:	e7dc      	b.n	2452 <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
    2498:	46c0      	nop			; (mov r8, r8)
    249a:	e000      	b.n	249e <chip_apply_conf+0x6a>
					break;
    249c:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
    249e:	2300      	movs	r3, #0
}
    24a0:	0018      	movs	r0, r3
    24a2:	46bd      	mov	sp, r7
    24a4:	b007      	add	sp, #28
    24a6:	bd90      	pop	{r4, r7, pc}
    24a8:	00002c85 	.word	0x00002c85
    24ac:	00002c61 	.word	0x00002c61

000024b0 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    24b0:	b590      	push	{r4, r7, lr}
    24b2:	b083      	sub	sp, #12
    24b4:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    24b6:	2300      	movs	r3, #0
    24b8:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    24ba:	1dfb      	adds	r3, r7, #7
    24bc:	2200      	movs	r2, #0
    24be:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    24c0:	1dfc      	adds	r4, r7, #7
    24c2:	003b      	movs	r3, r7
    24c4:	4a24      	ldr	r2, [pc, #144]	; (2558 <enable_interrupts+0xa8>)
    24c6:	0019      	movs	r1, r3
    24c8:	0010      	movs	r0, r2
    24ca:	4b24      	ldr	r3, [pc, #144]	; (255c <enable_interrupts+0xac>)
    24cc:	4798      	blx	r3
    24ce:	0003      	movs	r3, r0
    24d0:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    24d2:	1dfb      	adds	r3, r7, #7
    24d4:	781b      	ldrb	r3, [r3, #0]
    24d6:	b25b      	sxtb	r3, r3
    24d8:	2b00      	cmp	r3, #0
    24da:	d131      	bne.n	2540 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
    24dc:	683b      	ldr	r3, [r7, #0]
    24de:	2280      	movs	r2, #128	; 0x80
    24e0:	0052      	lsls	r2, r2, #1
    24e2:	4313      	orrs	r3, r2
    24e4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    24e6:	683b      	ldr	r3, [r7, #0]
    24e8:	1dfc      	adds	r4, r7, #7
    24ea:	4a1b      	ldr	r2, [pc, #108]	; (2558 <enable_interrupts+0xa8>)
    24ec:	0019      	movs	r1, r3
    24ee:	0010      	movs	r0, r2
    24f0:	4b1b      	ldr	r3, [pc, #108]	; (2560 <enable_interrupts+0xb0>)
    24f2:	4798      	blx	r3
    24f4:	0003      	movs	r3, r0
    24f6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    24f8:	1dfb      	adds	r3, r7, #7
    24fa:	781b      	ldrb	r3, [r3, #0]
    24fc:	b25b      	sxtb	r3, r3
    24fe:	2b00      	cmp	r3, #0
    2500:	d120      	bne.n	2544 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    2502:	1dfc      	adds	r4, r7, #7
    2504:	003a      	movs	r2, r7
    2506:	23d0      	movs	r3, #208	; 0xd0
    2508:	015b      	lsls	r3, r3, #5
    250a:	0011      	movs	r1, r2
    250c:	0018      	movs	r0, r3
    250e:	4b13      	ldr	r3, [pc, #76]	; (255c <enable_interrupts+0xac>)
    2510:	4798      	blx	r3
    2512:	0003      	movs	r3, r0
    2514:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    2516:	1dfb      	adds	r3, r7, #7
    2518:	781b      	ldrb	r3, [r3, #0]
    251a:	b25b      	sxtb	r3, r3
    251c:	2b00      	cmp	r3, #0
    251e:	d113      	bne.n	2548 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
    2520:	683b      	ldr	r3, [r7, #0]
    2522:	2280      	movs	r2, #128	; 0x80
    2524:	0252      	lsls	r2, r2, #9
    2526:	4313      	orrs	r3, r2
    2528:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    252a:	683a      	ldr	r2, [r7, #0]
    252c:	1dfc      	adds	r4, r7, #7
    252e:	23d0      	movs	r3, #208	; 0xd0
    2530:	015b      	lsls	r3, r3, #5
    2532:	0011      	movs	r1, r2
    2534:	0018      	movs	r0, r3
    2536:	4b0a      	ldr	r3, [pc, #40]	; (2560 <enable_interrupts+0xb0>)
    2538:	4798      	blx	r3
    253a:	0003      	movs	r3, r0
    253c:	7023      	strb	r3, [r4, #0]
    253e:	e004      	b.n	254a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    2540:	46c0      	nop			; (mov r8, r8)
    2542:	e002      	b.n	254a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    2544:	46c0      	nop			; (mov r8, r8)
    2546:	e000      	b.n	254a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    2548:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
    254a:	1dfb      	adds	r3, r7, #7
    254c:	781b      	ldrb	r3, [r3, #0]
    254e:	b25b      	sxtb	r3, r3
}
    2550:	0018      	movs	r0, r3
    2552:	46bd      	mov	sp, r7
    2554:	b003      	add	sp, #12
    2556:	bd90      	pop	{r4, r7, pc}
    2558:	00001408 	.word	0x00001408
    255c:	00002c61 	.word	0x00002c61
    2560:	00002c85 	.word	0x00002c85

00002564 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    2564:	b580      	push	{r7, lr}
    2566:	b082      	sub	sp, #8
    2568:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    256a:	4b32      	ldr	r3, [pc, #200]	; (2634 <nmi_get_chipid+0xd0>)
    256c:	681b      	ldr	r3, [r3, #0]
    256e:	2b00      	cmp	r3, #0
    2570:	d159      	bne.n	2626 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    2572:	4a30      	ldr	r2, [pc, #192]	; (2634 <nmi_get_chipid+0xd0>)
    2574:	2380      	movs	r3, #128	; 0x80
    2576:	015b      	lsls	r3, r3, #5
    2578:	0011      	movs	r1, r2
    257a:	0018      	movs	r0, r3
    257c:	4b2e      	ldr	r3, [pc, #184]	; (2638 <nmi_get_chipid+0xd4>)
    257e:	4798      	blx	r3
    2580:	1e03      	subs	r3, r0, #0
    2582:	d004      	beq.n	258e <nmi_get_chipid+0x2a>
			chipid = 0;
    2584:	4b2b      	ldr	r3, [pc, #172]	; (2634 <nmi_get_chipid+0xd0>)
    2586:	2200      	movs	r2, #0
    2588:	601a      	str	r2, [r3, #0]
			return 0;
    258a:	2300      	movs	r3, #0
    258c:	e04d      	b.n	262a <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    258e:	1d3b      	adds	r3, r7, #4
    2590:	4a2a      	ldr	r2, [pc, #168]	; (263c <nmi_get_chipid+0xd8>)
    2592:	0019      	movs	r1, r3
    2594:	0010      	movs	r0, r2
    2596:	4b28      	ldr	r3, [pc, #160]	; (2638 <nmi_get_chipid+0xd4>)
    2598:	4798      	blx	r3
    259a:	1e03      	subs	r3, r0, #0
    259c:	d004      	beq.n	25a8 <nmi_get_chipid+0x44>
			chipid = 0;
    259e:	4b25      	ldr	r3, [pc, #148]	; (2634 <nmi_get_chipid+0xd0>)
    25a0:	2200      	movs	r2, #0
    25a2:	601a      	str	r2, [r3, #0]
			return 0;
    25a4:	2300      	movs	r3, #0
    25a6:	e040      	b.n	262a <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    25a8:	4b22      	ldr	r3, [pc, #136]	; (2634 <nmi_get_chipid+0xd0>)
    25aa:	681b      	ldr	r3, [r3, #0]
    25ac:	4a24      	ldr	r2, [pc, #144]	; (2640 <nmi_get_chipid+0xdc>)
    25ae:	4293      	cmp	r3, r2
    25b0:	d106      	bne.n	25c0 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    25b2:	687b      	ldr	r3, [r7, #4]
    25b4:	2b01      	cmp	r3, #1
    25b6:	d029      	beq.n	260c <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    25b8:	4b1e      	ldr	r3, [pc, #120]	; (2634 <nmi_get_chipid+0xd0>)
    25ba:	4a22      	ldr	r2, [pc, #136]	; (2644 <nmi_get_chipid+0xe0>)
    25bc:	601a      	str	r2, [r3, #0]
    25be:	e025      	b.n	260c <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    25c0:	4b1c      	ldr	r3, [pc, #112]	; (2634 <nmi_get_chipid+0xd0>)
    25c2:	681b      	ldr	r3, [r3, #0]
    25c4:	4a20      	ldr	r2, [pc, #128]	; (2648 <nmi_get_chipid+0xe4>)
    25c6:	4293      	cmp	r3, r2
    25c8:	d10d      	bne.n	25e6 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	2b03      	cmp	r3, #3
    25ce:	d01d      	beq.n	260c <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    25d0:	687b      	ldr	r3, [r7, #4]
    25d2:	2b04      	cmp	r3, #4
    25d4:	d103      	bne.n	25de <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    25d6:	4b17      	ldr	r3, [pc, #92]	; (2634 <nmi_get_chipid+0xd0>)
    25d8:	4a1c      	ldr	r2, [pc, #112]	; (264c <nmi_get_chipid+0xe8>)
    25da:	601a      	str	r2, [r3, #0]
    25dc:	e016      	b.n	260c <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    25de:	4b15      	ldr	r3, [pc, #84]	; (2634 <nmi_get_chipid+0xd0>)
    25e0:	4a1b      	ldr	r2, [pc, #108]	; (2650 <nmi_get_chipid+0xec>)
    25e2:	601a      	str	r2, [r3, #0]
    25e4:	e012      	b.n	260c <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
    25e6:	4b13      	ldr	r3, [pc, #76]	; (2634 <nmi_get_chipid+0xd0>)
    25e8:	681b      	ldr	r3, [r3, #0]
    25ea:	4a1a      	ldr	r2, [pc, #104]	; (2654 <nmi_get_chipid+0xf0>)
    25ec:	4293      	cmp	r3, r2
    25ee:	d10d      	bne.n	260c <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    25f0:	4a10      	ldr	r2, [pc, #64]	; (2634 <nmi_get_chipid+0xd0>)
    25f2:	23ec      	movs	r3, #236	; 0xec
    25f4:	039b      	lsls	r3, r3, #14
    25f6:	0011      	movs	r1, r2
    25f8:	0018      	movs	r0, r3
    25fa:	4b0f      	ldr	r3, [pc, #60]	; (2638 <nmi_get_chipid+0xd4>)
    25fc:	4798      	blx	r3
    25fe:	1e03      	subs	r3, r0, #0
    2600:	d004      	beq.n	260c <nmi_get_chipid+0xa8>
			chipid = 0;
    2602:	4b0c      	ldr	r3, [pc, #48]	; (2634 <nmi_get_chipid+0xd0>)
    2604:	2200      	movs	r2, #0
    2606:	601a      	str	r2, [r3, #0]
			return 0;
    2608:	2300      	movs	r3, #0
    260a:	e00e      	b.n	262a <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    260c:	4b09      	ldr	r3, [pc, #36]	; (2634 <nmi_get_chipid+0xd0>)
    260e:	681b      	ldr	r3, [r3, #0]
    2610:	4a11      	ldr	r2, [pc, #68]	; (2658 <nmi_get_chipid+0xf4>)
    2612:	401a      	ands	r2, r3
    2614:	4b07      	ldr	r3, [pc, #28]	; (2634 <nmi_get_chipid+0xd0>)
    2616:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    2618:	4b06      	ldr	r3, [pc, #24]	; (2634 <nmi_get_chipid+0xd0>)
    261a:	681b      	ldr	r3, [r3, #0]
    261c:	22a0      	movs	r2, #160	; 0xa0
    261e:	02d2      	lsls	r2, r2, #11
    2620:	431a      	orrs	r2, r3
    2622:	4b04      	ldr	r3, [pc, #16]	; (2634 <nmi_get_chipid+0xd0>)
    2624:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    2626:	4b03      	ldr	r3, [pc, #12]	; (2634 <nmi_get_chipid+0xd0>)
    2628:	681b      	ldr	r3, [r3, #0]
}
    262a:	0018      	movs	r0, r3
    262c:	46bd      	mov	sp, r7
    262e:	b002      	add	sp, #8
    2630:	bd80      	pop	{r7, pc}
    2632:	46c0      	nop			; (mov r8, r8)
    2634:	20000210 	.word	0x20000210
    2638:	00002c61 	.word	0x00002c61
    263c:	000013f4 	.word	0x000013f4
    2640:	001002a0 	.word	0x001002a0
    2644:	001002a1 	.word	0x001002a1
    2648:	001002b0 	.word	0x001002b0
    264c:	001002b1 	.word	0x001002b1
    2650:	001002b2 	.word	0x001002b2
    2654:	001000f0 	.word	0x001000f0
    2658:	fff0ffff 	.word	0xfff0ffff

0000265c <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    265c:	b590      	push	{r4, r7, lr}
    265e:	b083      	sub	sp, #12
    2660:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    2662:	1dfb      	adds	r3, r7, #7
    2664:	2200      	movs	r2, #0
    2666:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2668:	1dfc      	adds	r4, r7, #7
    266a:	003b      	movs	r3, r7
    266c:	0019      	movs	r1, r3
    266e:	2010      	movs	r0, #16
    2670:	4b2e      	ldr	r3, [pc, #184]	; (272c <chip_sleep+0xd0>)
    2672:	4798      	blx	r3
    2674:	0003      	movs	r3, r0
    2676:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
    2678:	1dfb      	adds	r3, r7, #7
    267a:	781b      	ldrb	r3, [r3, #0]
    267c:	b25b      	sxtb	r3, r3
    267e:	2b00      	cmp	r3, #0
    2680:	d145      	bne.n	270e <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
    2682:	683b      	ldr	r3, [r7, #0]
    2684:	2201      	movs	r2, #1
    2686:	4013      	ands	r3, r2
    2688:	d000      	beq.n	268c <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    268a:	e7ed      	b.n	2668 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
    268c:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    268e:	1dfc      	adds	r4, r7, #7
    2690:	003b      	movs	r3, r7
    2692:	0019      	movs	r1, r3
    2694:	2001      	movs	r0, #1
    2696:	4b25      	ldr	r3, [pc, #148]	; (272c <chip_sleep+0xd0>)
    2698:	4798      	blx	r3
    269a:	0003      	movs	r3, r0
    269c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    269e:	1dfb      	adds	r3, r7, #7
    26a0:	781b      	ldrb	r3, [r3, #0]
    26a2:	b25b      	sxtb	r3, r3
    26a4:	2b00      	cmp	r3, #0
    26a6:	d134      	bne.n	2712 <chip_sleep+0xb6>
	if(reg & NBIT1)
    26a8:	683b      	ldr	r3, [r7, #0]
    26aa:	2202      	movs	r2, #2
    26ac:	4013      	ands	r3, r2
    26ae:	d010      	beq.n	26d2 <chip_sleep+0x76>
	{
		reg &=~NBIT1;
    26b0:	683b      	ldr	r3, [r7, #0]
    26b2:	2202      	movs	r2, #2
    26b4:	4393      	bics	r3, r2
    26b6:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    26b8:	683b      	ldr	r3, [r7, #0]
    26ba:	1dfc      	adds	r4, r7, #7
    26bc:	0019      	movs	r1, r3
    26be:	2001      	movs	r0, #1
    26c0:	4b1b      	ldr	r3, [pc, #108]	; (2730 <chip_sleep+0xd4>)
    26c2:	4798      	blx	r3
    26c4:	0003      	movs	r3, r0
    26c6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
    26c8:	1dfb      	adds	r3, r7, #7
    26ca:	781b      	ldrb	r3, [r3, #0]
    26cc:	b25b      	sxtb	r3, r3
    26ce:	2b00      	cmp	r3, #0
    26d0:	d121      	bne.n	2716 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    26d2:	1dfc      	adds	r4, r7, #7
    26d4:	003b      	movs	r3, r7
    26d6:	0019      	movs	r1, r3
    26d8:	200b      	movs	r0, #11
    26da:	4b14      	ldr	r3, [pc, #80]	; (272c <chip_sleep+0xd0>)
    26dc:	4798      	blx	r3
    26de:	0003      	movs	r3, r0
    26e0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    26e2:	1dfb      	adds	r3, r7, #7
    26e4:	781b      	ldrb	r3, [r3, #0]
    26e6:	b25b      	sxtb	r3, r3
    26e8:	2b00      	cmp	r3, #0
    26ea:	d116      	bne.n	271a <chip_sleep+0xbe>
	if(reg & NBIT0)
    26ec:	683b      	ldr	r3, [r7, #0]
    26ee:	2201      	movs	r2, #1
    26f0:	4013      	ands	r3, r2
    26f2:	d013      	beq.n	271c <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
    26f4:	683b      	ldr	r3, [r7, #0]
    26f6:	2201      	movs	r2, #1
    26f8:	4393      	bics	r3, r2
    26fa:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    26fc:	683b      	ldr	r3, [r7, #0]
    26fe:	1dfc      	adds	r4, r7, #7
    2700:	0019      	movs	r1, r3
    2702:	200b      	movs	r0, #11
    2704:	4b0a      	ldr	r3, [pc, #40]	; (2730 <chip_sleep+0xd4>)
    2706:	4798      	blx	r3
    2708:	0003      	movs	r3, r0
    270a:	7023      	strb	r3, [r4, #0]
    270c:	e006      	b.n	271c <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
    270e:	46c0      	nop			; (mov r8, r8)
    2710:	e004      	b.n	271c <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    2712:	46c0      	nop			; (mov r8, r8)
    2714:	e002      	b.n	271c <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
    2716:	46c0      	nop			; (mov r8, r8)
    2718:	e000      	b.n	271c <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    271a:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
    271c:	1dfb      	adds	r3, r7, #7
    271e:	781b      	ldrb	r3, [r3, #0]
    2720:	b25b      	sxtb	r3, r3
}
    2722:	0018      	movs	r0, r3
    2724:	46bd      	mov	sp, r7
    2726:	b003      	add	sp, #12
    2728:	bd90      	pop	{r4, r7, pc}
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	00002c61 	.word	0x00002c61
    2730:	00002c85 	.word	0x00002c85

00002734 <chip_wake>:
sint8 chip_wake(void)
{
    2734:	b590      	push	{r4, r7, lr}
    2736:	b085      	sub	sp, #20
    2738:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    273a:	230f      	movs	r3, #15
    273c:	18fb      	adds	r3, r7, r3
    273e:	2200      	movs	r2, #0
    2740:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    2742:	2300      	movs	r3, #0
    2744:	607b      	str	r3, [r7, #4]
    2746:	2300      	movs	r3, #0
    2748:	603b      	str	r3, [r7, #0]
    274a:	2300      	movs	r3, #0
    274c:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    274e:	230f      	movs	r3, #15
    2750:	18fc      	adds	r4, r7, r3
    2752:	1d3b      	adds	r3, r7, #4
    2754:	0019      	movs	r1, r3
    2756:	200b      	movs	r0, #11
    2758:	4b4c      	ldr	r3, [pc, #304]	; (288c <chip_wake+0x158>)
    275a:	4798      	blx	r3
    275c:	0003      	movs	r3, r0
    275e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2760:	230f      	movs	r3, #15
    2762:	18fb      	adds	r3, r7, r3
    2764:	781b      	ldrb	r3, [r3, #0]
    2766:	b25b      	sxtb	r3, r3
    2768:	2b00      	cmp	r3, #0
    276a:	d000      	beq.n	276e <chip_wake+0x3a>
    276c:	e07f      	b.n	286e <chip_wake+0x13a>
	
	if(!(reg & NBIT0))
    276e:	687b      	ldr	r3, [r7, #4]
    2770:	2201      	movs	r2, #1
    2772:	4013      	ands	r3, r2
    2774:	d110      	bne.n	2798 <chip_wake+0x64>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    2776:	687b      	ldr	r3, [r7, #4]
    2778:	2201      	movs	r2, #1
    277a:	4313      	orrs	r3, r2
    277c:	220f      	movs	r2, #15
    277e:	18bc      	adds	r4, r7, r2
    2780:	0019      	movs	r1, r3
    2782:	200b      	movs	r0, #11
    2784:	4b42      	ldr	r3, [pc, #264]	; (2890 <chip_wake+0x15c>)
    2786:	4798      	blx	r3
    2788:	0003      	movs	r3, r0
    278a:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    278c:	230f      	movs	r3, #15
    278e:	18fb      	adds	r3, r7, r3
    2790:	781b      	ldrb	r3, [r3, #0]
    2792:	b25b      	sxtb	r3, r3
    2794:	2b00      	cmp	r3, #0
    2796:	d16c      	bne.n	2872 <chip_wake+0x13e>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    2798:	230f      	movs	r3, #15
    279a:	18fc      	adds	r4, r7, r3
    279c:	1d3b      	adds	r3, r7, #4
    279e:	0019      	movs	r1, r3
    27a0:	2001      	movs	r0, #1
    27a2:	4b3a      	ldr	r3, [pc, #232]	; (288c <chip_wake+0x158>)
    27a4:	4798      	blx	r3
    27a6:	0003      	movs	r3, r0
    27a8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    27aa:	230f      	movs	r3, #15
    27ac:	18fb      	adds	r3, r7, r3
    27ae:	781b      	ldrb	r3, [r3, #0]
    27b0:	b25b      	sxtb	r3, r3
    27b2:	2b00      	cmp	r3, #0
    27b4:	d15f      	bne.n	2876 <chip_wake+0x142>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    27b6:	687b      	ldr	r3, [r7, #4]
    27b8:	2202      	movs	r2, #2
    27ba:	4013      	ands	r3, r2
    27bc:	d110      	bne.n	27e0 <chip_wake+0xac>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    27be:	687b      	ldr	r3, [r7, #4]
    27c0:	2202      	movs	r2, #2
    27c2:	4313      	orrs	r3, r2
    27c4:	220f      	movs	r2, #15
    27c6:	18bc      	adds	r4, r7, r2
    27c8:	0019      	movs	r1, r3
    27ca:	2001      	movs	r0, #1
    27cc:	4b30      	ldr	r3, [pc, #192]	; (2890 <chip_wake+0x15c>)
    27ce:	4798      	blx	r3
    27d0:	0003      	movs	r3, r0
    27d2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    27d4:	230f      	movs	r3, #15
    27d6:	18fb      	adds	r3, r7, r3
    27d8:	781b      	ldrb	r3, [r3, #0]
    27da:	b25b      	sxtb	r3, r3
    27dc:	2b00      	cmp	r3, #0
    27de:	d14c      	bne.n	287a <chip_wake+0x146>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    27e0:	230f      	movs	r3, #15
    27e2:	18fc      	adds	r4, r7, r3
    27e4:	003b      	movs	r3, r7
    27e6:	0019      	movs	r1, r3
    27e8:	200f      	movs	r0, #15
    27ea:	4b28      	ldr	r3, [pc, #160]	; (288c <chip_wake+0x158>)
    27ec:	4798      	blx	r3
    27ee:	0003      	movs	r3, r0
    27f0:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
    27f2:	230f      	movs	r3, #15
    27f4:	18fb      	adds	r3, r7, r3
    27f6:	781b      	ldrb	r3, [r3, #0]
    27f8:	b25b      	sxtb	r3, r3
    27fa:	2b00      	cmp	r3, #0
    27fc:	d013      	beq.n	2826 <chip_wake+0xf2>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    27fe:	23aa      	movs	r3, #170	; 0xaa
    2800:	005a      	lsls	r2, r3, #1
    2802:	4924      	ldr	r1, [pc, #144]	; (2894 <chip_wake+0x160>)
    2804:	4b24      	ldr	r3, [pc, #144]	; (2898 <chip_wake+0x164>)
    2806:	0018      	movs	r0, r3
    2808:	4b24      	ldr	r3, [pc, #144]	; (289c <chip_wake+0x168>)
    280a:	4798      	blx	r3
    280c:	230f      	movs	r3, #15
    280e:	18fb      	adds	r3, r7, r3
    2810:	2100      	movs	r1, #0
    2812:	5659      	ldrsb	r1, [r3, r1]
    2814:	683a      	ldr	r2, [r7, #0]
    2816:	4b22      	ldr	r3, [pc, #136]	; (28a0 <chip_wake+0x16c>)
    2818:	0018      	movs	r0, r3
    281a:	4b20      	ldr	r3, [pc, #128]	; (289c <chip_wake+0x168>)
    281c:	4798      	blx	r3
    281e:	200d      	movs	r0, #13
    2820:	4b20      	ldr	r3, [pc, #128]	; (28a4 <chip_wake+0x170>)
    2822:	4798      	blx	r3
			goto _WAKE_EXIT;
    2824:	e02a      	b.n	287c <chip_wake+0x148>
		}
		if(clk_status_reg & NBIT2) {
    2826:	683b      	ldr	r3, [r7, #0]
    2828:	2204      	movs	r2, #4
    282a:	4013      	ands	r3, r2
    282c:	d11b      	bne.n	2866 <chip_wake+0x132>
			break;
		}
		nm_bsp_sleep(2);
    282e:	2002      	movs	r0, #2
    2830:	4b1d      	ldr	r3, [pc, #116]	; (28a8 <chip_wake+0x174>)
    2832:	4798      	blx	r3
		trials++;
    2834:	68bb      	ldr	r3, [r7, #8]
    2836:	3301      	adds	r3, #1
    2838:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
    283a:	68bb      	ldr	r3, [r7, #8]
    283c:	2b04      	cmp	r3, #4
    283e:	d9cf      	bls.n	27e0 <chip_wake+0xac>
		{
			M2M_ERR("Failed to wakup the chip\n");
    2840:	23af      	movs	r3, #175	; 0xaf
    2842:	005a      	lsls	r2, r3, #1
    2844:	4913      	ldr	r1, [pc, #76]	; (2894 <chip_wake+0x160>)
    2846:	4b14      	ldr	r3, [pc, #80]	; (2898 <chip_wake+0x164>)
    2848:	0018      	movs	r0, r3
    284a:	4b14      	ldr	r3, [pc, #80]	; (289c <chip_wake+0x168>)
    284c:	4798      	blx	r3
    284e:	4b17      	ldr	r3, [pc, #92]	; (28ac <chip_wake+0x178>)
    2850:	0018      	movs	r0, r3
    2852:	4b17      	ldr	r3, [pc, #92]	; (28b0 <chip_wake+0x17c>)
    2854:	4798      	blx	r3
    2856:	200d      	movs	r0, #13
    2858:	4b12      	ldr	r3, [pc, #72]	; (28a4 <chip_wake+0x170>)
    285a:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    285c:	230f      	movs	r3, #15
    285e:	18fb      	adds	r3, r7, r3
    2860:	22fc      	movs	r2, #252	; 0xfc
    2862:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
    2864:	e00a      	b.n	287c <chip_wake+0x148>
			break;
    2866:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
    2868:	4b12      	ldr	r3, [pc, #72]	; (28b4 <chip_wake+0x180>)
    286a:	4798      	blx	r3
    286c:	e006      	b.n	287c <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    286e:	46c0      	nop			; (mov r8, r8)
    2870:	e004      	b.n	287c <chip_wake+0x148>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2872:	46c0      	nop			; (mov r8, r8)
    2874:	e002      	b.n	287c <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2876:	46c0      	nop			; (mov r8, r8)
    2878:	e000      	b.n	287c <chip_wake+0x148>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    287a:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
    287c:	230f      	movs	r3, #15
    287e:	18fb      	adds	r3, r7, r3
    2880:	781b      	ldrb	r3, [r3, #0]
    2882:	b25b      	sxtb	r3, r3
}
    2884:	0018      	movs	r0, r3
    2886:	46bd      	mov	sp, r7
    2888:	b005      	add	sp, #20
    288a:	bd90      	pop	{r4, r7, pc}
    288c:	00002c61 	.word	0x00002c61
    2890:	00002c85 	.word	0x00002c85
    2894:	0000fd1c 	.word	0x0000fd1c
    2898:	0000fc98 	.word	0x0000fc98
    289c:	0000dfad 	.word	0x0000dfad
    28a0:	0000fcac 	.word	0x0000fcac
    28a4:	0000dfe1 	.word	0x0000dfe1
    28a8:	00000335 	.word	0x00000335
    28ac:	0000fcc4 	.word	0x0000fcc4
    28b0:	0000e0c9 	.word	0x0000e0c9
    28b4:	00002c21 	.word	0x00002c21

000028b8 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    28b8:	b580      	push	{r7, lr}
    28ba:	b088      	sub	sp, #32
    28bc:	af00      	add	r7, sp, #0
    28be:	0002      	movs	r2, r0
    28c0:	1dfb      	adds	r3, r7, #7
    28c2:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    28c4:	2313      	movs	r3, #19
    28c6:	18fb      	adds	r3, r7, r3
    28c8:	2200      	movs	r2, #0
    28ca:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    28cc:	2300      	movs	r3, #0
    28ce:	61fb      	str	r3, [r7, #28]
    28d0:	2300      	movs	r3, #0
    28d2:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
    28d4:	2300      	movs	r3, #0
    28d6:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    28d8:	4b4a      	ldr	r3, [pc, #296]	; (2a04 <wait_for_bootrom+0x14c>)
    28da:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
    28dc:	2300      	movs	r3, #0
    28de:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    28e0:	4b49      	ldr	r3, [pc, #292]	; (2a08 <wait_for_bootrom+0x150>)
    28e2:	0018      	movs	r0, r3
    28e4:	4b49      	ldr	r3, [pc, #292]	; (2a0c <wait_for_bootrom+0x154>)
    28e6:	4798      	blx	r3
    28e8:	0003      	movs	r3, r0
    28ea:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
    28ec:	69fb      	ldr	r3, [r7, #28]
    28ee:	2b00      	cmp	r3, #0
    28f0:	db03      	blt.n	28fa <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    28f2:	2001      	movs	r0, #1
    28f4:	4b46      	ldr	r3, [pc, #280]	; (2a10 <wait_for_bootrom+0x158>)
    28f6:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    28f8:	e7f2      	b.n	28e0 <wait_for_bootrom+0x28>
			break;
    28fa:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    28fc:	4b45      	ldr	r3, [pc, #276]	; (2a14 <wait_for_bootrom+0x15c>)
    28fe:	0018      	movs	r0, r3
    2900:	4b42      	ldr	r3, [pc, #264]	; (2a0c <wait_for_bootrom+0x154>)
    2902:	4798      	blx	r3
    2904:	0003      	movs	r3, r0
    2906:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
    2908:	69fb      	ldr	r3, [r7, #28]
    290a:	2201      	movs	r2, #1
    290c:	4013      	ands	r3, r2
    290e:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    2910:	69fb      	ldr	r3, [r7, #28]
    2912:	2b00      	cmp	r3, #0
    2914:	d112      	bne.n	293c <wait_for_bootrom+0x84>
	{
		reg = 0;
    2916:	2300      	movs	r3, #0
    2918:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
    291a:	e00b      	b.n	2934 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
    291c:	2001      	movs	r0, #1
    291e:	4b3c      	ldr	r3, [pc, #240]	; (2a10 <wait_for_bootrom+0x158>)
    2920:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    2922:	4b3d      	ldr	r3, [pc, #244]	; (2a18 <wait_for_bootrom+0x160>)
    2924:	0018      	movs	r0, r3
    2926:	4b39      	ldr	r3, [pc, #228]	; (2a0c <wait_for_bootrom+0x154>)
    2928:	4798      	blx	r3
    292a:	0003      	movs	r3, r0
    292c:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
    292e:	69bb      	ldr	r3, [r7, #24]
    2930:	3301      	adds	r3, #1
    2932:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
    2934:	69fb      	ldr	r3, [r7, #28]
    2936:	4a39      	ldr	r2, [pc, #228]	; (2a1c <wait_for_bootrom+0x164>)
    2938:	4293      	cmp	r3, r2
    293a:	d1ef      	bne.n	291c <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    293c:	1dfb      	adds	r3, r7, #7
    293e:	781b      	ldrb	r3, [r3, #0]
    2940:	2b02      	cmp	r3, #2
    2942:	d10d      	bne.n	2960 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2944:	4a36      	ldr	r2, [pc, #216]	; (2a20 <wait_for_bootrom+0x168>)
    2946:	4b37      	ldr	r3, [pc, #220]	; (2a24 <wait_for_bootrom+0x16c>)
    2948:	0011      	movs	r1, r2
    294a:	0018      	movs	r0, r3
    294c:	4b36      	ldr	r3, [pc, #216]	; (2a28 <wait_for_bootrom+0x170>)
    294e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    2950:	2380      	movs	r3, #128	; 0x80
    2952:	035b      	lsls	r3, r3, #13
    2954:	4a35      	ldr	r2, [pc, #212]	; (2a2c <wait_for_bootrom+0x174>)
    2956:	0019      	movs	r1, r3
    2958:	0010      	movs	r0, r2
    295a:	4b33      	ldr	r3, [pc, #204]	; (2a28 <wait_for_bootrom+0x170>)
    295c:	4798      	blx	r3
    295e:	e022      	b.n	29a6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    2960:	1dfb      	adds	r3, r7, #7
    2962:	781b      	ldrb	r3, [r3, #0]
    2964:	2b03      	cmp	r3, #3
    2966:	d10b      	bne.n	2980 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2968:	4a2d      	ldr	r2, [pc, #180]	; (2a20 <wait_for_bootrom+0x168>)
    296a:	4b2e      	ldr	r3, [pc, #184]	; (2a24 <wait_for_bootrom+0x16c>)
    296c:	0011      	movs	r1, r2
    296e:	0018      	movs	r0, r3
    2970:	4b2d      	ldr	r3, [pc, #180]	; (2a28 <wait_for_bootrom+0x170>)
    2972:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    2974:	4b2d      	ldr	r3, [pc, #180]	; (2a2c <wait_for_bootrom+0x174>)
    2976:	2100      	movs	r1, #0
    2978:	0018      	movs	r0, r3
    297a:	4b2b      	ldr	r3, [pc, #172]	; (2a28 <wait_for_bootrom+0x170>)
    297c:	4798      	blx	r3
    297e:	e012      	b.n	29a6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    2980:	1dfb      	adds	r3, r7, #7
    2982:	781b      	ldrb	r3, [r3, #0]
    2984:	2b04      	cmp	r3, #4
    2986:	d108      	bne.n	299a <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    2988:	2380      	movs	r3, #128	; 0x80
    298a:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    298c:	68fb      	ldr	r3, [r7, #12]
    298e:	4a27      	ldr	r2, [pc, #156]	; (2a2c <wait_for_bootrom+0x174>)
    2990:	0019      	movs	r1, r3
    2992:	0010      	movs	r0, r2
    2994:	4b24      	ldr	r3, [pc, #144]	; (2a28 <wait_for_bootrom+0x170>)
    2996:	4798      	blx	r3
    2998:	e005      	b.n	29a6 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    299a:	68fb      	ldr	r3, [r7, #12]
    299c:	4a23      	ldr	r2, [pc, #140]	; (2a2c <wait_for_bootrom+0x174>)
    299e:	0019      	movs	r1, r3
    29a0:	0010      	movs	r0, r2
    29a2:	4b21      	ldr	r3, [pc, #132]	; (2a28 <wait_for_bootrom+0x170>)
    29a4:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    29a6:	4b22      	ldr	r3, [pc, #136]	; (2a30 <wait_for_bootrom+0x178>)
    29a8:	4798      	blx	r3
    29aa:	0003      	movs	r3, r0
    29ac:	051b      	lsls	r3, r3, #20
    29ae:	0d1b      	lsrs	r3, r3, #20
    29b0:	4a20      	ldr	r2, [pc, #128]	; (2a34 <wait_for_bootrom+0x17c>)
    29b2:	4293      	cmp	r3, r2
    29b4:	d906      	bls.n	29c4 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    29b6:	697b      	ldr	r3, [r7, #20]
    29b8:	2202      	movs	r2, #2
    29ba:	4313      	orrs	r3, r2
    29bc:	0018      	movs	r0, r3
    29be:	4b1e      	ldr	r3, [pc, #120]	; (2a38 <wait_for_bootrom+0x180>)
    29c0:	4798      	blx	r3
    29c2:	e003      	b.n	29cc <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
    29c4:	697b      	ldr	r3, [r7, #20]
    29c6:	0018      	movs	r0, r3
    29c8:	4b1b      	ldr	r3, [pc, #108]	; (2a38 <wait_for_bootrom+0x180>)
    29ca:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    29cc:	4b1b      	ldr	r3, [pc, #108]	; (2a3c <wait_for_bootrom+0x184>)
    29ce:	0018      	movs	r0, r3
    29d0:	4b1b      	ldr	r3, [pc, #108]	; (2a40 <wait_for_bootrom+0x188>)
    29d2:	4798      	blx	r3
    29d4:	68fa      	ldr	r2, [r7, #12]
    29d6:	4b1b      	ldr	r3, [pc, #108]	; (2a44 <wait_for_bootrom+0x18c>)
    29d8:	0011      	movs	r1, r2
    29da:	0018      	movs	r0, r3
    29dc:	4b18      	ldr	r3, [pc, #96]	; (2a40 <wait_for_bootrom+0x188>)
    29de:	4798      	blx	r3
    29e0:	200d      	movs	r0, #13
    29e2:	4b19      	ldr	r3, [pc, #100]	; (2a48 <wait_for_bootrom+0x190>)
    29e4:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    29e6:	4a19      	ldr	r2, [pc, #100]	; (2a4c <wait_for_bootrom+0x194>)
    29e8:	4b0b      	ldr	r3, [pc, #44]	; (2a18 <wait_for_bootrom+0x160>)
    29ea:	0011      	movs	r1, r2
    29ec:	0018      	movs	r0, r3
    29ee:	4b0e      	ldr	r3, [pc, #56]	; (2a28 <wait_for_bootrom+0x170>)
    29f0:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    29f2:	2313      	movs	r3, #19
    29f4:	18fb      	adds	r3, r7, r3
    29f6:	781b      	ldrb	r3, [r3, #0]
    29f8:	b25b      	sxtb	r3, r3
}
    29fa:	0018      	movs	r0, r3
    29fc:	46bd      	mov	sp, r7
    29fe:	b008      	add	sp, #32
    2a00:	bd80      	pop	{r7, pc}
    2a02:	46c0      	nop			; (mov r8, r8)
    2a04:	13521352 	.word	0x13521352
    2a08:	00001014 	.word	0x00001014
    2a0c:	00002c41 	.word	0x00002c41
    2a10:	00000335 	.word	0x00000335
    2a14:	000207bc 	.word	0x000207bc
    2a18:	000c000c 	.word	0x000c000c
    2a1c:	10add09e 	.word	0x10add09e
    2a20:	3c1cd57d 	.word	0x3c1cd57d
    2a24:	000207ac 	.word	0x000207ac
    2a28:	00002c85 	.word	0x00002c85
    2a2c:	0000108c 	.word	0x0000108c
    2a30:	00002565 	.word	0x00002565
    2a34:	0000039f 	.word	0x0000039f
    2a38:	00002435 	.word	0x00002435
    2a3c:	0000fce0 	.word	0x0000fce0
    2a40:	0000dfad 	.word	0x0000dfad
    2a44:	0000fcec 	.word	0x0000fcec
    2a48:	0000dfe1 	.word	0x0000dfe1
    2a4c:	ef522f61 	.word	0xef522f61

00002a50 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    2a50:	b580      	push	{r7, lr}
    2a52:	b088      	sub	sp, #32
    2a54:	af00      	add	r7, sp, #0
    2a56:	0002      	movs	r2, r0
    2a58:	1dfb      	adds	r3, r7, #7
    2a5a:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    2a5c:	231f      	movs	r3, #31
    2a5e:	18fb      	adds	r3, r7, r3
    2a60:	2200      	movs	r2, #0
    2a62:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    2a64:	2300      	movs	r3, #0
    2a66:	61bb      	str	r3, [r7, #24]
    2a68:	2300      	movs	r3, #0
    2a6a:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    2a6c:	2301      	movs	r3, #1
    2a6e:	425b      	negs	r3, r3
    2a70:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    2a72:	4b1d      	ldr	r3, [pc, #116]	; (2ae8 <wait_for_firmware_start+0x98>)
    2a74:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    2a76:	4b1d      	ldr	r3, [pc, #116]	; (2aec <wait_for_firmware_start+0x9c>)
    2a78:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    2a7a:	1dfb      	adds	r3, r7, #7
    2a7c:	781b      	ldrb	r3, [r3, #0]
    2a7e:	2b02      	cmp	r3, #2
    2a80:	d003      	beq.n	2a8a <wait_for_firmware_start+0x3a>
    2a82:	1dfb      	adds	r3, r7, #7
    2a84:	781b      	ldrb	r3, [r3, #0]
    2a86:	2b03      	cmp	r3, #3
    2a88:	d119      	bne.n	2abe <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    2a8a:	4b19      	ldr	r3, [pc, #100]	; (2af0 <wait_for_firmware_start+0xa0>)
    2a8c:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    2a8e:	4b19      	ldr	r3, [pc, #100]	; (2af4 <wait_for_firmware_start+0xa4>)
    2a90:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    2a92:	e014      	b.n	2abe <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    2a94:	2002      	movs	r0, #2
    2a96:	4b18      	ldr	r3, [pc, #96]	; (2af8 <wait_for_firmware_start+0xa8>)
    2a98:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    2a9a:	68fb      	ldr	r3, [r7, #12]
    2a9c:	0018      	movs	r0, r3
    2a9e:	4b17      	ldr	r3, [pc, #92]	; (2afc <wait_for_firmware_start+0xac>)
    2aa0:	4798      	blx	r3
    2aa2:	0003      	movs	r3, r0
    2aa4:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    2aa6:	697b      	ldr	r3, [r7, #20]
    2aa8:	3301      	adds	r3, #1
    2aaa:	617b      	str	r3, [r7, #20]
    2aac:	697a      	ldr	r2, [r7, #20]
    2aae:	693b      	ldr	r3, [r7, #16]
    2ab0:	429a      	cmp	r2, r3
    2ab2:	d304      	bcc.n	2abe <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    2ab4:	231f      	movs	r3, #31
    2ab6:	18fb      	adds	r3, r7, r3
    2ab8:	22fb      	movs	r2, #251	; 0xfb
    2aba:	701a      	strb	r2, [r3, #0]
			goto ERR;
    2abc:	e00c      	b.n	2ad8 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
    2abe:	68ba      	ldr	r2, [r7, #8]
    2ac0:	69bb      	ldr	r3, [r7, #24]
    2ac2:	429a      	cmp	r2, r3
    2ac4:	d1e6      	bne.n	2a94 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    2ac6:	68bb      	ldr	r3, [r7, #8]
    2ac8:	4a08      	ldr	r2, [pc, #32]	; (2aec <wait_for_firmware_start+0x9c>)
    2aca:	4293      	cmp	r3, r2
    2acc:	d104      	bne.n	2ad8 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    2ace:	4b06      	ldr	r3, [pc, #24]	; (2ae8 <wait_for_firmware_start+0x98>)
    2ad0:	2100      	movs	r1, #0
    2ad2:	0018      	movs	r0, r3
    2ad4:	4b0a      	ldr	r3, [pc, #40]	; (2b00 <wait_for_firmware_start+0xb0>)
    2ad6:	4798      	blx	r3
	}
ERR:
	return ret;
    2ad8:	231f      	movs	r3, #31
    2ada:	18fb      	adds	r3, r7, r3
    2adc:	781b      	ldrb	r3, [r3, #0]
    2ade:	b25b      	sxtb	r3, r3
}
    2ae0:	0018      	movs	r0, r3
    2ae2:	46bd      	mov	sp, r7
    2ae4:	b008      	add	sp, #32
    2ae6:	bd80      	pop	{r7, pc}
    2ae8:	0000108c 	.word	0x0000108c
    2aec:	02532636 	.word	0x02532636
    2af0:	000207ac 	.word	0x000207ac
    2af4:	d75dc1c3 	.word	0xd75dc1c3
    2af8:	00000335 	.word	0x00000335
    2afc:	00002c41 	.word	0x00002c41
    2b00:	00002c85 	.word	0x00002c85

00002b04 <chip_deinit>:

sint8 chip_deinit(void)
{
    2b04:	b590      	push	{r4, r7, lr}
    2b06:	b083      	sub	sp, #12
    2b08:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    2b0a:	2300      	movs	r3, #0
    2b0c:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2b0e:	1dfc      	adds	r4, r7, #7
    2b10:	003a      	movs	r2, r7
    2b12:	23a0      	movs	r3, #160	; 0xa0
    2b14:	015b      	lsls	r3, r3, #5
    2b16:	0011      	movs	r1, r2
    2b18:	0018      	movs	r0, r3
    2b1a:	4b1f      	ldr	r3, [pc, #124]	; (2b98 <chip_deinit+0x94>)
    2b1c:	4798      	blx	r3
    2b1e:	0003      	movs	r3, r0
    2b20:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    2b22:	1dfb      	adds	r3, r7, #7
    2b24:	781b      	ldrb	r3, [r3, #0]
    2b26:	b25b      	sxtb	r3, r3
    2b28:	2b00      	cmp	r3, #0
    2b2a:	d00d      	beq.n	2b48 <chip_deinit+0x44>
		M2M_ERR("failed to de-initialize\n");
    2b2c:	4a1b      	ldr	r2, [pc, #108]	; (2b9c <chip_deinit+0x98>)
    2b2e:	491c      	ldr	r1, [pc, #112]	; (2ba0 <chip_deinit+0x9c>)
    2b30:	4b1c      	ldr	r3, [pc, #112]	; (2ba4 <chip_deinit+0xa0>)
    2b32:	0018      	movs	r0, r3
    2b34:	4b1c      	ldr	r3, [pc, #112]	; (2ba8 <chip_deinit+0xa4>)
    2b36:	4798      	blx	r3
    2b38:	4b1c      	ldr	r3, [pc, #112]	; (2bac <chip_deinit+0xa8>)
    2b3a:	0018      	movs	r0, r3
    2b3c:	4b1c      	ldr	r3, [pc, #112]	; (2bb0 <chip_deinit+0xac>)
    2b3e:	4798      	blx	r3
    2b40:	200d      	movs	r0, #13
    2b42:	4b1c      	ldr	r3, [pc, #112]	; (2bb4 <chip_deinit+0xb0>)
    2b44:	4798      	blx	r3
		goto ERR1;
    2b46:	e020      	b.n	2b8a <chip_deinit+0x86>
	}
	reg &= ~(1 << 10);
    2b48:	683b      	ldr	r3, [r7, #0]
    2b4a:	4a1b      	ldr	r2, [pc, #108]	; (2bb8 <chip_deinit+0xb4>)
    2b4c:	4013      	ands	r3, r2
    2b4e:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    2b50:	683a      	ldr	r2, [r7, #0]
    2b52:	1dfc      	adds	r4, r7, #7
    2b54:	23a0      	movs	r3, #160	; 0xa0
    2b56:	015b      	lsls	r3, r3, #5
    2b58:	0011      	movs	r1, r2
    2b5a:	0018      	movs	r0, r3
    2b5c:	4b17      	ldr	r3, [pc, #92]	; (2bbc <chip_deinit+0xb8>)
    2b5e:	4798      	blx	r3
    2b60:	0003      	movs	r3, r0
    2b62:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    2b64:	1dfb      	adds	r3, r7, #7
    2b66:	781b      	ldrb	r3, [r3, #0]
    2b68:	b25b      	sxtb	r3, r3
    2b6a:	2b00      	cmp	r3, #0
    2b6c:	d00d      	beq.n	2b8a <chip_deinit+0x86>
		M2M_ERR("failed to de-initialize\n");
    2b6e:	4a14      	ldr	r2, [pc, #80]	; (2bc0 <chip_deinit+0xbc>)
    2b70:	490b      	ldr	r1, [pc, #44]	; (2ba0 <chip_deinit+0x9c>)
    2b72:	4b0c      	ldr	r3, [pc, #48]	; (2ba4 <chip_deinit+0xa0>)
    2b74:	0018      	movs	r0, r3
    2b76:	4b0c      	ldr	r3, [pc, #48]	; (2ba8 <chip_deinit+0xa4>)
    2b78:	4798      	blx	r3
    2b7a:	4b0c      	ldr	r3, [pc, #48]	; (2bac <chip_deinit+0xa8>)
    2b7c:	0018      	movs	r0, r3
    2b7e:	4b0c      	ldr	r3, [pc, #48]	; (2bb0 <chip_deinit+0xac>)
    2b80:	4798      	blx	r3
    2b82:	200d      	movs	r0, #13
    2b84:	4b0b      	ldr	r3, [pc, #44]	; (2bb4 <chip_deinit+0xb0>)
    2b86:	4798      	blx	r3
		goto ERR1;
    2b88:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    2b8a:	1dfb      	adds	r3, r7, #7
    2b8c:	781b      	ldrb	r3, [r3, #0]
    2b8e:	b25b      	sxtb	r3, r3
}
    2b90:	0018      	movs	r0, r3
    2b92:	46bd      	mov	sp, r7
    2b94:	b003      	add	sp, #12
    2b96:	bd90      	pop	{r4, r7, pc}
    2b98:	00002c61 	.word	0x00002c61
    2b9c:	00000205 	.word	0x00000205
    2ba0:	0000fd28 	.word	0x0000fd28
    2ba4:	0000fc98 	.word	0x0000fc98
    2ba8:	0000dfad 	.word	0x0000dfad
    2bac:	0000fd04 	.word	0x0000fd04
    2bb0:	0000e0c9 	.word	0x0000e0c9
    2bb4:	0000dfe1 	.word	0x0000dfe1
    2bb8:	fffffbff 	.word	0xfffffbff
    2bbc:	00002c85 	.word	0x00002c85
    2bc0:	0000020b 	.word	0x0000020b

00002bc4 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    2bc4:	b590      	push	{r4, r7, lr}
    2bc6:	b085      	sub	sp, #20
    2bc8:	af00      	add	r7, sp, #0
    2bca:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    2bcc:	230f      	movs	r3, #15
    2bce:	18fb      	adds	r3, r7, r3
    2bd0:	2200      	movs	r2, #0
    2bd2:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    2bd4:	230f      	movs	r3, #15
    2bd6:	18fc      	adds	r4, r7, r3
    2bd8:	687b      	ldr	r3, [r7, #4]
    2bda:	0018      	movs	r0, r3
    2bdc:	4b05      	ldr	r3, [pc, #20]	; (2bf4 <nm_bus_iface_init+0x30>)
    2bde:	4798      	blx	r3
    2be0:	0003      	movs	r3, r0
    2be2:	7023      	strb	r3, [r4, #0]
	return ret;
    2be4:	230f      	movs	r3, #15
    2be6:	18fb      	adds	r3, r7, r3
    2be8:	781b      	ldrb	r3, [r3, #0]
    2bea:	b25b      	sxtb	r3, r3
}
    2bec:	0018      	movs	r0, r3
    2bee:	46bd      	mov	sp, r7
    2bf0:	b005      	add	sp, #20
    2bf2:	bd90      	pop	{r4, r7, pc}
    2bf4:	000009fd 	.word	0x000009fd

00002bf8 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    2bf8:	b590      	push	{r4, r7, lr}
    2bfa:	b083      	sub	sp, #12
    2bfc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    2bfe:	1dfb      	adds	r3, r7, #7
    2c00:	2200      	movs	r2, #0
    2c02:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    2c04:	1dfc      	adds	r4, r7, #7
    2c06:	4b05      	ldr	r3, [pc, #20]	; (2c1c <nm_bus_iface_deinit+0x24>)
    2c08:	4798      	blx	r3
    2c0a:	0003      	movs	r3, r0
    2c0c:	7023      	strb	r3, [r4, #0]

	return ret;
    2c0e:	1dfb      	adds	r3, r7, #7
    2c10:	781b      	ldrb	r3, [r3, #0]
    2c12:	b25b      	sxtb	r3, r3
}
    2c14:	0018      	movs	r0, r3
    2c16:	46bd      	mov	sp, r7
    2c18:	b003      	add	sp, #12
    2c1a:	bd90      	pop	{r4, r7, pc}
    2c1c:	00000b79 	.word	0x00000b79

00002c20 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    2c20:	b580      	push	{r7, lr}
    2c22:	b082      	sub	sp, #8
    2c24:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    2c26:	1dfb      	adds	r3, r7, #7
    2c28:	2200      	movs	r2, #0
    2c2a:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    2c2c:	4b03      	ldr	r3, [pc, #12]	; (2c3c <nm_bus_reset+0x1c>)
    2c2e:	4798      	blx	r3
    2c30:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    2c32:	0018      	movs	r0, r3
    2c34:	46bd      	mov	sp, r7
    2c36:	b002      	add	sp, #8
    2c38:	bd80      	pop	{r7, pc}
    2c3a:	46c0      	nop			; (mov r8, r8)
    2c3c:	00004509 	.word	0x00004509

00002c40 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    2c40:	b580      	push	{r7, lr}
    2c42:	b082      	sub	sp, #8
    2c44:	af00      	add	r7, sp, #0
    2c46:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    2c48:	687b      	ldr	r3, [r7, #4]
    2c4a:	0018      	movs	r0, r3
    2c4c:	4b03      	ldr	r3, [pc, #12]	; (2c5c <nm_read_reg+0x1c>)
    2c4e:	4798      	blx	r3
    2c50:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    2c52:	0018      	movs	r0, r3
    2c54:	46bd      	mov	sp, r7
    2c56:	b002      	add	sp, #8
    2c58:	bd80      	pop	{r7, pc}
    2c5a:	46c0      	nop			; (mov r8, r8)
    2c5c:	0000469d 	.word	0x0000469d

00002c60 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2c60:	b580      	push	{r7, lr}
    2c62:	b082      	sub	sp, #8
    2c64:	af00      	add	r7, sp, #0
    2c66:	6078      	str	r0, [r7, #4]
    2c68:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    2c6a:	683a      	ldr	r2, [r7, #0]
    2c6c:	687b      	ldr	r3, [r7, #4]
    2c6e:	0011      	movs	r1, r2
    2c70:	0018      	movs	r0, r3
    2c72:	4b03      	ldr	r3, [pc, #12]	; (2c80 <nm_read_reg_with_ret+0x20>)
    2c74:	4798      	blx	r3
    2c76:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    2c78:	0018      	movs	r0, r3
    2c7a:	46bd      	mov	sp, r7
    2c7c:	b002      	add	sp, #8
    2c7e:	bd80      	pop	{r7, pc}
    2c80:	000046c1 	.word	0x000046c1

00002c84 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2c84:	b580      	push	{r7, lr}
    2c86:	b082      	sub	sp, #8
    2c88:	af00      	add	r7, sp, #0
    2c8a:	6078      	str	r0, [r7, #4]
    2c8c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    2c8e:	683a      	ldr	r2, [r7, #0]
    2c90:	687b      	ldr	r3, [r7, #4]
    2c92:	0011      	movs	r1, r2
    2c94:	0018      	movs	r0, r3
    2c96:	4b03      	ldr	r3, [pc, #12]	; (2ca4 <nm_write_reg+0x20>)
    2c98:	4798      	blx	r3
    2c9a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    2c9c:	0018      	movs	r0, r3
    2c9e:	46bd      	mov	sp, r7
    2ca0:	b002      	add	sp, #8
    2ca2:	bd80      	pop	{r7, pc}
    2ca4:	00004711 	.word	0x00004711

00002ca8 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2ca8:	b580      	push	{r7, lr}
    2caa:	b084      	sub	sp, #16
    2cac:	af00      	add	r7, sp, #0
    2cae:	60f8      	str	r0, [r7, #12]
    2cb0:	60b9      	str	r1, [r7, #8]
    2cb2:	1dbb      	adds	r3, r7, #6
    2cb4:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2cb6:	1dbb      	adds	r3, r7, #6
    2cb8:	881a      	ldrh	r2, [r3, #0]
    2cba:	68b9      	ldr	r1, [r7, #8]
    2cbc:	68fb      	ldr	r3, [r7, #12]
    2cbe:	0018      	movs	r0, r3
    2cc0:	4b03      	ldr	r3, [pc, #12]	; (2cd0 <p_nm_read_block+0x28>)
    2cc2:	4798      	blx	r3
    2cc4:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    2cc6:	0018      	movs	r0, r3
    2cc8:	46bd      	mov	sp, r7
    2cca:	b004      	add	sp, #16
    2ccc:	bd80      	pop	{r7, pc}
    2cce:	46c0      	nop			; (mov r8, r8)
    2cd0:	00004761 	.word	0x00004761

00002cd4 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2cd4:	b580      	push	{r7, lr}
    2cd6:	b086      	sub	sp, #24
    2cd8:	af00      	add	r7, sp, #0
    2cda:	60f8      	str	r0, [r7, #12]
    2cdc:	60b9      	str	r1, [r7, #8]
    2cde:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2ce0:	4b2d      	ldr	r3, [pc, #180]	; (2d98 <nm_read_block+0xc4>)
    2ce2:	881a      	ldrh	r2, [r3, #0]
    2ce4:	2310      	movs	r3, #16
    2ce6:	18fb      	adds	r3, r7, r3
    2ce8:	3a08      	subs	r2, #8
    2cea:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    2cec:	2300      	movs	r3, #0
    2cee:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    2cf0:	2313      	movs	r3, #19
    2cf2:	18fb      	adds	r3, r7, r3
    2cf4:	2200      	movs	r2, #0
    2cf6:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2cf8:	2310      	movs	r3, #16
    2cfa:	18fb      	adds	r3, r7, r3
    2cfc:	881a      	ldrh	r2, [r3, #0]
    2cfe:	687b      	ldr	r3, [r7, #4]
    2d00:	429a      	cmp	r2, r3
    2d02:	d313      	bcc.n	2d2c <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2d04:	68ba      	ldr	r2, [r7, #8]
    2d06:	697b      	ldr	r3, [r7, #20]
    2d08:	18d1      	adds	r1, r2, r3
    2d0a:	687b      	ldr	r3, [r7, #4]
    2d0c:	b29a      	uxth	r2, r3
    2d0e:	68fb      	ldr	r3, [r7, #12]
    2d10:	0018      	movs	r0, r3
    2d12:	4b22      	ldr	r3, [pc, #136]	; (2d9c <nm_read_block+0xc8>)
    2d14:	4798      	blx	r3
    2d16:	0003      	movs	r3, r0
    2d18:	b2da      	uxtb	r2, r3
    2d1a:	2313      	movs	r3, #19
    2d1c:	18fb      	adds	r3, r7, r3
    2d1e:	781b      	ldrb	r3, [r3, #0]
    2d20:	18d3      	adds	r3, r2, r3
    2d22:	b2da      	uxtb	r2, r3
    2d24:	2313      	movs	r3, #19
    2d26:	18fb      	adds	r3, r7, r3
    2d28:	701a      	strb	r2, [r3, #0]
			break;
    2d2a:	e02d      	b.n	2d88 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    2d2c:	68ba      	ldr	r2, [r7, #8]
    2d2e:	697b      	ldr	r3, [r7, #20]
    2d30:	18d1      	adds	r1, r2, r3
    2d32:	2310      	movs	r3, #16
    2d34:	18fb      	adds	r3, r7, r3
    2d36:	881a      	ldrh	r2, [r3, #0]
    2d38:	68fb      	ldr	r3, [r7, #12]
    2d3a:	0018      	movs	r0, r3
    2d3c:	4b17      	ldr	r3, [pc, #92]	; (2d9c <nm_read_block+0xc8>)
    2d3e:	4798      	blx	r3
    2d40:	0003      	movs	r3, r0
    2d42:	b2da      	uxtb	r2, r3
    2d44:	2313      	movs	r3, #19
    2d46:	18fb      	adds	r3, r7, r3
    2d48:	781b      	ldrb	r3, [r3, #0]
    2d4a:	18d3      	adds	r3, r2, r3
    2d4c:	b2da      	uxtb	r2, r3
    2d4e:	2313      	movs	r3, #19
    2d50:	18fb      	adds	r3, r7, r3
    2d52:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    2d54:	2313      	movs	r3, #19
    2d56:	18fb      	adds	r3, r7, r3
    2d58:	781b      	ldrb	r3, [r3, #0]
    2d5a:	b25b      	sxtb	r3, r3
    2d5c:	2b00      	cmp	r3, #0
    2d5e:	d112      	bne.n	2d86 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    2d60:	2310      	movs	r3, #16
    2d62:	18fb      	adds	r3, r7, r3
    2d64:	881b      	ldrh	r3, [r3, #0]
    2d66:	687a      	ldr	r2, [r7, #4]
    2d68:	1ad3      	subs	r3, r2, r3
    2d6a:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    2d6c:	2310      	movs	r3, #16
    2d6e:	18fb      	adds	r3, r7, r3
    2d70:	881b      	ldrh	r3, [r3, #0]
    2d72:	697a      	ldr	r2, [r7, #20]
    2d74:	18d3      	adds	r3, r2, r3
    2d76:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    2d78:	2310      	movs	r3, #16
    2d7a:	18fb      	adds	r3, r7, r3
    2d7c:	881b      	ldrh	r3, [r3, #0]
    2d7e:	68fa      	ldr	r2, [r7, #12]
    2d80:	18d3      	adds	r3, r2, r3
    2d82:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    2d84:	e7b8      	b.n	2cf8 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    2d86:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    2d88:	2313      	movs	r3, #19
    2d8a:	18fb      	adds	r3, r7, r3
    2d8c:	781b      	ldrb	r3, [r3, #0]
    2d8e:	b25b      	sxtb	r3, r3
}
    2d90:	0018      	movs	r0, r3
    2d92:	46bd      	mov	sp, r7
    2d94:	b006      	add	sp, #24
    2d96:	bd80      	pop	{r7, pc}
    2d98:	20000000 	.word	0x20000000
    2d9c:	00002ca9 	.word	0x00002ca9

00002da0 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2da0:	b580      	push	{r7, lr}
    2da2:	b084      	sub	sp, #16
    2da4:	af00      	add	r7, sp, #0
    2da6:	60f8      	str	r0, [r7, #12]
    2da8:	60b9      	str	r1, [r7, #8]
    2daa:	1dbb      	adds	r3, r7, #6
    2dac:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2dae:	1dbb      	adds	r3, r7, #6
    2db0:	881a      	ldrh	r2, [r3, #0]
    2db2:	68b9      	ldr	r1, [r7, #8]
    2db4:	68fb      	ldr	r3, [r7, #12]
    2db6:	0018      	movs	r0, r3
    2db8:	4b03      	ldr	r3, [pc, #12]	; (2dc8 <p_nm_write_block+0x28>)
    2dba:	4798      	blx	r3
    2dbc:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    2dbe:	0018      	movs	r0, r3
    2dc0:	46bd      	mov	sp, r7
    2dc2:	b004      	add	sp, #16
    2dc4:	bd80      	pop	{r7, pc}
    2dc6:	46c0      	nop			; (mov r8, r8)
    2dc8:	000047b9 	.word	0x000047b9

00002dcc <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2dcc:	b580      	push	{r7, lr}
    2dce:	b086      	sub	sp, #24
    2dd0:	af00      	add	r7, sp, #0
    2dd2:	60f8      	str	r0, [r7, #12]
    2dd4:	60b9      	str	r1, [r7, #8]
    2dd6:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2dd8:	4b2d      	ldr	r3, [pc, #180]	; (2e90 <nm_write_block+0xc4>)
    2dda:	881a      	ldrh	r2, [r3, #0]
    2ddc:	2310      	movs	r3, #16
    2dde:	18fb      	adds	r3, r7, r3
    2de0:	3a08      	subs	r2, #8
    2de2:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    2de4:	2300      	movs	r3, #0
    2de6:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    2de8:	2313      	movs	r3, #19
    2dea:	18fb      	adds	r3, r7, r3
    2dec:	2200      	movs	r2, #0
    2dee:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2df0:	2310      	movs	r3, #16
    2df2:	18fb      	adds	r3, r7, r3
    2df4:	881a      	ldrh	r2, [r3, #0]
    2df6:	687b      	ldr	r3, [r7, #4]
    2df8:	429a      	cmp	r2, r3
    2dfa:	d313      	bcc.n	2e24 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2dfc:	68ba      	ldr	r2, [r7, #8]
    2dfe:	697b      	ldr	r3, [r7, #20]
    2e00:	18d1      	adds	r1, r2, r3
    2e02:	687b      	ldr	r3, [r7, #4]
    2e04:	b29a      	uxth	r2, r3
    2e06:	68fb      	ldr	r3, [r7, #12]
    2e08:	0018      	movs	r0, r3
    2e0a:	4b22      	ldr	r3, [pc, #136]	; (2e94 <nm_write_block+0xc8>)
    2e0c:	4798      	blx	r3
    2e0e:	0003      	movs	r3, r0
    2e10:	b2da      	uxtb	r2, r3
    2e12:	2313      	movs	r3, #19
    2e14:	18fb      	adds	r3, r7, r3
    2e16:	781b      	ldrb	r3, [r3, #0]
    2e18:	18d3      	adds	r3, r2, r3
    2e1a:	b2da      	uxtb	r2, r3
    2e1c:	2313      	movs	r3, #19
    2e1e:	18fb      	adds	r3, r7, r3
    2e20:	701a      	strb	r2, [r3, #0]
			break;
    2e22:	e02d      	b.n	2e80 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    2e24:	68ba      	ldr	r2, [r7, #8]
    2e26:	697b      	ldr	r3, [r7, #20]
    2e28:	18d1      	adds	r1, r2, r3
    2e2a:	2310      	movs	r3, #16
    2e2c:	18fb      	adds	r3, r7, r3
    2e2e:	881a      	ldrh	r2, [r3, #0]
    2e30:	68fb      	ldr	r3, [r7, #12]
    2e32:	0018      	movs	r0, r3
    2e34:	4b17      	ldr	r3, [pc, #92]	; (2e94 <nm_write_block+0xc8>)
    2e36:	4798      	blx	r3
    2e38:	0003      	movs	r3, r0
    2e3a:	b2da      	uxtb	r2, r3
    2e3c:	2313      	movs	r3, #19
    2e3e:	18fb      	adds	r3, r7, r3
    2e40:	781b      	ldrb	r3, [r3, #0]
    2e42:	18d3      	adds	r3, r2, r3
    2e44:	b2da      	uxtb	r2, r3
    2e46:	2313      	movs	r3, #19
    2e48:	18fb      	adds	r3, r7, r3
    2e4a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    2e4c:	2313      	movs	r3, #19
    2e4e:	18fb      	adds	r3, r7, r3
    2e50:	781b      	ldrb	r3, [r3, #0]
    2e52:	b25b      	sxtb	r3, r3
    2e54:	2b00      	cmp	r3, #0
    2e56:	d112      	bne.n	2e7e <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    2e58:	2310      	movs	r3, #16
    2e5a:	18fb      	adds	r3, r7, r3
    2e5c:	881b      	ldrh	r3, [r3, #0]
    2e5e:	687a      	ldr	r2, [r7, #4]
    2e60:	1ad3      	subs	r3, r2, r3
    2e62:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    2e64:	2310      	movs	r3, #16
    2e66:	18fb      	adds	r3, r7, r3
    2e68:	881b      	ldrh	r3, [r3, #0]
    2e6a:	697a      	ldr	r2, [r7, #20]
    2e6c:	18d3      	adds	r3, r2, r3
    2e6e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    2e70:	2310      	movs	r3, #16
    2e72:	18fb      	adds	r3, r7, r3
    2e74:	881b      	ldrh	r3, [r3, #0]
    2e76:	68fa      	ldr	r2, [r7, #12]
    2e78:	18d3      	adds	r3, r2, r3
    2e7a:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    2e7c:	e7b8      	b.n	2df0 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    2e7e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    2e80:	2313      	movs	r3, #19
    2e82:	18fb      	adds	r3, r7, r3
    2e84:	781b      	ldrb	r3, [r3, #0]
    2e86:	b25b      	sxtb	r3, r3
}
    2e88:	0018      	movs	r0, r3
    2e8a:	46bd      	mov	sp, r7
    2e8c:	b006      	add	sp, #24
    2e8e:	bd80      	pop	{r7, pc}
    2e90:	20000000 	.word	0x20000000
    2e94:	00002da1 	.word	0x00002da1

00002e98 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    2e98:	b590      	push	{r4, r7, lr}
    2e9a:	b089      	sub	sp, #36	; 0x24
    2e9c:	af00      	add	r7, sp, #0
    2e9e:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    2ea0:	2300      	movs	r3, #0
    2ea2:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
    2ea4:	231f      	movs	r3, #31
    2ea6:	18fb      	adds	r3, r7, r3
    2ea8:	2200      	movs	r2, #0
    2eaa:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
    2eac:	230c      	movs	r3, #12
    2eae:	18fb      	adds	r3, r7, r3
    2eb0:	0018      	movs	r0, r3
    2eb2:	2308      	movs	r3, #8
    2eb4:	001a      	movs	r2, r3
    2eb6:	2100      	movs	r1, #0
    2eb8:	4b64      	ldr	r3, [pc, #400]	; (304c <nm_get_firmware_full_info+0x1b4>)
    2eba:	4798      	blx	r3
	if (pstrRev != NULL)
    2ebc:	687b      	ldr	r3, [r7, #4]
    2ebe:	2b00      	cmp	r3, #0
    2ec0:	d100      	bne.n	2ec4 <nm_get_firmware_full_info+0x2c>
    2ec2:	e0ba      	b.n	303a <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    2ec4:	687b      	ldr	r3, [r7, #4]
    2ec6:	2228      	movs	r2, #40	; 0x28
    2ec8:	2100      	movs	r1, #0
    2eca:	0018      	movs	r0, r3
    2ecc:	4b60      	ldr	r3, [pc, #384]	; (3050 <nm_get_firmware_full_info+0x1b8>)
    2ece:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    2ed0:	231f      	movs	r3, #31
    2ed2:	18fc      	adds	r4, r7, r3
    2ed4:	2314      	movs	r3, #20
    2ed6:	18fb      	adds	r3, r7, r3
    2ed8:	4a5e      	ldr	r2, [pc, #376]	; (3054 <nm_get_firmware_full_info+0x1bc>)
    2eda:	0019      	movs	r1, r3
    2edc:	0010      	movs	r0, r2
    2ede:	4b5e      	ldr	r3, [pc, #376]	; (3058 <nm_get_firmware_full_info+0x1c0>)
    2ee0:	4798      	blx	r3
    2ee2:	0003      	movs	r3, r0
    2ee4:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    2ee6:	231f      	movs	r3, #31
    2ee8:	18fb      	adds	r3, r7, r3
    2eea:	781b      	ldrb	r3, [r3, #0]
    2eec:	b25b      	sxtb	r3, r3
    2eee:	2b00      	cmp	r3, #0
    2ef0:	d000      	beq.n	2ef4 <nm_get_firmware_full_info+0x5c>
    2ef2:	e0a2      	b.n	303a <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
    2ef4:	697b      	ldr	r3, [r7, #20]
    2ef6:	2b00      	cmp	r3, #0
    2ef8:	d100      	bne.n	2efc <nm_get_firmware_full_info+0x64>
    2efa:	e09a      	b.n	3032 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    2efc:	697b      	ldr	r3, [r7, #20]
    2efe:	22c0      	movs	r2, #192	; 0xc0
    2f00:	0292      	lsls	r2, r2, #10
    2f02:	4313      	orrs	r3, r2
    2f04:	221f      	movs	r2, #31
    2f06:	18bc      	adds	r4, r7, r2
    2f08:	220c      	movs	r2, #12
    2f0a:	18b9      	adds	r1, r7, r2
    2f0c:	2208      	movs	r2, #8
    2f0e:	0018      	movs	r0, r3
    2f10:	4b52      	ldr	r3, [pc, #328]	; (305c <nm_get_firmware_full_info+0x1c4>)
    2f12:	4798      	blx	r3
    2f14:	0003      	movs	r3, r0
    2f16:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
    2f18:	231f      	movs	r3, #31
    2f1a:	18fb      	adds	r3, r7, r3
    2f1c:	781b      	ldrb	r3, [r3, #0]
    2f1e:	b25b      	sxtb	r3, r3
    2f20:	2b00      	cmp	r3, #0
    2f22:	d000      	beq.n	2f26 <nm_get_firmware_full_info+0x8e>
    2f24:	e089      	b.n	303a <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
    2f26:	230c      	movs	r3, #12
    2f28:	18fb      	adds	r3, r7, r3
    2f2a:	685b      	ldr	r3, [r3, #4]
    2f2c:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
    2f2e:	697b      	ldr	r3, [r7, #20]
    2f30:	041b      	lsls	r3, r3, #16
    2f32:	0c1b      	lsrs	r3, r3, #16
    2f34:	617b      	str	r3, [r7, #20]
					if(reg != 0)
    2f36:	697b      	ldr	r3, [r7, #20]
    2f38:	2b00      	cmp	r3, #0
    2f3a:	d100      	bne.n	2f3e <nm_get_firmware_full_info+0xa6>
    2f3c:	e074      	b.n	3028 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    2f3e:	697b      	ldr	r3, [r7, #20]
    2f40:	22c0      	movs	r2, #192	; 0xc0
    2f42:	0292      	lsls	r2, r2, #10
    2f44:	4313      	orrs	r3, r2
    2f46:	221f      	movs	r2, #31
    2f48:	18bc      	adds	r4, r7, r2
    2f4a:	6879      	ldr	r1, [r7, #4]
    2f4c:	2228      	movs	r2, #40	; 0x28
    2f4e:	0018      	movs	r0, r3
    2f50:	4b42      	ldr	r3, [pc, #264]	; (305c <nm_get_firmware_full_info+0x1c4>)
    2f52:	4798      	blx	r3
    2f54:	0003      	movs	r3, r0
    2f56:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
    2f58:	231f      	movs	r3, #31
    2f5a:	18fb      	adds	r3, r7, r3
    2f5c:	781b      	ldrb	r3, [r3, #0]
    2f5e:	b25b      	sxtb	r3, r3
    2f60:	2b00      	cmp	r3, #0
    2f62:	d16a      	bne.n	303a <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    2f64:	687b      	ldr	r3, [r7, #4]
    2f66:	791b      	ldrb	r3, [r3, #4]
    2f68:	021b      	lsls	r3, r3, #8
    2f6a:	b21a      	sxth	r2, r3
    2f6c:	687b      	ldr	r3, [r7, #4]
    2f6e:	795b      	ldrb	r3, [r3, #5]
    2f70:	011b      	lsls	r3, r3, #4
    2f72:	b21b      	sxth	r3, r3
    2f74:	21ff      	movs	r1, #255	; 0xff
    2f76:	400b      	ands	r3, r1
    2f78:	b21b      	sxth	r3, r3
    2f7a:	4313      	orrs	r3, r2
    2f7c:	b21a      	sxth	r2, r3
    2f7e:	687b      	ldr	r3, [r7, #4]
    2f80:	799b      	ldrb	r3, [r3, #6]
    2f82:	b21b      	sxth	r3, r3
    2f84:	210f      	movs	r1, #15
    2f86:	400b      	ands	r3, r1
    2f88:	b21b      	sxth	r3, r3
    2f8a:	4313      	orrs	r3, r2
    2f8c:	b21a      	sxth	r2, r3
    2f8e:	231c      	movs	r3, #28
    2f90:	18fb      	adds	r3, r7, r3
    2f92:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    2f94:	231a      	movs	r3, #26
    2f96:	18fb      	adds	r3, r7, r3
    2f98:	4a31      	ldr	r2, [pc, #196]	; (3060 <nm_get_firmware_full_info+0x1c8>)
    2f9a:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    2f9c:	687b      	ldr	r3, [r7, #4]
    2f9e:	79db      	ldrb	r3, [r3, #7]
    2fa0:	021b      	lsls	r3, r3, #8
    2fa2:	b21a      	sxth	r2, r3
    2fa4:	687b      	ldr	r3, [r7, #4]
    2fa6:	7a1b      	ldrb	r3, [r3, #8]
    2fa8:	011b      	lsls	r3, r3, #4
    2faa:	b21b      	sxth	r3, r3
    2fac:	21ff      	movs	r1, #255	; 0xff
    2fae:	400b      	ands	r3, r1
    2fb0:	b21b      	sxth	r3, r3
    2fb2:	4313      	orrs	r3, r2
    2fb4:	b21a      	sxth	r2, r3
    2fb6:	687b      	ldr	r3, [r7, #4]
    2fb8:	7a5b      	ldrb	r3, [r3, #9]
    2fba:	b21b      	sxth	r3, r3
    2fbc:	210f      	movs	r1, #15
    2fbe:	400b      	ands	r3, r1
    2fc0:	b21b      	sxth	r3, r3
    2fc2:	4313      	orrs	r3, r2
    2fc4:	b21a      	sxth	r2, r3
    2fc6:	2318      	movs	r3, #24
    2fc8:	18fb      	adds	r3, r7, r3
    2fca:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    2fcc:	231c      	movs	r3, #28
    2fce:	18fb      	adds	r3, r7, r3
    2fd0:	881b      	ldrh	r3, [r3, #0]
    2fd2:	2b00      	cmp	r3, #0
    2fd4:	d009      	beq.n	2fea <nm_get_firmware_full_info+0x152>
    2fd6:	2318      	movs	r3, #24
    2fd8:	18fb      	adds	r3, r7, r3
    2fda:	881b      	ldrh	r3, [r3, #0]
    2fdc:	2b00      	cmp	r3, #0
    2fde:	d004      	beq.n	2fea <nm_get_firmware_full_info+0x152>
    2fe0:	2318      	movs	r3, #24
    2fe2:	18fb      	adds	r3, r7, r3
    2fe4:	881b      	ldrh	r3, [r3, #0]
    2fe6:	2b00      	cmp	r3, #0
    2fe8:	d104      	bne.n	2ff4 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
    2fea:	231f      	movs	r3, #31
    2fec:	18fb      	adds	r3, r7, r3
    2fee:	22f4      	movs	r2, #244	; 0xf4
    2ff0:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    2ff2:	e022      	b.n	303a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    2ff4:	231a      	movs	r3, #26
    2ff6:	18fa      	adds	r2, r7, r3
    2ff8:	2318      	movs	r3, #24
    2ffa:	18fb      	adds	r3, r7, r3
    2ffc:	8812      	ldrh	r2, [r2, #0]
    2ffe:	881b      	ldrh	r3, [r3, #0]
    3000:	429a      	cmp	r2, r3
    3002:	d204      	bcs.n	300e <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
    3004:	231f      	movs	r3, #31
    3006:	18fb      	adds	r3, r7, r3
    3008:	22f3      	movs	r2, #243	; 0xf3
    300a:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    300c:	e015      	b.n	303a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
    300e:	231a      	movs	r3, #26
    3010:	18fa      	adds	r2, r7, r3
    3012:	231c      	movs	r3, #28
    3014:	18fb      	adds	r3, r7, r3
    3016:	8812      	ldrh	r2, [r2, #0]
    3018:	881b      	ldrh	r3, [r3, #0]
    301a:	429a      	cmp	r2, r3
    301c:	d90d      	bls.n	303a <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    301e:	231f      	movs	r3, #31
    3020:	18fb      	adds	r3, r7, r3
    3022:	22f3      	movs	r2, #243	; 0xf3
    3024:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    3026:	e008      	b.n	303a <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
    3028:	231f      	movs	r3, #31
    302a:	18fb      	adds	r3, r7, r3
    302c:	22f4      	movs	r2, #244	; 0xf4
    302e:	701a      	strb	r2, [r3, #0]
    3030:	e003      	b.n	303a <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
    3032:	231f      	movs	r3, #31
    3034:	18fb      	adds	r3, r7, r3
    3036:	22f4      	movs	r2, #244	; 0xf4
    3038:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
    303a:	231f      	movs	r3, #31
    303c:	18fb      	adds	r3, r7, r3
    303e:	781b      	ldrb	r3, [r3, #0]
    3040:	b25b      	sxtb	r3, r3
}
    3042:	0018      	movs	r0, r3
    3044:	46bd      	mov	sp, r7
    3046:	b009      	add	sp, #36	; 0x24
    3048:	bd90      	pop	{r4, r7, pc}
    304a:	46c0      	nop			; (mov r8, r8)
    304c:	0000de4b 	.word	0x0000de4b
    3050:	00000c25 	.word	0x00000c25
    3054:	000c0008 	.word	0x000c0008
    3058:	00002c61 	.word	0x00002c61
    305c:	00002cd5 	.word	0x00002cd5
    3060:	00001352 	.word	0x00001352

00003064 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    3064:	b590      	push	{r4, r7, lr}
    3066:	b085      	sub	sp, #20
    3068:	af00      	add	r7, sp, #0
    306a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    306c:	230f      	movs	r3, #15
    306e:	18fb      	adds	r3, r7, r3
    3070:	2200      	movs	r2, #0
    3072:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    3074:	687b      	ldr	r3, [r7, #4]
    3076:	2b00      	cmp	r3, #0
    3078:	d013      	beq.n	30a2 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    307a:	230e      	movs	r3, #14
    307c:	18fb      	adds	r3, r7, r3
    307e:	687a      	ldr	r2, [r7, #4]
    3080:	7812      	ldrb	r2, [r2, #0]
    3082:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    3084:	230e      	movs	r3, #14
    3086:	18fb      	adds	r3, r7, r3
    3088:	781b      	ldrb	r3, [r3, #0]
    308a:	2b00      	cmp	r3, #0
    308c:	d004      	beq.n	3098 <nm_drv_init+0x34>
    308e:	230e      	movs	r3, #14
    3090:	18fb      	adds	r3, r7, r3
    3092:	781b      	ldrb	r3, [r3, #0]
    3094:	2b04      	cmp	r3, #4
    3096:	d908      	bls.n	30aa <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    3098:	230e      	movs	r3, #14
    309a:	18fb      	adds	r3, r7, r3
    309c:	2201      	movs	r2, #1
    309e:	701a      	strb	r2, [r3, #0]
    30a0:	e003      	b.n	30aa <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    30a2:	230e      	movs	r3, #14
    30a4:	18fb      	adds	r3, r7, r3
    30a6:	2201      	movs	r2, #1
    30a8:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    30aa:	230f      	movs	r3, #15
    30ac:	18fc      	adds	r4, r7, r3
    30ae:	2000      	movs	r0, #0
    30b0:	4b41      	ldr	r3, [pc, #260]	; (31b8 <nm_drv_init+0x154>)
    30b2:	4798      	blx	r3
    30b4:	0003      	movs	r3, r0
    30b6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    30b8:	230f      	movs	r3, #15
    30ba:	18fb      	adds	r3, r7, r3
    30bc:	781b      	ldrb	r3, [r3, #0]
    30be:	b25b      	sxtb	r3, r3
    30c0:	2b00      	cmp	r3, #0
    30c2:	d00f      	beq.n	30e4 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
    30c4:	2328      	movs	r3, #40	; 0x28
    30c6:	33ff      	adds	r3, #255	; 0xff
    30c8:	001a      	movs	r2, r3
    30ca:	493c      	ldr	r1, [pc, #240]	; (31bc <nm_drv_init+0x158>)
    30cc:	4b3c      	ldr	r3, [pc, #240]	; (31c0 <nm_drv_init+0x15c>)
    30ce:	0018      	movs	r0, r3
    30d0:	4b3c      	ldr	r3, [pc, #240]	; (31c4 <nm_drv_init+0x160>)
    30d2:	4798      	blx	r3
    30d4:	4b3c      	ldr	r3, [pc, #240]	; (31c8 <nm_drv_init+0x164>)
    30d6:	0018      	movs	r0, r3
    30d8:	4b3c      	ldr	r3, [pc, #240]	; (31cc <nm_drv_init+0x168>)
    30da:	4798      	blx	r3
    30dc:	200d      	movs	r0, #13
    30de:	4b3c      	ldr	r3, [pc, #240]	; (31d0 <nm_drv_init+0x16c>)
    30e0:	4798      	blx	r3
		goto ERR1;
    30e2:	e060      	b.n	31a6 <nm_drv_init+0x142>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    30e4:	4b3b      	ldr	r3, [pc, #236]	; (31d4 <nm_drv_init+0x170>)
    30e6:	0018      	movs	r0, r3
    30e8:	4b36      	ldr	r3, [pc, #216]	; (31c4 <nm_drv_init+0x160>)
    30ea:	4798      	blx	r3
    30ec:	4b3a      	ldr	r3, [pc, #232]	; (31d8 <nm_drv_init+0x174>)
    30ee:	4798      	blx	r3
    30f0:	0002      	movs	r2, r0
    30f2:	4b3a      	ldr	r3, [pc, #232]	; (31dc <nm_drv_init+0x178>)
    30f4:	0011      	movs	r1, r2
    30f6:	0018      	movs	r0, r3
    30f8:	4b32      	ldr	r3, [pc, #200]	; (31c4 <nm_drv_init+0x160>)
    30fa:	4798      	blx	r3
    30fc:	200d      	movs	r0, #13
    30fe:	4b34      	ldr	r3, [pc, #208]	; (31d0 <nm_drv_init+0x16c>)
    3100:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    3102:	4b37      	ldr	r3, [pc, #220]	; (31e0 <nm_drv_init+0x17c>)
    3104:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    3106:	230f      	movs	r3, #15
    3108:	18fc      	adds	r4, r7, r3
    310a:	230e      	movs	r3, #14
    310c:	18fb      	adds	r3, r7, r3
    310e:	781b      	ldrb	r3, [r3, #0]
    3110:	0018      	movs	r0, r3
    3112:	4b34      	ldr	r3, [pc, #208]	; (31e4 <nm_drv_init+0x180>)
    3114:	4798      	blx	r3
    3116:	0003      	movs	r3, r0
    3118:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    311a:	230f      	movs	r3, #15
    311c:	18fb      	adds	r3, r7, r3
    311e:	781b      	ldrb	r3, [r3, #0]
    3120:	b25b      	sxtb	r3, r3
    3122:	2b00      	cmp	r3, #0
    3124:	d13a      	bne.n	319c <nm_drv_init+0x138>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    3126:	230f      	movs	r3, #15
    3128:	18fc      	adds	r4, r7, r3
    312a:	230e      	movs	r3, #14
    312c:	18fb      	adds	r3, r7, r3
    312e:	781b      	ldrb	r3, [r3, #0]
    3130:	0018      	movs	r0, r3
    3132:	4b2d      	ldr	r3, [pc, #180]	; (31e8 <nm_drv_init+0x184>)
    3134:	4798      	blx	r3
    3136:	0003      	movs	r3, r0
    3138:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    313a:	230f      	movs	r3, #15
    313c:	18fb      	adds	r3, r7, r3
    313e:	781b      	ldrb	r3, [r3, #0]
    3140:	b25b      	sxtb	r3, r3
    3142:	2b00      	cmp	r3, #0
    3144:	d12c      	bne.n	31a0 <nm_drv_init+0x13c>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    3146:	230e      	movs	r3, #14
    3148:	18fb      	adds	r3, r7, r3
    314a:	781b      	ldrb	r3, [r3, #0]
    314c:	2b02      	cmp	r3, #2
    314e:	d02a      	beq.n	31a6 <nm_drv_init+0x142>
    3150:	230e      	movs	r3, #14
    3152:	18fb      	adds	r3, r7, r3
    3154:	781b      	ldrb	r3, [r3, #0]
    3156:	2b03      	cmp	r3, #3
    3158:	d025      	beq.n	31a6 <nm_drv_init+0x142>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    315a:	230f      	movs	r3, #15
    315c:	18fc      	adds	r4, r7, r3
    315e:	4b23      	ldr	r3, [pc, #140]	; (31ec <nm_drv_init+0x188>)
    3160:	4798      	blx	r3
    3162:	0003      	movs	r3, r0
    3164:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3166:	230f      	movs	r3, #15
    3168:	18fb      	adds	r3, r7, r3
    316a:	781b      	ldrb	r3, [r3, #0]
    316c:	b25b      	sxtb	r3, r3
    316e:	2b00      	cmp	r3, #0
    3170:	d00f      	beq.n	3192 <nm_drv_init+0x12e>
		M2M_ERR("failed to enable interrupts..\n");
    3172:	2356      	movs	r3, #86	; 0x56
    3174:	33ff      	adds	r3, #255	; 0xff
    3176:	001a      	movs	r2, r3
    3178:	4910      	ldr	r1, [pc, #64]	; (31bc <nm_drv_init+0x158>)
    317a:	4b11      	ldr	r3, [pc, #68]	; (31c0 <nm_drv_init+0x15c>)
    317c:	0018      	movs	r0, r3
    317e:	4b11      	ldr	r3, [pc, #68]	; (31c4 <nm_drv_init+0x160>)
    3180:	4798      	blx	r3
    3182:	4b1b      	ldr	r3, [pc, #108]	; (31f0 <nm_drv_init+0x18c>)
    3184:	0018      	movs	r0, r3
    3186:	4b11      	ldr	r3, [pc, #68]	; (31cc <nm_drv_init+0x168>)
    3188:	4798      	blx	r3
    318a:	200d      	movs	r0, #13
    318c:	4b10      	ldr	r3, [pc, #64]	; (31d0 <nm_drv_init+0x16c>)
    318e:	4798      	blx	r3
		goto ERR2;
    3190:	e007      	b.n	31a2 <nm_drv_init+0x13e>
	}
	return ret;
    3192:	230f      	movs	r3, #15
    3194:	18fb      	adds	r3, r7, r3
    3196:	781b      	ldrb	r3, [r3, #0]
    3198:	b25b      	sxtb	r3, r3
    319a:	e008      	b.n	31ae <nm_drv_init+0x14a>
		goto ERR2;
    319c:	46c0      	nop			; (mov r8, r8)
    319e:	e000      	b.n	31a2 <nm_drv_init+0x13e>
		goto ERR2;
    31a0:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
    31a2:	4b14      	ldr	r3, [pc, #80]	; (31f4 <nm_drv_init+0x190>)
    31a4:	4798      	blx	r3
ERR1:
	return ret;
    31a6:	230f      	movs	r3, #15
    31a8:	18fb      	adds	r3, r7, r3
    31aa:	781b      	ldrb	r3, [r3, #0]
    31ac:	b25b      	sxtb	r3, r3
}
    31ae:	0018      	movs	r0, r3
    31b0:	46bd      	mov	sp, r7
    31b2:	b005      	add	sp, #20
    31b4:	bd90      	pop	{r4, r7, pc}
    31b6:	46c0      	nop			; (mov r8, r8)
    31b8:	00002bc5 	.word	0x00002bc5
    31bc:	0000fe00 	.word	0x0000fe00
    31c0:	0000fd34 	.word	0x0000fd34
    31c4:	0000dfad 	.word	0x0000dfad
    31c8:	0000fd48 	.word	0x0000fd48
    31cc:	0000e0c9 	.word	0x0000e0c9
    31d0:	0000dfe1 	.word	0x0000dfe1
    31d4:	0000fd64 	.word	0x0000fd64
    31d8:	00002565 	.word	0x00002565
    31dc:	0000fd70 	.word	0x0000fd70
    31e0:	00004539 	.word	0x00004539
    31e4:	000028b9 	.word	0x000028b9
    31e8:	00002a51 	.word	0x00002a51
    31ec:	000024b1 	.word	0x000024b1
    31f0:	0000fd80 	.word	0x0000fd80
    31f4:	00002bf9 	.word	0x00002bf9

000031f8 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    31f8:	b590      	push	{r4, r7, lr}
    31fa:	b085      	sub	sp, #20
    31fc:	af00      	add	r7, sp, #0
    31fe:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    3200:	230f      	movs	r3, #15
    3202:	18fc      	adds	r4, r7, r3
    3204:	4b2d      	ldr	r3, [pc, #180]	; (32bc <nm_drv_deinit+0xc4>)
    3206:	4798      	blx	r3
    3208:	0003      	movs	r3, r0
    320a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    320c:	230f      	movs	r3, #15
    320e:	18fb      	adds	r3, r7, r3
    3210:	781b      	ldrb	r3, [r3, #0]
    3212:	b25b      	sxtb	r3, r3
    3214:	2b00      	cmp	r3, #0
    3216:	d00e      	beq.n	3236 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    3218:	23b6      	movs	r3, #182	; 0xb6
    321a:	005a      	lsls	r2, r3, #1
    321c:	4928      	ldr	r1, [pc, #160]	; (32c0 <nm_drv_deinit+0xc8>)
    321e:	4b29      	ldr	r3, [pc, #164]	; (32c4 <nm_drv_deinit+0xcc>)
    3220:	0018      	movs	r0, r3
    3222:	4b29      	ldr	r3, [pc, #164]	; (32c8 <nm_drv_deinit+0xd0>)
    3224:	4798      	blx	r3
    3226:	4b29      	ldr	r3, [pc, #164]	; (32cc <nm_drv_deinit+0xd4>)
    3228:	0018      	movs	r0, r3
    322a:	4b29      	ldr	r3, [pc, #164]	; (32d0 <nm_drv_deinit+0xd8>)
    322c:	4798      	blx	r3
    322e:	200d      	movs	r0, #13
    3230:	4b28      	ldr	r3, [pc, #160]	; (32d4 <nm_drv_deinit+0xdc>)
    3232:	4798      	blx	r3
		goto ERR1;
    3234:	e03a      	b.n	32ac <nm_drv_deinit+0xb4>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    3236:	230f      	movs	r3, #15
    3238:	18fc      	adds	r4, r7, r3
    323a:	2000      	movs	r0, #0
    323c:	4b26      	ldr	r3, [pc, #152]	; (32d8 <nm_drv_deinit+0xe0>)
    323e:	4798      	blx	r3
    3240:	0003      	movs	r3, r0
    3242:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3244:	230f      	movs	r3, #15
    3246:	18fb      	adds	r3, r7, r3
    3248:	781b      	ldrb	r3, [r3, #0]
    324a:	b25b      	sxtb	r3, r3
    324c:	2b00      	cmp	r3, #0
    324e:	d00f      	beq.n	3270 <nm_drv_deinit+0x78>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    3250:	2374      	movs	r3, #116	; 0x74
    3252:	33ff      	adds	r3, #255	; 0xff
    3254:	001a      	movs	r2, r3
    3256:	491a      	ldr	r1, [pc, #104]	; (32c0 <nm_drv_deinit+0xc8>)
    3258:	4b1a      	ldr	r3, [pc, #104]	; (32c4 <nm_drv_deinit+0xcc>)
    325a:	0018      	movs	r0, r3
    325c:	4b1a      	ldr	r3, [pc, #104]	; (32c8 <nm_drv_deinit+0xd0>)
    325e:	4798      	blx	r3
    3260:	4b1e      	ldr	r3, [pc, #120]	; (32dc <nm_drv_deinit+0xe4>)
    3262:	0018      	movs	r0, r3
    3264:	4b1a      	ldr	r3, [pc, #104]	; (32d0 <nm_drv_deinit+0xd8>)
    3266:	4798      	blx	r3
    3268:	200d      	movs	r0, #13
    326a:	4b1a      	ldr	r3, [pc, #104]	; (32d4 <nm_drv_deinit+0xdc>)
    326c:	4798      	blx	r3
		goto ERR1;
    326e:	e01d      	b.n	32ac <nm_drv_deinit+0xb4>
	}

	ret = nm_bus_iface_deinit();
    3270:	230f      	movs	r3, #15
    3272:	18fc      	adds	r4, r7, r3
    3274:	4b1a      	ldr	r3, [pc, #104]	; (32e0 <nm_drv_deinit+0xe8>)
    3276:	4798      	blx	r3
    3278:	0003      	movs	r3, r0
    327a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    327c:	230f      	movs	r3, #15
    327e:	18fb      	adds	r3, r7, r3
    3280:	781b      	ldrb	r3, [r3, #0]
    3282:	b25b      	sxtb	r3, r3
    3284:	2b00      	cmp	r3, #0
    3286:	d00f      	beq.n	32a8 <nm_drv_deinit+0xb0>
		M2M_ERR("[nmi stop]: fail init bus\n");
    3288:	237a      	movs	r3, #122	; 0x7a
    328a:	33ff      	adds	r3, #255	; 0xff
    328c:	001a      	movs	r2, r3
    328e:	490c      	ldr	r1, [pc, #48]	; (32c0 <nm_drv_deinit+0xc8>)
    3290:	4b0c      	ldr	r3, [pc, #48]	; (32c4 <nm_drv_deinit+0xcc>)
    3292:	0018      	movs	r0, r3
    3294:	4b0c      	ldr	r3, [pc, #48]	; (32c8 <nm_drv_deinit+0xd0>)
    3296:	4798      	blx	r3
    3298:	4b12      	ldr	r3, [pc, #72]	; (32e4 <nm_drv_deinit+0xec>)
    329a:	0018      	movs	r0, r3
    329c:	4b0c      	ldr	r3, [pc, #48]	; (32d0 <nm_drv_deinit+0xd8>)
    329e:	4798      	blx	r3
    32a0:	200d      	movs	r0, #13
    32a2:	4b0c      	ldr	r3, [pc, #48]	; (32d4 <nm_drv_deinit+0xdc>)
    32a4:	4798      	blx	r3
		goto ERR1;
    32a6:	e001      	b.n	32ac <nm_drv_deinit+0xb4>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    32a8:	4b0f      	ldr	r3, [pc, #60]	; (32e8 <nm_drv_deinit+0xf0>)
    32aa:	4798      	blx	r3
#endif

ERR1:
	return ret;
    32ac:	230f      	movs	r3, #15
    32ae:	18fb      	adds	r3, r7, r3
    32b0:	781b      	ldrb	r3, [r3, #0]
    32b2:	b25b      	sxtb	r3, r3
}
    32b4:	0018      	movs	r0, r3
    32b6:	46bd      	mov	sp, r7
    32b8:	b005      	add	sp, #20
    32ba:	bd90      	pop	{r4, r7, pc}
    32bc:	00002b05 	.word	0x00002b05
    32c0:	0000fe0c 	.word	0x0000fe0c
    32c4:	0000fd34 	.word	0x0000fd34
    32c8:	0000dfad 	.word	0x0000dfad
    32cc:	0000fda0 	.word	0x0000fda0
    32d0:	0000e0c9 	.word	0x0000e0c9
    32d4:	0000dfe1 	.word	0x0000dfe1
    32d8:	00005991 	.word	0x00005991
    32dc:	0000fdc0 	.word	0x0000fdc0
    32e0:	00002bf9 	.word	0x00002bf9
    32e4:	0000fde4 	.word	0x0000fde4
    32e8:	00004685 	.word	0x00004685

000032ec <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    32ec:	b580      	push	{r7, lr}
    32ee:	b086      	sub	sp, #24
    32f0:	af00      	add	r7, sp, #0
    32f2:	6078      	str	r0, [r7, #4]
    32f4:	000a      	movs	r2, r1
    32f6:	1cbb      	adds	r3, r7, #2
    32f8:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    32fa:	230c      	movs	r3, #12
    32fc:	18fb      	adds	r3, r7, r3
    32fe:	2200      	movs	r2, #0
    3300:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    3302:	230c      	movs	r3, #12
    3304:	18fb      	adds	r3, r7, r3
    3306:	687a      	ldr	r2, [r7, #4]
    3308:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    330a:	230c      	movs	r3, #12
    330c:	18fb      	adds	r3, r7, r3
    330e:	1cba      	adds	r2, r7, #2
    3310:	8812      	ldrh	r2, [r2, #0]
    3312:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    3314:	230c      	movs	r3, #12
    3316:	18fb      	adds	r3, r7, r3
    3318:	0019      	movs	r1, r3
    331a:	2003      	movs	r0, #3
    331c:	4b03      	ldr	r3, [pc, #12]	; (332c <nmi_spi_read+0x40>)
    331e:	4798      	blx	r3
    3320:	0003      	movs	r3, r0
}
    3322:	0018      	movs	r0, r3
    3324:	46bd      	mov	sp, r7
    3326:	b006      	add	sp, #24
    3328:	bd80      	pop	{r7, pc}
    332a:	46c0      	nop			; (mov r8, r8)
    332c:	00000ae5 	.word	0x00000ae5

00003330 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    3330:	b580      	push	{r7, lr}
    3332:	b086      	sub	sp, #24
    3334:	af00      	add	r7, sp, #0
    3336:	6078      	str	r0, [r7, #4]
    3338:	000a      	movs	r2, r1
    333a:	1cbb      	adds	r3, r7, #2
    333c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    333e:	230c      	movs	r3, #12
    3340:	18fb      	adds	r3, r7, r3
    3342:	687a      	ldr	r2, [r7, #4]
    3344:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    3346:	230c      	movs	r3, #12
    3348:	18fb      	adds	r3, r7, r3
    334a:	2200      	movs	r2, #0
    334c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    334e:	230c      	movs	r3, #12
    3350:	18fb      	adds	r3, r7, r3
    3352:	1cba      	adds	r2, r7, #2
    3354:	8812      	ldrh	r2, [r2, #0]
    3356:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    3358:	230c      	movs	r3, #12
    335a:	18fb      	adds	r3, r7, r3
    335c:	0019      	movs	r1, r3
    335e:	2003      	movs	r0, #3
    3360:	4b03      	ldr	r3, [pc, #12]	; (3370 <nmi_spi_write+0x40>)
    3362:	4798      	blx	r3
    3364:	0003      	movs	r3, r0
}
    3366:	0018      	movs	r0, r3
    3368:	46bd      	mov	sp, r7
    336a:	b006      	add	sp, #24
    336c:	bd80      	pop	{r7, pc}
    336e:	46c0      	nop			; (mov r8, r8)
    3370:	00000ae5 	.word	0x00000ae5

00003374 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    3374:	b580      	push	{r7, lr}
    3376:	b082      	sub	sp, #8
    3378:	af00      	add	r7, sp, #0
    337a:	0002      	movs	r2, r0
    337c:	1dfb      	adds	r3, r7, #7
    337e:	701a      	strb	r2, [r3, #0]
    3380:	1dbb      	adds	r3, r7, #6
    3382:	1c0a      	adds	r2, r1, #0
    3384:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    3386:	1dfb      	adds	r3, r7, #7
    3388:	781b      	ldrb	r3, [r3, #0]
    338a:	005a      	lsls	r2, r3, #1
    338c:	1dbb      	adds	r3, r7, #6
    338e:	781b      	ldrb	r3, [r3, #0]
    3390:	4053      	eors	r3, r2
    3392:	4a03      	ldr	r2, [pc, #12]	; (33a0 <crc7_byte+0x2c>)
    3394:	5cd3      	ldrb	r3, [r2, r3]
}
    3396:	0018      	movs	r0, r3
    3398:	46bd      	mov	sp, r7
    339a:	b002      	add	sp, #8
    339c:	bd80      	pop	{r7, pc}
    339e:	46c0      	nop			; (mov r8, r8)
    33a0:	0000fe1c 	.word	0x0000fe1c

000033a4 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    33a4:	b590      	push	{r4, r7, lr}
    33a6:	b085      	sub	sp, #20
    33a8:	af00      	add	r7, sp, #0
    33aa:	60b9      	str	r1, [r7, #8]
    33ac:	607a      	str	r2, [r7, #4]
    33ae:	230f      	movs	r3, #15
    33b0:	18fb      	adds	r3, r7, r3
    33b2:	1c02      	adds	r2, r0, #0
    33b4:	701a      	strb	r2, [r3, #0]
	while (len--)
    33b6:	e00e      	b.n	33d6 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    33b8:	68bb      	ldr	r3, [r7, #8]
    33ba:	1c5a      	adds	r2, r3, #1
    33bc:	60ba      	str	r2, [r7, #8]
    33be:	781a      	ldrb	r2, [r3, #0]
    33c0:	230f      	movs	r3, #15
    33c2:	18fc      	adds	r4, r7, r3
    33c4:	230f      	movs	r3, #15
    33c6:	18fb      	adds	r3, r7, r3
    33c8:	781b      	ldrb	r3, [r3, #0]
    33ca:	0011      	movs	r1, r2
    33cc:	0018      	movs	r0, r3
    33ce:	4b08      	ldr	r3, [pc, #32]	; (33f0 <crc7+0x4c>)
    33d0:	4798      	blx	r3
    33d2:	0003      	movs	r3, r0
    33d4:	7023      	strb	r3, [r4, #0]
	while (len--)
    33d6:	687b      	ldr	r3, [r7, #4]
    33d8:	1e5a      	subs	r2, r3, #1
    33da:	607a      	str	r2, [r7, #4]
    33dc:	2b00      	cmp	r3, #0
    33de:	d1eb      	bne.n	33b8 <crc7+0x14>
	return crc;
    33e0:	230f      	movs	r3, #15
    33e2:	18fb      	adds	r3, r7, r3
    33e4:	781b      	ldrb	r3, [r3, #0]
}
    33e6:	0018      	movs	r0, r3
    33e8:	46bd      	mov	sp, r7
    33ea:	b005      	add	sp, #20
    33ec:	bd90      	pop	{r4, r7, pc}
    33ee:	46c0      	nop			; (mov r8, r8)
    33f0:	00003375 	.word	0x00003375

000033f4 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    33f4:	b590      	push	{r4, r7, lr}
    33f6:	b089      	sub	sp, #36	; 0x24
    33f8:	af00      	add	r7, sp, #0
    33fa:	60b9      	str	r1, [r7, #8]
    33fc:	607a      	str	r2, [r7, #4]
    33fe:	603b      	str	r3, [r7, #0]
    3400:	230f      	movs	r3, #15
    3402:	18fb      	adds	r3, r7, r3
    3404:	1c02      	adds	r2, r0, #0
    3406:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    3408:	231f      	movs	r3, #31
    340a:	18fb      	adds	r3, r7, r3
    340c:	2205      	movs	r2, #5
    340e:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    3410:	231e      	movs	r3, #30
    3412:	18fb      	adds	r3, r7, r3
    3414:	2201      	movs	r2, #1
    3416:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    3418:	2314      	movs	r3, #20
    341a:	18fb      	adds	r3, r7, r3
    341c:	220f      	movs	r2, #15
    341e:	18ba      	adds	r2, r7, r2
    3420:	7812      	ldrb	r2, [r2, #0]
    3422:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    3424:	230f      	movs	r3, #15
    3426:	18fb      	adds	r3, r7, r3
    3428:	781b      	ldrb	r3, [r3, #0]
    342a:	3bc1      	subs	r3, #193	; 0xc1
    342c:	2b0e      	cmp	r3, #14
    342e:	d900      	bls.n	3432 <spi_cmd+0x3e>
    3430:	e11b      	b.n	366a <spi_cmd+0x276>
    3432:	009a      	lsls	r2, r3, #2
    3434:	4bb6      	ldr	r3, [pc, #728]	; (3710 <spi_cmd+0x31c>)
    3436:	18d3      	adds	r3, r2, r3
    3438:	681b      	ldr	r3, [r3, #0]
    343a:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    343c:	68bb      	ldr	r3, [r7, #8]
    343e:	0c1b      	lsrs	r3, r3, #16
    3440:	b2da      	uxtb	r2, r3
    3442:	2314      	movs	r3, #20
    3444:	18fb      	adds	r3, r7, r3
    3446:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3448:	68bb      	ldr	r3, [r7, #8]
    344a:	0a1b      	lsrs	r3, r3, #8
    344c:	b2da      	uxtb	r2, r3
    344e:	2314      	movs	r3, #20
    3450:	18fb      	adds	r3, r7, r3
    3452:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    3454:	68bb      	ldr	r3, [r7, #8]
    3456:	b2da      	uxtb	r2, r3
    3458:	2314      	movs	r3, #20
    345a:	18fb      	adds	r3, r7, r3
    345c:	70da      	strb	r2, [r3, #3]
		len = 5;
    345e:	231f      	movs	r3, #31
    3460:	18fb      	adds	r3, r7, r3
    3462:	2205      	movs	r2, #5
    3464:	701a      	strb	r2, [r3, #0]
		break;
    3466:	e105      	b.n	3674 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    3468:	68bb      	ldr	r3, [r7, #8]
    346a:	0a1b      	lsrs	r3, r3, #8
    346c:	b2da      	uxtb	r2, r3
    346e:	2314      	movs	r3, #20
    3470:	18fb      	adds	r3, r7, r3
    3472:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    3474:	2330      	movs	r3, #48	; 0x30
    3476:	18fb      	adds	r3, r7, r3
    3478:	781b      	ldrb	r3, [r3, #0]
    347a:	2b00      	cmp	r3, #0
    347c:	d009      	beq.n	3492 <spi_cmd+0x9e>
    347e:	2314      	movs	r3, #20
    3480:	18fb      	adds	r3, r7, r3
    3482:	785b      	ldrb	r3, [r3, #1]
    3484:	2280      	movs	r2, #128	; 0x80
    3486:	4252      	negs	r2, r2
    3488:	4313      	orrs	r3, r2
    348a:	b2da      	uxtb	r2, r3
    348c:	2314      	movs	r3, #20
    348e:	18fb      	adds	r3, r7, r3
    3490:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    3492:	68bb      	ldr	r3, [r7, #8]
    3494:	b2da      	uxtb	r2, r3
    3496:	2314      	movs	r3, #20
    3498:	18fb      	adds	r3, r7, r3
    349a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    349c:	2314      	movs	r3, #20
    349e:	18fb      	adds	r3, r7, r3
    34a0:	2200      	movs	r2, #0
    34a2:	70da      	strb	r2, [r3, #3]
		len = 5;
    34a4:	231f      	movs	r3, #31
    34a6:	18fb      	adds	r3, r7, r3
    34a8:	2205      	movs	r2, #5
    34aa:	701a      	strb	r2, [r3, #0]
		break;
    34ac:	e0e2      	b.n	3674 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    34ae:	2314      	movs	r3, #20
    34b0:	18fb      	adds	r3, r7, r3
    34b2:	2200      	movs	r2, #0
    34b4:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    34b6:	2314      	movs	r3, #20
    34b8:	18fb      	adds	r3, r7, r3
    34ba:	2200      	movs	r2, #0
    34bc:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    34be:	2314      	movs	r3, #20
    34c0:	18fb      	adds	r3, r7, r3
    34c2:	2200      	movs	r2, #0
    34c4:	70da      	strb	r2, [r3, #3]
		len = 5;
    34c6:	231f      	movs	r3, #31
    34c8:	18fb      	adds	r3, r7, r3
    34ca:	2205      	movs	r2, #5
    34cc:	701a      	strb	r2, [r3, #0]
		break;
    34ce:	e0d1      	b.n	3674 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    34d0:	2314      	movs	r3, #20
    34d2:	18fb      	adds	r3, r7, r3
    34d4:	2200      	movs	r2, #0
    34d6:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    34d8:	2314      	movs	r3, #20
    34da:	18fb      	adds	r3, r7, r3
    34dc:	2200      	movs	r2, #0
    34de:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    34e0:	2314      	movs	r3, #20
    34e2:	18fb      	adds	r3, r7, r3
    34e4:	2200      	movs	r2, #0
    34e6:	70da      	strb	r2, [r3, #3]
		len = 5;
    34e8:	231f      	movs	r3, #31
    34ea:	18fb      	adds	r3, r7, r3
    34ec:	2205      	movs	r2, #5
    34ee:	701a      	strb	r2, [r3, #0]
		break;
    34f0:	e0c0      	b.n	3674 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    34f2:	2314      	movs	r3, #20
    34f4:	18fb      	adds	r3, r7, r3
    34f6:	22ff      	movs	r2, #255	; 0xff
    34f8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    34fa:	2314      	movs	r3, #20
    34fc:	18fb      	adds	r3, r7, r3
    34fe:	22ff      	movs	r2, #255	; 0xff
    3500:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    3502:	2314      	movs	r3, #20
    3504:	18fb      	adds	r3, r7, r3
    3506:	22ff      	movs	r2, #255	; 0xff
    3508:	70da      	strb	r2, [r3, #3]
		len = 5;
    350a:	231f      	movs	r3, #31
    350c:	18fb      	adds	r3, r7, r3
    350e:	2205      	movs	r2, #5
    3510:	701a      	strb	r2, [r3, #0]
		break;
    3512:	e0af      	b.n	3674 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    3514:	68bb      	ldr	r3, [r7, #8]
    3516:	0c1b      	lsrs	r3, r3, #16
    3518:	b2da      	uxtb	r2, r3
    351a:	2314      	movs	r3, #20
    351c:	18fb      	adds	r3, r7, r3
    351e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3520:	68bb      	ldr	r3, [r7, #8]
    3522:	0a1b      	lsrs	r3, r3, #8
    3524:	b2da      	uxtb	r2, r3
    3526:	2314      	movs	r3, #20
    3528:	18fb      	adds	r3, r7, r3
    352a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    352c:	68bb      	ldr	r3, [r7, #8]
    352e:	b2da      	uxtb	r2, r3
    3530:	2314      	movs	r3, #20
    3532:	18fb      	adds	r3, r7, r3
    3534:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    3536:	683b      	ldr	r3, [r7, #0]
    3538:	0a1b      	lsrs	r3, r3, #8
    353a:	b2da      	uxtb	r2, r3
    353c:	2314      	movs	r3, #20
    353e:	18fb      	adds	r3, r7, r3
    3540:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    3542:	683b      	ldr	r3, [r7, #0]
    3544:	b2da      	uxtb	r2, r3
    3546:	2314      	movs	r3, #20
    3548:	18fb      	adds	r3, r7, r3
    354a:	715a      	strb	r2, [r3, #5]
		len = 7;
    354c:	231f      	movs	r3, #31
    354e:	18fb      	adds	r3, r7, r3
    3550:	2207      	movs	r2, #7
    3552:	701a      	strb	r2, [r3, #0]
		break;
    3554:	e08e      	b.n	3674 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    3556:	68bb      	ldr	r3, [r7, #8]
    3558:	0c1b      	lsrs	r3, r3, #16
    355a:	b2da      	uxtb	r2, r3
    355c:	2314      	movs	r3, #20
    355e:	18fb      	adds	r3, r7, r3
    3560:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3562:	68bb      	ldr	r3, [r7, #8]
    3564:	0a1b      	lsrs	r3, r3, #8
    3566:	b2da      	uxtb	r2, r3
    3568:	2314      	movs	r3, #20
    356a:	18fb      	adds	r3, r7, r3
    356c:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    356e:	68bb      	ldr	r3, [r7, #8]
    3570:	b2da      	uxtb	r2, r3
    3572:	2314      	movs	r3, #20
    3574:	18fb      	adds	r3, r7, r3
    3576:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    3578:	683b      	ldr	r3, [r7, #0]
    357a:	0c1b      	lsrs	r3, r3, #16
    357c:	b2da      	uxtb	r2, r3
    357e:	2314      	movs	r3, #20
    3580:	18fb      	adds	r3, r7, r3
    3582:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    3584:	683b      	ldr	r3, [r7, #0]
    3586:	0a1b      	lsrs	r3, r3, #8
    3588:	b2da      	uxtb	r2, r3
    358a:	2314      	movs	r3, #20
    358c:	18fb      	adds	r3, r7, r3
    358e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    3590:	683b      	ldr	r3, [r7, #0]
    3592:	b2da      	uxtb	r2, r3
    3594:	2314      	movs	r3, #20
    3596:	18fb      	adds	r3, r7, r3
    3598:	719a      	strb	r2, [r3, #6]
		len = 8;
    359a:	231f      	movs	r3, #31
    359c:	18fb      	adds	r3, r7, r3
    359e:	2208      	movs	r2, #8
    35a0:	701a      	strb	r2, [r3, #0]
		break;
    35a2:	e067      	b.n	3674 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    35a4:	68bb      	ldr	r3, [r7, #8]
    35a6:	0a1b      	lsrs	r3, r3, #8
    35a8:	b2da      	uxtb	r2, r3
    35aa:	2314      	movs	r3, #20
    35ac:	18fb      	adds	r3, r7, r3
    35ae:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    35b0:	2330      	movs	r3, #48	; 0x30
    35b2:	18fb      	adds	r3, r7, r3
    35b4:	781b      	ldrb	r3, [r3, #0]
    35b6:	2b00      	cmp	r3, #0
    35b8:	d009      	beq.n	35ce <spi_cmd+0x1da>
    35ba:	2314      	movs	r3, #20
    35bc:	18fb      	adds	r3, r7, r3
    35be:	785b      	ldrb	r3, [r3, #1]
    35c0:	2280      	movs	r2, #128	; 0x80
    35c2:	4252      	negs	r2, r2
    35c4:	4313      	orrs	r3, r2
    35c6:	b2da      	uxtb	r2, r3
    35c8:	2314      	movs	r3, #20
    35ca:	18fb      	adds	r3, r7, r3
    35cc:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    35ce:	68bb      	ldr	r3, [r7, #8]
    35d0:	b2da      	uxtb	r2, r3
    35d2:	2314      	movs	r3, #20
    35d4:	18fb      	adds	r3, r7, r3
    35d6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    35d8:	687b      	ldr	r3, [r7, #4]
    35da:	0e1b      	lsrs	r3, r3, #24
    35dc:	b2da      	uxtb	r2, r3
    35de:	2314      	movs	r3, #20
    35e0:	18fb      	adds	r3, r7, r3
    35e2:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    35e4:	687b      	ldr	r3, [r7, #4]
    35e6:	0c1b      	lsrs	r3, r3, #16
    35e8:	b2da      	uxtb	r2, r3
    35ea:	2314      	movs	r3, #20
    35ec:	18fb      	adds	r3, r7, r3
    35ee:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    35f0:	687b      	ldr	r3, [r7, #4]
    35f2:	0a1b      	lsrs	r3, r3, #8
    35f4:	b2da      	uxtb	r2, r3
    35f6:	2314      	movs	r3, #20
    35f8:	18fb      	adds	r3, r7, r3
    35fa:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    35fc:	687b      	ldr	r3, [r7, #4]
    35fe:	b2da      	uxtb	r2, r3
    3600:	2314      	movs	r3, #20
    3602:	18fb      	adds	r3, r7, r3
    3604:	719a      	strb	r2, [r3, #6]
		len = 8;
    3606:	231f      	movs	r3, #31
    3608:	18fb      	adds	r3, r7, r3
    360a:	2208      	movs	r2, #8
    360c:	701a      	strb	r2, [r3, #0]
		break;
    360e:	e031      	b.n	3674 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    3610:	68bb      	ldr	r3, [r7, #8]
    3612:	0c1b      	lsrs	r3, r3, #16
    3614:	b2da      	uxtb	r2, r3
    3616:	2314      	movs	r3, #20
    3618:	18fb      	adds	r3, r7, r3
    361a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    361c:	68bb      	ldr	r3, [r7, #8]
    361e:	0a1b      	lsrs	r3, r3, #8
    3620:	b2da      	uxtb	r2, r3
    3622:	2314      	movs	r3, #20
    3624:	18fb      	adds	r3, r7, r3
    3626:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    3628:	68bb      	ldr	r3, [r7, #8]
    362a:	b2da      	uxtb	r2, r3
    362c:	2314      	movs	r3, #20
    362e:	18fb      	adds	r3, r7, r3
    3630:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    3632:	687b      	ldr	r3, [r7, #4]
    3634:	0e1b      	lsrs	r3, r3, #24
    3636:	b2da      	uxtb	r2, r3
    3638:	2314      	movs	r3, #20
    363a:	18fb      	adds	r3, r7, r3
    363c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    363e:	687b      	ldr	r3, [r7, #4]
    3640:	0c1b      	lsrs	r3, r3, #16
    3642:	b2da      	uxtb	r2, r3
    3644:	2314      	movs	r3, #20
    3646:	18fb      	adds	r3, r7, r3
    3648:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    364a:	687b      	ldr	r3, [r7, #4]
    364c:	0a1b      	lsrs	r3, r3, #8
    364e:	b2da      	uxtb	r2, r3
    3650:	2314      	movs	r3, #20
    3652:	18fb      	adds	r3, r7, r3
    3654:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    3656:	687b      	ldr	r3, [r7, #4]
    3658:	b2da      	uxtb	r2, r3
    365a:	2314      	movs	r3, #20
    365c:	18fb      	adds	r3, r7, r3
    365e:	71da      	strb	r2, [r3, #7]
		len = 9;
    3660:	231f      	movs	r3, #31
    3662:	18fb      	adds	r3, r7, r3
    3664:	2209      	movs	r2, #9
    3666:	701a      	strb	r2, [r3, #0]
		break;
    3668:	e004      	b.n	3674 <spi_cmd+0x280>
	default:
		result = N_FAIL;
    366a:	231e      	movs	r3, #30
    366c:	18fb      	adds	r3, r7, r3
    366e:	2200      	movs	r2, #0
    3670:	701a      	strb	r2, [r3, #0]
		break;
    3672:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    3674:	231e      	movs	r3, #30
    3676:	18fb      	adds	r3, r7, r3
    3678:	781b      	ldrb	r3, [r3, #0]
    367a:	b25b      	sxtb	r3, r3
    367c:	2b00      	cmp	r3, #0
    367e:	d03f      	beq.n	3700 <spi_cmd+0x30c>
		if (!gu8Crc_off)
    3680:	4b24      	ldr	r3, [pc, #144]	; (3714 <spi_cmd+0x320>)
    3682:	781b      	ldrb	r3, [r3, #0]
    3684:	2b00      	cmp	r3, #0
    3686:	d115      	bne.n	36b4 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    3688:	231f      	movs	r3, #31
    368a:	18fb      	adds	r3, r7, r3
    368c:	781b      	ldrb	r3, [r3, #0]
    368e:	1e5c      	subs	r4, r3, #1
    3690:	231f      	movs	r3, #31
    3692:	18fb      	adds	r3, r7, r3
    3694:	781b      	ldrb	r3, [r3, #0]
    3696:	3b01      	subs	r3, #1
    3698:	001a      	movs	r2, r3
    369a:	2314      	movs	r3, #20
    369c:	18fb      	adds	r3, r7, r3
    369e:	0019      	movs	r1, r3
    36a0:	207f      	movs	r0, #127	; 0x7f
    36a2:	4b1d      	ldr	r3, [pc, #116]	; (3718 <spi_cmd+0x324>)
    36a4:	4798      	blx	r3
    36a6:	0003      	movs	r3, r0
    36a8:	18db      	adds	r3, r3, r3
    36aa:	b2da      	uxtb	r2, r3
    36ac:	2314      	movs	r3, #20
    36ae:	18fb      	adds	r3, r7, r3
    36b0:	551a      	strb	r2, [r3, r4]
    36b2:	e006      	b.n	36c2 <spi_cmd+0x2ce>
		else
			len-=1;
    36b4:	231f      	movs	r3, #31
    36b6:	18fb      	adds	r3, r7, r3
    36b8:	221f      	movs	r2, #31
    36ba:	18ba      	adds	r2, r7, r2
    36bc:	7812      	ldrb	r2, [r2, #0]
    36be:	3a01      	subs	r2, #1
    36c0:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    36c2:	231f      	movs	r3, #31
    36c4:	18fb      	adds	r3, r7, r3
    36c6:	781b      	ldrb	r3, [r3, #0]
    36c8:	b29a      	uxth	r2, r3
    36ca:	2314      	movs	r3, #20
    36cc:	18fb      	adds	r3, r7, r3
    36ce:	0011      	movs	r1, r2
    36d0:	0018      	movs	r0, r3
    36d2:	4b12      	ldr	r3, [pc, #72]	; (371c <spi_cmd+0x328>)
    36d4:	4798      	blx	r3
    36d6:	1e03      	subs	r3, r0, #0
    36d8:	d012      	beq.n	3700 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    36da:	2328      	movs	r3, #40	; 0x28
    36dc:	33ff      	adds	r3, #255	; 0xff
    36de:	001a      	movs	r2, r3
    36e0:	490f      	ldr	r1, [pc, #60]	; (3720 <spi_cmd+0x32c>)
    36e2:	4b10      	ldr	r3, [pc, #64]	; (3724 <spi_cmd+0x330>)
    36e4:	0018      	movs	r0, r3
    36e6:	4b10      	ldr	r3, [pc, #64]	; (3728 <spi_cmd+0x334>)
    36e8:	4798      	blx	r3
    36ea:	4b10      	ldr	r3, [pc, #64]	; (372c <spi_cmd+0x338>)
    36ec:	0018      	movs	r0, r3
    36ee:	4b10      	ldr	r3, [pc, #64]	; (3730 <spi_cmd+0x33c>)
    36f0:	4798      	blx	r3
    36f2:	200d      	movs	r0, #13
    36f4:	4b0f      	ldr	r3, [pc, #60]	; (3734 <spi_cmd+0x340>)
    36f6:	4798      	blx	r3
			result = N_FAIL;
    36f8:	231e      	movs	r3, #30
    36fa:	18fb      	adds	r3, r7, r3
    36fc:	2200      	movs	r2, #0
    36fe:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    3700:	231e      	movs	r3, #30
    3702:	18fb      	adds	r3, r7, r3
    3704:	781b      	ldrb	r3, [r3, #0]
    3706:	b25b      	sxtb	r3, r3
}
    3708:	0018      	movs	r0, r3
    370a:	46bd      	mov	sp, r7
    370c:	b009      	add	sp, #36	; 0x24
    370e:	bd90      	pop	{r4, r7, pc}
    3710:	00010474 	.word	0x00010474
    3714:	20000214 	.word	0x20000214
    3718:	000033a5 	.word	0x000033a5
    371c:	00003331 	.word	0x00003331
    3720:	000104b0 	.word	0x000104b0
    3724:	0000ff1c 	.word	0x0000ff1c
    3728:	0000dfad 	.word	0x0000dfad
    372c:	0000ff30 	.word	0x0000ff30
    3730:	0000e0c9 	.word	0x0000e0c9
    3734:	0000dfe1 	.word	0x0000dfe1

00003738 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
    3738:	b590      	push	{r4, r7, lr}
    373a:	b085      	sub	sp, #20
    373c:	af00      	add	r7, sp, #0
    373e:	0002      	movs	r2, r0
    3740:	1dfb      	adds	r3, r7, #7
    3742:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    3744:	230e      	movs	r3, #14
    3746:	18fb      	adds	r3, r7, r3
    3748:	2201      	movs	r2, #1
    374a:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
    374c:	4b31      	ldr	r3, [pc, #196]	; (3814 <spi_data_rsp+0xdc>)
    374e:	781b      	ldrb	r3, [r3, #0]
    3750:	2b00      	cmp	r3, #0
    3752:	d104      	bne.n	375e <spi_data_rsp+0x26>
		len = 2;
    3754:	230f      	movs	r3, #15
    3756:	18fb      	adds	r3, r7, r3
    3758:	2202      	movs	r2, #2
    375a:	701a      	strb	r2, [r3, #0]
    375c:	e003      	b.n	3766 <spi_data_rsp+0x2e>
	else
		len = 3;
    375e:	230f      	movs	r3, #15
    3760:	18fb      	adds	r3, r7, r3
    3762:	2203      	movs	r2, #3
    3764:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    3766:	230f      	movs	r3, #15
    3768:	18fb      	adds	r3, r7, r3
    376a:	781b      	ldrb	r3, [r3, #0]
    376c:	b29a      	uxth	r2, r3
    376e:	2308      	movs	r3, #8
    3770:	18fb      	adds	r3, r7, r3
    3772:	0011      	movs	r1, r2
    3774:	0018      	movs	r0, r3
    3776:	4b28      	ldr	r3, [pc, #160]	; (3818 <spi_data_rsp+0xe0>)
    3778:	4798      	blx	r3
    377a:	1e03      	subs	r3, r0, #0
    377c:	d013      	beq.n	37a6 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    377e:	233c      	movs	r3, #60	; 0x3c
    3780:	33ff      	adds	r3, #255	; 0xff
    3782:	001a      	movs	r2, r3
    3784:	4925      	ldr	r1, [pc, #148]	; (381c <spi_data_rsp+0xe4>)
    3786:	4b26      	ldr	r3, [pc, #152]	; (3820 <spi_data_rsp+0xe8>)
    3788:	0018      	movs	r0, r3
    378a:	4b26      	ldr	r3, [pc, #152]	; (3824 <spi_data_rsp+0xec>)
    378c:	4798      	blx	r3
    378e:	4b26      	ldr	r3, [pc, #152]	; (3828 <spi_data_rsp+0xf0>)
    3790:	0018      	movs	r0, r3
    3792:	4b26      	ldr	r3, [pc, #152]	; (382c <spi_data_rsp+0xf4>)
    3794:	4798      	blx	r3
    3796:	200d      	movs	r0, #13
    3798:	4b25      	ldr	r3, [pc, #148]	; (3830 <spi_data_rsp+0xf8>)
    379a:	4798      	blx	r3
		result = N_FAIL;
    379c:	230e      	movs	r3, #14
    379e:	18fb      	adds	r3, r7, r3
    37a0:	2200      	movs	r2, #0
    37a2:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    37a4:	e02e      	b.n	3804 <spi_data_rsp+0xcc>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    37a6:	230f      	movs	r3, #15
    37a8:	18fb      	adds	r3, r7, r3
    37aa:	781b      	ldrb	r3, [r3, #0]
    37ac:	3b01      	subs	r3, #1
    37ae:	2208      	movs	r2, #8
    37b0:	18ba      	adds	r2, r7, r2
    37b2:	5cd3      	ldrb	r3, [r2, r3]
    37b4:	2b00      	cmp	r3, #0
    37b6:	d108      	bne.n	37ca <spi_data_rsp+0x92>
    37b8:	230f      	movs	r3, #15
    37ba:	18fb      	adds	r3, r7, r3
    37bc:	781b      	ldrb	r3, [r3, #0]
    37be:	3b02      	subs	r3, #2
    37c0:	2208      	movs	r2, #8
    37c2:	18ba      	adds	r2, r7, r2
    37c4:	5cd3      	ldrb	r3, [r2, r3]
    37c6:	2bc3      	cmp	r3, #195	; 0xc3
    37c8:	d01c      	beq.n	3804 <spi_data_rsp+0xcc>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    37ca:	23a1      	movs	r3, #161	; 0xa1
    37cc:	005a      	lsls	r2, r3, #1
    37ce:	4913      	ldr	r1, [pc, #76]	; (381c <spi_data_rsp+0xe4>)
    37d0:	4b13      	ldr	r3, [pc, #76]	; (3820 <spi_data_rsp+0xe8>)
    37d2:	0018      	movs	r0, r3
    37d4:	4b13      	ldr	r3, [pc, #76]	; (3824 <spi_data_rsp+0xec>)
    37d6:	4798      	blx	r3
    37d8:	2308      	movs	r3, #8
    37da:	18fb      	adds	r3, r7, r3
    37dc:	781b      	ldrb	r3, [r3, #0]
    37de:	0019      	movs	r1, r3
    37e0:	2308      	movs	r3, #8
    37e2:	18fb      	adds	r3, r7, r3
    37e4:	785b      	ldrb	r3, [r3, #1]
    37e6:	001a      	movs	r2, r3
    37e8:	2308      	movs	r3, #8
    37ea:	18fb      	adds	r3, r7, r3
    37ec:	789b      	ldrb	r3, [r3, #2]
    37ee:	4811      	ldr	r0, [pc, #68]	; (3834 <spi_data_rsp+0xfc>)
    37f0:	4c0c      	ldr	r4, [pc, #48]	; (3824 <spi_data_rsp+0xec>)
    37f2:	47a0      	blx	r4
    37f4:	200d      	movs	r0, #13
    37f6:	4b0e      	ldr	r3, [pc, #56]	; (3830 <spi_data_rsp+0xf8>)
    37f8:	4798      	blx	r3
		result = N_FAIL;
    37fa:	230e      	movs	r3, #14
    37fc:	18fb      	adds	r3, r7, r3
    37fe:	2200      	movs	r2, #0
    3800:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    3802:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
    3804:	230e      	movs	r3, #14
    3806:	18fb      	adds	r3, r7, r3
    3808:	781b      	ldrb	r3, [r3, #0]
    380a:	b25b      	sxtb	r3, r3
}
    380c:	0018      	movs	r0, r3
    380e:	46bd      	mov	sp, r7
    3810:	b005      	add	sp, #20
    3812:	bd90      	pop	{r4, r7, pc}
    3814:	20000214 	.word	0x20000214
    3818:	000032ed 	.word	0x000032ed
    381c:	000104b8 	.word	0x000104b8
    3820:	0000ff1c 	.word	0x0000ff1c
    3824:	0000dfad 	.word	0x0000dfad
    3828:	0000ff5c 	.word	0x0000ff5c
    382c:	0000e0c9 	.word	0x0000e0c9
    3830:	0000dfe1 	.word	0x0000dfe1
    3834:	0000ff7c 	.word	0x0000ff7c

00003838 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    3838:	b580      	push	{r7, lr}
    383a:	b084      	sub	sp, #16
    383c:	af00      	add	r7, sp, #0
    383e:	0002      	movs	r2, r0
    3840:	1dfb      	adds	r3, r7, #7
    3842:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    3844:	230f      	movs	r3, #15
    3846:	18fb      	adds	r3, r7, r3
    3848:	2201      	movs	r2, #1
    384a:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    384c:	1dfb      	adds	r3, r7, #7
    384e:	781b      	ldrb	r3, [r3, #0]
    3850:	2bcf      	cmp	r3, #207	; 0xcf
    3852:	d007      	beq.n	3864 <spi_cmd_rsp+0x2c>
    3854:	1dfb      	adds	r3, r7, #7
    3856:	781b      	ldrb	r3, [r3, #0]
    3858:	2bc5      	cmp	r3, #197	; 0xc5
    385a:	d003      	beq.n	3864 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    385c:	1dfb      	adds	r3, r7, #7
    385e:	781b      	ldrb	r3, [r3, #0]
    3860:	2bc6      	cmp	r3, #198	; 0xc6
    3862:	d10c      	bne.n	387e <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3864:	230d      	movs	r3, #13
    3866:	18fb      	adds	r3, r7, r3
    3868:	2101      	movs	r1, #1
    386a:	0018      	movs	r0, r3
    386c:	4b39      	ldr	r3, [pc, #228]	; (3954 <spi_cmd_rsp+0x11c>)
    386e:	4798      	blx	r3
    3870:	1e03      	subs	r3, r0, #0
    3872:	d004      	beq.n	387e <spi_cmd_rsp+0x46>
			result = N_FAIL;
    3874:	230f      	movs	r3, #15
    3876:	18fb      	adds	r3, r7, r3
    3878:	2200      	movs	r2, #0
    387a:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    387c:	e061      	b.n	3942 <spi_cmd_rsp+0x10a>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    387e:	230e      	movs	r3, #14
    3880:	18fb      	adds	r3, r7, r3
    3882:	220a      	movs	r2, #10
    3884:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3886:	230d      	movs	r3, #13
    3888:	18fb      	adds	r3, r7, r3
    388a:	2101      	movs	r1, #1
    388c:	0018      	movs	r0, r3
    388e:	4b31      	ldr	r3, [pc, #196]	; (3954 <spi_cmd_rsp+0x11c>)
    3890:	4798      	blx	r3
    3892:	1e03      	subs	r3, r0, #0
    3894:	d012      	beq.n	38bc <spi_cmd_rsp+0x84>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    3896:	23b1      	movs	r3, #177	; 0xb1
    3898:	005a      	lsls	r2, r3, #1
    389a:	492f      	ldr	r1, [pc, #188]	; (3958 <spi_cmd_rsp+0x120>)
    389c:	4b2f      	ldr	r3, [pc, #188]	; (395c <spi_cmd_rsp+0x124>)
    389e:	0018      	movs	r0, r3
    38a0:	4b2f      	ldr	r3, [pc, #188]	; (3960 <spi_cmd_rsp+0x128>)
    38a2:	4798      	blx	r3
    38a4:	4b2f      	ldr	r3, [pc, #188]	; (3964 <spi_cmd_rsp+0x12c>)
    38a6:	0018      	movs	r0, r3
    38a8:	4b2f      	ldr	r3, [pc, #188]	; (3968 <spi_cmd_rsp+0x130>)
    38aa:	4798      	blx	r3
    38ac:	200d      	movs	r0, #13
    38ae:	4b2f      	ldr	r3, [pc, #188]	; (396c <spi_cmd_rsp+0x134>)
    38b0:	4798      	blx	r3
			result = N_FAIL;
    38b2:	230f      	movs	r3, #15
    38b4:	18fb      	adds	r3, r7, r3
    38b6:	2200      	movs	r2, #0
    38b8:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    38ba:	e042      	b.n	3942 <spi_cmd_rsp+0x10a>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    38bc:	230d      	movs	r3, #13
    38be:	18fb      	adds	r3, r7, r3
    38c0:	781b      	ldrb	r3, [r3, #0]
    38c2:	1dfa      	adds	r2, r7, #7
    38c4:	7812      	ldrb	r2, [r2, #0]
    38c6:	429a      	cmp	r2, r3
    38c8:	d00b      	beq.n	38e2 <spi_cmd_rsp+0xaa>
    38ca:	230e      	movs	r3, #14
    38cc:	18fb      	adds	r3, r7, r3
    38ce:	781b      	ldrb	r3, [r3, #0]
    38d0:	b25b      	sxtb	r3, r3
    38d2:	b2da      	uxtb	r2, r3
    38d4:	3a01      	subs	r2, #1
    38d6:	b2d1      	uxtb	r1, r2
    38d8:	220e      	movs	r2, #14
    38da:	18ba      	adds	r2, r7, r2
    38dc:	7011      	strb	r1, [r2, #0]
    38de:	2b00      	cmp	r3, #0
    38e0:	dcd1      	bgt.n	3886 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    38e2:	230e      	movs	r3, #14
    38e4:	18fb      	adds	r3, r7, r3
    38e6:	220a      	movs	r2, #10
    38e8:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    38ea:	230d      	movs	r3, #13
    38ec:	18fb      	adds	r3, r7, r3
    38ee:	2101      	movs	r1, #1
    38f0:	0018      	movs	r0, r3
    38f2:	4b18      	ldr	r3, [pc, #96]	; (3954 <spi_cmd_rsp+0x11c>)
    38f4:	4798      	blx	r3
    38f6:	1e03      	subs	r3, r0, #0
    38f8:	d012      	beq.n	3920 <spi_cmd_rsp+0xe8>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    38fa:	23b8      	movs	r3, #184	; 0xb8
    38fc:	005a      	lsls	r2, r3, #1
    38fe:	4916      	ldr	r1, [pc, #88]	; (3958 <spi_cmd_rsp+0x120>)
    3900:	4b16      	ldr	r3, [pc, #88]	; (395c <spi_cmd_rsp+0x124>)
    3902:	0018      	movs	r0, r3
    3904:	4b16      	ldr	r3, [pc, #88]	; (3960 <spi_cmd_rsp+0x128>)
    3906:	4798      	blx	r3
    3908:	4b16      	ldr	r3, [pc, #88]	; (3964 <spi_cmd_rsp+0x12c>)
    390a:	0018      	movs	r0, r3
    390c:	4b16      	ldr	r3, [pc, #88]	; (3968 <spi_cmd_rsp+0x130>)
    390e:	4798      	blx	r3
    3910:	200d      	movs	r0, #13
    3912:	4b16      	ldr	r3, [pc, #88]	; (396c <spi_cmd_rsp+0x134>)
    3914:	4798      	blx	r3
			result = N_FAIL;
    3916:	230f      	movs	r3, #15
    3918:	18fb      	adds	r3, r7, r3
    391a:	2200      	movs	r2, #0
    391c:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    391e:	e010      	b.n	3942 <spi_cmd_rsp+0x10a>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    3920:	230d      	movs	r3, #13
    3922:	18fb      	adds	r3, r7, r3
    3924:	781b      	ldrb	r3, [r3, #0]
    3926:	2b00      	cmp	r3, #0
    3928:	d00b      	beq.n	3942 <spi_cmd_rsp+0x10a>
    392a:	230e      	movs	r3, #14
    392c:	18fb      	adds	r3, r7, r3
    392e:	781b      	ldrb	r3, [r3, #0]
    3930:	b25b      	sxtb	r3, r3
    3932:	b2da      	uxtb	r2, r3
    3934:	3a01      	subs	r2, #1
    3936:	b2d1      	uxtb	r1, r2
    3938:	220e      	movs	r2, #14
    393a:	18ba      	adds	r2, r7, r2
    393c:	7011      	strb	r1, [r2, #0]
    393e:	2b00      	cmp	r3, #0
    3940:	dcd3      	bgt.n	38ea <spi_cmd_rsp+0xb2>

_fail_:

	return result;
    3942:	230f      	movs	r3, #15
    3944:	18fb      	adds	r3, r7, r3
    3946:	781b      	ldrb	r3, [r3, #0]
    3948:	b25b      	sxtb	r3, r3
}
    394a:	0018      	movs	r0, r3
    394c:	46bd      	mov	sp, r7
    394e:	b004      	add	sp, #16
    3950:	bd80      	pop	{r7, pc}
    3952:	46c0      	nop			; (mov r8, r8)
    3954:	000032ed 	.word	0x000032ed
    3958:	000104c8 	.word	0x000104c8
    395c:	0000ff1c 	.word	0x0000ff1c
    3960:	0000dfad 	.word	0x0000dfad
    3964:	0000ffac 	.word	0x0000ffac
    3968:	0000e0c9 	.word	0x0000e0c9
    396c:	0000dfe1 	.word	0x0000dfe1

00003970 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    3970:	b580      	push	{r7, lr}
    3972:	b086      	sub	sp, #24
    3974:	af00      	add	r7, sp, #0
    3976:	6078      	str	r0, [r7, #4]
    3978:	0008      	movs	r0, r1
    397a:	0011      	movs	r1, r2
    397c:	1cbb      	adds	r3, r7, #2
    397e:	1c02      	adds	r2, r0, #0
    3980:	801a      	strh	r2, [r3, #0]
    3982:	1c7b      	adds	r3, r7, #1
    3984:	1c0a      	adds	r2, r1, #0
    3986:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    3988:	2311      	movs	r3, #17
    398a:	18fb      	adds	r3, r7, r3
    398c:	2201      	movs	r2, #1
    398e:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    3990:	2314      	movs	r3, #20
    3992:	18fb      	adds	r3, r7, r3
    3994:	2200      	movs	r2, #0
    3996:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    3998:	1cbb      	adds	r3, r7, #2
    399a:	881a      	ldrh	r2, [r3, #0]
    399c:	2380      	movs	r3, #128	; 0x80
    399e:	019b      	lsls	r3, r3, #6
    39a0:	429a      	cmp	r2, r3
    39a2:	d805      	bhi.n	39b0 <spi_data_read+0x40>
			nbytes = sz;
    39a4:	2312      	movs	r3, #18
    39a6:	18fb      	adds	r3, r7, r3
    39a8:	1cba      	adds	r2, r7, #2
    39aa:	8812      	ldrh	r2, [r2, #0]
    39ac:	801a      	strh	r2, [r3, #0]
    39ae:	e004      	b.n	39ba <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    39b0:	2312      	movs	r3, #18
    39b2:	18fb      	adds	r3, r7, r3
    39b4:	2280      	movs	r2, #128	; 0x80
    39b6:	0192      	lsls	r2, r2, #6
    39b8:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    39ba:	2316      	movs	r3, #22
    39bc:	18fb      	adds	r3, r7, r3
    39be:	220a      	movs	r2, #10
    39c0:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    39c2:	230b      	movs	r3, #11
    39c4:	18fb      	adds	r3, r7, r3
    39c6:	2101      	movs	r1, #1
    39c8:	0018      	movs	r0, r3
    39ca:	4b5c      	ldr	r3, [pc, #368]	; (3b3c <spi_data_read+0x1cc>)
    39cc:	4798      	blx	r3
    39ce:	1e03      	subs	r3, r0, #0
    39d0:	d011      	beq.n	39f6 <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    39d2:	4a5b      	ldr	r2, [pc, #364]	; (3b40 <spi_data_read+0x1d0>)
    39d4:	495b      	ldr	r1, [pc, #364]	; (3b44 <spi_data_read+0x1d4>)
    39d6:	4b5c      	ldr	r3, [pc, #368]	; (3b48 <spi_data_read+0x1d8>)
    39d8:	0018      	movs	r0, r3
    39da:	4b5c      	ldr	r3, [pc, #368]	; (3b4c <spi_data_read+0x1dc>)
    39dc:	4798      	blx	r3
    39de:	4b5c      	ldr	r3, [pc, #368]	; (3b50 <spi_data_read+0x1e0>)
    39e0:	0018      	movs	r0, r3
    39e2:	4b5c      	ldr	r3, [pc, #368]	; (3b54 <spi_data_read+0x1e4>)
    39e4:	4798      	blx	r3
    39e6:	200d      	movs	r0, #13
    39e8:	4b5b      	ldr	r3, [pc, #364]	; (3b58 <spi_data_read+0x1e8>)
    39ea:	4798      	blx	r3
				result = N_FAIL;
    39ec:	2311      	movs	r3, #17
    39ee:	18fb      	adds	r3, r7, r3
    39f0:	2200      	movs	r2, #0
    39f2:	701a      	strb	r2, [r3, #0]
				break;
    39f4:	e017      	b.n	3a26 <spi_data_read+0xb6>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    39f6:	230b      	movs	r3, #11
    39f8:	18fb      	adds	r3, r7, r3
    39fa:	781b      	ldrb	r3, [r3, #0]
    39fc:	091b      	lsrs	r3, r3, #4
    39fe:	b2db      	uxtb	r3, r3
    3a00:	001a      	movs	r2, r3
    3a02:	230f      	movs	r3, #15
    3a04:	4013      	ands	r3, r2
    3a06:	2b0f      	cmp	r3, #15
    3a08:	d00c      	beq.n	3a24 <spi_data_read+0xb4>
				break;
		} while (retry--);
    3a0a:	2316      	movs	r3, #22
    3a0c:	18fb      	adds	r3, r7, r3
    3a0e:	2200      	movs	r2, #0
    3a10:	5e9b      	ldrsh	r3, [r3, r2]
    3a12:	b29a      	uxth	r2, r3
    3a14:	3a01      	subs	r2, #1
    3a16:	b291      	uxth	r1, r2
    3a18:	2216      	movs	r2, #22
    3a1a:	18ba      	adds	r2, r7, r2
    3a1c:	8011      	strh	r1, [r2, #0]
    3a1e:	2b00      	cmp	r3, #0
    3a20:	d1cf      	bne.n	39c2 <spi_data_read+0x52>
    3a22:	e000      	b.n	3a26 <spi_data_read+0xb6>
				break;
    3a24:	46c0      	nop			; (mov r8, r8)

		if (result == N_FAIL)
    3a26:	2311      	movs	r3, #17
    3a28:	18fb      	adds	r3, r7, r3
    3a2a:	781b      	ldrb	r3, [r3, #0]
    3a2c:	b25b      	sxtb	r3, r3
    3a2e:	2b00      	cmp	r3, #0
    3a30:	d100      	bne.n	3a34 <spi_data_read+0xc4>
    3a32:	e079      	b.n	3b28 <spi_data_read+0x1b8>
			break;

		if (retry <= 0) {
    3a34:	2316      	movs	r3, #22
    3a36:	18fb      	adds	r3, r7, r3
    3a38:	2200      	movs	r2, #0
    3a3a:	5e9b      	ldrsh	r3, [r3, r2]
    3a3c:	2b00      	cmp	r3, #0
    3a3e:	dc16      	bgt.n	3a6e <spi_data_read+0xfe>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    3a40:	4a46      	ldr	r2, [pc, #280]	; (3b5c <spi_data_read+0x1ec>)
    3a42:	4940      	ldr	r1, [pc, #256]	; (3b44 <spi_data_read+0x1d4>)
    3a44:	4b40      	ldr	r3, [pc, #256]	; (3b48 <spi_data_read+0x1d8>)
    3a46:	0018      	movs	r0, r3
    3a48:	4b40      	ldr	r3, [pc, #256]	; (3b4c <spi_data_read+0x1dc>)
    3a4a:	4798      	blx	r3
    3a4c:	230b      	movs	r3, #11
    3a4e:	18fb      	adds	r3, r7, r3
    3a50:	781b      	ldrb	r3, [r3, #0]
    3a52:	001a      	movs	r2, r3
    3a54:	4b42      	ldr	r3, [pc, #264]	; (3b60 <spi_data_read+0x1f0>)
    3a56:	0011      	movs	r1, r2
    3a58:	0018      	movs	r0, r3
    3a5a:	4b3c      	ldr	r3, [pc, #240]	; (3b4c <spi_data_read+0x1dc>)
    3a5c:	4798      	blx	r3
    3a5e:	200d      	movs	r0, #13
    3a60:	4b3d      	ldr	r3, [pc, #244]	; (3b58 <spi_data_read+0x1e8>)
    3a62:	4798      	blx	r3
			result = N_FAIL;
    3a64:	2311      	movs	r3, #17
    3a66:	18fb      	adds	r3, r7, r3
    3a68:	2200      	movs	r2, #0
    3a6a:	701a      	strb	r2, [r3, #0]
			break;
    3a6c:	e05d      	b.n	3b2a <spi_data_read+0x1ba>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    3a6e:	2314      	movs	r3, #20
    3a70:	18fb      	adds	r3, r7, r3
    3a72:	2200      	movs	r2, #0
    3a74:	5e9b      	ldrsh	r3, [r3, r2]
    3a76:	687a      	ldr	r2, [r7, #4]
    3a78:	18d2      	adds	r2, r2, r3
    3a7a:	2312      	movs	r3, #18
    3a7c:	18fb      	adds	r3, r7, r3
    3a7e:	881b      	ldrh	r3, [r3, #0]
    3a80:	0019      	movs	r1, r3
    3a82:	0010      	movs	r0, r2
    3a84:	4b2d      	ldr	r3, [pc, #180]	; (3b3c <spi_data_read+0x1cc>)
    3a86:	4798      	blx	r3
    3a88:	1e03      	subs	r3, r0, #0
    3a8a:	d012      	beq.n	3ab2 <spi_data_read+0x142>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    3a8c:	23c5      	movs	r3, #197	; 0xc5
    3a8e:	009a      	lsls	r2, r3, #2
    3a90:	492c      	ldr	r1, [pc, #176]	; (3b44 <spi_data_read+0x1d4>)
    3a92:	4b2d      	ldr	r3, [pc, #180]	; (3b48 <spi_data_read+0x1d8>)
    3a94:	0018      	movs	r0, r3
    3a96:	4b2d      	ldr	r3, [pc, #180]	; (3b4c <spi_data_read+0x1dc>)
    3a98:	4798      	blx	r3
    3a9a:	4b32      	ldr	r3, [pc, #200]	; (3b64 <spi_data_read+0x1f4>)
    3a9c:	0018      	movs	r0, r3
    3a9e:	4b2d      	ldr	r3, [pc, #180]	; (3b54 <spi_data_read+0x1e4>)
    3aa0:	4798      	blx	r3
    3aa2:	200d      	movs	r0, #13
    3aa4:	4b2c      	ldr	r3, [pc, #176]	; (3b58 <spi_data_read+0x1e8>)
    3aa6:	4798      	blx	r3
			result = N_FAIL;
    3aa8:	2311      	movs	r3, #17
    3aaa:	18fb      	adds	r3, r7, r3
    3aac:	2200      	movs	r2, #0
    3aae:	701a      	strb	r2, [r3, #0]
			break;
    3ab0:	e03b      	b.n	3b2a <spi_data_read+0x1ba>
		}
		if(!clockless)
    3ab2:	1c7b      	adds	r3, r7, #1
    3ab4:	781b      	ldrb	r3, [r3, #0]
    3ab6:	2b00      	cmp	r3, #0
    3ab8:	d11d      	bne.n	3af6 <spi_data_read+0x186>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    3aba:	4b2b      	ldr	r3, [pc, #172]	; (3b68 <spi_data_read+0x1f8>)
    3abc:	781b      	ldrb	r3, [r3, #0]
    3abe:	2b00      	cmp	r3, #0
    3ac0:	d119      	bne.n	3af6 <spi_data_read+0x186>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    3ac2:	230c      	movs	r3, #12
    3ac4:	18fb      	adds	r3, r7, r3
    3ac6:	2102      	movs	r1, #2
    3ac8:	0018      	movs	r0, r3
    3aca:	4b1c      	ldr	r3, [pc, #112]	; (3b3c <spi_data_read+0x1cc>)
    3acc:	4798      	blx	r3
    3ace:	1e03      	subs	r3, r0, #0
    3ad0:	d011      	beq.n	3af6 <spi_data_read+0x186>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    3ad2:	4a26      	ldr	r2, [pc, #152]	; (3b6c <spi_data_read+0x1fc>)
    3ad4:	491b      	ldr	r1, [pc, #108]	; (3b44 <spi_data_read+0x1d4>)
    3ad6:	4b1c      	ldr	r3, [pc, #112]	; (3b48 <spi_data_read+0x1d8>)
    3ad8:	0018      	movs	r0, r3
    3ada:	4b1c      	ldr	r3, [pc, #112]	; (3b4c <spi_data_read+0x1dc>)
    3adc:	4798      	blx	r3
    3ade:	4b24      	ldr	r3, [pc, #144]	; (3b70 <spi_data_read+0x200>)
    3ae0:	0018      	movs	r0, r3
    3ae2:	4b1c      	ldr	r3, [pc, #112]	; (3b54 <spi_data_read+0x1e4>)
    3ae4:	4798      	blx	r3
    3ae6:	200d      	movs	r0, #13
    3ae8:	4b1b      	ldr	r3, [pc, #108]	; (3b58 <spi_data_read+0x1e8>)
    3aea:	4798      	blx	r3
					result = N_FAIL;
    3aec:	2311      	movs	r3, #17
    3aee:	18fb      	adds	r3, r7, r3
    3af0:	2200      	movs	r2, #0
    3af2:	701a      	strb	r2, [r3, #0]
					break;
    3af4:	e019      	b.n	3b2a <spi_data_read+0x1ba>
				}
			}
		}
		ix += nbytes;
    3af6:	2314      	movs	r3, #20
    3af8:	18fb      	adds	r3, r7, r3
    3afa:	881a      	ldrh	r2, [r3, #0]
    3afc:	2312      	movs	r3, #18
    3afe:	18fb      	adds	r3, r7, r3
    3b00:	881b      	ldrh	r3, [r3, #0]
    3b02:	18d3      	adds	r3, r2, r3
    3b04:	b29a      	uxth	r2, r3
    3b06:	2314      	movs	r3, #20
    3b08:	18fb      	adds	r3, r7, r3
    3b0a:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    3b0c:	2312      	movs	r3, #18
    3b0e:	18fb      	adds	r3, r7, r3
    3b10:	881a      	ldrh	r2, [r3, #0]
    3b12:	1cbb      	adds	r3, r7, #2
    3b14:	1cb9      	adds	r1, r7, #2
    3b16:	8809      	ldrh	r1, [r1, #0]
    3b18:	1a8a      	subs	r2, r1, r2
    3b1a:	801a      	strh	r2, [r3, #0]

	} while (sz);
    3b1c:	1cbb      	adds	r3, r7, #2
    3b1e:	881b      	ldrh	r3, [r3, #0]
    3b20:	2b00      	cmp	r3, #0
    3b22:	d000      	beq.n	3b26 <spi_data_read+0x1b6>
    3b24:	e738      	b.n	3998 <spi_data_read+0x28>
    3b26:	e000      	b.n	3b2a <spi_data_read+0x1ba>
			break;
    3b28:	46c0      	nop			; (mov r8, r8)

	return result;
    3b2a:	2311      	movs	r3, #17
    3b2c:	18fb      	adds	r3, r7, r3
    3b2e:	781b      	ldrb	r3, [r3, #0]
    3b30:	b25b      	sxtb	r3, r3
}
    3b32:	0018      	movs	r0, r3
    3b34:	46bd      	mov	sp, r7
    3b36:	b006      	add	sp, #24
    3b38:	bd80      	pop	{r7, pc}
    3b3a:	46c0      	nop			; (mov r8, r8)
    3b3c:	000032ed 	.word	0x000032ed
    3b40:	000002ff 	.word	0x000002ff
    3b44:	000104d4 	.word	0x000104d4
    3b48:	0000ff1c 	.word	0x0000ff1c
    3b4c:	0000dfad 	.word	0x0000dfad
    3b50:	0000ffe0 	.word	0x0000ffe0
    3b54:	0000e0c9 	.word	0x0000e0c9
    3b58:	0000dfe1 	.word	0x0000dfe1
    3b5c:	0000030b 	.word	0x0000030b
    3b60:	00010014 	.word	0x00010014
    3b64:	00010044 	.word	0x00010044
    3b68:	20000214 	.word	0x20000214
    3b6c:	0000031f 	.word	0x0000031f
    3b70:	00010074 	.word	0x00010074

00003b74 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    3b74:	b580      	push	{r7, lr}
    3b76:	b086      	sub	sp, #24
    3b78:	af00      	add	r7, sp, #0
    3b7a:	6078      	str	r0, [r7, #4]
    3b7c:	000a      	movs	r2, r1
    3b7e:	1cbb      	adds	r3, r7, #2
    3b80:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    3b82:	2313      	movs	r3, #19
    3b84:	18fb      	adds	r3, r7, r3
    3b86:	2201      	movs	r2, #1
    3b88:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    3b8a:	230c      	movs	r3, #12
    3b8c:	18fb      	adds	r3, r7, r3
    3b8e:	2200      	movs	r2, #0
    3b90:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    3b92:	2316      	movs	r3, #22
    3b94:	18fb      	adds	r3, r7, r3
    3b96:	2200      	movs	r2, #0
    3b98:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    3b9a:	1cbb      	adds	r3, r7, #2
    3b9c:	881a      	ldrh	r2, [r3, #0]
    3b9e:	2380      	movs	r3, #128	; 0x80
    3ba0:	019b      	lsls	r3, r3, #6
    3ba2:	429a      	cmp	r2, r3
    3ba4:	d805      	bhi.n	3bb2 <spi_data_write+0x3e>
			nbytes = sz;
    3ba6:	2314      	movs	r3, #20
    3ba8:	18fb      	adds	r3, r7, r3
    3baa:	1cba      	adds	r2, r7, #2
    3bac:	8812      	ldrh	r2, [r2, #0]
    3bae:	801a      	strh	r2, [r3, #0]
    3bb0:	e004      	b.n	3bbc <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    3bb2:	2314      	movs	r3, #20
    3bb4:	18fb      	adds	r3, r7, r3
    3bb6:	2280      	movs	r2, #128	; 0x80
    3bb8:	0192      	lsls	r2, r2, #6
    3bba:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    3bbc:	2311      	movs	r3, #17
    3bbe:	18fb      	adds	r3, r7, r3
    3bc0:	22f0      	movs	r2, #240	; 0xf0
    3bc2:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    3bc4:	2316      	movs	r3, #22
    3bc6:	18fb      	adds	r3, r7, r3
    3bc8:	2200      	movs	r2, #0
    3bca:	5e9b      	ldrsh	r3, [r3, r2]
    3bcc:	2b00      	cmp	r3, #0
    3bce:	d10f      	bne.n	3bf0 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    3bd0:	1cbb      	adds	r3, r7, #2
    3bd2:	881a      	ldrh	r2, [r3, #0]
    3bd4:	2380      	movs	r3, #128	; 0x80
    3bd6:	019b      	lsls	r3, r3, #6
    3bd8:	429a      	cmp	r2, r3
    3bda:	d804      	bhi.n	3be6 <spi_data_write+0x72>
				order = 0x3;
    3bdc:	2312      	movs	r3, #18
    3bde:	18fb      	adds	r3, r7, r3
    3be0:	2203      	movs	r2, #3
    3be2:	701a      	strb	r2, [r3, #0]
    3be4:	e013      	b.n	3c0e <spi_data_write+0x9a>
			else
				order = 0x1;
    3be6:	2312      	movs	r3, #18
    3be8:	18fb      	adds	r3, r7, r3
    3bea:	2201      	movs	r2, #1
    3bec:	701a      	strb	r2, [r3, #0]
    3bee:	e00e      	b.n	3c0e <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    3bf0:	1cbb      	adds	r3, r7, #2
    3bf2:	881a      	ldrh	r2, [r3, #0]
    3bf4:	2380      	movs	r3, #128	; 0x80
    3bf6:	019b      	lsls	r3, r3, #6
    3bf8:	429a      	cmp	r2, r3
    3bfa:	d804      	bhi.n	3c06 <spi_data_write+0x92>
				order = 0x3;
    3bfc:	2312      	movs	r3, #18
    3bfe:	18fb      	adds	r3, r7, r3
    3c00:	2203      	movs	r2, #3
    3c02:	701a      	strb	r2, [r3, #0]
    3c04:	e003      	b.n	3c0e <spi_data_write+0x9a>
			else
				order = 0x2;
    3c06:	2312      	movs	r3, #18
    3c08:	18fb      	adds	r3, r7, r3
    3c0a:	2202      	movs	r2, #2
    3c0c:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    3c0e:	2311      	movs	r3, #17
    3c10:	18fb      	adds	r3, r7, r3
    3c12:	781a      	ldrb	r2, [r3, #0]
    3c14:	2312      	movs	r3, #18
    3c16:	18fb      	adds	r3, r7, r3
    3c18:	781b      	ldrb	r3, [r3, #0]
    3c1a:	4313      	orrs	r3, r2
    3c1c:	b2da      	uxtb	r2, r3
    3c1e:	2311      	movs	r3, #17
    3c20:	18fb      	adds	r3, r7, r3
    3c22:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    3c24:	2311      	movs	r3, #17
    3c26:	18fb      	adds	r3, r7, r3
    3c28:	2101      	movs	r1, #1
    3c2a:	0018      	movs	r0, r3
    3c2c:	4b3a      	ldr	r3, [pc, #232]	; (3d18 <spi_data_write+0x1a4>)
    3c2e:	4798      	blx	r3
    3c30:	1e03      	subs	r3, r0, #0
    3c32:	d012      	beq.n	3c5a <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    3c34:	23d4      	movs	r3, #212	; 0xd4
    3c36:	009a      	lsls	r2, r3, #2
    3c38:	4938      	ldr	r1, [pc, #224]	; (3d1c <spi_data_write+0x1a8>)
    3c3a:	4b39      	ldr	r3, [pc, #228]	; (3d20 <spi_data_write+0x1ac>)
    3c3c:	0018      	movs	r0, r3
    3c3e:	4b39      	ldr	r3, [pc, #228]	; (3d24 <spi_data_write+0x1b0>)
    3c40:	4798      	blx	r3
    3c42:	4b39      	ldr	r3, [pc, #228]	; (3d28 <spi_data_write+0x1b4>)
    3c44:	0018      	movs	r0, r3
    3c46:	4b39      	ldr	r3, [pc, #228]	; (3d2c <spi_data_write+0x1b8>)
    3c48:	4798      	blx	r3
    3c4a:	200d      	movs	r0, #13
    3c4c:	4b38      	ldr	r3, [pc, #224]	; (3d30 <spi_data_write+0x1bc>)
    3c4e:	4798      	blx	r3
			result = N_FAIL;
    3c50:	2313      	movs	r3, #19
    3c52:	18fb      	adds	r3, r7, r3
    3c54:	2200      	movs	r2, #0
    3c56:	701a      	strb	r2, [r3, #0]
			break;
    3c58:	e056      	b.n	3d08 <spi_data_write+0x194>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    3c5a:	2316      	movs	r3, #22
    3c5c:	18fb      	adds	r3, r7, r3
    3c5e:	2200      	movs	r2, #0
    3c60:	5e9b      	ldrsh	r3, [r3, r2]
    3c62:	687a      	ldr	r2, [r7, #4]
    3c64:	18d2      	adds	r2, r2, r3
    3c66:	2314      	movs	r3, #20
    3c68:	18fb      	adds	r3, r7, r3
    3c6a:	881b      	ldrh	r3, [r3, #0]
    3c6c:	0019      	movs	r1, r3
    3c6e:	0010      	movs	r0, r2
    3c70:	4b29      	ldr	r3, [pc, #164]	; (3d18 <spi_data_write+0x1a4>)
    3c72:	4798      	blx	r3
    3c74:	1e03      	subs	r3, r0, #0
    3c76:	d011      	beq.n	3c9c <spi_data_write+0x128>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    3c78:	4a2e      	ldr	r2, [pc, #184]	; (3d34 <spi_data_write+0x1c0>)
    3c7a:	4928      	ldr	r1, [pc, #160]	; (3d1c <spi_data_write+0x1a8>)
    3c7c:	4b28      	ldr	r3, [pc, #160]	; (3d20 <spi_data_write+0x1ac>)
    3c7e:	0018      	movs	r0, r3
    3c80:	4b28      	ldr	r3, [pc, #160]	; (3d24 <spi_data_write+0x1b0>)
    3c82:	4798      	blx	r3
    3c84:	4b2c      	ldr	r3, [pc, #176]	; (3d38 <spi_data_write+0x1c4>)
    3c86:	0018      	movs	r0, r3
    3c88:	4b28      	ldr	r3, [pc, #160]	; (3d2c <spi_data_write+0x1b8>)
    3c8a:	4798      	blx	r3
    3c8c:	200d      	movs	r0, #13
    3c8e:	4b28      	ldr	r3, [pc, #160]	; (3d30 <spi_data_write+0x1bc>)
    3c90:	4798      	blx	r3
			result = N_FAIL;
    3c92:	2313      	movs	r3, #19
    3c94:	18fb      	adds	r3, r7, r3
    3c96:	2200      	movs	r2, #0
    3c98:	701a      	strb	r2, [r3, #0]
			break;
    3c9a:	e035      	b.n	3d08 <spi_data_write+0x194>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    3c9c:	4b27      	ldr	r3, [pc, #156]	; (3d3c <spi_data_write+0x1c8>)
    3c9e:	781b      	ldrb	r3, [r3, #0]
    3ca0:	2b00      	cmp	r3, #0
    3ca2:	d119      	bne.n	3cd8 <spi_data_write+0x164>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    3ca4:	230c      	movs	r3, #12
    3ca6:	18fb      	adds	r3, r7, r3
    3ca8:	2102      	movs	r1, #2
    3caa:	0018      	movs	r0, r3
    3cac:	4b1a      	ldr	r3, [pc, #104]	; (3d18 <spi_data_write+0x1a4>)
    3cae:	4798      	blx	r3
    3cb0:	1e03      	subs	r3, r0, #0
    3cb2:	d011      	beq.n	3cd8 <spi_data_write+0x164>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    3cb4:	4a22      	ldr	r2, [pc, #136]	; (3d40 <spi_data_write+0x1cc>)
    3cb6:	4919      	ldr	r1, [pc, #100]	; (3d1c <spi_data_write+0x1a8>)
    3cb8:	4b19      	ldr	r3, [pc, #100]	; (3d20 <spi_data_write+0x1ac>)
    3cba:	0018      	movs	r0, r3
    3cbc:	4b19      	ldr	r3, [pc, #100]	; (3d24 <spi_data_write+0x1b0>)
    3cbe:	4798      	blx	r3
    3cc0:	4b20      	ldr	r3, [pc, #128]	; (3d44 <spi_data_write+0x1d0>)
    3cc2:	0018      	movs	r0, r3
    3cc4:	4b19      	ldr	r3, [pc, #100]	; (3d2c <spi_data_write+0x1b8>)
    3cc6:	4798      	blx	r3
    3cc8:	200d      	movs	r0, #13
    3cca:	4b19      	ldr	r3, [pc, #100]	; (3d30 <spi_data_write+0x1bc>)
    3ccc:	4798      	blx	r3
				result = N_FAIL;
    3cce:	2313      	movs	r3, #19
    3cd0:	18fb      	adds	r3, r7, r3
    3cd2:	2200      	movs	r2, #0
    3cd4:	701a      	strb	r2, [r3, #0]
				break;
    3cd6:	e017      	b.n	3d08 <spi_data_write+0x194>
			}
		}

		ix += nbytes;
    3cd8:	2316      	movs	r3, #22
    3cda:	18fb      	adds	r3, r7, r3
    3cdc:	881a      	ldrh	r2, [r3, #0]
    3cde:	2314      	movs	r3, #20
    3ce0:	18fb      	adds	r3, r7, r3
    3ce2:	881b      	ldrh	r3, [r3, #0]
    3ce4:	18d3      	adds	r3, r2, r3
    3ce6:	b29a      	uxth	r2, r3
    3ce8:	2316      	movs	r3, #22
    3cea:	18fb      	adds	r3, r7, r3
    3cec:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    3cee:	1cbb      	adds	r3, r7, #2
    3cf0:	1cb9      	adds	r1, r7, #2
    3cf2:	2214      	movs	r2, #20
    3cf4:	18ba      	adds	r2, r7, r2
    3cf6:	8809      	ldrh	r1, [r1, #0]
    3cf8:	8812      	ldrh	r2, [r2, #0]
    3cfa:	1a8a      	subs	r2, r1, r2
    3cfc:	801a      	strh	r2, [r3, #0]
	} while (sz);
    3cfe:	1cbb      	adds	r3, r7, #2
    3d00:	881b      	ldrh	r3, [r3, #0]
    3d02:	2b00      	cmp	r3, #0
    3d04:	d000      	beq.n	3d08 <spi_data_write+0x194>
    3d06:	e748      	b.n	3b9a <spi_data_write+0x26>


	return result;
    3d08:	2313      	movs	r3, #19
    3d0a:	18fb      	adds	r3, r7, r3
    3d0c:	781b      	ldrb	r3, [r3, #0]
    3d0e:	b25b      	sxtb	r3, r3
}
    3d10:	0018      	movs	r0, r3
    3d12:	46bd      	mov	sp, r7
    3d14:	b006      	add	sp, #24
    3d16:	bd80      	pop	{r7, pc}
    3d18:	00003331 	.word	0x00003331
    3d1c:	000104e4 	.word	0x000104e4
    3d20:	0000ff1c 	.word	0x0000ff1c
    3d24:	0000dfad 	.word	0x0000dfad
    3d28:	000100a8 	.word	0x000100a8
    3d2c:	0000e0c9 	.word	0x0000e0c9
    3d30:	0000dfe1 	.word	0x0000dfe1
    3d34:	00000359 	.word	0x00000359
    3d38:	000100e0 	.word	0x000100e0
    3d3c:	20000214 	.word	0x20000214
    3d40:	00000363 	.word	0x00000363
    3d44:	00010114 	.word	0x00010114

00003d48 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    3d48:	b5b0      	push	{r4, r5, r7, lr}
    3d4a:	b086      	sub	sp, #24
    3d4c:	af02      	add	r7, sp, #8
    3d4e:	6078      	str	r0, [r7, #4]
    3d50:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    3d52:	230f      	movs	r3, #15
    3d54:	18fb      	adds	r3, r7, r3
    3d56:	220a      	movs	r2, #10
    3d58:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    3d5a:	230e      	movs	r3, #14
    3d5c:	18fb      	adds	r3, r7, r3
    3d5e:	2201      	movs	r2, #1
    3d60:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    3d62:	230d      	movs	r3, #13
    3d64:	18fb      	adds	r3, r7, r3
    3d66:	22c9      	movs	r2, #201	; 0xc9
    3d68:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    3d6a:	230c      	movs	r3, #12
    3d6c:	18fb      	adds	r3, r7, r3
    3d6e:	2200      	movs	r2, #0
    3d70:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
    3d72:	687b      	ldr	r3, [r7, #4]
    3d74:	2b30      	cmp	r3, #48	; 0x30
    3d76:	d808      	bhi.n	3d8a <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    3d78:	230d      	movs	r3, #13
    3d7a:	18fb      	adds	r3, r7, r3
    3d7c:	22c3      	movs	r2, #195	; 0xc3
    3d7e:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    3d80:	230c      	movs	r3, #12
    3d82:	18fb      	adds	r3, r7, r3
    3d84:	2201      	movs	r2, #1
    3d86:	701a      	strb	r2, [r3, #0]
    3d88:	e007      	b.n	3d9a <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    3d8a:	230d      	movs	r3, #13
    3d8c:	18fb      	adds	r3, r7, r3
    3d8e:	22c9      	movs	r2, #201	; 0xc9
    3d90:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    3d92:	230c      	movs	r3, #12
    3d94:	18fb      	adds	r3, r7, r3
    3d96:	2200      	movs	r2, #0
    3d98:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    3d9a:	230e      	movs	r3, #14
    3d9c:	18fc      	adds	r4, r7, r3
    3d9e:	683a      	ldr	r2, [r7, #0]
    3da0:	6879      	ldr	r1, [r7, #4]
    3da2:	230d      	movs	r3, #13
    3da4:	18fb      	adds	r3, r7, r3
    3da6:	7818      	ldrb	r0, [r3, #0]
    3da8:	230c      	movs	r3, #12
    3daa:	18fb      	adds	r3, r7, r3
    3dac:	781b      	ldrb	r3, [r3, #0]
    3dae:	9300      	str	r3, [sp, #0]
    3db0:	2304      	movs	r3, #4
    3db2:	4d3c      	ldr	r5, [pc, #240]	; (3ea4 <spi_write_reg+0x15c>)
    3db4:	47a8      	blx	r5
    3db6:	0003      	movs	r3, r0
    3db8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3dba:	230e      	movs	r3, #14
    3dbc:	18fb      	adds	r3, r7, r3
    3dbe:	781b      	ldrb	r3, [r3, #0]
    3dc0:	b25b      	sxtb	r3, r3
    3dc2:	2b01      	cmp	r3, #1
    3dc4:	d00f      	beq.n	3de6 <spi_write_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    3dc6:	4a38      	ldr	r2, [pc, #224]	; (3ea8 <spi_write_reg+0x160>)
    3dc8:	4938      	ldr	r1, [pc, #224]	; (3eac <spi_write_reg+0x164>)
    3dca:	4b39      	ldr	r3, [pc, #228]	; (3eb0 <spi_write_reg+0x168>)
    3dcc:	0018      	movs	r0, r3
    3dce:	4b39      	ldr	r3, [pc, #228]	; (3eb4 <spi_write_reg+0x16c>)
    3dd0:	4798      	blx	r3
    3dd2:	687a      	ldr	r2, [r7, #4]
    3dd4:	4b38      	ldr	r3, [pc, #224]	; (3eb8 <spi_write_reg+0x170>)
    3dd6:	0011      	movs	r1, r2
    3dd8:	0018      	movs	r0, r3
    3dda:	4b36      	ldr	r3, [pc, #216]	; (3eb4 <spi_write_reg+0x16c>)
    3ddc:	4798      	blx	r3
    3dde:	200d      	movs	r0, #13
    3de0:	4b36      	ldr	r3, [pc, #216]	; (3ebc <spi_write_reg+0x174>)
    3de2:	4798      	blx	r3
		goto _FAIL_;
    3de4:	e020      	b.n	3e28 <spi_write_reg+0xe0>
	}

	result = spi_cmd_rsp(cmd);
    3de6:	230e      	movs	r3, #14
    3de8:	18fc      	adds	r4, r7, r3
    3dea:	230d      	movs	r3, #13
    3dec:	18fb      	adds	r3, r7, r3
    3dee:	781b      	ldrb	r3, [r3, #0]
    3df0:	0018      	movs	r0, r3
    3df2:	4b33      	ldr	r3, [pc, #204]	; (3ec0 <spi_write_reg+0x178>)
    3df4:	4798      	blx	r3
    3df6:	0003      	movs	r3, r0
    3df8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3dfa:	230e      	movs	r3, #14
    3dfc:	18fb      	adds	r3, r7, r3
    3dfe:	781b      	ldrb	r3, [r3, #0]
    3e00:	b25b      	sxtb	r3, r3
    3e02:	2b01      	cmp	r3, #1
    3e04:	d010      	beq.n	3e28 <spi_write_reg+0xe0>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    3e06:	23e7      	movs	r3, #231	; 0xe7
    3e08:	009a      	lsls	r2, r3, #2
    3e0a:	4928      	ldr	r1, [pc, #160]	; (3eac <spi_write_reg+0x164>)
    3e0c:	4b28      	ldr	r3, [pc, #160]	; (3eb0 <spi_write_reg+0x168>)
    3e0e:	0018      	movs	r0, r3
    3e10:	4b28      	ldr	r3, [pc, #160]	; (3eb4 <spi_write_reg+0x16c>)
    3e12:	4798      	blx	r3
    3e14:	687a      	ldr	r2, [r7, #4]
    3e16:	4b2b      	ldr	r3, [pc, #172]	; (3ec4 <spi_write_reg+0x17c>)
    3e18:	0011      	movs	r1, r2
    3e1a:	0018      	movs	r0, r3
    3e1c:	4b25      	ldr	r3, [pc, #148]	; (3eb4 <spi_write_reg+0x16c>)
    3e1e:	4798      	blx	r3
    3e20:	200d      	movs	r0, #13
    3e22:	4b26      	ldr	r3, [pc, #152]	; (3ebc <spi_write_reg+0x174>)
    3e24:	4798      	blx	r3
		goto _FAIL_;
    3e26:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
    3e28:	230e      	movs	r3, #14
    3e2a:	18fb      	adds	r3, r7, r3
    3e2c:	781b      	ldrb	r3, [r3, #0]
    3e2e:	b25b      	sxtb	r3, r3
    3e30:	2b01      	cmp	r3, #1
    3e32:	d02e      	beq.n	3e92 <spi_write_reg+0x14a>
	{
		nm_bsp_sleep(1);
    3e34:	2001      	movs	r0, #1
    3e36:	4b24      	ldr	r3, [pc, #144]	; (3ec8 <spi_write_reg+0x180>)
    3e38:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3e3a:	2300      	movs	r3, #0
    3e3c:	9300      	str	r3, [sp, #0]
    3e3e:	2300      	movs	r3, #0
    3e40:	2200      	movs	r2, #0
    3e42:	2100      	movs	r1, #0
    3e44:	20cf      	movs	r0, #207	; 0xcf
    3e46:	4c17      	ldr	r4, [pc, #92]	; (3ea4 <spi_write_reg+0x15c>)
    3e48:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    3e4a:	20cf      	movs	r0, #207	; 0xcf
    3e4c:	4b1c      	ldr	r3, [pc, #112]	; (3ec0 <spi_write_reg+0x178>)
    3e4e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    3e50:	4a1e      	ldr	r2, [pc, #120]	; (3ecc <spi_write_reg+0x184>)
    3e52:	4916      	ldr	r1, [pc, #88]	; (3eac <spi_write_reg+0x164>)
    3e54:	4b16      	ldr	r3, [pc, #88]	; (3eb0 <spi_write_reg+0x168>)
    3e56:	0018      	movs	r0, r3
    3e58:	4b16      	ldr	r3, [pc, #88]	; (3eb4 <spi_write_reg+0x16c>)
    3e5a:	4798      	blx	r3
    3e5c:	230f      	movs	r3, #15
    3e5e:	18fb      	adds	r3, r7, r3
    3e60:	7819      	ldrb	r1, [r3, #0]
    3e62:	683b      	ldr	r3, [r7, #0]
    3e64:	687a      	ldr	r2, [r7, #4]
    3e66:	481a      	ldr	r0, [pc, #104]	; (3ed0 <spi_write_reg+0x188>)
    3e68:	4c12      	ldr	r4, [pc, #72]	; (3eb4 <spi_write_reg+0x16c>)
    3e6a:	47a0      	blx	r4
    3e6c:	200d      	movs	r0, #13
    3e6e:	4b13      	ldr	r3, [pc, #76]	; (3ebc <spi_write_reg+0x174>)
    3e70:	4798      	blx	r3
		nm_bsp_sleep(1);
    3e72:	2001      	movs	r0, #1
    3e74:	4b14      	ldr	r3, [pc, #80]	; (3ec8 <spi_write_reg+0x180>)
    3e76:	4798      	blx	r3
		retry--;
    3e78:	230f      	movs	r3, #15
    3e7a:	18fb      	adds	r3, r7, r3
    3e7c:	781a      	ldrb	r2, [r3, #0]
    3e7e:	230f      	movs	r3, #15
    3e80:	18fb      	adds	r3, r7, r3
    3e82:	3a01      	subs	r2, #1
    3e84:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    3e86:	230f      	movs	r3, #15
    3e88:	18fb      	adds	r3, r7, r3
    3e8a:	781b      	ldrb	r3, [r3, #0]
    3e8c:	2b00      	cmp	r3, #0
    3e8e:	d000      	beq.n	3e92 <spi_write_reg+0x14a>
    3e90:	e76f      	b.n	3d72 <spi_write_reg+0x2a>
	}

	return result;
    3e92:	230e      	movs	r3, #14
    3e94:	18fb      	adds	r3, r7, r3
    3e96:	781b      	ldrb	r3, [r3, #0]
    3e98:	b25b      	sxtb	r3, r3
}
    3e9a:	0018      	movs	r0, r3
    3e9c:	46bd      	mov	sp, r7
    3e9e:	b004      	add	sp, #16
    3ea0:	bdb0      	pop	{r4, r5, r7, pc}
    3ea2:	46c0      	nop			; (mov r8, r8)
    3ea4:	000033f5 	.word	0x000033f5
    3ea8:	00000396 	.word	0x00000396
    3eac:	000104f4 	.word	0x000104f4
    3eb0:	0000ff1c 	.word	0x0000ff1c
    3eb4:	0000dfad 	.word	0x0000dfad
    3eb8:	0001014c 	.word	0x0001014c
    3ebc:	0000dfe1 	.word	0x0000dfe1
    3ec0:	00003839 	.word	0x00003839
    3ec4:	00010178 	.word	0x00010178
    3ec8:	00000335 	.word	0x00000335
    3ecc:	000003af 	.word	0x000003af
    3ed0:	000101b0 	.word	0x000101b0

00003ed4 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    3ed4:	b5b0      	push	{r4, r5, r7, lr}
    3ed6:	b088      	sub	sp, #32
    3ed8:	af02      	add	r7, sp, #8
    3eda:	60f8      	str	r0, [r7, #12]
    3edc:	60b9      	str	r1, [r7, #8]
    3ede:	1dbb      	adds	r3, r7, #6
    3ee0:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    3ee2:	2316      	movs	r3, #22
    3ee4:	18fb      	adds	r3, r7, r3
    3ee6:	220a      	movs	r2, #10
    3ee8:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
    3eea:	2315      	movs	r3, #21
    3eec:	18fb      	adds	r3, r7, r3
    3eee:	22c7      	movs	r2, #199	; 0xc7
    3ef0:	701a      	strb	r2, [r3, #0]
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    3ef2:	1dbb      	adds	r3, r7, #6
    3ef4:	881b      	ldrh	r3, [r3, #0]
    3ef6:	2b01      	cmp	r3, #1
    3ef8:	d102      	bne.n	3f00 <nm_spi_write+0x2c>
		size = 2;
    3efa:	1dbb      	adds	r3, r7, #6
    3efc:	2202      	movs	r2, #2
    3efe:	801a      	strh	r2, [r3, #0]

	result = spi_cmd(cmd, addr, 0, size,0);
    3f00:	1dbb      	adds	r3, r7, #6
    3f02:	881a      	ldrh	r2, [r3, #0]
    3f04:	2317      	movs	r3, #23
    3f06:	18fc      	adds	r4, r7, r3
    3f08:	68f9      	ldr	r1, [r7, #12]
    3f0a:	2315      	movs	r3, #21
    3f0c:	18fb      	adds	r3, r7, r3
    3f0e:	7818      	ldrb	r0, [r3, #0]
    3f10:	2300      	movs	r3, #0
    3f12:	9300      	str	r3, [sp, #0]
    3f14:	0013      	movs	r3, r2
    3f16:	2200      	movs	r2, #0
    3f18:	4d5b      	ldr	r5, [pc, #364]	; (4088 <nm_spi_write+0x1b4>)
    3f1a:	47a8      	blx	r5
    3f1c:	0003      	movs	r3, r0
    3f1e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3f20:	2317      	movs	r3, #23
    3f22:	18fb      	adds	r3, r7, r3
    3f24:	781b      	ldrb	r3, [r3, #0]
    3f26:	b25b      	sxtb	r3, r3
    3f28:	2b01      	cmp	r3, #1
    3f2a:	d00f      	beq.n	3f4c <nm_spi_write+0x78>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    3f2c:	4a57      	ldr	r2, [pc, #348]	; (408c <nm_spi_write+0x1b8>)
    3f2e:	4958      	ldr	r1, [pc, #352]	; (4090 <nm_spi_write+0x1bc>)
    3f30:	4b58      	ldr	r3, [pc, #352]	; (4094 <nm_spi_write+0x1c0>)
    3f32:	0018      	movs	r0, r3
    3f34:	4b58      	ldr	r3, [pc, #352]	; (4098 <nm_spi_write+0x1c4>)
    3f36:	4798      	blx	r3
    3f38:	68fa      	ldr	r2, [r7, #12]
    3f3a:	4b58      	ldr	r3, [pc, #352]	; (409c <nm_spi_write+0x1c8>)
    3f3c:	0011      	movs	r1, r2
    3f3e:	0018      	movs	r0, r3
    3f40:	4b55      	ldr	r3, [pc, #340]	; (4098 <nm_spi_write+0x1c4>)
    3f42:	4798      	blx	r3
    3f44:	200d      	movs	r0, #13
    3f46:	4b56      	ldr	r3, [pc, #344]	; (40a0 <nm_spi_write+0x1cc>)
    3f48:	4798      	blx	r3
		goto _FAIL_;
    3f4a:	e05f      	b.n	400c <nm_spi_write+0x138>
	}

	result = spi_cmd_rsp(cmd);
    3f4c:	2317      	movs	r3, #23
    3f4e:	18fc      	adds	r4, r7, r3
    3f50:	2315      	movs	r3, #21
    3f52:	18fb      	adds	r3, r7, r3
    3f54:	781b      	ldrb	r3, [r3, #0]
    3f56:	0018      	movs	r0, r3
    3f58:	4b52      	ldr	r3, [pc, #328]	; (40a4 <nm_spi_write+0x1d0>)
    3f5a:	4798      	blx	r3
    3f5c:	0003      	movs	r3, r0
    3f5e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3f60:	2317      	movs	r3, #23
    3f62:	18fb      	adds	r3, r7, r3
    3f64:	781b      	ldrb	r3, [r3, #0]
    3f66:	b25b      	sxtb	r3, r3
    3f68:	2b01      	cmp	r3, #1
    3f6a:	d010      	beq.n	3f8e <nm_spi_write+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    3f6c:	23f4      	movs	r3, #244	; 0xf4
    3f6e:	009a      	lsls	r2, r3, #2
    3f70:	4947      	ldr	r1, [pc, #284]	; (4090 <nm_spi_write+0x1bc>)
    3f72:	4b48      	ldr	r3, [pc, #288]	; (4094 <nm_spi_write+0x1c0>)
    3f74:	0018      	movs	r0, r3
    3f76:	4b48      	ldr	r3, [pc, #288]	; (4098 <nm_spi_write+0x1c4>)
    3f78:	4798      	blx	r3
    3f7a:	68fa      	ldr	r2, [r7, #12]
    3f7c:	4b4a      	ldr	r3, [pc, #296]	; (40a8 <nm_spi_write+0x1d4>)
    3f7e:	0011      	movs	r1, r2
    3f80:	0018      	movs	r0, r3
    3f82:	4b45      	ldr	r3, [pc, #276]	; (4098 <nm_spi_write+0x1c4>)
    3f84:	4798      	blx	r3
    3f86:	200d      	movs	r0, #13
    3f88:	4b45      	ldr	r3, [pc, #276]	; (40a0 <nm_spi_write+0x1cc>)
    3f8a:	4798      	blx	r3
		goto _FAIL_;
    3f8c:	e03e      	b.n	400c <nm_spi_write+0x138>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    3f8e:	2317      	movs	r3, #23
    3f90:	18fc      	adds	r4, r7, r3
    3f92:	1dbb      	adds	r3, r7, #6
    3f94:	881a      	ldrh	r2, [r3, #0]
    3f96:	68bb      	ldr	r3, [r7, #8]
    3f98:	0011      	movs	r1, r2
    3f9a:	0018      	movs	r0, r3
    3f9c:	4b43      	ldr	r3, [pc, #268]	; (40ac <nm_spi_write+0x1d8>)
    3f9e:	4798      	blx	r3
    3fa0:	0003      	movs	r3, r0
    3fa2:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3fa4:	2317      	movs	r3, #23
    3fa6:	18fb      	adds	r3, r7, r3
    3fa8:	781b      	ldrb	r3, [r3, #0]
    3faa:	b25b      	sxtb	r3, r3
    3fac:	2b01      	cmp	r3, #1
    3fae:	d00e      	beq.n	3fce <nm_spi_write+0xfa>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3fb0:	23f8      	movs	r3, #248	; 0xf8
    3fb2:	009a      	lsls	r2, r3, #2
    3fb4:	4936      	ldr	r1, [pc, #216]	; (4090 <nm_spi_write+0x1bc>)
    3fb6:	4b37      	ldr	r3, [pc, #220]	; (4094 <nm_spi_write+0x1c0>)
    3fb8:	0018      	movs	r0, r3
    3fba:	4b37      	ldr	r3, [pc, #220]	; (4098 <nm_spi_write+0x1c4>)
    3fbc:	4798      	blx	r3
    3fbe:	4b3c      	ldr	r3, [pc, #240]	; (40b0 <nm_spi_write+0x1dc>)
    3fc0:	0018      	movs	r0, r3
    3fc2:	4b3c      	ldr	r3, [pc, #240]	; (40b4 <nm_spi_write+0x1e0>)
    3fc4:	4798      	blx	r3
    3fc6:	200d      	movs	r0, #13
    3fc8:	4b35      	ldr	r3, [pc, #212]	; (40a0 <nm_spi_write+0x1cc>)
    3fca:	4798      	blx	r3
		goto _FAIL_;
    3fcc:	e01e      	b.n	400c <nm_spi_write+0x138>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
    3fce:	2317      	movs	r3, #23
    3fd0:	18fc      	adds	r4, r7, r3
    3fd2:	2315      	movs	r3, #21
    3fd4:	18fb      	adds	r3, r7, r3
    3fd6:	781b      	ldrb	r3, [r3, #0]
    3fd8:	0018      	movs	r0, r3
    3fda:	4b37      	ldr	r3, [pc, #220]	; (40b8 <nm_spi_write+0x1e4>)
    3fdc:	4798      	blx	r3
    3fde:	0003      	movs	r3, r0
    3fe0:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3fe2:	2317      	movs	r3, #23
    3fe4:	18fb      	adds	r3, r7, r3
    3fe6:	781b      	ldrb	r3, [r3, #0]
    3fe8:	b25b      	sxtb	r3, r3
    3fea:	2b01      	cmp	r3, #1
    3fec:	d00e      	beq.n	400c <nm_spi_write+0x138>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3fee:	23fa      	movs	r3, #250	; 0xfa
    3ff0:	009a      	lsls	r2, r3, #2
    3ff2:	4927      	ldr	r1, [pc, #156]	; (4090 <nm_spi_write+0x1bc>)
    3ff4:	4b27      	ldr	r3, [pc, #156]	; (4094 <nm_spi_write+0x1c0>)
    3ff6:	0018      	movs	r0, r3
    3ff8:	4b27      	ldr	r3, [pc, #156]	; (4098 <nm_spi_write+0x1c4>)
    3ffa:	4798      	blx	r3
    3ffc:	4b2c      	ldr	r3, [pc, #176]	; (40b0 <nm_spi_write+0x1dc>)
    3ffe:	0018      	movs	r0, r3
    4000:	4b2c      	ldr	r3, [pc, #176]	; (40b4 <nm_spi_write+0x1e0>)
    4002:	4798      	blx	r3
    4004:	200d      	movs	r0, #13
    4006:	4b26      	ldr	r3, [pc, #152]	; (40a0 <nm_spi_write+0x1cc>)
    4008:	4798      	blx	r3
		goto _FAIL_;
    400a:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
    400c:	2317      	movs	r3, #23
    400e:	18fb      	adds	r3, r7, r3
    4010:	781b      	ldrb	r3, [r3, #0]
    4012:	b25b      	sxtb	r3, r3
    4014:	2b01      	cmp	r3, #1
    4016:	d02f      	beq.n	4078 <nm_spi_write+0x1a4>
	{
		nm_bsp_sleep(1);
    4018:	2001      	movs	r0, #1
    401a:	4b28      	ldr	r3, [pc, #160]	; (40bc <nm_spi_write+0x1e8>)
    401c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    401e:	2300      	movs	r3, #0
    4020:	9300      	str	r3, [sp, #0]
    4022:	2300      	movs	r3, #0
    4024:	2200      	movs	r2, #0
    4026:	2100      	movs	r1, #0
    4028:	20cf      	movs	r0, #207	; 0xcf
    402a:	4c17      	ldr	r4, [pc, #92]	; (4088 <nm_spi_write+0x1b4>)
    402c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    402e:	20cf      	movs	r0, #207	; 0xcf
    4030:	4b1c      	ldr	r3, [pc, #112]	; (40a4 <nm_spi_write+0x1d0>)
    4032:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    4034:	4a22      	ldr	r2, [pc, #136]	; (40c0 <nm_spi_write+0x1ec>)
    4036:	4916      	ldr	r1, [pc, #88]	; (4090 <nm_spi_write+0x1bc>)
    4038:	4b16      	ldr	r3, [pc, #88]	; (4094 <nm_spi_write+0x1c0>)
    403a:	0018      	movs	r0, r3
    403c:	4b16      	ldr	r3, [pc, #88]	; (4098 <nm_spi_write+0x1c4>)
    403e:	4798      	blx	r3
    4040:	2316      	movs	r3, #22
    4042:	18fb      	adds	r3, r7, r3
    4044:	7819      	ldrb	r1, [r3, #0]
    4046:	1dbb      	adds	r3, r7, #6
    4048:	881b      	ldrh	r3, [r3, #0]
    404a:	68fa      	ldr	r2, [r7, #12]
    404c:	481d      	ldr	r0, [pc, #116]	; (40c4 <nm_spi_write+0x1f0>)
    404e:	4c12      	ldr	r4, [pc, #72]	; (4098 <nm_spi_write+0x1c4>)
    4050:	47a0      	blx	r4
    4052:	200d      	movs	r0, #13
    4054:	4b12      	ldr	r3, [pc, #72]	; (40a0 <nm_spi_write+0x1cc>)
    4056:	4798      	blx	r3
		nm_bsp_sleep(1);
    4058:	2001      	movs	r0, #1
    405a:	4b18      	ldr	r3, [pc, #96]	; (40bc <nm_spi_write+0x1e8>)
    405c:	4798      	blx	r3
		retry--;
    405e:	2316      	movs	r3, #22
    4060:	18fb      	adds	r3, r7, r3
    4062:	781a      	ldrb	r2, [r3, #0]
    4064:	2316      	movs	r3, #22
    4066:	18fb      	adds	r3, r7, r3
    4068:	3a01      	subs	r2, #1
    406a:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    406c:	2316      	movs	r3, #22
    406e:	18fb      	adds	r3, r7, r3
    4070:	781b      	ldrb	r3, [r3, #0]
    4072:	2b00      	cmp	r3, #0
    4074:	d000      	beq.n	4078 <nm_spi_write+0x1a4>
    4076:	e73c      	b.n	3ef2 <nm_spi_write+0x1e>
	}


	return result;
    4078:	2317      	movs	r3, #23
    407a:	18fb      	adds	r3, r7, r3
    407c:	781b      	ldrb	r3, [r3, #0]
    407e:	b25b      	sxtb	r3, r3
}
    4080:	0018      	movs	r0, r3
    4082:	46bd      	mov	sp, r7
    4084:	b006      	add	sp, #24
    4086:	bdb0      	pop	{r4, r5, r7, pc}
    4088:	000033f5 	.word	0x000033f5
    408c:	000003ca 	.word	0x000003ca
    4090:	00010504 	.word	0x00010504
    4094:	0000ff1c 	.word	0x0000ff1c
    4098:	0000dfad 	.word	0x0000dfad
    409c:	000101cc 	.word	0x000101cc
    40a0:	0000dfe1 	.word	0x0000dfe1
    40a4:	00003839 	.word	0x00003839
    40a8:	000101fc 	.word	0x000101fc
    40ac:	00003b75 	.word	0x00003b75
    40b0:	00010234 	.word	0x00010234
    40b4:	0000e0c9 	.word	0x0000e0c9
    40b8:	00003739 	.word	0x00003739
    40bc:	00000335 	.word	0x00000335
    40c0:	000003f2 	.word	0x000003f2
    40c4:	0001025c 	.word	0x0001025c

000040c8 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    40c8:	b5b0      	push	{r4, r5, r7, lr}
    40ca:	b086      	sub	sp, #24
    40cc:	af02      	add	r7, sp, #8
    40ce:	6078      	str	r0, [r7, #4]
    40d0:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    40d2:	230f      	movs	r3, #15
    40d4:	18fb      	adds	r3, r7, r3
    40d6:	220a      	movs	r2, #10
    40d8:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    40da:	230e      	movs	r3, #14
    40dc:	18fb      	adds	r3, r7, r3
    40de:	2201      	movs	r2, #1
    40e0:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    40e2:	230d      	movs	r3, #13
    40e4:	18fb      	adds	r3, r7, r3
    40e6:	22ca      	movs	r2, #202	; 0xca
    40e8:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    40ea:	230c      	movs	r3, #12
    40ec:	18fb      	adds	r3, r7, r3
    40ee:	2200      	movs	r2, #0
    40f0:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
    40f2:	687b      	ldr	r3, [r7, #4]
    40f4:	2bff      	cmp	r3, #255	; 0xff
    40f6:	d808      	bhi.n	410a <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    40f8:	230d      	movs	r3, #13
    40fa:	18fb      	adds	r3, r7, r3
    40fc:	22c4      	movs	r2, #196	; 0xc4
    40fe:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    4100:	230c      	movs	r3, #12
    4102:	18fb      	adds	r3, r7, r3
    4104:	2201      	movs	r2, #1
    4106:	701a      	strb	r2, [r3, #0]
    4108:	e007      	b.n	411a <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    410a:	230d      	movs	r3, #13
    410c:	18fb      	adds	r3, r7, r3
    410e:	22ca      	movs	r2, #202	; 0xca
    4110:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    4112:	230c      	movs	r3, #12
    4114:	18fb      	adds	r3, r7, r3
    4116:	2200      	movs	r2, #0
    4118:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    411a:	230e      	movs	r3, #14
    411c:	18fc      	adds	r4, r7, r3
    411e:	6879      	ldr	r1, [r7, #4]
    4120:	230d      	movs	r3, #13
    4122:	18fb      	adds	r3, r7, r3
    4124:	7818      	ldrb	r0, [r3, #0]
    4126:	230c      	movs	r3, #12
    4128:	18fb      	adds	r3, r7, r3
    412a:	781b      	ldrb	r3, [r3, #0]
    412c:	9300      	str	r3, [sp, #0]
    412e:	2304      	movs	r3, #4
    4130:	2200      	movs	r2, #0
    4132:	4d56      	ldr	r5, [pc, #344]	; (428c <spi_read_reg+0x1c4>)
    4134:	47a8      	blx	r5
    4136:	0003      	movs	r3, r0
    4138:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    413a:	230e      	movs	r3, #14
    413c:	18fb      	adds	r3, r7, r3
    413e:	781b      	ldrb	r3, [r3, #0]
    4140:	b25b      	sxtb	r3, r3
    4142:	2b01      	cmp	r3, #1
    4144:	d00f      	beq.n	4166 <spi_read_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    4146:	4a52      	ldr	r2, [pc, #328]	; (4290 <spi_read_reg+0x1c8>)
    4148:	4952      	ldr	r1, [pc, #328]	; (4294 <spi_read_reg+0x1cc>)
    414a:	4b53      	ldr	r3, [pc, #332]	; (4298 <spi_read_reg+0x1d0>)
    414c:	0018      	movs	r0, r3
    414e:	4b53      	ldr	r3, [pc, #332]	; (429c <spi_read_reg+0x1d4>)
    4150:	4798      	blx	r3
    4152:	687a      	ldr	r2, [r7, #4]
    4154:	4b52      	ldr	r3, [pc, #328]	; (42a0 <spi_read_reg+0x1d8>)
    4156:	0011      	movs	r1, r2
    4158:	0018      	movs	r0, r3
    415a:	4b50      	ldr	r3, [pc, #320]	; (429c <spi_read_reg+0x1d4>)
    415c:	4798      	blx	r3
    415e:	200d      	movs	r0, #13
    4160:	4b50      	ldr	r3, [pc, #320]	; (42a4 <spi_read_reg+0x1dc>)
    4162:	4798      	blx	r3
		goto _FAIL_;
    4164:	e055      	b.n	4212 <spi_read_reg+0x14a>
	}

	result = spi_cmd_rsp(cmd);
    4166:	230e      	movs	r3, #14
    4168:	18fc      	adds	r4, r7, r3
    416a:	230d      	movs	r3, #13
    416c:	18fb      	adds	r3, r7, r3
    416e:	781b      	ldrb	r3, [r3, #0]
    4170:	0018      	movs	r0, r3
    4172:	4b4d      	ldr	r3, [pc, #308]	; (42a8 <spi_read_reg+0x1e0>)
    4174:	4798      	blx	r3
    4176:	0003      	movs	r3, r0
    4178:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    417a:	230e      	movs	r3, #14
    417c:	18fb      	adds	r3, r7, r3
    417e:	781b      	ldrb	r3, [r3, #0]
    4180:	b25b      	sxtb	r3, r3
    4182:	2b01      	cmp	r3, #1
    4184:	d00f      	beq.n	41a6 <spi_read_reg+0xde>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    4186:	4a49      	ldr	r2, [pc, #292]	; (42ac <spi_read_reg+0x1e4>)
    4188:	4942      	ldr	r1, [pc, #264]	; (4294 <spi_read_reg+0x1cc>)
    418a:	4b43      	ldr	r3, [pc, #268]	; (4298 <spi_read_reg+0x1d0>)
    418c:	0018      	movs	r0, r3
    418e:	4b43      	ldr	r3, [pc, #268]	; (429c <spi_read_reg+0x1d4>)
    4190:	4798      	blx	r3
    4192:	687a      	ldr	r2, [r7, #4]
    4194:	4b46      	ldr	r3, [pc, #280]	; (42b0 <spi_read_reg+0x1e8>)
    4196:	0011      	movs	r1, r2
    4198:	0018      	movs	r0, r3
    419a:	4b40      	ldr	r3, [pc, #256]	; (429c <spi_read_reg+0x1d4>)
    419c:	4798      	blx	r3
    419e:	200d      	movs	r0, #13
    41a0:	4b40      	ldr	r3, [pc, #256]	; (42a4 <spi_read_reg+0x1dc>)
    41a2:	4798      	blx	r3
		goto _FAIL_;
    41a4:	e035      	b.n	4212 <spi_read_reg+0x14a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    41a6:	230e      	movs	r3, #14
    41a8:	18fc      	adds	r4, r7, r3
    41aa:	230c      	movs	r3, #12
    41ac:	18fb      	adds	r3, r7, r3
    41ae:	781a      	ldrb	r2, [r3, #0]
    41b0:	2308      	movs	r3, #8
    41b2:	18fb      	adds	r3, r7, r3
    41b4:	2104      	movs	r1, #4
    41b6:	0018      	movs	r0, r3
    41b8:	4b3e      	ldr	r3, [pc, #248]	; (42b4 <spi_read_reg+0x1ec>)
    41ba:	4798      	blx	r3
    41bc:	0003      	movs	r3, r0
    41be:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    41c0:	230e      	movs	r3, #14
    41c2:	18fb      	adds	r3, r7, r3
    41c4:	781b      	ldrb	r3, [r3, #0]
    41c6:	b25b      	sxtb	r3, r3
    41c8:	2b01      	cmp	r3, #1
    41ca:	d00d      	beq.n	41e8 <spi_read_reg+0x120>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    41cc:	4a3a      	ldr	r2, [pc, #232]	; (42b8 <spi_read_reg+0x1f0>)
    41ce:	4931      	ldr	r1, [pc, #196]	; (4294 <spi_read_reg+0x1cc>)
    41d0:	4b31      	ldr	r3, [pc, #196]	; (4298 <spi_read_reg+0x1d0>)
    41d2:	0018      	movs	r0, r3
    41d4:	4b31      	ldr	r3, [pc, #196]	; (429c <spi_read_reg+0x1d4>)
    41d6:	4798      	blx	r3
    41d8:	4b38      	ldr	r3, [pc, #224]	; (42bc <spi_read_reg+0x1f4>)
    41da:	0018      	movs	r0, r3
    41dc:	4b38      	ldr	r3, [pc, #224]	; (42c0 <spi_read_reg+0x1f8>)
    41de:	4798      	blx	r3
    41e0:	200d      	movs	r0, #13
    41e2:	4b30      	ldr	r3, [pc, #192]	; (42a4 <spi_read_reg+0x1dc>)
    41e4:	4798      	blx	r3
		goto _FAIL_;
    41e6:	e014      	b.n	4212 <spi_read_reg+0x14a>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    41e8:	2308      	movs	r3, #8
    41ea:	18fb      	adds	r3, r7, r3
    41ec:	781b      	ldrb	r3, [r3, #0]
    41ee:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    41f0:	2308      	movs	r3, #8
    41f2:	18fb      	adds	r3, r7, r3
    41f4:	785b      	ldrb	r3, [r3, #1]
    41f6:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
    41f8:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
    41fa:	2308      	movs	r3, #8
    41fc:	18fb      	adds	r3, r7, r3
    41fe:	789b      	ldrb	r3, [r3, #2]
    4200:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
    4202:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
    4204:	2308      	movs	r3, #8
    4206:	18fb      	adds	r3, r7, r3
    4208:	78db      	ldrb	r3, [r3, #3]
    420a:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
    420c:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
    420e:	683b      	ldr	r3, [r7, #0]
    4210:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
    4212:	230e      	movs	r3, #14
    4214:	18fb      	adds	r3, r7, r3
    4216:	781b      	ldrb	r3, [r3, #0]
    4218:	b25b      	sxtb	r3, r3
    421a:	2b01      	cmp	r3, #1
    421c:	d02e      	beq.n	427c <spi_read_reg+0x1b4>
	{
		
		nm_bsp_sleep(1);
    421e:	2001      	movs	r0, #1
    4220:	4b28      	ldr	r3, [pc, #160]	; (42c4 <spi_read_reg+0x1fc>)
    4222:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4224:	2300      	movs	r3, #0
    4226:	9300      	str	r3, [sp, #0]
    4228:	2300      	movs	r3, #0
    422a:	2200      	movs	r2, #0
    422c:	2100      	movs	r1, #0
    422e:	20cf      	movs	r0, #207	; 0xcf
    4230:	4c16      	ldr	r4, [pc, #88]	; (428c <spi_read_reg+0x1c4>)
    4232:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    4234:	20cf      	movs	r0, #207	; 0xcf
    4236:	4b1c      	ldr	r3, [pc, #112]	; (42a8 <spi_read_reg+0x1e0>)
    4238:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    423a:	4a23      	ldr	r2, [pc, #140]	; (42c8 <spi_read_reg+0x200>)
    423c:	4915      	ldr	r1, [pc, #84]	; (4294 <spi_read_reg+0x1cc>)
    423e:	4b16      	ldr	r3, [pc, #88]	; (4298 <spi_read_reg+0x1d0>)
    4240:	0018      	movs	r0, r3
    4242:	4b16      	ldr	r3, [pc, #88]	; (429c <spi_read_reg+0x1d4>)
    4244:	4798      	blx	r3
    4246:	230f      	movs	r3, #15
    4248:	18fb      	adds	r3, r7, r3
    424a:	7819      	ldrb	r1, [r3, #0]
    424c:	687a      	ldr	r2, [r7, #4]
    424e:	4b1f      	ldr	r3, [pc, #124]	; (42cc <spi_read_reg+0x204>)
    4250:	0018      	movs	r0, r3
    4252:	4b12      	ldr	r3, [pc, #72]	; (429c <spi_read_reg+0x1d4>)
    4254:	4798      	blx	r3
    4256:	200d      	movs	r0, #13
    4258:	4b12      	ldr	r3, [pc, #72]	; (42a4 <spi_read_reg+0x1dc>)
    425a:	4798      	blx	r3
		nm_bsp_sleep(1);
    425c:	2001      	movs	r0, #1
    425e:	4b19      	ldr	r3, [pc, #100]	; (42c4 <spi_read_reg+0x1fc>)
    4260:	4798      	blx	r3
		retry--;
    4262:	230f      	movs	r3, #15
    4264:	18fb      	adds	r3, r7, r3
    4266:	781a      	ldrb	r2, [r3, #0]
    4268:	230f      	movs	r3, #15
    426a:	18fb      	adds	r3, r7, r3
    426c:	3a01      	subs	r2, #1
    426e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    4270:	230f      	movs	r3, #15
    4272:	18fb      	adds	r3, r7, r3
    4274:	781b      	ldrb	r3, [r3, #0]
    4276:	2b00      	cmp	r3, #0
    4278:	d000      	beq.n	427c <spi_read_reg+0x1b4>
    427a:	e73a      	b.n	40f2 <spi_read_reg+0x2a>
	}
		
	return result;
    427c:	230e      	movs	r3, #14
    427e:	18fb      	adds	r3, r7, r3
    4280:	781b      	ldrb	r3, [r3, #0]
    4282:	b25b      	sxtb	r3, r3
}
    4284:	0018      	movs	r0, r3
    4286:	46bd      	mov	sp, r7
    4288:	b004      	add	sp, #16
    428a:	bdb0      	pop	{r4, r5, r7, pc}
    428c:	000033f5 	.word	0x000033f5
    4290:	00000417 	.word	0x00000417
    4294:	00010514 	.word	0x00010514
    4298:	0000ff1c 	.word	0x0000ff1c
    429c:	0000dfad 	.word	0x0000dfad
    42a0:	00010278 	.word	0x00010278
    42a4:	0000dfe1 	.word	0x0000dfe1
    42a8:	00003839 	.word	0x00003839
    42ac:	0000041d 	.word	0x0000041d
    42b0:	000102a4 	.word	0x000102a4
    42b4:	00003971 	.word	0x00003971
    42b8:	00000424 	.word	0x00000424
    42bc:	000102d8 	.word	0x000102d8
    42c0:	0000e0c9 	.word	0x0000e0c9
    42c4:	00000335 	.word	0x00000335
    42c8:	0000043c 	.word	0x0000043c
    42cc:	000102f8 	.word	0x000102f8

000042d0 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    42d0:	b5b0      	push	{r4, r5, r7, lr}
    42d2:	b088      	sub	sp, #32
    42d4:	af02      	add	r7, sp, #8
    42d6:	60f8      	str	r0, [r7, #12]
    42d8:	60b9      	str	r1, [r7, #8]
    42da:	1dbb      	adds	r3, r7, #6
    42dc:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    42de:	2314      	movs	r3, #20
    42e0:	18fb      	adds	r3, r7, r3
    42e2:	22c8      	movs	r2, #200	; 0xc8
    42e4:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    42e6:	2316      	movs	r3, #22
    42e8:	18fb      	adds	r3, r7, r3
    42ea:	220a      	movs	r2, #10
    42ec:	701a      	strb	r2, [r3, #0]
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    42ee:	2315      	movs	r3, #21
    42f0:	18fb      	adds	r3, r7, r3
    42f2:	2200      	movs	r2, #0
    42f4:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    42f6:	1dbb      	adds	r3, r7, #6
    42f8:	881b      	ldrh	r3, [r3, #0]
    42fa:	2b01      	cmp	r3, #1
    42fc:	d106      	bne.n	430c <nm_spi_read+0x3c>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    42fe:	1dbb      	adds	r3, r7, #6
    4300:	2202      	movs	r2, #2
    4302:	801a      	strh	r2, [r3, #0]
		single_byte_workaround = 1;
    4304:	2315      	movs	r3, #21
    4306:	18fb      	adds	r3, r7, r3
    4308:	2201      	movs	r2, #1
    430a:	701a      	strb	r2, [r3, #0]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    430c:	1dbb      	adds	r3, r7, #6
    430e:	881a      	ldrh	r2, [r3, #0]
    4310:	2317      	movs	r3, #23
    4312:	18fc      	adds	r4, r7, r3
    4314:	68f9      	ldr	r1, [r7, #12]
    4316:	2314      	movs	r3, #20
    4318:	18fb      	adds	r3, r7, r3
    431a:	7818      	ldrb	r0, [r3, #0]
    431c:	2300      	movs	r3, #0
    431e:	9300      	str	r3, [sp, #0]
    4320:	0013      	movs	r3, r2
    4322:	2200      	movs	r2, #0
    4324:	4d56      	ldr	r5, [pc, #344]	; (4480 <nm_spi_read+0x1b0>)
    4326:	47a8      	blx	r5
    4328:	0003      	movs	r3, r0
    432a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    432c:	2317      	movs	r3, #23
    432e:	18fb      	adds	r3, r7, r3
    4330:	781b      	ldrb	r3, [r3, #0]
    4332:	b25b      	sxtb	r3, r3
    4334:	2b01      	cmp	r3, #1
    4336:	d00f      	beq.n	4358 <nm_spi_read+0x88>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    4338:	4a52      	ldr	r2, [pc, #328]	; (4484 <nm_spi_read+0x1b4>)
    433a:	4953      	ldr	r1, [pc, #332]	; (4488 <nm_spi_read+0x1b8>)
    433c:	4b53      	ldr	r3, [pc, #332]	; (448c <nm_spi_read+0x1bc>)
    433e:	0018      	movs	r0, r3
    4340:	4b53      	ldr	r3, [pc, #332]	; (4490 <nm_spi_read+0x1c0>)
    4342:	4798      	blx	r3
    4344:	68fa      	ldr	r2, [r7, #12]
    4346:	4b53      	ldr	r3, [pc, #332]	; (4494 <nm_spi_read+0x1c4>)
    4348:	0011      	movs	r1, r2
    434a:	0018      	movs	r0, r3
    434c:	4b50      	ldr	r3, [pc, #320]	; (4490 <nm_spi_read+0x1c0>)
    434e:	4798      	blx	r3
    4350:	200d      	movs	r0, #13
    4352:	4b51      	ldr	r3, [pc, #324]	; (4498 <nm_spi_read+0x1c8>)
    4354:	4798      	blx	r3
		goto _FAIL_;
    4356:	e055      	b.n	4404 <nm_spi_read+0x134>
	}

	result = spi_cmd_rsp(cmd);
    4358:	2317      	movs	r3, #23
    435a:	18fc      	adds	r4, r7, r3
    435c:	2314      	movs	r3, #20
    435e:	18fb      	adds	r3, r7, r3
    4360:	781b      	ldrb	r3, [r3, #0]
    4362:	0018      	movs	r0, r3
    4364:	4b4d      	ldr	r3, [pc, #308]	; (449c <nm_spi_read+0x1cc>)
    4366:	4798      	blx	r3
    4368:	0003      	movs	r3, r0
    436a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    436c:	2317      	movs	r3, #23
    436e:	18fb      	adds	r3, r7, r3
    4370:	781b      	ldrb	r3, [r3, #0]
    4372:	b25b      	sxtb	r3, r3
    4374:	2b01      	cmp	r3, #1
    4376:	d00f      	beq.n	4398 <nm_spi_read+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    4378:	4a49      	ldr	r2, [pc, #292]	; (44a0 <nm_spi_read+0x1d0>)
    437a:	4943      	ldr	r1, [pc, #268]	; (4488 <nm_spi_read+0x1b8>)
    437c:	4b43      	ldr	r3, [pc, #268]	; (448c <nm_spi_read+0x1bc>)
    437e:	0018      	movs	r0, r3
    4380:	4b43      	ldr	r3, [pc, #268]	; (4490 <nm_spi_read+0x1c0>)
    4382:	4798      	blx	r3
    4384:	68fa      	ldr	r2, [r7, #12]
    4386:	4b47      	ldr	r3, [pc, #284]	; (44a4 <nm_spi_read+0x1d4>)
    4388:	0011      	movs	r1, r2
    438a:	0018      	movs	r0, r3
    438c:	4b40      	ldr	r3, [pc, #256]	; (4490 <nm_spi_read+0x1c0>)
    438e:	4798      	blx	r3
    4390:	200d      	movs	r0, #13
    4392:	4b41      	ldr	r3, [pc, #260]	; (4498 <nm_spi_read+0x1c8>)
    4394:	4798      	blx	r3
		goto _FAIL_;
    4396:	e035      	b.n	4404 <nm_spi_read+0x134>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    4398:	2315      	movs	r3, #21
    439a:	18fb      	adds	r3, r7, r3
    439c:	781b      	ldrb	r3, [r3, #0]
    439e:	2b00      	cmp	r3, #0
    43a0:	d011      	beq.n	43c6 <nm_spi_read+0xf6>
	{
		result = spi_data_read(tmp, size,0);
    43a2:	2317      	movs	r3, #23
    43a4:	18fc      	adds	r4, r7, r3
    43a6:	1dbb      	adds	r3, r7, #6
    43a8:	8819      	ldrh	r1, [r3, #0]
    43aa:	2310      	movs	r3, #16
    43ac:	18fb      	adds	r3, r7, r3
    43ae:	2200      	movs	r2, #0
    43b0:	0018      	movs	r0, r3
    43b2:	4b3d      	ldr	r3, [pc, #244]	; (44a8 <nm_spi_read+0x1d8>)
    43b4:	4798      	blx	r3
    43b6:	0003      	movs	r3, r0
    43b8:	7023      	strb	r3, [r4, #0]
		buf[0] = tmp[0];
    43ba:	2310      	movs	r3, #16
    43bc:	18fb      	adds	r3, r7, r3
    43be:	781a      	ldrb	r2, [r3, #0]
    43c0:	68bb      	ldr	r3, [r7, #8]
    43c2:	701a      	strb	r2, [r3, #0]
    43c4:	e00a      	b.n	43dc <nm_spi_read+0x10c>
	}
	else
		result = spi_data_read(buf, size,0);
    43c6:	2317      	movs	r3, #23
    43c8:	18fc      	adds	r4, r7, r3
    43ca:	1dbb      	adds	r3, r7, #6
    43cc:	8819      	ldrh	r1, [r3, #0]
    43ce:	68bb      	ldr	r3, [r7, #8]
    43d0:	2200      	movs	r2, #0
    43d2:	0018      	movs	r0, r3
    43d4:	4b34      	ldr	r3, [pc, #208]	; (44a8 <nm_spi_read+0x1d8>)
    43d6:	4798      	blx	r3
    43d8:	0003      	movs	r3, r0
    43da:	7023      	strb	r3, [r4, #0]

	if (result != N_OK) {
    43dc:	2317      	movs	r3, #23
    43de:	18fb      	adds	r3, r7, r3
    43e0:	781b      	ldrb	r3, [r3, #0]
    43e2:	b25b      	sxtb	r3, r3
    43e4:	2b01      	cmp	r3, #1
    43e6:	d00d      	beq.n	4404 <nm_spi_read+0x134>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    43e8:	4a30      	ldr	r2, [pc, #192]	; (44ac <nm_spi_read+0x1dc>)
    43ea:	4927      	ldr	r1, [pc, #156]	; (4488 <nm_spi_read+0x1b8>)
    43ec:	4b27      	ldr	r3, [pc, #156]	; (448c <nm_spi_read+0x1bc>)
    43ee:	0018      	movs	r0, r3
    43f0:	4b27      	ldr	r3, [pc, #156]	; (4490 <nm_spi_read+0x1c0>)
    43f2:	4798      	blx	r3
    43f4:	4b2e      	ldr	r3, [pc, #184]	; (44b0 <nm_spi_read+0x1e0>)
    43f6:	0018      	movs	r0, r3
    43f8:	4b2e      	ldr	r3, [pc, #184]	; (44b4 <nm_spi_read+0x1e4>)
    43fa:	4798      	blx	r3
    43fc:	200d      	movs	r0, #13
    43fe:	4b26      	ldr	r3, [pc, #152]	; (4498 <nm_spi_read+0x1c8>)
    4400:	4798      	blx	r3
		goto _FAIL_;
    4402:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    4404:	2317      	movs	r3, #23
    4406:	18fb      	adds	r3, r7, r3
    4408:	781b      	ldrb	r3, [r3, #0]
    440a:	b25b      	sxtb	r3, r3
    440c:	2b01      	cmp	r3, #1
    440e:	d02f      	beq.n	4470 <nm_spi_read+0x1a0>
	{
		nm_bsp_sleep(1);
    4410:	2001      	movs	r0, #1
    4412:	4b29      	ldr	r3, [pc, #164]	; (44b8 <nm_spi_read+0x1e8>)
    4414:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4416:	2300      	movs	r3, #0
    4418:	9300      	str	r3, [sp, #0]
    441a:	2300      	movs	r3, #0
    441c:	2200      	movs	r2, #0
    441e:	2100      	movs	r1, #0
    4420:	20cf      	movs	r0, #207	; 0xcf
    4422:	4c17      	ldr	r4, [pc, #92]	; (4480 <nm_spi_read+0x1b0>)
    4424:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    4426:	20cf      	movs	r0, #207	; 0xcf
    4428:	4b1c      	ldr	r3, [pc, #112]	; (449c <nm_spi_read+0x1cc>)
    442a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    442c:	4a23      	ldr	r2, [pc, #140]	; (44bc <nm_spi_read+0x1ec>)
    442e:	4916      	ldr	r1, [pc, #88]	; (4488 <nm_spi_read+0x1b8>)
    4430:	4b16      	ldr	r3, [pc, #88]	; (448c <nm_spi_read+0x1bc>)
    4432:	0018      	movs	r0, r3
    4434:	4b16      	ldr	r3, [pc, #88]	; (4490 <nm_spi_read+0x1c0>)
    4436:	4798      	blx	r3
    4438:	2316      	movs	r3, #22
    443a:	18fb      	adds	r3, r7, r3
    443c:	7819      	ldrb	r1, [r3, #0]
    443e:	1dbb      	adds	r3, r7, #6
    4440:	881b      	ldrh	r3, [r3, #0]
    4442:	68fa      	ldr	r2, [r7, #12]
    4444:	481e      	ldr	r0, [pc, #120]	; (44c0 <nm_spi_read+0x1f0>)
    4446:	4c12      	ldr	r4, [pc, #72]	; (4490 <nm_spi_read+0x1c0>)
    4448:	47a0      	blx	r4
    444a:	200d      	movs	r0, #13
    444c:	4b12      	ldr	r3, [pc, #72]	; (4498 <nm_spi_read+0x1c8>)
    444e:	4798      	blx	r3
		nm_bsp_sleep(1);
    4450:	2001      	movs	r0, #1
    4452:	4b19      	ldr	r3, [pc, #100]	; (44b8 <nm_spi_read+0x1e8>)
    4454:	4798      	blx	r3
		retry--;
    4456:	2316      	movs	r3, #22
    4458:	18fb      	adds	r3, r7, r3
    445a:	781a      	ldrb	r2, [r3, #0]
    445c:	2316      	movs	r3, #22
    445e:	18fb      	adds	r3, r7, r3
    4460:	3a01      	subs	r2, #1
    4462:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    4464:	2316      	movs	r3, #22
    4466:	18fb      	adds	r3, r7, r3
    4468:	781b      	ldrb	r3, [r3, #0]
    446a:	2b00      	cmp	r3, #0
    446c:	d000      	beq.n	4470 <nm_spi_read+0x1a0>
    446e:	e742      	b.n	42f6 <nm_spi_read+0x26>
	}

	return result;
    4470:	2317      	movs	r3, #23
    4472:	18fb      	adds	r3, r7, r3
    4474:	781b      	ldrb	r3, [r3, #0]
    4476:	b25b      	sxtb	r3, r3
}
    4478:	0018      	movs	r0, r3
    447a:	46bd      	mov	sp, r7
    447c:	b006      	add	sp, #24
    447e:	bdb0      	pop	{r4, r5, r7, pc}
    4480:	000033f5 	.word	0x000033f5
    4484:	0000045d 	.word	0x0000045d
    4488:	00010524 	.word	0x00010524
    448c:	0000ff1c 	.word	0x0000ff1c
    4490:	0000dfad 	.word	0x0000dfad
    4494:	00010310 	.word	0x00010310
    4498:	0000dfe1 	.word	0x0000dfe1
    449c:	00003839 	.word	0x00003839
    44a0:	00000463 	.word	0x00000463
    44a4:	00010340 	.word	0x00010340
    44a8:	00003971 	.word	0x00003971
    44ac:	00000473 	.word	0x00000473
    44b0:	00010378 	.word	0x00010378
    44b4:	0000e0c9 	.word	0x0000e0c9
    44b8:	00000335 	.word	0x00000335
    44bc:	00000484 	.word	0x00000484
    44c0:	0001025c 	.word	0x0001025c

000044c4 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    44c4:	b580      	push	{r7, lr}
    44c6:	b082      	sub	sp, #8
    44c8:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    44ca:	4b0c      	ldr	r3, [pc, #48]	; (44fc <spi_init_pkt_sz+0x38>)
    44cc:	0018      	movs	r0, r3
    44ce:	4b0c      	ldr	r3, [pc, #48]	; (4500 <spi_init_pkt_sz+0x3c>)
    44d0:	4798      	blx	r3
    44d2:	0003      	movs	r3, r0
    44d4:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    44d6:	687b      	ldr	r3, [r7, #4]
    44d8:	2270      	movs	r2, #112	; 0x70
    44da:	4393      	bics	r3, r2
    44dc:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    44de:	687b      	ldr	r3, [r7, #4]
    44e0:	2250      	movs	r2, #80	; 0x50
    44e2:	4313      	orrs	r3, r2
    44e4:	607b      	str	r3, [r7, #4]
    44e6:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    44e8:	687b      	ldr	r3, [r7, #4]
    44ea:	4a04      	ldr	r2, [pc, #16]	; (44fc <spi_init_pkt_sz+0x38>)
    44ec:	0019      	movs	r1, r3
    44ee:	0010      	movs	r0, r2
    44f0:	4b04      	ldr	r3, [pc, #16]	; (4504 <spi_init_pkt_sz+0x40>)
    44f2:	4798      	blx	r3
}
    44f4:	46c0      	nop			; (mov r8, r8)
    44f6:	46bd      	mov	sp, r7
    44f8:	b002      	add	sp, #8
    44fa:	bd80      	pop	{r7, pc}
    44fc:	0000e824 	.word	0x0000e824
    4500:	0000469d 	.word	0x0000469d
    4504:	00004711 	.word	0x00004711

00004508 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
    4508:	b590      	push	{r4, r7, lr}
    450a:	b083      	sub	sp, #12
    450c:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    450e:	2300      	movs	r3, #0
    4510:	9300      	str	r3, [sp, #0]
    4512:	2300      	movs	r3, #0
    4514:	2200      	movs	r2, #0
    4516:	2100      	movs	r1, #0
    4518:	20cf      	movs	r0, #207	; 0xcf
    451a:	4c05      	ldr	r4, [pc, #20]	; (4530 <nm_spi_reset+0x28>)
    451c:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    451e:	20cf      	movs	r0, #207	; 0xcf
    4520:	4b04      	ldr	r3, [pc, #16]	; (4534 <nm_spi_reset+0x2c>)
    4522:	4798      	blx	r3
	return M2M_SUCCESS;
    4524:	2300      	movs	r3, #0
}
    4526:	0018      	movs	r0, r3
    4528:	46bd      	mov	sp, r7
    452a:	b001      	add	sp, #4
    452c:	bd90      	pop	{r4, r7, pc}
    452e:	46c0      	nop			; (mov r8, r8)
    4530:	000033f5 	.word	0x000033f5
    4534:	00003839 	.word	0x00003839

00004538 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    4538:	b580      	push	{r7, lr}
    453a:	b082      	sub	sp, #8
    453c:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
    453e:	2300      	movs	r3, #0
    4540:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    4542:	4b3e      	ldr	r3, [pc, #248]	; (463c <nm_spi_init+0x104>)
    4544:	2200      	movs	r2, #0
    4546:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    4548:	003b      	movs	r3, r7
    454a:	4a3d      	ldr	r2, [pc, #244]	; (4640 <nm_spi_init+0x108>)
    454c:	0019      	movs	r1, r3
    454e:	0010      	movs	r0, r2
    4550:	4b3c      	ldr	r3, [pc, #240]	; (4644 <nm_spi_init+0x10c>)
    4552:	4798      	blx	r3
    4554:	1e03      	subs	r3, r0, #0
    4556:	d126      	bne.n	45a6 <nm_spi_init+0x6e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    4558:	4b38      	ldr	r3, [pc, #224]	; (463c <nm_spi_init+0x104>)
    455a:	2201      	movs	r2, #1
    455c:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    455e:	4a3a      	ldr	r2, [pc, #232]	; (4648 <nm_spi_init+0x110>)
    4560:	493a      	ldr	r1, [pc, #232]	; (464c <nm_spi_init+0x114>)
    4562:	4b3b      	ldr	r3, [pc, #236]	; (4650 <nm_spi_init+0x118>)
    4564:	0018      	movs	r0, r3
    4566:	4b3b      	ldr	r3, [pc, #236]	; (4654 <nm_spi_init+0x11c>)
    4568:	4798      	blx	r3
    456a:	4b3b      	ldr	r3, [pc, #236]	; (4658 <nm_spi_init+0x120>)
    456c:	0018      	movs	r0, r3
    456e:	4b3b      	ldr	r3, [pc, #236]	; (465c <nm_spi_init+0x124>)
    4570:	4798      	blx	r3
    4572:	200d      	movs	r0, #13
    4574:	4b3a      	ldr	r3, [pc, #232]	; (4660 <nm_spi_init+0x128>)
    4576:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    4578:	003b      	movs	r3, r7
    457a:	4a31      	ldr	r2, [pc, #196]	; (4640 <nm_spi_init+0x108>)
    457c:	0019      	movs	r1, r3
    457e:	0010      	movs	r0, r2
    4580:	4b30      	ldr	r3, [pc, #192]	; (4644 <nm_spi_init+0x10c>)
    4582:	4798      	blx	r3
    4584:	1e03      	subs	r3, r0, #0
    4586:	d10e      	bne.n	45a6 <nm_spi_init+0x6e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    4588:	4a36      	ldr	r2, [pc, #216]	; (4664 <nm_spi_init+0x12c>)
    458a:	4930      	ldr	r1, [pc, #192]	; (464c <nm_spi_init+0x114>)
    458c:	4b30      	ldr	r3, [pc, #192]	; (4650 <nm_spi_init+0x118>)
    458e:	0018      	movs	r0, r3
    4590:	4b30      	ldr	r3, [pc, #192]	; (4654 <nm_spi_init+0x11c>)
    4592:	4798      	blx	r3
    4594:	4b34      	ldr	r3, [pc, #208]	; (4668 <nm_spi_init+0x130>)
    4596:	0018      	movs	r0, r3
    4598:	4b30      	ldr	r3, [pc, #192]	; (465c <nm_spi_init+0x124>)
    459a:	4798      	blx	r3
    459c:	200d      	movs	r0, #13
    459e:	4b30      	ldr	r3, [pc, #192]	; (4660 <nm_spi_init+0x128>)
    45a0:	4798      	blx	r3
			return 0;
    45a2:	2300      	movs	r3, #0
    45a4:	e045      	b.n	4632 <nm_spi_init+0xfa>
		}
	}
	if(gu8Crc_off == 0)
    45a6:	4b25      	ldr	r3, [pc, #148]	; (463c <nm_spi_init+0x104>)
    45a8:	781b      	ldrb	r3, [r3, #0]
    45aa:	2b00      	cmp	r3, #0
    45ac:	d125      	bne.n	45fa <nm_spi_init+0xc2>
	{
		reg &= ~0xc;	/* disable crc checking */
    45ae:	683b      	ldr	r3, [r7, #0]
    45b0:	220c      	movs	r2, #12
    45b2:	4393      	bics	r3, r2
    45b4:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    45b6:	683b      	ldr	r3, [r7, #0]
    45b8:	2270      	movs	r2, #112	; 0x70
    45ba:	4393      	bics	r3, r2
    45bc:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    45be:	683b      	ldr	r3, [r7, #0]
    45c0:	2250      	movs	r2, #80	; 0x50
    45c2:	4313      	orrs	r3, r2
    45c4:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    45c6:	683b      	ldr	r3, [r7, #0]
    45c8:	4a1d      	ldr	r2, [pc, #116]	; (4640 <nm_spi_init+0x108>)
    45ca:	0019      	movs	r1, r3
    45cc:	0010      	movs	r0, r2
    45ce:	4b27      	ldr	r3, [pc, #156]	; (466c <nm_spi_init+0x134>)
    45d0:	4798      	blx	r3
    45d2:	1e03      	subs	r3, r0, #0
    45d4:	d10e      	bne.n	45f4 <nm_spi_init+0xbc>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    45d6:	4a26      	ldr	r2, [pc, #152]	; (4670 <nm_spi_init+0x138>)
    45d8:	491c      	ldr	r1, [pc, #112]	; (464c <nm_spi_init+0x114>)
    45da:	4b1d      	ldr	r3, [pc, #116]	; (4650 <nm_spi_init+0x118>)
    45dc:	0018      	movs	r0, r3
    45de:	4b1d      	ldr	r3, [pc, #116]	; (4654 <nm_spi_init+0x11c>)
    45e0:	4798      	blx	r3
    45e2:	4b24      	ldr	r3, [pc, #144]	; (4674 <nm_spi_init+0x13c>)
    45e4:	0018      	movs	r0, r3
    45e6:	4b1d      	ldr	r3, [pc, #116]	; (465c <nm_spi_init+0x124>)
    45e8:	4798      	blx	r3
    45ea:	200d      	movs	r0, #13
    45ec:	4b1c      	ldr	r3, [pc, #112]	; (4660 <nm_spi_init+0x128>)
    45ee:	4798      	blx	r3
			return 0;
    45f0:	2300      	movs	r3, #0
    45f2:	e01e      	b.n	4632 <nm_spi_init+0xfa>
		}
		gu8Crc_off = 1;
    45f4:	4b11      	ldr	r3, [pc, #68]	; (463c <nm_spi_init+0x104>)
    45f6:	2201      	movs	r2, #1
    45f8:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    45fa:	1d3a      	adds	r2, r7, #4
    45fc:	2380      	movs	r3, #128	; 0x80
    45fe:	015b      	lsls	r3, r3, #5
    4600:	0011      	movs	r1, r2
    4602:	0018      	movs	r0, r3
    4604:	4b0f      	ldr	r3, [pc, #60]	; (4644 <nm_spi_init+0x10c>)
    4606:	4798      	blx	r3
    4608:	1e03      	subs	r3, r0, #0
    460a:	d10f      	bne.n	462c <nm_spi_init+0xf4>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    460c:	4a1a      	ldr	r2, [pc, #104]	; (4678 <nm_spi_init+0x140>)
    460e:	490f      	ldr	r1, [pc, #60]	; (464c <nm_spi_init+0x114>)
    4610:	4b0f      	ldr	r3, [pc, #60]	; (4650 <nm_spi_init+0x118>)
    4612:	0018      	movs	r0, r3
    4614:	4b0f      	ldr	r3, [pc, #60]	; (4654 <nm_spi_init+0x11c>)
    4616:	4798      	blx	r3
    4618:	4b18      	ldr	r3, [pc, #96]	; (467c <nm_spi_init+0x144>)
    461a:	0018      	movs	r0, r3
    461c:	4b0f      	ldr	r3, [pc, #60]	; (465c <nm_spi_init+0x124>)
    461e:	4798      	blx	r3
    4620:	200d      	movs	r0, #13
    4622:	4b0f      	ldr	r3, [pc, #60]	; (4660 <nm_spi_init+0x128>)
    4624:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    4626:	2306      	movs	r3, #6
    4628:	425b      	negs	r3, r3
    462a:	e002      	b.n	4632 <nm_spi_init+0xfa>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    462c:	4b14      	ldr	r3, [pc, #80]	; (4680 <nm_spi_init+0x148>)
    462e:	4798      	blx	r3


	return M2M_SUCCESS;
    4630:	2300      	movs	r3, #0
}
    4632:	0018      	movs	r0, r3
    4634:	46bd      	mov	sp, r7
    4636:	b002      	add	sp, #8
    4638:	bd80      	pop	{r7, pc}
    463a:	46c0      	nop			; (mov r8, r8)
    463c:	20000214 	.word	0x20000214
    4640:	0000e824 	.word	0x0000e824
    4644:	000040c9 	.word	0x000040c9
    4648:	000004c7 	.word	0x000004c7
    464c:	00010530 	.word	0x00010530
    4650:	0000ff1c 	.word	0x0000ff1c
    4654:	0000dfad 	.word	0x0000dfad
    4658:	000103a0 	.word	0x000103a0
    465c:	0000e0c9 	.word	0x0000e0c9
    4660:	0000dfe1 	.word	0x0000dfe1
    4664:	000004ca 	.word	0x000004ca
    4668:	000103f0 	.word	0x000103f0
    466c:	00003d49 	.word	0x00003d49
    4670:	000004d4 	.word	0x000004d4
    4674:	0001041c 	.word	0x0001041c
    4678:	000004de 	.word	0x000004de
    467c:	00010450 	.word	0x00010450
    4680:	000044c5 	.word	0x000044c5

00004684 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
    4684:	b580      	push	{r7, lr}
    4686:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
    4688:	4b03      	ldr	r3, [pc, #12]	; (4698 <nm_spi_deinit+0x14>)
    468a:	2200      	movs	r2, #0
    468c:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
    468e:	2300      	movs	r3, #0
}
    4690:	0018      	movs	r0, r3
    4692:	46bd      	mov	sp, r7
    4694:	bd80      	pop	{r7, pc}
    4696:	46c0      	nop			; (mov r8, r8)
    4698:	20000214 	.word	0x20000214

0000469c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    469c:	b580      	push	{r7, lr}
    469e:	b084      	sub	sp, #16
    46a0:	af00      	add	r7, sp, #0
    46a2:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    46a4:	230c      	movs	r3, #12
    46a6:	18fa      	adds	r2, r7, r3
    46a8:	687b      	ldr	r3, [r7, #4]
    46aa:	0011      	movs	r1, r2
    46ac:	0018      	movs	r0, r3
    46ae:	4b03      	ldr	r3, [pc, #12]	; (46bc <nm_spi_read_reg+0x20>)
    46b0:	4798      	blx	r3

	return u32Val;
    46b2:	68fb      	ldr	r3, [r7, #12]
}
    46b4:	0018      	movs	r0, r3
    46b6:	46bd      	mov	sp, r7
    46b8:	b004      	add	sp, #16
    46ba:	bd80      	pop	{r7, pc}
    46bc:	000040c9 	.word	0x000040c9

000046c0 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    46c0:	b590      	push	{r4, r7, lr}
    46c2:	b085      	sub	sp, #20
    46c4:	af00      	add	r7, sp, #0
    46c6:	6078      	str	r0, [r7, #4]
    46c8:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    46ca:	230f      	movs	r3, #15
    46cc:	18fc      	adds	r4, r7, r3
    46ce:	683a      	ldr	r2, [r7, #0]
    46d0:	687b      	ldr	r3, [r7, #4]
    46d2:	0011      	movs	r1, r2
    46d4:	0018      	movs	r0, r3
    46d6:	4b0d      	ldr	r3, [pc, #52]	; (470c <nm_spi_read_reg_with_ret+0x4c>)
    46d8:	4798      	blx	r3
    46da:	0003      	movs	r3, r0
    46dc:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    46de:	230f      	movs	r3, #15
    46e0:	18fb      	adds	r3, r7, r3
    46e2:	781b      	ldrb	r3, [r3, #0]
    46e4:	b25b      	sxtb	r3, r3
    46e6:	2b01      	cmp	r3, #1
    46e8:	d104      	bne.n	46f4 <nm_spi_read_reg_with_ret+0x34>
    46ea:	230f      	movs	r3, #15
    46ec:	18fb      	adds	r3, r7, r3
    46ee:	2200      	movs	r2, #0
    46f0:	701a      	strb	r2, [r3, #0]
    46f2:	e003      	b.n	46fc <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    46f4:	230f      	movs	r3, #15
    46f6:	18fb      	adds	r3, r7, r3
    46f8:	22fa      	movs	r2, #250	; 0xfa
    46fa:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    46fc:	230f      	movs	r3, #15
    46fe:	18fb      	adds	r3, r7, r3
    4700:	781b      	ldrb	r3, [r3, #0]
    4702:	b25b      	sxtb	r3, r3
}
    4704:	0018      	movs	r0, r3
    4706:	46bd      	mov	sp, r7
    4708:	b005      	add	sp, #20
    470a:	bd90      	pop	{r4, r7, pc}
    470c:	000040c9 	.word	0x000040c9

00004710 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    4710:	b590      	push	{r4, r7, lr}
    4712:	b085      	sub	sp, #20
    4714:	af00      	add	r7, sp, #0
    4716:	6078      	str	r0, [r7, #4]
    4718:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    471a:	230f      	movs	r3, #15
    471c:	18fc      	adds	r4, r7, r3
    471e:	683a      	ldr	r2, [r7, #0]
    4720:	687b      	ldr	r3, [r7, #4]
    4722:	0011      	movs	r1, r2
    4724:	0018      	movs	r0, r3
    4726:	4b0d      	ldr	r3, [pc, #52]	; (475c <nm_spi_write_reg+0x4c>)
    4728:	4798      	blx	r3
    472a:	0003      	movs	r3, r0
    472c:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    472e:	230f      	movs	r3, #15
    4730:	18fb      	adds	r3, r7, r3
    4732:	781b      	ldrb	r3, [r3, #0]
    4734:	b25b      	sxtb	r3, r3
    4736:	2b01      	cmp	r3, #1
    4738:	d104      	bne.n	4744 <nm_spi_write_reg+0x34>
    473a:	230f      	movs	r3, #15
    473c:	18fb      	adds	r3, r7, r3
    473e:	2200      	movs	r2, #0
    4740:	701a      	strb	r2, [r3, #0]
    4742:	e003      	b.n	474c <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4744:	230f      	movs	r3, #15
    4746:	18fb      	adds	r3, r7, r3
    4748:	22fa      	movs	r2, #250	; 0xfa
    474a:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    474c:	230f      	movs	r3, #15
    474e:	18fb      	adds	r3, r7, r3
    4750:	781b      	ldrb	r3, [r3, #0]
    4752:	b25b      	sxtb	r3, r3
}
    4754:	0018      	movs	r0, r3
    4756:	46bd      	mov	sp, r7
    4758:	b005      	add	sp, #20
    475a:	bd90      	pop	{r4, r7, pc}
    475c:	00003d49 	.word	0x00003d49

00004760 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4760:	b590      	push	{r4, r7, lr}
    4762:	b087      	sub	sp, #28
    4764:	af00      	add	r7, sp, #0
    4766:	60f8      	str	r0, [r7, #12]
    4768:	60b9      	str	r1, [r7, #8]
    476a:	1dbb      	adds	r3, r7, #6
    476c:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    476e:	2317      	movs	r3, #23
    4770:	18fc      	adds	r4, r7, r3
    4772:	1dbb      	adds	r3, r7, #6
    4774:	881a      	ldrh	r2, [r3, #0]
    4776:	68b9      	ldr	r1, [r7, #8]
    4778:	68fb      	ldr	r3, [r7, #12]
    477a:	0018      	movs	r0, r3
    477c:	4b0d      	ldr	r3, [pc, #52]	; (47b4 <nm_spi_read_block+0x54>)
    477e:	4798      	blx	r3
    4780:	0003      	movs	r3, r0
    4782:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4784:	2317      	movs	r3, #23
    4786:	18fb      	adds	r3, r7, r3
    4788:	781b      	ldrb	r3, [r3, #0]
    478a:	b25b      	sxtb	r3, r3
    478c:	2b01      	cmp	r3, #1
    478e:	d104      	bne.n	479a <nm_spi_read_block+0x3a>
    4790:	2317      	movs	r3, #23
    4792:	18fb      	adds	r3, r7, r3
    4794:	2200      	movs	r2, #0
    4796:	701a      	strb	r2, [r3, #0]
    4798:	e003      	b.n	47a2 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    479a:	2317      	movs	r3, #23
    479c:	18fb      	adds	r3, r7, r3
    479e:	22fa      	movs	r2, #250	; 0xfa
    47a0:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    47a2:	2317      	movs	r3, #23
    47a4:	18fb      	adds	r3, r7, r3
    47a6:	781b      	ldrb	r3, [r3, #0]
    47a8:	b25b      	sxtb	r3, r3
}
    47aa:	0018      	movs	r0, r3
    47ac:	46bd      	mov	sp, r7
    47ae:	b007      	add	sp, #28
    47b0:	bd90      	pop	{r4, r7, pc}
    47b2:	46c0      	nop			; (mov r8, r8)
    47b4:	000042d1 	.word	0x000042d1

000047b8 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    47b8:	b590      	push	{r4, r7, lr}
    47ba:	b087      	sub	sp, #28
    47bc:	af00      	add	r7, sp, #0
    47be:	60f8      	str	r0, [r7, #12]
    47c0:	60b9      	str	r1, [r7, #8]
    47c2:	1dbb      	adds	r3, r7, #6
    47c4:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    47c6:	2317      	movs	r3, #23
    47c8:	18fc      	adds	r4, r7, r3
    47ca:	1dbb      	adds	r3, r7, #6
    47cc:	881a      	ldrh	r2, [r3, #0]
    47ce:	68b9      	ldr	r1, [r7, #8]
    47d0:	68fb      	ldr	r3, [r7, #12]
    47d2:	0018      	movs	r0, r3
    47d4:	4b0d      	ldr	r3, [pc, #52]	; (480c <nm_spi_write_block+0x54>)
    47d6:	4798      	blx	r3
    47d8:	0003      	movs	r3, r0
    47da:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    47dc:	2317      	movs	r3, #23
    47de:	18fb      	adds	r3, r7, r3
    47e0:	781b      	ldrb	r3, [r3, #0]
    47e2:	b25b      	sxtb	r3, r3
    47e4:	2b01      	cmp	r3, #1
    47e6:	d104      	bne.n	47f2 <nm_spi_write_block+0x3a>
    47e8:	2317      	movs	r3, #23
    47ea:	18fb      	adds	r3, r7, r3
    47ec:	2200      	movs	r2, #0
    47ee:	701a      	strb	r2, [r3, #0]
    47f0:	e003      	b.n	47fa <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    47f2:	2317      	movs	r3, #23
    47f4:	18fb      	adds	r3, r7, r3
    47f6:	22fa      	movs	r2, #250	; 0xfa
    47f8:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    47fa:	2317      	movs	r3, #23
    47fc:	18fb      	adds	r3, r7, r3
    47fe:	781b      	ldrb	r3, [r3, #0]
    4800:	b25b      	sxtb	r3, r3
}
    4802:	0018      	movs	r0, r3
    4804:	46bd      	mov	sp, r7
    4806:	b007      	add	sp, #28
    4808:	bd90      	pop	{r4, r7, pc}
    480a:	46c0      	nop			; (mov r8, r8)
    480c:	00003ed5 	.word	0x00003ed5

00004810 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    4810:	b590      	push	{r4, r7, lr}
    4812:	b089      	sub	sp, #36	; 0x24
    4814:	af00      	add	r7, sp, #0
    4816:	60b9      	str	r1, [r7, #8]
    4818:	0011      	movs	r1, r2
    481a:	607b      	str	r3, [r7, #4]
    481c:	230f      	movs	r3, #15
    481e:	18fb      	adds	r3, r7, r3
    4820:	1c02      	adds	r2, r0, #0
    4822:	701a      	strb	r2, [r3, #0]
    4824:	230e      	movs	r3, #14
    4826:	18fb      	adds	r3, r7, r3
    4828:	1c0a      	adds	r2, r1, #0
    482a:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    482c:	2330      	movs	r3, #48	; 0x30
    482e:	18fb      	adds	r3, r7, r3
    4830:	881b      	ldrh	r3, [r3, #0]
    4832:	2b00      	cmp	r3, #0
    4834:	d100      	bne.n	4838 <Socket_ReadSocketData+0x28>
    4836:	e0d6      	b.n	49e6 <Socket_ReadSocketData+0x1d6>
    4838:	230f      	movs	r3, #15
    483a:	18fb      	adds	r3, r7, r3
    483c:	2200      	movs	r2, #0
    483e:	569a      	ldrsb	r2, [r3, r2]
    4840:	4b6b      	ldr	r3, [pc, #428]	; (49f0 <Socket_ReadSocketData+0x1e0>)
    4842:	0112      	lsls	r2, r2, #4
    4844:	58d3      	ldr	r3, [r2, r3]
    4846:	2b00      	cmp	r3, #0
    4848:	d100      	bne.n	484c <Socket_ReadSocketData+0x3c>
    484a:	e0cc      	b.n	49e6 <Socket_ReadSocketData+0x1d6>
    484c:	230f      	movs	r3, #15
    484e:	18fb      	adds	r3, r7, r3
    4850:	781b      	ldrb	r3, [r3, #0]
    4852:	b25b      	sxtb	r3, r3
    4854:	4a66      	ldr	r2, [pc, #408]	; (49f0 <Socket_ReadSocketData+0x1e0>)
    4856:	011b      	lsls	r3, r3, #4
    4858:	18d3      	adds	r3, r2, r3
    485a:	3304      	adds	r3, #4
    485c:	881b      	ldrh	r3, [r3, #0]
    485e:	b29b      	uxth	r3, r3
    4860:	2b00      	cmp	r3, #0
    4862:	d100      	bne.n	4866 <Socket_ReadSocketData+0x56>
    4864:	e0bf      	b.n	49e6 <Socket_ReadSocketData+0x1d6>
    4866:	230f      	movs	r3, #15
    4868:	18fb      	adds	r3, r7, r3
    486a:	781b      	ldrb	r3, [r3, #0]
    486c:	b25b      	sxtb	r3, r3
    486e:	4a60      	ldr	r2, [pc, #384]	; (49f0 <Socket_ReadSocketData+0x1e0>)
    4870:	011b      	lsls	r3, r3, #4
    4872:	18d3      	adds	r3, r2, r3
    4874:	330a      	adds	r3, #10
    4876:	781b      	ldrb	r3, [r3, #0]
    4878:	b2db      	uxtb	r3, r3
    487a:	2b01      	cmp	r3, #1
    487c:	d000      	beq.n	4880 <Socket_ReadSocketData+0x70>
    487e:	e0b2      	b.n	49e6 <Socket_ReadSocketData+0x1d6>
	{
		uint32	u32Address = u32StartAddress;
    4880:	687b      	ldr	r3, [r7, #4]
    4882:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    4884:	68bb      	ldr	r3, [r7, #8]
    4886:	2230      	movs	r2, #48	; 0x30
    4888:	18ba      	adds	r2, r7, r2
    488a:	8812      	ldrh	r2, [r2, #0]
    488c:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
    488e:	2319      	movs	r3, #25
    4890:	18fb      	adds	r3, r7, r3
    4892:	2201      	movs	r2, #1
    4894:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
    4896:	231a      	movs	r3, #26
    4898:	18fb      	adds	r3, r7, r3
    489a:	2230      	movs	r2, #48	; 0x30
    489c:	18ba      	adds	r2, r7, r2
    489e:	8812      	ldrh	r2, [r2, #0]
    48a0:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    48a2:	230f      	movs	r3, #15
    48a4:	18fb      	adds	r3, r7, r3
    48a6:	781b      	ldrb	r3, [r3, #0]
    48a8:	b25b      	sxtb	r3, r3
    48aa:	4a51      	ldr	r2, [pc, #324]	; (49f0 <Socket_ReadSocketData+0x1e0>)
    48ac:	011b      	lsls	r3, r3, #4
    48ae:	18d3      	adds	r3, r2, r3
    48b0:	3304      	adds	r3, #4
    48b2:	881b      	ldrh	r3, [r3, #0]
    48b4:	b29b      	uxth	r3, r3
    48b6:	221a      	movs	r2, #26
    48b8:	18ba      	adds	r2, r7, r2
    48ba:	8812      	ldrh	r2, [r2, #0]
    48bc:	1ad3      	subs	r3, r2, r3
    48be:	b29a      	uxth	r2, r3
    48c0:	2316      	movs	r3, #22
    48c2:	18fb      	adds	r3, r7, r3
    48c4:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
    48c6:	2316      	movs	r3, #22
    48c8:	18fb      	adds	r3, r7, r3
    48ca:	2200      	movs	r2, #0
    48cc:	5e9b      	ldrsh	r3, [r3, r2]
    48ce:	2b00      	cmp	r3, #0
    48d0:	dd0f      	ble.n	48f2 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
    48d2:	2319      	movs	r3, #25
    48d4:	18fb      	adds	r3, r7, r3
    48d6:	2200      	movs	r2, #0
    48d8:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    48da:	230f      	movs	r3, #15
    48dc:	18fb      	adds	r3, r7, r3
    48de:	2200      	movs	r2, #0
    48e0:	569a      	ldrsb	r2, [r3, r2]
    48e2:	231a      	movs	r3, #26
    48e4:	18fb      	adds	r3, r7, r3
    48e6:	4942      	ldr	r1, [pc, #264]	; (49f0 <Socket_ReadSocketData+0x1e0>)
    48e8:	0112      	lsls	r2, r2, #4
    48ea:	188a      	adds	r2, r1, r2
    48ec:	3204      	adds	r2, #4
    48ee:	8812      	ldrh	r2, [r2, #0]
    48f0:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    48f2:	230f      	movs	r3, #15
    48f4:	18fb      	adds	r3, r7, r3
    48f6:	2200      	movs	r2, #0
    48f8:	569a      	ldrsb	r2, [r3, r2]
    48fa:	4b3d      	ldr	r3, [pc, #244]	; (49f0 <Socket_ReadSocketData+0x1e0>)
    48fc:	0112      	lsls	r2, r2, #4
    48fe:	58d1      	ldr	r1, [r2, r3]
    4900:	2319      	movs	r3, #25
    4902:	18fb      	adds	r3, r7, r3
    4904:	781c      	ldrb	r4, [r3, #0]
    4906:	231a      	movs	r3, #26
    4908:	18fb      	adds	r3, r7, r3
    490a:	881a      	ldrh	r2, [r3, #0]
    490c:	69f8      	ldr	r0, [r7, #28]
    490e:	0023      	movs	r3, r4
    4910:	4c38      	ldr	r4, [pc, #224]	; (49f4 <Socket_ReadSocketData+0x1e4>)
    4912:	47a0      	blx	r4
    4914:	1e03      	subs	r3, r0, #0
    4916:	d14f      	bne.n	49b8 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    4918:	230f      	movs	r3, #15
    491a:	18fb      	adds	r3, r7, r3
    491c:	2200      	movs	r2, #0
    491e:	569a      	ldrsb	r2, [r3, r2]
    4920:	4b33      	ldr	r3, [pc, #204]	; (49f0 <Socket_ReadSocketData+0x1e0>)
    4922:	0112      	lsls	r2, r2, #4
    4924:	58d2      	ldr	r2, [r2, r3]
    4926:	68bb      	ldr	r3, [r7, #8]
    4928:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
    492a:	231a      	movs	r3, #26
    492c:	18fb      	adds	r3, r7, r3
    492e:	2200      	movs	r2, #0
    4930:	5e9a      	ldrsh	r2, [r3, r2]
    4932:	68bb      	ldr	r3, [r7, #8]
    4934:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    4936:	68bb      	ldr	r3, [r7, #8]
    4938:	88da      	ldrh	r2, [r3, #6]
    493a:	231a      	movs	r3, #26
    493c:	18fb      	adds	r3, r7, r3
    493e:	881b      	ldrh	r3, [r3, #0]
    4940:	1ad3      	subs	r3, r2, r3
    4942:	b29a      	uxth	r2, r3
    4944:	68bb      	ldr	r3, [r7, #8]
    4946:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
    4948:	4b2b      	ldr	r3, [pc, #172]	; (49f8 <Socket_ReadSocketData+0x1e8>)
    494a:	681b      	ldr	r3, [r3, #0]
    494c:	2b00      	cmp	r3, #0
    494e:	d00b      	beq.n	4968 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    4950:	4b29      	ldr	r3, [pc, #164]	; (49f8 <Socket_ReadSocketData+0x1e8>)
    4952:	681b      	ldr	r3, [r3, #0]
    4954:	68bc      	ldr	r4, [r7, #8]
    4956:	220e      	movs	r2, #14
    4958:	18ba      	adds	r2, r7, r2
    495a:	7811      	ldrb	r1, [r2, #0]
    495c:	220f      	movs	r2, #15
    495e:	18ba      	adds	r2, r7, r2
    4960:	2000      	movs	r0, #0
    4962:	5610      	ldrsb	r0, [r2, r0]
    4964:	0022      	movs	r2, r4
    4966:	4798      	blx	r3

				u16ReadCount -= u16Read;
    4968:	2330      	movs	r3, #48	; 0x30
    496a:	18f9      	adds	r1, r7, r3
    496c:	2330      	movs	r3, #48	; 0x30
    496e:	18fa      	adds	r2, r7, r3
    4970:	231a      	movs	r3, #26
    4972:	18fb      	adds	r3, r7, r3
    4974:	8812      	ldrh	r2, [r2, #0]
    4976:	881b      	ldrh	r3, [r3, #0]
    4978:	1ad3      	subs	r3, r2, r3
    497a:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
    497c:	231a      	movs	r3, #26
    497e:	18fb      	adds	r3, r7, r3
    4980:	881b      	ldrh	r3, [r3, #0]
    4982:	69fa      	ldr	r2, [r7, #28]
    4984:	18d3      	adds	r3, r2, r3
    4986:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    4988:	230f      	movs	r3, #15
    498a:	18fb      	adds	r3, r7, r3
    498c:	781b      	ldrb	r3, [r3, #0]
    498e:	b25b      	sxtb	r3, r3
    4990:	4a17      	ldr	r2, [pc, #92]	; (49f0 <Socket_ReadSocketData+0x1e0>)
    4992:	011b      	lsls	r3, r3, #4
    4994:	18d3      	adds	r3, r2, r3
    4996:	330a      	adds	r3, #10
    4998:	781b      	ldrb	r3, [r3, #0]
    499a:	b2db      	uxtb	r3, r3
    499c:	2b00      	cmp	r3, #0
    499e:	d11b      	bne.n	49d8 <Socket_ReadSocketData+0x1c8>
    49a0:	2330      	movs	r3, #48	; 0x30
    49a2:	18fb      	adds	r3, r7, r3
    49a4:	881b      	ldrh	r3, [r3, #0]
    49a6:	2b00      	cmp	r3, #0
    49a8:	d016      	beq.n	49d8 <Socket_ReadSocketData+0x1c8>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    49aa:	2301      	movs	r3, #1
    49ac:	2200      	movs	r2, #0
    49ae:	2100      	movs	r1, #0
    49b0:	2000      	movs	r0, #0
    49b2:	4c10      	ldr	r4, [pc, #64]	; (49f4 <Socket_ReadSocketData+0x1e4>)
    49b4:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
    49b6:	e016      	b.n	49e6 <Socket_ReadSocketData+0x1d6>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    49b8:	4b10      	ldr	r3, [pc, #64]	; (49fc <Socket_ReadSocketData+0x1ec>)
    49ba:	0018      	movs	r0, r3
    49bc:	4b10      	ldr	r3, [pc, #64]	; (4a00 <Socket_ReadSocketData+0x1f0>)
    49be:	4798      	blx	r3
    49c0:	2330      	movs	r3, #48	; 0x30
    49c2:	18fb      	adds	r3, r7, r3
    49c4:	881a      	ldrh	r2, [r3, #0]
    49c6:	4b0f      	ldr	r3, [pc, #60]	; (4a04 <Socket_ReadSocketData+0x1f4>)
    49c8:	0011      	movs	r1, r2
    49ca:	0018      	movs	r0, r3
    49cc:	4b0c      	ldr	r3, [pc, #48]	; (4a00 <Socket_ReadSocketData+0x1f0>)
    49ce:	4798      	blx	r3
    49d0:	200d      	movs	r0, #13
    49d2:	4b0d      	ldr	r3, [pc, #52]	; (4a08 <Socket_ReadSocketData+0x1f8>)
    49d4:	4798      	blx	r3
				break;
    49d6:	e006      	b.n	49e6 <Socket_ReadSocketData+0x1d6>
			}
		}while(u16ReadCount != 0);
    49d8:	2330      	movs	r3, #48	; 0x30
    49da:	18fb      	adds	r3, r7, r3
    49dc:	881b      	ldrh	r3, [r3, #0]
    49de:	2b00      	cmp	r3, #0
    49e0:	d000      	beq.n	49e4 <Socket_ReadSocketData+0x1d4>
    49e2:	e754      	b.n	488e <Socket_ReadSocketData+0x7e>
	}
}
    49e4:	e7ff      	b.n	49e6 <Socket_ReadSocketData+0x1d6>
    49e6:	46c0      	nop			; (mov r8, r8)
    49e8:	46bd      	mov	sp, r7
    49ea:	b009      	add	sp, #36	; 0x24
    49ec:	bd90      	pop	{r4, r7, pc}
    49ee:	46c0      	nop			; (mov r8, r8)
    49f0:	20000318 	.word	0x20000318
    49f4:	00001779 	.word	0x00001779
    49f8:	200003c8 	.word	0x200003c8
    49fc:	0001053c 	.word	0x0001053c
    4a00:	0000dfad 	.word	0x0000dfad
    4a04:	00010548 	.word	0x00010548
    4a08:	0000dfe1 	.word	0x0000dfe1

00004a0c <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    4a0c:	b590      	push	{r4, r7, lr}
    4a0e:	b0bb      	sub	sp, #236	; 0xec
    4a10:	af02      	add	r7, sp, #8
    4a12:	603a      	str	r2, [r7, #0]
    4a14:	1dfb      	adds	r3, r7, #7
    4a16:	1c02      	adds	r2, r0, #0
    4a18:	701a      	strb	r2, [r3, #0]
    4a1a:	1d3b      	adds	r3, r7, #4
    4a1c:	1c0a      	adds	r2, r1, #0
    4a1e:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    4a20:	1dfb      	adds	r3, r7, #7
    4a22:	781b      	ldrb	r3, [r3, #0]
    4a24:	2b41      	cmp	r3, #65	; 0x41
    4a26:	d003      	beq.n	4a30 <m2m_ip_cb+0x24>
    4a28:	1dfb      	adds	r3, r7, #7
    4a2a:	781b      	ldrb	r3, [r3, #0]
    4a2c:	2b54      	cmp	r3, #84	; 0x54
    4a2e:	d120      	bne.n	4a72 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    4a30:	23cc      	movs	r3, #204	; 0xcc
    4a32:	18f9      	adds	r1, r7, r3
    4a34:	6838      	ldr	r0, [r7, #0]
    4a36:	2300      	movs	r3, #0
    4a38:	2204      	movs	r2, #4
    4a3a:	4c98      	ldr	r4, [pc, #608]	; (4c9c <m2m_ip_cb+0x290>)
    4a3c:	47a0      	blx	r4
    4a3e:	1e03      	subs	r3, r0, #0
    4a40:	d000      	beq.n	4a44 <m2m_ip_cb+0x38>
    4a42:	e275      	b.n	4f30 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
    4a44:	23cc      	movs	r3, #204	; 0xcc
    4a46:	18fb      	adds	r3, r7, r3
    4a48:	2201      	movs	r2, #1
    4a4a:	569a      	ldrsb	r2, [r3, r2]
    4a4c:	23c8      	movs	r3, #200	; 0xc8
    4a4e:	18fb      	adds	r3, r7, r3
    4a50:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    4a52:	4b93      	ldr	r3, [pc, #588]	; (4ca0 <m2m_ip_cb+0x294>)
    4a54:	681b      	ldr	r3, [r3, #0]
    4a56:	2b00      	cmp	r3, #0
    4a58:	d100      	bne.n	4a5c <m2m_ip_cb+0x50>
    4a5a:	e269      	b.n	4f30 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    4a5c:	4b90      	ldr	r3, [pc, #576]	; (4ca0 <m2m_ip_cb+0x294>)
    4a5e:	681b      	ldr	r3, [r3, #0]
    4a60:	22cc      	movs	r2, #204	; 0xcc
    4a62:	18ba      	adds	r2, r7, r2
    4a64:	2000      	movs	r0, #0
    4a66:	5610      	ldrsb	r0, [r2, r0]
    4a68:	22c8      	movs	r2, #200	; 0xc8
    4a6a:	18ba      	adds	r2, r7, r2
    4a6c:	2101      	movs	r1, #1
    4a6e:	4798      	blx	r3
	{
    4a70:	e25e      	b.n	4f30 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    4a72:	1dfb      	adds	r3, r7, #7
    4a74:	781b      	ldrb	r3, [r3, #0]
    4a76:	2b42      	cmp	r3, #66	; 0x42
    4a78:	d120      	bne.n	4abc <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    4a7a:	23c4      	movs	r3, #196	; 0xc4
    4a7c:	18f9      	adds	r1, r7, r3
    4a7e:	6838      	ldr	r0, [r7, #0]
    4a80:	2300      	movs	r3, #0
    4a82:	2204      	movs	r2, #4
    4a84:	4c85      	ldr	r4, [pc, #532]	; (4c9c <m2m_ip_cb+0x290>)
    4a86:	47a0      	blx	r4
    4a88:	1e03      	subs	r3, r0, #0
    4a8a:	d000      	beq.n	4a8e <m2m_ip_cb+0x82>
    4a8c:	e257      	b.n	4f3e <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
    4a8e:	23c4      	movs	r3, #196	; 0xc4
    4a90:	18fb      	adds	r3, r7, r3
    4a92:	2201      	movs	r2, #1
    4a94:	569a      	ldrsb	r2, [r3, r2]
    4a96:	23c0      	movs	r3, #192	; 0xc0
    4a98:	18fb      	adds	r3, r7, r3
    4a9a:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    4a9c:	4b80      	ldr	r3, [pc, #512]	; (4ca0 <m2m_ip_cb+0x294>)
    4a9e:	681b      	ldr	r3, [r3, #0]
    4aa0:	2b00      	cmp	r3, #0
    4aa2:	d100      	bne.n	4aa6 <m2m_ip_cb+0x9a>
    4aa4:	e24b      	b.n	4f3e <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    4aa6:	4b7e      	ldr	r3, [pc, #504]	; (4ca0 <m2m_ip_cb+0x294>)
    4aa8:	681b      	ldr	r3, [r3, #0]
    4aaa:	22c4      	movs	r2, #196	; 0xc4
    4aac:	18ba      	adds	r2, r7, r2
    4aae:	2000      	movs	r0, #0
    4ab0:	5610      	ldrsb	r0, [r2, r0]
    4ab2:	22c0      	movs	r2, #192	; 0xc0
    4ab4:	18ba      	adds	r2, r7, r2
    4ab6:	2102      	movs	r1, #2
    4ab8:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    4aba:	e240      	b.n	4f3e <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    4abc:	1dfb      	adds	r3, r7, #7
    4abe:	781b      	ldrb	r3, [r3, #0]
    4ac0:	2b43      	cmp	r3, #67	; 0x43
    4ac2:	d000      	beq.n	4ac6 <m2m_ip_cb+0xba>
    4ac4:	e086      	b.n	4bd4 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    4ac6:	23b4      	movs	r3, #180	; 0xb4
    4ac8:	18f9      	adds	r1, r7, r3
    4aca:	6838      	ldr	r0, [r7, #0]
    4acc:	2300      	movs	r3, #0
    4ace:	220c      	movs	r2, #12
    4ad0:	4c72      	ldr	r4, [pc, #456]	; (4c9c <m2m_ip_cb+0x290>)
    4ad2:	47a0      	blx	r4
    4ad4:	1e03      	subs	r3, r0, #0
    4ad6:	d000      	beq.n	4ada <m2m_ip_cb+0xce>
    4ad8:	e231      	b.n	4f3e <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
    4ada:	23b4      	movs	r3, #180	; 0xb4
    4adc:	18fb      	adds	r3, r7, r3
    4ade:	7a5b      	ldrb	r3, [r3, #9]
    4ae0:	b25b      	sxtb	r3, r3
    4ae2:	2b00      	cmp	r3, #0
    4ae4:	db4f      	blt.n	4b86 <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    4ae6:	23b4      	movs	r3, #180	; 0xb4
    4ae8:	18fb      	adds	r3, r7, r3
    4aea:	7a5b      	ldrb	r3, [r3, #9]
    4aec:	b25b      	sxtb	r3, r3
    4aee:	0018      	movs	r0, r3
    4af0:	23b4      	movs	r3, #180	; 0xb4
    4af2:	18fb      	adds	r3, r7, r3
    4af4:	7a1b      	ldrb	r3, [r3, #8]
    4af6:	b25b      	sxtb	r3, r3
    4af8:	4a6a      	ldr	r2, [pc, #424]	; (4ca4 <m2m_ip_cb+0x298>)
    4afa:	011b      	lsls	r3, r3, #4
    4afc:	18d3      	adds	r3, r2, r3
    4afe:	330b      	adds	r3, #11
    4b00:	781b      	ldrb	r3, [r3, #0]
    4b02:	b2d9      	uxtb	r1, r3
    4b04:	4a67      	ldr	r2, [pc, #412]	; (4ca4 <m2m_ip_cb+0x298>)
    4b06:	0103      	lsls	r3, r0, #4
    4b08:	18d3      	adds	r3, r2, r3
    4b0a:	330b      	adds	r3, #11
    4b0c:	1c0a      	adds	r2, r1, #0
    4b0e:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    4b10:	23b4      	movs	r3, #180	; 0xb4
    4b12:	18fb      	adds	r3, r7, r3
    4b14:	7a5b      	ldrb	r3, [r3, #9]
    4b16:	b25b      	sxtb	r3, r3
    4b18:	4a62      	ldr	r2, [pc, #392]	; (4ca4 <m2m_ip_cb+0x298>)
    4b1a:	011b      	lsls	r3, r3, #4
    4b1c:	18d3      	adds	r3, r2, r3
    4b1e:	330a      	adds	r3, #10
    4b20:	2201      	movs	r2, #1
    4b22:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    4b24:	23b4      	movs	r3, #180	; 0xb4
    4b26:	18fb      	adds	r3, r7, r3
    4b28:	7a5b      	ldrb	r3, [r3, #9]
    4b2a:	b25b      	sxtb	r3, r3
    4b2c:	0018      	movs	r0, r3
    4b2e:	23b4      	movs	r3, #180	; 0xb4
    4b30:	18fb      	adds	r3, r7, r3
    4b32:	895b      	ldrh	r3, [r3, #10]
    4b34:	3b08      	subs	r3, #8
    4b36:	b299      	uxth	r1, r3
    4b38:	4a5a      	ldr	r2, [pc, #360]	; (4ca4 <m2m_ip_cb+0x298>)
    4b3a:	0103      	lsls	r3, r0, #4
    4b3c:	18d3      	adds	r3, r2, r3
    4b3e:	3308      	adds	r3, #8
    4b40:	1c0a      	adds	r2, r1, #0
    4b42:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
    4b44:	4b58      	ldr	r3, [pc, #352]	; (4ca8 <m2m_ip_cb+0x29c>)
    4b46:	881b      	ldrh	r3, [r3, #0]
    4b48:	b29b      	uxth	r3, r3
    4b4a:	3301      	adds	r3, #1
    4b4c:	b29a      	uxth	r2, r3
    4b4e:	4b56      	ldr	r3, [pc, #344]	; (4ca8 <m2m_ip_cb+0x29c>)
    4b50:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    4b52:	4b55      	ldr	r3, [pc, #340]	; (4ca8 <m2m_ip_cb+0x29c>)
    4b54:	881b      	ldrh	r3, [r3, #0]
    4b56:	b29b      	uxth	r3, r3
    4b58:	2b00      	cmp	r3, #0
    4b5a:	d106      	bne.n	4b6a <m2m_ip_cb+0x15e>
					++gu16SessionID;
    4b5c:	4b52      	ldr	r3, [pc, #328]	; (4ca8 <m2m_ip_cb+0x29c>)
    4b5e:	881b      	ldrh	r3, [r3, #0]
    4b60:	b29b      	uxth	r3, r3
    4b62:	3301      	adds	r3, #1
    4b64:	b29a      	uxth	r2, r3
    4b66:	4b50      	ldr	r3, [pc, #320]	; (4ca8 <m2m_ip_cb+0x29c>)
    4b68:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    4b6a:	23b4      	movs	r3, #180	; 0xb4
    4b6c:	18fb      	adds	r3, r7, r3
    4b6e:	7a5b      	ldrb	r3, [r3, #9]
    4b70:	b25b      	sxtb	r3, r3
    4b72:	0018      	movs	r0, r3
    4b74:	4b4c      	ldr	r3, [pc, #304]	; (4ca8 <m2m_ip_cb+0x29c>)
    4b76:	881b      	ldrh	r3, [r3, #0]
    4b78:	b299      	uxth	r1, r3
    4b7a:	4a4a      	ldr	r2, [pc, #296]	; (4ca4 <m2m_ip_cb+0x298>)
    4b7c:	0103      	lsls	r3, r0, #4
    4b7e:	18d3      	adds	r3, r2, r3
    4b80:	3306      	adds	r3, #6
    4b82:	1c0a      	adds	r2, r1, #0
    4b84:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
    4b86:	23b4      	movs	r3, #180	; 0xb4
    4b88:	18fb      	adds	r3, r7, r3
    4b8a:	2209      	movs	r2, #9
    4b8c:	569a      	ldrsb	r2, [r3, r2]
    4b8e:	23a0      	movs	r3, #160	; 0xa0
    4b90:	18fb      	adds	r3, r7, r3
    4b92:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    4b94:	23a0      	movs	r3, #160	; 0xa0
    4b96:	18fb      	adds	r3, r7, r3
    4b98:	2202      	movs	r2, #2
    4b9a:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    4b9c:	23b4      	movs	r3, #180	; 0xb4
    4b9e:	18fb      	adds	r3, r7, r3
    4ba0:	885a      	ldrh	r2, [r3, #2]
    4ba2:	23a0      	movs	r3, #160	; 0xa0
    4ba4:	18fb      	adds	r3, r7, r3
    4ba6:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    4ba8:	23b4      	movs	r3, #180	; 0xb4
    4baa:	18fb      	adds	r3, r7, r3
    4bac:	685a      	ldr	r2, [r3, #4]
    4bae:	23a0      	movs	r3, #160	; 0xa0
    4bb0:	18fb      	adds	r3, r7, r3
    4bb2:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
    4bb4:	4b3a      	ldr	r3, [pc, #232]	; (4ca0 <m2m_ip_cb+0x294>)
    4bb6:	681b      	ldr	r3, [r3, #0]
    4bb8:	2b00      	cmp	r3, #0
    4bba:	d100      	bne.n	4bbe <m2m_ip_cb+0x1b2>
    4bbc:	e1bf      	b.n	4f3e <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    4bbe:	4b38      	ldr	r3, [pc, #224]	; (4ca0 <m2m_ip_cb+0x294>)
    4bc0:	681b      	ldr	r3, [r3, #0]
    4bc2:	22b4      	movs	r2, #180	; 0xb4
    4bc4:	18ba      	adds	r2, r7, r2
    4bc6:	2008      	movs	r0, #8
    4bc8:	5610      	ldrsb	r0, [r2, r0]
    4bca:	22a0      	movs	r2, #160	; 0xa0
    4bcc:	18ba      	adds	r2, r7, r2
    4bce:	2104      	movs	r1, #4
    4bd0:	4798      	blx	r3
}
    4bd2:	e1b4      	b.n	4f3e <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    4bd4:	1dfb      	adds	r3, r7, #7
    4bd6:	781b      	ldrb	r3, [r3, #0]
    4bd8:	2b44      	cmp	r3, #68	; 0x44
    4bda:	d003      	beq.n	4be4 <m2m_ip_cb+0x1d8>
    4bdc:	1dfb      	adds	r3, r7, #7
    4bde:	781b      	ldrb	r3, [r3, #0]
    4be0:	2b4b      	cmp	r3, #75	; 0x4b
    4be2:	d13d      	bne.n	4c60 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    4be4:	239c      	movs	r3, #156	; 0x9c
    4be6:	18f9      	adds	r1, r7, r3
    4be8:	6838      	ldr	r0, [r7, #0]
    4bea:	2300      	movs	r3, #0
    4bec:	2204      	movs	r2, #4
    4bee:	4c2b      	ldr	r4, [pc, #172]	; (4c9c <m2m_ip_cb+0x290>)
    4bf0:	47a0      	blx	r4
    4bf2:	1e03      	subs	r3, r0, #0
    4bf4:	d000      	beq.n	4bf8 <m2m_ip_cb+0x1ec>
    4bf6:	e19d      	b.n	4f34 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
    4bf8:	239c      	movs	r3, #156	; 0x9c
    4bfa:	18fb      	adds	r3, r7, r3
    4bfc:	2200      	movs	r2, #0
    4bfe:	569a      	ldrsb	r2, [r3, r2]
    4c00:	2398      	movs	r3, #152	; 0x98
    4c02:	18fb      	adds	r3, r7, r3
    4c04:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    4c06:	239c      	movs	r3, #156	; 0x9c
    4c08:	18fb      	adds	r3, r7, r3
    4c0a:	2201      	movs	r2, #1
    4c0c:	569a      	ldrsb	r2, [r3, r2]
    4c0e:	2398      	movs	r3, #152	; 0x98
    4c10:	18fb      	adds	r3, r7, r3
    4c12:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    4c14:	239c      	movs	r3, #156	; 0x9c
    4c16:	18fb      	adds	r3, r7, r3
    4c18:	785b      	ldrb	r3, [r3, #1]
    4c1a:	b25b      	sxtb	r3, r3
    4c1c:	2b00      	cmp	r3, #0
    4c1e:	d10f      	bne.n	4c40 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    4c20:	239c      	movs	r3, #156	; 0x9c
    4c22:	18fb      	adds	r3, r7, r3
    4c24:	781b      	ldrb	r3, [r3, #0]
    4c26:	b25b      	sxtb	r3, r3
    4c28:	0018      	movs	r0, r3
    4c2a:	239c      	movs	r3, #156	; 0x9c
    4c2c:	18fb      	adds	r3, r7, r3
    4c2e:	885b      	ldrh	r3, [r3, #2]
    4c30:	3b08      	subs	r3, #8
    4c32:	b299      	uxth	r1, r3
    4c34:	4a1b      	ldr	r2, [pc, #108]	; (4ca4 <m2m_ip_cb+0x298>)
    4c36:	0103      	lsls	r3, r0, #4
    4c38:	18d3      	adds	r3, r2, r3
    4c3a:	3308      	adds	r3, #8
    4c3c:	1c0a      	adds	r2, r1, #0
    4c3e:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
    4c40:	4b17      	ldr	r3, [pc, #92]	; (4ca0 <m2m_ip_cb+0x294>)
    4c42:	681b      	ldr	r3, [r3, #0]
    4c44:	2b00      	cmp	r3, #0
    4c46:	d100      	bne.n	4c4a <m2m_ip_cb+0x23e>
    4c48:	e174      	b.n	4f34 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    4c4a:	4b15      	ldr	r3, [pc, #84]	; (4ca0 <m2m_ip_cb+0x294>)
    4c4c:	681b      	ldr	r3, [r3, #0]
    4c4e:	229c      	movs	r2, #156	; 0x9c
    4c50:	18ba      	adds	r2, r7, r2
    4c52:	2000      	movs	r0, #0
    4c54:	5610      	ldrsb	r0, [r2, r0]
    4c56:	2298      	movs	r2, #152	; 0x98
    4c58:	18ba      	adds	r2, r7, r2
    4c5a:	2105      	movs	r1, #5
    4c5c:	4798      	blx	r3
	{
    4c5e:	e169      	b.n	4f34 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    4c60:	1dfb      	adds	r3, r7, #7
    4c62:	781b      	ldrb	r3, [r3, #0]
    4c64:	2b4a      	cmp	r3, #74	; 0x4a
    4c66:	d123      	bne.n	4cb0 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    4c68:	230c      	movs	r3, #12
    4c6a:	18f9      	adds	r1, r7, r3
    4c6c:	6838      	ldr	r0, [r7, #0]
    4c6e:	2300      	movs	r3, #0
    4c70:	2244      	movs	r2, #68	; 0x44
    4c72:	4c0a      	ldr	r4, [pc, #40]	; (4c9c <m2m_ip_cb+0x290>)
    4c74:	47a0      	blx	r4
    4c76:	1e03      	subs	r3, r0, #0
    4c78:	d000      	beq.n	4c7c <m2m_ip_cb+0x270>
    4c7a:	e160      	b.n	4f3e <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
    4c7c:	4b0b      	ldr	r3, [pc, #44]	; (4cac <m2m_ip_cb+0x2a0>)
    4c7e:	681b      	ldr	r3, [r3, #0]
    4c80:	2b00      	cmp	r3, #0
    4c82:	d100      	bne.n	4c86 <m2m_ip_cb+0x27a>
    4c84:	e15b      	b.n	4f3e <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    4c86:	4b09      	ldr	r3, [pc, #36]	; (4cac <m2m_ip_cb+0x2a0>)
    4c88:	681a      	ldr	r2, [r3, #0]
    4c8a:	230c      	movs	r3, #12
    4c8c:	18fb      	adds	r3, r7, r3
    4c8e:	6c19      	ldr	r1, [r3, #64]	; 0x40
    4c90:	230c      	movs	r3, #12
    4c92:	18fb      	adds	r3, r7, r3
    4c94:	0018      	movs	r0, r3
    4c96:	4790      	blx	r2
}
    4c98:	e151      	b.n	4f3e <m2m_ip_cb+0x532>
    4c9a:	46c0      	nop			; (mov r8, r8)
    4c9c:	00001779 	.word	0x00001779
    4ca0:	200003c8 	.word	0x200003c8
    4ca4:	20000318 	.word	0x20000318
    4ca8:	20000216 	.word	0x20000216
    4cac:	200003d0 	.word	0x200003d0
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    4cb0:	1dfb      	adds	r3, r7, #7
    4cb2:	781b      	ldrb	r3, [r3, #0]
    4cb4:	2b46      	cmp	r3, #70	; 0x46
    4cb6:	d008      	beq.n	4cca <m2m_ip_cb+0x2be>
    4cb8:	1dfb      	adds	r3, r7, #7
    4cba:	781b      	ldrb	r3, [r3, #0]
    4cbc:	2b48      	cmp	r3, #72	; 0x48
    4cbe:	d004      	beq.n	4cca <m2m_ip_cb+0x2be>
    4cc0:	1dfb      	adds	r3, r7, #7
    4cc2:	781b      	ldrb	r3, [r3, #0]
    4cc4:	2b4d      	cmp	r3, #77	; 0x4d
    4cc6:	d000      	beq.n	4cca <m2m_ip_cb+0x2be>
    4cc8:	e0b4      	b.n	4e34 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    4cca:	23df      	movs	r3, #223	; 0xdf
    4ccc:	18fb      	adds	r3, r7, r3
    4cce:	2206      	movs	r2, #6
    4cd0:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
    4cd2:	1dfb      	adds	r3, r7, #7
    4cd4:	781b      	ldrb	r3, [r3, #0]
    4cd6:	2b48      	cmp	r3, #72	; 0x48
    4cd8:	d103      	bne.n	4ce2 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    4cda:	23df      	movs	r3, #223	; 0xdf
    4cdc:	18fb      	adds	r3, r7, r3
    4cde:	2209      	movs	r2, #9
    4ce0:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
    4ce2:	23d8      	movs	r3, #216	; 0xd8
    4ce4:	18fb      	adds	r3, r7, r3
    4ce6:	2210      	movs	r2, #16
    4ce8:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    4cea:	23d8      	movs	r3, #216	; 0xd8
    4cec:	18fb      	adds	r3, r7, r3
    4cee:	881a      	ldrh	r2, [r3, #0]
    4cf0:	2388      	movs	r3, #136	; 0x88
    4cf2:	18f9      	adds	r1, r7, r3
    4cf4:	6838      	ldr	r0, [r7, #0]
    4cf6:	2300      	movs	r3, #0
    4cf8:	4c93      	ldr	r4, [pc, #588]	; (4f48 <m2m_ip_cb+0x53c>)
    4cfa:	47a0      	blx	r4
    4cfc:	1e03      	subs	r3, r0, #0
    4cfe:	d000      	beq.n	4d02 <m2m_ip_cb+0x2f6>
    4d00:	e11a      	b.n	4f38 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
    4d02:	23d6      	movs	r3, #214	; 0xd6
    4d04:	18fb      	adds	r3, r7, r3
    4d06:	2200      	movs	r2, #0
    4d08:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
    4d0a:	23d5      	movs	r3, #213	; 0xd5
    4d0c:	18fb      	adds	r3, r7, r3
    4d0e:	2288      	movs	r2, #136	; 0x88
    4d10:	18ba      	adds	r2, r7, r2
    4d12:	7b12      	ldrb	r2, [r2, #12]
    4d14:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
    4d16:	23d6      	movs	r3, #214	; 0xd6
    4d18:	18fb      	adds	r3, r7, r3
    4d1a:	2288      	movs	r2, #136	; 0x88
    4d1c:	18ba      	adds	r2, r7, r2
    4d1e:	89d2      	ldrh	r2, [r2, #14]
    4d20:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
    4d22:	23d5      	movs	r3, #213	; 0xd5
    4d24:	18fb      	adds	r3, r7, r3
    4d26:	781b      	ldrb	r3, [r3, #0]
    4d28:	b25b      	sxtb	r3, r3
    4d2a:	4a88      	ldr	r2, [pc, #544]	; (4f4c <m2m_ip_cb+0x540>)
    4d2c:	011b      	lsls	r3, r3, #4
    4d2e:	18d3      	adds	r3, r2, r3
    4d30:	330c      	adds	r3, #12
    4d32:	2200      	movs	r2, #0
    4d34:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    4d36:	23d2      	movs	r3, #210	; 0xd2
    4d38:	18fb      	adds	r3, r7, r3
    4d3a:	2288      	movs	r2, #136	; 0x88
    4d3c:	18ba      	adds	r2, r7, r2
    4d3e:	8912      	ldrh	r2, [r2, #8]
    4d40:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    4d42:	23d0      	movs	r3, #208	; 0xd0
    4d44:	18fb      	adds	r3, r7, r3
    4d46:	2288      	movs	r2, #136	; 0x88
    4d48:	18ba      	adds	r2, r7, r2
    4d4a:	8952      	ldrh	r2, [r2, #10]
    4d4c:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    4d4e:	2388      	movs	r3, #136	; 0x88
    4d50:	18fb      	adds	r3, r7, r3
    4d52:	885a      	ldrh	r2, [r3, #2]
    4d54:	2370      	movs	r3, #112	; 0x70
    4d56:	18fb      	adds	r3, r7, r3
    4d58:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    4d5a:	2388      	movs	r3, #136	; 0x88
    4d5c:	18fb      	adds	r3, r7, r3
    4d5e:	685a      	ldr	r2, [r3, #4]
    4d60:	2370      	movs	r3, #112	; 0x70
    4d62:	18fb      	adds	r3, r7, r3
    4d64:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    4d66:	23d5      	movs	r3, #213	; 0xd5
    4d68:	18fb      	adds	r3, r7, r3
    4d6a:	781b      	ldrb	r3, [r3, #0]
    4d6c:	b25b      	sxtb	r3, r3
    4d6e:	4a77      	ldr	r2, [pc, #476]	; (4f4c <m2m_ip_cb+0x540>)
    4d70:	011b      	lsls	r3, r3, #4
    4d72:	18d3      	adds	r3, r2, r3
    4d74:	3306      	adds	r3, #6
    4d76:	881b      	ldrh	r3, [r3, #0]
    4d78:	b29b      	uxth	r3, r3
    4d7a:	22d6      	movs	r2, #214	; 0xd6
    4d7c:	18ba      	adds	r2, r7, r2
    4d7e:	8812      	ldrh	r2, [r2, #0]
    4d80:	429a      	cmp	r2, r3
    4d82:	d148      	bne.n	4e16 <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    4d84:	23d2      	movs	r3, #210	; 0xd2
    4d86:	18fb      	adds	r3, r7, r3
    4d88:	2200      	movs	r2, #0
    4d8a:	5e9b      	ldrsh	r3, [r3, r2]
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	dd25      	ble.n	4ddc <m2m_ip_cb+0x3d0>
    4d90:	23d2      	movs	r3, #210	; 0xd2
    4d92:	18fb      	adds	r3, r7, r3
    4d94:	2200      	movs	r2, #0
    4d96:	5e9a      	ldrsh	r2, [r3, r2]
    4d98:	1d3b      	adds	r3, r7, #4
    4d9a:	881b      	ldrh	r3, [r3, #0]
    4d9c:	429a      	cmp	r2, r3
    4d9e:	da1d      	bge.n	4ddc <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
    4da0:	23d0      	movs	r3, #208	; 0xd0
    4da2:	18fb      	adds	r3, r7, r3
    4da4:	881b      	ldrh	r3, [r3, #0]
    4da6:	683a      	ldr	r2, [r7, #0]
    4da8:	18d3      	adds	r3, r2, r3
    4daa:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
    4dac:	23d8      	movs	r3, #216	; 0xd8
    4dae:	18fb      	adds	r3, r7, r3
    4db0:	22d2      	movs	r2, #210	; 0xd2
    4db2:	18ba      	adds	r2, r7, r2
    4db4:	8812      	ldrh	r2, [r2, #0]
    4db6:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    4db8:	683c      	ldr	r4, [r7, #0]
    4dba:	23df      	movs	r3, #223	; 0xdf
    4dbc:	18fb      	adds	r3, r7, r3
    4dbe:	781a      	ldrb	r2, [r3, #0]
    4dc0:	2370      	movs	r3, #112	; 0x70
    4dc2:	18f9      	adds	r1, r7, r3
    4dc4:	23d5      	movs	r3, #213	; 0xd5
    4dc6:	18fb      	adds	r3, r7, r3
    4dc8:	2000      	movs	r0, #0
    4dca:	5618      	ldrsb	r0, [r3, r0]
    4dcc:	23d8      	movs	r3, #216	; 0xd8
    4dce:	18fb      	adds	r3, r7, r3
    4dd0:	881b      	ldrh	r3, [r3, #0]
    4dd2:	9300      	str	r3, [sp, #0]
    4dd4:	0023      	movs	r3, r4
    4dd6:	4c5e      	ldr	r4, [pc, #376]	; (4f50 <m2m_ip_cb+0x544>)
    4dd8:	47a0      	blx	r4
	{
    4dda:	e0ad      	b.n	4f38 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    4ddc:	2370      	movs	r3, #112	; 0x70
    4dde:	18fb      	adds	r3, r7, r3
    4de0:	22d2      	movs	r2, #210	; 0xd2
    4de2:	18ba      	adds	r2, r7, r2
    4de4:	8812      	ldrh	r2, [r2, #0]
    4de6:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    4de8:	2370      	movs	r3, #112	; 0x70
    4dea:	18fb      	adds	r3, r7, r3
    4dec:	2200      	movs	r2, #0
    4dee:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
    4df0:	4b58      	ldr	r3, [pc, #352]	; (4f54 <m2m_ip_cb+0x548>)
    4df2:	681b      	ldr	r3, [r3, #0]
    4df4:	2b00      	cmp	r3, #0
    4df6:	d100      	bne.n	4dfa <m2m_ip_cb+0x3ee>
    4df8:	e09e      	b.n	4f38 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    4dfa:	4b56      	ldr	r3, [pc, #344]	; (4f54 <m2m_ip_cb+0x548>)
    4dfc:	681b      	ldr	r3, [r3, #0]
    4dfe:	2270      	movs	r2, #112	; 0x70
    4e00:	18bc      	adds	r4, r7, r2
    4e02:	22df      	movs	r2, #223	; 0xdf
    4e04:	18ba      	adds	r2, r7, r2
    4e06:	7811      	ldrb	r1, [r2, #0]
    4e08:	22d5      	movs	r2, #213	; 0xd5
    4e0a:	18ba      	adds	r2, r7, r2
    4e0c:	2000      	movs	r0, #0
    4e0e:	5610      	ldrsb	r0, [r2, r0]
    4e10:	0022      	movs	r2, r4
    4e12:	4798      	blx	r3
	{
    4e14:	e090      	b.n	4f38 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
    4e16:	23d8      	movs	r3, #216	; 0xd8
    4e18:	18fa      	adds	r2, r7, r3
    4e1a:	1d3b      	adds	r3, r7, #4
    4e1c:	8812      	ldrh	r2, [r2, #0]
    4e1e:	881b      	ldrh	r3, [r3, #0]
    4e20:	429a      	cmp	r2, r3
    4e22:	d300      	bcc.n	4e26 <m2m_ip_cb+0x41a>
    4e24:	e088      	b.n	4f38 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    4e26:	2301      	movs	r3, #1
    4e28:	2200      	movs	r2, #0
    4e2a:	2100      	movs	r1, #0
    4e2c:	2000      	movs	r0, #0
    4e2e:	4c46      	ldr	r4, [pc, #280]	; (4f48 <m2m_ip_cb+0x53c>)
    4e30:	47a0      	blx	r4
	{
    4e32:	e081      	b.n	4f38 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    4e34:	1dfb      	adds	r3, r7, #7
    4e36:	781b      	ldrb	r3, [r3, #0]
    4e38:	2b45      	cmp	r3, #69	; 0x45
    4e3a:	d007      	beq.n	4e4c <m2m_ip_cb+0x440>
    4e3c:	1dfb      	adds	r3, r7, #7
    4e3e:	781b      	ldrb	r3, [r3, #0]
    4e40:	2b47      	cmp	r3, #71	; 0x47
    4e42:	d003      	beq.n	4e4c <m2m_ip_cb+0x440>
    4e44:	1dfb      	adds	r3, r7, #7
    4e46:	781b      	ldrb	r3, [r3, #0]
    4e48:	2b4c      	cmp	r3, #76	; 0x4c
    4e4a:	d14c      	bne.n	4ee6 <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    4e4c:	23de      	movs	r3, #222	; 0xde
    4e4e:	18fb      	adds	r3, r7, r3
    4e50:	2207      	movs	r2, #7
    4e52:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
    4e54:	1dfb      	adds	r3, r7, #7
    4e56:	781b      	ldrb	r3, [r3, #0]
    4e58:	2b47      	cmp	r3, #71	; 0x47
    4e5a:	d103      	bne.n	4e64 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    4e5c:	23de      	movs	r3, #222	; 0xde
    4e5e:	18fb      	adds	r3, r7, r3
    4e60:	2208      	movs	r2, #8
    4e62:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    4e64:	2364      	movs	r3, #100	; 0x64
    4e66:	18f9      	adds	r1, r7, r3
    4e68:	6838      	ldr	r0, [r7, #0]
    4e6a:	2300      	movs	r3, #0
    4e6c:	2208      	movs	r2, #8
    4e6e:	4c36      	ldr	r4, [pc, #216]	; (4f48 <m2m_ip_cb+0x53c>)
    4e70:	47a0      	blx	r4
    4e72:	1e03      	subs	r3, r0, #0
    4e74:	d162      	bne.n	4f3c <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
    4e76:	23dc      	movs	r3, #220	; 0xdc
    4e78:	18fb      	adds	r3, r7, r3
    4e7a:	2200      	movs	r2, #0
    4e7c:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
    4e7e:	23db      	movs	r3, #219	; 0xdb
    4e80:	18fb      	adds	r3, r7, r3
    4e82:	2264      	movs	r2, #100	; 0x64
    4e84:	18ba      	adds	r2, r7, r2
    4e86:	7812      	ldrb	r2, [r2, #0]
    4e88:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    4e8a:	23dc      	movs	r3, #220	; 0xdc
    4e8c:	18fb      	adds	r3, r7, r3
    4e8e:	2264      	movs	r2, #100	; 0x64
    4e90:	18ba      	adds	r2, r7, r2
    4e92:	8892      	ldrh	r2, [r2, #4]
    4e94:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    4e96:	2364      	movs	r3, #100	; 0x64
    4e98:	18fb      	adds	r3, r7, r3
    4e9a:	2202      	movs	r2, #2
    4e9c:	5e9a      	ldrsh	r2, [r3, r2]
    4e9e:	236e      	movs	r3, #110	; 0x6e
    4ea0:	18fb      	adds	r3, r7, r3
    4ea2:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    4ea4:	23db      	movs	r3, #219	; 0xdb
    4ea6:	18fb      	adds	r3, r7, r3
    4ea8:	781b      	ldrb	r3, [r3, #0]
    4eaa:	b25b      	sxtb	r3, r3
    4eac:	4a27      	ldr	r2, [pc, #156]	; (4f4c <m2m_ip_cb+0x540>)
    4eae:	011b      	lsls	r3, r3, #4
    4eb0:	18d3      	adds	r3, r2, r3
    4eb2:	3306      	adds	r3, #6
    4eb4:	881b      	ldrh	r3, [r3, #0]
    4eb6:	b29b      	uxth	r3, r3
    4eb8:	22dc      	movs	r2, #220	; 0xdc
    4eba:	18ba      	adds	r2, r7, r2
    4ebc:	8812      	ldrh	r2, [r2, #0]
    4ebe:	429a      	cmp	r2, r3
    4ec0:	d13c      	bne.n	4f3c <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
    4ec2:	4b24      	ldr	r3, [pc, #144]	; (4f54 <m2m_ip_cb+0x548>)
    4ec4:	681b      	ldr	r3, [r3, #0]
    4ec6:	2b00      	cmp	r3, #0
    4ec8:	d038      	beq.n	4f3c <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    4eca:	4b22      	ldr	r3, [pc, #136]	; (4f54 <m2m_ip_cb+0x548>)
    4ecc:	681b      	ldr	r3, [r3, #0]
    4ece:	226e      	movs	r2, #110	; 0x6e
    4ed0:	18bc      	adds	r4, r7, r2
    4ed2:	22de      	movs	r2, #222	; 0xde
    4ed4:	18ba      	adds	r2, r7, r2
    4ed6:	7811      	ldrb	r1, [r2, #0]
    4ed8:	22db      	movs	r2, #219	; 0xdb
    4eda:	18ba      	adds	r2, r7, r2
    4edc:	2000      	movs	r0, #0
    4ede:	5610      	ldrsb	r0, [r2, r0]
    4ee0:	0022      	movs	r2, r4
    4ee2:	4798      	blx	r3
	{
    4ee4:	e02a      	b.n	4f3c <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
    4ee6:	1dfb      	adds	r3, r7, #7
    4ee8:	781b      	ldrb	r3, [r3, #0]
    4eea:	2b52      	cmp	r3, #82	; 0x52
    4eec:	d127      	bne.n	4f3e <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    4eee:	2350      	movs	r3, #80	; 0x50
    4ef0:	18f9      	adds	r1, r7, r3
    4ef2:	6838      	ldr	r0, [r7, #0]
    4ef4:	2301      	movs	r3, #1
    4ef6:	2214      	movs	r2, #20
    4ef8:	4c13      	ldr	r4, [pc, #76]	; (4f48 <m2m_ip_cb+0x53c>)
    4efa:	47a0      	blx	r4
    4efc:	1e03      	subs	r3, r0, #0
    4efe:	d11e      	bne.n	4f3e <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    4f00:	2350      	movs	r3, #80	; 0x50
    4f02:	18fb      	adds	r3, r7, r3
    4f04:	685b      	ldr	r3, [r3, #4]
    4f06:	001a      	movs	r2, r3
    4f08:	4b13      	ldr	r3, [pc, #76]	; (4f58 <m2m_ip_cb+0x54c>)
    4f0a:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    4f0c:	4b12      	ldr	r3, [pc, #72]	; (4f58 <m2m_ip_cb+0x54c>)
    4f0e:	681b      	ldr	r3, [r3, #0]
    4f10:	2b00      	cmp	r3, #0
    4f12:	d014      	beq.n	4f3e <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    4f14:	4b10      	ldr	r3, [pc, #64]	; (4f58 <m2m_ip_cb+0x54c>)
    4f16:	681c      	ldr	r4, [r3, #0]
    4f18:	2350      	movs	r3, #80	; 0x50
    4f1a:	18fb      	adds	r3, r7, r3
    4f1c:	6818      	ldr	r0, [r3, #0]
    4f1e:	2350      	movs	r3, #80	; 0x50
    4f20:	18fb      	adds	r3, r7, r3
    4f22:	6899      	ldr	r1, [r3, #8]
    4f24:	2350      	movs	r3, #80	; 0x50
    4f26:	18fb      	adds	r3, r7, r3
    4f28:	7c1b      	ldrb	r3, [r3, #16]
    4f2a:	001a      	movs	r2, r3
    4f2c:	47a0      	blx	r4
}
    4f2e:	e006      	b.n	4f3e <m2m_ip_cb+0x532>
	{
    4f30:	46c0      	nop			; (mov r8, r8)
    4f32:	e004      	b.n	4f3e <m2m_ip_cb+0x532>
	{
    4f34:	46c0      	nop			; (mov r8, r8)
    4f36:	e002      	b.n	4f3e <m2m_ip_cb+0x532>
	{
    4f38:	46c0      	nop			; (mov r8, r8)
    4f3a:	e000      	b.n	4f3e <m2m_ip_cb+0x532>
	{
    4f3c:	46c0      	nop			; (mov r8, r8)
}
    4f3e:	46c0      	nop			; (mov r8, r8)
    4f40:	46bd      	mov	sp, r7
    4f42:	b039      	add	sp, #228	; 0xe4
    4f44:	bd90      	pop	{r4, r7, pc}
    4f46:	46c0      	nop			; (mov r8, r8)
    4f48:	00001779 	.word	0x00001779
    4f4c:	20000318 	.word	0x20000318
    4f50:	00004811 	.word	0x00004811
    4f54:	200003c8 	.word	0x200003c8
    4f58:	200003cc 	.word	0x200003cc

00004f5c <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    4f5c:	b580      	push	{r7, lr}
    4f5e:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
    4f60:	4b0c      	ldr	r3, [pc, #48]	; (4f94 <socketInit+0x38>)
    4f62:	781b      	ldrb	r3, [r3, #0]
    4f64:	b2db      	uxtb	r3, r3
    4f66:	2b00      	cmp	r3, #0
    4f68:	d110      	bne.n	4f8c <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    4f6a:	4b0b      	ldr	r3, [pc, #44]	; (4f98 <socketInit+0x3c>)
    4f6c:	22b0      	movs	r2, #176	; 0xb0
    4f6e:	2100      	movs	r1, #0
    4f70:	0018      	movs	r0, r3
    4f72:	4b0a      	ldr	r3, [pc, #40]	; (4f9c <socketInit+0x40>)
    4f74:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    4f76:	4b0a      	ldr	r3, [pc, #40]	; (4fa0 <socketInit+0x44>)
    4f78:	0019      	movs	r1, r3
    4f7a:	2002      	movs	r0, #2
    4f7c:	4b09      	ldr	r3, [pc, #36]	; (4fa4 <socketInit+0x48>)
    4f7e:	4798      	blx	r3
		gbSocketInit	= 1;
    4f80:	4b04      	ldr	r3, [pc, #16]	; (4f94 <socketInit+0x38>)
    4f82:	2201      	movs	r2, #1
    4f84:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    4f86:	4b08      	ldr	r3, [pc, #32]	; (4fa8 <socketInit+0x4c>)
    4f88:	2200      	movs	r2, #0
    4f8a:	801a      	strh	r2, [r3, #0]
	}
}
    4f8c:	46c0      	nop			; (mov r8, r8)
    4f8e:	46bd      	mov	sp, r7
    4f90:	bd80      	pop	{r7, pc}
    4f92:	46c0      	nop			; (mov r8, r8)
    4f94:	20000218 	.word	0x20000218
    4f98:	20000318 	.word	0x20000318
    4f9c:	00000c25 	.word	0x00000c25
    4fa0:	00004a0d 	.word	0x00004a0d
    4fa4:	000018f9 	.word	0x000018f9
    4fa8:	20000216 	.word	0x20000216

00004fac <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    4fac:	b580      	push	{r7, lr}
    4fae:	b082      	sub	sp, #8
    4fb0:	af00      	add	r7, sp, #0
    4fb2:	6078      	str	r0, [r7, #4]
    4fb4:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
    4fb6:	4b05      	ldr	r3, [pc, #20]	; (4fcc <registerSocketCallback+0x20>)
    4fb8:	687a      	ldr	r2, [r7, #4]
    4fba:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    4fbc:	4b04      	ldr	r3, [pc, #16]	; (4fd0 <registerSocketCallback+0x24>)
    4fbe:	683a      	ldr	r2, [r7, #0]
    4fc0:	601a      	str	r2, [r3, #0]
}
    4fc2:	46c0      	nop			; (mov r8, r8)
    4fc4:	46bd      	mov	sp, r7
    4fc6:	b002      	add	sp, #8
    4fc8:	bd80      	pop	{r7, pc}
    4fca:	46c0      	nop			; (mov r8, r8)
    4fcc:	200003c8 	.word	0x200003c8
    4fd0:	200003d0 	.word	0x200003d0

00004fd4 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    4fd4:	b590      	push	{r4, r7, lr}
    4fd6:	b08d      	sub	sp, #52	; 0x34
    4fd8:	af04      	add	r7, sp, #16
    4fda:	0004      	movs	r4, r0
    4fdc:	0008      	movs	r0, r1
    4fde:	0011      	movs	r1, r2
    4fe0:	1dbb      	adds	r3, r7, #6
    4fe2:	1c22      	adds	r2, r4, #0
    4fe4:	801a      	strh	r2, [r3, #0]
    4fe6:	1d7b      	adds	r3, r7, #5
    4fe8:	1c02      	adds	r2, r0, #0
    4fea:	701a      	strb	r2, [r3, #0]
    4fec:	1d3b      	adds	r3, r7, #4
    4fee:	1c0a      	adds	r2, r1, #0
    4ff0:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
    4ff2:	231f      	movs	r3, #31
    4ff4:	18fb      	adds	r3, r7, r3
    4ff6:	22ff      	movs	r2, #255	; 0xff
    4ff8:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    4ffa:	1dbb      	adds	r3, r7, #6
    4ffc:	881b      	ldrh	r3, [r3, #0]
    4ffe:	2b02      	cmp	r3, #2
    5000:	d000      	beq.n	5004 <socket+0x30>
    5002:	e0cd      	b.n	51a0 <socket+0x1cc>
	{
		if(u8Type == SOCK_STREAM)
    5004:	1d7b      	adds	r3, r7, #5
    5006:	781b      	ldrb	r3, [r3, #0]
    5008:	2b01      	cmp	r3, #1
    500a:	d135      	bne.n	5078 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    500c:	231e      	movs	r3, #30
    500e:	18fb      	adds	r3, r7, r3
    5010:	2200      	movs	r2, #0
    5012:	701a      	strb	r2, [r3, #0]
    5014:	e02a      	b.n	506c <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
    5016:	2317      	movs	r3, #23
    5018:	18fb      	adds	r3, r7, r3
    501a:	4a65      	ldr	r2, [pc, #404]	; (51b0 <socket+0x1dc>)
    501c:	7812      	ldrb	r2, [r2, #0]
    501e:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
    5020:	4b63      	ldr	r3, [pc, #396]	; (51b0 <socket+0x1dc>)
    5022:	781b      	ldrb	r3, [r3, #0]
    5024:	b2db      	uxtb	r3, r3
    5026:	011a      	lsls	r2, r3, #4
    5028:	4b62      	ldr	r3, [pc, #392]	; (51b4 <socket+0x1e0>)
    502a:	18d3      	adds	r3, r2, r3
    502c:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    502e:	4b60      	ldr	r3, [pc, #384]	; (51b0 <socket+0x1dc>)
    5030:	781b      	ldrb	r3, [r3, #0]
    5032:	b2db      	uxtb	r3, r3
    5034:	1c5a      	adds	r2, r3, #1
    5036:	4b60      	ldr	r3, [pc, #384]	; (51b8 <socket+0x1e4>)
    5038:	2107      	movs	r1, #7
    503a:	0010      	movs	r0, r2
    503c:	4798      	blx	r3
    503e:	000b      	movs	r3, r1
    5040:	b2da      	uxtb	r2, r3
    5042:	4b5b      	ldr	r3, [pc, #364]	; (51b0 <socket+0x1dc>)
    5044:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    5046:	69bb      	ldr	r3, [r7, #24]
    5048:	7a9b      	ldrb	r3, [r3, #10]
    504a:	b2db      	uxtb	r3, r3
    504c:	2b00      	cmp	r3, #0
    504e:	d106      	bne.n	505e <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
    5050:	231f      	movs	r3, #31
    5052:	18fb      	adds	r3, r7, r3
    5054:	2217      	movs	r2, #23
    5056:	18ba      	adds	r2, r7, r2
    5058:	7812      	ldrb	r2, [r2, #0]
    505a:	701a      	strb	r2, [r3, #0]
					break;
    505c:	e04c      	b.n	50f8 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    505e:	231e      	movs	r3, #30
    5060:	18fb      	adds	r3, r7, r3
    5062:	781a      	ldrb	r2, [r3, #0]
    5064:	231e      	movs	r3, #30
    5066:	18fb      	adds	r3, r7, r3
    5068:	3201      	adds	r2, #1
    506a:	701a      	strb	r2, [r3, #0]
    506c:	231e      	movs	r3, #30
    506e:	18fb      	adds	r3, r7, r3
    5070:	781b      	ldrb	r3, [r3, #0]
    5072:	2b06      	cmp	r3, #6
    5074:	d9cf      	bls.n	5016 <socket+0x42>
    5076:	e03f      	b.n	50f8 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    5078:	1d7b      	adds	r3, r7, #5
    507a:	781b      	ldrb	r3, [r3, #0]
    507c:	2b02      	cmp	r3, #2
    507e:	d13b      	bne.n	50f8 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
    5080:	4b4e      	ldr	r3, [pc, #312]	; (51bc <socket+0x1e8>)
    5082:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    5084:	231e      	movs	r3, #30
    5086:	18fb      	adds	r3, r7, r3
    5088:	2200      	movs	r2, #0
    508a:	701a      	strb	r2, [r3, #0]
    508c:	e02f      	b.n	50ee <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
    508e:	2317      	movs	r3, #23
    5090:	18fb      	adds	r3, r7, r3
    5092:	4a4b      	ldr	r2, [pc, #300]	; (51c0 <socket+0x1ec>)
    5094:	7812      	ldrb	r2, [r2, #0]
    5096:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    5098:	4b49      	ldr	r3, [pc, #292]	; (51c0 <socket+0x1ec>)
    509a:	781b      	ldrb	r3, [r3, #0]
    509c:	b2db      	uxtb	r3, r3
    509e:	011b      	lsls	r3, r3, #4
    50a0:	693a      	ldr	r2, [r7, #16]
    50a2:	18d3      	adds	r3, r2, r3
    50a4:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    50a6:	4b46      	ldr	r3, [pc, #280]	; (51c0 <socket+0x1ec>)
    50a8:	781b      	ldrb	r3, [r3, #0]
    50aa:	b2db      	uxtb	r3, r3
    50ac:	3301      	adds	r3, #1
    50ae:	4a45      	ldr	r2, [pc, #276]	; (51c4 <socket+0x1f0>)
    50b0:	4013      	ands	r3, r2
    50b2:	d504      	bpl.n	50be <socket+0xea>
    50b4:	3b01      	subs	r3, #1
    50b6:	2204      	movs	r2, #4
    50b8:	4252      	negs	r2, r2
    50ba:	4313      	orrs	r3, r2
    50bc:	3301      	adds	r3, #1
    50be:	b2da      	uxtb	r2, r3
    50c0:	4b3f      	ldr	r3, [pc, #252]	; (51c0 <socket+0x1ec>)
    50c2:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    50c4:	69bb      	ldr	r3, [r7, #24]
    50c6:	7a9b      	ldrb	r3, [r3, #10]
    50c8:	b2db      	uxtb	r3, r3
    50ca:	2b00      	cmp	r3, #0
    50cc:	d108      	bne.n	50e0 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    50ce:	2317      	movs	r3, #23
    50d0:	18fb      	adds	r3, r7, r3
    50d2:	781b      	ldrb	r3, [r3, #0]
    50d4:	3307      	adds	r3, #7
    50d6:	b2da      	uxtb	r2, r3
    50d8:	231f      	movs	r3, #31
    50da:	18fb      	adds	r3, r7, r3
    50dc:	701a      	strb	r2, [r3, #0]
					break;
    50de:	e00b      	b.n	50f8 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    50e0:	231e      	movs	r3, #30
    50e2:	18fb      	adds	r3, r7, r3
    50e4:	781a      	ldrb	r2, [r3, #0]
    50e6:	231e      	movs	r3, #30
    50e8:	18fb      	adds	r3, r7, r3
    50ea:	3201      	adds	r2, #1
    50ec:	701a      	strb	r2, [r3, #0]
    50ee:	231e      	movs	r3, #30
    50f0:	18fb      	adds	r3, r7, r3
    50f2:	781b      	ldrb	r3, [r3, #0]
    50f4:	2b03      	cmp	r3, #3
    50f6:	d9ca      	bls.n	508e <socket+0xba>
				}
			}
		}

		if(sock >= 0)
    50f8:	231f      	movs	r3, #31
    50fa:	18fb      	adds	r3, r7, r3
    50fc:	781b      	ldrb	r3, [r3, #0]
    50fe:	2b7f      	cmp	r3, #127	; 0x7f
    5100:	d84e      	bhi.n	51a0 <socket+0x1cc>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    5102:	69bb      	ldr	r3, [r7, #24]
    5104:	2210      	movs	r2, #16
    5106:	2100      	movs	r1, #0
    5108:	0018      	movs	r0, r3
    510a:	4b2f      	ldr	r3, [pc, #188]	; (51c8 <socket+0x1f4>)
    510c:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    510e:	69bb      	ldr	r3, [r7, #24]
    5110:	2201      	movs	r2, #1
    5112:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
    5114:	4b2d      	ldr	r3, [pc, #180]	; (51cc <socket+0x1f8>)
    5116:	881b      	ldrh	r3, [r3, #0]
    5118:	b29b      	uxth	r3, r3
    511a:	3301      	adds	r3, #1
    511c:	b29a      	uxth	r2, r3
    511e:	4b2b      	ldr	r3, [pc, #172]	; (51cc <socket+0x1f8>)
    5120:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
    5122:	4b2a      	ldr	r3, [pc, #168]	; (51cc <socket+0x1f8>)
    5124:	881b      	ldrh	r3, [r3, #0]
    5126:	b29b      	uxth	r3, r3
    5128:	2b00      	cmp	r3, #0
    512a:	d106      	bne.n	513a <socket+0x166>
				++gu16SessionID;
    512c:	4b27      	ldr	r3, [pc, #156]	; (51cc <socket+0x1f8>)
    512e:	881b      	ldrh	r3, [r3, #0]
    5130:	b29b      	uxth	r3, r3
    5132:	3301      	adds	r3, #1
    5134:	b29a      	uxth	r2, r3
    5136:	4b25      	ldr	r3, [pc, #148]	; (51cc <socket+0x1f8>)
    5138:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
    513a:	4b24      	ldr	r3, [pc, #144]	; (51cc <socket+0x1f8>)
    513c:	881b      	ldrh	r3, [r3, #0]
    513e:	b29a      	uxth	r2, r3
    5140:	69bb      	ldr	r3, [r7, #24]
    5142:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    5144:	4b22      	ldr	r3, [pc, #136]	; (51d0 <socket+0x1fc>)
    5146:	0018      	movs	r0, r3
    5148:	4b22      	ldr	r3, [pc, #136]	; (51d4 <socket+0x200>)
    514a:	4798      	blx	r3
    514c:	231f      	movs	r3, #31
    514e:	18fb      	adds	r3, r7, r3
    5150:	2100      	movs	r1, #0
    5152:	5659      	ldrsb	r1, [r3, r1]
    5154:	4b1d      	ldr	r3, [pc, #116]	; (51cc <socket+0x1f8>)
    5156:	881b      	ldrh	r3, [r3, #0]
    5158:	b29b      	uxth	r3, r3
    515a:	001a      	movs	r2, r3
    515c:	4b1e      	ldr	r3, [pc, #120]	; (51d8 <socket+0x204>)
    515e:	0018      	movs	r0, r3
    5160:	4b1c      	ldr	r3, [pc, #112]	; (51d4 <socket+0x200>)
    5162:	4798      	blx	r3
    5164:	200d      	movs	r0, #13
    5166:	4b1d      	ldr	r3, [pc, #116]	; (51dc <socket+0x208>)
    5168:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
    516a:	1d3b      	adds	r3, r7, #4
    516c:	781b      	ldrb	r3, [r3, #0]
    516e:	2201      	movs	r2, #1
    5170:	4013      	ands	r3, r2
    5172:	d015      	beq.n	51a0 <socket+0x1cc>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
    5174:	230c      	movs	r3, #12
    5176:	18fb      	adds	r3, r7, r3
    5178:	221f      	movs	r2, #31
    517a:	18ba      	adds	r2, r7, r2
    517c:	7812      	ldrb	r2, [r2, #0]
    517e:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    5180:	69bb      	ldr	r3, [r7, #24]
    5182:	2221      	movs	r2, #33	; 0x21
    5184:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    5186:	230c      	movs	r3, #12
    5188:	18fa      	adds	r2, r7, r3
    518a:	2300      	movs	r3, #0
    518c:	9302      	str	r3, [sp, #8]
    518e:	2300      	movs	r3, #0
    5190:	9301      	str	r3, [sp, #4]
    5192:	2300      	movs	r3, #0
    5194:	9300      	str	r3, [sp, #0]
    5196:	2304      	movs	r3, #4
    5198:	2150      	movs	r1, #80	; 0x50
    519a:	2002      	movs	r0, #2
    519c:	4c10      	ldr	r4, [pc, #64]	; (51e0 <socket+0x20c>)
    519e:	47a0      	blx	r4
			}
		}
	}
	return sock;
    51a0:	231f      	movs	r3, #31
    51a2:	18fb      	adds	r3, r7, r3
    51a4:	781b      	ldrb	r3, [r3, #0]
    51a6:	b25b      	sxtb	r3, r3
}
    51a8:	0018      	movs	r0, r3
    51aa:	46bd      	mov	sp, r7
    51ac:	b009      	add	sp, #36	; 0x24
    51ae:	bd90      	pop	{r4, r7, pc}
    51b0:	20000219 	.word	0x20000219
    51b4:	20000318 	.word	0x20000318
    51b8:	0000dd39 	.word	0x0000dd39
    51bc:	20000388 	.word	0x20000388
    51c0:	2000021a 	.word	0x2000021a
    51c4:	80000003 	.word	0x80000003
    51c8:	00000c25 	.word	0x00000c25
    51cc:	20000216 	.word	0x20000216
    51d0:	0001053c 	.word	0x0001053c
    51d4:	0000dfad 	.word	0x0000dfad
    51d8:	0001055c 	.word	0x0001055c
    51dc:	0000dfe1 	.word	0x0000dfe1
    51e0:	00000e85 	.word	0x00000e85

000051e4 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    51e4:	b5b0      	push	{r4, r5, r7, lr}
    51e6:	b08a      	sub	sp, #40	; 0x28
    51e8:	af04      	add	r7, sp, #16
    51ea:	6039      	str	r1, [r7, #0]
    51ec:	0011      	movs	r1, r2
    51ee:	1dfb      	adds	r3, r7, #7
    51f0:	1c02      	adds	r2, r0, #0
    51f2:	701a      	strb	r2, [r3, #0]
    51f4:	1dbb      	adds	r3, r7, #6
    51f6:	1c0a      	adds	r2, r1, #0
    51f8:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    51fa:	2317      	movs	r3, #23
    51fc:	18fb      	adds	r3, r7, r3
    51fe:	22fa      	movs	r2, #250	; 0xfa
    5200:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    5202:	1dfb      	adds	r3, r7, #7
    5204:	781b      	ldrb	r3, [r3, #0]
    5206:	2b7f      	cmp	r3, #127	; 0x7f
    5208:	d867      	bhi.n	52da <connect+0xf6>
    520a:	683b      	ldr	r3, [r7, #0]
    520c:	2b00      	cmp	r3, #0
    520e:	d064      	beq.n	52da <connect+0xf6>
    5210:	1dfb      	adds	r3, r7, #7
    5212:	781b      	ldrb	r3, [r3, #0]
    5214:	b25b      	sxtb	r3, r3
    5216:	4a35      	ldr	r2, [pc, #212]	; (52ec <connect+0x108>)
    5218:	011b      	lsls	r3, r3, #4
    521a:	18d3      	adds	r3, r2, r3
    521c:	330a      	adds	r3, #10
    521e:	781b      	ldrb	r3, [r3, #0]
    5220:	b2db      	uxtb	r3, r3
    5222:	2b01      	cmp	r3, #1
    5224:	d159      	bne.n	52da <connect+0xf6>
    5226:	1dbb      	adds	r3, r7, #6
    5228:	781b      	ldrb	r3, [r3, #0]
    522a:	2b00      	cmp	r3, #0
    522c:	d055      	beq.n	52da <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    522e:	2316      	movs	r3, #22
    5230:	18fb      	adds	r3, r7, r3
    5232:	2244      	movs	r2, #68	; 0x44
    5234:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    5236:	1dfb      	adds	r3, r7, #7
    5238:	781b      	ldrb	r3, [r3, #0]
    523a:	b25b      	sxtb	r3, r3
    523c:	4a2b      	ldr	r2, [pc, #172]	; (52ec <connect+0x108>)
    523e:	011b      	lsls	r3, r3, #4
    5240:	18d3      	adds	r3, r2, r3
    5242:	330b      	adds	r3, #11
    5244:	781b      	ldrb	r3, [r3, #0]
    5246:	b2db      	uxtb	r3, r3
    5248:	001a      	movs	r2, r3
    524a:	2301      	movs	r3, #1
    524c:	4013      	ands	r3, r2
    524e:	d00f      	beq.n	5270 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    5250:	2316      	movs	r3, #22
    5252:	18fb      	adds	r3, r7, r3
    5254:	224b      	movs	r2, #75	; 0x4b
    5256:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    5258:	1dfb      	adds	r3, r7, #7
    525a:	781b      	ldrb	r3, [r3, #0]
    525c:	b25b      	sxtb	r3, r3
    525e:	4a23      	ldr	r2, [pc, #140]	; (52ec <connect+0x108>)
    5260:	011b      	lsls	r3, r3, #4
    5262:	18d3      	adds	r3, r2, r3
    5264:	330b      	adds	r3, #11
    5266:	781b      	ldrb	r3, [r3, #0]
    5268:	b2da      	uxtb	r2, r3
    526a:	2308      	movs	r3, #8
    526c:	18fb      	adds	r3, r7, r3
    526e:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    5270:	2308      	movs	r3, #8
    5272:	18fb      	adds	r3, r7, r3
    5274:	1dfa      	adds	r2, r7, #7
    5276:	7812      	ldrb	r2, [r2, #0]
    5278:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    527a:	6839      	ldr	r1, [r7, #0]
    527c:	2308      	movs	r3, #8
    527e:	18fb      	adds	r3, r7, r3
    5280:	2208      	movs	r2, #8
    5282:	0018      	movs	r0, r3
    5284:	4b1a      	ldr	r3, [pc, #104]	; (52f0 <connect+0x10c>)
    5286:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    5288:	1dfb      	adds	r3, r7, #7
    528a:	781b      	ldrb	r3, [r3, #0]
    528c:	b25b      	sxtb	r3, r3
    528e:	4a17      	ldr	r2, [pc, #92]	; (52ec <connect+0x108>)
    5290:	011b      	lsls	r3, r3, #4
    5292:	18d3      	adds	r3, r2, r3
    5294:	3306      	adds	r3, #6
    5296:	881b      	ldrh	r3, [r3, #0]
    5298:	b29a      	uxth	r2, r3
    529a:	2308      	movs	r3, #8
    529c:	18fb      	adds	r3, r7, r3
    529e:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    52a0:	2317      	movs	r3, #23
    52a2:	18fc      	adds	r4, r7, r3
    52a4:	2308      	movs	r3, #8
    52a6:	18fa      	adds	r2, r7, r3
    52a8:	2316      	movs	r3, #22
    52aa:	18fb      	adds	r3, r7, r3
    52ac:	7819      	ldrb	r1, [r3, #0]
    52ae:	2300      	movs	r3, #0
    52b0:	9302      	str	r3, [sp, #8]
    52b2:	2300      	movs	r3, #0
    52b4:	9301      	str	r3, [sp, #4]
    52b6:	2300      	movs	r3, #0
    52b8:	9300      	str	r3, [sp, #0]
    52ba:	230c      	movs	r3, #12
    52bc:	2002      	movs	r0, #2
    52be:	4d0d      	ldr	r5, [pc, #52]	; (52f4 <connect+0x110>)
    52c0:	47a8      	blx	r5
    52c2:	0003      	movs	r3, r0
    52c4:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    52c6:	2317      	movs	r3, #23
    52c8:	18fb      	adds	r3, r7, r3
    52ca:	781b      	ldrb	r3, [r3, #0]
    52cc:	b25b      	sxtb	r3, r3
    52ce:	2b00      	cmp	r3, #0
    52d0:	d003      	beq.n	52da <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    52d2:	2317      	movs	r3, #23
    52d4:	18fb      	adds	r3, r7, r3
    52d6:	22f7      	movs	r2, #247	; 0xf7
    52d8:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    52da:	2317      	movs	r3, #23
    52dc:	18fb      	adds	r3, r7, r3
    52de:	781b      	ldrb	r3, [r3, #0]
    52e0:	b25b      	sxtb	r3, r3
}
    52e2:	0018      	movs	r0, r3
    52e4:	46bd      	mov	sp, r7
    52e6:	b006      	add	sp, #24
    52e8:	bdb0      	pop	{r4, r5, r7, pc}
    52ea:	46c0      	nop			; (mov r8, r8)
    52ec:	20000318 	.word	0x20000318
    52f0:	00000be9 	.word	0x00000be9
    52f4:	00000e85 	.word	0x00000e85

000052f8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    52f8:	b590      	push	{r4, r7, lr}
    52fa:	b08f      	sub	sp, #60	; 0x3c
    52fc:	af04      	add	r7, sp, #16
    52fe:	0004      	movs	r4, r0
    5300:	60b9      	str	r1, [r7, #8]
    5302:	0010      	movs	r0, r2
    5304:	0019      	movs	r1, r3
    5306:	230f      	movs	r3, #15
    5308:	18fb      	adds	r3, r7, r3
    530a:	1c22      	adds	r2, r4, #0
    530c:	701a      	strb	r2, [r3, #0]
    530e:	230c      	movs	r3, #12
    5310:	18fb      	adds	r3, r7, r3
    5312:	1c02      	adds	r2, r0, #0
    5314:	801a      	strh	r2, [r3, #0]
    5316:	1dbb      	adds	r3, r7, #6
    5318:	1c0a      	adds	r2, r1, #0
    531a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    531c:	2326      	movs	r3, #38	; 0x26
    531e:	18fb      	adds	r3, r7, r3
    5320:	2206      	movs	r2, #6
    5322:	4252      	negs	r2, r2
    5324:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    5326:	230f      	movs	r3, #15
    5328:	18fb      	adds	r3, r7, r3
    532a:	781b      	ldrb	r3, [r3, #0]
    532c:	2b7f      	cmp	r3, #127	; 0x7f
    532e:	d900      	bls.n	5332 <send+0x3a>
    5330:	e087      	b.n	5442 <send+0x14a>
    5332:	68bb      	ldr	r3, [r7, #8]
    5334:	2b00      	cmp	r3, #0
    5336:	d100      	bne.n	533a <send+0x42>
    5338:	e083      	b.n	5442 <send+0x14a>
    533a:	230c      	movs	r3, #12
    533c:	18fb      	adds	r3, r7, r3
    533e:	881a      	ldrh	r2, [r3, #0]
    5340:	23af      	movs	r3, #175	; 0xaf
    5342:	00db      	lsls	r3, r3, #3
    5344:	429a      	cmp	r2, r3
    5346:	d900      	bls.n	534a <send+0x52>
    5348:	e07b      	b.n	5442 <send+0x14a>
    534a:	230f      	movs	r3, #15
    534c:	18fb      	adds	r3, r7, r3
    534e:	781b      	ldrb	r3, [r3, #0]
    5350:	b25b      	sxtb	r3, r3
    5352:	4a40      	ldr	r2, [pc, #256]	; (5454 <send+0x15c>)
    5354:	011b      	lsls	r3, r3, #4
    5356:	18d3      	adds	r3, r2, r3
    5358:	330a      	adds	r3, #10
    535a:	781b      	ldrb	r3, [r3, #0]
    535c:	b2db      	uxtb	r3, r3
    535e:	2b01      	cmp	r3, #1
    5360:	d16f      	bne.n	5442 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    5362:	2323      	movs	r3, #35	; 0x23
    5364:	18fb      	adds	r3, r7, r3
    5366:	2245      	movs	r2, #69	; 0x45
    5368:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    536a:	2324      	movs	r3, #36	; 0x24
    536c:	18fb      	adds	r3, r7, r3
    536e:	2250      	movs	r2, #80	; 0x50
    5370:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    5372:	2310      	movs	r3, #16
    5374:	18fb      	adds	r3, r7, r3
    5376:	220f      	movs	r2, #15
    5378:	18ba      	adds	r2, r7, r2
    537a:	7812      	ldrb	r2, [r2, #0]
    537c:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    537e:	2310      	movs	r3, #16
    5380:	18fb      	adds	r3, r7, r3
    5382:	220c      	movs	r2, #12
    5384:	18ba      	adds	r2, r7, r2
    5386:	8812      	ldrh	r2, [r2, #0]
    5388:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    538a:	230f      	movs	r3, #15
    538c:	18fb      	adds	r3, r7, r3
    538e:	781b      	ldrb	r3, [r3, #0]
    5390:	b25b      	sxtb	r3, r3
    5392:	4a30      	ldr	r2, [pc, #192]	; (5454 <send+0x15c>)
    5394:	011b      	lsls	r3, r3, #4
    5396:	18d3      	adds	r3, r2, r3
    5398:	3306      	adds	r3, #6
    539a:	881b      	ldrh	r3, [r3, #0]
    539c:	b29a      	uxth	r2, r3
    539e:	2310      	movs	r3, #16
    53a0:	18fb      	adds	r3, r7, r3
    53a2:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    53a4:	230f      	movs	r3, #15
    53a6:	18fb      	adds	r3, r7, r3
    53a8:	781b      	ldrb	r3, [r3, #0]
    53aa:	b25b      	sxtb	r3, r3
    53ac:	2b06      	cmp	r3, #6
    53ae:	dd03      	ble.n	53b8 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    53b0:	2324      	movs	r3, #36	; 0x24
    53b2:	18fb      	adds	r3, r7, r3
    53b4:	2244      	movs	r2, #68	; 0x44
    53b6:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    53b8:	230f      	movs	r3, #15
    53ba:	18fb      	adds	r3, r7, r3
    53bc:	781b      	ldrb	r3, [r3, #0]
    53be:	b25b      	sxtb	r3, r3
    53c0:	4a24      	ldr	r2, [pc, #144]	; (5454 <send+0x15c>)
    53c2:	011b      	lsls	r3, r3, #4
    53c4:	18d3      	adds	r3, r2, r3
    53c6:	330b      	adds	r3, #11
    53c8:	781b      	ldrb	r3, [r3, #0]
    53ca:	b2db      	uxtb	r3, r3
    53cc:	001a      	movs	r2, r3
    53ce:	2301      	movs	r3, #1
    53d0:	4013      	ands	r3, r2
    53d2:	d00f      	beq.n	53f4 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    53d4:	2323      	movs	r3, #35	; 0x23
    53d6:	18fb      	adds	r3, r7, r3
    53d8:	224c      	movs	r2, #76	; 0x4c
    53da:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    53dc:	230f      	movs	r3, #15
    53de:	18fb      	adds	r3, r7, r3
    53e0:	2200      	movs	r2, #0
    53e2:	569a      	ldrsb	r2, [r3, r2]
    53e4:	2324      	movs	r3, #36	; 0x24
    53e6:	18fb      	adds	r3, r7, r3
    53e8:	491a      	ldr	r1, [pc, #104]	; (5454 <send+0x15c>)
    53ea:	0112      	lsls	r2, r2, #4
    53ec:	188a      	adds	r2, r1, r2
    53ee:	3208      	adds	r2, #8
    53f0:	8812      	ldrh	r2, [r2, #0]
    53f2:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    53f4:	2323      	movs	r3, #35	; 0x23
    53f6:	18fb      	adds	r3, r7, r3
    53f8:	781b      	ldrb	r3, [r3, #0]
    53fa:	2280      	movs	r2, #128	; 0x80
    53fc:	4252      	negs	r2, r2
    53fe:	4313      	orrs	r3, r2
    5400:	b2d9      	uxtb	r1, r3
    5402:	2310      	movs	r3, #16
    5404:	18fa      	adds	r2, r7, r3
    5406:	2324      	movs	r3, #36	; 0x24
    5408:	18fb      	adds	r3, r7, r3
    540a:	881b      	ldrh	r3, [r3, #0]
    540c:	9302      	str	r3, [sp, #8]
    540e:	230c      	movs	r3, #12
    5410:	18fb      	adds	r3, r7, r3
    5412:	881b      	ldrh	r3, [r3, #0]
    5414:	9301      	str	r3, [sp, #4]
    5416:	68bb      	ldr	r3, [r7, #8]
    5418:	9300      	str	r3, [sp, #0]
    541a:	2310      	movs	r3, #16
    541c:	2002      	movs	r0, #2
    541e:	4c0e      	ldr	r4, [pc, #56]	; (5458 <send+0x160>)
    5420:	47a0      	blx	r4
    5422:	0003      	movs	r3, r0
    5424:	001a      	movs	r2, r3
    5426:	2326      	movs	r3, #38	; 0x26
    5428:	18fb      	adds	r3, r7, r3
    542a:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    542c:	2326      	movs	r3, #38	; 0x26
    542e:	18fb      	adds	r3, r7, r3
    5430:	2200      	movs	r2, #0
    5432:	5e9b      	ldrsh	r3, [r3, r2]
    5434:	2b00      	cmp	r3, #0
    5436:	d004      	beq.n	5442 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    5438:	2326      	movs	r3, #38	; 0x26
    543a:	18fb      	adds	r3, r7, r3
    543c:	220e      	movs	r2, #14
    543e:	4252      	negs	r2, r2
    5440:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    5442:	2326      	movs	r3, #38	; 0x26
    5444:	18fb      	adds	r3, r7, r3
    5446:	2200      	movs	r2, #0
    5448:	5e9b      	ldrsh	r3, [r3, r2]
}
    544a:	0018      	movs	r0, r3
    544c:	46bd      	mov	sp, r7
    544e:	b00b      	add	sp, #44	; 0x2c
    5450:	bd90      	pop	{r4, r7, pc}
    5452:	46c0      	nop			; (mov r8, r8)
    5454:	20000318 	.word	0x20000318
    5458:	00000e85 	.word	0x00000e85

0000545c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    545c:	b590      	push	{r4, r7, lr}
    545e:	b08d      	sub	sp, #52	; 0x34
    5460:	af04      	add	r7, sp, #16
    5462:	60b9      	str	r1, [r7, #8]
    5464:	0011      	movs	r1, r2
    5466:	607b      	str	r3, [r7, #4]
    5468:	230f      	movs	r3, #15
    546a:	18fb      	adds	r3, r7, r3
    546c:	1c02      	adds	r2, r0, #0
    546e:	701a      	strb	r2, [r3, #0]
    5470:	230c      	movs	r3, #12
    5472:	18fb      	adds	r3, r7, r3
    5474:	1c0a      	adds	r2, r1, #0
    5476:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    5478:	231e      	movs	r3, #30
    547a:	18fb      	adds	r3, r7, r3
    547c:	2206      	movs	r2, #6
    547e:	4252      	negs	r2, r2
    5480:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    5482:	230f      	movs	r3, #15
    5484:	18fb      	adds	r3, r7, r3
    5486:	781b      	ldrb	r3, [r3, #0]
    5488:	2b7f      	cmp	r3, #127	; 0x7f
    548a:	d900      	bls.n	548e <recv+0x32>
    548c:	e099      	b.n	55c2 <recv+0x166>
    548e:	68bb      	ldr	r3, [r7, #8]
    5490:	2b00      	cmp	r3, #0
    5492:	d100      	bne.n	5496 <recv+0x3a>
    5494:	e095      	b.n	55c2 <recv+0x166>
    5496:	230c      	movs	r3, #12
    5498:	18fb      	adds	r3, r7, r3
    549a:	881b      	ldrh	r3, [r3, #0]
    549c:	2b00      	cmp	r3, #0
    549e:	d100      	bne.n	54a2 <recv+0x46>
    54a0:	e08f      	b.n	55c2 <recv+0x166>
    54a2:	230f      	movs	r3, #15
    54a4:	18fb      	adds	r3, r7, r3
    54a6:	781b      	ldrb	r3, [r3, #0]
    54a8:	b25b      	sxtb	r3, r3
    54aa:	4a4a      	ldr	r2, [pc, #296]	; (55d4 <recv+0x178>)
    54ac:	011b      	lsls	r3, r3, #4
    54ae:	18d3      	adds	r3, r2, r3
    54b0:	330a      	adds	r3, #10
    54b2:	781b      	ldrb	r3, [r3, #0]
    54b4:	b2db      	uxtb	r3, r3
    54b6:	2b01      	cmp	r3, #1
    54b8:	d000      	beq.n	54bc <recv+0x60>
    54ba:	e082      	b.n	55c2 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    54bc:	231e      	movs	r3, #30
    54be:	18fb      	adds	r3, r7, r3
    54c0:	2200      	movs	r2, #0
    54c2:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    54c4:	230f      	movs	r3, #15
    54c6:	18fb      	adds	r3, r7, r3
    54c8:	2200      	movs	r2, #0
    54ca:	569a      	ldrsb	r2, [r3, r2]
    54cc:	4b41      	ldr	r3, [pc, #260]	; (55d4 <recv+0x178>)
    54ce:	0112      	lsls	r2, r2, #4
    54d0:	68b9      	ldr	r1, [r7, #8]
    54d2:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    54d4:	230f      	movs	r3, #15
    54d6:	18fb      	adds	r3, r7, r3
    54d8:	781b      	ldrb	r3, [r3, #0]
    54da:	b25b      	sxtb	r3, r3
    54dc:	4a3d      	ldr	r2, [pc, #244]	; (55d4 <recv+0x178>)
    54de:	011b      	lsls	r3, r3, #4
    54e0:	18d3      	adds	r3, r2, r3
    54e2:	3304      	adds	r3, #4
    54e4:	220c      	movs	r2, #12
    54e6:	18ba      	adds	r2, r7, r2
    54e8:	8812      	ldrh	r2, [r2, #0]
    54ea:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    54ec:	230f      	movs	r3, #15
    54ee:	18fb      	adds	r3, r7, r3
    54f0:	781b      	ldrb	r3, [r3, #0]
    54f2:	b25b      	sxtb	r3, r3
    54f4:	4a37      	ldr	r2, [pc, #220]	; (55d4 <recv+0x178>)
    54f6:	011b      	lsls	r3, r3, #4
    54f8:	18d3      	adds	r3, r2, r3
    54fa:	330c      	adds	r3, #12
    54fc:	781b      	ldrb	r3, [r3, #0]
    54fe:	b2db      	uxtb	r3, r3
    5500:	2b00      	cmp	r3, #0
    5502:	d15e      	bne.n	55c2 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    5504:	231d      	movs	r3, #29
    5506:	18fb      	adds	r3, r7, r3
    5508:	2246      	movs	r2, #70	; 0x46
    550a:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    550c:	230f      	movs	r3, #15
    550e:	18fb      	adds	r3, r7, r3
    5510:	781b      	ldrb	r3, [r3, #0]
    5512:	b25b      	sxtb	r3, r3
    5514:	4a2f      	ldr	r2, [pc, #188]	; (55d4 <recv+0x178>)
    5516:	011b      	lsls	r3, r3, #4
    5518:	18d3      	adds	r3, r2, r3
    551a:	330c      	adds	r3, #12
    551c:	2201      	movs	r2, #1
    551e:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    5520:	230f      	movs	r3, #15
    5522:	18fb      	adds	r3, r7, r3
    5524:	781b      	ldrb	r3, [r3, #0]
    5526:	b25b      	sxtb	r3, r3
    5528:	4a2a      	ldr	r2, [pc, #168]	; (55d4 <recv+0x178>)
    552a:	011b      	lsls	r3, r3, #4
    552c:	18d3      	adds	r3, r2, r3
    552e:	330b      	adds	r3, #11
    5530:	781b      	ldrb	r3, [r3, #0]
    5532:	b2db      	uxtb	r3, r3
    5534:	001a      	movs	r2, r3
    5536:	2301      	movs	r3, #1
    5538:	4013      	ands	r3, r2
    553a:	d003      	beq.n	5544 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    553c:	231d      	movs	r3, #29
    553e:	18fb      	adds	r3, r7, r3
    5540:	224d      	movs	r2, #77	; 0x4d
    5542:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    5544:	687b      	ldr	r3, [r7, #4]
    5546:	2b00      	cmp	r3, #0
    5548:	d105      	bne.n	5556 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    554a:	2314      	movs	r3, #20
    554c:	18fb      	adds	r3, r7, r3
    554e:	2201      	movs	r2, #1
    5550:	4252      	negs	r2, r2
    5552:	601a      	str	r2, [r3, #0]
    5554:	e003      	b.n	555e <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    5556:	2314      	movs	r3, #20
    5558:	18fb      	adds	r3, r7, r3
    555a:	687a      	ldr	r2, [r7, #4]
    555c:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    555e:	2314      	movs	r3, #20
    5560:	18fb      	adds	r3, r7, r3
    5562:	220f      	movs	r2, #15
    5564:	18ba      	adds	r2, r7, r2
    5566:	7812      	ldrb	r2, [r2, #0]
    5568:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    556a:	230f      	movs	r3, #15
    556c:	18fb      	adds	r3, r7, r3
    556e:	781b      	ldrb	r3, [r3, #0]
    5570:	b25b      	sxtb	r3, r3
    5572:	4a18      	ldr	r2, [pc, #96]	; (55d4 <recv+0x178>)
    5574:	011b      	lsls	r3, r3, #4
    5576:	18d3      	adds	r3, r2, r3
    5578:	3306      	adds	r3, #6
    557a:	881b      	ldrh	r3, [r3, #0]
    557c:	b29a      	uxth	r2, r3
    557e:	2314      	movs	r3, #20
    5580:	18fb      	adds	r3, r7, r3
    5582:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    5584:	2314      	movs	r3, #20
    5586:	18fa      	adds	r2, r7, r3
    5588:	231d      	movs	r3, #29
    558a:	18fb      	adds	r3, r7, r3
    558c:	7819      	ldrb	r1, [r3, #0]
    558e:	2300      	movs	r3, #0
    5590:	9302      	str	r3, [sp, #8]
    5592:	2300      	movs	r3, #0
    5594:	9301      	str	r3, [sp, #4]
    5596:	2300      	movs	r3, #0
    5598:	9300      	str	r3, [sp, #0]
    559a:	2308      	movs	r3, #8
    559c:	2002      	movs	r0, #2
    559e:	4c0e      	ldr	r4, [pc, #56]	; (55d8 <recv+0x17c>)
    55a0:	47a0      	blx	r4
    55a2:	0003      	movs	r3, r0
    55a4:	001a      	movs	r2, r3
    55a6:	231e      	movs	r3, #30
    55a8:	18fb      	adds	r3, r7, r3
    55aa:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    55ac:	231e      	movs	r3, #30
    55ae:	18fb      	adds	r3, r7, r3
    55b0:	2200      	movs	r2, #0
    55b2:	5e9b      	ldrsh	r3, [r3, r2]
    55b4:	2b00      	cmp	r3, #0
    55b6:	d004      	beq.n	55c2 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    55b8:	231e      	movs	r3, #30
    55ba:	18fb      	adds	r3, r7, r3
    55bc:	220e      	movs	r2, #14
    55be:	4252      	negs	r2, r2
    55c0:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    55c2:	231e      	movs	r3, #30
    55c4:	18fb      	adds	r3, r7, r3
    55c6:	2200      	movs	r2, #0
    55c8:	5e9b      	ldrsh	r3, [r3, r2]
}
    55ca:	0018      	movs	r0, r3
    55cc:	46bd      	mov	sp, r7
    55ce:	b009      	add	sp, #36	; 0x24
    55d0:	bd90      	pop	{r4, r7, pc}
    55d2:	46c0      	nop			; (mov r8, r8)
    55d4:	20000318 	.word	0x20000318
    55d8:	00000e85 	.word	0x00000e85

000055dc <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    55dc:	b5b0      	push	{r4, r5, r7, lr}
    55de:	b088      	sub	sp, #32
    55e0:	af04      	add	r7, sp, #16
    55e2:	0002      	movs	r2, r0
    55e4:	1dfb      	adds	r3, r7, #7
    55e6:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    55e8:	230f      	movs	r3, #15
    55ea:	18fb      	adds	r3, r7, r3
    55ec:	22fa      	movs	r2, #250	; 0xfa
    55ee:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
    55f0:	4b42      	ldr	r3, [pc, #264]	; (56fc <close+0x120>)
    55f2:	0018      	movs	r0, r3
    55f4:	4b42      	ldr	r3, [pc, #264]	; (5700 <close+0x124>)
    55f6:	4798      	blx	r3
    55f8:	1dfb      	adds	r3, r7, #7
    55fa:	2200      	movs	r2, #0
    55fc:	569a      	ldrsb	r2, [r3, r2]
    55fe:	4b41      	ldr	r3, [pc, #260]	; (5704 <close+0x128>)
    5600:	0011      	movs	r1, r2
    5602:	0018      	movs	r0, r3
    5604:	4b3e      	ldr	r3, [pc, #248]	; (5700 <close+0x124>)
    5606:	4798      	blx	r3
    5608:	200d      	movs	r0, #13
    560a:	4b3f      	ldr	r3, [pc, #252]	; (5708 <close+0x12c>)
    560c:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    560e:	1dfb      	adds	r3, r7, #7
    5610:	781b      	ldrb	r3, [r3, #0]
    5612:	2b7f      	cmp	r3, #127	; 0x7f
    5614:	d86a      	bhi.n	56ec <close+0x110>
    5616:	1dfb      	adds	r3, r7, #7
    5618:	781b      	ldrb	r3, [r3, #0]
    561a:	b25b      	sxtb	r3, r3
    561c:	4a3b      	ldr	r2, [pc, #236]	; (570c <close+0x130>)
    561e:	011b      	lsls	r3, r3, #4
    5620:	18d3      	adds	r3, r2, r3
    5622:	330a      	adds	r3, #10
    5624:	781b      	ldrb	r3, [r3, #0]
    5626:	b2db      	uxtb	r3, r3
    5628:	2b01      	cmp	r3, #1
    562a:	d15f      	bne.n	56ec <close+0x110>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    562c:	230e      	movs	r3, #14
    562e:	18fb      	adds	r3, r7, r3
    5630:	2249      	movs	r2, #73	; 0x49
    5632:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    5634:	2308      	movs	r3, #8
    5636:	18fb      	adds	r3, r7, r3
    5638:	1dfa      	adds	r2, r7, #7
    563a:	7812      	ldrb	r2, [r2, #0]
    563c:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    563e:	1dfb      	adds	r3, r7, #7
    5640:	781b      	ldrb	r3, [r3, #0]
    5642:	b25b      	sxtb	r3, r3
    5644:	4a31      	ldr	r2, [pc, #196]	; (570c <close+0x130>)
    5646:	011b      	lsls	r3, r3, #4
    5648:	18d3      	adds	r3, r2, r3
    564a:	3306      	adds	r3, #6
    564c:	881b      	ldrh	r3, [r3, #0]
    564e:	b29a      	uxth	r2, r3
    5650:	2308      	movs	r3, #8
    5652:	18fb      	adds	r3, r7, r3
    5654:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    5656:	1dfb      	adds	r3, r7, #7
    5658:	781b      	ldrb	r3, [r3, #0]
    565a:	b25b      	sxtb	r3, r3
    565c:	4a2b      	ldr	r2, [pc, #172]	; (570c <close+0x130>)
    565e:	011b      	lsls	r3, r3, #4
    5660:	18d3      	adds	r3, r2, r3
    5662:	330a      	adds	r3, #10
    5664:	2200      	movs	r2, #0
    5666:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    5668:	1dfb      	adds	r3, r7, #7
    566a:	781b      	ldrb	r3, [r3, #0]
    566c:	b25b      	sxtb	r3, r3
    566e:	4a27      	ldr	r2, [pc, #156]	; (570c <close+0x130>)
    5670:	011b      	lsls	r3, r3, #4
    5672:	18d3      	adds	r3, r2, r3
    5674:	3306      	adds	r3, #6
    5676:	2200      	movs	r2, #0
    5678:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    567a:	1dfb      	adds	r3, r7, #7
    567c:	781b      	ldrb	r3, [r3, #0]
    567e:	b25b      	sxtb	r3, r3
    5680:	4a22      	ldr	r2, [pc, #136]	; (570c <close+0x130>)
    5682:	011b      	lsls	r3, r3, #4
    5684:	18d3      	adds	r3, r2, r3
    5686:	330b      	adds	r3, #11
    5688:	781b      	ldrb	r3, [r3, #0]
    568a:	b2db      	uxtb	r3, r3
    568c:	001a      	movs	r2, r3
    568e:	2301      	movs	r3, #1
    5690:	4013      	ands	r3, r2
    5692:	d003      	beq.n	569c <close+0xc0>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    5694:	230e      	movs	r3, #14
    5696:	18fb      	adds	r3, r7, r3
    5698:	224e      	movs	r2, #78	; 0x4e
    569a:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    569c:	230f      	movs	r3, #15
    569e:	18fc      	adds	r4, r7, r3
    56a0:	2308      	movs	r3, #8
    56a2:	18fa      	adds	r2, r7, r3
    56a4:	230e      	movs	r3, #14
    56a6:	18fb      	adds	r3, r7, r3
    56a8:	7819      	ldrb	r1, [r3, #0]
    56aa:	2300      	movs	r3, #0
    56ac:	9302      	str	r3, [sp, #8]
    56ae:	2300      	movs	r3, #0
    56b0:	9301      	str	r3, [sp, #4]
    56b2:	2300      	movs	r3, #0
    56b4:	9300      	str	r3, [sp, #0]
    56b6:	2304      	movs	r3, #4
    56b8:	2002      	movs	r0, #2
    56ba:	4d15      	ldr	r5, [pc, #84]	; (5710 <close+0x134>)
    56bc:	47a8      	blx	r5
    56be:	0003      	movs	r3, r0
    56c0:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    56c2:	230f      	movs	r3, #15
    56c4:	18fb      	adds	r3, r7, r3
    56c6:	781b      	ldrb	r3, [r3, #0]
    56c8:	b25b      	sxtb	r3, r3
    56ca:	2b00      	cmp	r3, #0
    56cc:	d003      	beq.n	56d6 <close+0xfa>
		{
			s8Ret = SOCK_ERR_INVALID;
    56ce:	230f      	movs	r3, #15
    56d0:	18fb      	adds	r3, r7, r3
    56d2:	22f7      	movs	r2, #247	; 0xf7
    56d4:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    56d6:	1dfb      	adds	r3, r7, #7
    56d8:	781b      	ldrb	r3, [r3, #0]
    56da:	b25b      	sxtb	r3, r3
    56dc:	011a      	lsls	r2, r3, #4
    56de:	4b0b      	ldr	r3, [pc, #44]	; (570c <close+0x130>)
    56e0:	18d3      	adds	r3, r2, r3
    56e2:	2210      	movs	r2, #16
    56e4:	2100      	movs	r1, #0
    56e6:	0018      	movs	r0, r3
    56e8:	4b0a      	ldr	r3, [pc, #40]	; (5714 <close+0x138>)
    56ea:	4798      	blx	r3
	}
	return s8Ret;
    56ec:	230f      	movs	r3, #15
    56ee:	18fb      	adds	r3, r7, r3
    56f0:	781b      	ldrb	r3, [r3, #0]
    56f2:	b25b      	sxtb	r3, r3
}
    56f4:	0018      	movs	r0, r3
    56f6:	46bd      	mov	sp, r7
    56f8:	b004      	add	sp, #16
    56fa:	bdb0      	pop	{r4, r5, r7, pc}
    56fc:	0001053c 	.word	0x0001053c
    5700:	0000dfad 	.word	0x0000dfad
    5704:	00010578 	.word	0x00010578
    5708:	0000dfe1 	.word	0x0000dfe1
    570c:	20000318 	.word	0x20000318
    5710:	00000e85 	.word	0x00000e85
    5714:	00000c25 	.word	0x00000c25

00005718 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    5718:	b580      	push	{r7, lr}
    571a:	b086      	sub	sp, #24
    571c:	af00      	add	r7, sp, #0
    571e:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
    5720:	2300      	movs	r3, #0
    5722:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
    5724:	2317      	movs	r3, #23
    5726:	18fb      	adds	r3, r7, r3
    5728:	2200      	movs	r2, #0
    572a:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
    572c:	2316      	movs	r3, #22
    572e:	18fb      	adds	r3, r7, r3
    5730:	2200      	movs	r2, #0
    5732:	701a      	strb	r2, [r3, #0]
    5734:	e060      	b.n	57f8 <nmi_inet_addr+0xe0>
	{
		j = 0;
    5736:	2315      	movs	r3, #21
    5738:	18fb      	adds	r3, r7, r3
    573a:	2200      	movs	r2, #0
    573c:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
    573e:	2314      	movs	r3, #20
    5740:	18fb      	adds	r3, r7, r3
    5742:	687a      	ldr	r2, [r7, #4]
    5744:	7812      	ldrb	r2, [r2, #0]
    5746:	701a      	strb	r2, [r3, #0]
			++j;
    5748:	2315      	movs	r3, #21
    574a:	18fb      	adds	r3, r7, r3
    574c:	2215      	movs	r2, #21
    574e:	18ba      	adds	r2, r7, r2
    5750:	7812      	ldrb	r2, [r2, #0]
    5752:	3201      	adds	r2, #1
    5754:	701a      	strb	r2, [r3, #0]
			if(j > 4)
    5756:	2315      	movs	r3, #21
    5758:	18fb      	adds	r3, r7, r3
    575a:	781b      	ldrb	r3, [r3, #0]
    575c:	2b04      	cmp	r3, #4
    575e:	d901      	bls.n	5764 <nmi_inet_addr+0x4c>
			{
				return 0;
    5760:	2300      	movs	r3, #0
    5762:	e057      	b.n	5814 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
    5764:	2314      	movs	r3, #20
    5766:	18fb      	adds	r3, r7, r3
    5768:	781b      	ldrb	r3, [r3, #0]
    576a:	2b2e      	cmp	r3, #46	; 0x2e
    576c:	d004      	beq.n	5778 <nmi_inet_addr+0x60>
    576e:	2314      	movs	r3, #20
    5770:	18fb      	adds	r3, r7, r3
    5772:	781b      	ldrb	r3, [r3, #0]
    5774:	2b00      	cmp	r3, #0
    5776:	d10d      	bne.n	5794 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
    5778:	2316      	movs	r3, #22
    577a:	18fb      	adds	r3, r7, r3
    577c:	781b      	ldrb	r3, [r3, #0]
    577e:	220c      	movs	r2, #12
    5780:	18ba      	adds	r2, r7, r2
    5782:	2117      	movs	r1, #23
    5784:	1879      	adds	r1, r7, r1
    5786:	7809      	ldrb	r1, [r1, #0]
    5788:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
    578a:	2317      	movs	r3, #23
    578c:	18fb      	adds	r3, r7, r3
    578e:	2200      	movs	r2, #0
    5790:	701a      	strb	r2, [r3, #0]
    5792:	e01d      	b.n	57d0 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
    5794:	2314      	movs	r3, #20
    5796:	18fb      	adds	r3, r7, r3
    5798:	781b      	ldrb	r3, [r3, #0]
    579a:	2b2f      	cmp	r3, #47	; 0x2f
    579c:	d916      	bls.n	57cc <nmi_inet_addr+0xb4>
    579e:	2314      	movs	r3, #20
    57a0:	18fb      	adds	r3, r7, r3
    57a2:	781b      	ldrb	r3, [r3, #0]
    57a4:	2b39      	cmp	r3, #57	; 0x39
    57a6:	d811      	bhi.n	57cc <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
    57a8:	2317      	movs	r3, #23
    57aa:	18fb      	adds	r3, r7, r3
    57ac:	781b      	ldrb	r3, [r3, #0]
    57ae:	1c1a      	adds	r2, r3, #0
    57b0:	0092      	lsls	r2, r2, #2
    57b2:	18d3      	adds	r3, r2, r3
    57b4:	18db      	adds	r3, r3, r3
    57b6:	b2da      	uxtb	r2, r3
    57b8:	2314      	movs	r3, #20
    57ba:	18fb      	adds	r3, r7, r3
    57bc:	781b      	ldrb	r3, [r3, #0]
    57be:	18d3      	adds	r3, r2, r3
    57c0:	b2da      	uxtb	r2, r3
    57c2:	2317      	movs	r3, #23
    57c4:	18fb      	adds	r3, r7, r3
    57c6:	3a30      	subs	r2, #48	; 0x30
    57c8:	701a      	strb	r2, [r3, #0]
    57ca:	e001      	b.n	57d0 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
    57cc:	2300      	movs	r3, #0
    57ce:	e021      	b.n	5814 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
    57d0:	687b      	ldr	r3, [r7, #4]
    57d2:	3301      	adds	r3, #1
    57d4:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
    57d6:	2314      	movs	r3, #20
    57d8:	18fb      	adds	r3, r7, r3
    57da:	781b      	ldrb	r3, [r3, #0]
    57dc:	2b2e      	cmp	r3, #46	; 0x2e
    57de:	d004      	beq.n	57ea <nmi_inet_addr+0xd2>
    57e0:	2314      	movs	r3, #20
    57e2:	18fb      	adds	r3, r7, r3
    57e4:	781b      	ldrb	r3, [r3, #0]
    57e6:	2b00      	cmp	r3, #0
    57e8:	d1a9      	bne.n	573e <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
    57ea:	2316      	movs	r3, #22
    57ec:	18fb      	adds	r3, r7, r3
    57ee:	2216      	movs	r2, #22
    57f0:	18ba      	adds	r2, r7, r2
    57f2:	7812      	ldrb	r2, [r2, #0]
    57f4:	3201      	adds	r2, #1
    57f6:	701a      	strb	r2, [r3, #0]
    57f8:	2316      	movs	r3, #22
    57fa:	18fb      	adds	r3, r7, r3
    57fc:	781b      	ldrb	r3, [r3, #0]
    57fe:	2b03      	cmp	r3, #3
    5800:	d999      	bls.n	5736 <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    5802:	230c      	movs	r3, #12
    5804:	18f9      	adds	r1, r7, r3
    5806:	2310      	movs	r3, #16
    5808:	18fb      	adds	r3, r7, r3
    580a:	2204      	movs	r2, #4
    580c:	0018      	movs	r0, r3
    580e:	4b03      	ldr	r3, [pc, #12]	; (581c <nmi_inet_addr+0x104>)
    5810:	4798      	blx	r3
	return u32IP;
    5812:	693b      	ldr	r3, [r7, #16]
}
    5814:	0018      	movs	r0, r3
    5816:	46bd      	mov	sp, r7
    5818:	b006      	add	sp, #24
    581a:	bd80      	pop	{r7, pc}
    581c:	00000be9 	.word	0x00000be9

00005820 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    5820:	b5b0      	push	{r4, r5, r7, lr}
    5822:	b088      	sub	sp, #32
    5824:	af04      	add	r7, sp, #16
    5826:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    5828:	230f      	movs	r3, #15
    582a:	18fb      	adds	r3, r7, r3
    582c:	22fa      	movs	r2, #250	; 0xfa
    582e:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    5830:	687b      	ldr	r3, [r7, #4]
    5832:	0018      	movs	r0, r3
    5834:	4b14      	ldr	r3, [pc, #80]	; (5888 <gethostbyname+0x68>)
    5836:	4798      	blx	r3
    5838:	0003      	movs	r3, r0
    583a:	001a      	movs	r2, r3
    583c:	230e      	movs	r3, #14
    583e:	18fb      	adds	r3, r7, r3
    5840:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    5842:	230e      	movs	r3, #14
    5844:	18fb      	adds	r3, r7, r3
    5846:	781b      	ldrb	r3, [r3, #0]
    5848:	2b40      	cmp	r3, #64	; 0x40
    584a:	d815      	bhi.n	5878 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    584c:	230e      	movs	r3, #14
    584e:	18fb      	adds	r3, r7, r3
    5850:	781b      	ldrb	r3, [r3, #0]
    5852:	b29b      	uxth	r3, r3
    5854:	3301      	adds	r3, #1
    5856:	b299      	uxth	r1, r3
    5858:	230f      	movs	r3, #15
    585a:	18fc      	adds	r4, r7, r3
    585c:	687a      	ldr	r2, [r7, #4]
    585e:	2300      	movs	r3, #0
    5860:	9302      	str	r3, [sp, #8]
    5862:	2300      	movs	r3, #0
    5864:	9301      	str	r3, [sp, #4]
    5866:	2300      	movs	r3, #0
    5868:	9300      	str	r3, [sp, #0]
    586a:	000b      	movs	r3, r1
    586c:	214a      	movs	r1, #74	; 0x4a
    586e:	2002      	movs	r0, #2
    5870:	4d06      	ldr	r5, [pc, #24]	; (588c <gethostbyname+0x6c>)
    5872:	47a8      	blx	r5
    5874:	0003      	movs	r3, r0
    5876:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
    5878:	230f      	movs	r3, #15
    587a:	18fb      	adds	r3, r7, r3
    587c:	781b      	ldrb	r3, [r3, #0]
    587e:	b25b      	sxtb	r3, r3
}
    5880:	0018      	movs	r0, r3
    5882:	46bd      	mov	sp, r7
    5884:	b004      	add	sp, #16
    5886:	bdb0      	pop	{r4, r5, r7, pc}
    5888:	00000c63 	.word	0x00000c63
    588c:	00000e85 	.word	0x00000e85

00005890 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    5890:	b580      	push	{r7, lr}
    5892:	b082      	sub	sp, #8
    5894:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    5896:	003b      	movs	r3, r7
    5898:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
    589a:	687b      	ldr	r3, [r7, #4]
    589c:	22b9      	movs	r2, #185	; 0xb9
    589e:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    58a0:	4b13      	ldr	r3, [pc, #76]	; (58f0 <spi_flash_enter_low_power_mode+0x60>)
    58a2:	2100      	movs	r1, #0
    58a4:	0018      	movs	r0, r3
    58a6:	4b13      	ldr	r3, [pc, #76]	; (58f4 <spi_flash_enter_low_power_mode+0x64>)
    58a8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    58aa:	687b      	ldr	r3, [r7, #4]
    58ac:	781b      	ldrb	r3, [r3, #0]
    58ae:	001a      	movs	r2, r3
    58b0:	4b11      	ldr	r3, [pc, #68]	; (58f8 <spi_flash_enter_low_power_mode+0x68>)
    58b2:	0011      	movs	r1, r2
    58b4:	0018      	movs	r0, r3
    58b6:	4b0f      	ldr	r3, [pc, #60]	; (58f4 <spi_flash_enter_low_power_mode+0x64>)
    58b8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    58ba:	4b10      	ldr	r3, [pc, #64]	; (58fc <spi_flash_enter_low_power_mode+0x6c>)
    58bc:	2101      	movs	r1, #1
    58be:	0018      	movs	r0, r3
    58c0:	4b0c      	ldr	r3, [pc, #48]	; (58f4 <spi_flash_enter_low_power_mode+0x64>)
    58c2:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    58c4:	4b0e      	ldr	r3, [pc, #56]	; (5900 <spi_flash_enter_low_power_mode+0x70>)
    58c6:	2100      	movs	r1, #0
    58c8:	0018      	movs	r0, r3
    58ca:	4b0a      	ldr	r3, [pc, #40]	; (58f4 <spi_flash_enter_low_power_mode+0x64>)
    58cc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    58ce:	4b0d      	ldr	r3, [pc, #52]	; (5904 <spi_flash_enter_low_power_mode+0x74>)
    58d0:	2181      	movs	r1, #129	; 0x81
    58d2:	0018      	movs	r0, r3
    58d4:	4b07      	ldr	r3, [pc, #28]	; (58f4 <spi_flash_enter_low_power_mode+0x64>)
    58d6:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    58d8:	46c0      	nop			; (mov r8, r8)
    58da:	4b0b      	ldr	r3, [pc, #44]	; (5908 <spi_flash_enter_low_power_mode+0x78>)
    58dc:	0018      	movs	r0, r3
    58de:	4b0b      	ldr	r3, [pc, #44]	; (590c <spi_flash_enter_low_power_mode+0x7c>)
    58e0:	4798      	blx	r3
    58e2:	0003      	movs	r3, r0
    58e4:	2b01      	cmp	r3, #1
    58e6:	d1f8      	bne.n	58da <spi_flash_enter_low_power_mode+0x4a>
}
    58e8:	46c0      	nop			; (mov r8, r8)
    58ea:	46bd      	mov	sp, r7
    58ec:	b002      	add	sp, #8
    58ee:	bd80      	pop	{r7, pc}
    58f0:	00010208 	.word	0x00010208
    58f4:	00002c85 	.word	0x00002c85
    58f8:	0001020c 	.word	0x0001020c
    58fc:	00010214 	.word	0x00010214
    5900:	0001021c 	.word	0x0001021c
    5904:	00010204 	.word	0x00010204
    5908:	00010218 	.word	0x00010218
    590c:	00002c41 	.word	0x00002c41

00005910 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    5910:	b580      	push	{r7, lr}
    5912:	b082      	sub	sp, #8
    5914:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    5916:	003b      	movs	r3, r7
    5918:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
    591a:	687b      	ldr	r3, [r7, #4]
    591c:	22ab      	movs	r2, #171	; 0xab
    591e:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    5920:	4b13      	ldr	r3, [pc, #76]	; (5970 <spi_flash_leave_low_power_mode+0x60>)
    5922:	2100      	movs	r1, #0
    5924:	0018      	movs	r0, r3
    5926:	4b13      	ldr	r3, [pc, #76]	; (5974 <spi_flash_leave_low_power_mode+0x64>)
    5928:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    592a:	687b      	ldr	r3, [r7, #4]
    592c:	781b      	ldrb	r3, [r3, #0]
    592e:	001a      	movs	r2, r3
    5930:	4b11      	ldr	r3, [pc, #68]	; (5978 <spi_flash_leave_low_power_mode+0x68>)
    5932:	0011      	movs	r1, r2
    5934:	0018      	movs	r0, r3
    5936:	4b0f      	ldr	r3, [pc, #60]	; (5974 <spi_flash_leave_low_power_mode+0x64>)
    5938:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    593a:	4b10      	ldr	r3, [pc, #64]	; (597c <spi_flash_leave_low_power_mode+0x6c>)
    593c:	2101      	movs	r1, #1
    593e:	0018      	movs	r0, r3
    5940:	4b0c      	ldr	r3, [pc, #48]	; (5974 <spi_flash_leave_low_power_mode+0x64>)
    5942:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    5944:	4b0e      	ldr	r3, [pc, #56]	; (5980 <spi_flash_leave_low_power_mode+0x70>)
    5946:	2100      	movs	r1, #0
    5948:	0018      	movs	r0, r3
    594a:	4b0a      	ldr	r3, [pc, #40]	; (5974 <spi_flash_leave_low_power_mode+0x64>)
    594c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    594e:	4b0d      	ldr	r3, [pc, #52]	; (5984 <spi_flash_leave_low_power_mode+0x74>)
    5950:	2181      	movs	r1, #129	; 0x81
    5952:	0018      	movs	r0, r3
    5954:	4b07      	ldr	r3, [pc, #28]	; (5974 <spi_flash_leave_low_power_mode+0x64>)
    5956:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    5958:	46c0      	nop			; (mov r8, r8)
    595a:	4b0b      	ldr	r3, [pc, #44]	; (5988 <spi_flash_leave_low_power_mode+0x78>)
    595c:	0018      	movs	r0, r3
    595e:	4b0b      	ldr	r3, [pc, #44]	; (598c <spi_flash_leave_low_power_mode+0x7c>)
    5960:	4798      	blx	r3
    5962:	0003      	movs	r3, r0
    5964:	2b01      	cmp	r3, #1
    5966:	d1f8      	bne.n	595a <spi_flash_leave_low_power_mode+0x4a>
}
    5968:	46c0      	nop			; (mov r8, r8)
    596a:	46bd      	mov	sp, r7
    596c:	b002      	add	sp, #8
    596e:	bd80      	pop	{r7, pc}
    5970:	00010208 	.word	0x00010208
    5974:	00002c85 	.word	0x00002c85
    5978:	0001020c 	.word	0x0001020c
    597c:	00010214 	.word	0x00010214
    5980:	0001021c 	.word	0x0001021c
    5984:	00010204 	.word	0x00010204
    5988:	00010218 	.word	0x00010218
    598c:	00002c41 	.word	0x00002c41

00005990 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    5990:	b590      	push	{r4, r7, lr}
    5992:	b085      	sub	sp, #20
    5994:	af00      	add	r7, sp, #0
    5996:	0002      	movs	r2, r0
    5998:	1dfb      	adds	r3, r7, #7
    599a:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    599c:	230f      	movs	r3, #15
    599e:	18fb      	adds	r3, r7, r3
    59a0:	2200      	movs	r2, #0
    59a2:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    59a4:	4b24      	ldr	r3, [pc, #144]	; (5a38 <spi_flash_enable+0xa8>)
    59a6:	4798      	blx	r3
    59a8:	0003      	movs	r3, r0
    59aa:	051b      	lsls	r3, r3, #20
    59ac:	0d1b      	lsrs	r3, r3, #20
    59ae:	4a23      	ldr	r2, [pc, #140]	; (5a3c <spi_flash_enable+0xac>)
    59b0:	4293      	cmp	r3, r2
    59b2:	d938      	bls.n	5a26 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    59b4:	230f      	movs	r3, #15
    59b6:	18fc      	adds	r4, r7, r3
    59b8:	2308      	movs	r3, #8
    59ba:	18fb      	adds	r3, r7, r3
    59bc:	4a20      	ldr	r2, [pc, #128]	; (5a40 <spi_flash_enable+0xb0>)
    59be:	0019      	movs	r1, r3
    59c0:	0010      	movs	r0, r2
    59c2:	4b20      	ldr	r3, [pc, #128]	; (5a44 <spi_flash_enable+0xb4>)
    59c4:	4798      	blx	r3
    59c6:	0003      	movs	r3, r0
    59c8:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
    59ca:	230f      	movs	r3, #15
    59cc:	18fb      	adds	r3, r7, r3
    59ce:	781b      	ldrb	r3, [r3, #0]
    59d0:	b25b      	sxtb	r3, r3
    59d2:	2b00      	cmp	r3, #0
    59d4:	d126      	bne.n	5a24 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    59d6:	68bb      	ldr	r3, [r7, #8]
    59d8:	4a1b      	ldr	r2, [pc, #108]	; (5a48 <spi_flash_enable+0xb8>)
    59da:	4013      	ands	r3, r2
    59dc:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
    59de:	68bb      	ldr	r3, [r7, #8]
    59e0:	4a1a      	ldr	r2, [pc, #104]	; (5a4c <spi_flash_enable+0xbc>)
    59e2:	4313      	orrs	r3, r2
    59e4:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    59e6:	68bb      	ldr	r3, [r7, #8]
    59e8:	4a15      	ldr	r2, [pc, #84]	; (5a40 <spi_flash_enable+0xb0>)
    59ea:	0019      	movs	r1, r3
    59ec:	0010      	movs	r0, r2
    59ee:	4b18      	ldr	r3, [pc, #96]	; (5a50 <spi_flash_enable+0xc0>)
    59f0:	4798      	blx	r3
		if(enable) {
    59f2:	1dfb      	adds	r3, r7, #7
    59f4:	781b      	ldrb	r3, [r3, #0]
    59f6:	2b00      	cmp	r3, #0
    59f8:	d002      	beq.n	5a00 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
    59fa:	4b16      	ldr	r3, [pc, #88]	; (5a54 <spi_flash_enable+0xc4>)
    59fc:	4798      	blx	r3
    59fe:	e001      	b.n	5a04 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
    5a00:	4b15      	ldr	r3, [pc, #84]	; (5a58 <spi_flash_enable+0xc8>)
    5a02:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    5a04:	68bb      	ldr	r3, [r7, #8]
    5a06:	4a10      	ldr	r2, [pc, #64]	; (5a48 <spi_flash_enable+0xb8>)
    5a08:	4013      	ands	r3, r2
    5a0a:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
    5a0c:	68bb      	ldr	r3, [r7, #8]
    5a0e:	2280      	movs	r2, #128	; 0x80
    5a10:	0252      	lsls	r2, r2, #9
    5a12:	4313      	orrs	r3, r2
    5a14:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    5a16:	68bb      	ldr	r3, [r7, #8]
    5a18:	4a09      	ldr	r2, [pc, #36]	; (5a40 <spi_flash_enable+0xb0>)
    5a1a:	0019      	movs	r1, r3
    5a1c:	0010      	movs	r0, r2
    5a1e:	4b0c      	ldr	r3, [pc, #48]	; (5a50 <spi_flash_enable+0xc0>)
    5a20:	4798      	blx	r3
    5a22:	e000      	b.n	5a26 <spi_flash_enable+0x96>
			goto ERR1;
    5a24:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
    5a26:	230f      	movs	r3, #15
    5a28:	18fb      	adds	r3, r7, r3
    5a2a:	781b      	ldrb	r3, [r3, #0]
    5a2c:	b25b      	sxtb	r3, r3
}
    5a2e:	0018      	movs	r0, r3
    5a30:	46bd      	mov	sp, r7
    5a32:	b005      	add	sp, #20
    5a34:	bd90      	pop	{r4, r7, pc}
    5a36:	46c0      	nop			; (mov r8, r8)
    5a38:	00002565 	.word	0x00002565
    5a3c:	0000039f 	.word	0x0000039f
    5a40:	00001410 	.word	0x00001410
    5a44:	00002c61 	.word	0x00002c61
    5a48:	f8888fff 	.word	0xf8888fff
    5a4c:	01111000 	.word	0x01111000
    5a50:	00002c85 	.word	0x00002c85
    5a54:	00005911 	.word	0x00005911
    5a58:	00005891 	.word	0x00005891

00005a5c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    5a5c:	b580      	push	{r7, lr}
    5a5e:	b084      	sub	sp, #16
    5a60:	af00      	add	r7, sp, #0
    5a62:	0002      	movs	r2, r0
    5a64:	1dfb      	adds	r3, r7, #7
    5a66:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    5a68:	230f      	movs	r3, #15
    5a6a:	18fb      	adds	r3, r7, r3
    5a6c:	1dfa      	adds	r2, r7, #7
    5a6e:	7812      	ldrb	r2, [r2, #0]
    5a70:	0952      	lsrs	r2, r2, #5
    5a72:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    5a74:	230f      	movs	r3, #15
    5a76:	18fb      	adds	r3, r7, r3
    5a78:	781b      	ldrb	r3, [r3, #0]
    5a7a:	2b00      	cmp	r3, #0
    5a7c:	d10c      	bne.n	5a98 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5a7e:	4b09      	ldr	r3, [pc, #36]	; (5aa4 <_extint_get_eic_from_channel+0x48>)
    5a80:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    5a82:	230f      	movs	r3, #15
    5a84:	18fb      	adds	r3, r7, r3
    5a86:	781b      	ldrb	r3, [r3, #0]
    5a88:	009b      	lsls	r3, r3, #2
    5a8a:	2210      	movs	r2, #16
    5a8c:	4694      	mov	ip, r2
    5a8e:	44bc      	add	ip, r7
    5a90:	4463      	add	r3, ip
    5a92:	3b08      	subs	r3, #8
    5a94:	681b      	ldr	r3, [r3, #0]
    5a96:	e000      	b.n	5a9a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    5a98:	2300      	movs	r3, #0
	}
}
    5a9a:	0018      	movs	r0, r3
    5a9c:	46bd      	mov	sp, r7
    5a9e:	b004      	add	sp, #16
    5aa0:	bd80      	pop	{r7, pc}
    5aa2:	46c0      	nop			; (mov r8, r8)
    5aa4:	40001800 	.word	0x40001800

00005aa8 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    5aa8:	b580      	push	{r7, lr}
    5aaa:	b084      	sub	sp, #16
    5aac:	af00      	add	r7, sp, #0
    5aae:	0002      	movs	r2, r0
    5ab0:	1dfb      	adds	r3, r7, #7
    5ab2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    5ab4:	1dfb      	adds	r3, r7, #7
    5ab6:	781b      	ldrb	r3, [r3, #0]
    5ab8:	0018      	movs	r0, r3
    5aba:	4b0b      	ldr	r3, [pc, #44]	; (5ae8 <extint_chan_is_detected+0x40>)
    5abc:	4798      	blx	r3
    5abe:	0003      	movs	r3, r0
    5ac0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    5ac2:	1dfb      	adds	r3, r7, #7
    5ac4:	781b      	ldrb	r3, [r3, #0]
    5ac6:	221f      	movs	r2, #31
    5ac8:	4013      	ands	r3, r2
    5aca:	2201      	movs	r2, #1
    5acc:	409a      	lsls	r2, r3
    5ace:	0013      	movs	r3, r2
    5ad0:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    5ad2:	68fb      	ldr	r3, [r7, #12]
    5ad4:	691b      	ldr	r3, [r3, #16]
    5ad6:	68ba      	ldr	r2, [r7, #8]
    5ad8:	4013      	ands	r3, r2
    5ada:	1e5a      	subs	r2, r3, #1
    5adc:	4193      	sbcs	r3, r2
    5ade:	b2db      	uxtb	r3, r3
}
    5ae0:	0018      	movs	r0, r3
    5ae2:	46bd      	mov	sp, r7
    5ae4:	b004      	add	sp, #16
    5ae6:	bd80      	pop	{r7, pc}
    5ae8:	00005a5d 	.word	0x00005a5d

00005aec <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    5aec:	b580      	push	{r7, lr}
    5aee:	b084      	sub	sp, #16
    5af0:	af00      	add	r7, sp, #0
    5af2:	0002      	movs	r2, r0
    5af4:	1dfb      	adds	r3, r7, #7
    5af6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    5af8:	1dfb      	adds	r3, r7, #7
    5afa:	781b      	ldrb	r3, [r3, #0]
    5afc:	0018      	movs	r0, r3
    5afe:	4b09      	ldr	r3, [pc, #36]	; (5b24 <extint_chan_clear_detected+0x38>)
    5b00:	4798      	blx	r3
    5b02:	0003      	movs	r3, r0
    5b04:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    5b06:	1dfb      	adds	r3, r7, #7
    5b08:	781b      	ldrb	r3, [r3, #0]
    5b0a:	221f      	movs	r2, #31
    5b0c:	4013      	ands	r3, r2
    5b0e:	2201      	movs	r2, #1
    5b10:	409a      	lsls	r2, r3
    5b12:	0013      	movs	r3, r2
    5b14:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    5b16:	68fb      	ldr	r3, [r7, #12]
    5b18:	68ba      	ldr	r2, [r7, #8]
    5b1a:	611a      	str	r2, [r3, #16]
}
    5b1c:	46c0      	nop			; (mov r8, r8)
    5b1e:	46bd      	mov	sp, r7
    5b20:	b004      	add	sp, #16
    5b22:	bd80      	pop	{r7, pc}
    5b24:	00005a5d 	.word	0x00005a5d

00005b28 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    5b28:	b580      	push	{r7, lr}
    5b2a:	b082      	sub	sp, #8
    5b2c:	af00      	add	r7, sp, #0
    5b2e:	6078      	str	r0, [r7, #4]
    5b30:	0008      	movs	r0, r1
    5b32:	0011      	movs	r1, r2
    5b34:	1cfb      	adds	r3, r7, #3
    5b36:	1c02      	adds	r2, r0, #0
    5b38:	701a      	strb	r2, [r3, #0]
    5b3a:	1cbb      	adds	r3, r7, #2
    5b3c:	1c0a      	adds	r2, r1, #0
    5b3e:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    5b40:	1cbb      	adds	r3, r7, #2
    5b42:	781b      	ldrb	r3, [r3, #0]
    5b44:	2b00      	cmp	r3, #0
    5b46:	d001      	beq.n	5b4c <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5b48:	2317      	movs	r3, #23
    5b4a:	e019      	b.n	5b80 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    5b4c:	1cfb      	adds	r3, r7, #3
    5b4e:	781a      	ldrb	r2, [r3, #0]
    5b50:	4b0d      	ldr	r3, [pc, #52]	; (5b88 <extint_register_callback+0x60>)
    5b52:	0092      	lsls	r2, r2, #2
    5b54:	58d3      	ldr	r3, [r2, r3]
    5b56:	2b00      	cmp	r3, #0
    5b58:	d107      	bne.n	5b6a <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    5b5a:	1cfb      	adds	r3, r7, #3
    5b5c:	781a      	ldrb	r2, [r3, #0]
    5b5e:	4b0a      	ldr	r3, [pc, #40]	; (5b88 <extint_register_callback+0x60>)
    5b60:	0092      	lsls	r2, r2, #2
    5b62:	6879      	ldr	r1, [r7, #4]
    5b64:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    5b66:	2300      	movs	r3, #0
    5b68:	e00a      	b.n	5b80 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    5b6a:	1cfb      	adds	r3, r7, #3
    5b6c:	781a      	ldrb	r2, [r3, #0]
    5b6e:	4b06      	ldr	r3, [pc, #24]	; (5b88 <extint_register_callback+0x60>)
    5b70:	0092      	lsls	r2, r2, #2
    5b72:	58d2      	ldr	r2, [r2, r3]
    5b74:	687b      	ldr	r3, [r7, #4]
    5b76:	429a      	cmp	r2, r3
    5b78:	d101      	bne.n	5b7e <extint_register_callback+0x56>
		return STATUS_OK;
    5b7a:	2300      	movs	r3, #0
    5b7c:	e000      	b.n	5b80 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    5b7e:	231d      	movs	r3, #29
}
    5b80:	0018      	movs	r0, r3
    5b82:	46bd      	mov	sp, r7
    5b84:	b002      	add	sp, #8
    5b86:	bd80      	pop	{r7, pc}
    5b88:	200003d8 	.word	0x200003d8

00005b8c <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    5b8c:	b580      	push	{r7, lr}
    5b8e:	b084      	sub	sp, #16
    5b90:	af00      	add	r7, sp, #0
    5b92:	0002      	movs	r2, r0
    5b94:	1dfb      	adds	r3, r7, #7
    5b96:	701a      	strb	r2, [r3, #0]
    5b98:	1dbb      	adds	r3, r7, #6
    5b9a:	1c0a      	adds	r2, r1, #0
    5b9c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    5b9e:	1dbb      	adds	r3, r7, #6
    5ba0:	781b      	ldrb	r3, [r3, #0]
    5ba2:	2b00      	cmp	r3, #0
    5ba4:	d10e      	bne.n	5bc4 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    5ba6:	1dfb      	adds	r3, r7, #7
    5ba8:	781b      	ldrb	r3, [r3, #0]
    5baa:	0018      	movs	r0, r3
    5bac:	4b08      	ldr	r3, [pc, #32]	; (5bd0 <extint_chan_enable_callback+0x44>)
    5bae:	4798      	blx	r3
    5bb0:	0003      	movs	r3, r0
    5bb2:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    5bb4:	1dfb      	adds	r3, r7, #7
    5bb6:	781b      	ldrb	r3, [r3, #0]
    5bb8:	2201      	movs	r2, #1
    5bba:	409a      	lsls	r2, r3
    5bbc:	68fb      	ldr	r3, [r7, #12]
    5bbe:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5bc0:	2300      	movs	r3, #0
    5bc2:	e000      	b.n	5bc6 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    5bc4:	2317      	movs	r3, #23
}
    5bc6:	0018      	movs	r0, r3
    5bc8:	46bd      	mov	sp, r7
    5bca:	b004      	add	sp, #16
    5bcc:	bd80      	pop	{r7, pc}
    5bce:	46c0      	nop			; (mov r8, r8)
    5bd0:	00005a5d 	.word	0x00005a5d

00005bd4 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    5bd4:	b580      	push	{r7, lr}
    5bd6:	b084      	sub	sp, #16
    5bd8:	af00      	add	r7, sp, #0
    5bda:	0002      	movs	r2, r0
    5bdc:	1dfb      	adds	r3, r7, #7
    5bde:	701a      	strb	r2, [r3, #0]
    5be0:	1dbb      	adds	r3, r7, #6
    5be2:	1c0a      	adds	r2, r1, #0
    5be4:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    5be6:	1dbb      	adds	r3, r7, #6
    5be8:	781b      	ldrb	r3, [r3, #0]
    5bea:	2b00      	cmp	r3, #0
    5bec:	d10e      	bne.n	5c0c <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    5bee:	1dfb      	adds	r3, r7, #7
    5bf0:	781b      	ldrb	r3, [r3, #0]
    5bf2:	0018      	movs	r0, r3
    5bf4:	4b08      	ldr	r3, [pc, #32]	; (5c18 <extint_chan_disable_callback+0x44>)
    5bf6:	4798      	blx	r3
    5bf8:	0003      	movs	r3, r0
    5bfa:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    5bfc:	1dfb      	adds	r3, r7, #7
    5bfe:	781b      	ldrb	r3, [r3, #0]
    5c00:	2201      	movs	r2, #1
    5c02:	409a      	lsls	r2, r3
    5c04:	68fb      	ldr	r3, [r7, #12]
    5c06:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5c08:	2300      	movs	r3, #0
    5c0a:	e000      	b.n	5c0e <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    5c0c:	2317      	movs	r3, #23
}
    5c0e:	0018      	movs	r0, r3
    5c10:	46bd      	mov	sp, r7
    5c12:	b004      	add	sp, #16
    5c14:	bd80      	pop	{r7, pc}
    5c16:	46c0      	nop			; (mov r8, r8)
    5c18:	00005a5d 	.word	0x00005a5d

00005c1c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    5c1c:	b580      	push	{r7, lr}
    5c1e:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    5c20:	4b15      	ldr	r3, [pc, #84]	; (5c78 <EIC_Handler+0x5c>)
    5c22:	2200      	movs	r2, #0
    5c24:	701a      	strb	r2, [r3, #0]
    5c26:	e020      	b.n	5c6a <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    5c28:	4b13      	ldr	r3, [pc, #76]	; (5c78 <EIC_Handler+0x5c>)
    5c2a:	781b      	ldrb	r3, [r3, #0]
    5c2c:	0018      	movs	r0, r3
    5c2e:	4b13      	ldr	r3, [pc, #76]	; (5c7c <EIC_Handler+0x60>)
    5c30:	4798      	blx	r3
    5c32:	1e03      	subs	r3, r0, #0
    5c34:	d013      	beq.n	5c5e <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    5c36:	4b10      	ldr	r3, [pc, #64]	; (5c78 <EIC_Handler+0x5c>)
    5c38:	781b      	ldrb	r3, [r3, #0]
    5c3a:	0018      	movs	r0, r3
    5c3c:	4b10      	ldr	r3, [pc, #64]	; (5c80 <EIC_Handler+0x64>)
    5c3e:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    5c40:	4b0d      	ldr	r3, [pc, #52]	; (5c78 <EIC_Handler+0x5c>)
    5c42:	781b      	ldrb	r3, [r3, #0]
    5c44:	001a      	movs	r2, r3
    5c46:	4b0f      	ldr	r3, [pc, #60]	; (5c84 <EIC_Handler+0x68>)
    5c48:	0092      	lsls	r2, r2, #2
    5c4a:	58d3      	ldr	r3, [r2, r3]
    5c4c:	2b00      	cmp	r3, #0
    5c4e:	d006      	beq.n	5c5e <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    5c50:	4b09      	ldr	r3, [pc, #36]	; (5c78 <EIC_Handler+0x5c>)
    5c52:	781b      	ldrb	r3, [r3, #0]
    5c54:	001a      	movs	r2, r3
    5c56:	4b0b      	ldr	r3, [pc, #44]	; (5c84 <EIC_Handler+0x68>)
    5c58:	0092      	lsls	r2, r2, #2
    5c5a:	58d3      	ldr	r3, [r2, r3]
    5c5c:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    5c5e:	4b06      	ldr	r3, [pc, #24]	; (5c78 <EIC_Handler+0x5c>)
    5c60:	781b      	ldrb	r3, [r3, #0]
    5c62:	3301      	adds	r3, #1
    5c64:	b2da      	uxtb	r2, r3
    5c66:	4b04      	ldr	r3, [pc, #16]	; (5c78 <EIC_Handler+0x5c>)
    5c68:	701a      	strb	r2, [r3, #0]
    5c6a:	4b03      	ldr	r3, [pc, #12]	; (5c78 <EIC_Handler+0x5c>)
    5c6c:	781b      	ldrb	r3, [r3, #0]
    5c6e:	2b0f      	cmp	r3, #15
    5c70:	d9da      	bls.n	5c28 <EIC_Handler+0xc>
			}
		}
	}
}
    5c72:	46c0      	nop			; (mov r8, r8)
    5c74:	46bd      	mov	sp, r7
    5c76:	bd80      	pop	{r7, pc}
    5c78:	200003d4 	.word	0x200003d4
    5c7c:	00005aa9 	.word	0x00005aa9
    5c80:	00005aed 	.word	0x00005aed
    5c84:	200003d8 	.word	0x200003d8

00005c88 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    5c88:	b580      	push	{r7, lr}
    5c8a:	b082      	sub	sp, #8
    5c8c:	af00      	add	r7, sp, #0
    5c8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    5c90:	687b      	ldr	r3, [r7, #4]
    5c92:	2200      	movs	r2, #0
    5c94:	701a      	strb	r2, [r3, #0]
}
    5c96:	46c0      	nop			; (mov r8, r8)
    5c98:	46bd      	mov	sp, r7
    5c9a:	b002      	add	sp, #8
    5c9c:	bd80      	pop	{r7, pc}
	...

00005ca0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    5ca0:	b580      	push	{r7, lr}
    5ca2:	b082      	sub	sp, #8
    5ca4:	af00      	add	r7, sp, #0
    5ca6:	0002      	movs	r2, r0
    5ca8:	6039      	str	r1, [r7, #0]
    5caa:	1dfb      	adds	r3, r7, #7
    5cac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5cae:	1dfb      	adds	r3, r7, #7
    5cb0:	781b      	ldrb	r3, [r3, #0]
    5cb2:	2b01      	cmp	r3, #1
    5cb4:	d00a      	beq.n	5ccc <system_apb_clock_set_mask+0x2c>
    5cb6:	2b02      	cmp	r3, #2
    5cb8:	d00f      	beq.n	5cda <system_apb_clock_set_mask+0x3a>
    5cba:	2b00      	cmp	r3, #0
    5cbc:	d114      	bne.n	5ce8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    5cbe:	4b0e      	ldr	r3, [pc, #56]	; (5cf8 <system_apb_clock_set_mask+0x58>)
    5cc0:	4a0d      	ldr	r2, [pc, #52]	; (5cf8 <system_apb_clock_set_mask+0x58>)
    5cc2:	6991      	ldr	r1, [r2, #24]
    5cc4:	683a      	ldr	r2, [r7, #0]
    5cc6:	430a      	orrs	r2, r1
    5cc8:	619a      	str	r2, [r3, #24]
			break;
    5cca:	e00f      	b.n	5cec <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    5ccc:	4b0a      	ldr	r3, [pc, #40]	; (5cf8 <system_apb_clock_set_mask+0x58>)
    5cce:	4a0a      	ldr	r2, [pc, #40]	; (5cf8 <system_apb_clock_set_mask+0x58>)
    5cd0:	69d1      	ldr	r1, [r2, #28]
    5cd2:	683a      	ldr	r2, [r7, #0]
    5cd4:	430a      	orrs	r2, r1
    5cd6:	61da      	str	r2, [r3, #28]
			break;
    5cd8:	e008      	b.n	5cec <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    5cda:	4b07      	ldr	r3, [pc, #28]	; (5cf8 <system_apb_clock_set_mask+0x58>)
    5cdc:	4a06      	ldr	r2, [pc, #24]	; (5cf8 <system_apb_clock_set_mask+0x58>)
    5cde:	6a11      	ldr	r1, [r2, #32]
    5ce0:	683a      	ldr	r2, [r7, #0]
    5ce2:	430a      	orrs	r2, r1
    5ce4:	621a      	str	r2, [r3, #32]
			break;
    5ce6:	e001      	b.n	5cec <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5ce8:	2317      	movs	r3, #23
    5cea:	e000      	b.n	5cee <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5cec:	2300      	movs	r3, #0
}
    5cee:	0018      	movs	r0, r3
    5cf0:	46bd      	mov	sp, r7
    5cf2:	b002      	add	sp, #8
    5cf4:	bd80      	pop	{r7, pc}
    5cf6:	46c0      	nop			; (mov r8, r8)
    5cf8:	40000400 	.word	0x40000400

00005cfc <system_pinmux_get_config_defaults>:
{
    5cfc:	b580      	push	{r7, lr}
    5cfe:	b082      	sub	sp, #8
    5d00:	af00      	add	r7, sp, #0
    5d02:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5d04:	687b      	ldr	r3, [r7, #4]
    5d06:	2280      	movs	r2, #128	; 0x80
    5d08:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5d0a:	687b      	ldr	r3, [r7, #4]
    5d0c:	2200      	movs	r2, #0
    5d0e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5d10:	687b      	ldr	r3, [r7, #4]
    5d12:	2201      	movs	r2, #1
    5d14:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5d16:	687b      	ldr	r3, [r7, #4]
    5d18:	2200      	movs	r2, #0
    5d1a:	70da      	strb	r2, [r3, #3]
}
    5d1c:	46c0      	nop			; (mov r8, r8)
    5d1e:	46bd      	mov	sp, r7
    5d20:	b002      	add	sp, #8
    5d22:	bd80      	pop	{r7, pc}

00005d24 <system_interrupt_enable>:
{
    5d24:	b580      	push	{r7, lr}
    5d26:	b082      	sub	sp, #8
    5d28:	af00      	add	r7, sp, #0
    5d2a:	0002      	movs	r2, r0
    5d2c:	1dfb      	adds	r3, r7, #7
    5d2e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5d30:	4b06      	ldr	r3, [pc, #24]	; (5d4c <system_interrupt_enable+0x28>)
    5d32:	1dfa      	adds	r2, r7, #7
    5d34:	7812      	ldrb	r2, [r2, #0]
    5d36:	0011      	movs	r1, r2
    5d38:	221f      	movs	r2, #31
    5d3a:	400a      	ands	r2, r1
    5d3c:	2101      	movs	r1, #1
    5d3e:	4091      	lsls	r1, r2
    5d40:	000a      	movs	r2, r1
    5d42:	601a      	str	r2, [r3, #0]
}
    5d44:	46c0      	nop			; (mov r8, r8)
    5d46:	46bd      	mov	sp, r7
    5d48:	b002      	add	sp, #8
    5d4a:	bd80      	pop	{r7, pc}
    5d4c:	e000e100 	.word	0xe000e100

00005d50 <_extint_get_eic_from_channel>:
{
    5d50:	b580      	push	{r7, lr}
    5d52:	b084      	sub	sp, #16
    5d54:	af00      	add	r7, sp, #0
    5d56:	0002      	movs	r2, r0
    5d58:	1dfb      	adds	r3, r7, #7
    5d5a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    5d5c:	230f      	movs	r3, #15
    5d5e:	18fb      	adds	r3, r7, r3
    5d60:	1dfa      	adds	r2, r7, #7
    5d62:	7812      	ldrb	r2, [r2, #0]
    5d64:	0952      	lsrs	r2, r2, #5
    5d66:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
    5d68:	230f      	movs	r3, #15
    5d6a:	18fb      	adds	r3, r7, r3
    5d6c:	781b      	ldrb	r3, [r3, #0]
    5d6e:	2b00      	cmp	r3, #0
    5d70:	d10c      	bne.n	5d8c <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5d72:	4b09      	ldr	r3, [pc, #36]	; (5d98 <_extint_get_eic_from_channel+0x48>)
    5d74:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
    5d76:	230f      	movs	r3, #15
    5d78:	18fb      	adds	r3, r7, r3
    5d7a:	781b      	ldrb	r3, [r3, #0]
    5d7c:	009b      	lsls	r3, r3, #2
    5d7e:	2210      	movs	r2, #16
    5d80:	4694      	mov	ip, r2
    5d82:	44bc      	add	ip, r7
    5d84:	4463      	add	r3, ip
    5d86:	3b08      	subs	r3, #8
    5d88:	681b      	ldr	r3, [r3, #0]
    5d8a:	e000      	b.n	5d8e <_extint_get_eic_from_channel+0x3e>
		return NULL;
    5d8c:	2300      	movs	r3, #0
}
    5d8e:	0018      	movs	r0, r3
    5d90:	46bd      	mov	sp, r7
    5d92:	b004      	add	sp, #16
    5d94:	bd80      	pop	{r7, pc}
    5d96:	46c0      	nop			; (mov r8, r8)
    5d98:	40001800 	.word	0x40001800

00005d9c <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    5d9c:	b580      	push	{r7, lr}
    5d9e:	b082      	sub	sp, #8
    5da0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5da2:	4b0f      	ldr	r3, [pc, #60]	; (5de0 <extint_is_syncing+0x44>)
    5da4:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5da6:	2300      	movs	r3, #0
    5da8:	607b      	str	r3, [r7, #4]
    5daa:	e011      	b.n	5dd0 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    5dac:	687b      	ldr	r3, [r7, #4]
    5dae:	009b      	lsls	r3, r3, #2
    5db0:	2208      	movs	r2, #8
    5db2:	4694      	mov	ip, r2
    5db4:	44bc      	add	ip, r7
    5db6:	4463      	add	r3, ip
    5db8:	3b08      	subs	r3, #8
    5dba:	681b      	ldr	r3, [r3, #0]
    5dbc:	785b      	ldrb	r3, [r3, #1]
    5dbe:	b2db      	uxtb	r3, r3
    5dc0:	b25b      	sxtb	r3, r3
    5dc2:	2b00      	cmp	r3, #0
    5dc4:	da01      	bge.n	5dca <extint_is_syncing+0x2e>
			return true;
    5dc6:	2301      	movs	r3, #1
    5dc8:	e006      	b.n	5dd8 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5dca:	687b      	ldr	r3, [r7, #4]
    5dcc:	3301      	adds	r3, #1
    5dce:	607b      	str	r3, [r7, #4]
    5dd0:	687b      	ldr	r3, [r7, #4]
    5dd2:	2b00      	cmp	r3, #0
    5dd4:	d0ea      	beq.n	5dac <extint_is_syncing+0x10>
		}
	}
	return false;
    5dd6:	2300      	movs	r3, #0
}
    5dd8:	0018      	movs	r0, r3
    5dda:	46bd      	mov	sp, r7
    5ddc:	b002      	add	sp, #8
    5dde:	bd80      	pop	{r7, pc}
    5de0:	40001800 	.word	0x40001800

00005de4 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    5de4:	b580      	push	{r7, lr}
    5de6:	b084      	sub	sp, #16
    5de8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5dea:	4b2d      	ldr	r3, [pc, #180]	; (5ea0 <_system_extint_init+0xbc>)
    5dec:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    5dee:	2140      	movs	r1, #64	; 0x40
    5df0:	2000      	movs	r0, #0
    5df2:	4b2c      	ldr	r3, [pc, #176]	; (5ea4 <_system_extint_init+0xc0>)
    5df4:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5df6:	003b      	movs	r3, r7
    5df8:	0018      	movs	r0, r3
    5dfa:	4b2b      	ldr	r3, [pc, #172]	; (5ea8 <_system_extint_init+0xc4>)
    5dfc:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    5dfe:	003b      	movs	r3, r7
    5e00:	2200      	movs	r2, #0
    5e02:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    5e04:	003b      	movs	r3, r7
    5e06:	0019      	movs	r1, r3
    5e08:	2005      	movs	r0, #5
    5e0a:	4b28      	ldr	r3, [pc, #160]	; (5eac <_system_extint_init+0xc8>)
    5e0c:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    5e0e:	2005      	movs	r0, #5
    5e10:	4b27      	ldr	r3, [pc, #156]	; (5eb0 <_system_extint_init+0xcc>)
    5e12:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5e14:	2300      	movs	r3, #0
    5e16:	60fb      	str	r3, [r7, #12]
    5e18:	e018      	b.n	5e4c <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    5e1a:	68fb      	ldr	r3, [r7, #12]
    5e1c:	009b      	lsls	r3, r3, #2
    5e1e:	2210      	movs	r2, #16
    5e20:	4694      	mov	ip, r2
    5e22:	44bc      	add	ip, r7
    5e24:	4463      	add	r3, ip
    5e26:	3b0c      	subs	r3, #12
    5e28:	681a      	ldr	r2, [r3, #0]
    5e2a:	68fb      	ldr	r3, [r7, #12]
    5e2c:	009b      	lsls	r3, r3, #2
    5e2e:	2110      	movs	r1, #16
    5e30:	468c      	mov	ip, r1
    5e32:	44bc      	add	ip, r7
    5e34:	4463      	add	r3, ip
    5e36:	3b0c      	subs	r3, #12
    5e38:	681b      	ldr	r3, [r3, #0]
    5e3a:	781b      	ldrb	r3, [r3, #0]
    5e3c:	b2db      	uxtb	r3, r3
    5e3e:	2101      	movs	r1, #1
    5e40:	430b      	orrs	r3, r1
    5e42:	b2db      	uxtb	r3, r3
    5e44:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5e46:	68fb      	ldr	r3, [r7, #12]
    5e48:	3301      	adds	r3, #1
    5e4a:	60fb      	str	r3, [r7, #12]
    5e4c:	68fb      	ldr	r3, [r7, #12]
    5e4e:	2b00      	cmp	r3, #0
    5e50:	d0e3      	beq.n	5e1a <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
    5e52:	46c0      	nop			; (mov r8, r8)
    5e54:	4b17      	ldr	r3, [pc, #92]	; (5eb4 <_system_extint_init+0xd0>)
    5e56:	4798      	blx	r3
    5e58:	1e03      	subs	r3, r0, #0
    5e5a:	d1fb      	bne.n	5e54 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    5e5c:	230b      	movs	r3, #11
    5e5e:	18fb      	adds	r3, r7, r3
    5e60:	2200      	movs	r2, #0
    5e62:	701a      	strb	r2, [r3, #0]
    5e64:	e00d      	b.n	5e82 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    5e66:	230b      	movs	r3, #11
    5e68:	18fb      	adds	r3, r7, r3
    5e6a:	781a      	ldrb	r2, [r3, #0]
    5e6c:	4b12      	ldr	r3, [pc, #72]	; (5eb8 <_system_extint_init+0xd4>)
    5e6e:	0092      	lsls	r2, r2, #2
    5e70:	2100      	movs	r1, #0
    5e72:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    5e74:	230b      	movs	r3, #11
    5e76:	18fb      	adds	r3, r7, r3
    5e78:	781a      	ldrb	r2, [r3, #0]
    5e7a:	230b      	movs	r3, #11
    5e7c:	18fb      	adds	r3, r7, r3
    5e7e:	3201      	adds	r2, #1
    5e80:	701a      	strb	r2, [r3, #0]
    5e82:	230b      	movs	r3, #11
    5e84:	18fb      	adds	r3, r7, r3
    5e86:	781b      	ldrb	r3, [r3, #0]
    5e88:	2b0f      	cmp	r3, #15
    5e8a:	d9ec      	bls.n	5e66 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    5e8c:	2004      	movs	r0, #4
    5e8e:	4b0b      	ldr	r3, [pc, #44]	; (5ebc <_system_extint_init+0xd8>)
    5e90:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    5e92:	4b0b      	ldr	r3, [pc, #44]	; (5ec0 <_system_extint_init+0xdc>)
    5e94:	4798      	blx	r3
}
    5e96:	46c0      	nop			; (mov r8, r8)
    5e98:	46bd      	mov	sp, r7
    5e9a:	b004      	add	sp, #16
    5e9c:	bd80      	pop	{r7, pc}
    5e9e:	46c0      	nop			; (mov r8, r8)
    5ea0:	40001800 	.word	0x40001800
    5ea4:	00005ca1 	.word	0x00005ca1
    5ea8:	00005c89 	.word	0x00005c89
    5eac:	0000c601 	.word	0x0000c601
    5eb0:	0000c645 	.word	0x0000c645
    5eb4:	00005d9d 	.word	0x00005d9d
    5eb8:	200003d8 	.word	0x200003d8
    5ebc:	00005d25 	.word	0x00005d25
    5ec0:	00005ec5 	.word	0x00005ec5

00005ec4 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    5ec4:	b580      	push	{r7, lr}
    5ec6:	b082      	sub	sp, #8
    5ec8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5eca:	4b15      	ldr	r3, [pc, #84]	; (5f20 <_extint_enable+0x5c>)
    5ecc:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5ece:	2300      	movs	r3, #0
    5ed0:	607b      	str	r3, [r7, #4]
    5ed2:	e018      	b.n	5f06 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    5ed4:	687b      	ldr	r3, [r7, #4]
    5ed6:	009b      	lsls	r3, r3, #2
    5ed8:	2208      	movs	r2, #8
    5eda:	4694      	mov	ip, r2
    5edc:	44bc      	add	ip, r7
    5ede:	4463      	add	r3, ip
    5ee0:	3b08      	subs	r3, #8
    5ee2:	681a      	ldr	r2, [r3, #0]
    5ee4:	687b      	ldr	r3, [r7, #4]
    5ee6:	009b      	lsls	r3, r3, #2
    5ee8:	2108      	movs	r1, #8
    5eea:	468c      	mov	ip, r1
    5eec:	44bc      	add	ip, r7
    5eee:	4463      	add	r3, ip
    5ef0:	3b08      	subs	r3, #8
    5ef2:	681b      	ldr	r3, [r3, #0]
    5ef4:	781b      	ldrb	r3, [r3, #0]
    5ef6:	b2db      	uxtb	r3, r3
    5ef8:	2102      	movs	r1, #2
    5efa:	430b      	orrs	r3, r1
    5efc:	b2db      	uxtb	r3, r3
    5efe:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5f00:	687b      	ldr	r3, [r7, #4]
    5f02:	3301      	adds	r3, #1
    5f04:	607b      	str	r3, [r7, #4]
    5f06:	687b      	ldr	r3, [r7, #4]
    5f08:	2b00      	cmp	r3, #0
    5f0a:	d0e3      	beq.n	5ed4 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    5f0c:	46c0      	nop			; (mov r8, r8)
    5f0e:	4b05      	ldr	r3, [pc, #20]	; (5f24 <_extint_enable+0x60>)
    5f10:	4798      	blx	r3
    5f12:	1e03      	subs	r3, r0, #0
    5f14:	d1fb      	bne.n	5f0e <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    5f16:	46c0      	nop			; (mov r8, r8)
    5f18:	46bd      	mov	sp, r7
    5f1a:	b002      	add	sp, #8
    5f1c:	bd80      	pop	{r7, pc}
    5f1e:	46c0      	nop			; (mov r8, r8)
    5f20:	40001800 	.word	0x40001800
    5f24:	00005d9d 	.word	0x00005d9d

00005f28 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    5f28:	b580      	push	{r7, lr}
    5f2a:	b082      	sub	sp, #8
    5f2c:	af00      	add	r7, sp, #0
    5f2e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    5f30:	687b      	ldr	r3, [r7, #4]
    5f32:	2200      	movs	r2, #0
    5f34:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    5f36:	687b      	ldr	r3, [r7, #4]
    5f38:	2200      	movs	r2, #0
    5f3a:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    5f3c:	687b      	ldr	r3, [r7, #4]
    5f3e:	2201      	movs	r2, #1
    5f40:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    5f42:	687b      	ldr	r3, [r7, #4]
    5f44:	2201      	movs	r2, #1
    5f46:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    5f48:	687b      	ldr	r3, [r7, #4]
    5f4a:	2200      	movs	r2, #0
    5f4c:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    5f4e:	687b      	ldr	r3, [r7, #4]
    5f50:	2202      	movs	r2, #2
    5f52:	72da      	strb	r2, [r3, #11]
}
    5f54:	46c0      	nop			; (mov r8, r8)
    5f56:	46bd      	mov	sp, r7
    5f58:	b002      	add	sp, #8
    5f5a:	bd80      	pop	{r7, pc}

00005f5c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    5f5c:	b580      	push	{r7, lr}
    5f5e:	b086      	sub	sp, #24
    5f60:	af00      	add	r7, sp, #0
    5f62:	0002      	movs	r2, r0
    5f64:	6039      	str	r1, [r7, #0]
    5f66:	1dfb      	adds	r3, r7, #7
    5f68:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    5f6a:	2308      	movs	r3, #8
    5f6c:	18fb      	adds	r3, r7, r3
    5f6e:	0018      	movs	r0, r3
    5f70:	4b36      	ldr	r3, [pc, #216]	; (604c <extint_chan_set_config+0xf0>)
    5f72:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    5f74:	683b      	ldr	r3, [r7, #0]
    5f76:	685b      	ldr	r3, [r3, #4]
    5f78:	b2da      	uxtb	r2, r3
    5f7a:	2308      	movs	r3, #8
    5f7c:	18fb      	adds	r3, r7, r3
    5f7e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5f80:	2308      	movs	r3, #8
    5f82:	18fb      	adds	r3, r7, r3
    5f84:	2200      	movs	r2, #0
    5f86:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    5f88:	683b      	ldr	r3, [r7, #0]
    5f8a:	7a1a      	ldrb	r2, [r3, #8]
    5f8c:	2308      	movs	r3, #8
    5f8e:	18fb      	adds	r3, r7, r3
    5f90:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    5f92:	683b      	ldr	r3, [r7, #0]
    5f94:	681b      	ldr	r3, [r3, #0]
    5f96:	b2db      	uxtb	r3, r3
    5f98:	2208      	movs	r2, #8
    5f9a:	18ba      	adds	r2, r7, r2
    5f9c:	0011      	movs	r1, r2
    5f9e:	0018      	movs	r0, r3
    5fa0:	4b2b      	ldr	r3, [pc, #172]	; (6050 <extint_chan_set_config+0xf4>)
    5fa2:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    5fa4:	1dfb      	adds	r3, r7, #7
    5fa6:	781b      	ldrb	r3, [r3, #0]
    5fa8:	0018      	movs	r0, r3
    5faa:	4b2a      	ldr	r3, [pc, #168]	; (6054 <extint_chan_set_config+0xf8>)
    5fac:	4798      	blx	r3
    5fae:	0003      	movs	r3, r0
    5fb0:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    5fb2:	1dfb      	adds	r3, r7, #7
    5fb4:	781b      	ldrb	r3, [r3, #0]
    5fb6:	2207      	movs	r2, #7
    5fb8:	4013      	ands	r3, r2
    5fba:	009b      	lsls	r3, r3, #2
    5fbc:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    5fbe:	683b      	ldr	r3, [r7, #0]
    5fc0:	7adb      	ldrb	r3, [r3, #11]
    5fc2:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    5fc4:	683b      	ldr	r3, [r7, #0]
    5fc6:	7a9b      	ldrb	r3, [r3, #10]
    5fc8:	2b00      	cmp	r3, #0
    5fca:	d003      	beq.n	5fd4 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    5fcc:	697b      	ldr	r3, [r7, #20]
    5fce:	2208      	movs	r2, #8
    5fd0:	4313      	orrs	r3, r2
    5fd2:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    5fd4:	1dfb      	adds	r3, r7, #7
    5fd6:	781b      	ldrb	r3, [r3, #0]
    5fd8:	08db      	lsrs	r3, r3, #3
    5fda:	b2db      	uxtb	r3, r3
    5fdc:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    5fde:	1dfb      	adds	r3, r7, #7
    5fe0:	781b      	ldrb	r3, [r3, #0]
    5fe2:	08db      	lsrs	r3, r3, #3
    5fe4:	b2db      	uxtb	r3, r3
    5fe6:	001a      	movs	r2, r3
    5fe8:	693b      	ldr	r3, [r7, #16]
    5fea:	3206      	adds	r2, #6
    5fec:	0092      	lsls	r2, r2, #2
    5fee:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    5ff0:	210f      	movs	r1, #15
    5ff2:	68fa      	ldr	r2, [r7, #12]
    5ff4:	4091      	lsls	r1, r2
    5ff6:	000a      	movs	r2, r1
    5ff8:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    5ffa:	401a      	ands	r2, r3
			(new_config << config_pos);
    5ffc:	6979      	ldr	r1, [r7, #20]
    5ffe:	68fb      	ldr	r3, [r7, #12]
    6000:	4099      	lsls	r1, r3
    6002:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    6004:	431a      	orrs	r2, r3
    6006:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    6008:	693b      	ldr	r3, [r7, #16]
    600a:	1d82      	adds	r2, r0, #6
    600c:	0092      	lsls	r2, r2, #2
    600e:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    6010:	683b      	ldr	r3, [r7, #0]
    6012:	7a5b      	ldrb	r3, [r3, #9]
    6014:	2b00      	cmp	r3, #0
    6016:	d00a      	beq.n	602e <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    6018:	693b      	ldr	r3, [r7, #16]
    601a:	695a      	ldr	r2, [r3, #20]
    601c:	1dfb      	adds	r3, r7, #7
    601e:	781b      	ldrb	r3, [r3, #0]
    6020:	2101      	movs	r1, #1
    6022:	4099      	lsls	r1, r3
    6024:	000b      	movs	r3, r1
    6026:	431a      	orrs	r2, r3
    6028:	693b      	ldr	r3, [r7, #16]
    602a:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    602c:	e00a      	b.n	6044 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    602e:	693b      	ldr	r3, [r7, #16]
    6030:	695b      	ldr	r3, [r3, #20]
    6032:	1dfa      	adds	r2, r7, #7
    6034:	7812      	ldrb	r2, [r2, #0]
    6036:	2101      	movs	r1, #1
    6038:	4091      	lsls	r1, r2
    603a:	000a      	movs	r2, r1
    603c:	43d2      	mvns	r2, r2
    603e:	401a      	ands	r2, r3
    6040:	693b      	ldr	r3, [r7, #16]
    6042:	615a      	str	r2, [r3, #20]
}
    6044:	46c0      	nop			; (mov r8, r8)
    6046:	46bd      	mov	sp, r7
    6048:	b006      	add	sp, #24
    604a:	bd80      	pop	{r7, pc}
    604c:	00005cfd 	.word	0x00005cfd
    6050:	0000c8ed 	.word	0x0000c8ed
    6054:	00005d51 	.word	0x00005d51

00006058 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    6058:	b580      	push	{r7, lr}
    605a:	b086      	sub	sp, #24
    605c:	af00      	add	r7, sp, #0
    605e:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    6060:	4b28      	ldr	r3, [pc, #160]	; (6104 <_rtc_interrupt_handler+0xac>)
    6062:	687a      	ldr	r2, [r7, #4]
    6064:	0092      	lsls	r2, r2, #2
    6066:	58d3      	ldr	r3, [r2, r3]
    6068:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    606a:	697b      	ldr	r3, [r7, #20]
    606c:	681b      	ldr	r3, [r3, #0]
    606e:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    6070:	230e      	movs	r3, #14
    6072:	18fb      	adds	r3, r7, r3
    6074:	697a      	ldr	r2, [r7, #20]
    6076:	8a52      	ldrh	r2, [r2, #18]
    6078:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    607a:	697b      	ldr	r3, [r7, #20]
    607c:	8a1b      	ldrh	r3, [r3, #16]
    607e:	b29a      	uxth	r2, r3
    6080:	230e      	movs	r3, #14
    6082:	18fb      	adds	r3, r7, r3
    6084:	210e      	movs	r1, #14
    6086:	1879      	adds	r1, r7, r1
    6088:	8809      	ldrh	r1, [r1, #0]
    608a:	400a      	ands	r2, r1
    608c:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    608e:	693b      	ldr	r3, [r7, #16]
    6090:	7a1b      	ldrb	r3, [r3, #8]
    6092:	b2da      	uxtb	r2, r3
    6094:	230c      	movs	r3, #12
    6096:	18fb      	adds	r3, r7, r3
    6098:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    609a:	693b      	ldr	r3, [r7, #16]
    609c:	79db      	ldrb	r3, [r3, #7]
    609e:	b2db      	uxtb	r3, r3
    60a0:	b29a      	uxth	r2, r3
    60a2:	230c      	movs	r3, #12
    60a4:	18fb      	adds	r3, r7, r3
    60a6:	210c      	movs	r1, #12
    60a8:	1879      	adds	r1, r7, r1
    60aa:	8809      	ldrh	r1, [r1, #0]
    60ac:	400a      	ands	r2, r1
    60ae:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    60b0:	230c      	movs	r3, #12
    60b2:	18fb      	adds	r3, r7, r3
    60b4:	881b      	ldrh	r3, [r3, #0]
    60b6:	2280      	movs	r2, #128	; 0x80
    60b8:	4013      	ands	r3, r2
    60ba:	d00c      	beq.n	60d6 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    60bc:	230e      	movs	r3, #14
    60be:	18fb      	adds	r3, r7, r3
    60c0:	881b      	ldrh	r3, [r3, #0]
    60c2:	2202      	movs	r2, #2
    60c4:	4013      	ands	r3, r2
    60c6:	d002      	beq.n	60ce <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    60c8:	697b      	ldr	r3, [r7, #20]
    60ca:	68db      	ldr	r3, [r3, #12]
    60cc:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    60ce:	693b      	ldr	r3, [r7, #16]
    60d0:	2280      	movs	r2, #128	; 0x80
    60d2:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    60d4:	e011      	b.n	60fa <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    60d6:	230c      	movs	r3, #12
    60d8:	18fb      	adds	r3, r7, r3
    60da:	881b      	ldrh	r3, [r3, #0]
    60dc:	2201      	movs	r2, #1
    60de:	4013      	ands	r3, r2
    60e0:	d00b      	beq.n	60fa <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    60e2:	230e      	movs	r3, #14
    60e4:	18fb      	adds	r3, r7, r3
    60e6:	881b      	ldrh	r3, [r3, #0]
    60e8:	2201      	movs	r2, #1
    60ea:	4013      	ands	r3, r2
    60ec:	d002      	beq.n	60f4 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    60ee:	697b      	ldr	r3, [r7, #20]
    60f0:	689b      	ldr	r3, [r3, #8]
    60f2:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    60f4:	693b      	ldr	r3, [r7, #16]
    60f6:	2201      	movs	r2, #1
    60f8:	721a      	strb	r2, [r3, #8]
}
    60fa:	46c0      	nop			; (mov r8, r8)
    60fc:	46bd      	mov	sp, r7
    60fe:	b006      	add	sp, #24
    6100:	bd80      	pop	{r7, pc}
    6102:	46c0      	nop			; (mov r8, r8)
    6104:	20000418 	.word	0x20000418

00006108 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    6108:	b580      	push	{r7, lr}
    610a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    610c:	2000      	movs	r0, #0
    610e:	4b02      	ldr	r3, [pc, #8]	; (6118 <RTC_Handler+0x10>)
    6110:	4798      	blx	r3
}
    6112:	46c0      	nop			; (mov r8, r8)
    6114:	46bd      	mov	sp, r7
    6116:	bd80      	pop	{r7, pc}
    6118:	00006059 	.word	0x00006059

0000611c <system_gclk_chan_get_config_defaults>:
{
    611c:	b580      	push	{r7, lr}
    611e:	b082      	sub	sp, #8
    6120:	af00      	add	r7, sp, #0
    6122:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    6124:	687b      	ldr	r3, [r7, #4]
    6126:	2200      	movs	r2, #0
    6128:	701a      	strb	r2, [r3, #0]
}
    612a:	46c0      	nop			; (mov r8, r8)
    612c:	46bd      	mov	sp, r7
    612e:	b002      	add	sp, #8
    6130:	bd80      	pop	{r7, pc}
	...

00006134 <system_apb_clock_set_mask>:
{
    6134:	b580      	push	{r7, lr}
    6136:	b082      	sub	sp, #8
    6138:	af00      	add	r7, sp, #0
    613a:	0002      	movs	r2, r0
    613c:	6039      	str	r1, [r7, #0]
    613e:	1dfb      	adds	r3, r7, #7
    6140:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6142:	1dfb      	adds	r3, r7, #7
    6144:	781b      	ldrb	r3, [r3, #0]
    6146:	2b01      	cmp	r3, #1
    6148:	d00a      	beq.n	6160 <system_apb_clock_set_mask+0x2c>
    614a:	2b02      	cmp	r3, #2
    614c:	d00f      	beq.n	616e <system_apb_clock_set_mask+0x3a>
    614e:	2b00      	cmp	r3, #0
    6150:	d114      	bne.n	617c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    6152:	4b0e      	ldr	r3, [pc, #56]	; (618c <system_apb_clock_set_mask+0x58>)
    6154:	4a0d      	ldr	r2, [pc, #52]	; (618c <system_apb_clock_set_mask+0x58>)
    6156:	6991      	ldr	r1, [r2, #24]
    6158:	683a      	ldr	r2, [r7, #0]
    615a:	430a      	orrs	r2, r1
    615c:	619a      	str	r2, [r3, #24]
			break;
    615e:	e00f      	b.n	6180 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    6160:	4b0a      	ldr	r3, [pc, #40]	; (618c <system_apb_clock_set_mask+0x58>)
    6162:	4a0a      	ldr	r2, [pc, #40]	; (618c <system_apb_clock_set_mask+0x58>)
    6164:	69d1      	ldr	r1, [r2, #28]
    6166:	683a      	ldr	r2, [r7, #0]
    6168:	430a      	orrs	r2, r1
    616a:	61da      	str	r2, [r3, #28]
			break;
    616c:	e008      	b.n	6180 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    616e:	4b07      	ldr	r3, [pc, #28]	; (618c <system_apb_clock_set_mask+0x58>)
    6170:	4a06      	ldr	r2, [pc, #24]	; (618c <system_apb_clock_set_mask+0x58>)
    6172:	6a11      	ldr	r1, [r2, #32]
    6174:	683a      	ldr	r2, [r7, #0]
    6176:	430a      	orrs	r2, r1
    6178:	621a      	str	r2, [r3, #32]
			break;
    617a:	e001      	b.n	6180 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    617c:	2317      	movs	r3, #23
    617e:	e000      	b.n	6182 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    6180:	2300      	movs	r3, #0
}
    6182:	0018      	movs	r0, r3
    6184:	46bd      	mov	sp, r7
    6186:	b002      	add	sp, #8
    6188:	bd80      	pop	{r7, pc}
    618a:	46c0      	nop			; (mov r8, r8)
    618c:	40000400 	.word	0x40000400

00006190 <system_pinmux_get_config_defaults>:
{
    6190:	b580      	push	{r7, lr}
    6192:	b082      	sub	sp, #8
    6194:	af00      	add	r7, sp, #0
    6196:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6198:	687b      	ldr	r3, [r7, #4]
    619a:	2280      	movs	r2, #128	; 0x80
    619c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    619e:	687b      	ldr	r3, [r7, #4]
    61a0:	2200      	movs	r2, #0
    61a2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    61a4:	687b      	ldr	r3, [r7, #4]
    61a6:	2201      	movs	r2, #1
    61a8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    61aa:	687b      	ldr	r3, [r7, #4]
    61ac:	2200      	movs	r2, #0
    61ae:	70da      	strb	r2, [r3, #3]
}
    61b0:	46c0      	nop			; (mov r8, r8)
    61b2:	46bd      	mov	sp, r7
    61b4:	b002      	add	sp, #8
    61b6:	bd80      	pop	{r7, pc}

000061b8 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    61b8:	b580      	push	{r7, lr}
    61ba:	b084      	sub	sp, #16
    61bc:	af00      	add	r7, sp, #0
    61be:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    61c0:	2300      	movs	r3, #0
    61c2:	60fb      	str	r3, [r7, #12]
    61c4:	e00c      	b.n	61e0 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    61c6:	4b0a      	ldr	r3, [pc, #40]	; (61f0 <_tcc_get_inst_index+0x38>)
    61c8:	68fa      	ldr	r2, [r7, #12]
    61ca:	0092      	lsls	r2, r2, #2
    61cc:	58d2      	ldr	r2, [r2, r3]
    61ce:	687b      	ldr	r3, [r7, #4]
    61d0:	429a      	cmp	r2, r3
    61d2:	d102      	bne.n	61da <_tcc_get_inst_index+0x22>
			return i;
    61d4:	68fb      	ldr	r3, [r7, #12]
    61d6:	b2db      	uxtb	r3, r3
    61d8:	e006      	b.n	61e8 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    61da:	68fb      	ldr	r3, [r7, #12]
    61dc:	3301      	adds	r3, #1
    61de:	60fb      	str	r3, [r7, #12]
    61e0:	68fb      	ldr	r3, [r7, #12]
    61e2:	2b02      	cmp	r3, #2
    61e4:	d9ef      	bls.n	61c6 <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    61e6:	2300      	movs	r3, #0
}
    61e8:	0018      	movs	r0, r3
    61ea:	46bd      	mov	sp, r7
    61ec:	b004      	add	sp, #16
    61ee:	bd80      	pop	{r7, pc}
    61f0:	000105ec 	.word	0x000105ec

000061f4 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    61f4:	b590      	push	{r4, r7, lr}
    61f6:	b085      	sub	sp, #20
    61f8:	af00      	add	r7, sp, #0
    61fa:	6078      	str	r0, [r7, #4]
    61fc:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    61fe:	230f      	movs	r3, #15
    6200:	18fc      	adds	r4, r7, r3
    6202:	683b      	ldr	r3, [r7, #0]
    6204:	0018      	movs	r0, r3
    6206:	4bad      	ldr	r3, [pc, #692]	; (64bc <tcc_get_config_defaults+0x2c8>)
    6208:	4798      	blx	r3
    620a:	0003      	movs	r3, r0
    620c:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    620e:	687b      	ldr	r3, [r7, #4]
    6210:	2200      	movs	r2, #0
    6212:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    6214:	230f      	movs	r3, #15
    6216:	18fb      	adds	r3, r7, r3
    6218:	781a      	ldrb	r2, [r3, #0]
    621a:	4ba9      	ldr	r3, [pc, #676]	; (64c0 <tcc_get_config_defaults+0x2cc>)
    621c:	0092      	lsls	r2, r2, #2
    621e:	58d2      	ldr	r2, [r2, r3]
    6220:	687b      	ldr	r3, [r7, #4]
    6222:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    6224:	687b      	ldr	r3, [r7, #4]
    6226:	2200      	movs	r2, #0
    6228:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    622a:	687b      	ldr	r3, [r7, #4]
    622c:	2200      	movs	r2, #0
    622e:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    6230:	687b      	ldr	r3, [r7, #4]
    6232:	2200      	movs	r2, #0
    6234:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    6236:	687b      	ldr	r3, [r7, #4]
    6238:	2200      	movs	r2, #0
    623a:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
    623c:	687b      	ldr	r3, [r7, #4]
    623e:	2200      	movs	r2, #0
    6240:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    6242:	687b      	ldr	r3, [r7, #4]
    6244:	2200      	movs	r2, #0
    6246:	61da      	str	r2, [r3, #28]
    6248:	687b      	ldr	r3, [r7, #4]
    624a:	2200      	movs	r2, #0
    624c:	621a      	str	r2, [r3, #32]
    624e:	687b      	ldr	r3, [r7, #4]
    6250:	2200      	movs	r2, #0
    6252:	625a      	str	r2, [r3, #36]	; 0x24
    6254:	687b      	ldr	r3, [r7, #4]
    6256:	2200      	movs	r2, #0
    6258:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    625a:	687b      	ldr	r3, [r7, #4]
    625c:	2200      	movs	r2, #0
    625e:	751a      	strb	r2, [r3, #20]
    6260:	687b      	ldr	r3, [r7, #4]
    6262:	2200      	movs	r2, #0
    6264:	755a      	strb	r2, [r3, #21]
    6266:	687b      	ldr	r3, [r7, #4]
    6268:	2200      	movs	r2, #0
    626a:	759a      	strb	r2, [r3, #22]
    626c:	687b      	ldr	r3, [r7, #4]
    626e:	2200      	movs	r2, #0
    6270:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    6272:	687b      	ldr	r3, [r7, #4]
    6274:	2200      	movs	r2, #0
    6276:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    6278:	687b      	ldr	r3, [r7, #4]
    627a:	2200      	movs	r2, #0
    627c:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    627e:	687b      	ldr	r3, [r7, #4]
    6280:	2200      	movs	r2, #0
    6282:	741a      	strb	r2, [r3, #16]
    6284:	687b      	ldr	r3, [r7, #4]
    6286:	2200      	movs	r2, #0
    6288:	745a      	strb	r2, [r3, #17]
    628a:	687b      	ldr	r3, [r7, #4]
    628c:	2200      	movs	r2, #0
    628e:	749a      	strb	r2, [r3, #18]
    6290:	687b      	ldr	r3, [r7, #4]
    6292:	2200      	movs	r2, #0
    6294:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    6296:	687b      	ldr	r3, [r7, #4]
    6298:	222c      	movs	r2, #44	; 0x2c
    629a:	2100      	movs	r1, #0
    629c:	5499      	strb	r1, [r3, r2]
    629e:	687b      	ldr	r3, [r7, #4]
    62a0:	222d      	movs	r2, #45	; 0x2d
    62a2:	2100      	movs	r1, #0
    62a4:	5499      	strb	r1, [r3, r2]
    62a6:	687b      	ldr	r3, [r7, #4]
    62a8:	222e      	movs	r2, #46	; 0x2e
    62aa:	2100      	movs	r1, #0
    62ac:	5499      	strb	r1, [r3, r2]
    62ae:	687b      	ldr	r3, [r7, #4]
    62b0:	222f      	movs	r2, #47	; 0x2f
    62b2:	2100      	movs	r1, #0
    62b4:	5499      	strb	r1, [r3, r2]
    62b6:	687b      	ldr	r3, [r7, #4]
    62b8:	2230      	movs	r2, #48	; 0x30
    62ba:	2100      	movs	r1, #0
    62bc:	5499      	strb	r1, [r3, r2]
    62be:	687b      	ldr	r3, [r7, #4]
    62c0:	2231      	movs	r2, #49	; 0x31
    62c2:	2100      	movs	r1, #0
    62c4:	5499      	strb	r1, [r3, r2]
    62c6:	687b      	ldr	r3, [r7, #4]
    62c8:	2232      	movs	r2, #50	; 0x32
    62ca:	2100      	movs	r1, #0
    62cc:	5499      	strb	r1, [r3, r2]
    62ce:	687b      	ldr	r3, [r7, #4]
    62d0:	2233      	movs	r2, #51	; 0x33
    62d2:	2100      	movs	r1, #0
    62d4:	5499      	strb	r1, [r3, r2]
    62d6:	687b      	ldr	r3, [r7, #4]
    62d8:	2234      	movs	r2, #52	; 0x34
    62da:	2100      	movs	r1, #0
    62dc:	5499      	strb	r1, [r3, r2]
    62de:	687b      	ldr	r3, [r7, #4]
    62e0:	2235      	movs	r2, #53	; 0x35
    62e2:	2100      	movs	r1, #0
    62e4:	5499      	strb	r1, [r3, r2]
    62e6:	687b      	ldr	r3, [r7, #4]
    62e8:	2236      	movs	r2, #54	; 0x36
    62ea:	2100      	movs	r1, #0
    62ec:	5499      	strb	r1, [r3, r2]
    62ee:	687b      	ldr	r3, [r7, #4]
    62f0:	2237      	movs	r2, #55	; 0x37
    62f2:	2100      	movs	r1, #0
    62f4:	5499      	strb	r1, [r3, r2]
    62f6:	687b      	ldr	r3, [r7, #4]
    62f8:	2238      	movs	r2, #56	; 0x38
    62fa:	2100      	movs	r1, #0
    62fc:	5499      	strb	r1, [r3, r2]
    62fe:	687b      	ldr	r3, [r7, #4]
    6300:	2239      	movs	r2, #57	; 0x39
    6302:	2100      	movs	r1, #0
    6304:	5499      	strb	r1, [r3, r2]
    6306:	687b      	ldr	r3, [r7, #4]
    6308:	223a      	movs	r2, #58	; 0x3a
    630a:	2100      	movs	r1, #0
    630c:	5499      	strb	r1, [r3, r2]
    630e:	687b      	ldr	r3, [r7, #4]
    6310:	223b      	movs	r2, #59	; 0x3b
    6312:	2100      	movs	r1, #0
    6314:	5499      	strb	r1, [r3, r2]
    6316:	687b      	ldr	r3, [r7, #4]
    6318:	223c      	movs	r2, #60	; 0x3c
    631a:	2100      	movs	r1, #0
    631c:	5499      	strb	r1, [r3, r2]
    631e:	687b      	ldr	r3, [r7, #4]
    6320:	223d      	movs	r2, #61	; 0x3d
    6322:	2100      	movs	r1, #0
    6324:	5499      	strb	r1, [r3, r2]
    6326:	687b      	ldr	r3, [r7, #4]
    6328:	223e      	movs	r2, #62	; 0x3e
    632a:	2100      	movs	r1, #0
    632c:	5499      	strb	r1, [r3, r2]
    632e:	687b      	ldr	r3, [r7, #4]
    6330:	223f      	movs	r2, #63	; 0x3f
    6332:	2100      	movs	r1, #0
    6334:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    6336:	687b      	ldr	r3, [r7, #4]
    6338:	2240      	movs	r2, #64	; 0x40
    633a:	2100      	movs	r1, #0
    633c:	5499      	strb	r1, [r3, r2]
    633e:	687b      	ldr	r3, [r7, #4]
    6340:	2241      	movs	r2, #65	; 0x41
    6342:	2100      	movs	r1, #0
    6344:	5499      	strb	r1, [r3, r2]
    6346:	687b      	ldr	r3, [r7, #4]
    6348:	2242      	movs	r2, #66	; 0x42
    634a:	2100      	movs	r1, #0
    634c:	5499      	strb	r1, [r3, r2]
    634e:	687b      	ldr	r3, [r7, #4]
    6350:	2243      	movs	r2, #67	; 0x43
    6352:	2100      	movs	r1, #0
    6354:	5499      	strb	r1, [r3, r2]
    6356:	687b      	ldr	r3, [r7, #4]
    6358:	2244      	movs	r2, #68	; 0x44
    635a:	2100      	movs	r1, #0
    635c:	5499      	strb	r1, [r3, r2]
    635e:	687b      	ldr	r3, [r7, #4]
    6360:	2245      	movs	r2, #69	; 0x45
    6362:	2100      	movs	r1, #0
    6364:	5499      	strb	r1, [r3, r2]
    6366:	687b      	ldr	r3, [r7, #4]
    6368:	2246      	movs	r2, #70	; 0x46
    636a:	2100      	movs	r1, #0
    636c:	5499      	strb	r1, [r3, r2]
    636e:	687b      	ldr	r3, [r7, #4]
    6370:	2247      	movs	r2, #71	; 0x47
    6372:	2100      	movs	r1, #0
    6374:	5499      	strb	r1, [r3, r2]
    6376:	687b      	ldr	r3, [r7, #4]
    6378:	2248      	movs	r2, #72	; 0x48
    637a:	2100      	movs	r1, #0
    637c:	5499      	strb	r1, [r3, r2]
    637e:	687b      	ldr	r3, [r7, #4]
    6380:	2249      	movs	r2, #73	; 0x49
    6382:	2100      	movs	r1, #0
    6384:	5499      	strb	r1, [r3, r2]
    6386:	687b      	ldr	r3, [r7, #4]
    6388:	224a      	movs	r2, #74	; 0x4a
    638a:	2100      	movs	r1, #0
    638c:	5499      	strb	r1, [r3, r2]
    638e:	687b      	ldr	r3, [r7, #4]
    6390:	224b      	movs	r2, #75	; 0x4b
    6392:	2100      	movs	r1, #0
    6394:	5499      	strb	r1, [r3, r2]
    6396:	687b      	ldr	r3, [r7, #4]
    6398:	224c      	movs	r2, #76	; 0x4c
    639a:	2100      	movs	r1, #0
    639c:	5499      	strb	r1, [r3, r2]
    639e:	687b      	ldr	r3, [r7, #4]
    63a0:	224d      	movs	r2, #77	; 0x4d
    63a2:	2100      	movs	r1, #0
    63a4:	5499      	strb	r1, [r3, r2]
    63a6:	687b      	ldr	r3, [r7, #4]
    63a8:	224e      	movs	r2, #78	; 0x4e
    63aa:	2100      	movs	r1, #0
    63ac:	5499      	strb	r1, [r3, r2]
    63ae:	687b      	ldr	r3, [r7, #4]
    63b0:	224f      	movs	r2, #79	; 0x4f
    63b2:	2100      	movs	r1, #0
    63b4:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    63b6:	687b      	ldr	r3, [r7, #4]
    63b8:	2250      	movs	r2, #80	; 0x50
    63ba:	2100      	movs	r1, #0
    63bc:	5499      	strb	r1, [r3, r2]
    63be:	687b      	ldr	r3, [r7, #4]
    63c0:	2251      	movs	r2, #81	; 0x51
    63c2:	2100      	movs	r1, #0
    63c4:	5499      	strb	r1, [r3, r2]
    63c6:	687b      	ldr	r3, [r7, #4]
    63c8:	2252      	movs	r2, #82	; 0x52
    63ca:	2100      	movs	r1, #0
    63cc:	5499      	strb	r1, [r3, r2]
    63ce:	687b      	ldr	r3, [r7, #4]
    63d0:	2253      	movs	r2, #83	; 0x53
    63d2:	2100      	movs	r1, #0
    63d4:	5499      	strb	r1, [r3, r2]
    63d6:	687b      	ldr	r3, [r7, #4]
    63d8:	2254      	movs	r2, #84	; 0x54
    63da:	2100      	movs	r1, #0
    63dc:	5499      	strb	r1, [r3, r2]
    63de:	687b      	ldr	r3, [r7, #4]
    63e0:	2255      	movs	r2, #85	; 0x55
    63e2:	2100      	movs	r1, #0
    63e4:	5499      	strb	r1, [r3, r2]
    63e6:	687b      	ldr	r3, [r7, #4]
    63e8:	2256      	movs	r2, #86	; 0x56
    63ea:	2100      	movs	r1, #0
    63ec:	5499      	strb	r1, [r3, r2]
    63ee:	687b      	ldr	r3, [r7, #4]
    63f0:	2257      	movs	r2, #87	; 0x57
    63f2:	2100      	movs	r1, #0
    63f4:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    63f6:	687b      	ldr	r3, [r7, #4]
    63f8:	2298      	movs	r2, #152	; 0x98
    63fa:	2100      	movs	r1, #0
    63fc:	5499      	strb	r1, [r3, r2]
    63fe:	687b      	ldr	r3, [r7, #4]
    6400:	2200      	movs	r2, #0
    6402:	659a      	str	r2, [r3, #88]	; 0x58
    6404:	687b      	ldr	r3, [r7, #4]
    6406:	2200      	movs	r2, #0
    6408:	679a      	str	r2, [r3, #120]	; 0x78
    640a:	687b      	ldr	r3, [r7, #4]
    640c:	2299      	movs	r2, #153	; 0x99
    640e:	2100      	movs	r1, #0
    6410:	5499      	strb	r1, [r3, r2]
    6412:	687b      	ldr	r3, [r7, #4]
    6414:	2200      	movs	r2, #0
    6416:	65da      	str	r2, [r3, #92]	; 0x5c
    6418:	687b      	ldr	r3, [r7, #4]
    641a:	2200      	movs	r2, #0
    641c:	67da      	str	r2, [r3, #124]	; 0x7c
    641e:	687b      	ldr	r3, [r7, #4]
    6420:	229a      	movs	r2, #154	; 0x9a
    6422:	2100      	movs	r1, #0
    6424:	5499      	strb	r1, [r3, r2]
    6426:	687b      	ldr	r3, [r7, #4]
    6428:	2200      	movs	r2, #0
    642a:	661a      	str	r2, [r3, #96]	; 0x60
    642c:	687b      	ldr	r3, [r7, #4]
    642e:	2280      	movs	r2, #128	; 0x80
    6430:	2100      	movs	r1, #0
    6432:	5099      	str	r1, [r3, r2]
    6434:	687b      	ldr	r3, [r7, #4]
    6436:	229b      	movs	r2, #155	; 0x9b
    6438:	2100      	movs	r1, #0
    643a:	5499      	strb	r1, [r3, r2]
    643c:	687b      	ldr	r3, [r7, #4]
    643e:	2200      	movs	r2, #0
    6440:	665a      	str	r2, [r3, #100]	; 0x64
    6442:	687b      	ldr	r3, [r7, #4]
    6444:	2284      	movs	r2, #132	; 0x84
    6446:	2100      	movs	r1, #0
    6448:	5099      	str	r1, [r3, r2]
    644a:	687b      	ldr	r3, [r7, #4]
    644c:	229c      	movs	r2, #156	; 0x9c
    644e:	2100      	movs	r1, #0
    6450:	5499      	strb	r1, [r3, r2]
    6452:	687b      	ldr	r3, [r7, #4]
    6454:	2200      	movs	r2, #0
    6456:	669a      	str	r2, [r3, #104]	; 0x68
    6458:	687b      	ldr	r3, [r7, #4]
    645a:	2288      	movs	r2, #136	; 0x88
    645c:	2100      	movs	r1, #0
    645e:	5099      	str	r1, [r3, r2]
    6460:	687b      	ldr	r3, [r7, #4]
    6462:	229d      	movs	r2, #157	; 0x9d
    6464:	2100      	movs	r1, #0
    6466:	5499      	strb	r1, [r3, r2]
    6468:	687b      	ldr	r3, [r7, #4]
    646a:	2200      	movs	r2, #0
    646c:	66da      	str	r2, [r3, #108]	; 0x6c
    646e:	687b      	ldr	r3, [r7, #4]
    6470:	228c      	movs	r2, #140	; 0x8c
    6472:	2100      	movs	r1, #0
    6474:	5099      	str	r1, [r3, r2]
    6476:	687b      	ldr	r3, [r7, #4]
    6478:	229e      	movs	r2, #158	; 0x9e
    647a:	2100      	movs	r1, #0
    647c:	5499      	strb	r1, [r3, r2]
    647e:	687b      	ldr	r3, [r7, #4]
    6480:	2200      	movs	r2, #0
    6482:	671a      	str	r2, [r3, #112]	; 0x70
    6484:	687b      	ldr	r3, [r7, #4]
    6486:	2290      	movs	r2, #144	; 0x90
    6488:	2100      	movs	r1, #0
    648a:	5099      	str	r1, [r3, r2]
    648c:	687b      	ldr	r3, [r7, #4]
    648e:	229f      	movs	r2, #159	; 0x9f
    6490:	2100      	movs	r1, #0
    6492:	5499      	strb	r1, [r3, r2]
    6494:	687b      	ldr	r3, [r7, #4]
    6496:	2200      	movs	r2, #0
    6498:	675a      	str	r2, [r3, #116]	; 0x74
    649a:	687b      	ldr	r3, [r7, #4]
    649c:	2294      	movs	r2, #148	; 0x94
    649e:	2100      	movs	r1, #0
    64a0:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    64a2:	687b      	ldr	r3, [r7, #4]
    64a4:	22a0      	movs	r2, #160	; 0xa0
    64a6:	2101      	movs	r1, #1
    64a8:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    64aa:	687b      	ldr	r3, [r7, #4]
    64ac:	22a1      	movs	r2, #161	; 0xa1
    64ae:	2100      	movs	r1, #0
    64b0:	5499      	strb	r1, [r3, r2]
}
    64b2:	46c0      	nop			; (mov r8, r8)
    64b4:	46bd      	mov	sp, r7
    64b6:	b005      	add	sp, #20
    64b8:	bd90      	pop	{r4, r7, pc}
    64ba:	46c0      	nop			; (mov r8, r8)
    64bc:	000061b9 	.word	0x000061b9
    64c0:	00010608 	.word	0x00010608

000064c4 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    64c4:	b580      	push	{r7, lr}
    64c6:	b086      	sub	sp, #24
    64c8:	af00      	add	r7, sp, #0
    64ca:	60b9      	str	r1, [r7, #8]
    64cc:	607a      	str	r2, [r7, #4]
    64ce:	230f      	movs	r3, #15
    64d0:	18fb      	adds	r3, r7, r3
    64d2:	1c02      	adds	r2, r0, #0
    64d4:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    64d6:	2300      	movs	r3, #0
    64d8:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    64da:	2300      	movs	r3, #0
    64dc:	613b      	str	r3, [r7, #16]
    64de:	e01d      	b.n	651c <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    64e0:	68ba      	ldr	r2, [r7, #8]
    64e2:	693b      	ldr	r3, [r7, #16]
    64e4:	18d3      	adds	r3, r2, r3
    64e6:	3310      	adds	r3, #16
    64e8:	781b      	ldrb	r3, [r3, #0]
    64ea:	2b01      	cmp	r3, #1
    64ec:	d113      	bne.n	6516 <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    64ee:	230f      	movs	r3, #15
    64f0:	18fb      	adds	r3, r7, r3
    64f2:	781b      	ldrb	r3, [r3, #0]
    64f4:	4a1b      	ldr	r2, [pc, #108]	; (6564 <_tcc_build_ctrla+0xa0>)
    64f6:	5cd3      	ldrb	r3, [r2, r3]
    64f8:	001a      	movs	r2, r3
    64fa:	693b      	ldr	r3, [r7, #16]
    64fc:	429a      	cmp	r2, r3
    64fe:	da01      	bge.n	6504 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    6500:	2317      	movs	r3, #23
    6502:	e02a      	b.n	655a <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    6504:	2380      	movs	r3, #128	; 0x80
    6506:	045a      	lsls	r2, r3, #17
    6508:	693b      	ldr	r3, [r7, #16]
    650a:	409a      	lsls	r2, r3
    650c:	0013      	movs	r3, r2
    650e:	001a      	movs	r2, r3
    6510:	697b      	ldr	r3, [r7, #20]
    6512:	4313      	orrs	r3, r2
    6514:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    6516:	693b      	ldr	r3, [r7, #16]
    6518:	3301      	adds	r3, #1
    651a:	613b      	str	r3, [r7, #16]
    651c:	693b      	ldr	r3, [r7, #16]
    651e:	2b03      	cmp	r3, #3
    6520:	ddde      	ble.n	64e0 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
    6522:	68bb      	ldr	r3, [r7, #8]
    6524:	22a1      	movs	r2, #161	; 0xa1
    6526:	5c9b      	ldrb	r3, [r3, r2]
    6528:	2b00      	cmp	r3, #0
    652a:	d004      	beq.n	6536 <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    652c:	697b      	ldr	r3, [r7, #20]
    652e:	2280      	movs	r2, #128	; 0x80
    6530:	0112      	lsls	r2, r2, #4
    6532:	4313      	orrs	r3, r2
    6534:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    6536:	68bb      	ldr	r3, [r7, #8]
    6538:	7b1b      	ldrb	r3, [r3, #12]
    653a:	031b      	lsls	r3, r3, #12
    653c:	001a      	movs	r2, r3
    653e:	697b      	ldr	r3, [r7, #20]
    6540:	4313      	orrs	r3, r2
    6542:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    6544:	68bb      	ldr	r3, [r7, #8]
    6546:	7adb      	ldrb	r3, [r3, #11]
    6548:	021b      	lsls	r3, r3, #8
    654a:	001a      	movs	r2, r3
    654c:	697b      	ldr	r3, [r7, #20]
    654e:	4313      	orrs	r3, r2
    6550:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    6552:	687b      	ldr	r3, [r7, #4]
    6554:	697a      	ldr	r2, [r7, #20]
    6556:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    6558:	2300      	movs	r3, #0
}
    655a:	0018      	movs	r0, r3
    655c:	46bd      	mov	sp, r7
    655e:	b006      	add	sp, #24
    6560:	bd80      	pop	{r7, pc}
    6562:	46c0      	nop			; (mov r8, r8)
    6564:	00010614 	.word	0x00010614

00006568 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    6568:	b580      	push	{r7, lr}
    656a:	b086      	sub	sp, #24
    656c:	af00      	add	r7, sp, #0
    656e:	60b9      	str	r1, [r7, #8]
    6570:	607a      	str	r2, [r7, #4]
    6572:	230f      	movs	r3, #15
    6574:	18fb      	adds	r3, r7, r3
    6576:	1c02      	adds	r2, r0, #0
    6578:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    657a:	2317      	movs	r3, #23
    657c:	18fb      	adds	r3, r7, r3
    657e:	2200      	movs	r2, #0
    6580:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    6582:	68bb      	ldr	r3, [r7, #8]
    6584:	7a1b      	ldrb	r3, [r3, #8]
    6586:	2b00      	cmp	r3, #0
    6588:	d007      	beq.n	659a <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    658a:	2317      	movs	r3, #23
    658c:	18fb      	adds	r3, r7, r3
    658e:	2217      	movs	r2, #23
    6590:	18ba      	adds	r2, r7, r2
    6592:	7812      	ldrb	r2, [r2, #0]
    6594:	2104      	movs	r1, #4
    6596:	430a      	orrs	r2, r1
    6598:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    659a:	68bb      	ldr	r3, [r7, #8]
    659c:	7a5b      	ldrb	r3, [r3, #9]
    659e:	2b01      	cmp	r3, #1
    65a0:	d107      	bne.n	65b2 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    65a2:	2317      	movs	r3, #23
    65a4:	18fb      	adds	r3, r7, r3
    65a6:	2217      	movs	r2, #23
    65a8:	18ba      	adds	r2, r7, r2
    65aa:	7812      	ldrb	r2, [r2, #0]
    65ac:	2101      	movs	r1, #1
    65ae:	430a      	orrs	r2, r1
    65b0:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    65b2:	687b      	ldr	r3, [r7, #4]
    65b4:	2217      	movs	r2, #23
    65b6:	18ba      	adds	r2, r7, r2
    65b8:	7812      	ldrb	r2, [r2, #0]
    65ba:	701a      	strb	r2, [r3, #0]
}
    65bc:	46c0      	nop			; (mov r8, r8)
    65be:	46bd      	mov	sp, r7
    65c0:	b006      	add	sp, #24
    65c2:	bd80      	pop	{r7, pc}

000065c4 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    65c4:	b580      	push	{r7, lr}
    65c6:	b088      	sub	sp, #32
    65c8:	af00      	add	r7, sp, #0
    65ca:	60b9      	str	r1, [r7, #8]
    65cc:	607a      	str	r2, [r7, #4]
    65ce:	230f      	movs	r3, #15
    65d0:	18fb      	adds	r3, r7, r3
    65d2:	1c02      	adds	r2, r0, #0
    65d4:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    65d6:	230f      	movs	r3, #15
    65d8:	18fb      	adds	r3, r7, r3
    65da:	781a      	ldrb	r2, [r3, #0]
    65dc:	231b      	movs	r3, #27
    65de:	18fb      	adds	r3, r7, r3
    65e0:	493e      	ldr	r1, [pc, #248]	; (66dc <_tcc_build_faults+0x118>)
    65e2:	5c8a      	ldrb	r2, [r1, r2]
    65e4:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    65e6:	2300      	movs	r3, #0
    65e8:	61fb      	str	r3, [r7, #28]
    65ea:	e06e      	b.n	66ca <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    65ec:	69fa      	ldr	r2, [r7, #28]
    65ee:	0013      	movs	r3, r2
    65f0:	009b      	lsls	r3, r3, #2
    65f2:	189b      	adds	r3, r3, r2
    65f4:	005b      	lsls	r3, r3, #1
    65f6:	3328      	adds	r3, #40	; 0x28
    65f8:	68ba      	ldr	r2, [r7, #8]
    65fa:	18d3      	adds	r3, r2, r3
    65fc:	3304      	adds	r3, #4
    65fe:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    6600:	697b      	ldr	r3, [r7, #20]
    6602:	7a5b      	ldrb	r3, [r3, #9]
    6604:	221b      	movs	r2, #27
    6606:	18ba      	adds	r2, r7, r2
    6608:	7812      	ldrb	r2, [r2, #0]
    660a:	429a      	cmp	r2, r3
    660c:	d801      	bhi.n	6612 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    660e:	2317      	movs	r3, #23
    6610:	e05f      	b.n	66d2 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    6612:	697b      	ldr	r3, [r7, #20]
    6614:	781b      	ldrb	r3, [r3, #0]
    6616:	2b0f      	cmp	r3, #15
    6618:	d901      	bls.n	661e <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    661a:	2317      	movs	r3, #23
    661c:	e059      	b.n	66d2 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    661e:	697b      	ldr	r3, [r7, #20]
    6620:	781b      	ldrb	r3, [r3, #0]
    6622:	061b      	lsls	r3, r3, #24
    6624:	001a      	movs	r2, r3
    6626:	23f0      	movs	r3, #240	; 0xf0
    6628:	051b      	lsls	r3, r3, #20
    662a:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    662c:	697b      	ldr	r3, [r7, #20]
    662e:	785b      	ldrb	r3, [r3, #1]
    6630:	041b      	lsls	r3, r3, #16
    6632:	0019      	movs	r1, r3
    6634:	23ff      	movs	r3, #255	; 0xff
    6636:	041b      	lsls	r3, r3, #16
    6638:	400b      	ands	r3, r1
    663a:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    663c:	697b      	ldr	r3, [r7, #20]
    663e:	789b      	ldrb	r3, [r3, #2]
    6640:	2b00      	cmp	r3, #0
    6642:	d001      	beq.n	6648 <_tcc_build_faults+0x84>
    6644:	2380      	movs	r3, #128	; 0x80
    6646:	e000      	b.n	664a <_tcc_build_faults+0x86>
    6648:	2300      	movs	r3, #0
    664a:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    664c:	697b      	ldr	r3, [r7, #20]
    664e:	78db      	ldrb	r3, [r3, #3]
    6650:	2b00      	cmp	r3, #0
    6652:	d001      	beq.n	6658 <_tcc_build_faults+0x94>
    6654:	2308      	movs	r3, #8
    6656:	e000      	b.n	665a <_tcc_build_faults+0x96>
    6658:	2300      	movs	r3, #0
    665a:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    665c:	697b      	ldr	r3, [r7, #20]
    665e:	791b      	ldrb	r3, [r3, #4]
    6660:	2b00      	cmp	r3, #0
    6662:	d001      	beq.n	6668 <_tcc_build_faults+0xa4>
    6664:	2310      	movs	r3, #16
    6666:	e000      	b.n	666a <_tcc_build_faults+0xa6>
    6668:	2300      	movs	r3, #0
    666a:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    666c:	697b      	ldr	r3, [r7, #20]
    666e:	795b      	ldrb	r3, [r3, #5]
    6670:	0019      	movs	r1, r3
    6672:	2303      	movs	r3, #3
    6674:	400b      	ands	r3, r1
    6676:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    6678:	697b      	ldr	r3, [r7, #20]
    667a:	799b      	ldrb	r3, [r3, #6]
    667c:	015b      	lsls	r3, r3, #5
    667e:	0019      	movs	r1, r3
    6680:	2360      	movs	r3, #96	; 0x60
    6682:	400b      	ands	r3, r1
    6684:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    6686:	697b      	ldr	r3, [r7, #20]
    6688:	79db      	ldrb	r3, [r3, #7]
    668a:	021b      	lsls	r3, r3, #8
    668c:	0019      	movs	r1, r3
    668e:	23c0      	movs	r3, #192	; 0xc0
    6690:	009b      	lsls	r3, r3, #2
    6692:	400b      	ands	r3, r1
    6694:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    6696:	697b      	ldr	r3, [r7, #20]
    6698:	7a1b      	ldrb	r3, [r3, #8]
    669a:	031b      	lsls	r3, r3, #12
    669c:	0019      	movs	r1, r3
    669e:	23e0      	movs	r3, #224	; 0xe0
    66a0:	01db      	lsls	r3, r3, #7
    66a2:	400b      	ands	r3, r1
    66a4:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    66a6:	697b      	ldr	r3, [r7, #20]
    66a8:	7a5b      	ldrb	r3, [r3, #9]
    66aa:	029b      	lsls	r3, r3, #10
    66ac:	0019      	movs	r1, r3
    66ae:	23c0      	movs	r3, #192	; 0xc0
    66b0:	011b      	lsls	r3, r3, #4
    66b2:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    66b4:	4313      	orrs	r3, r2
    66b6:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
    66b8:	69fb      	ldr	r3, [r7, #28]
    66ba:	009b      	lsls	r3, r3, #2
    66bc:	687a      	ldr	r2, [r7, #4]
    66be:	18d3      	adds	r3, r2, r3
    66c0:	693a      	ldr	r2, [r7, #16]
    66c2:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    66c4:	69fb      	ldr	r3, [r7, #28]
    66c6:	3301      	adds	r3, #1
    66c8:	61fb      	str	r3, [r7, #28]
    66ca:	69fb      	ldr	r3, [r7, #28]
    66cc:	2b01      	cmp	r3, #1
    66ce:	dd8d      	ble.n	65ec <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
    66d0:	2300      	movs	r3, #0
}
    66d2:	0018      	movs	r0, r3
    66d4:	46bd      	mov	sp, r7
    66d6:	b008      	add	sp, #32
    66d8:	bd80      	pop	{r7, pc}
    66da:	46c0      	nop			; (mov r8, r8)
    66dc:	00010614 	.word	0x00010614

000066e0 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    66e0:	b580      	push	{r7, lr}
    66e2:	b088      	sub	sp, #32
    66e4:	af00      	add	r7, sp, #0
    66e6:	60b9      	str	r1, [r7, #8]
    66e8:	607a      	str	r2, [r7, #4]
    66ea:	230f      	movs	r3, #15
    66ec:	18fb      	adds	r3, r7, r3
    66ee:	1c02      	adds	r2, r0, #0
    66f0:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    66f2:	230f      	movs	r3, #15
    66f4:	18fb      	adds	r3, r7, r3
    66f6:	781a      	ldrb	r2, [r3, #0]
    66f8:	2317      	movs	r3, #23
    66fa:	18fb      	adds	r3, r7, r3
    66fc:	492d      	ldr	r1, [pc, #180]	; (67b4 <_tcc_build_drvctrl+0xd4>)
    66fe:	5c8a      	ldrb	r2, [r1, r2]
    6700:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    6702:	2300      	movs	r3, #0
    6704:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    6706:	2300      	movs	r3, #0
    6708:	61fb      	str	r3, [r7, #28]
    670a:	e048      	b.n	679e <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    670c:	68ba      	ldr	r2, [r7, #8]
    670e:	2150      	movs	r1, #80	; 0x50
    6710:	69fb      	ldr	r3, [r7, #28]
    6712:	18d3      	adds	r3, r2, r3
    6714:	185b      	adds	r3, r3, r1
    6716:	781b      	ldrb	r3, [r3, #0]
    6718:	2b00      	cmp	r3, #0
    671a:	d010      	beq.n	673e <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    671c:	2317      	movs	r3, #23
    671e:	18fb      	adds	r3, r7, r3
    6720:	781a      	ldrb	r2, [r3, #0]
    6722:	69fb      	ldr	r3, [r7, #28]
    6724:	429a      	cmp	r2, r3
    6726:	d801      	bhi.n	672c <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    6728:	2317      	movs	r3, #23
    672a:	e03f      	b.n	67ac <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    672c:	2380      	movs	r3, #128	; 0x80
    672e:	025a      	lsls	r2, r3, #9
    6730:	69fb      	ldr	r3, [r7, #28]
    6732:	409a      	lsls	r2, r3
    6734:	0013      	movs	r3, r2
    6736:	001a      	movs	r2, r3
    6738:	69bb      	ldr	r3, [r7, #24]
    673a:	4313      	orrs	r3, r2
    673c:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    673e:	68ba      	ldr	r2, [r7, #8]
    6740:	69fb      	ldr	r3, [r7, #28]
    6742:	331c      	adds	r3, #28
    6744:	005b      	lsls	r3, r3, #1
    6746:	18d3      	adds	r3, r2, r3
    6748:	3309      	adds	r3, #9
    674a:	781b      	ldrb	r3, [r3, #0]
    674c:	2b00      	cmp	r3, #0
    674e:	d023      	beq.n	6798 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    6750:	2317      	movs	r3, #23
    6752:	18fb      	adds	r3, r7, r3
    6754:	781a      	ldrb	r2, [r3, #0]
    6756:	69fb      	ldr	r3, [r7, #28]
    6758:	429a      	cmp	r2, r3
    675a:	d801      	bhi.n	6760 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    675c:	2317      	movs	r3, #23
    675e:	e025      	b.n	67ac <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    6760:	68ba      	ldr	r2, [r7, #8]
    6762:	69fb      	ldr	r3, [r7, #28]
    6764:	331c      	adds	r3, #28
    6766:	005b      	lsls	r3, r3, #1
    6768:	18d3      	adds	r3, r2, r3
    676a:	3309      	adds	r3, #9
    676c:	781b      	ldrb	r3, [r3, #0]
    676e:	2b02      	cmp	r3, #2
    6770:	d10a      	bne.n	6788 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    6772:	2302      	movs	r3, #2
    6774:	33ff      	adds	r3, #255	; 0xff
    6776:	001a      	movs	r2, r3
    6778:	69fb      	ldr	r3, [r7, #28]
    677a:	409a      	lsls	r2, r3
    677c:	0013      	movs	r3, r2
    677e:	001a      	movs	r2, r3
    6780:	69bb      	ldr	r3, [r7, #24]
    6782:	4313      	orrs	r3, r2
    6784:	61bb      	str	r3, [r7, #24]
    6786:	e007      	b.n	6798 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    6788:	2201      	movs	r2, #1
    678a:	69fb      	ldr	r3, [r7, #28]
    678c:	409a      	lsls	r2, r3
    678e:	0013      	movs	r3, r2
    6790:	001a      	movs	r2, r3
    6792:	69bb      	ldr	r3, [r7, #24]
    6794:	4313      	orrs	r3, r2
    6796:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    6798:	69fb      	ldr	r3, [r7, #28]
    679a:	3301      	adds	r3, #1
    679c:	61fb      	str	r3, [r7, #28]
    679e:	69fb      	ldr	r3, [r7, #28]
    67a0:	2b07      	cmp	r3, #7
    67a2:	d9b3      	bls.n	670c <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
    67a4:	687b      	ldr	r3, [r7, #4]
    67a6:	69ba      	ldr	r2, [r7, #24]
    67a8:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    67aa:	2300      	movs	r3, #0
}
    67ac:	0018      	movs	r0, r3
    67ae:	46bd      	mov	sp, r7
    67b0:	b008      	add	sp, #32
    67b2:	bd80      	pop	{r7, pc}
    67b4:	00010618 	.word	0x00010618

000067b8 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    67b8:	b580      	push	{r7, lr}
    67ba:	b088      	sub	sp, #32
    67bc:	af00      	add	r7, sp, #0
    67be:	60b9      	str	r1, [r7, #8]
    67c0:	607a      	str	r2, [r7, #4]
    67c2:	230f      	movs	r3, #15
    67c4:	18fb      	adds	r3, r7, r3
    67c6:	1c02      	adds	r2, r0, #0
    67c8:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    67ca:	230f      	movs	r3, #15
    67cc:	18fb      	adds	r3, r7, r3
    67ce:	781a      	ldrb	r2, [r3, #0]
    67d0:	2317      	movs	r3, #23
    67d2:	18fb      	adds	r3, r7, r3
    67d4:	491d      	ldr	r1, [pc, #116]	; (684c <_tcc_build_waves+0x94>)
    67d6:	5c8a      	ldrb	r2, [r1, r2]
    67d8:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    67da:	68bb      	ldr	r3, [r7, #8]
    67dc:	3310      	adds	r3, #16
    67de:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    67e0:	693b      	ldr	r3, [r7, #16]
    67e2:	7a5b      	ldrb	r3, [r3, #9]
    67e4:	011b      	lsls	r3, r3, #4
    67e6:	001a      	movs	r2, r3
    67e8:	2330      	movs	r3, #48	; 0x30
    67ea:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    67ec:	693b      	ldr	r3, [r7, #16]
    67ee:	7a1b      	ldrb	r3, [r3, #8]
    67f0:	0019      	movs	r1, r3
    67f2:	2307      	movs	r3, #7
    67f4:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    67f6:	4313      	orrs	r3, r2
    67f8:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    67fa:	2300      	movs	r3, #0
    67fc:	61fb      	str	r3, [r7, #28]
    67fe:	e01a      	b.n	6836 <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    6800:	693a      	ldr	r2, [r7, #16]
    6802:	69fb      	ldr	r3, [r7, #28]
    6804:	18d3      	adds	r3, r2, r3
    6806:	3304      	adds	r3, #4
    6808:	781b      	ldrb	r3, [r3, #0]
    680a:	2b00      	cmp	r3, #0
    680c:	d010      	beq.n	6830 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    680e:	2317      	movs	r3, #23
    6810:	18fb      	adds	r3, r7, r3
    6812:	781a      	ldrb	r2, [r3, #0]
    6814:	69fb      	ldr	r3, [r7, #28]
    6816:	429a      	cmp	r2, r3
    6818:	dc01      	bgt.n	681e <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    681a:	2317      	movs	r3, #23
    681c:	e012      	b.n	6844 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    681e:	2380      	movs	r3, #128	; 0x80
    6820:	025a      	lsls	r2, r3, #9
    6822:	69fb      	ldr	r3, [r7, #28]
    6824:	409a      	lsls	r2, r3
    6826:	0013      	movs	r3, r2
    6828:	001a      	movs	r2, r3
    682a:	69bb      	ldr	r3, [r7, #24]
    682c:	4313      	orrs	r3, r2
    682e:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    6830:	69fb      	ldr	r3, [r7, #28]
    6832:	3301      	adds	r3, #1
    6834:	61fb      	str	r3, [r7, #28]
    6836:	69fb      	ldr	r3, [r7, #28]
    6838:	2b03      	cmp	r3, #3
    683a:	dde1      	ble.n	6800 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
    683c:	687b      	ldr	r3, [r7, #4]
    683e:	69ba      	ldr	r2, [r7, #24]
    6840:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    6842:	2300      	movs	r3, #0
}
    6844:	0018      	movs	r0, r3
    6846:	46bd      	mov	sp, r7
    6848:	b008      	add	sp, #32
    684a:	bd80      	pop	{r7, pc}
    684c:	00010614 	.word	0x00010614

00006850 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    6850:	b590      	push	{r4, r7, lr}
    6852:	b091      	sub	sp, #68	; 0x44
    6854:	af00      	add	r7, sp, #0
    6856:	60f8      	str	r0, [r7, #12]
    6858:	60b9      	str	r1, [r7, #8]
    685a:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    685c:	233b      	movs	r3, #59	; 0x3b
    685e:	18fc      	adds	r4, r7, r3
    6860:	68bb      	ldr	r3, [r7, #8]
    6862:	0018      	movs	r0, r3
    6864:	4bc4      	ldr	r3, [pc, #784]	; (6b78 <tcc_init+0x328>)
    6866:	4798      	blx	r3
    6868:	0003      	movs	r3, r0
    686a:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    686c:	233b      	movs	r3, #59	; 0x3b
    686e:	18fb      	adds	r3, r7, r3
    6870:	781a      	ldrb	r2, [r3, #0]
    6872:	4bc2      	ldr	r3, [pc, #776]	; (6b7c <tcc_init+0x32c>)
    6874:	0092      	lsls	r2, r2, #2
    6876:	58d3      	ldr	r3, [r2, r3]
    6878:	0019      	movs	r1, r3
    687a:	2002      	movs	r0, #2
    687c:	4bc0      	ldr	r3, [pc, #768]	; (6b80 <tcc_init+0x330>)
    687e:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    6880:	68bb      	ldr	r3, [r7, #8]
    6882:	681b      	ldr	r3, [r3, #0]
    6884:	2202      	movs	r2, #2
    6886:	4013      	ands	r3, r2
    6888:	d001      	beq.n	688e <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    688a:	231c      	movs	r3, #28
    688c:	e1be      	b.n	6c0c <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    688e:	68bb      	ldr	r3, [r7, #8]
    6890:	681b      	ldr	r3, [r3, #0]
    6892:	2201      	movs	r2, #1
    6894:	4013      	ands	r3, r2
    6896:	d001      	beq.n	689c <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    6898:	231c      	movs	r3, #28
    689a:	e1b7      	b.n	6c0c <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    689c:	233b      	movs	r3, #59	; 0x3b
    689e:	18fb      	adds	r3, r7, r3
    68a0:	781a      	ldrb	r2, [r3, #0]
    68a2:	4bb8      	ldr	r3, [pc, #736]	; (6b84 <tcc_init+0x334>)
    68a4:	0092      	lsls	r2, r2, #2
    68a6:	58d3      	ldr	r3, [r2, r3]
    68a8:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    68aa:	687b      	ldr	r3, [r7, #4]
    68ac:	681a      	ldr	r2, [r3, #0]
    68ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    68b0:	429a      	cmp	r2, r3
    68b2:	d804      	bhi.n	68be <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    68b4:	687b      	ldr	r3, [r7, #4]
    68b6:	685a      	ldr	r2, [r3, #4]
    68b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    68ba:	429a      	cmp	r2, r3
    68bc:	d901      	bls.n	68c2 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    68be:	2317      	movs	r3, #23
    68c0:	e1a4      	b.n	6c0c <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    68c2:	2300      	movs	r3, #0
    68c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    68c6:	e00e      	b.n	68e6 <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    68c8:	687a      	ldr	r2, [r7, #4]
    68ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    68cc:	3306      	adds	r3, #6
    68ce:	009b      	lsls	r3, r3, #2
    68d0:	18d3      	adds	r3, r2, r3
    68d2:	3304      	adds	r3, #4
    68d4:	681a      	ldr	r2, [r3, #0]
    68d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    68d8:	429a      	cmp	r2, r3
    68da:	d901      	bls.n	68e0 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    68dc:	2317      	movs	r3, #23
    68de:	e195      	b.n	6c0c <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    68e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    68e2:	3301      	adds	r3, #1
    68e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    68e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    68e8:	2b03      	cmp	r3, #3
    68ea:	dded      	ble.n	68c8 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    68ec:	2300      	movs	r3, #0
    68ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    68f0:	e019      	b.n	6926 <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    68f2:	687a      	ldr	r2, [r7, #4]
    68f4:	2198      	movs	r1, #152	; 0x98
    68f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    68f8:	18d3      	adds	r3, r2, r3
    68fa:	185b      	adds	r3, r3, r1
    68fc:	781b      	ldrb	r3, [r3, #0]
    68fe:	2201      	movs	r2, #1
    6900:	4053      	eors	r3, r2
    6902:	b2db      	uxtb	r3, r3
    6904:	2b00      	cmp	r3, #0
    6906:	d10a      	bne.n	691e <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    6908:	233b      	movs	r3, #59	; 0x3b
    690a:	18fb      	adds	r3, r7, r3
    690c:	781b      	ldrb	r3, [r3, #0]
    690e:	4a9e      	ldr	r2, [pc, #632]	; (6b88 <tcc_init+0x338>)
    6910:	5cd3      	ldrb	r3, [r2, r3]
    6912:	001a      	movs	r2, r3
    6914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6916:	429a      	cmp	r2, r3
    6918:	dc02      	bgt.n	6920 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    691a:	2317      	movs	r3, #23
    691c:	e176      	b.n	6c0c <tcc_init+0x3bc>
			continue;
    691e:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    6920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6922:	3301      	adds	r3, #1
    6924:	63fb      	str	r3, [r7, #60]	; 0x3c
    6926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6928:	2b07      	cmp	r3, #7
    692a:	dde2      	ble.n	68f2 <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    692c:	2300      	movs	r3, #0
    692e:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    6930:	2333      	movs	r3, #51	; 0x33
    6932:	18fc      	adds	r4, r7, r3
    6934:	232c      	movs	r3, #44	; 0x2c
    6936:	18fa      	adds	r2, r7, r3
    6938:	6879      	ldr	r1, [r7, #4]
    693a:	233b      	movs	r3, #59	; 0x3b
    693c:	18fb      	adds	r3, r7, r3
    693e:	781b      	ldrb	r3, [r3, #0]
    6940:	0018      	movs	r0, r3
    6942:	4b92      	ldr	r3, [pc, #584]	; (6b8c <tcc_init+0x33c>)
    6944:	4798      	blx	r3
    6946:	0003      	movs	r3, r0
    6948:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    694a:	2333      	movs	r3, #51	; 0x33
    694c:	18fb      	adds	r3, r7, r3
    694e:	781b      	ldrb	r3, [r3, #0]
    6950:	2b00      	cmp	r3, #0
    6952:	d003      	beq.n	695c <tcc_init+0x10c>
		return status;
    6954:	2333      	movs	r3, #51	; 0x33
    6956:	18fb      	adds	r3, r7, r3
    6958:	781b      	ldrb	r3, [r3, #0]
    695a:	e157      	b.n	6c0c <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    695c:	232b      	movs	r3, #43	; 0x2b
    695e:	18fa      	adds	r2, r7, r3
    6960:	6879      	ldr	r1, [r7, #4]
    6962:	233b      	movs	r3, #59	; 0x3b
    6964:	18fb      	adds	r3, r7, r3
    6966:	781b      	ldrb	r3, [r3, #0]
    6968:	0018      	movs	r0, r3
    696a:	4b89      	ldr	r3, [pc, #548]	; (6b90 <tcc_init+0x340>)
    696c:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    696e:	2333      	movs	r3, #51	; 0x33
    6970:	18fc      	adds	r4, r7, r3
    6972:	2320      	movs	r3, #32
    6974:	18fa      	adds	r2, r7, r3
    6976:	6879      	ldr	r1, [r7, #4]
    6978:	233b      	movs	r3, #59	; 0x3b
    697a:	18fb      	adds	r3, r7, r3
    697c:	781b      	ldrb	r3, [r3, #0]
    697e:	0018      	movs	r0, r3
    6980:	4b84      	ldr	r3, [pc, #528]	; (6b94 <tcc_init+0x344>)
    6982:	4798      	blx	r3
    6984:	0003      	movs	r3, r0
    6986:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    6988:	2333      	movs	r3, #51	; 0x33
    698a:	18fb      	adds	r3, r7, r3
    698c:	781b      	ldrb	r3, [r3, #0]
    698e:	2b00      	cmp	r3, #0
    6990:	d003      	beq.n	699a <tcc_init+0x14a>
		return status;
    6992:	2333      	movs	r3, #51	; 0x33
    6994:	18fb      	adds	r3, r7, r3
    6996:	781b      	ldrb	r3, [r3, #0]
    6998:	e138      	b.n	6c0c <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    699a:	2300      	movs	r3, #0
    699c:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    699e:	2333      	movs	r3, #51	; 0x33
    69a0:	18fc      	adds	r4, r7, r3
    69a2:	231c      	movs	r3, #28
    69a4:	18fa      	adds	r2, r7, r3
    69a6:	6879      	ldr	r1, [r7, #4]
    69a8:	233b      	movs	r3, #59	; 0x3b
    69aa:	18fb      	adds	r3, r7, r3
    69ac:	781b      	ldrb	r3, [r3, #0]
    69ae:	0018      	movs	r0, r3
    69b0:	4b79      	ldr	r3, [pc, #484]	; (6b98 <tcc_init+0x348>)
    69b2:	4798      	blx	r3
    69b4:	0003      	movs	r3, r0
    69b6:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    69b8:	2333      	movs	r3, #51	; 0x33
    69ba:	18fb      	adds	r3, r7, r3
    69bc:	781b      	ldrb	r3, [r3, #0]
    69be:	2b00      	cmp	r3, #0
    69c0:	d003      	beq.n	69ca <tcc_init+0x17a>
		return status;
    69c2:	2333      	movs	r3, #51	; 0x33
    69c4:	18fb      	adds	r3, r7, r3
    69c6:	781b      	ldrb	r3, [r3, #0]
    69c8:	e120      	b.n	6c0c <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    69ca:	2333      	movs	r3, #51	; 0x33
    69cc:	18fc      	adds	r4, r7, r3
    69ce:	2318      	movs	r3, #24
    69d0:	18fa      	adds	r2, r7, r3
    69d2:	6879      	ldr	r1, [r7, #4]
    69d4:	233b      	movs	r3, #59	; 0x3b
    69d6:	18fb      	adds	r3, r7, r3
    69d8:	781b      	ldrb	r3, [r3, #0]
    69da:	0018      	movs	r0, r3
    69dc:	4b6f      	ldr	r3, [pc, #444]	; (6b9c <tcc_init+0x34c>)
    69de:	4798      	blx	r3
    69e0:	0003      	movs	r3, r0
    69e2:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    69e4:	2333      	movs	r3, #51	; 0x33
    69e6:	18fb      	adds	r3, r7, r3
    69e8:	781b      	ldrb	r3, [r3, #0]
    69ea:	2b00      	cmp	r3, #0
    69ec:	d003      	beq.n	69f6 <tcc_init+0x1a6>
		return status;
    69ee:	2333      	movs	r3, #51	; 0x33
    69f0:	18fb      	adds	r3, r7, r3
    69f2:	781b      	ldrb	r3, [r3, #0]
    69f4:	e10a      	b.n	6c0c <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    69f6:	2300      	movs	r3, #0
    69f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    69fa:	e009      	b.n	6a10 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
    69fc:	68fa      	ldr	r2, [r7, #12]
    69fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6a00:	009b      	lsls	r3, r3, #2
    6a02:	18d3      	adds	r3, r2, r3
    6a04:	3304      	adds	r3, #4
    6a06:	2200      	movs	r2, #0
    6a08:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    6a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6a0c:	3301      	adds	r3, #1
    6a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    6a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6a12:	2b0b      	cmp	r3, #11
    6a14:	ddf2      	ble.n	69fc <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
    6a16:	68fb      	ldr	r3, [r7, #12]
    6a18:	2200      	movs	r2, #0
    6a1a:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    6a1c:	68fb      	ldr	r3, [r7, #12]
    6a1e:	2200      	movs	r2, #0
    6a20:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    6a22:	233b      	movs	r3, #59	; 0x3b
    6a24:	18fb      	adds	r3, r7, r3
    6a26:	781a      	ldrb	r2, [r3, #0]
    6a28:	4b5d      	ldr	r3, [pc, #372]	; (6ba0 <tcc_init+0x350>)
    6a2a:	0092      	lsls	r2, r2, #2
    6a2c:	68f9      	ldr	r1, [r7, #12]
    6a2e:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    6a30:	68fb      	ldr	r3, [r7, #12]
    6a32:	68ba      	ldr	r2, [r7, #8]
    6a34:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    6a36:	687b      	ldr	r3, [r7, #4]
    6a38:	22a0      	movs	r2, #160	; 0xa0
    6a3a:	5c99      	ldrb	r1, [r3, r2]
    6a3c:	68fb      	ldr	r3, [r7, #12]
    6a3e:	223c      	movs	r2, #60	; 0x3c
    6a40:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    6a42:	2314      	movs	r3, #20
    6a44:	18fb      	adds	r3, r7, r3
    6a46:	0018      	movs	r0, r3
    6a48:	4b56      	ldr	r3, [pc, #344]	; (6ba4 <tcc_init+0x354>)
    6a4a:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    6a4c:	687b      	ldr	r3, [r7, #4]
    6a4e:	7a9a      	ldrb	r2, [r3, #10]
    6a50:	2314      	movs	r3, #20
    6a52:	18fb      	adds	r3, r7, r3
    6a54:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    6a56:	233b      	movs	r3, #59	; 0x3b
    6a58:	18fb      	adds	r3, r7, r3
    6a5a:	781b      	ldrb	r3, [r3, #0]
    6a5c:	4a52      	ldr	r2, [pc, #328]	; (6ba8 <tcc_init+0x358>)
    6a5e:	5cd3      	ldrb	r3, [r2, r3]
    6a60:	2214      	movs	r2, #20
    6a62:	18ba      	adds	r2, r7, r2
    6a64:	0011      	movs	r1, r2
    6a66:	0018      	movs	r0, r3
    6a68:	4b50      	ldr	r3, [pc, #320]	; (6bac <tcc_init+0x35c>)
    6a6a:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    6a6c:	233b      	movs	r3, #59	; 0x3b
    6a6e:	18fb      	adds	r3, r7, r3
    6a70:	781b      	ldrb	r3, [r3, #0]
    6a72:	4a4d      	ldr	r2, [pc, #308]	; (6ba8 <tcc_init+0x358>)
    6a74:	5cd3      	ldrb	r3, [r2, r3]
    6a76:	0018      	movs	r0, r3
    6a78:	4b4d      	ldr	r3, [pc, #308]	; (6bb0 <tcc_init+0x360>)
    6a7a:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    6a7c:	2300      	movs	r3, #0
    6a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    6a80:	e02d      	b.n	6ade <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
    6a82:	687a      	ldr	r2, [r7, #4]
    6a84:	2198      	movs	r1, #152	; 0x98
    6a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6a88:	18d3      	adds	r3, r2, r3
    6a8a:	185b      	adds	r3, r3, r1
    6a8c:	781b      	ldrb	r3, [r3, #0]
    6a8e:	2201      	movs	r2, #1
    6a90:	4053      	eors	r3, r2
    6a92:	b2db      	uxtb	r3, r3
    6a94:	2b00      	cmp	r3, #0
    6a96:	d11e      	bne.n	6ad6 <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    6a98:	2310      	movs	r3, #16
    6a9a:	18fb      	adds	r3, r7, r3
    6a9c:	0018      	movs	r0, r3
    6a9e:	4b45      	ldr	r3, [pc, #276]	; (6bb4 <tcc_init+0x364>)
    6aa0:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    6aa2:	687b      	ldr	r3, [r7, #4]
    6aa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6aa6:	321e      	adds	r2, #30
    6aa8:	0092      	lsls	r2, r2, #2
    6aaa:	58d3      	ldr	r3, [r2, r3]
    6aac:	b2da      	uxtb	r2, r3
    6aae:	2310      	movs	r3, #16
    6ab0:	18fb      	adds	r3, r7, r3
    6ab2:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    6ab4:	2310      	movs	r3, #16
    6ab6:	18fb      	adds	r3, r7, r3
    6ab8:	2201      	movs	r2, #1
    6aba:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    6abc:	687b      	ldr	r3, [r7, #4]
    6abe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6ac0:	3216      	adds	r2, #22
    6ac2:	0092      	lsls	r2, r2, #2
    6ac4:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
    6ac6:	b2db      	uxtb	r3, r3
    6ac8:	2210      	movs	r2, #16
    6aca:	18ba      	adds	r2, r7, r2
    6acc:	0011      	movs	r1, r2
    6ace:	0018      	movs	r0, r3
    6ad0:	4b39      	ldr	r3, [pc, #228]	; (6bb8 <tcc_init+0x368>)
    6ad2:	4798      	blx	r3
    6ad4:	e000      	b.n	6ad8 <tcc_init+0x288>
			continue;
    6ad6:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    6ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6ada:	3301      	adds	r3, #1
    6adc:	63fb      	str	r3, [r7, #60]	; 0x3c
    6ade:	233b      	movs	r3, #59	; 0x3b
    6ae0:	18fb      	adds	r3, r7, r3
    6ae2:	781b      	ldrb	r3, [r3, #0]
    6ae4:	4a28      	ldr	r2, [pc, #160]	; (6b88 <tcc_init+0x338>)
    6ae6:	5cd3      	ldrb	r3, [r2, r3]
    6ae8:	001a      	movs	r2, r3
    6aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6aec:	429a      	cmp	r2, r3
    6aee:	dcc8      	bgt.n	6a82 <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    6af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    6af2:	68bb      	ldr	r3, [r7, #8]
    6af4:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    6af6:	46c0      	nop			; (mov r8, r8)
    6af8:	68bb      	ldr	r3, [r7, #8]
    6afa:	689b      	ldr	r3, [r3, #8]
    6afc:	2204      	movs	r2, #4
    6afe:	4013      	ands	r3, r2
    6b00:	d1fa      	bne.n	6af8 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    6b02:	68bb      	ldr	r3, [r7, #8]
    6b04:	22ff      	movs	r2, #255	; 0xff
    6b06:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    6b08:	46c0      	nop			; (mov r8, r8)
    6b0a:	68bb      	ldr	r3, [r7, #8]
    6b0c:	689b      	ldr	r3, [r3, #8]
    6b0e:	2204      	movs	r2, #4
    6b10:	4013      	ands	r3, r2
    6b12:	d1fa      	bne.n	6b0a <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    6b14:	232b      	movs	r3, #43	; 0x2b
    6b16:	18fb      	adds	r3, r7, r3
    6b18:	781a      	ldrb	r2, [r3, #0]
    6b1a:	68bb      	ldr	r3, [r7, #8]
    6b1c:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    6b1e:	2320      	movs	r3, #32
    6b20:	18fb      	adds	r3, r7, r3
    6b22:	681a      	ldr	r2, [r3, #0]
    6b24:	68bb      	ldr	r3, [r7, #8]
    6b26:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    6b28:	2320      	movs	r3, #32
    6b2a:	18fb      	adds	r3, r7, r3
    6b2c:	685a      	ldr	r2, [r3, #4]
    6b2e:	68bb      	ldr	r3, [r7, #8]
    6b30:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    6b32:	69fa      	ldr	r2, [r7, #28]
    6b34:	68bb      	ldr	r3, [r7, #8]
    6b36:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    6b38:	46c0      	nop			; (mov r8, r8)
    6b3a:	68bb      	ldr	r3, [r7, #8]
    6b3c:	689b      	ldr	r3, [r3, #8]
    6b3e:	4a1f      	ldr	r2, [pc, #124]	; (6bbc <tcc_init+0x36c>)
    6b40:	4013      	ands	r3, r2
    6b42:	d1fa      	bne.n	6b3a <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    6b44:	69ba      	ldr	r2, [r7, #24]
    6b46:	68bb      	ldr	r3, [r7, #8]
    6b48:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    6b4a:	46c0      	nop			; (mov r8, r8)
    6b4c:	68bb      	ldr	r3, [r7, #8]
    6b4e:	689b      	ldr	r3, [r3, #8]
    6b50:	2210      	movs	r2, #16
    6b52:	4013      	ands	r3, r2
    6b54:	d1fa      	bne.n	6b4c <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    6b56:	687b      	ldr	r3, [r7, #4]
    6b58:	681a      	ldr	r2, [r3, #0]
    6b5a:	68bb      	ldr	r3, [r7, #8]
    6b5c:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    6b5e:	46c0      	nop			; (mov r8, r8)
    6b60:	68bb      	ldr	r3, [r7, #8]
    6b62:	689b      	ldr	r3, [r3, #8]
    6b64:	4a16      	ldr	r2, [pc, #88]	; (6bc0 <tcc_init+0x370>)
    6b66:	4013      	ands	r3, r2
    6b68:	d1fa      	bne.n	6b60 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    6b6a:	687b      	ldr	r3, [r7, #4]
    6b6c:	685a      	ldr	r2, [r3, #4]
    6b6e:	68bb      	ldr	r3, [r7, #8]
    6b70:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    6b72:	2300      	movs	r3, #0
    6b74:	63fb      	str	r3, [r7, #60]	; 0x3c
    6b76:	e03f      	b.n	6bf8 <tcc_init+0x3a8>
    6b78:	000061b9 	.word	0x000061b9
    6b7c:	000105fc 	.word	0x000105fc
    6b80:	00006135 	.word	0x00006135
    6b84:	00010608 	.word	0x00010608
    6b88:	00010618 	.word	0x00010618
    6b8c:	000064c5 	.word	0x000064c5
    6b90:	00006569 	.word	0x00006569
    6b94:	000065c5 	.word	0x000065c5
    6b98:	000066e1 	.word	0x000066e1
    6b9c:	000067b9 	.word	0x000067b9
    6ba0:	2000041c 	.word	0x2000041c
    6ba4:	0000611d 	.word	0x0000611d
    6ba8:	000105f8 	.word	0x000105f8
    6bac:	0000c601 	.word	0x0000c601
    6bb0:	0000c645 	.word	0x0000c645
    6bb4:	00006191 	.word	0x00006191
    6bb8:	0000c8ed 	.word	0x0000c8ed
    6bbc:	00020040 	.word	0x00020040
    6bc0:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
    6bc4:	46c0      	nop			; (mov r8, r8)
    6bc6:	68bb      	ldr	r3, [r7, #8]
    6bc8:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    6bca:	4912      	ldr	r1, [pc, #72]	; (6c14 <tcc_init+0x3c4>)
    6bcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6bce:	4091      	lsls	r1, r2
    6bd0:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
    6bd2:	4013      	ands	r3, r2
    6bd4:	d1f7      	bne.n	6bc6 <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    6bd6:	687a      	ldr	r2, [r7, #4]
    6bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6bda:	3306      	adds	r3, #6
    6bdc:	009b      	lsls	r3, r3, #2
    6bde:	18d3      	adds	r3, r2, r3
    6be0:	3304      	adds	r3, #4
    6be2:	681a      	ldr	r2, [r3, #0]
    6be4:	68b9      	ldr	r1, [r7, #8]
    6be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6be8:	3310      	adds	r3, #16
    6bea:	009b      	lsls	r3, r3, #2
    6bec:	18cb      	adds	r3, r1, r3
    6bee:	3304      	adds	r3, #4
    6bf0:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    6bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6bf4:	3301      	adds	r3, #1
    6bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
    6bf8:	233b      	movs	r3, #59	; 0x3b
    6bfa:	18fb      	adds	r3, r7, r3
    6bfc:	781b      	ldrb	r3, [r3, #0]
    6bfe:	4a06      	ldr	r2, [pc, #24]	; (6c18 <tcc_init+0x3c8>)
    6c00:	5cd3      	ldrb	r3, [r2, r3]
    6c02:	001a      	movs	r2, r3
    6c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6c06:	429a      	cmp	r2, r3
    6c08:	dcdc      	bgt.n	6bc4 <tcc_init+0x374>
	}

	return STATUS_OK;
    6c0a:	2300      	movs	r3, #0
}
    6c0c:	0018      	movs	r0, r3
    6c0e:	46bd      	mov	sp, r7
    6c10:	b011      	add	sp, #68	; 0x44
    6c12:	bd90      	pop	{r4, r7, pc}
    6c14:	00080100 	.word	0x00080100
    6c18:	00010614 	.word	0x00010614

00006c1c <system_interrupt_enable>:
{
    6c1c:	b580      	push	{r7, lr}
    6c1e:	b082      	sub	sp, #8
    6c20:	af00      	add	r7, sp, #0
    6c22:	0002      	movs	r2, r0
    6c24:	1dfb      	adds	r3, r7, #7
    6c26:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6c28:	4b06      	ldr	r3, [pc, #24]	; (6c44 <system_interrupt_enable+0x28>)
    6c2a:	1dfa      	adds	r2, r7, #7
    6c2c:	7812      	ldrb	r2, [r2, #0]
    6c2e:	0011      	movs	r1, r2
    6c30:	221f      	movs	r2, #31
    6c32:	400a      	ands	r2, r1
    6c34:	2101      	movs	r1, #1
    6c36:	4091      	lsls	r1, r2
    6c38:	000a      	movs	r2, r1
    6c3a:	601a      	str	r2, [r3, #0]
}
    6c3c:	46c0      	nop			; (mov r8, r8)
    6c3e:	46bd      	mov	sp, r7
    6c40:	b002      	add	sp, #8
    6c42:	bd80      	pop	{r7, pc}
    6c44:	e000e100 	.word	0xe000e100

00006c48 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    6c48:	b580      	push	{r7, lr}
    6c4a:	b082      	sub	sp, #8
    6c4c:	af00      	add	r7, sp, #0
    6c4e:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    6c50:	4a04      	ldr	r2, [pc, #16]	; (6c64 <_tcc_interrupt_get_interrupt_vector+0x1c>)
    6c52:	687b      	ldr	r3, [r7, #4]
    6c54:	18d3      	adds	r3, r2, r3
    6c56:	781b      	ldrb	r3, [r3, #0]
    6c58:	b25b      	sxtb	r3, r3
}
    6c5a:	0018      	movs	r0, r3
    6c5c:	46bd      	mov	sp, r7
    6c5e:	b002      	add	sp, #8
    6c60:	bd80      	pop	{r7, pc}
    6c62:	46c0      	nop			; (mov r8, r8)
    6c64:	20000004 	.word	0x20000004

00006c68 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
    6c68:	b580      	push	{r7, lr}
    6c6a:	b084      	sub	sp, #16
    6c6c:	af00      	add	r7, sp, #0
    6c6e:	60f8      	str	r0, [r7, #12]
    6c70:	60b9      	str	r1, [r7, #8]
    6c72:	1dfb      	adds	r3, r7, #7
    6c74:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    6c76:	1dfb      	adds	r3, r7, #7
    6c78:	781b      	ldrb	r3, [r3, #0]
    6c7a:	68fa      	ldr	r2, [r7, #12]
    6c7c:	009b      	lsls	r3, r3, #2
    6c7e:	18d3      	adds	r3, r2, r3
    6c80:	3304      	adds	r3, #4
    6c82:	68ba      	ldr	r2, [r7, #8]
    6c84:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    6c86:	68fb      	ldr	r3, [r7, #12]
    6c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    6c8a:	1dfb      	adds	r3, r7, #7
    6c8c:	7819      	ldrb	r1, [r3, #0]
    6c8e:	4b05      	ldr	r3, [pc, #20]	; (6ca4 <tcc_register_callback+0x3c>)
    6c90:	0089      	lsls	r1, r1, #2
    6c92:	58cb      	ldr	r3, [r1, r3]
    6c94:	431a      	orrs	r2, r3
    6c96:	68fb      	ldr	r3, [r7, #12]
    6c98:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
    6c9a:	2300      	movs	r3, #0
}
    6c9c:	0018      	movs	r0, r3
    6c9e:	46bd      	mov	sp, r7
    6ca0:	b004      	add	sp, #16
    6ca2:	bd80      	pop	{r7, pc}
    6ca4:	0001061c 	.word	0x0001061c

00006ca8 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    6ca8:	b580      	push	{r7, lr}
    6caa:	b082      	sub	sp, #8
    6cac:	af00      	add	r7, sp, #0
    6cae:	6078      	str	r0, [r7, #4]
    6cb0:	000a      	movs	r2, r1
    6cb2:	1cfb      	adds	r3, r7, #3
    6cb4:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    6cb6:	687b      	ldr	r3, [r7, #4]
    6cb8:	681b      	ldr	r3, [r3, #0]
    6cba:	0018      	movs	r0, r3
    6cbc:	4b0f      	ldr	r3, [pc, #60]	; (6cfc <tcc_enable_callback+0x54>)
    6cbe:	4798      	blx	r3
    6cc0:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
    6cc2:	0018      	movs	r0, r3
    6cc4:	4b0e      	ldr	r3, [pc, #56]	; (6d00 <tcc_enable_callback+0x58>)
    6cc6:	4798      	blx	r3
    6cc8:	0003      	movs	r3, r0
    6cca:	0018      	movs	r0, r3
    6ccc:	4b0d      	ldr	r3, [pc, #52]	; (6d04 <tcc_enable_callback+0x5c>)
    6cce:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    6cd0:	687b      	ldr	r3, [r7, #4]
    6cd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    6cd4:	1cfb      	adds	r3, r7, #3
    6cd6:	7819      	ldrb	r1, [r3, #0]
    6cd8:	4b0b      	ldr	r3, [pc, #44]	; (6d08 <tcc_enable_callback+0x60>)
    6cda:	0089      	lsls	r1, r1, #2
    6cdc:	58cb      	ldr	r3, [r1, r3]
    6cde:	431a      	orrs	r2, r3
    6ce0:	687b      	ldr	r3, [r7, #4]
    6ce2:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    6ce4:	687b      	ldr	r3, [r7, #4]
    6ce6:	681b      	ldr	r3, [r3, #0]
    6ce8:	1cfa      	adds	r2, r7, #3
    6cea:	7811      	ldrb	r1, [r2, #0]
    6cec:	4a06      	ldr	r2, [pc, #24]	; (6d08 <tcc_enable_callback+0x60>)
    6cee:	0089      	lsls	r1, r1, #2
    6cf0:	588a      	ldr	r2, [r1, r2]
    6cf2:	629a      	str	r2, [r3, #40]	; 0x28
}
    6cf4:	46c0      	nop			; (mov r8, r8)
    6cf6:	46bd      	mov	sp, r7
    6cf8:	b002      	add	sp, #8
    6cfa:	bd80      	pop	{r7, pc}
    6cfc:	000061b9 	.word	0x000061b9
    6d00:	00006c49 	.word	0x00006c49
    6d04:	00006c1d 	.word	0x00006c1d
    6d08:	0001061c 	.word	0x0001061c

00006d0c <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    6d0c:	b580      	push	{r7, lr}
    6d0e:	af00      	add	r7, sp, #0
    6d10:	2000      	movs	r0, #0
    6d12:	4b02      	ldr	r3, [pc, #8]	; (6d1c <TCC0_Handler+0x10>)
    6d14:	4798      	blx	r3
    6d16:	46c0      	nop			; (mov r8, r8)
    6d18:	46bd      	mov	sp, r7
    6d1a:	bd80      	pop	{r7, pc}
    6d1c:	00006d49 	.word	0x00006d49

00006d20 <TCC1_Handler>:
    6d20:	b580      	push	{r7, lr}
    6d22:	af00      	add	r7, sp, #0
    6d24:	2001      	movs	r0, #1
    6d26:	4b02      	ldr	r3, [pc, #8]	; (6d30 <TCC1_Handler+0x10>)
    6d28:	4798      	blx	r3
    6d2a:	46c0      	nop			; (mov r8, r8)
    6d2c:	46bd      	mov	sp, r7
    6d2e:	bd80      	pop	{r7, pc}
    6d30:	00006d49 	.word	0x00006d49

00006d34 <TCC2_Handler>:
    6d34:	b580      	push	{r7, lr}
    6d36:	af00      	add	r7, sp, #0
    6d38:	2002      	movs	r0, #2
    6d3a:	4b02      	ldr	r3, [pc, #8]	; (6d44 <TCC2_Handler+0x10>)
    6d3c:	4798      	blx	r3
    6d3e:	46c0      	nop			; (mov r8, r8)
    6d40:	46bd      	mov	sp, r7
    6d42:	bd80      	pop	{r7, pc}
    6d44:	00006d49 	.word	0x00006d49

00006d48 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    6d48:	b580      	push	{r7, lr}
    6d4a:	b086      	sub	sp, #24
    6d4c:	af00      	add	r7, sp, #0
    6d4e:	0002      	movs	r2, r0
    6d50:	1dfb      	adds	r3, r7, #7
    6d52:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    6d54:	1dfb      	adds	r3, r7, #7
    6d56:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
    6d58:	4b18      	ldr	r3, [pc, #96]	; (6dbc <_tcc_interrupt_handler+0x74>)
    6d5a:	0092      	lsls	r2, r2, #2
    6d5c:	58d3      	ldr	r3, [r2, r3]
    6d5e:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    6d60:	693b      	ldr	r3, [r7, #16]
    6d62:	681b      	ldr	r3, [r3, #0]
    6d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    6d66:	693b      	ldr	r3, [r7, #16]
    6d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    6d6a:	401a      	ands	r2, r3
			module->enable_callback_mask);
    6d6c:	693b      	ldr	r3, [r7, #16]
    6d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    6d70:	4013      	ands	r3, r2
    6d72:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    6d74:	2300      	movs	r3, #0
    6d76:	617b      	str	r3, [r7, #20]
    6d78:	e019      	b.n	6dae <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    6d7a:	4b11      	ldr	r3, [pc, #68]	; (6dc0 <_tcc_interrupt_handler+0x78>)
    6d7c:	697a      	ldr	r2, [r7, #20]
    6d7e:	0092      	lsls	r2, r2, #2
    6d80:	58d3      	ldr	r3, [r2, r3]
    6d82:	68fa      	ldr	r2, [r7, #12]
    6d84:	4013      	ands	r3, r2
    6d86:	d00f      	beq.n	6da8 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    6d88:	693a      	ldr	r2, [r7, #16]
    6d8a:	697b      	ldr	r3, [r7, #20]
    6d8c:	009b      	lsls	r3, r3, #2
    6d8e:	18d3      	adds	r3, r2, r3
    6d90:	3304      	adds	r3, #4
    6d92:	681b      	ldr	r3, [r3, #0]
    6d94:	693a      	ldr	r2, [r7, #16]
    6d96:	0010      	movs	r0, r2
    6d98:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    6d9a:	693b      	ldr	r3, [r7, #16]
    6d9c:	681b      	ldr	r3, [r3, #0]
    6d9e:	4a08      	ldr	r2, [pc, #32]	; (6dc0 <_tcc_interrupt_handler+0x78>)
    6da0:	6979      	ldr	r1, [r7, #20]
    6da2:	0089      	lsls	r1, r1, #2
    6da4:	588a      	ldr	r2, [r1, r2]
    6da6:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    6da8:	697b      	ldr	r3, [r7, #20]
    6daa:	3301      	adds	r3, #1
    6dac:	617b      	str	r3, [r7, #20]
    6dae:	697b      	ldr	r3, [r7, #20]
    6db0:	2b0b      	cmp	r3, #11
    6db2:	dde2      	ble.n	6d7a <_tcc_interrupt_handler+0x32>
		}
	}
}
    6db4:	46c0      	nop			; (mov r8, r8)
    6db6:	46bd      	mov	sp, r7
    6db8:	b006      	add	sp, #24
    6dba:	bd80      	pop	{r7, pc}
    6dbc:	2000041c 	.word	0x2000041c
    6dc0:	0001061c 	.word	0x0001061c

00006dc4 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
    6dc4:	b580      	push	{r7, lr}
    6dc6:	b082      	sub	sp, #8
    6dc8:	af00      	add	r7, sp, #0
    6dca:	6078      	str	r0, [r7, #4]
	config->port = 80;
    6dcc:	687b      	ldr	r3, [r7, #4]
    6dce:	2250      	movs	r2, #80	; 0x50
    6dd0:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
    6dd2:	687b      	ldr	r3, [r7, #4]
    6dd4:	2200      	movs	r2, #0
    6dd6:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
    6dd8:	687b      	ldr	r3, [r7, #4]
    6dda:	4a0b      	ldr	r2, [pc, #44]	; (6e08 <http_client_get_config_defaults+0x44>)
    6ddc:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
    6dde:	687b      	ldr	r3, [r7, #4]
    6de0:	2200      	movs	r2, #0
    6de2:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
    6de4:	687b      	ldr	r3, [r7, #4]
    6de6:	2200      	movs	r2, #0
    6de8:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
    6dea:	687b      	ldr	r3, [r7, #4]
    6dec:	2280      	movs	r2, #128	; 0x80
    6dee:	0052      	lsls	r2, r2, #1
    6df0:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    6df2:	687b      	ldr	r3, [r7, #4]
    6df4:	2252      	movs	r2, #82	; 0x52
    6df6:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    6df8:	687b      	ldr	r3, [r7, #4]
    6dfa:	4a04      	ldr	r2, [pc, #16]	; (6e0c <http_client_get_config_defaults+0x48>)
    6dfc:	619a      	str	r2, [r3, #24]
}
    6dfe:	46c0      	nop			; (mov r8, r8)
    6e00:	46bd      	mov	sp, r7
    6e02:	b002      	add	sp, #8
    6e04:	bd80      	pop	{r7, pc}
    6e06:	46c0      	nop			; (mov r8, r8)
    6e08:	00004e20 	.word	0x00004e20
    6e0c:	0001064c 	.word	0x0001064c

00006e10 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
    6e10:	b590      	push	{r4, r7, lr}
    6e12:	b083      	sub	sp, #12
    6e14:	af00      	add	r7, sp, #0
    6e16:	6078      	str	r0, [r7, #4]
    6e18:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
    6e1a:	687b      	ldr	r3, [r7, #4]
    6e1c:	2b00      	cmp	r3, #0
    6e1e:	d002      	beq.n	6e26 <http_client_init+0x16>
    6e20:	683b      	ldr	r3, [r7, #0]
    6e22:	2b00      	cmp	r3, #0
    6e24:	d102      	bne.n	6e2c <http_client_init+0x1c>
		return -EINVAL;
    6e26:	2316      	movs	r3, #22
    6e28:	425b      	negs	r3, r3
    6e2a:	e058      	b.n	6ede <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
    6e2c:	683b      	ldr	r3, [r7, #0]
    6e2e:	691b      	ldr	r3, [r3, #16]
    6e30:	2b00      	cmp	r3, #0
    6e32:	d102      	bne.n	6e3a <http_client_init+0x2a>
		return -EINVAL;
    6e34:	2316      	movs	r3, #22
    6e36:	425b      	negs	r3, r3
    6e38:	e051      	b.n	6ede <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
    6e3a:	683b      	ldr	r3, [r7, #0]
    6e3c:	685b      	ldr	r3, [r3, #4]
    6e3e:	2b00      	cmp	r3, #0
    6e40:	d102      	bne.n	6e48 <http_client_init+0x38>
		return -EINVAL;
    6e42:	2316      	movs	r3, #22
    6e44:	425b      	negs	r3, r3
    6e46:	e04a      	b.n	6ede <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    6e48:	683b      	ldr	r3, [r7, #0]
    6e4a:	695b      	ldr	r3, [r3, #20]
    6e4c:	2b51      	cmp	r3, #81	; 0x51
    6e4e:	d802      	bhi.n	6e56 <http_client_init+0x46>
		return -EINVAL;
    6e50:	2316      	movs	r3, #22
    6e52:	425b      	negs	r3, r3
    6e54:	e043      	b.n	6ede <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
    6e56:	687b      	ldr	r3, [r7, #4]
    6e58:	22e8      	movs	r2, #232	; 0xe8
    6e5a:	2100      	movs	r1, #0
    6e5c:	0018      	movs	r0, r3
    6e5e:	4b22      	ldr	r3, [pc, #136]	; (6ee8 <http_client_init+0xd8>)
    6e60:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    6e62:	687b      	ldr	r3, [r7, #4]
    6e64:	3350      	adds	r3, #80	; 0x50
    6e66:	6839      	ldr	r1, [r7, #0]
    6e68:	221c      	movs	r2, #28
    6e6a:	0018      	movs	r0, r3
    6e6c:	4b1f      	ldr	r3, [pc, #124]	; (6eec <http_client_init+0xdc>)
    6e6e:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
    6e70:	687b      	ldr	r3, [r7, #4]
    6e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    6e74:	2b00      	cmp	r3, #0
    6e76:	d115      	bne.n	6ea4 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    6e78:	683b      	ldr	r3, [r7, #0]
    6e7a:	691b      	ldr	r3, [r3, #16]
    6e7c:	0018      	movs	r0, r3
    6e7e:	4b1c      	ldr	r3, [pc, #112]	; (6ef0 <http_client_init+0xe0>)
    6e80:	4798      	blx	r3
    6e82:	0003      	movs	r3, r0
    6e84:	001a      	movs	r2, r3
    6e86:	687b      	ldr	r3, [r7, #4]
    6e88:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    6e8a:	687b      	ldr	r3, [r7, #4]
    6e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    6e8e:	2b00      	cmp	r3, #0
    6e90:	d102      	bne.n	6e98 <http_client_init+0x88>
			return -ENOMEM;
    6e92:	230c      	movs	r3, #12
    6e94:	425b      	negs	r3, r3
    6e96:	e022      	b.n	6ede <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
    6e98:	687b      	ldr	r3, [r7, #4]
    6e9a:	2241      	movs	r2, #65	; 0x41
    6e9c:	5c99      	ldrb	r1, [r3, r2]
    6e9e:	2004      	movs	r0, #4
    6ea0:	4301      	orrs	r1, r0
    6ea2:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
    6ea4:	683b      	ldr	r3, [r7, #0]
    6ea6:	891b      	ldrh	r3, [r3, #8]
    6ea8:	2b00      	cmp	r3, #0
    6eaa:	d010      	beq.n	6ece <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    6eac:	683b      	ldr	r3, [r7, #0]
    6eae:	6858      	ldr	r0, [r3, #4]
    6eb0:	687a      	ldr	r2, [r7, #4]
    6eb2:	4910      	ldr	r1, [pc, #64]	; (6ef4 <http_client_init+0xe4>)
    6eb4:	2300      	movs	r3, #0
    6eb6:	4c10      	ldr	r4, [pc, #64]	; (6ef8 <http_client_init+0xe8>)
    6eb8:	47a0      	blx	r4
    6eba:	0002      	movs	r2, r0
    6ebc:	687b      	ldr	r3, [r7, #4]
    6ebe:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
    6ec0:	687b      	ldr	r3, [r7, #4]
    6ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6ec4:	2b00      	cmp	r3, #0
    6ec6:	da02      	bge.n	6ece <http_client_init+0xbe>
			return -ENOSPC;
    6ec8:	231c      	movs	r3, #28
    6eca:	425b      	negs	r3, r3
    6ecc:	e007      	b.n	6ede <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
    6ece:	687b      	ldr	r3, [r7, #4]
    6ed0:	2200      	movs	r2, #0
    6ed2:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    6ed4:	687b      	ldr	r3, [r7, #4]
    6ed6:	22d8      	movs	r2, #216	; 0xd8
    6ed8:	2100      	movs	r1, #0
    6eda:	5099      	str	r1, [r3, r2]

	return 0;
    6edc:	2300      	movs	r3, #0
}
    6ede:	0018      	movs	r0, r3
    6ee0:	46bd      	mov	sp, r7
    6ee2:	b003      	add	sp, #12
    6ee4:	bd90      	pop	{r4, r7, pc}
    6ee6:	46c0      	nop			; (mov r8, r8)
    6ee8:	0000de4b 	.word	0x0000de4b
    6eec:	0000de15 	.word	0x0000de15
    6ef0:	0000dded 	.word	0x0000dded
    6ef4:	000071c1 	.word	0x000071c1
    6ef8:	00008851 	.word	0x00008851

00006efc <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
    6efc:	b580      	push	{r7, lr}
    6efe:	b082      	sub	sp, #8
    6f00:	af00      	add	r7, sp, #0
    6f02:	6078      	str	r0, [r7, #4]
    6f04:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
    6f06:	687b      	ldr	r3, [r7, #4]
    6f08:	2b00      	cmp	r3, #0
    6f0a:	d102      	bne.n	6f12 <http_client_register_callback+0x16>
		return -EINVAL;
    6f0c:	2316      	movs	r3, #22
    6f0e:	425b      	negs	r3, r3
    6f10:	e003      	b.n	6f1a <http_client_register_callback+0x1e>
	}

	module->cb = callback;
    6f12:	687b      	ldr	r3, [r7, #4]
    6f14:	683a      	ldr	r2, [r7, #0]
    6f16:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
    6f18:	2300      	movs	r3, #0
}
    6f1a:	0018      	movs	r0, r3
    6f1c:	46bd      	mov	sp, r7
    6f1e:	b002      	add	sp, #8
    6f20:	bd80      	pop	{r7, pc}
	...

00006f24 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
    6f24:	b580      	push	{r7, lr}
    6f26:	b082      	sub	sp, #8
    6f28:	af00      	add	r7, sp, #0
    6f2a:	6078      	str	r0, [r7, #4]
	switch (err) {
    6f2c:	687b      	ldr	r3, [r7, #4]
    6f2e:	330e      	adds	r3, #14
    6f30:	2b0e      	cmp	r3, #14
    6f32:	d825      	bhi.n	6f80 <_hwerr_to_stderr+0x5c>
    6f34:	009a      	lsls	r2, r3, #2
    6f36:	4b18      	ldr	r3, [pc, #96]	; (6f98 <_hwerr_to_stderr+0x74>)
    6f38:	18d3      	adds	r3, r2, r3
    6f3a:	681b      	ldr	r3, [r3, #0]
    6f3c:	469f      	mov	pc, r3
		case 0:
			return -EIO;
    6f3e:	2305      	movs	r3, #5
    6f40:	425b      	negs	r3, r3
    6f42:	e024      	b.n	6f8e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
    6f44:	2302      	movs	r3, #2
    6f46:	425b      	negs	r3, r3
    6f48:	e021      	b.n	6f8e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
    6f4a:	2370      	movs	r3, #112	; 0x70
    6f4c:	425b      	negs	r3, r3
    6f4e:	e01e      	b.n	6f8e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
    6f50:	230c      	movs	r3, #12
    6f52:	425b      	negs	r3, r3
    6f54:	e01b      	b.n	6f8e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
    6f56:	2316      	movs	r3, #22
    6f58:	425b      	negs	r3, r3
    6f5a:	e018      	b.n	6f8e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
    6f5c:	230c      	movs	r3, #12
    6f5e:	425b      	negs	r3, r3
    6f60:	e015      	b.n	6f8e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
    6f62:	2305      	movs	r3, #5
    6f64:	425b      	negs	r3, r3
    6f66:	e012      	b.n	6f8e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
    6f68:	2379      	movs	r3, #121	; 0x79
    6f6a:	425b      	negs	r3, r3
    6f6c:	e00f      	b.n	6f8e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
    6f6e:	2368      	movs	r3, #104	; 0x68
    6f70:	425b      	negs	r3, r3
    6f72:	e00c      	b.n	6f8e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
    6f74:	230b      	movs	r3, #11
    6f76:	425b      	negs	r3, r3
    6f78:	e009      	b.n	6f8e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
    6f7a:	2310      	movs	r3, #16
    6f7c:	425b      	negs	r3, r3
    6f7e:	e006      	b.n	6f8e <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
    6f80:	687b      	ldr	r3, [r7, #4]
    6f82:	2b00      	cmp	r3, #0
    6f84:	da02      	bge.n	6f8c <_hwerr_to_stderr+0x68>
				return -EIO;
    6f86:	2305      	movs	r3, #5
    6f88:	425b      	negs	r3, r3
    6f8a:	e000      	b.n	6f8e <_hwerr_to_stderr+0x6a>
			}
			return 0;
    6f8c:	2300      	movs	r3, #0
	}
}
    6f8e:	0018      	movs	r0, r3
    6f90:	46bd      	mov	sp, r7
    6f92:	b002      	add	sp, #8
    6f94:	bd80      	pop	{r7, pc}
    6f96:	46c0      	nop			; (mov r8, r8)
    6f98:	00010788 	.word	0x00010788

00006f9c <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    6f9c:	b580      	push	{r7, lr}
    6f9e:	b08a      	sub	sp, #40	; 0x28
    6fa0:	af00      	add	r7, sp, #0
    6fa2:	603a      	str	r2, [r7, #0]
    6fa4:	1dfb      	adds	r3, r7, #7
    6fa6:	1c02      	adds	r2, r0, #0
    6fa8:	701a      	strb	r2, [r3, #0]
    6faa:	1dbb      	adds	r3, r7, #6
    6fac:	1c0a      	adds	r2, r1, #0
    6fae:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
    6fb0:	1dfb      	adds	r3, r7, #7
    6fb2:	2200      	movs	r2, #0
    6fb4:	569a      	ldrsb	r2, [r3, r2]
    6fb6:	4b4b      	ldr	r3, [pc, #300]	; (70e4 <http_client_socket_event_handler+0x148>)
    6fb8:	0092      	lsls	r2, r2, #2
    6fba:	58d3      	ldr	r3, [r2, r3]
    6fbc:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
    6fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6fc0:	2b00      	cmp	r3, #0
    6fc2:	d100      	bne.n	6fc6 <http_client_socket_event_handler+0x2a>
    6fc4:	e08a      	b.n	70dc <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
    6fc6:	1dbb      	adds	r3, r7, #6
    6fc8:	781b      	ldrb	r3, [r3, #0]
    6fca:	2b06      	cmp	r3, #6
    6fcc:	d040      	beq.n	7050 <http_client_socket_event_handler+0xb4>
    6fce:	2b07      	cmp	r3, #7
    6fd0:	d060      	beq.n	7094 <http_client_socket_event_handler+0xf8>
    6fd2:	2b05      	cmp	r3, #5
    6fd4:	d000      	beq.n	6fd8 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
    6fd6:	e082      	b.n	70de <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
    6fd8:	683b      	ldr	r3, [r7, #0]
    6fda:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
    6fdc:	6a3b      	ldr	r3, [r7, #32]
    6fde:	785b      	ldrb	r3, [r3, #1]
    6fe0:	b25b      	sxtb	r3, r3
    6fe2:	001a      	movs	r2, r3
    6fe4:	230c      	movs	r3, #12
    6fe6:	18fb      	adds	r3, r7, r3
    6fe8:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
    6fea:	6a3b      	ldr	r3, [r7, #32]
    6fec:	785b      	ldrb	r3, [r3, #1]
    6fee:	b25b      	sxtb	r3, r3
    6ff0:	2b00      	cmp	r3, #0
    6ff2:	da0c      	bge.n	700e <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    6ff4:	6a3b      	ldr	r3, [r7, #32]
    6ff6:	785b      	ldrb	r3, [r3, #1]
    6ff8:	b25b      	sxtb	r3, r3
    6ffa:	0018      	movs	r0, r3
    6ffc:	4b3a      	ldr	r3, [pc, #232]	; (70e8 <http_client_socket_event_handler+0x14c>)
    6ffe:	4798      	blx	r3
    7000:	0002      	movs	r2, r0
    7002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7004:	0011      	movs	r1, r2
    7006:	0018      	movs	r0, r3
    7008:	4b38      	ldr	r3, [pc, #224]	; (70ec <http_client_socket_event_handler+0x150>)
    700a:	4798      	blx	r3
    	break;
    700c:	e067      	b.n	70de <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
    700e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    7012:	2b00      	cmp	r3, #0
    7014:	d006      	beq.n	7024 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    7016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    701a:	220c      	movs	r2, #12
    701c:	18ba      	adds	r2, r7, r2
    701e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    7020:	2100      	movs	r1, #0
    7022:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
    7024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7026:	2203      	movs	r2, #3
    7028:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    702c:	6d58      	ldr	r0, [r3, #84]	; 0x54
    702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7030:	6c99      	ldr	r1, [r3, #72]	; 0x48
    7032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7034:	2258      	movs	r2, #88	; 0x58
    7036:	5a9b      	ldrh	r3, [r3, r2]
    7038:	001a      	movs	r2, r3
    703a:	4b2d      	ldr	r3, [pc, #180]	; (70f0 <http_client_socket_event_handler+0x154>)
    703c:	4798      	blx	r3
    		_http_client_recv_packet(module);
    703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7040:	0018      	movs	r0, r3
    7042:	4b2c      	ldr	r3, [pc, #176]	; (70f4 <http_client_socket_event_handler+0x158>)
    7044:	4798      	blx	r3
			_http_client_request(module);
    7046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7048:	0018      	movs	r0, r3
    704a:	4b2b      	ldr	r3, [pc, #172]	; (70f8 <http_client_socket_event_handler+0x15c>)
    704c:	4798      	blx	r3
    	break;
    704e:	e046      	b.n	70de <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
    7050:	683b      	ldr	r3, [r7, #0]
    7052:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
    7054:	69fb      	ldr	r3, [r7, #28]
    7056:	2204      	movs	r2, #4
    7058:	5e9b      	ldrsh	r3, [r3, r2]
    705a:	2b00      	cmp	r3, #0
    705c:	dd09      	ble.n	7072 <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    705e:	69fb      	ldr	r3, [r7, #28]
    7060:	2204      	movs	r2, #4
    7062:	5e9b      	ldrsh	r3, [r3, r2]
    7064:	001a      	movs	r2, r3
    7066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7068:	0011      	movs	r1, r2
    706a:	0018      	movs	r0, r3
    706c:	4b23      	ldr	r3, [pc, #140]	; (70fc <http_client_socket_event_handler+0x160>)
    706e:	4798      	blx	r3
    7070:	e00b      	b.n	708a <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    7072:	69fb      	ldr	r3, [r7, #28]
    7074:	2204      	movs	r2, #4
    7076:	5e9b      	ldrsh	r3, [r3, r2]
    7078:	0018      	movs	r0, r3
    707a:	4b1b      	ldr	r3, [pc, #108]	; (70e8 <http_client_socket_event_handler+0x14c>)
    707c:	4798      	blx	r3
    707e:	0002      	movs	r2, r0
    7080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7082:	0011      	movs	r1, r2
    7084:	0018      	movs	r0, r3
    7086:	4b19      	ldr	r3, [pc, #100]	; (70ec <http_client_socket_event_handler+0x150>)
    7088:	4798      	blx	r3
		_http_client_recv_packet(module);
    708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    708c:	0018      	movs	r0, r3
    708e:	4b19      	ldr	r3, [pc, #100]	; (70f4 <http_client_socket_event_handler+0x158>)
    7090:	4798      	blx	r3
		break;
    7092:	e024      	b.n	70de <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
    7094:	231a      	movs	r3, #26
    7096:	18fb      	adds	r3, r7, r3
    7098:	683a      	ldr	r2, [r7, #0]
    709a:	8812      	ldrh	r2, [r2, #0]
    709c:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
    709e:	231a      	movs	r3, #26
    70a0:	18fb      	adds	r3, r7, r3
    70a2:	2200      	movs	r2, #0
    70a4:	5e9b      	ldrsh	r3, [r3, r2]
    70a6:	2b00      	cmp	r3, #0
    70a8:	da0d      	bge.n	70c6 <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    70aa:	231a      	movs	r3, #26
    70ac:	18fb      	adds	r3, r7, r3
    70ae:	2200      	movs	r2, #0
    70b0:	5e9b      	ldrsh	r3, [r3, r2]
    70b2:	0018      	movs	r0, r3
    70b4:	4b0c      	ldr	r3, [pc, #48]	; (70e8 <http_client_socket_event_handler+0x14c>)
    70b6:	4798      	blx	r3
    70b8:	0002      	movs	r2, r0
    70ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    70bc:	0011      	movs	r1, r2
    70be:	0018      	movs	r0, r3
    70c0:	4b0a      	ldr	r3, [pc, #40]	; (70ec <http_client_socket_event_handler+0x150>)
    70c2:	4798      	blx	r3
    70c4:	e003      	b.n	70ce <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
    70c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    70c8:	0018      	movs	r0, r3
    70ca:	4b0b      	ldr	r3, [pc, #44]	; (70f8 <http_client_socket_event_handler+0x15c>)
    70cc:	4798      	blx	r3
		module->sending = 0;
    70ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    70d0:	2241      	movs	r2, #65	; 0x41
    70d2:	5c99      	ldrb	r1, [r3, r2]
    70d4:	2001      	movs	r0, #1
    70d6:	4381      	bics	r1, r0
    70d8:	5499      	strb	r1, [r3, r2]
    	break;
    70da:	e000      	b.n	70de <http_client_socket_event_handler+0x142>
		return;
    70dc:	46c0      	nop			; (mov r8, r8)
	}

}
    70de:	46bd      	mov	sp, r7
    70e0:	b00a      	add	sp, #40	; 0x28
    70e2:	bd80      	pop	{r7, pc}
    70e4:	2000021c 	.word	0x2000021c
    70e8:	00006f25 	.word	0x00006f25
    70ec:	00007599 	.word	0x00007599
    70f0:	000088e1 	.word	0x000088e1
    70f4:	00007e11 	.word	0x00007e11
    70f8:	000076ed 	.word	0x000076ed
    70fc:	00007e75 	.word	0x00007e75

00007100 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    7100:	b580      	push	{r7, lr}
    7102:	b088      	sub	sp, #32
    7104:	af00      	add	r7, sp, #0
    7106:	6078      	str	r0, [r7, #4]
    7108:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
    710a:	2300      	movs	r3, #0
    710c:	61fb      	str	r3, [r7, #28]
    710e:	e048      	b.n	71a2 <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
    7110:	4b27      	ldr	r3, [pc, #156]	; (71b0 <http_client_socket_resolve_handler+0xb0>)
    7112:	69fa      	ldr	r2, [r7, #28]
    7114:	0092      	lsls	r2, r2, #2
    7116:	58d3      	ldr	r3, [r2, r3]
    7118:	2b00      	cmp	r3, #0
    711a:	d03f      	beq.n	719c <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
    711c:	4b24      	ldr	r3, [pc, #144]	; (71b0 <http_client_socket_resolve_handler+0xb0>)
    711e:	69fa      	ldr	r2, [r7, #28]
    7120:	0092      	lsls	r2, r2, #2
    7122:	58d3      	ldr	r3, [r2, r3]
    7124:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    7126:	69bb      	ldr	r3, [r7, #24]
    7128:	1c5a      	adds	r2, r3, #1
    712a:	687b      	ldr	r3, [r7, #4]
    712c:	0011      	movs	r1, r2
    712e:	0018      	movs	r0, r3
    7130:	4b20      	ldr	r3, [pc, #128]	; (71b4 <http_client_socket_resolve_handler+0xb4>)
    7132:	4798      	blx	r3
    7134:	1e03      	subs	r3, r0, #0
    7136:	d131      	bne.n	719c <http_client_socket_resolve_handler+0x9c>
    7138:	69bb      	ldr	r3, [r7, #24]
    713a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    713c:	2b01      	cmp	r3, #1
    713e:	d12d      	bne.n	719c <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    7140:	683b      	ldr	r3, [r7, #0]
    7142:	2b00      	cmp	r3, #0
    7144:	d107      	bne.n	7156 <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    7146:	2376      	movs	r3, #118	; 0x76
    7148:	425a      	negs	r2, r3
    714a:	69bb      	ldr	r3, [r7, #24]
    714c:	0011      	movs	r1, r2
    714e:	0018      	movs	r0, r3
    7150:	4b19      	ldr	r3, [pc, #100]	; (71b8 <http_client_socket_resolve_handler+0xb8>)
    7152:	4798      	blx	r3
					return;
    7154:	e028      	b.n	71a8 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
    7156:	2308      	movs	r3, #8
    7158:	18fb      	adds	r3, r7, r3
    715a:	2202      	movs	r2, #2
    715c:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
    715e:	69bb      	ldr	r3, [r7, #24]
    7160:	2250      	movs	r2, #80	; 0x50
    7162:	5a9b      	ldrh	r3, [r3, r2]
    7164:	021b      	lsls	r3, r3, #8
    7166:	b21a      	sxth	r2, r3
    7168:	69bb      	ldr	r3, [r7, #24]
    716a:	2150      	movs	r1, #80	; 0x50
    716c:	5a5b      	ldrh	r3, [r3, r1]
    716e:	0a1b      	lsrs	r3, r3, #8
    7170:	b29b      	uxth	r3, r3
    7172:	b21b      	sxth	r3, r3
    7174:	4313      	orrs	r3, r2
    7176:	b21b      	sxth	r3, r3
    7178:	b29a      	uxth	r2, r3
    717a:	2308      	movs	r3, #8
    717c:	18fb      	adds	r3, r7, r3
    717e:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
    7180:	2308      	movs	r3, #8
    7182:	18fb      	adds	r3, r7, r3
    7184:	683a      	ldr	r2, [r7, #0]
    7186:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    7188:	69bb      	ldr	r3, [r7, #24]
    718a:	781b      	ldrb	r3, [r3, #0]
    718c:	b25b      	sxtb	r3, r3
    718e:	2208      	movs	r2, #8
    7190:	18b9      	adds	r1, r7, r2
    7192:	2210      	movs	r2, #16
    7194:	0018      	movs	r0, r3
    7196:	4b09      	ldr	r3, [pc, #36]	; (71bc <http_client_socket_resolve_handler+0xbc>)
    7198:	4798      	blx	r3
				return;
    719a:	e005      	b.n	71a8 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
    719c:	69fb      	ldr	r3, [r7, #28]
    719e:	3301      	adds	r3, #1
    71a0:	61fb      	str	r3, [r7, #28]
    71a2:	69fb      	ldr	r3, [r7, #28]
    71a4:	2b06      	cmp	r3, #6
    71a6:	ddb3      	ble.n	7110 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
    71a8:	46bd      	mov	sp, r7
    71aa:	b008      	add	sp, #32
    71ac:	bd80      	pop	{r7, pc}
    71ae:	46c0      	nop			; (mov r8, r8)
    71b0:	2000021c 	.word	0x2000021c
    71b4:	0000e2b1 	.word	0x0000e2b1
    71b8:	00007599 	.word	0x00007599
    71bc:	000051e5 	.word	0x000051e5

000071c0 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
    71c0:	b580      	push	{r7, lr}
    71c2:	b086      	sub	sp, #24
    71c4:	af00      	add	r7, sp, #0
    71c6:	60f8      	str	r0, [r7, #12]
    71c8:	60b9      	str	r1, [r7, #8]
    71ca:	607a      	str	r2, [r7, #4]
    71cc:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
    71ce:	687b      	ldr	r3, [r7, #4]
    71d0:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
    71d2:	697b      	ldr	r3, [r7, #20]
    71d4:	2b00      	cmp	r3, #0
    71d6:	d007      	beq.n	71e8 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
    71d8:	233e      	movs	r3, #62	; 0x3e
    71da:	425a      	negs	r2, r3
    71dc:	697b      	ldr	r3, [r7, #20]
    71de:	0011      	movs	r1, r2
    71e0:	0018      	movs	r0, r3
    71e2:	4b03      	ldr	r3, [pc, #12]	; (71f0 <http_client_timer_callback+0x30>)
    71e4:	4798      	blx	r3
    71e6:	e000      	b.n	71ea <http_client_timer_callback+0x2a>
		return;
    71e8:	46c0      	nop			; (mov r8, r8)
}
    71ea:	46bd      	mov	sp, r7
    71ec:	b006      	add	sp, #24
    71ee:	bd80      	pop	{r7, pc}
    71f0:	00007599 	.word	0x00007599

000071f4 <_is_ip>:

static int _is_ip(const char *host)
{
    71f4:	b580      	push	{r7, lr}
    71f6:	b084      	sub	sp, #16
    71f8:	af00      	add	r7, sp, #0
    71fa:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
    71fc:	2300      	movs	r3, #0
    71fe:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
    7200:	e03a      	b.n	7278 <_is_ip+0x84>
		ch = *host++;
    7202:	687b      	ldr	r3, [r7, #4]
    7204:	1c5a      	adds	r2, r3, #1
    7206:	607a      	str	r2, [r7, #4]
    7208:	220b      	movs	r2, #11
    720a:	18ba      	adds	r2, r7, r2
    720c:	781b      	ldrb	r3, [r3, #0]
    720e:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    7210:	230b      	movs	r3, #11
    7212:	18fb      	adds	r3, r7, r3
    7214:	781b      	ldrb	r3, [r3, #0]
    7216:	2b60      	cmp	r3, #96	; 0x60
    7218:	d904      	bls.n	7224 <_is_ip+0x30>
    721a:	230b      	movs	r3, #11
    721c:	18fb      	adds	r3, r7, r3
    721e:	781b      	ldrb	r3, [r3, #0]
    7220:	2b66      	cmp	r3, #102	; 0x66
    7222:	d913      	bls.n	724c <_is_ip+0x58>
    7224:	230b      	movs	r3, #11
    7226:	18fb      	adds	r3, r7, r3
    7228:	781b      	ldrb	r3, [r3, #0]
    722a:	2b40      	cmp	r3, #64	; 0x40
    722c:	d904      	bls.n	7238 <_is_ip+0x44>
    722e:	230b      	movs	r3, #11
    7230:	18fb      	adds	r3, r7, r3
    7232:	781b      	ldrb	r3, [r3, #0]
    7234:	2b46      	cmp	r3, #70	; 0x46
    7236:	d909      	bls.n	724c <_is_ip+0x58>
    7238:	230b      	movs	r3, #11
    723a:	18fb      	adds	r3, r7, r3
    723c:	781b      	ldrb	r3, [r3, #0]
    723e:	2b3a      	cmp	r3, #58	; 0x3a
    7240:	d004      	beq.n	724c <_is_ip+0x58>
    7242:	230b      	movs	r3, #11
    7244:	18fb      	adds	r3, r7, r3
    7246:	781b      	ldrb	r3, [r3, #0]
    7248:	2b2f      	cmp	r3, #47	; 0x2f
    724a:	d102      	bne.n	7252 <_is_ip+0x5e>
			isv6 = 1;
    724c:	2301      	movs	r3, #1
    724e:	60fb      	str	r3, [r7, #12]
    7250:	e012      	b.n	7278 <_is_ip+0x84>
		} else if (ch == '.') {
    7252:	230b      	movs	r3, #11
    7254:	18fb      	adds	r3, r7, r3
    7256:	781b      	ldrb	r3, [r3, #0]
    7258:	2b2e      	cmp	r3, #46	; 0x2e
    725a:	d104      	bne.n	7266 <_is_ip+0x72>
			if (isv6) {
    725c:	68fb      	ldr	r3, [r7, #12]
    725e:	2b00      	cmp	r3, #0
    7260:	d00a      	beq.n	7278 <_is_ip+0x84>
				return 0;
    7262:	2300      	movs	r3, #0
    7264:	e00d      	b.n	7282 <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
    7266:	230b      	movs	r3, #11
    7268:	18fb      	adds	r3, r7, r3
    726a:	781b      	ldrb	r3, [r3, #0]
    726c:	2230      	movs	r2, #48	; 0x30
    726e:	4013      	ands	r3, r2
    7270:	2b30      	cmp	r3, #48	; 0x30
    7272:	d001      	beq.n	7278 <_is_ip+0x84>
			return 0;
    7274:	2300      	movs	r3, #0
    7276:	e004      	b.n	7282 <_is_ip+0x8e>
	while (*host != '\0') {
    7278:	687b      	ldr	r3, [r7, #4]
    727a:	781b      	ldrb	r3, [r3, #0]
    727c:	2b00      	cmp	r3, #0
    727e:	d1c0      	bne.n	7202 <_is_ip+0xe>
		}
	}
	return 1;
    7280:	2301      	movs	r3, #1
}
    7282:	0018      	movs	r0, r3
    7284:	46bd      	mov	sp, r7
    7286:	b004      	add	sp, #16
    7288:	bd80      	pop	{r7, pc}
	...

0000728c <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
    728c:	b5b0      	push	{r4, r5, r7, lr}
    728e:	b08e      	sub	sp, #56	; 0x38
    7290:	af00      	add	r7, sp, #0
    7292:	60f8      	str	r0, [r7, #12]
    7294:	60b9      	str	r1, [r7, #8]
    7296:	603b      	str	r3, [r7, #0]
    7298:	1dfb      	adds	r3, r7, #7
    729a:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
    729c:	2337      	movs	r3, #55	; 0x37
    729e:	18fb      	adds	r3, r7, r3
    72a0:	2200      	movs	r2, #0
    72a2:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
    72a4:	2300      	movs	r3, #0
    72a6:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
    72a8:	2300      	movs	r3, #0
    72aa:	633b      	str	r3, [r7, #48]	; 0x30
    72ac:	2300      	movs	r3, #0
    72ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    72b0:	2300      	movs	r3, #0
    72b2:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
    72b4:	68fb      	ldr	r3, [r7, #12]
    72b6:	2b00      	cmp	r3, #0
    72b8:	d102      	bne.n	72c0 <http_client_send_request+0x34>
		return -EINVAL;
    72ba:	2316      	movs	r3, #22
    72bc:	425b      	negs	r3, r3
    72be:	e145      	b.n	754c <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
    72c0:	68fb      	ldr	r3, [r7, #12]
    72c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    72c4:	2b02      	cmp	r3, #2
    72c6:	d902      	bls.n	72ce <http_client_send_request+0x42>
		return -EBUSY;
    72c8:	2310      	movs	r3, #16
    72ca:	425b      	negs	r3, r3
    72cc:	e13e      	b.n	754c <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
    72ce:	49a1      	ldr	r1, [pc, #644]	; (7554 <http_client_send_request+0x2c8>)
    72d0:	68bb      	ldr	r3, [r7, #8]
    72d2:	2207      	movs	r2, #7
    72d4:	0018      	movs	r0, r3
    72d6:	4ba0      	ldr	r3, [pc, #640]	; (7558 <http_client_send_request+0x2cc>)
    72d8:	4798      	blx	r3
    72da:	1e03      	subs	r3, r0, #0
    72dc:	d102      	bne.n	72e4 <http_client_send_request+0x58>
		i = 7;
    72de:	2307      	movs	r3, #7
    72e0:	633b      	str	r3, [r7, #48]	; 0x30
    72e2:	e009      	b.n	72f8 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
    72e4:	499d      	ldr	r1, [pc, #628]	; (755c <http_client_send_request+0x2d0>)
    72e6:	68bb      	ldr	r3, [r7, #8]
    72e8:	2208      	movs	r2, #8
    72ea:	0018      	movs	r0, r3
    72ec:	4b9a      	ldr	r3, [pc, #616]	; (7558 <http_client_send_request+0x2cc>)
    72ee:	4798      	blx	r3
    72f0:	1e03      	subs	r3, r0, #0
    72f2:	d101      	bne.n	72f8 <http_client_send_request+0x6c>
		i = 8;
    72f4:	2308      	movs	r3, #8
    72f6:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    72f8:	68fb      	ldr	r3, [r7, #12]
    72fa:	1c5c      	adds	r4, r3, #1
    72fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    72fe:	68ba      	ldr	r2, [r7, #8]
    7300:	18d5      	adds	r5, r2, r3
    7302:	68fb      	ldr	r3, [r7, #12]
    7304:	3301      	adds	r3, #1
    7306:	0018      	movs	r0, r3
    7308:	4b95      	ldr	r3, [pc, #596]	; (7560 <http_client_send_request+0x2d4>)
    730a:	4798      	blx	r3
    730c:	0003      	movs	r3, r0
    730e:	001a      	movs	r2, r3
    7310:	0029      	movs	r1, r5
    7312:	0020      	movs	r0, r4
    7314:	4b90      	ldr	r3, [pc, #576]	; (7558 <http_client_send_request+0x2cc>)
    7316:	4798      	blx	r3
    7318:	0003      	movs	r3, r0
    731a:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
    731c:	e00d      	b.n	733a <http_client_send_request+0xae>
		module->host[j++] = url[i];
    731e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7320:	1c5a      	adds	r2, r3, #1
    7322:	62fa      	str	r2, [r7, #44]	; 0x2c
    7324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    7326:	68b9      	ldr	r1, [r7, #8]
    7328:	188a      	adds	r2, r1, r2
    732a:	7811      	ldrb	r1, [r2, #0]
    732c:	68fa      	ldr	r2, [r7, #12]
    732e:	18d3      	adds	r3, r2, r3
    7330:	1c0a      	adds	r2, r1, #0
    7332:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    7334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7336:	3301      	adds	r3, #1
    7338:	633b      	str	r3, [r7, #48]	; 0x30
    733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    733c:	68ba      	ldr	r2, [r7, #8]
    733e:	18d3      	adds	r3, r2, r3
    7340:	781b      	ldrb	r3, [r3, #0]
    7342:	2b00      	cmp	r3, #0
    7344:	d005      	beq.n	7352 <http_client_send_request+0xc6>
    7346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7348:	68ba      	ldr	r2, [r7, #8]
    734a:	18d3      	adds	r3, r2, r3
    734c:	781b      	ldrb	r3, [r3, #0]
    734e:	2b2f      	cmp	r3, #47	; 0x2f
    7350:	d1e5      	bne.n	731e <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
    7352:	68fa      	ldr	r2, [r7, #12]
    7354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7356:	18d3      	adds	r3, r2, r3
    7358:	3301      	adds	r3, #1
    735a:	2200      	movs	r2, #0
    735c:	701a      	strb	r2, [r3, #0]
	uri = url + i;
    735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7360:	68ba      	ldr	r2, [r7, #8]
    7362:	18d3      	adds	r3, r2, r3
    7364:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
    7366:	68fb      	ldr	r3, [r7, #12]
    7368:	3301      	adds	r3, #1
    736a:	781b      	ldrb	r3, [r3, #0]
    736c:	2b00      	cmp	r3, #0
    736e:	d102      	bne.n	7376 <http_client_send_request+0xea>
		return -EINVAL;
    7370:	2316      	movs	r3, #22
    7372:	425b      	negs	r3, r3
    7374:	e0ea      	b.n	754c <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    7376:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7378:	0018      	movs	r0, r3
    737a:	4b79      	ldr	r3, [pc, #484]	; (7560 <http_client_send_request+0x2d4>)
    737c:	4798      	blx	r3
    737e:	0003      	movs	r3, r0
    7380:	2b3f      	cmp	r3, #63	; 0x3f
    7382:	d902      	bls.n	738a <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
    7384:	235b      	movs	r3, #91	; 0x5b
    7386:	425b      	negs	r3, r3
    7388:	e0e0      	b.n	754c <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
    738a:	68fb      	ldr	r3, [r7, #12]
    738c:	22d4      	movs	r2, #212	; 0xd4
    738e:	589b      	ldr	r3, [r3, r2]
    7390:	2b00      	cmp	r3, #0
    7392:	d005      	beq.n	73a0 <http_client_send_request+0x114>
		free(module->req.ext_header);
    7394:	68fb      	ldr	r3, [r7, #12]
    7396:	22d4      	movs	r2, #212	; 0xd4
    7398:	589b      	ldr	r3, [r3, r2]
    739a:	0018      	movs	r0, r3
    739c:	4b71      	ldr	r3, [pc, #452]	; (7564 <http_client_send_request+0x2d8>)
    739e:	4798      	blx	r3
	}
	if (ext_header != NULL) {
    73a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    73a2:	2b00      	cmp	r3, #0
    73a4:	d010      	beq.n	73c8 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
    73a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    73a8:	0018      	movs	r0, r3
    73aa:	4b6f      	ldr	r3, [pc, #444]	; (7568 <http_client_send_request+0x2dc>)
    73ac:	4798      	blx	r3
    73ae:	0003      	movs	r3, r0
    73b0:	0019      	movs	r1, r3
    73b2:	68fb      	ldr	r3, [r7, #12]
    73b4:	22d4      	movs	r2, #212	; 0xd4
    73b6:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
    73b8:	68fb      	ldr	r3, [r7, #12]
    73ba:	22d4      	movs	r2, #212	; 0xd4
    73bc:	589b      	ldr	r3, [r3, r2]
    73be:	2b00      	cmp	r3, #0
    73c0:	d106      	bne.n	73d0 <http_client_send_request+0x144>
			return -ENOMEM;
    73c2:	230c      	movs	r3, #12
    73c4:	425b      	negs	r3, r3
    73c6:	e0c1      	b.n	754c <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
    73c8:	68fb      	ldr	r3, [r7, #12]
    73ca:	22d4      	movs	r2, #212	; 0xd4
    73cc:	2100      	movs	r1, #0
    73ce:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
    73d0:	68fb      	ldr	r3, [r7, #12]
    73d2:	2241      	movs	r2, #65	; 0x41
    73d4:	5c99      	ldrb	r1, [r3, r2]
    73d6:	2001      	movs	r0, #1
    73d8:	4381      	bics	r1, r0
    73da:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
    73dc:	68fb      	ldr	r3, [r7, #12]
    73de:	2200      	movs	r2, #0
    73e0:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
    73e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    73e4:	781b      	ldrb	r3, [r3, #0]
    73e6:	2b2f      	cmp	r3, #47	; 0x2f
    73e8:	d107      	bne.n	73fa <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
    73ea:	68fb      	ldr	r3, [r7, #12]
    73ec:	3370      	adds	r3, #112	; 0x70
    73ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
    73f0:	0011      	movs	r1, r2
    73f2:	0018      	movs	r0, r3
    73f4:	4b5d      	ldr	r3, [pc, #372]	; (756c <http_client_send_request+0x2e0>)
    73f6:	4798      	blx	r3
    73f8:	e00f      	b.n	741a <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
    73fa:	68fb      	ldr	r3, [r7, #12]
    73fc:	2270      	movs	r2, #112	; 0x70
    73fe:	212f      	movs	r1, #47	; 0x2f
    7400:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
    7402:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7404:	781b      	ldrb	r3, [r3, #0]
    7406:	2b00      	cmp	r3, #0
    7408:	d007      	beq.n	741a <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
    740a:	68fb      	ldr	r3, [r7, #12]
    740c:	3370      	adds	r3, #112	; 0x70
    740e:	3301      	adds	r3, #1
    7410:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7412:	0011      	movs	r1, r2
    7414:	0018      	movs	r0, r3
    7416:	4b55      	ldr	r3, [pc, #340]	; (756c <http_client_send_request+0x2e0>)
    7418:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
    741a:	683b      	ldr	r3, [r7, #0]
    741c:	2b00      	cmp	r3, #0
    741e:	d007      	beq.n	7430 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    7420:	68fb      	ldr	r3, [r7, #12]
    7422:	33b0      	adds	r3, #176	; 0xb0
    7424:	6839      	ldr	r1, [r7, #0]
    7426:	2218      	movs	r2, #24
    7428:	0018      	movs	r0, r3
    742a:	4b51      	ldr	r3, [pc, #324]	; (7570 <http_client_send_request+0x2e4>)
    742c:	4798      	blx	r3
    742e:	e006      	b.n	743e <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    7430:	68fb      	ldr	r3, [r7, #12]
    7432:	33b0      	adds	r3, #176	; 0xb0
    7434:	2218      	movs	r2, #24
    7436:	2100      	movs	r1, #0
    7438:	0018      	movs	r0, r3
    743a:	4b4e      	ldr	r3, [pc, #312]	; (7574 <http_client_send_request+0x2e8>)
    743c:	4798      	blx	r3
	}

	module->req.method = method;
    743e:	68fb      	ldr	r3, [r7, #12]
    7440:	1dfa      	adds	r2, r7, #7
    7442:	21c8      	movs	r1, #200	; 0xc8
    7444:	7812      	ldrb	r2, [r2, #0]
    7446:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
    7448:	68fb      	ldr	r3, [r7, #12]
    744a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    744c:	2b01      	cmp	r3, #1
    744e:	d003      	beq.n	7458 <http_client_send_request+0x1cc>
    7450:	d316      	bcc.n	7480 <http_client_send_request+0x1f4>
    7452:	2b02      	cmp	r3, #2
    7454:	d004      	beq.n	7460 <http_client_send_request+0x1d4>
    7456:	e074      	b.n	7542 <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
    7458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    745a:	2b00      	cmp	r3, #0
    745c:	d100      	bne.n	7460 <http_client_send_request+0x1d4>
    745e:	e073      	b.n	7548 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
    7460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7462:	2b00      	cmp	r3, #0
    7464:	d107      	bne.n	7476 <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
    7466:	68fb      	ldr	r3, [r7, #12]
    7468:	2203      	movs	r2, #3
    746a:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
    746c:	68fb      	ldr	r3, [r7, #12]
    746e:	0018      	movs	r0, r3
    7470:	4b41      	ldr	r3, [pc, #260]	; (7578 <http_client_send_request+0x2ec>)
    7472:	4798      	blx	r3
			break;
    7474:	e069      	b.n	754a <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
    7476:	68fb      	ldr	r3, [r7, #12]
    7478:	2100      	movs	r1, #0
    747a:	0018      	movs	r0, r3
    747c:	4b3f      	ldr	r3, [pc, #252]	; (757c <http_client_send_request+0x2f0>)
    747e:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
    7480:	68fb      	ldr	r3, [r7, #12]
    7482:	2252      	movs	r2, #82	; 0x52
    7484:	5c9b      	ldrb	r3, [r3, r2]
    7486:	2b00      	cmp	r3, #0
    7488:	d007      	beq.n	749a <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
    748a:	2337      	movs	r3, #55	; 0x37
    748c:	18fb      	adds	r3, r7, r3
    748e:	2237      	movs	r2, #55	; 0x37
    7490:	18ba      	adds	r2, r7, r2
    7492:	7812      	ldrb	r2, [r2, #0]
    7494:	2101      	movs	r1, #1
    7496:	430a      	orrs	r2, r1
    7498:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    749a:	2337      	movs	r3, #55	; 0x37
    749c:	18fb      	adds	r3, r7, r3
    749e:	781b      	ldrb	r3, [r3, #0]
    74a0:	001a      	movs	r2, r3
    74a2:	2101      	movs	r1, #1
    74a4:	2002      	movs	r0, #2
    74a6:	4b36      	ldr	r3, [pc, #216]	; (7580 <http_client_send_request+0x2f4>)
    74a8:	4798      	blx	r3
    74aa:	0003      	movs	r3, r0
    74ac:	001a      	movs	r2, r3
    74ae:	68fb      	ldr	r3, [r7, #12]
    74b0:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
    74b2:	68fb      	ldr	r3, [r7, #12]
    74b4:	781b      	ldrb	r3, [r3, #0]
    74b6:	b25b      	sxtb	r3, r3
    74b8:	2b00      	cmp	r3, #0
    74ba:	db3f      	blt.n	753c <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
    74bc:	68fb      	ldr	r3, [r7, #12]
    74be:	781b      	ldrb	r3, [r3, #0]
    74c0:	b25b      	sxtb	r3, r3
    74c2:	001a      	movs	r2, r3
    74c4:	4b2f      	ldr	r3, [pc, #188]	; (7584 <http_client_send_request+0x2f8>)
    74c6:	0092      	lsls	r2, r2, #2
    74c8:	68f9      	ldr	r1, [r7, #12]
    74ca:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
    74cc:	68fb      	ldr	r3, [r7, #12]
    74ce:	3301      	adds	r3, #1
    74d0:	0018      	movs	r0, r3
    74d2:	4b2d      	ldr	r3, [pc, #180]	; (7588 <http_client_send_request+0x2fc>)
    74d4:	4798      	blx	r3
    74d6:	1e03      	subs	r3, r0, #0
    74d8:	d027      	beq.n	752a <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
    74da:	2314      	movs	r3, #20
    74dc:	18fb      	adds	r3, r7, r3
    74de:	2202      	movs	r2, #2
    74e0:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
    74e2:	68fb      	ldr	r3, [r7, #12]
    74e4:	2250      	movs	r2, #80	; 0x50
    74e6:	5a9b      	ldrh	r3, [r3, r2]
    74e8:	021b      	lsls	r3, r3, #8
    74ea:	b21a      	sxth	r2, r3
    74ec:	68fb      	ldr	r3, [r7, #12]
    74ee:	2150      	movs	r1, #80	; 0x50
    74f0:	5a5b      	ldrh	r3, [r3, r1]
    74f2:	0a1b      	lsrs	r3, r3, #8
    74f4:	b29b      	uxth	r3, r3
    74f6:	b21b      	sxth	r3, r3
    74f8:	4313      	orrs	r3, r2
    74fa:	b21b      	sxth	r3, r3
    74fc:	b29a      	uxth	r2, r3
    74fe:	2314      	movs	r3, #20
    7500:	18fb      	adds	r3, r7, r3
    7502:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    7504:	68fb      	ldr	r3, [r7, #12]
    7506:	3301      	adds	r3, #1
    7508:	0018      	movs	r0, r3
    750a:	4b20      	ldr	r3, [pc, #128]	; (758c <http_client_send_request+0x300>)
    750c:	4798      	blx	r3
    750e:	0002      	movs	r2, r0
    7510:	2314      	movs	r3, #20
    7512:	18fb      	adds	r3, r7, r3
    7514:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    7516:	68fb      	ldr	r3, [r7, #12]
    7518:	781b      	ldrb	r3, [r3, #0]
    751a:	b25b      	sxtb	r3, r3
    751c:	2214      	movs	r2, #20
    751e:	18b9      	adds	r1, r7, r2
    7520:	2210      	movs	r2, #16
    7522:	0018      	movs	r0, r3
    7524:	4b1a      	ldr	r3, [pc, #104]	; (7590 <http_client_send_request+0x304>)
    7526:	4798      	blx	r3
    7528:	e004      	b.n	7534 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
    752a:	68fb      	ldr	r3, [r7, #12]
    752c:	3301      	adds	r3, #1
    752e:	0018      	movs	r0, r3
    7530:	4b18      	ldr	r3, [pc, #96]	; (7594 <http_client_send_request+0x308>)
    7532:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
    7534:	68fb      	ldr	r3, [r7, #12]
    7536:	2201      	movs	r2, #1
    7538:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
    753a:	e006      	b.n	754a <http_client_send_request+0x2be>
			return -ENOSPC;
    753c:	231c      	movs	r3, #28
    753e:	425b      	negs	r3, r3
    7540:	e004      	b.n	754c <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
    7542:	230b      	movs	r3, #11
    7544:	425b      	negs	r3, r3
    7546:	e001      	b.n	754c <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
    7548:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
    754a:	2300      	movs	r3, #0
}
    754c:	0018      	movs	r0, r3
    754e:	46bd      	mov	sp, r7
    7550:	b00e      	add	sp, #56	; 0x38
    7552:	bdb0      	pop	{r4, r5, r7, pc}
    7554:	00010658 	.word	0x00010658
    7558:	0000e31d 	.word	0x0000e31d
    755c:	00010660 	.word	0x00010660
    7560:	0000e30f 	.word	0x0000e30f
    7564:	0000de01 	.word	0x0000de01
    7568:	0000e2d5 	.word	0x0000e2d5
    756c:	0000e2c5 	.word	0x0000e2c5
    7570:	0000de15 	.word	0x0000de15
    7574:	0000de4b 	.word	0x0000de4b
    7578:	000076ed 	.word	0x000076ed
    757c:	00007599 	.word	0x00007599
    7580:	00004fd5 	.word	0x00004fd5
    7584:	2000021c 	.word	0x2000021c
    7588:	000071f5 	.word	0x000071f5
    758c:	00005719 	.word	0x00005719
    7590:	000051e5 	.word	0x000051e5
    7594:	00005821 	.word	0x00005821

00007598 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
    7598:	b580      	push	{r7, lr}
    759a:	b086      	sub	sp, #24
    759c:	af00      	add	r7, sp, #0
    759e:	6078      	str	r0, [r7, #4]
    75a0:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
    75a2:	687b      	ldr	r3, [r7, #4]
    75a4:	22c0      	movs	r2, #192	; 0xc0
    75a6:	589b      	ldr	r3, [r3, r2]
    75a8:	2b00      	cmp	r3, #0
    75aa:	d007      	beq.n	75bc <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
    75ac:	687b      	ldr	r3, [r7, #4]
    75ae:	22c0      	movs	r2, #192	; 0xc0
    75b0:	589b      	ldr	r3, [r3, r2]
    75b2:	687a      	ldr	r2, [r7, #4]
    75b4:	21c4      	movs	r1, #196	; 0xc4
    75b6:	5852      	ldr	r2, [r2, r1]
    75b8:	0010      	movs	r0, r2
    75ba:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
    75bc:	687b      	ldr	r3, [r7, #4]
    75be:	33b0      	adds	r3, #176	; 0xb0
    75c0:	2218      	movs	r2, #24
    75c2:	2100      	movs	r1, #0
    75c4:	0018      	movs	r0, r3
    75c6:	4b24      	ldr	r3, [pc, #144]	; (7658 <_http_client_clear_conn+0xc0>)
    75c8:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    75ca:	687b      	ldr	r3, [r7, #4]
    75cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    75ce:	2b00      	cmp	r3, #0
    75d0:	d005      	beq.n	75de <_http_client_clear_conn+0x46>
		close(module->sock);
    75d2:	687b      	ldr	r3, [r7, #4]
    75d4:	781b      	ldrb	r3, [r3, #0]
    75d6:	b25b      	sxtb	r3, r3
    75d8:	0018      	movs	r0, r3
    75da:	4b20      	ldr	r3, [pc, #128]	; (765c <_http_client_clear_conn+0xc4>)
    75dc:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
    75de:	687b      	ldr	r3, [r7, #4]
    75e0:	781b      	ldrb	r3, [r3, #0]
    75e2:	b25b      	sxtb	r3, r3
    75e4:	001a      	movs	r2, r3
    75e6:	4b1e      	ldr	r3, [pc, #120]	; (7660 <_http_client_clear_conn+0xc8>)
    75e8:	0092      	lsls	r2, r2, #2
    75ea:	2100      	movs	r1, #0
    75ec:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
    75ee:	687b      	ldr	r3, [r7, #4]
    75f0:	336c      	adds	r3, #108	; 0x6c
    75f2:	226c      	movs	r2, #108	; 0x6c
    75f4:	2100      	movs	r1, #0
    75f6:	0018      	movs	r0, r3
    75f8:	4b17      	ldr	r3, [pc, #92]	; (7658 <_http_client_clear_conn+0xc0>)
    75fa:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    75fc:	687b      	ldr	r3, [r7, #4]
    75fe:	33d8      	adds	r3, #216	; 0xd8
    7600:	2210      	movs	r2, #16
    7602:	2100      	movs	r1, #0
    7604:	0018      	movs	r0, r3
    7606:	4b14      	ldr	r3, [pc, #80]	; (7658 <_http_client_clear_conn+0xc0>)
    7608:	4798      	blx	r3
	module->req.state = STATE_INIT;
    760a:	687b      	ldr	r3, [r7, #4]
    760c:	2200      	movs	r2, #0
    760e:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    7610:	687b      	ldr	r3, [r7, #4]
    7612:	22d8      	movs	r2, #216	; 0xd8
    7614:	2100      	movs	r1, #0
    7616:	5099      	str	r1, [r3, r2]

	module->sending = 0;
    7618:	687b      	ldr	r3, [r7, #4]
    761a:	2241      	movs	r2, #65	; 0x41
    761c:	5c99      	ldrb	r1, [r3, r2]
    761e:	2001      	movs	r0, #1
    7620:	4381      	bics	r1, r0
    7622:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
    7624:	687b      	ldr	r3, [r7, #4]
    7626:	2241      	movs	r2, #65	; 0x41
    7628:	5c99      	ldrb	r1, [r3, r2]
    762a:	2002      	movs	r0, #2
    762c:	4381      	bics	r1, r0
    762e:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
    7630:	230c      	movs	r3, #12
    7632:	18fb      	adds	r3, r7, r3
    7634:	683a      	ldr	r2, [r7, #0]
    7636:	601a      	str	r2, [r3, #0]
	if (module->cb) {
    7638:	687b      	ldr	r3, [r7, #4]
    763a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    763c:	2b00      	cmp	r3, #0
    763e:	d006      	beq.n	764e <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    7640:	687b      	ldr	r3, [r7, #4]
    7642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    7644:	220c      	movs	r2, #12
    7646:	18ba      	adds	r2, r7, r2
    7648:	6878      	ldr	r0, [r7, #4]
    764a:	2104      	movs	r1, #4
    764c:	4798      	blx	r3
	}
}
    764e:	46c0      	nop			; (mov r8, r8)
    7650:	46bd      	mov	sp, r7
    7652:	b006      	add	sp, #24
    7654:	bd80      	pop	{r7, pc}
    7656:	46c0      	nop			; (mov r8, r8)
    7658:	0000de4b 	.word	0x0000de4b
    765c:	000055dd 	.word	0x000055dd
    7660:	2000021c 	.word	0x2000021c

00007664 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    7664:	b590      	push	{r4, r7, lr}
    7666:	b087      	sub	sp, #28
    7668:	af00      	add	r7, sp, #0
    766a:	60f8      	str	r0, [r7, #12]
    766c:	60b9      	str	r1, [r7, #8]
    766e:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
    7670:	68fb      	ldr	r3, [r7, #12]
    7672:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
    7674:	697b      	ldr	r3, [r7, #20]
    7676:	2241      	movs	r2, #65	; 0x41
    7678:	5c99      	ldrb	r1, [r3, r2]
    767a:	2001      	movs	r0, #1
    767c:	4301      	orrs	r1, r0
    767e:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    7680:	697b      	ldr	r3, [r7, #20]
    7682:	2000      	movs	r0, #0
    7684:	5618      	ldrsb	r0, [r3, r0]
    7686:	687b      	ldr	r3, [r7, #4]
    7688:	b29a      	uxth	r2, r3
    768a:	68b9      	ldr	r1, [r7, #8]
    768c:	2300      	movs	r3, #0
    768e:	4c14      	ldr	r4, [pc, #80]	; (76e0 <_http_client_send_wait+0x7c>)
    7690:	47a0      	blx	r4
    7692:	0003      	movs	r3, r0
    7694:	613b      	str	r3, [r7, #16]
    7696:	693b      	ldr	r3, [r7, #16]
    7698:	2b00      	cmp	r3, #0
    769a:	da0f      	bge.n	76bc <_http_client_send_wait+0x58>
		module->sending = 0;
    769c:	697b      	ldr	r3, [r7, #20]
    769e:	2241      	movs	r2, #65	; 0x41
    76a0:	5c99      	ldrb	r1, [r3, r2]
    76a2:	2001      	movs	r0, #1
    76a4:	4381      	bics	r1, r0
    76a6:	5499      	strb	r1, [r3, r2]
		return result;
    76a8:	693b      	ldr	r3, [r7, #16]
    76aa:	e014      	b.n	76d6 <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
    76ac:	2000      	movs	r0, #0
    76ae:	4b0d      	ldr	r3, [pc, #52]	; (76e4 <_http_client_send_wait+0x80>)
    76b0:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
    76b2:	697b      	ldr	r3, [r7, #20]
    76b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    76b6:	0018      	movs	r0, r3
    76b8:	4b0b      	ldr	r3, [pc, #44]	; (76e8 <_http_client_send_wait+0x84>)
    76ba:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    76bc:	697b      	ldr	r3, [r7, #20]
    76be:	2241      	movs	r2, #65	; 0x41
    76c0:	5c9b      	ldrb	r3, [r3, r2]
    76c2:	2201      	movs	r2, #1
    76c4:	4013      	ands	r3, r2
    76c6:	b2db      	uxtb	r3, r3
    76c8:	2b00      	cmp	r3, #0
    76ca:	d003      	beq.n	76d4 <_http_client_send_wait+0x70>
    76cc:	697b      	ldr	r3, [r7, #20]
    76ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    76d0:	2b02      	cmp	r3, #2
    76d2:	d8eb      	bhi.n	76ac <_http_client_send_wait+0x48>
	}

	return 0;
    76d4:	2300      	movs	r3, #0
}
    76d6:	0018      	movs	r0, r3
    76d8:	46bd      	mov	sp, r7
    76da:	b007      	add	sp, #28
    76dc:	bd90      	pop	{r4, r7, pc}
    76de:	46c0      	nop			; (mov r8, r8)
    76e0:	000052f9 	.word	0x000052f9
    76e4:	00001f45 	.word	0x00001f45
    76e8:	0000895d 	.word	0x0000895d

000076ec <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    76ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    76ee:	b0a1      	sub	sp, #132	; 0x84
    76f0:	af02      	add	r7, sp, #8
    76f2:	61f8      	str	r0, [r7, #28]
    76f4:	466b      	mov	r3, sp
    76f6:	001e      	movs	r6, r3
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    76f8:	2318      	movs	r3, #24
    76fa:	2218      	movs	r2, #24
    76fc:	18ba      	adds	r2, r7, r2
    76fe:	18d2      	adds	r2, r2, r3
    7700:	4bba      	ldr	r3, [pc, #744]	; (79ec <_http_client_request+0x300>)
    7702:	0010      	movs	r0, r2
    7704:	0019      	movs	r1, r3
    7706:	2310      	movs	r3, #16
    7708:	001a      	movs	r2, r3
    770a:	4bb9      	ldr	r3, [pc, #740]	; (79f0 <_http_client_request+0x304>)
    770c:	4798      	blx	r3
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    770e:	69fb      	ldr	r3, [r7, #28]
    7710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    7712:	001a      	movs	r2, r3
    7714:	3a01      	subs	r2, #1
    7716:	66fa      	str	r2, [r7, #108]	; 0x6c
    7718:	001c      	movs	r4, r3
    771a:	2200      	movs	r2, #0
    771c:	0015      	movs	r5, r2
    771e:	0020      	movs	r0, r4
    7720:	0029      	movs	r1, r5
    7722:	0002      	movs	r2, r0
    7724:	0f52      	lsrs	r2, r2, #29
    7726:	000c      	movs	r4, r1
    7728:	00e4      	lsls	r4, r4, #3
    772a:	617c      	str	r4, [r7, #20]
    772c:	697c      	ldr	r4, [r7, #20]
    772e:	4314      	orrs	r4, r2
    7730:	617c      	str	r4, [r7, #20]
    7732:	0002      	movs	r2, r0
    7734:	00d2      	lsls	r2, r2, #3
    7736:	613a      	str	r2, [r7, #16]
    7738:	603b      	str	r3, [r7, #0]
    773a:	2200      	movs	r2, #0
    773c:	607a      	str	r2, [r7, #4]
    773e:	6838      	ldr	r0, [r7, #0]
    7740:	6879      	ldr	r1, [r7, #4]
    7742:	0002      	movs	r2, r0
    7744:	0f52      	lsrs	r2, r2, #29
    7746:	000c      	movs	r4, r1
    7748:	00e4      	lsls	r4, r4, #3
    774a:	60fc      	str	r4, [r7, #12]
    774c:	68fc      	ldr	r4, [r7, #12]
    774e:	4314      	orrs	r4, r2
    7750:	60fc      	str	r4, [r7, #12]
    7752:	0002      	movs	r2, r0
    7754:	00d2      	lsls	r2, r2, #3
    7756:	60ba      	str	r2, [r7, #8]
    7758:	3307      	adds	r3, #7
    775a:	08db      	lsrs	r3, r3, #3
    775c:	00db      	lsls	r3, r3, #3
    775e:	466a      	mov	r2, sp
    7760:	1ad3      	subs	r3, r2, r3
    7762:	469d      	mov	sp, r3
    7764:	ab02      	add	r3, sp, #8
    7766:	3300      	adds	r3, #0
    7768:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
    776a:	69fb      	ldr	r3, [r7, #28]
    776c:	2b00      	cmp	r3, #0
    776e:	d100      	bne.n	7772 <_http_client_request+0x86>
    7770:	e346      	b.n	7e00 <_http_client_request+0x714>
		return;
	}

	if (module->sending != 0) {
    7772:	69fb      	ldr	r3, [r7, #28]
    7774:	2241      	movs	r2, #65	; 0x41
    7776:	5c9b      	ldrb	r3, [r3, r2]
    7778:	2201      	movs	r2, #1
    777a:	4013      	ands	r3, r2
    777c:	b2db      	uxtb	r3, r3
    777e:	2b00      	cmp	r3, #0
    7780:	d000      	beq.n	7784 <_http_client_request+0x98>
    7782:	e33f      	b.n	7e04 <_http_client_request+0x718>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
    7784:	69fb      	ldr	r3, [r7, #28]
    7786:	33b0      	adds	r3, #176	; 0xb0
    7788:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
    778a:	69fb      	ldr	r3, [r7, #28]
    778c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    778e:	2b03      	cmp	r3, #3
    7790:	d003      	beq.n	779a <_http_client_request+0xae>
    7792:	2b04      	cmp	r3, #4
    7794:	d100      	bne.n	7798 <_http_client_request+0xac>
    7796:	e1b4      	b.n	7b02 <_http_client_request+0x416>
		}

		break;
	default:
		/* Invalid status. */
		break;
    7798:	e330      	b.n	7dfc <_http_client_request+0x710>
		module->req.content_length = 0;
    779a:	69fb      	ldr	r3, [r7, #28]
    779c:	22cc      	movs	r2, #204	; 0xcc
    779e:	2100      	movs	r1, #0
    77a0:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
    77a2:	69fb      	ldr	r3, [r7, #28]
    77a4:	22d0      	movs	r2, #208	; 0xd0
    77a6:	2100      	movs	r1, #0
    77a8:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    77aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    77ac:	69fb      	ldr	r3, [r7, #28]
    77ae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    77b0:	4c90      	ldr	r4, [pc, #576]	; (79f4 <_http_client_request+0x308>)
    77b2:	2334      	movs	r3, #52	; 0x34
    77b4:	2018      	movs	r0, #24
    77b6:	1838      	adds	r0, r7, r0
    77b8:	18c0      	adds	r0, r0, r3
    77ba:	69fb      	ldr	r3, [r7, #28]
    77bc:	9300      	str	r3, [sp, #0]
    77be:	0023      	movs	r3, r4
    77c0:	4c8d      	ldr	r4, [pc, #564]	; (79f8 <_http_client_request+0x30c>)
    77c2:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
    77c4:	69fb      	ldr	r3, [r7, #28]
    77c6:	22c8      	movs	r2, #200	; 0xc8
    77c8:	5c9b      	ldrb	r3, [r3, r2]
    77ca:	2b01      	cmp	r3, #1
    77cc:	d10a      	bne.n	77e4 <_http_client_request+0xf8>
			stream_writer_send_buffer(&writer, "GET ", 4);
    77ce:	498b      	ldr	r1, [pc, #556]	; (79fc <_http_client_request+0x310>)
    77d0:	2334      	movs	r3, #52	; 0x34
    77d2:	2218      	movs	r2, #24
    77d4:	4694      	mov	ip, r2
    77d6:	44bc      	add	ip, r7
    77d8:	4463      	add	r3, ip
    77da:	2204      	movs	r2, #4
    77dc:	0018      	movs	r0, r3
    77de:	4b88      	ldr	r3, [pc, #544]	; (7a00 <_http_client_request+0x314>)
    77e0:	4798      	blx	r3
    77e2:	e04e      	b.n	7882 <_http_client_request+0x196>
		} else if (module->req.method == HTTP_METHOD_POST) {
    77e4:	69fb      	ldr	r3, [r7, #28]
    77e6:	22c8      	movs	r2, #200	; 0xc8
    77e8:	5c9b      	ldrb	r3, [r3, r2]
    77ea:	2b02      	cmp	r3, #2
    77ec:	d10a      	bne.n	7804 <_http_client_request+0x118>
			stream_writer_send_buffer(&writer, "POST ", 5);
    77ee:	4985      	ldr	r1, [pc, #532]	; (7a04 <_http_client_request+0x318>)
    77f0:	2334      	movs	r3, #52	; 0x34
    77f2:	2218      	movs	r2, #24
    77f4:	4694      	mov	ip, r2
    77f6:	44bc      	add	ip, r7
    77f8:	4463      	add	r3, ip
    77fa:	2205      	movs	r2, #5
    77fc:	0018      	movs	r0, r3
    77fe:	4b80      	ldr	r3, [pc, #512]	; (7a00 <_http_client_request+0x314>)
    7800:	4798      	blx	r3
    7802:	e03e      	b.n	7882 <_http_client_request+0x196>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    7804:	69fb      	ldr	r3, [r7, #28]
    7806:	22c8      	movs	r2, #200	; 0xc8
    7808:	5c9b      	ldrb	r3, [r3, r2]
    780a:	2b03      	cmp	r3, #3
    780c:	d10a      	bne.n	7824 <_http_client_request+0x138>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    780e:	497e      	ldr	r1, [pc, #504]	; (7a08 <_http_client_request+0x31c>)
    7810:	2334      	movs	r3, #52	; 0x34
    7812:	2218      	movs	r2, #24
    7814:	4694      	mov	ip, r2
    7816:	44bc      	add	ip, r7
    7818:	4463      	add	r3, ip
    781a:	2207      	movs	r2, #7
    781c:	0018      	movs	r0, r3
    781e:	4b78      	ldr	r3, [pc, #480]	; (7a00 <_http_client_request+0x314>)
    7820:	4798      	blx	r3
    7822:	e02e      	b.n	7882 <_http_client_request+0x196>
		} else if (module->req.method == HTTP_METHOD_PUT) {
    7824:	69fb      	ldr	r3, [r7, #28]
    7826:	22c8      	movs	r2, #200	; 0xc8
    7828:	5c9b      	ldrb	r3, [r3, r2]
    782a:	2b04      	cmp	r3, #4
    782c:	d10a      	bne.n	7844 <_http_client_request+0x158>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    782e:	4977      	ldr	r1, [pc, #476]	; (7a0c <_http_client_request+0x320>)
    7830:	2334      	movs	r3, #52	; 0x34
    7832:	2218      	movs	r2, #24
    7834:	4694      	mov	ip, r2
    7836:	44bc      	add	ip, r7
    7838:	4463      	add	r3, ip
    783a:	2204      	movs	r2, #4
    783c:	0018      	movs	r0, r3
    783e:	4b70      	ldr	r3, [pc, #448]	; (7a00 <_http_client_request+0x314>)
    7840:	4798      	blx	r3
    7842:	e01e      	b.n	7882 <_http_client_request+0x196>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    7844:	69fb      	ldr	r3, [r7, #28]
    7846:	22c8      	movs	r2, #200	; 0xc8
    7848:	5c9b      	ldrb	r3, [r3, r2]
    784a:	2b05      	cmp	r3, #5
    784c:	d10a      	bne.n	7864 <_http_client_request+0x178>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    784e:	4970      	ldr	r1, [pc, #448]	; (7a10 <_http_client_request+0x324>)
    7850:	2334      	movs	r3, #52	; 0x34
    7852:	2218      	movs	r2, #24
    7854:	4694      	mov	ip, r2
    7856:	44bc      	add	ip, r7
    7858:	4463      	add	r3, ip
    785a:	2208      	movs	r2, #8
    785c:	0018      	movs	r0, r3
    785e:	4b68      	ldr	r3, [pc, #416]	; (7a00 <_http_client_request+0x314>)
    7860:	4798      	blx	r3
    7862:	e00e      	b.n	7882 <_http_client_request+0x196>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    7864:	69fb      	ldr	r3, [r7, #28]
    7866:	22c8      	movs	r2, #200	; 0xc8
    7868:	5c9b      	ldrb	r3, [r3, r2]
    786a:	2b06      	cmp	r3, #6
    786c:	d109      	bne.n	7882 <_http_client_request+0x196>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    786e:	4969      	ldr	r1, [pc, #420]	; (7a14 <_http_client_request+0x328>)
    7870:	2334      	movs	r3, #52	; 0x34
    7872:	2218      	movs	r2, #24
    7874:	4694      	mov	ip, r2
    7876:	44bc      	add	ip, r7
    7878:	4463      	add	r3, ip
    787a:	2205      	movs	r2, #5
    787c:	0018      	movs	r0, r3
    787e:	4b60      	ldr	r3, [pc, #384]	; (7a00 <_http_client_request+0x314>)
    7880:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    7882:	69fb      	ldr	r3, [r7, #28]
    7884:	3370      	adds	r3, #112	; 0x70
    7886:	001c      	movs	r4, r3
    7888:	69fb      	ldr	r3, [r7, #28]
    788a:	3370      	adds	r3, #112	; 0x70
    788c:	0018      	movs	r0, r3
    788e:	4b62      	ldr	r3, [pc, #392]	; (7a18 <_http_client_request+0x32c>)
    7890:	4798      	blx	r3
    7892:	0002      	movs	r2, r0
    7894:	2334      	movs	r3, #52	; 0x34
    7896:	2118      	movs	r1, #24
    7898:	468c      	mov	ip, r1
    789a:	44bc      	add	ip, r7
    789c:	4463      	add	r3, ip
    789e:	0021      	movs	r1, r4
    78a0:	0018      	movs	r0, r3
    78a2:	4b57      	ldr	r3, [pc, #348]	; (7a00 <_http_client_request+0x314>)
    78a4:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    78a6:	495d      	ldr	r1, [pc, #372]	; (7a1c <_http_client_request+0x330>)
    78a8:	2334      	movs	r3, #52	; 0x34
    78aa:	2218      	movs	r2, #24
    78ac:	4694      	mov	ip, r2
    78ae:	44bc      	add	ip, r7
    78b0:	4463      	add	r3, ip
    78b2:	220b      	movs	r2, #11
    78b4:	0018      	movs	r0, r3
    78b6:	4b52      	ldr	r3, [pc, #328]	; (7a00 <_http_client_request+0x314>)
    78b8:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    78ba:	4959      	ldr	r1, [pc, #356]	; (7a20 <_http_client_request+0x334>)
    78bc:	2334      	movs	r3, #52	; 0x34
    78be:	2218      	movs	r2, #24
    78c0:	4694      	mov	ip, r2
    78c2:	44bc      	add	ip, r7
    78c4:	4463      	add	r3, ip
    78c6:	220c      	movs	r2, #12
    78c8:	0018      	movs	r0, r3
    78ca:	4b4d      	ldr	r3, [pc, #308]	; (7a00 <_http_client_request+0x314>)
    78cc:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    78ce:	69fb      	ldr	r3, [r7, #28]
    78d0:	6e9c      	ldr	r4, [r3, #104]	; 0x68
    78d2:	69fb      	ldr	r3, [r7, #28]
    78d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    78d6:	0018      	movs	r0, r3
    78d8:	4b4f      	ldr	r3, [pc, #316]	; (7a18 <_http_client_request+0x32c>)
    78da:	4798      	blx	r3
    78dc:	0002      	movs	r2, r0
    78de:	2334      	movs	r3, #52	; 0x34
    78e0:	2118      	movs	r1, #24
    78e2:	468c      	mov	ip, r1
    78e4:	44bc      	add	ip, r7
    78e6:	4463      	add	r3, ip
    78e8:	0021      	movs	r1, r4
    78ea:	0018      	movs	r0, r3
    78ec:	4b44      	ldr	r3, [pc, #272]	; (7a00 <_http_client_request+0x314>)
    78ee:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    78f0:	494c      	ldr	r1, [pc, #304]	; (7a24 <_http_client_request+0x338>)
    78f2:	2334      	movs	r3, #52	; 0x34
    78f4:	2218      	movs	r2, #24
    78f6:	4694      	mov	ip, r2
    78f8:	44bc      	add	ip, r7
    78fa:	4463      	add	r3, ip
    78fc:	2202      	movs	r2, #2
    78fe:	0018      	movs	r0, r3
    7900:	4b3f      	ldr	r3, [pc, #252]	; (7a00 <_http_client_request+0x314>)
    7902:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    7904:	4948      	ldr	r1, [pc, #288]	; (7a28 <_http_client_request+0x33c>)
    7906:	2334      	movs	r3, #52	; 0x34
    7908:	2218      	movs	r2, #24
    790a:	4694      	mov	ip, r2
    790c:	44bc      	add	ip, r7
    790e:	4463      	add	r3, ip
    7910:	2206      	movs	r2, #6
    7912:	0018      	movs	r0, r3
    7914:	4b3a      	ldr	r3, [pc, #232]	; (7a00 <_http_client_request+0x314>)
    7916:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    7918:	69fb      	ldr	r3, [r7, #28]
    791a:	1c5c      	adds	r4, r3, #1
    791c:	69fb      	ldr	r3, [r7, #28]
    791e:	3301      	adds	r3, #1
    7920:	0018      	movs	r0, r3
    7922:	4b3d      	ldr	r3, [pc, #244]	; (7a18 <_http_client_request+0x32c>)
    7924:	4798      	blx	r3
    7926:	0002      	movs	r2, r0
    7928:	2334      	movs	r3, #52	; 0x34
    792a:	2118      	movs	r1, #24
    792c:	468c      	mov	ip, r1
    792e:	44bc      	add	ip, r7
    7930:	4463      	add	r3, ip
    7932:	0021      	movs	r1, r4
    7934:	0018      	movs	r0, r3
    7936:	4b32      	ldr	r3, [pc, #200]	; (7a00 <_http_client_request+0x314>)
    7938:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    793a:	493a      	ldr	r1, [pc, #232]	; (7a24 <_http_client_request+0x338>)
    793c:	2334      	movs	r3, #52	; 0x34
    793e:	2218      	movs	r2, #24
    7940:	4694      	mov	ip, r2
    7942:	44bc      	add	ip, r7
    7944:	4463      	add	r3, ip
    7946:	2202      	movs	r2, #2
    7948:	0018      	movs	r0, r3
    794a:	4b2d      	ldr	r3, [pc, #180]	; (7a00 <_http_client_request+0x314>)
    794c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    794e:	4937      	ldr	r1, [pc, #220]	; (7a2c <_http_client_request+0x340>)
    7950:	2334      	movs	r3, #52	; 0x34
    7952:	2218      	movs	r2, #24
    7954:	4694      	mov	ip, r2
    7956:	44bc      	add	ip, r7
    7958:	4463      	add	r3, ip
    795a:	2218      	movs	r2, #24
    795c:	0018      	movs	r0, r3
    795e:	4b28      	ldr	r3, [pc, #160]	; (7a00 <_http_client_request+0x314>)
    7960:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    7962:	4933      	ldr	r1, [pc, #204]	; (7a30 <_http_client_request+0x344>)
    7964:	2334      	movs	r3, #52	; 0x34
    7966:	2218      	movs	r2, #24
    7968:	4694      	mov	ip, r2
    796a:	44bc      	add	ip, r7
    796c:	4463      	add	r3, ip
    796e:	2213      	movs	r2, #19
    7970:	0018      	movs	r0, r3
    7972:	4b23      	ldr	r3, [pc, #140]	; (7a00 <_http_client_request+0x314>)
    7974:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    7976:	492f      	ldr	r1, [pc, #188]	; (7a34 <_http_client_request+0x348>)
    7978:	2334      	movs	r3, #52	; 0x34
    797a:	2218      	movs	r2, #24
    797c:	4694      	mov	ip, r2
    797e:	44bc      	add	ip, r7
    7980:	4463      	add	r3, ip
    7982:	2217      	movs	r2, #23
    7984:	0018      	movs	r0, r3
    7986:	4b1e      	ldr	r3, [pc, #120]	; (7a00 <_http_client_request+0x314>)
    7988:	4798      	blx	r3
		if (entity->read != NULL) {
    798a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    798c:	68db      	ldr	r3, [r3, #12]
    798e:	2b00      	cmp	r3, #0
    7990:	d100      	bne.n	7994 <_http_client_request+0x2a8>
    7992:	e089      	b.n	7aa8 <_http_client_request+0x3bc>
			if (entity->is_chunked) {
    7994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7996:	781b      	ldrb	r3, [r3, #0]
    7998:	2b00      	cmp	r3, #0
    799a:	d00f      	beq.n	79bc <_http_client_request+0x2d0>
				module->req.content_length = -1;
    799c:	69fb      	ldr	r3, [r7, #28]
    799e:	21cc      	movs	r1, #204	; 0xcc
    79a0:	2201      	movs	r2, #1
    79a2:	4252      	negs	r2, r2
    79a4:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    79a6:	4924      	ldr	r1, [pc, #144]	; (7a38 <_http_client_request+0x34c>)
    79a8:	2334      	movs	r3, #52	; 0x34
    79aa:	2218      	movs	r2, #24
    79ac:	4694      	mov	ip, r2
    79ae:	44bc      	add	ip, r7
    79b0:	4463      	add	r3, ip
    79b2:	221c      	movs	r2, #28
    79b4:	0018      	movs	r0, r3
    79b6:	4b12      	ldr	r3, [pc, #72]	; (7a00 <_http_client_request+0x314>)
    79b8:	4798      	blx	r3
    79ba:	e075      	b.n	7aa8 <_http_client_request+0x3bc>
			} else if(entity->get_contents_length) {
    79bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    79be:	689b      	ldr	r3, [r3, #8]
    79c0:	2b00      	cmp	r3, #0
    79c2:	d071      	beq.n	7aa8 <_http_client_request+0x3bc>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    79c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    79c6:	689a      	ldr	r2, [r3, #8]
    79c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    79ca:	695b      	ldr	r3, [r3, #20]
    79cc:	0018      	movs	r0, r3
    79ce:	4790      	blx	r2
    79d0:	0001      	movs	r1, r0
    79d2:	69fb      	ldr	r3, [r7, #28]
    79d4:	22cc      	movs	r2, #204	; 0xcc
    79d6:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
    79d8:	69fb      	ldr	r3, [r7, #28]
    79da:	22cc      	movs	r2, #204	; 0xcc
    79dc:	589b      	ldr	r3, [r3, r2]
    79de:	2b00      	cmp	r3, #0
    79e0:	da2c      	bge.n	7a3c <_http_client_request+0x350>
					module->req.content_length = 0;
    79e2:	69fb      	ldr	r3, [r7, #28]
    79e4:	22cc      	movs	r2, #204	; 0xcc
    79e6:	2100      	movs	r1, #0
    79e8:	5099      	str	r1, [r3, r2]
    79ea:	e05d      	b.n	7aa8 <_http_client_request+0x3bc>
    79ec:	00010748 	.word	0x00010748
    79f0:	0000de15 	.word	0x0000de15
    79f4:	00007665 	.word	0x00007665
    79f8:	000085b9 	.word	0x000085b9
    79fc:	0001066c 	.word	0x0001066c
    7a00:	00008639 	.word	0x00008639
    7a04:	00010674 	.word	0x00010674
    7a08:	0001067c 	.word	0x0001067c
    7a0c:	00010684 	.word	0x00010684
    7a10:	0001068c 	.word	0x0001068c
    7a14:	00010698 	.word	0x00010698
    7a18:	0000e30f 	.word	0x0000e30f
    7a1c:	000106a0 	.word	0x000106a0
    7a20:	000106ac 	.word	0x000106ac
    7a24:	000106bc 	.word	0x000106bc
    7a28:	000106c0 	.word	0x000106c0
    7a2c:	000106c8 	.word	0x000106c8
    7a30:	000106e4 	.word	0x000106e4
    7a34:	000106f8 	.word	0x000106f8
    7a38:	00010710 	.word	0x00010710
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    7a3c:	69fb      	ldr	r3, [r7, #28]
    7a3e:	22cc      	movs	r2, #204	; 0xcc
    7a40:	589b      	ldr	r3, [r3, r2]
    7a42:	001a      	movs	r2, r3
    7a44:	49e0      	ldr	r1, [pc, #896]	; (7dc8 <_http_client_request+0x6dc>)
    7a46:	2328      	movs	r3, #40	; 0x28
    7a48:	2018      	movs	r0, #24
    7a4a:	4684      	mov	ip, r0
    7a4c:	44bc      	add	ip, r7
    7a4e:	4463      	add	r3, ip
    7a50:	0018      	movs	r0, r3
    7a52:	4bde      	ldr	r3, [pc, #888]	; (7dcc <_http_client_request+0x6e0>)
    7a54:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    7a56:	49de      	ldr	r1, [pc, #888]	; (7dd0 <_http_client_request+0x6e4>)
    7a58:	2334      	movs	r3, #52	; 0x34
    7a5a:	2218      	movs	r2, #24
    7a5c:	4694      	mov	ip, r2
    7a5e:	44bc      	add	ip, r7
    7a60:	4463      	add	r3, ip
    7a62:	2210      	movs	r2, #16
    7a64:	0018      	movs	r0, r3
    7a66:	4bdb      	ldr	r3, [pc, #876]	; (7dd4 <_http_client_request+0x6e8>)
    7a68:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
    7a6a:	2328      	movs	r3, #40	; 0x28
    7a6c:	2218      	movs	r2, #24
    7a6e:	4694      	mov	ip, r2
    7a70:	44bc      	add	ip, r7
    7a72:	4463      	add	r3, ip
    7a74:	0018      	movs	r0, r3
    7a76:	4bd8      	ldr	r3, [pc, #864]	; (7dd8 <_http_client_request+0x6ec>)
    7a78:	4798      	blx	r3
    7a7a:	0002      	movs	r2, r0
    7a7c:	2328      	movs	r3, #40	; 0x28
    7a7e:	2118      	movs	r1, #24
    7a80:	1879      	adds	r1, r7, r1
    7a82:	18c9      	adds	r1, r1, r3
    7a84:	2334      	movs	r3, #52	; 0x34
    7a86:	2018      	movs	r0, #24
    7a88:	4684      	mov	ip, r0
    7a8a:	44bc      	add	ip, r7
    7a8c:	4463      	add	r3, ip
    7a8e:	0018      	movs	r0, r3
    7a90:	4bd0      	ldr	r3, [pc, #832]	; (7dd4 <_http_client_request+0x6e8>)
    7a92:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    7a94:	49d1      	ldr	r1, [pc, #836]	; (7ddc <_http_client_request+0x6f0>)
    7a96:	2334      	movs	r3, #52	; 0x34
    7a98:	2218      	movs	r2, #24
    7a9a:	4694      	mov	ip, r2
    7a9c:	44bc      	add	ip, r7
    7a9e:	4463      	add	r3, ip
    7aa0:	2202      	movs	r2, #2
    7aa2:	0018      	movs	r0, r3
    7aa4:	4bcb      	ldr	r3, [pc, #812]	; (7dd4 <_http_client_request+0x6e8>)
    7aa6:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
    7aa8:	69fb      	ldr	r3, [r7, #28]
    7aaa:	22d4      	movs	r2, #212	; 0xd4
    7aac:	589b      	ldr	r3, [r3, r2]
    7aae:	2b00      	cmp	r3, #0
    7ab0:	d012      	beq.n	7ad8 <_http_client_request+0x3ec>
				module->req.ext_header,
    7ab2:	69fb      	ldr	r3, [r7, #28]
    7ab4:	22d4      	movs	r2, #212	; 0xd4
    7ab6:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
    7ab8:	69fb      	ldr	r3, [r7, #28]
    7aba:	22d4      	movs	r2, #212	; 0xd4
    7abc:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
    7abe:	0018      	movs	r0, r3
    7ac0:	4bc5      	ldr	r3, [pc, #788]	; (7dd8 <_http_client_request+0x6ec>)
    7ac2:	4798      	blx	r3
    7ac4:	0002      	movs	r2, r0
    7ac6:	2334      	movs	r3, #52	; 0x34
    7ac8:	2118      	movs	r1, #24
    7aca:	468c      	mov	ip, r1
    7acc:	44bc      	add	ip, r7
    7ace:	4463      	add	r3, ip
    7ad0:	0021      	movs	r1, r4
    7ad2:	0018      	movs	r0, r3
    7ad4:	4bbf      	ldr	r3, [pc, #764]	; (7dd4 <_http_client_request+0x6e8>)
    7ad6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    7ad8:	49c0      	ldr	r1, [pc, #768]	; (7ddc <_http_client_request+0x6f0>)
    7ada:	2334      	movs	r3, #52	; 0x34
    7adc:	2218      	movs	r2, #24
    7ade:	4694      	mov	ip, r2
    7ae0:	44bc      	add	ip, r7
    7ae2:	4463      	add	r3, ip
    7ae4:	2202      	movs	r2, #2
    7ae6:	0018      	movs	r0, r3
    7ae8:	4bba      	ldr	r3, [pc, #744]	; (7dd4 <_http_client_request+0x6e8>)
    7aea:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    7aec:	2334      	movs	r3, #52	; 0x34
    7aee:	2218      	movs	r2, #24
    7af0:	4694      	mov	ip, r2
    7af2:	44bc      	add	ip, r7
    7af4:	4463      	add	r3, ip
    7af6:	0018      	movs	r0, r3
    7af8:	4bb9      	ldr	r3, [pc, #740]	; (7de0 <_http_client_request+0x6f4>)
    7afa:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
    7afc:	69fb      	ldr	r3, [r7, #28]
    7afe:	2204      	movs	r2, #4
    7b00:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
    7b02:	69fb      	ldr	r3, [r7, #28]
    7b04:	22cc      	movs	r2, #204	; 0xcc
    7b06:	589b      	ldr	r3, [r3, r2]
    7b08:	2b00      	cmp	r3, #0
    7b0a:	db00      	blt.n	7b0e <_http_client_request+0x422>
    7b0c:	e0c6      	b.n	7c9c <_http_client_request+0x5b0>
    7b0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7b10:	68db      	ldr	r3, [r3, #12]
    7b12:	2b00      	cmp	r3, #0
    7b14:	d100      	bne.n	7b18 <_http_client_request+0x42c>
    7b16:	e0c1      	b.n	7c9c <_http_client_request+0x5b0>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    7b18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7b1a:	68dc      	ldr	r4, [r3, #12]
    7b1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7b1e:	6958      	ldr	r0, [r3, #20]
    7b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    7b22:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    7b24:	69fb      	ldr	r3, [r7, #28]
    7b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    7b28:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    7b2a:	69fb      	ldr	r3, [r7, #28]
    7b2c:	22d0      	movs	r2, #208	; 0xd0
    7b2e:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    7b30:	002a      	movs	r2, r5
    7b32:	47a0      	blx	r4
    7b34:	0003      	movs	r3, r0
    7b36:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
    7b38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7b3a:	2b00      	cmp	r3, #0
    7b3c:	da01      	bge.n	7b42 <_http_client_request+0x456>
				size = 0;
    7b3e:	2300      	movs	r3, #0
    7b40:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    7b42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    7b44:	220a      	movs	r2, #10
    7b46:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    7b48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    7b4a:	220d      	movs	r2, #13
    7b4c:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    7b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7b50:	3305      	adds	r3, #5
    7b52:	6eba      	ldr	r2, [r7, #104]	; 0x68
    7b54:	210d      	movs	r1, #13
    7b56:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    7b58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7b5a:	3306      	adds	r3, #6
    7b5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
    7b5e:	210a      	movs	r1, #10
    7b60:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
    7b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7b64:	2b00      	cmp	r3, #0
    7b66:	db14      	blt.n	7b92 <_http_client_request+0x4a6>
				ptr = buffer + 2;
    7b68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    7b6a:	3302      	adds	r3, #2
    7b6c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
    7b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7b70:	4a9c      	ldr	r2, [pc, #624]	; (7de4 <_http_client_request+0x6f8>)
    7b72:	4013      	ands	r3, r2
    7b74:	d504      	bpl.n	7b80 <_http_client_request+0x494>
    7b76:	3b01      	subs	r3, #1
    7b78:	2210      	movs	r2, #16
    7b7a:	4252      	negs	r2, r2
    7b7c:	4313      	orrs	r3, r2
    7b7e:	3301      	adds	r3, #1
    7b80:	001a      	movs	r2, r3
    7b82:	2318      	movs	r3, #24
    7b84:	2118      	movs	r1, #24
    7b86:	468c      	mov	ip, r1
    7b88:	44bc      	add	ip, r7
    7b8a:	4463      	add	r3, ip
    7b8c:	5c9a      	ldrb	r2, [r3, r2]
    7b8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    7b90:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
    7b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7b94:	2b0f      	cmp	r3, #15
    7b96:	dd19      	ble.n	7bcc <_http_client_request+0x4e0>
				ptr = buffer + 1;
    7b98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    7b9a:	3301      	adds	r3, #1
    7b9c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
    7b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7ba0:	2b00      	cmp	r3, #0
    7ba2:	da00      	bge.n	7ba6 <_http_client_request+0x4ba>
    7ba4:	330f      	adds	r3, #15
    7ba6:	111b      	asrs	r3, r3, #4
    7ba8:	001a      	movs	r2, r3
    7baa:	4b8e      	ldr	r3, [pc, #568]	; (7de4 <_http_client_request+0x6f8>)
    7bac:	4013      	ands	r3, r2
    7bae:	d504      	bpl.n	7bba <_http_client_request+0x4ce>
    7bb0:	3b01      	subs	r3, #1
    7bb2:	2210      	movs	r2, #16
    7bb4:	4252      	negs	r2, r2
    7bb6:	4313      	orrs	r3, r2
    7bb8:	3301      	adds	r3, #1
    7bba:	001a      	movs	r2, r3
    7bbc:	2318      	movs	r3, #24
    7bbe:	2118      	movs	r1, #24
    7bc0:	468c      	mov	ip, r1
    7bc2:	44bc      	add	ip, r7
    7bc4:	4463      	add	r3, ip
    7bc6:	5c9a      	ldrb	r2, [r3, r2]
    7bc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    7bca:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
    7bcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7bce:	2bff      	cmp	r3, #255	; 0xff
    7bd0:	dd18      	ble.n	7c04 <_http_client_request+0x518>
				ptr = buffer;
    7bd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    7bd4:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
    7bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7bd8:	2b00      	cmp	r3, #0
    7bda:	da00      	bge.n	7bde <_http_client_request+0x4f2>
    7bdc:	33ff      	adds	r3, #255	; 0xff
    7bde:	121b      	asrs	r3, r3, #8
    7be0:	001a      	movs	r2, r3
    7be2:	4b80      	ldr	r3, [pc, #512]	; (7de4 <_http_client_request+0x6f8>)
    7be4:	4013      	ands	r3, r2
    7be6:	d504      	bpl.n	7bf2 <_http_client_request+0x506>
    7be8:	3b01      	subs	r3, #1
    7bea:	2210      	movs	r2, #16
    7bec:	4252      	negs	r2, r2
    7bee:	4313      	orrs	r3, r2
    7bf0:	3301      	adds	r3, #1
    7bf2:	001a      	movs	r2, r3
    7bf4:	2318      	movs	r3, #24
    7bf6:	2118      	movs	r1, #24
    7bf8:	468c      	mov	ip, r1
    7bfa:	44bc      	add	ip, r7
    7bfc:	4463      	add	r3, ip
    7bfe:	5c9a      	ldrb	r2, [r3, r2]
    7c00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    7c02:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    7c04:	69fb      	ldr	r3, [r7, #28]
    7c06:	2000      	movs	r0, #0
    7c08:	5618      	ldrsb	r0, [r3, r0]
    7c0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    7c0c:	3303      	adds	r3, #3
    7c0e:	001a      	movs	r2, r3
    7c10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    7c12:	1ad3      	subs	r3, r2, r3
    7c14:	b29a      	uxth	r2, r3
    7c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7c18:	b29b      	uxth	r3, r3
    7c1a:	18d3      	adds	r3, r2, r3
    7c1c:	b29b      	uxth	r3, r3
    7c1e:	3304      	adds	r3, #4
    7c20:	b29a      	uxth	r2, r3
    7c22:	6f39      	ldr	r1, [r7, #112]	; 0x70
    7c24:	2300      	movs	r3, #0
    7c26:	4c70      	ldr	r4, [pc, #448]	; (7de8 <_http_client_request+0x6fc>)
    7c28:	47a0      	blx	r4
    7c2a:	0003      	movs	r3, r0
    7c2c:	663b      	str	r3, [r7, #96]	; 0x60
    7c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7c30:	2b00      	cmp	r3, #0
    7c32:	da07      	bge.n	7c44 <_http_client_request+0x558>
				_http_client_clear_conn(module, -EIO);
    7c34:	2305      	movs	r3, #5
    7c36:	425a      	negs	r2, r3
    7c38:	69fb      	ldr	r3, [r7, #28]
    7c3a:	0011      	movs	r1, r2
    7c3c:	0018      	movs	r0, r3
    7c3e:	4b6b      	ldr	r3, [pc, #428]	; (7dec <_http_client_request+0x700>)
    7c40:	4798      	blx	r3
				return;
    7c42:	e0e0      	b.n	7e06 <_http_client_request+0x71a>
			module->req.sent_length += size;
    7c44:	69fb      	ldr	r3, [r7, #28]
    7c46:	22d0      	movs	r2, #208	; 0xd0
    7c48:	589a      	ldr	r2, [r3, r2]
    7c4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7c4c:	18d2      	adds	r2, r2, r3
    7c4e:	69fb      	ldr	r3, [r7, #28]
    7c50:	21d0      	movs	r1, #208	; 0xd0
    7c52:	505a      	str	r2, [r3, r1]
			if(size == 0) {
    7c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7c56:	2b00      	cmp	r3, #0
    7c58:	d000      	beq.n	7c5c <_http_client_request+0x570>
    7c5a:	e0c9      	b.n	7df0 <_http_client_request+0x704>
				if (module->req.entity.close) {
    7c5c:	69fb      	ldr	r3, [r7, #28]
    7c5e:	22c0      	movs	r2, #192	; 0xc0
    7c60:	589b      	ldr	r3, [r3, r2]
    7c62:	2b00      	cmp	r3, #0
    7c64:	d007      	beq.n	7c76 <_http_client_request+0x58a>
					module->req.entity.close(module->req.entity.priv_data);
    7c66:	69fb      	ldr	r3, [r7, #28]
    7c68:	22c0      	movs	r2, #192	; 0xc0
    7c6a:	589b      	ldr	r3, [r3, r2]
    7c6c:	69fa      	ldr	r2, [r7, #28]
    7c6e:	21c4      	movs	r1, #196	; 0xc4
    7c70:	5852      	ldr	r2, [r2, r1]
    7c72:	0010      	movs	r0, r2
    7c74:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    7c76:	69fb      	ldr	r3, [r7, #28]
    7c78:	2202      	movs	r2, #2
    7c7a:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
    7c7c:	69fb      	ldr	r3, [r7, #28]
    7c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    7c80:	2b00      	cmp	r3, #0
    7c82:	d100      	bne.n	7c86 <_http_client_request+0x59a>
    7c84:	e0b5      	b.n	7df2 <_http_client_request+0x706>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    7c86:	69fb      	ldr	r3, [r7, #28]
    7c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    7c8a:	220c      	movs	r2, #12
    7c8c:	2118      	movs	r1, #24
    7c8e:	468c      	mov	ip, r1
    7c90:	44bc      	add	ip, r7
    7c92:	4462      	add	r2, ip
    7c94:	69f8      	ldr	r0, [r7, #28]
    7c96:	2101      	movs	r1, #1
    7c98:	4798      	blx	r3
				break;
    7c9a:	e0aa      	b.n	7df2 <_http_client_request+0x706>
		} else if (module->req.content_length > 0 && entity->read) {
    7c9c:	69fb      	ldr	r3, [r7, #28]
    7c9e:	22cc      	movs	r2, #204	; 0xcc
    7ca0:	589b      	ldr	r3, [r3, r2]
    7ca2:	2b00      	cmp	r3, #0
    7ca4:	dc00      	bgt.n	7ca8 <_http_client_request+0x5bc>
    7ca6:	e07c      	b.n	7da2 <_http_client_request+0x6b6>
    7ca8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7caa:	68db      	ldr	r3, [r3, #12]
    7cac:	2b00      	cmp	r3, #0
    7cae:	d100      	bne.n	7cb2 <_http_client_request+0x5c6>
    7cb0:	e077      	b.n	7da2 <_http_client_request+0x6b6>
			if (module->req.sent_length >= module->req.content_length) {
    7cb2:	69fb      	ldr	r3, [r7, #28]
    7cb4:	22d0      	movs	r2, #208	; 0xd0
    7cb6:	589a      	ldr	r2, [r3, r2]
    7cb8:	69fb      	ldr	r3, [r7, #28]
    7cba:	21cc      	movs	r1, #204	; 0xcc
    7cbc:	585b      	ldr	r3, [r3, r1]
    7cbe:	429a      	cmp	r2, r3
    7cc0:	db1f      	blt.n	7d02 <_http_client_request+0x616>
				if (module->req.entity.close) {
    7cc2:	69fb      	ldr	r3, [r7, #28]
    7cc4:	22c0      	movs	r2, #192	; 0xc0
    7cc6:	589b      	ldr	r3, [r3, r2]
    7cc8:	2b00      	cmp	r3, #0
    7cca:	d007      	beq.n	7cdc <_http_client_request+0x5f0>
					module->req.entity.close(module->req.entity.priv_data);
    7ccc:	69fb      	ldr	r3, [r7, #28]
    7cce:	22c0      	movs	r2, #192	; 0xc0
    7cd0:	589b      	ldr	r3, [r3, r2]
    7cd2:	69fa      	ldr	r2, [r7, #28]
    7cd4:	21c4      	movs	r1, #196	; 0xc4
    7cd6:	5852      	ldr	r2, [r2, r1]
    7cd8:	0010      	movs	r0, r2
    7cda:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    7cdc:	69fb      	ldr	r3, [r7, #28]
    7cde:	2202      	movs	r2, #2
    7ce0:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
    7ce2:	69fb      	ldr	r3, [r7, #28]
    7ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    7ce6:	2b00      	cmp	r3, #0
    7ce8:	d100      	bne.n	7cec <_http_client_request+0x600>
    7cea:	e084      	b.n	7df6 <_http_client_request+0x70a>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    7cec:	69fb      	ldr	r3, [r7, #28]
    7cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    7cf0:	220c      	movs	r2, #12
    7cf2:	2118      	movs	r1, #24
    7cf4:	468c      	mov	ip, r1
    7cf6:	44bc      	add	ip, r7
    7cf8:	4462      	add	r2, ip
    7cfa:	69f8      	ldr	r0, [r7, #28]
    7cfc:	2101      	movs	r1, #1
    7cfe:	4798      	blx	r3
				break;
    7d00:	e079      	b.n	7df6 <_http_client_request+0x70a>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    7d02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7d04:	68dc      	ldr	r4, [r3, #12]
    7d06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7d08:	6958      	ldr	r0, [r3, #20]
    7d0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    7d0c:	69fb      	ldr	r3, [r7, #28]
    7d0e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
    7d10:	69fb      	ldr	r3, [r7, #28]
    7d12:	22d0      	movs	r2, #208	; 0xd0
    7d14:	589b      	ldr	r3, [r3, r2]
    7d16:	002a      	movs	r2, r5
    7d18:	47a0      	blx	r4
    7d1a:	0003      	movs	r3, r0
    7d1c:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
    7d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7d20:	2b00      	cmp	r3, #0
    7d22:	da0d      	bge.n	7d40 <_http_client_request+0x654>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    7d24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7d26:	2b00      	cmp	r3, #0
    7d28:	d102      	bne.n	7d30 <_http_client_request+0x644>
    7d2a:	234d      	movs	r3, #77	; 0x4d
    7d2c:	425b      	negs	r3, r3
    7d2e:	e001      	b.n	7d34 <_http_client_request+0x648>
    7d30:	2305      	movs	r3, #5
    7d32:	425b      	negs	r3, r3
    7d34:	69fa      	ldr	r2, [r7, #28]
    7d36:	0019      	movs	r1, r3
    7d38:	0010      	movs	r0, r2
    7d3a:	4b2c      	ldr	r3, [pc, #176]	; (7dec <_http_client_request+0x700>)
    7d3c:	4798      	blx	r3
			if (size < 0) {
    7d3e:	e057      	b.n	7df0 <_http_client_request+0x704>
				if (size > module->req.content_length - module->req.sent_length) {
    7d40:	69fb      	ldr	r3, [r7, #28]
    7d42:	22cc      	movs	r2, #204	; 0xcc
    7d44:	589a      	ldr	r2, [r3, r2]
    7d46:	69fb      	ldr	r3, [r7, #28]
    7d48:	21d0      	movs	r1, #208	; 0xd0
    7d4a:	585b      	ldr	r3, [r3, r1]
    7d4c:	1ad2      	subs	r2, r2, r3
    7d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7d50:	429a      	cmp	r2, r3
    7d52:	da07      	bge.n	7d64 <_http_client_request+0x678>
					size = module->req.content_length - module->req.sent_length;
    7d54:	69fb      	ldr	r3, [r7, #28]
    7d56:	22cc      	movs	r2, #204	; 0xcc
    7d58:	589a      	ldr	r2, [r3, r2]
    7d5a:	69fb      	ldr	r3, [r7, #28]
    7d5c:	21d0      	movs	r1, #208	; 0xd0
    7d5e:	585b      	ldr	r3, [r3, r1]
    7d60:	1ad3      	subs	r3, r2, r3
    7d62:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    7d64:	69fb      	ldr	r3, [r7, #28]
    7d66:	2000      	movs	r0, #0
    7d68:	5618      	ldrsb	r0, [r3, r0]
    7d6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    7d6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7d6e:	b29a      	uxth	r2, r3
    7d70:	2300      	movs	r3, #0
    7d72:	4c1d      	ldr	r4, [pc, #116]	; (7de8 <_http_client_request+0x6fc>)
    7d74:	47a0      	blx	r4
    7d76:	0003      	movs	r3, r0
    7d78:	663b      	str	r3, [r7, #96]	; 0x60
    7d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7d7c:	2b00      	cmp	r3, #0
    7d7e:	da07      	bge.n	7d90 <_http_client_request+0x6a4>
					_http_client_clear_conn(module, -EIO);
    7d80:	2305      	movs	r3, #5
    7d82:	425a      	negs	r2, r3
    7d84:	69fb      	ldr	r3, [r7, #28]
    7d86:	0011      	movs	r1, r2
    7d88:	0018      	movs	r0, r3
    7d8a:	4b18      	ldr	r3, [pc, #96]	; (7dec <_http_client_request+0x700>)
    7d8c:	4798      	blx	r3
					return;
    7d8e:	e03a      	b.n	7e06 <_http_client_request+0x71a>
				module->req.sent_length += size;
    7d90:	69fb      	ldr	r3, [r7, #28]
    7d92:	22d0      	movs	r2, #208	; 0xd0
    7d94:	589a      	ldr	r2, [r3, r2]
    7d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7d98:	18d2      	adds	r2, r2, r3
    7d9a:	69fb      	ldr	r3, [r7, #28]
    7d9c:	21d0      	movs	r1, #208	; 0xd0
    7d9e:	505a      	str	r2, [r3, r1]
			if (size < 0) {
    7da0:	e026      	b.n	7df0 <_http_client_request+0x704>
			module->req.state = STATE_SOCK_CONNECTED;
    7da2:	69fb      	ldr	r3, [r7, #28]
    7da4:	2202      	movs	r2, #2
    7da6:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
    7da8:	69fb      	ldr	r3, [r7, #28]
    7daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    7dac:	2b00      	cmp	r3, #0
    7dae:	d024      	beq.n	7dfa <_http_client_request+0x70e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    7db0:	69fb      	ldr	r3, [r7, #28]
    7db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    7db4:	220c      	movs	r2, #12
    7db6:	2118      	movs	r1, #24
    7db8:	468c      	mov	ip, r1
    7dba:	44bc      	add	ip, r7
    7dbc:	4462      	add	r2, ip
    7dbe:	69f8      	ldr	r0, [r7, #28]
    7dc0:	2101      	movs	r1, #1
    7dc2:	4798      	blx	r3
			break;
    7dc4:	e019      	b.n	7dfa <_http_client_request+0x70e>
    7dc6:	46c0      	nop			; (mov r8, r8)
    7dc8:	00010730 	.word	0x00010730
    7dcc:	0000e26d 	.word	0x0000e26d
    7dd0:	00010734 	.word	0x00010734
    7dd4:	00008639 	.word	0x00008639
    7dd8:	0000e30f 	.word	0x0000e30f
    7ddc:	000106bc 	.word	0x000106bc
    7de0:	00008675 	.word	0x00008675
    7de4:	8000000f 	.word	0x8000000f
    7de8:	000052f9 	.word	0x000052f9
    7dec:	00007599 	.word	0x00007599
		break;
    7df0:	e004      	b.n	7dfc <_http_client_request+0x710>
				break;
    7df2:	46c0      	nop			; (mov r8, r8)
    7df4:	e002      	b.n	7dfc <_http_client_request+0x710>
				break;
    7df6:	46c0      	nop			; (mov r8, r8)
    7df8:	e000      	b.n	7dfc <_http_client_request+0x710>
			break;
    7dfa:	46c0      	nop			; (mov r8, r8)
    7dfc:	46b5      	mov	sp, r6
    7dfe:	e003      	b.n	7e08 <_http_client_request+0x71c>
		return;
    7e00:	46c0      	nop			; (mov r8, r8)
    7e02:	e000      	b.n	7e06 <_http_client_request+0x71a>
		return;
    7e04:	46c0      	nop			; (mov r8, r8)
    7e06:	46b5      	mov	sp, r6
	}
}
    7e08:	46bd      	mov	sp, r7
    7e0a:	b01f      	add	sp, #124	; 0x7c
    7e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e0e:	46c0      	nop			; (mov r8, r8)

00007e10 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    7e10:	b590      	push	{r4, r7, lr}
    7e12:	b083      	sub	sp, #12
    7e14:	af00      	add	r7, sp, #0
    7e16:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
    7e18:	687b      	ldr	r3, [r7, #4]
    7e1a:	2b00      	cmp	r3, #0
    7e1c:	d021      	beq.n	7e62 <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    7e1e:	687b      	ldr	r3, [r7, #4]
    7e20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    7e22:	687b      	ldr	r3, [r7, #4]
    7e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    7e26:	429a      	cmp	r2, r3
    7e28:	d307      	bcc.n	7e3a <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
    7e2a:	238b      	movs	r3, #139	; 0x8b
    7e2c:	425a      	negs	r2, r3
    7e2e:	687b      	ldr	r3, [r7, #4]
    7e30:	0011      	movs	r1, r2
    7e32:	0018      	movs	r0, r3
    7e34:	4b0d      	ldr	r3, [pc, #52]	; (7e6c <_http_client_recv_packet+0x5c>)
    7e36:	4798      	blx	r3
		return;
    7e38:	e014      	b.n	7e64 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    7e3a:	687b      	ldr	r3, [r7, #4]
    7e3c:	2000      	movs	r0, #0
    7e3e:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
    7e40:	687b      	ldr	r3, [r7, #4]
    7e42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    7e44:	687b      	ldr	r3, [r7, #4]
    7e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7e48:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
    7e4a:	687b      	ldr	r3, [r7, #4]
    7e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
    7e4e:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
    7e50:	687b      	ldr	r3, [r7, #4]
    7e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
    7e54:	b29b      	uxth	r3, r3
    7e56:	1ad3      	subs	r3, r2, r3
    7e58:	b29a      	uxth	r2, r3
    7e5a:	2300      	movs	r3, #0
    7e5c:	4c04      	ldr	r4, [pc, #16]	; (7e70 <_http_client_recv_packet+0x60>)
    7e5e:	47a0      	blx	r4
    7e60:	e000      	b.n	7e64 <_http_client_recv_packet+0x54>
		return;
    7e62:	46c0      	nop			; (mov r8, r8)
}
    7e64:	46bd      	mov	sp, r7
    7e66:	b003      	add	sp, #12
    7e68:	bd90      	pop	{r4, r7, pc}
    7e6a:	46c0      	nop			; (mov r8, r8)
    7e6c:	00007599 	.word	0x00007599
    7e70:	0000545d 	.word	0x0000545d

00007e74 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
    7e74:	b580      	push	{r7, lr}
    7e76:	b082      	sub	sp, #8
    7e78:	af00      	add	r7, sp, #0
    7e7a:	6078      	str	r0, [r7, #4]
    7e7c:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
    7e7e:	687b      	ldr	r3, [r7, #4]
    7e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    7e82:	683b      	ldr	r3, [r7, #0]
    7e84:	18d2      	adds	r2, r2, r3
    7e86:	687b      	ldr	r3, [r7, #4]
    7e88:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
    7e8a:	687b      	ldr	r3, [r7, #4]
    7e8c:	2258      	movs	r2, #88	; 0x58
    7e8e:	5a9b      	ldrh	r3, [r3, r2]
    7e90:	2b00      	cmp	r3, #0
    7e92:	d007      	beq.n	7ea4 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    7e94:	687b      	ldr	r3, [r7, #4]
    7e96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    7e98:	687b      	ldr	r3, [r7, #4]
    7e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    7e9c:	0019      	movs	r1, r3
    7e9e:	0010      	movs	r0, r2
    7ea0:	4b06      	ldr	r3, [pc, #24]	; (7ebc <_http_client_recved_packet+0x48>)
    7ea2:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
    7ea4:	46c0      	nop			; (mov r8, r8)
    7ea6:	687b      	ldr	r3, [r7, #4]
    7ea8:	0018      	movs	r0, r3
    7eaa:	4b05      	ldr	r3, [pc, #20]	; (7ec0 <_http_client_recved_packet+0x4c>)
    7eac:	4798      	blx	r3
    7eae:	1e03      	subs	r3, r0, #0
    7eb0:	d1f9      	bne.n	7ea6 <_http_client_recved_packet+0x32>
}
    7eb2:	46c0      	nop			; (mov r8, r8)
    7eb4:	46bd      	mov	sp, r7
    7eb6:	b002      	add	sp, #8
    7eb8:	bd80      	pop	{r7, pc}
    7eba:	46c0      	nop			; (mov r8, r8)
    7ebc:	00008931 	.word	0x00008931
    7ec0:	00007ec5 	.word	0x00007ec5

00007ec4 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
    7ec4:	b580      	push	{r7, lr}
    7ec6:	b082      	sub	sp, #8
    7ec8:	af00      	add	r7, sp, #0
    7eca:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
    7ecc:	687b      	ldr	r3, [r7, #4]
    7ece:	22d8      	movs	r2, #216	; 0xd8
    7ed0:	589b      	ldr	r3, [r3, r2]
    7ed2:	2b00      	cmp	r3, #0
    7ed4:	d002      	beq.n	7edc <_http_client_handle_response+0x18>
    7ed6:	2b01      	cmp	r3, #1
    7ed8:	d006      	beq.n	7ee8 <_http_client_handle_response+0x24>
    7eda:	e00b      	b.n	7ef4 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
    7edc:	687b      	ldr	r3, [r7, #4]
    7ede:	0018      	movs	r0, r3
    7ee0:	4b07      	ldr	r3, [pc, #28]	; (7f00 <_http_client_handle_response+0x3c>)
    7ee2:	4798      	blx	r3
    7ee4:	0003      	movs	r3, r0
    7ee6:	e006      	b.n	7ef6 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
    7ee8:	687b      	ldr	r3, [r7, #4]
    7eea:	0018      	movs	r0, r3
    7eec:	4b05      	ldr	r3, [pc, #20]	; (7f04 <_http_client_handle_response+0x40>)
    7eee:	4798      	blx	r3
    7ef0:	0003      	movs	r3, r0
    7ef2:	e000      	b.n	7ef6 <_http_client_handle_response+0x32>
	}
	return 0;
    7ef4:	2300      	movs	r3, #0
}
    7ef6:	0018      	movs	r0, r3
    7ef8:	46bd      	mov	sp, r7
    7efa:	b002      	add	sp, #8
    7efc:	bd80      	pop	{r7, pc}
    7efe:	46c0      	nop			; (mov r8, r8)
    7f00:	00007f09 	.word	0x00007f09
    7f04:	000083c1 	.word	0x000083c1

00007f08 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
    7f08:	b590      	push	{r4, r7, lr}
    7f0a:	b08b      	sub	sp, #44	; 0x2c
    7f0c:	af00      	add	r7, sp, #0
    7f0e:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
    7f10:	687b      	ldr	r3, [r7, #4]
    7f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    7f14:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
    7f16:	4b9a      	ldr	r3, [pc, #616]	; (8180 <_http_client_handle_header+0x278>)
    7f18:	681a      	ldr	r2, [r3, #0]
    7f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7f1c:	0011      	movs	r1, r2
    7f1e:	0018      	movs	r0, r3
    7f20:	4b98      	ldr	r3, [pc, #608]	; (8184 <_http_client_handle_header+0x27c>)
    7f22:	4798      	blx	r3
    7f24:	0003      	movs	r3, r0
    7f26:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    7f28:	69bb      	ldr	r3, [r7, #24]
    7f2a:	2b00      	cmp	r3, #0
    7f2c:	d007      	beq.n	7f3e <_http_client_handle_header+0x36>
    7f2e:	687b      	ldr	r3, [r7, #4]
    7f30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    7f32:	687b      	ldr	r3, [r7, #4]
    7f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7f36:	18d2      	adds	r2, r2, r3
    7f38:	69bb      	ldr	r3, [r7, #24]
    7f3a:	429a      	cmp	r2, r3
    7f3c:	d807      	bhi.n	7f4e <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
    7f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    7f40:	687b      	ldr	r3, [r7, #4]
    7f42:	0011      	movs	r1, r2
    7f44:	0018      	movs	r0, r3
    7f46:	4b90      	ldr	r3, [pc, #576]	; (8188 <_http_client_handle_header+0x280>)
    7f48:	4798      	blx	r3
			return 0;
    7f4a:	2300      	movs	r3, #0
    7f4c:	e114      	b.n	8178 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
    7f4e:	4b8c      	ldr	r3, [pc, #560]	; (8180 <_http_client_handle_header+0x278>)
    7f50:	681c      	ldr	r4, [r3, #0]
    7f52:	4b8b      	ldr	r3, [pc, #556]	; (8180 <_http_client_handle_header+0x278>)
    7f54:	681b      	ldr	r3, [r3, #0]
    7f56:	0018      	movs	r0, r3
    7f58:	4b8c      	ldr	r3, [pc, #560]	; (818c <_http_client_handle_header+0x284>)
    7f5a:	4798      	blx	r3
    7f5c:	0002      	movs	r2, r0
    7f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7f60:	0021      	movs	r1, r4
    7f62:	0018      	movs	r0, r3
    7f64:	4b8a      	ldr	r3, [pc, #552]	; (8190 <_http_client_handle_header+0x288>)
    7f66:	4798      	blx	r3
    7f68:	1e03      	subs	r3, r0, #0
    7f6a:	d15d      	bne.n	8028 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
    7f6c:	4b84      	ldr	r3, [pc, #528]	; (8180 <_http_client_handle_header+0x278>)
    7f6e:	681b      	ldr	r3, [r3, #0]
    7f70:	0018      	movs	r0, r3
    7f72:	4b86      	ldr	r3, [pc, #536]	; (818c <_http_client_handle_header+0x284>)
    7f74:	4798      	blx	r3
    7f76:	0002      	movs	r2, r0
    7f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7f7a:	189a      	adds	r2, r3, r2
    7f7c:	687b      	ldr	r3, [r7, #4]
    7f7e:	0011      	movs	r1, r2
    7f80:	0018      	movs	r0, r3
    7f82:	4b81      	ldr	r3, [pc, #516]	; (8188 <_http_client_handle_header+0x280>)
    7f84:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
    7f86:	687b      	ldr	r3, [r7, #4]
    7f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    7f8a:	2b00      	cmp	r3, #0
    7f8c:	d046      	beq.n	801c <_http_client_handle_header+0x114>
    7f8e:	687b      	ldr	r3, [r7, #4]
    7f90:	22e4      	movs	r2, #228	; 0xe4
    7f92:	5a9b      	ldrh	r3, [r3, r2]
    7f94:	2b00      	cmp	r3, #0
    7f96:	d041      	beq.n	801c <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
    7f98:	687b      	ldr	r3, [r7, #4]
    7f9a:	22dc      	movs	r2, #220	; 0xdc
    7f9c:	589b      	ldr	r3, [r3, r2]
    7f9e:	2b00      	cmp	r3, #0
    7fa0:	da19      	bge.n	7fd6 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
    7fa2:	687b      	ldr	r3, [r7, #4]
    7fa4:	22e4      	movs	r2, #228	; 0xe4
    7fa6:	5a9a      	ldrh	r2, [r3, r2]
    7fa8:	230c      	movs	r3, #12
    7faa:	18fb      	adds	r3, r7, r3
    7fac:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
    7fae:	230c      	movs	r3, #12
    7fb0:	18fb      	adds	r3, r7, r3
    7fb2:	2201      	movs	r2, #1
    7fb4:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
    7fb6:	687b      	ldr	r3, [r7, #4]
    7fb8:	22e0      	movs	r2, #224	; 0xe0
    7fba:	2100      	movs	r1, #0
    7fbc:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
    7fbe:	230c      	movs	r3, #12
    7fc0:	18fb      	adds	r3, r7, r3
    7fc2:	2200      	movs	r2, #0
    7fc4:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    7fc6:	687b      	ldr	r3, [r7, #4]
    7fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    7fca:	220c      	movs	r2, #12
    7fcc:	18ba      	adds	r2, r7, r2
    7fce:	6878      	ldr	r0, [r7, #4]
    7fd0:	2102      	movs	r1, #2
    7fd2:	4798      	blx	r3
    7fd4:	e022      	b.n	801c <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
    7fd6:	687b      	ldr	r3, [r7, #4]
    7fd8:	22dc      	movs	r2, #220	; 0xdc
    7fda:	589a      	ldr	r2, [r3, r2]
    7fdc:	687b      	ldr	r3, [r7, #4]
    7fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    7fe0:	429a      	cmp	r2, r3
    7fe2:	dd1b      	ble.n	801c <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
    7fe4:	687b      	ldr	r3, [r7, #4]
    7fe6:	22e4      	movs	r2, #228	; 0xe4
    7fe8:	5a9a      	ldrh	r2, [r3, r2]
    7fea:	230c      	movs	r3, #12
    7fec:	18fb      	adds	r3, r7, r3
    7fee:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
    7ff0:	687b      	ldr	r3, [r7, #4]
    7ff2:	22dc      	movs	r2, #220	; 0xdc
    7ff4:	589b      	ldr	r3, [r3, r2]
    7ff6:	001a      	movs	r2, r3
    7ff8:	230c      	movs	r3, #12
    7ffa:	18fb      	adds	r3, r7, r3
    7ffc:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
    7ffe:	230c      	movs	r3, #12
    8000:	18fb      	adds	r3, r7, r3
    8002:	2200      	movs	r2, #0
    8004:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
    8006:	687b      	ldr	r3, [r7, #4]
    8008:	22e0      	movs	r2, #224	; 0xe0
    800a:	2100      	movs	r1, #0
    800c:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    800e:	687b      	ldr	r3, [r7, #4]
    8010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    8012:	220c      	movs	r2, #12
    8014:	18ba      	adds	r2, r7, r2
    8016:	6878      	ldr	r0, [r7, #4]
    8018:	2102      	movs	r1, #2
    801a:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
    801c:	687b      	ldr	r3, [r7, #4]
    801e:	22d8      	movs	r2, #216	; 0xd8
    8020:	2101      	movs	r1, #1
    8022:	5099      	str	r1, [r3, r2]
			return 1;
    8024:	2301      	movs	r3, #1
    8026:	e0a7      	b.n	8178 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
    8028:	495a      	ldr	r1, [pc, #360]	; (8194 <_http_client_handle_header+0x28c>)
    802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    802c:	2210      	movs	r2, #16
    802e:	0018      	movs	r0, r3
    8030:	4b57      	ldr	r3, [pc, #348]	; (8190 <_http_client_handle_header+0x288>)
    8032:	4798      	blx	r3
    8034:	1e03      	subs	r3, r0, #0
    8036:	d109      	bne.n	804c <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
    8038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    803a:	3310      	adds	r3, #16
    803c:	0018      	movs	r0, r3
    803e:	4b56      	ldr	r3, [pc, #344]	; (8198 <_http_client_handle_header+0x290>)
    8040:	4798      	blx	r3
    8042:	0001      	movs	r1, r0
    8044:	687b      	ldr	r3, [r7, #4]
    8046:	22dc      	movs	r2, #220	; 0xdc
    8048:	5099      	str	r1, [r3, r2]
    804a:	e08b      	b.n	8164 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
    804c:	4953      	ldr	r1, [pc, #332]	; (819c <_http_client_handle_header+0x294>)
    804e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8050:	2213      	movs	r2, #19
    8052:	0018      	movs	r0, r3
    8054:	4b4e      	ldr	r3, [pc, #312]	; (8190 <_http_client_handle_header+0x288>)
    8056:	4798      	blx	r3
    8058:	1e03      	subs	r3, r0, #0
    805a:	d127      	bne.n	80ac <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
    805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    805e:	3313      	adds	r3, #19
    8060:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
    8062:	e01e      	b.n	80a2 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
    8064:	6a3b      	ldr	r3, [r7, #32]
    8066:	781b      	ldrb	r3, [r3, #0]
    8068:	2b20      	cmp	r3, #32
    806a:	d103      	bne.n	8074 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    806c:	6a3b      	ldr	r3, [r7, #32]
    806e:	3301      	adds	r3, #1
    8070:	623b      	str	r3, [r7, #32]
    8072:	e016      	b.n	80a2 <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    8074:	6a3b      	ldr	r3, [r7, #32]
    8076:	781b      	ldrb	r3, [r3, #0]
    8078:	2b43      	cmp	r3, #67	; 0x43
    807a:	d003      	beq.n	8084 <_http_client_handle_header+0x17c>
    807c:	6a3b      	ldr	r3, [r7, #32]
    807e:	781b      	ldrb	r3, [r3, #0]
    8080:	2b63      	cmp	r3, #99	; 0x63
    8082:	d105      	bne.n	8090 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
    8084:	687b      	ldr	r3, [r7, #4]
    8086:	21cc      	movs	r1, #204	; 0xcc
    8088:	2201      	movs	r2, #1
    808a:	4252      	negs	r2, r2
    808c:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
    808e:	e069      	b.n	8164 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
    8090:	2386      	movs	r3, #134	; 0x86
    8092:	425a      	negs	r2, r3
    8094:	687b      	ldr	r3, [r7, #4]
    8096:	0011      	movs	r1, r2
    8098:	0018      	movs	r0, r3
    809a:	4b41      	ldr	r3, [pc, #260]	; (81a0 <_http_client_handle_header+0x298>)
    809c:	4798      	blx	r3
					return 0;
    809e:	2300      	movs	r3, #0
    80a0:	e06a      	b.n	8178 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    80a2:	69ba      	ldr	r2, [r7, #24]
    80a4:	6a3b      	ldr	r3, [r7, #32]
    80a6:	429a      	cmp	r2, r3
    80a8:	d8dc      	bhi.n	8064 <_http_client_handle_header+0x15c>
    80aa:	e05b      	b.n	8164 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
    80ac:	493d      	ldr	r1, [pc, #244]	; (81a4 <_http_client_handle_header+0x29c>)
    80ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    80b0:	220c      	movs	r2, #12
    80b2:	0018      	movs	r0, r3
    80b4:	4b36      	ldr	r3, [pc, #216]	; (8190 <_http_client_handle_header+0x288>)
    80b6:	4798      	blx	r3
    80b8:	1e03      	subs	r3, r0, #0
    80ba:	d126      	bne.n	810a <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
    80bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    80be:	330c      	adds	r3, #12
    80c0:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
    80c2:	e01d      	b.n	8100 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
    80c4:	69fb      	ldr	r3, [r7, #28]
    80c6:	781b      	ldrb	r3, [r3, #0]
    80c8:	2b20      	cmp	r3, #32
    80ca:	d103      	bne.n	80d4 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    80cc:	69fb      	ldr	r3, [r7, #28]
    80ce:	3301      	adds	r3, #1
    80d0:	61fb      	str	r3, [r7, #28]
    80d2:	e015      	b.n	8100 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    80d4:	69fb      	ldr	r3, [r7, #28]
    80d6:	781b      	ldrb	r3, [r3, #0]
    80d8:	2b4b      	cmp	r3, #75	; 0x4b
    80da:	d003      	beq.n	80e4 <_http_client_handle_header+0x1dc>
    80dc:	69fb      	ldr	r3, [r7, #28]
    80de:	781b      	ldrb	r3, [r3, #0]
    80e0:	2b6b      	cmp	r3, #107	; 0x6b
    80e2:	d106      	bne.n	80f2 <_http_client_handle_header+0x1ea>
					module->permanent = 1;
    80e4:	687b      	ldr	r3, [r7, #4]
    80e6:	2241      	movs	r2, #65	; 0x41
    80e8:	5c99      	ldrb	r1, [r3, r2]
    80ea:	2002      	movs	r0, #2
    80ec:	4301      	orrs	r1, r0
    80ee:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
    80f0:	e038      	b.n	8164 <_http_client_handle_header+0x25c>
					module->permanent = 0;
    80f2:	687b      	ldr	r3, [r7, #4]
    80f4:	2241      	movs	r2, #65	; 0x41
    80f6:	5c99      	ldrb	r1, [r3, r2]
    80f8:	2002      	movs	r0, #2
    80fa:	4381      	bics	r1, r0
    80fc:	5499      	strb	r1, [r3, r2]
				break;
    80fe:	e031      	b.n	8164 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    8100:	69ba      	ldr	r2, [r7, #24]
    8102:	69fb      	ldr	r3, [r7, #28]
    8104:	429a      	cmp	r2, r3
    8106:	d8dd      	bhi.n	80c4 <_http_client_handle_header+0x1bc>
    8108:	e02c      	b.n	8164 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
    810a:	4927      	ldr	r1, [pc, #156]	; (81a8 <_http_client_handle_header+0x2a0>)
    810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    810e:	2205      	movs	r2, #5
    8110:	0018      	movs	r0, r3
    8112:	4b1f      	ldr	r3, [pc, #124]	; (8190 <_http_client_handle_header+0x288>)
    8114:	4798      	blx	r3
    8116:	1e03      	subs	r3, r0, #0
    8118:	d124      	bne.n	8164 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    811c:	3309      	adds	r3, #9
    811e:	0018      	movs	r0, r3
    8120:	4b1d      	ldr	r3, [pc, #116]	; (8198 <_http_client_handle_header+0x290>)
    8122:	4798      	blx	r3
    8124:	0003      	movs	r3, r0
    8126:	b299      	uxth	r1, r3
    8128:	687b      	ldr	r3, [r7, #4]
    812a:	22e4      	movs	r2, #228	; 0xe4
    812c:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
    812e:	687b      	ldr	r3, [r7, #4]
    8130:	22dc      	movs	r2, #220	; 0xdc
    8132:	2100      	movs	r1, #0
    8134:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
    8136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8138:	3305      	adds	r3, #5
    813a:	781b      	ldrb	r3, [r3, #0]
    813c:	2b31      	cmp	r3, #49	; 0x31
    813e:	d804      	bhi.n	814a <_http_client_handle_header+0x242>
    8140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8142:	3307      	adds	r3, #7
    8144:	781b      	ldrb	r3, [r3, #0]
    8146:	2b30      	cmp	r3, #48	; 0x30
    8148:	d906      	bls.n	8158 <_http_client_handle_header+0x250>
				module->permanent = 1;
    814a:	687b      	ldr	r3, [r7, #4]
    814c:	2241      	movs	r2, #65	; 0x41
    814e:	5c99      	ldrb	r1, [r3, r2]
    8150:	2002      	movs	r0, #2
    8152:	4301      	orrs	r1, r0
    8154:	5499      	strb	r1, [r3, r2]
    8156:	e005      	b.n	8164 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
    8158:	687b      	ldr	r3, [r7, #4]
    815a:	2241      	movs	r2, #65	; 0x41
    815c:	5c99      	ldrb	r1, [r3, r2]
    815e:	2002      	movs	r0, #2
    8160:	4381      	bics	r1, r0
    8162:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
    8164:	4b06      	ldr	r3, [pc, #24]	; (8180 <_http_client_handle_header+0x278>)
    8166:	681b      	ldr	r3, [r3, #0]
    8168:	0018      	movs	r0, r3
    816a:	4b08      	ldr	r3, [pc, #32]	; (818c <_http_client_handle_header+0x284>)
    816c:	4798      	blx	r3
    816e:	0002      	movs	r2, r0
    8170:	69bb      	ldr	r3, [r7, #24]
    8172:	189b      	adds	r3, r3, r2
    8174:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
    8176:	e6ce      	b.n	7f16 <_http_client_handle_header+0xe>
	}
}
    8178:	0018      	movs	r0, r3
    817a:	46bd      	mov	sp, r7
    817c:	b00b      	add	sp, #44	; 0x2c
    817e:	bd90      	pop	{r4, r7, pc}
    8180:	20000008 	.word	0x20000008
    8184:	0000e33f 	.word	0x0000e33f
    8188:	0000856d 	.word	0x0000856d
    818c:	0000e30f 	.word	0x0000e30f
    8190:	0000e31d 	.word	0x0000e31d
    8194:	00010734 	.word	0x00010734
    8198:	0000dd99 	.word	0x0000dd99
    819c:	00010758 	.word	0x00010758
    81a0:	00007599 	.word	0x00007599
    81a4:	0001076c 	.word	0x0001076c
    81a8:	0001077c 	.word	0x0001077c

000081ac <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
    81ac:	b580      	push	{r7, lr}
    81ae:	b088      	sub	sp, #32
    81b0:	af00      	add	r7, sp, #0
    81b2:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
    81b4:	687b      	ldr	r3, [r7, #4]
    81b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    81b8:	61fb      	str	r3, [r7, #28]
	int extension = 0;
    81ba:	2300      	movs	r3, #0
    81bc:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
    81be:	687b      	ldr	r3, [r7, #4]
    81c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    81c2:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
    81c4:	687b      	ldr	r3, [r7, #4]
    81c6:	22e0      	movs	r2, #224	; 0xe0
    81c8:	589b      	ldr	r3, [r3, r2]
    81ca:	2b00      	cmp	r3, #0
    81cc:	db71      	blt.n	82b2 <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
    81ce:	687b      	ldr	r3, [r7, #4]
    81d0:	22e0      	movs	r2, #224	; 0xe0
    81d2:	589b      	ldr	r3, [r3, r2]
    81d4:	2b00      	cmp	r3, #0
    81d6:	d134      	bne.n	8242 <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
    81d8:	687b      	ldr	r3, [r7, #4]
    81da:	22d8      	movs	r2, #216	; 0xd8
    81dc:	2100      	movs	r1, #0
    81de:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
    81e0:	687b      	ldr	r3, [r7, #4]
    81e2:	22e4      	movs	r2, #228	; 0xe4
    81e4:	2100      	movs	r1, #0
    81e6:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
    81e8:	2308      	movs	r3, #8
    81ea:	18fb      	adds	r3, r7, r3
    81ec:	2201      	movs	r2, #1
    81ee:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
    81f0:	2308      	movs	r3, #8
    81f2:	18fb      	adds	r3, r7, r3
    81f4:	2200      	movs	r2, #0
    81f6:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
    81f8:	2308      	movs	r3, #8
    81fa:	18fb      	adds	r3, r7, r3
    81fc:	2200      	movs	r2, #0
    81fe:	605a      	str	r2, [r3, #4]
				if (module->cb) {
    8200:	687b      	ldr	r3, [r7, #4]
    8202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    8204:	2b00      	cmp	r3, #0
    8206:	d006      	beq.n	8216 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    8208:	687b      	ldr	r3, [r7, #4]
    820a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    820c:	2208      	movs	r2, #8
    820e:	18ba      	adds	r2, r7, r2
    8210:	6878      	ldr	r0, [r7, #4]
    8212:	2103      	movs	r1, #3
    8214:	4798      	blx	r3
				}
				if (module->permanent == 0) {
    8216:	687b      	ldr	r3, [r7, #4]
    8218:	2241      	movs	r2, #65	; 0x41
    821a:	5c9b      	ldrb	r3, [r3, r2]
    821c:	2202      	movs	r2, #2
    821e:	4013      	ands	r3, r2
    8220:	b2db      	uxtb	r3, r3
    8222:	2b00      	cmp	r3, #0
    8224:	d105      	bne.n	8232 <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
    8226:	687b      	ldr	r3, [r7, #4]
    8228:	2100      	movs	r1, #0
    822a:	0018      	movs	r0, r3
    822c:	4b62      	ldr	r3, [pc, #392]	; (83b8 <_http_client_read_chuked_entity+0x20c>)
    822e:	4798      	blx	r3
					return;
    8230:	e0bf      	b.n	83b2 <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
    8232:	697b      	ldr	r3, [r7, #20]
    8234:	1c9a      	adds	r2, r3, #2
    8236:	687b      	ldr	r3, [r7, #4]
    8238:	0011      	movs	r1, r2
    823a:	0018      	movs	r0, r3
    823c:	4b5f      	ldr	r3, [pc, #380]	; (83bc <_http_client_read_chuked_entity+0x210>)
    823e:	4798      	blx	r3
    8240:	e0b2      	b.n	83a8 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
    8242:	687b      	ldr	r3, [r7, #4]
    8244:	22e0      	movs	r2, #224	; 0xe0
    8246:	589a      	ldr	r2, [r3, r2]
    8248:	69fb      	ldr	r3, [r7, #28]
    824a:	429a      	cmp	r2, r3
    824c:	dd00      	ble.n	8250 <_http_client_read_chuked_entity+0xa4>
    824e:	e0ab      	b.n	83a8 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
    8250:	687b      	ldr	r3, [r7, #4]
    8252:	22e0      	movs	r2, #224	; 0xe0
    8254:	589b      	ldr	r3, [r3, r2]
    8256:	001a      	movs	r2, r3
    8258:	2308      	movs	r3, #8
    825a:	18fb      	adds	r3, r7, r3
    825c:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
    825e:	2308      	movs	r3, #8
    8260:	18fb      	adds	r3, r7, r3
    8262:	697a      	ldr	r2, [r7, #20]
    8264:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
    8266:	2308      	movs	r3, #8
    8268:	18fb      	adds	r3, r7, r3
    826a:	2200      	movs	r2, #0
    826c:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
    826e:	687b      	ldr	r3, [r7, #4]
    8270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    8272:	2b00      	cmp	r3, #0
    8274:	d006      	beq.n	8284 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    8276:	687b      	ldr	r3, [r7, #4]
    8278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    827a:	2208      	movs	r2, #8
    827c:	18ba      	adds	r2, r7, r2
    827e:	6878      	ldr	r0, [r7, #4]
    8280:	2103      	movs	r1, #3
    8282:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    8284:	687b      	ldr	r3, [r7, #4]
    8286:	22e0      	movs	r2, #224	; 0xe0
    8288:	589b      	ldr	r3, [r3, r2]
    828a:	3302      	adds	r3, #2
    828c:	697a      	ldr	r2, [r7, #20]
    828e:	18d2      	adds	r2, r2, r3
    8290:	687b      	ldr	r3, [r7, #4]
    8292:	0011      	movs	r1, r2
    8294:	0018      	movs	r0, r3
    8296:	4b49      	ldr	r3, [pc, #292]	; (83bc <_http_client_read_chuked_entity+0x210>)
    8298:	4798      	blx	r3
				length = (int)module->recved_size;
    829a:	687b      	ldr	r3, [r7, #4]
    829c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    829e:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
    82a0:	687b      	ldr	r3, [r7, #4]
    82a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    82a4:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
    82a6:	687b      	ldr	r3, [r7, #4]
    82a8:	21e0      	movs	r1, #224	; 0xe0
    82aa:	2201      	movs	r2, #1
    82ac:	4252      	negs	r2, r2
    82ae:	505a      	str	r2, [r3, r1]
    82b0:	e07a      	b.n	83a8 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
    82b2:	687b      	ldr	r3, [r7, #4]
    82b4:	22e0      	movs	r2, #224	; 0xe0
    82b6:	2100      	movs	r1, #0
    82b8:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
    82ba:	e05a      	b.n	8372 <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
    82bc:	697b      	ldr	r3, [r7, #20]
    82be:	781b      	ldrb	r3, [r3, #0]
    82c0:	2b0a      	cmp	r3, #10
    82c2:	d106      	bne.n	82d2 <_http_client_read_chuked_entity+0x126>
					buffer++;
    82c4:	697b      	ldr	r3, [r7, #20]
    82c6:	3301      	adds	r3, #1
    82c8:	617b      	str	r3, [r7, #20]
					length--;
    82ca:	69fb      	ldr	r3, [r7, #28]
    82cc:	3b01      	subs	r3, #1
    82ce:	61fb      	str	r3, [r7, #28]
					break;
    82d0:	e052      	b.n	8378 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
    82d2:	69bb      	ldr	r3, [r7, #24]
    82d4:	2b00      	cmp	r3, #0
    82d6:	d145      	bne.n	8364 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
    82d8:	697b      	ldr	r3, [r7, #20]
    82da:	781b      	ldrb	r3, [r3, #0]
    82dc:	2b2f      	cmp	r3, #47	; 0x2f
    82de:	d910      	bls.n	8302 <_http_client_read_chuked_entity+0x156>
    82e0:	697b      	ldr	r3, [r7, #20]
    82e2:	781b      	ldrb	r3, [r3, #0]
    82e4:	2b39      	cmp	r3, #57	; 0x39
    82e6:	d80c      	bhi.n	8302 <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
    82e8:	687b      	ldr	r3, [r7, #4]
    82ea:	22e0      	movs	r2, #224	; 0xe0
    82ec:	589b      	ldr	r3, [r3, r2]
    82ee:	011b      	lsls	r3, r3, #4
    82f0:	697a      	ldr	r2, [r7, #20]
    82f2:	7812      	ldrb	r2, [r2, #0]
    82f4:	189b      	adds	r3, r3, r2
    82f6:	3b30      	subs	r3, #48	; 0x30
    82f8:	001a      	movs	r2, r3
    82fa:	687b      	ldr	r3, [r7, #4]
    82fc:	21e0      	movs	r1, #224	; 0xe0
    82fe:	505a      	str	r2, [r3, r1]
    8300:	e031      	b.n	8366 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
    8302:	697b      	ldr	r3, [r7, #20]
    8304:	781b      	ldrb	r3, [r3, #0]
    8306:	2b60      	cmp	r3, #96	; 0x60
    8308:	d910      	bls.n	832c <_http_client_read_chuked_entity+0x180>
    830a:	697b      	ldr	r3, [r7, #20]
    830c:	781b      	ldrb	r3, [r3, #0]
    830e:	2b66      	cmp	r3, #102	; 0x66
    8310:	d80c      	bhi.n	832c <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    8312:	687b      	ldr	r3, [r7, #4]
    8314:	22e0      	movs	r2, #224	; 0xe0
    8316:	589b      	ldr	r3, [r3, r2]
    8318:	011b      	lsls	r3, r3, #4
    831a:	697a      	ldr	r2, [r7, #20]
    831c:	7812      	ldrb	r2, [r2, #0]
    831e:	189b      	adds	r3, r3, r2
    8320:	3b61      	subs	r3, #97	; 0x61
    8322:	001a      	movs	r2, r3
    8324:	687b      	ldr	r3, [r7, #4]
    8326:	21e0      	movs	r1, #224	; 0xe0
    8328:	505a      	str	r2, [r3, r1]
    832a:	e01c      	b.n	8366 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
    832c:	697b      	ldr	r3, [r7, #20]
    832e:	781b      	ldrb	r3, [r3, #0]
    8330:	2b40      	cmp	r3, #64	; 0x40
    8332:	d910      	bls.n	8356 <_http_client_read_chuked_entity+0x1aa>
    8334:	697b      	ldr	r3, [r7, #20]
    8336:	781b      	ldrb	r3, [r3, #0]
    8338:	2b46      	cmp	r3, #70	; 0x46
    833a:	d80c      	bhi.n	8356 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
    833c:	687b      	ldr	r3, [r7, #4]
    833e:	22e0      	movs	r2, #224	; 0xe0
    8340:	589b      	ldr	r3, [r3, r2]
    8342:	011b      	lsls	r3, r3, #4
    8344:	697a      	ldr	r2, [r7, #20]
    8346:	7812      	ldrb	r2, [r2, #0]
    8348:	189b      	adds	r3, r3, r2
    834a:	3b41      	subs	r3, #65	; 0x41
    834c:	001a      	movs	r2, r3
    834e:	687b      	ldr	r3, [r7, #4]
    8350:	21e0      	movs	r1, #224	; 0xe0
    8352:	505a      	str	r2, [r3, r1]
    8354:	e007      	b.n	8366 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
    8356:	697b      	ldr	r3, [r7, #20]
    8358:	781b      	ldrb	r3, [r3, #0]
    835a:	2b3b      	cmp	r3, #59	; 0x3b
    835c:	d103      	bne.n	8366 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
    835e:	2301      	movs	r3, #1
    8360:	61bb      	str	r3, [r7, #24]
    8362:	e000      	b.n	8366 <_http_client_read_chuked_entity+0x1ba>
					continue;
    8364:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
    8366:	697b      	ldr	r3, [r7, #20]
    8368:	3301      	adds	r3, #1
    836a:	617b      	str	r3, [r7, #20]
    836c:	69fb      	ldr	r3, [r7, #28]
    836e:	3b01      	subs	r3, #1
    8370:	61fb      	str	r3, [r7, #28]
    8372:	69fb      	ldr	r3, [r7, #28]
    8374:	2b00      	cmp	r3, #0
    8376:	dca1      	bgt.n	82bc <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    8378:	687b      	ldr	r3, [r7, #4]
    837a:	22e0      	movs	r2, #224	; 0xe0
    837c:	589a      	ldr	r2, [r3, r2]
    837e:	687b      	ldr	r3, [r7, #4]
    8380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8382:	429a      	cmp	r2, r3
    8384:	dd07      	ble.n	8396 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
    8386:	238b      	movs	r3, #139	; 0x8b
    8388:	425a      	negs	r2, r3
    838a:	687b      	ldr	r3, [r7, #4]
    838c:	0011      	movs	r1, r2
    838e:	0018      	movs	r0, r3
    8390:	4b09      	ldr	r3, [pc, #36]	; (83b8 <_http_client_read_chuked_entity+0x20c>)
    8392:	4798      	blx	r3
				return;
    8394:	e00d      	b.n	83b2 <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
    8396:	69fb      	ldr	r3, [r7, #28]
    8398:	2b00      	cmp	r3, #0
    839a:	d105      	bne.n	83a8 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
    839c:	687b      	ldr	r3, [r7, #4]
    839e:	21e0      	movs	r1, #224	; 0xe0
    83a0:	2201      	movs	r2, #1
    83a2:	4252      	negs	r2, r2
    83a4:	505a      	str	r2, [r3, r1]
				return;
    83a6:	e004      	b.n	83b2 <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
    83a8:	687b      	ldr	r3, [r7, #4]
    83aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    83ac:	2b00      	cmp	r3, #0
    83ae:	d000      	beq.n	83b2 <_http_client_read_chuked_entity+0x206>
    83b0:	e708      	b.n	81c4 <_http_client_read_chuked_entity+0x18>
}
    83b2:	46bd      	mov	sp, r7
    83b4:	b008      	add	sp, #32
    83b6:	bd80      	pop	{r7, pc}
    83b8:	00007599 	.word	0x00007599
    83bc:	0000856d 	.word	0x0000856d

000083c0 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
    83c0:	b580      	push	{r7, lr}
    83c2:	b086      	sub	sp, #24
    83c4:	af00      	add	r7, sp, #0
    83c6:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
    83c8:	687b      	ldr	r3, [r7, #4]
    83ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    83cc:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    83ce:	687b      	ldr	r3, [r7, #4]
    83d0:	22dc      	movs	r2, #220	; 0xdc
    83d2:	589b      	ldr	r3, [r3, r2]
    83d4:	2b00      	cmp	r3, #0
    83d6:	db58      	blt.n	848a <_http_client_handle_entity+0xca>
    83d8:	687b      	ldr	r3, [r7, #4]
    83da:	22dc      	movs	r2, #220	; 0xdc
    83dc:	589a      	ldr	r2, [r3, r2]
    83de:	687b      	ldr	r3, [r7, #4]
    83e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    83e2:	429a      	cmp	r2, r3
    83e4:	dc51      	bgt.n	848a <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
    83e6:	687b      	ldr	r3, [r7, #4]
    83e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    83ea:	0019      	movs	r1, r3
    83ec:	687b      	ldr	r3, [r7, #4]
    83ee:	22dc      	movs	r2, #220	; 0xdc
    83f0:	589b      	ldr	r3, [r3, r2]
    83f2:	4299      	cmp	r1, r3
    83f4:	da00      	bge.n	83f8 <_http_client_handle_entity+0x38>
    83f6:	e0a9      	b.n	854c <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
    83f8:	687b      	ldr	r3, [r7, #4]
    83fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    83fc:	2b00      	cmp	r3, #0
    83fe:	d020      	beq.n	8442 <_http_client_handle_entity+0x82>
    8400:	687b      	ldr	r3, [r7, #4]
    8402:	22e4      	movs	r2, #228	; 0xe4
    8404:	5a9b      	ldrh	r3, [r3, r2]
    8406:	2b00      	cmp	r3, #0
    8408:	d01b      	beq.n	8442 <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
    840a:	687b      	ldr	r3, [r7, #4]
    840c:	22e4      	movs	r2, #228	; 0xe4
    840e:	5a9a      	ldrh	r2, [r3, r2]
    8410:	2308      	movs	r3, #8
    8412:	18fb      	adds	r3, r7, r3
    8414:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
    8416:	2308      	movs	r3, #8
    8418:	18fb      	adds	r3, r7, r3
    841a:	2200      	movs	r2, #0
    841c:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
    841e:	687b      	ldr	r3, [r7, #4]
    8420:	22dc      	movs	r2, #220	; 0xdc
    8422:	589b      	ldr	r3, [r3, r2]
    8424:	001a      	movs	r2, r3
    8426:	2308      	movs	r3, #8
    8428:	18fb      	adds	r3, r7, r3
    842a:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
    842c:	2308      	movs	r3, #8
    842e:	18fb      	adds	r3, r7, r3
    8430:	697a      	ldr	r2, [r7, #20]
    8432:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    8434:	687b      	ldr	r3, [r7, #4]
    8436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    8438:	2208      	movs	r2, #8
    843a:	18ba      	adds	r2, r7, r2
    843c:	6878      	ldr	r0, [r7, #4]
    843e:	2102      	movs	r1, #2
    8440:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
    8442:	687b      	ldr	r3, [r7, #4]
    8444:	22d8      	movs	r2, #216	; 0xd8
    8446:	2100      	movs	r1, #0
    8448:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
    844a:	687b      	ldr	r3, [r7, #4]
    844c:	22e4      	movs	r2, #228	; 0xe4
    844e:	2100      	movs	r1, #0
    8450:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
    8452:	687b      	ldr	r3, [r7, #4]
    8454:	2241      	movs	r2, #65	; 0x41
    8456:	5c9b      	ldrb	r3, [r3, r2]
    8458:	2202      	movs	r2, #2
    845a:	4013      	ands	r3, r2
    845c:	b2db      	uxtb	r3, r3
    845e:	2b00      	cmp	r3, #0
    8460:	d105      	bne.n	846e <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
    8462:	687b      	ldr	r3, [r7, #4]
    8464:	2100      	movs	r1, #0
    8466:	0018      	movs	r0, r3
    8468:	4b3b      	ldr	r3, [pc, #236]	; (8558 <_http_client_handle_entity+0x198>)
    846a:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
    846c:	e06e      	b.n	854c <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    846e:	687b      	ldr	r3, [r7, #4]
    8470:	22dc      	movs	r2, #220	; 0xdc
    8472:	589b      	ldr	r3, [r3, r2]
    8474:	001a      	movs	r2, r3
    8476:	697b      	ldr	r3, [r7, #20]
    8478:	189a      	adds	r2, r3, r2
    847a:	687b      	ldr	r3, [r7, #4]
    847c:	0011      	movs	r1, r2
    847e:	0018      	movs	r0, r3
    8480:	4b36      	ldr	r3, [pc, #216]	; (855c <_http_client_handle_entity+0x19c>)
    8482:	4798      	blx	r3
				return module->recved_size;
    8484:	687b      	ldr	r3, [r7, #4]
    8486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8488:	e061      	b.n	854e <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
    848a:	687b      	ldr	r3, [r7, #4]
    848c:	22dc      	movs	r2, #220	; 0xdc
    848e:	589b      	ldr	r3, [r3, r2]
    8490:	2b00      	cmp	r3, #0
    8492:	db57      	blt.n	8544 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
    8494:	687b      	ldr	r3, [r7, #4]
    8496:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    8498:	2308      	movs	r3, #8
    849a:	18fb      	adds	r3, r7, r3
    849c:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
    849e:	2308      	movs	r3, #8
    84a0:	18fb      	adds	r3, r7, r3
    84a2:	697a      	ldr	r2, [r7, #20]
    84a4:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
    84a6:	687b      	ldr	r3, [r7, #4]
    84a8:	22e0      	movs	r2, #224	; 0xe0
    84aa:	589a      	ldr	r2, [r3, r2]
    84ac:	687b      	ldr	r3, [r7, #4]
    84ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    84b0:	18d2      	adds	r2, r2, r3
    84b2:	687b      	ldr	r3, [r7, #4]
    84b4:	21e0      	movs	r1, #224	; 0xe0
    84b6:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
    84b8:	687b      	ldr	r3, [r7, #4]
    84ba:	22dc      	movs	r2, #220	; 0xdc
    84bc:	589a      	ldr	r2, [r3, r2]
    84be:	687b      	ldr	r3, [r7, #4]
    84c0:	21e0      	movs	r1, #224	; 0xe0
    84c2:	585b      	ldr	r3, [r3, r1]
    84c4:	429a      	cmp	r2, r3
    84c6:	dc0c      	bgt.n	84e2 <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
    84c8:	687b      	ldr	r3, [r7, #4]
    84ca:	22d8      	movs	r2, #216	; 0xd8
    84cc:	2100      	movs	r1, #0
    84ce:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
    84d0:	687b      	ldr	r3, [r7, #4]
    84d2:	22e4      	movs	r2, #228	; 0xe4
    84d4:	2100      	movs	r1, #0
    84d6:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
    84d8:	2308      	movs	r3, #8
    84da:	18fb      	adds	r3, r7, r3
    84dc:	2201      	movs	r2, #1
    84de:	721a      	strb	r2, [r3, #8]
    84e0:	e003      	b.n	84ea <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
    84e2:	2308      	movs	r3, #8
    84e4:	18fb      	adds	r3, r7, r3
    84e6:	2200      	movs	r2, #0
    84e8:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
    84ea:	687b      	ldr	r3, [r7, #4]
    84ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    84ee:	2b00      	cmp	r3, #0
    84f0:	d006      	beq.n	8500 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    84f2:	687b      	ldr	r3, [r7, #4]
    84f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    84f6:	2208      	movs	r2, #8
    84f8:	18ba      	adds	r2, r7, r2
    84fa:	6878      	ldr	r0, [r7, #4]
    84fc:	2103      	movs	r1, #3
    84fe:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
    8500:	2308      	movs	r3, #8
    8502:	18fb      	adds	r3, r7, r3
    8504:	7a1b      	ldrb	r3, [r3, #8]
    8506:	2b01      	cmp	r3, #1
    8508:	d112      	bne.n	8530 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
    850a:	687b      	ldr	r3, [r7, #4]
    850c:	2241      	movs	r2, #65	; 0x41
    850e:	5c9b      	ldrb	r3, [r3, r2]
    8510:	2202      	movs	r2, #2
    8512:	4013      	ands	r3, r2
    8514:	b2db      	uxtb	r3, r3
    8516:	2b00      	cmp	r3, #0
    8518:	d10a      	bne.n	8530 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
    851a:	4b11      	ldr	r3, [pc, #68]	; (8560 <_http_client_handle_entity+0x1a0>)
    851c:	0018      	movs	r0, r3
    851e:	4b11      	ldr	r3, [pc, #68]	; (8564 <_http_client_handle_entity+0x1a4>)
    8520:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
    8522:	687b      	ldr	r3, [r7, #4]
    8524:	2100      	movs	r1, #0
    8526:	0018      	movs	r0, r3
    8528:	4b0b      	ldr	r3, [pc, #44]	; (8558 <_http_client_handle_entity+0x198>)
    852a:	4798      	blx	r3
					return 0;
    852c:	2300      	movs	r3, #0
    852e:	e00e      	b.n	854e <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
    8530:	687b      	ldr	r3, [r7, #4]
    8532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8534:	697a      	ldr	r2, [r7, #20]
    8536:	18d2      	adds	r2, r2, r3
    8538:	687b      	ldr	r3, [r7, #4]
    853a:	0011      	movs	r1, r2
    853c:	0018      	movs	r0, r3
    853e:	4b07      	ldr	r3, [pc, #28]	; (855c <_http_client_handle_entity+0x19c>)
    8540:	4798      	blx	r3
    8542:	e003      	b.n	854c <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
    8544:	687b      	ldr	r3, [r7, #4]
    8546:	0018      	movs	r0, r3
    8548:	4b07      	ldr	r3, [pc, #28]	; (8568 <_http_client_handle_entity+0x1a8>)
    854a:	4798      	blx	r3
		}
	}

	return 0;
    854c:	2300      	movs	r3, #0
}
    854e:	0018      	movs	r0, r3
    8550:	46bd      	mov	sp, r7
    8552:	b006      	add	sp, #24
    8554:	bd80      	pop	{r7, pc}
    8556:	46c0      	nop			; (mov r8, r8)
    8558:	00007599 	.word	0x00007599
    855c:	0000856d 	.word	0x0000856d
    8560:	00010784 	.word	0x00010784
    8564:	0000e0c9 	.word	0x0000e0c9
    8568:	000081ad 	.word	0x000081ad

0000856c <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
    856c:	b580      	push	{r7, lr}
    856e:	b084      	sub	sp, #16
    8570:	af00      	add	r7, sp, #0
    8572:	6078      	str	r0, [r7, #4]
    8574:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
    8576:	687b      	ldr	r3, [r7, #4]
    8578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    857a:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    857c:	687b      	ldr	r3, [r7, #4]
    857e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8580:	001a      	movs	r2, r3
    8582:	683b      	ldr	r3, [r7, #0]
    8584:	1ad2      	subs	r2, r2, r3
    8586:	68fb      	ldr	r3, [r7, #12]
    8588:	18d3      	adds	r3, r2, r3
    858a:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
    858c:	68bb      	ldr	r3, [r7, #8]
    858e:	2b00      	cmp	r3, #0
    8590:	dd09      	ble.n	85a6 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
    8592:	68ba      	ldr	r2, [r7, #8]
    8594:	6839      	ldr	r1, [r7, #0]
    8596:	68fb      	ldr	r3, [r7, #12]
    8598:	0018      	movs	r0, r3
    859a:	4b06      	ldr	r3, [pc, #24]	; (85b4 <_http_client_move_buffer+0x48>)
    859c:	4798      	blx	r3
		module->recved_size = remain;
    859e:	68ba      	ldr	r2, [r7, #8]
    85a0:	687b      	ldr	r3, [r7, #4]
    85a2:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
    85a4:	e002      	b.n	85ac <_http_client_move_buffer+0x40>
		module->recved_size = 0;
    85a6:	687b      	ldr	r3, [r7, #4]
    85a8:	2200      	movs	r2, #0
    85aa:	645a      	str	r2, [r3, #68]	; 0x44
}
    85ac:	46c0      	nop			; (mov r8, r8)
    85ae:	46bd      	mov	sp, r7
    85b0:	b004      	add	sp, #16
    85b2:	bd80      	pop	{r7, pc}
    85b4:	0000de27 	.word	0x0000de27

000085b8 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
    85b8:	b580      	push	{r7, lr}
    85ba:	b084      	sub	sp, #16
    85bc:	af00      	add	r7, sp, #0
    85be:	60f8      	str	r0, [r7, #12]
    85c0:	60b9      	str	r1, [r7, #8]
    85c2:	607a      	str	r2, [r7, #4]
    85c4:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
    85c6:	68fb      	ldr	r3, [r7, #12]
    85c8:	687a      	ldr	r2, [r7, #4]
    85ca:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
    85cc:	68fb      	ldr	r3, [r7, #12]
    85ce:	68ba      	ldr	r2, [r7, #8]
    85d0:	611a      	str	r2, [r3, #16]
	writer->written = 0;
    85d2:	68fb      	ldr	r3, [r7, #12]
    85d4:	2200      	movs	r2, #0
    85d6:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
    85d8:	68fb      	ldr	r3, [r7, #12]
    85da:	683a      	ldr	r2, [r7, #0]
    85dc:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
    85de:	68fb      	ldr	r3, [r7, #12]
    85e0:	69ba      	ldr	r2, [r7, #24]
    85e2:	60da      	str	r2, [r3, #12]
}
    85e4:	46c0      	nop			; (mov r8, r8)
    85e6:	46bd      	mov	sp, r7
    85e8:	b004      	add	sp, #16
    85ea:	bd80      	pop	{r7, pc}

000085ec <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
    85ec:	b580      	push	{r7, lr}
    85ee:	b084      	sub	sp, #16
    85f0:	af00      	add	r7, sp, #0
    85f2:	6078      	str	r0, [r7, #4]
    85f4:	000a      	movs	r2, r1
    85f6:	1cfb      	adds	r3, r7, #3
    85f8:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
    85fa:	687b      	ldr	r3, [r7, #4]
    85fc:	681a      	ldr	r2, [r3, #0]
    85fe:	687b      	ldr	r3, [r7, #4]
    8600:	685b      	ldr	r3, [r3, #4]
    8602:	1ad3      	subs	r3, r2, r3
    8604:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
    8606:	68fb      	ldr	r3, [r7, #12]
    8608:	2b00      	cmp	r3, #0
    860a:	dc03      	bgt.n	8614 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
    860c:	687b      	ldr	r3, [r7, #4]
    860e:	0018      	movs	r0, r3
    8610:	4b08      	ldr	r3, [pc, #32]	; (8634 <stream_writer_send_8+0x48>)
    8612:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
    8614:	687b      	ldr	r3, [r7, #4]
    8616:	6919      	ldr	r1, [r3, #16]
    8618:	687b      	ldr	r3, [r7, #4]
    861a:	685b      	ldr	r3, [r3, #4]
    861c:	1c58      	adds	r0, r3, #1
    861e:	687a      	ldr	r2, [r7, #4]
    8620:	6050      	str	r0, [r2, #4]
    8622:	18cb      	adds	r3, r1, r3
    8624:	1cfa      	adds	r2, r7, #3
    8626:	7812      	ldrb	r2, [r2, #0]
    8628:	701a      	strb	r2, [r3, #0]
}
    862a:	46c0      	nop			; (mov r8, r8)
    862c:	46bd      	mov	sp, r7
    862e:	b004      	add	sp, #16
    8630:	bd80      	pop	{r7, pc}
    8632:	46c0      	nop			; (mov r8, r8)
    8634:	00008675 	.word	0x00008675

00008638 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
    8638:	b580      	push	{r7, lr}
    863a:	b084      	sub	sp, #16
    863c:	af00      	add	r7, sp, #0
    863e:	60f8      	str	r0, [r7, #12]
    8640:	60b9      	str	r1, [r7, #8]
    8642:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
    8644:	e00d      	b.n	8662 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
    8646:	68bb      	ldr	r3, [r7, #8]
    8648:	781b      	ldrb	r3, [r3, #0]
    864a:	b25a      	sxtb	r2, r3
    864c:	68fb      	ldr	r3, [r7, #12]
    864e:	0011      	movs	r1, r2
    8650:	0018      	movs	r0, r3
    8652:	4b07      	ldr	r3, [pc, #28]	; (8670 <stream_writer_send_buffer+0x38>)
    8654:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
    8656:	687b      	ldr	r3, [r7, #4]
    8658:	3b01      	subs	r3, #1
    865a:	607b      	str	r3, [r7, #4]
    865c:	68bb      	ldr	r3, [r7, #8]
    865e:	3301      	adds	r3, #1
    8660:	60bb      	str	r3, [r7, #8]
    8662:	687b      	ldr	r3, [r7, #4]
    8664:	2b00      	cmp	r3, #0
    8666:	d1ee      	bne.n	8646 <stream_writer_send_buffer+0xe>
	}
}
    8668:	46c0      	nop			; (mov r8, r8)
    866a:	46bd      	mov	sp, r7
    866c:	b004      	add	sp, #16
    866e:	bd80      	pop	{r7, pc}
    8670:	000085ed 	.word	0x000085ed

00008674 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
    8674:	b590      	push	{r4, r7, lr}
    8676:	b083      	sub	sp, #12
    8678:	af00      	add	r7, sp, #0
    867a:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
    867c:	687b      	ldr	r3, [r7, #4]
    867e:	685b      	ldr	r3, [r3, #4]
    8680:	2b00      	cmp	r3, #0
    8682:	d00c      	beq.n	869e <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    8684:	687b      	ldr	r3, [r7, #4]
    8686:	689c      	ldr	r4, [r3, #8]
    8688:	687b      	ldr	r3, [r7, #4]
    868a:	68d8      	ldr	r0, [r3, #12]
    868c:	687b      	ldr	r3, [r7, #4]
    868e:	6919      	ldr	r1, [r3, #16]
    8690:	687b      	ldr	r3, [r7, #4]
    8692:	685b      	ldr	r3, [r3, #4]
    8694:	001a      	movs	r2, r3
    8696:	47a0      	blx	r4
		writer->written = 0;
    8698:	687b      	ldr	r3, [r7, #4]
    869a:	2200      	movs	r2, #0
    869c:	605a      	str	r2, [r3, #4]
	}
}
    869e:	46c0      	nop			; (mov r8, r8)
    86a0:	46bd      	mov	sp, r7
    86a2:	b003      	add	sp, #12
    86a4:	bd90      	pop	{r4, r7, pc}
	...

000086a8 <system_cpu_clock_get_hz>:
{
    86a8:	b580      	push	{r7, lr}
    86aa:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    86ac:	2000      	movs	r0, #0
    86ae:	4b05      	ldr	r3, [pc, #20]	; (86c4 <system_cpu_clock_get_hz+0x1c>)
    86b0:	4798      	blx	r3
    86b2:	0002      	movs	r2, r0
    86b4:	4b04      	ldr	r3, [pc, #16]	; (86c8 <system_cpu_clock_get_hz+0x20>)
    86b6:	7a1b      	ldrb	r3, [r3, #8]
    86b8:	b2db      	uxtb	r3, r3
    86ba:	40da      	lsrs	r2, r3
    86bc:	0013      	movs	r3, r2
}
    86be:	0018      	movs	r0, r3
    86c0:	46bd      	mov	sp, r7
    86c2:	bd80      	pop	{r7, pc}
    86c4:	0000c529 	.word	0x0000c529
    86c8:	40000400 	.word	0x40000400

000086cc <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
    86cc:	b580      	push	{r7, lr}
    86ce:	b084      	sub	sp, #16
    86d0:	af00      	add	r7, sp, #0
    86d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    86d4:	687b      	ldr	r3, [r7, #4]
    86d6:	681b      	ldr	r3, [r3, #0]
    86d8:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    86da:	46c0      	nop			; (mov r8, r8)
    86dc:	68fb      	ldr	r3, [r7, #12]
    86de:	689b      	ldr	r3, [r3, #8]
    86e0:	2202      	movs	r2, #2
    86e2:	4013      	ands	r3, r2
    86e4:	d1fa      	bne.n	86dc <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    86e6:	68fb      	ldr	r3, [r7, #12]
    86e8:	681b      	ldr	r3, [r3, #0]
    86ea:	2202      	movs	r2, #2
    86ec:	431a      	orrs	r2, r3
    86ee:	68fb      	ldr	r3, [r7, #12]
    86f0:	601a      	str	r2, [r3, #0]
}
    86f2:	46c0      	nop			; (mov r8, r8)
    86f4:	46bd      	mov	sp, r7
    86f6:	b004      	add	sp, #16
    86f8:	bd80      	pop	{r7, pc}
	...

000086fc <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
    86fc:	b580      	push	{r7, lr}
    86fe:	b082      	sub	sp, #8
    8700:	af00      	add	r7, sp, #0
    8702:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
    8704:	4b04      	ldr	r3, [pc, #16]	; (8718 <sw_timer_tcc_callback+0x1c>)
    8706:	681b      	ldr	r3, [r3, #0]
    8708:	1c5a      	adds	r2, r3, #1
    870a:	4b03      	ldr	r3, [pc, #12]	; (8718 <sw_timer_tcc_callback+0x1c>)
    870c:	601a      	str	r2, [r3, #0]
}
    870e:	46c0      	nop			; (mov r8, r8)
    8710:	46bd      	mov	sp, r7
    8712:	b002      	add	sp, #8
    8714:	bd80      	pop	{r7, pc}
    8716:	46c0      	nop			; (mov r8, r8)
    8718:	20000238 	.word	0x20000238

0000871c <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
    871c:	b580      	push	{r7, lr}
    871e:	b082      	sub	sp, #8
    8720:	af00      	add	r7, sp, #0
    8722:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
    8724:	687b      	ldr	r3, [r7, #4]
    8726:	2264      	movs	r2, #100	; 0x64
    8728:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
    872a:	687b      	ldr	r3, [r7, #4]
    872c:	2200      	movs	r2, #0
    872e:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
    8730:	687b      	ldr	r3, [r7, #4]
    8732:	2200      	movs	r2, #0
    8734:	705a      	strb	r2, [r3, #1]
}
    8736:	46c0      	nop			; (mov r8, r8)
    8738:	46bd      	mov	sp, r7
    873a:	b002      	add	sp, #8
    873c:	bd80      	pop	{r7, pc}
	...

00008740 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    8740:	b590      	push	{r4, r7, lr}
    8742:	b0b1      	sub	sp, #196	; 0xc4
    8744:	af00      	add	r7, sp, #0
    8746:	6078      	str	r0, [r7, #4]
    8748:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    874a:	230c      	movs	r3, #12
    874c:	18fb      	adds	r3, r7, r3
    874e:	4a2e      	ldr	r2, [pc, #184]	; (8808 <sw_timer_init+0xc8>)
    8750:	ca13      	ldmia	r2!, {r0, r1, r4}
    8752:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    8754:	683b      	ldr	r3, [r7, #0]
    8756:	885b      	ldrh	r3, [r3, #2]
    8758:	001a      	movs	r2, r3
    875a:	687b      	ldr	r3, [r7, #4]
    875c:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    875e:	687b      	ldr	r3, [r7, #4]
    8760:	3314      	adds	r3, #20
    8762:	22bc      	movs	r2, #188	; 0xbc
    8764:	18ba      	adds	r2, r7, r2
    8766:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    8768:	683b      	ldr	r3, [r7, #0]
    876a:	781b      	ldrb	r3, [r3, #0]
    876c:	001a      	movs	r2, r3
    876e:	230c      	movs	r3, #12
    8770:	18fb      	adds	r3, r7, r3
    8772:	0092      	lsls	r2, r2, #2
    8774:	58d2      	ldr	r2, [r2, r3]
    8776:	2318      	movs	r3, #24
    8778:	18fb      	adds	r3, r7, r3
    877a:	0011      	movs	r1, r2
    877c:	0018      	movs	r0, r3
    877e:	4b23      	ldr	r3, [pc, #140]	; (880c <sw_timer_init+0xcc>)
    8780:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    8782:	4b23      	ldr	r3, [pc, #140]	; (8810 <sw_timer_init+0xd0>)
    8784:	4798      	blx	r3
    8786:	0004      	movs	r4, r0
    8788:	683b      	ldr	r3, [r7, #0]
    878a:	885b      	ldrh	r3, [r3, #2]
    878c:	001a      	movs	r2, r3
    878e:	4b21      	ldr	r3, [pc, #132]	; (8814 <sw_timer_init+0xd4>)
    8790:	0011      	movs	r1, r2
    8792:	22fa      	movs	r2, #250	; 0xfa
    8794:	0210      	lsls	r0, r2, #8
    8796:	4798      	blx	r3
    8798:	0003      	movs	r3, r0
    879a:	001a      	movs	r2, r3
    879c:	4b1e      	ldr	r3, [pc, #120]	; (8818 <sw_timer_init+0xd8>)
    879e:	0011      	movs	r1, r2
    87a0:	0020      	movs	r0, r4
    87a2:	4798      	blx	r3
    87a4:	0003      	movs	r3, r0
    87a6:	001a      	movs	r2, r3
    87a8:	2318      	movs	r3, #24
    87aa:	18fb      	adds	r3, r7, r3
    87ac:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    87ae:	2318      	movs	r3, #24
    87b0:	18fb      	adds	r3, r7, r3
    87b2:	2205      	movs	r2, #5
    87b4:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    87b6:	683b      	ldr	r3, [r7, #0]
    87b8:	781b      	ldrb	r3, [r3, #0]
    87ba:	001a      	movs	r2, r3
    87bc:	230c      	movs	r3, #12
    87be:	18fb      	adds	r3, r7, r3
    87c0:	0092      	lsls	r2, r2, #2
    87c2:	58d1      	ldr	r1, [r2, r3]
    87c4:	2318      	movs	r3, #24
    87c6:	18fa      	adds	r2, r7, r3
    87c8:	23bc      	movs	r3, #188	; 0xbc
    87ca:	18fb      	adds	r3, r7, r3
    87cc:	681b      	ldr	r3, [r3, #0]
    87ce:	0018      	movs	r0, r3
    87d0:	4b12      	ldr	r3, [pc, #72]	; (881c <sw_timer_init+0xdc>)
    87d2:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    87d4:	683b      	ldr	r3, [r7, #0]
    87d6:	785b      	ldrb	r3, [r3, #1]
    87d8:	3308      	adds	r3, #8
    87da:	b2da      	uxtb	r2, r3
    87dc:	4910      	ldr	r1, [pc, #64]	; (8820 <sw_timer_init+0xe0>)
    87de:	23bc      	movs	r3, #188	; 0xbc
    87e0:	18fb      	adds	r3, r7, r3
    87e2:	681b      	ldr	r3, [r3, #0]
    87e4:	0018      	movs	r0, r3
    87e6:	4b0f      	ldr	r3, [pc, #60]	; (8824 <sw_timer_init+0xe4>)
    87e8:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    87ea:	683b      	ldr	r3, [r7, #0]
    87ec:	785b      	ldrb	r3, [r3, #1]
    87ee:	3308      	adds	r3, #8
    87f0:	b2da      	uxtb	r2, r3
    87f2:	23bc      	movs	r3, #188	; 0xbc
    87f4:	18fb      	adds	r3, r7, r3
    87f6:	681b      	ldr	r3, [r3, #0]
    87f8:	0011      	movs	r1, r2
    87fa:	0018      	movs	r0, r3
    87fc:	4b0a      	ldr	r3, [pc, #40]	; (8828 <sw_timer_init+0xe8>)
    87fe:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
    8800:	46c0      	nop			; (mov r8, r8)
    8802:	46bd      	mov	sp, r7
    8804:	b031      	add	sp, #196	; 0xc4
    8806:	bd90      	pop	{r4, r7, pc}
    8808:	000107c4 	.word	0x000107c4
    880c:	000061f5 	.word	0x000061f5
    8810:	000086a9 	.word	0x000086a9
    8814:	0000db6d 	.word	0x0000db6d
    8818:	0000da59 	.word	0x0000da59
    881c:	00006851 	.word	0x00006851
    8820:	000086fd 	.word	0x000086fd
    8824:	00006c69 	.word	0x00006c69
    8828:	00006ca9 	.word	0x00006ca9

0000882c <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
    882c:	b580      	push	{r7, lr}
    882e:	b084      	sub	sp, #16
    8830:	af00      	add	r7, sp, #0
    8832:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
    8834:	687b      	ldr	r3, [r7, #4]
    8836:	3314      	adds	r3, #20
    8838:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
    883a:	68fb      	ldr	r3, [r7, #12]
    883c:	0018      	movs	r0, r3
    883e:	4b03      	ldr	r3, [pc, #12]	; (884c <sw_timer_enable+0x20>)
    8840:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
    8842:	46c0      	nop			; (mov r8, r8)
    8844:	46bd      	mov	sp, r7
    8846:	b004      	add	sp, #16
    8848:	bd80      	pop	{r7, pc}
    884a:	46c0      	nop			; (mov r8, r8)
    884c:	000086cd 	.word	0x000086cd

00008850 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
    8850:	b580      	push	{r7, lr}
    8852:	b086      	sub	sp, #24
    8854:	af00      	add	r7, sp, #0
    8856:	60f8      	str	r0, [r7, #12]
    8858:	60b9      	str	r1, [r7, #8]
    885a:	607a      	str	r2, [r7, #4]
    885c:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    885e:	2300      	movs	r3, #0
    8860:	617b      	str	r3, [r7, #20]
    8862:	e032      	b.n	88ca <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
    8864:	68f9      	ldr	r1, [r7, #12]
    8866:	697a      	ldr	r2, [r7, #20]
    8868:	0013      	movs	r3, r2
    886a:	009b      	lsls	r3, r3, #2
    886c:	189b      	adds	r3, r3, r2
    886e:	009b      	lsls	r3, r3, #2
    8870:	5c5b      	ldrb	r3, [r3, r1]
    8872:	07db      	lsls	r3, r3, #31
    8874:	0fdb      	lsrs	r3, r3, #31
    8876:	b2db      	uxtb	r3, r3
    8878:	2b00      	cmp	r3, #0
    887a:	d123      	bne.n	88c4 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
    887c:	697a      	ldr	r2, [r7, #20]
    887e:	0013      	movs	r3, r2
    8880:	009b      	lsls	r3, r3, #2
    8882:	189b      	adds	r3, r3, r2
    8884:	009b      	lsls	r3, r3, #2
    8886:	68fa      	ldr	r2, [r7, #12]
    8888:	18d3      	adds	r3, r2, r3
    888a:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
    888c:	693b      	ldr	r3, [r7, #16]
    888e:	68ba      	ldr	r2, [r7, #8]
    8890:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
    8892:	693b      	ldr	r3, [r7, #16]
    8894:	781a      	ldrb	r2, [r3, #0]
    8896:	2102      	movs	r1, #2
    8898:	438a      	bics	r2, r1
    889a:	701a      	strb	r2, [r3, #0]
			handler->context = context;
    889c:	693b      	ldr	r3, [r7, #16]
    889e:	687a      	ldr	r2, [r7, #4]
    88a0:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
    88a2:	68fb      	ldr	r3, [r7, #12]
    88a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    88a6:	4b0d      	ldr	r3, [pc, #52]	; (88dc <sw_timer_register_callback+0x8c>)
    88a8:	0011      	movs	r1, r2
    88aa:	6838      	ldr	r0, [r7, #0]
    88ac:	4798      	blx	r3
    88ae:	0003      	movs	r3, r0
    88b0:	001a      	movs	r2, r3
    88b2:	693b      	ldr	r3, [r7, #16]
    88b4:	60da      	str	r2, [r3, #12]
			handler->used = 1;
    88b6:	693b      	ldr	r3, [r7, #16]
    88b8:	781a      	ldrb	r2, [r3, #0]
    88ba:	2101      	movs	r1, #1
    88bc:	430a      	orrs	r2, r1
    88be:	701a      	strb	r2, [r3, #0]
			return index;
    88c0:	697b      	ldr	r3, [r7, #20]
    88c2:	e007      	b.n	88d4 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    88c4:	697b      	ldr	r3, [r7, #20]
    88c6:	3301      	adds	r3, #1
    88c8:	617b      	str	r3, [r7, #20]
    88ca:	697b      	ldr	r3, [r7, #20]
    88cc:	2b00      	cmp	r3, #0
    88ce:	ddc9      	ble.n	8864 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
    88d0:	2301      	movs	r3, #1
    88d2:	425b      	negs	r3, r3
}
    88d4:	0018      	movs	r0, r3
    88d6:	46bd      	mov	sp, r7
    88d8:	b006      	add	sp, #24
    88da:	bd80      	pop	{r7, pc}
    88dc:	0000da59 	.word	0x0000da59

000088e0 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    88e0:	b580      	push	{r7, lr}
    88e2:	b086      	sub	sp, #24
    88e4:	af00      	add	r7, sp, #0
    88e6:	60f8      	str	r0, [r7, #12]
    88e8:	60b9      	str	r1, [r7, #8]
    88ea:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    88ec:	68ba      	ldr	r2, [r7, #8]
    88ee:	0013      	movs	r3, r2
    88f0:	009b      	lsls	r3, r3, #2
    88f2:	189b      	adds	r3, r3, r2
    88f4:	009b      	lsls	r3, r3, #2
    88f6:	68fa      	ldr	r2, [r7, #12]
    88f8:	18d3      	adds	r3, r2, r3
    88fa:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
    88fc:	697b      	ldr	r3, [r7, #20]
    88fe:	781a      	ldrb	r2, [r3, #0]
    8900:	2102      	movs	r1, #2
    8902:	430a      	orrs	r2, r1
    8904:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    8906:	68fb      	ldr	r3, [r7, #12]
    8908:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    890a:	4b07      	ldr	r3, [pc, #28]	; (8928 <sw_timer_enable_callback+0x48>)
    890c:	0011      	movs	r1, r2
    890e:	6878      	ldr	r0, [r7, #4]
    8910:	4798      	blx	r3
    8912:	0003      	movs	r3, r0
    8914:	001a      	movs	r2, r3
    8916:	4b05      	ldr	r3, [pc, #20]	; (892c <sw_timer_enable_callback+0x4c>)
    8918:	681b      	ldr	r3, [r3, #0]
    891a:	18d2      	adds	r2, r2, r3
    891c:	697b      	ldr	r3, [r7, #20]
    891e:	611a      	str	r2, [r3, #16]
}
    8920:	46c0      	nop			; (mov r8, r8)
    8922:	46bd      	mov	sp, r7
    8924:	b006      	add	sp, #24
    8926:	bd80      	pop	{r7, pc}
    8928:	0000da59 	.word	0x0000da59
    892c:	20000238 	.word	0x20000238

00008930 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
    8930:	b580      	push	{r7, lr}
    8932:	b084      	sub	sp, #16
    8934:	af00      	add	r7, sp, #0
    8936:	6078      	str	r0, [r7, #4]
    8938:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    893a:	683a      	ldr	r2, [r7, #0]
    893c:	0013      	movs	r3, r2
    893e:	009b      	lsls	r3, r3, #2
    8940:	189b      	adds	r3, r3, r2
    8942:	009b      	lsls	r3, r3, #2
    8944:	687a      	ldr	r2, [r7, #4]
    8946:	18d3      	adds	r3, r2, r3
    8948:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
    894a:	68fb      	ldr	r3, [r7, #12]
    894c:	781a      	ldrb	r2, [r3, #0]
    894e:	2102      	movs	r1, #2
    8950:	438a      	bics	r2, r1
    8952:	701a      	strb	r2, [r3, #0]
}
    8954:	46c0      	nop			; (mov r8, r8)
    8956:	46bd      	mov	sp, r7
    8958:	b004      	add	sp, #16
    895a:	bd80      	pop	{r7, pc}

0000895c <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    895c:	b590      	push	{r4, r7, lr}
    895e:	b085      	sub	sp, #20
    8960:	af00      	add	r7, sp, #0
    8962:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    8964:	2300      	movs	r3, #0
    8966:	60fb      	str	r3, [r7, #12]
    8968:	e053      	b.n	8a12 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    896a:	6879      	ldr	r1, [r7, #4]
    896c:	68fa      	ldr	r2, [r7, #12]
    896e:	0013      	movs	r3, r2
    8970:	009b      	lsls	r3, r3, #2
    8972:	189b      	adds	r3, r3, r2
    8974:	009b      	lsls	r3, r3, #2
    8976:	5c5b      	ldrb	r3, [r3, r1]
    8978:	07db      	lsls	r3, r3, #31
    897a:	0fdb      	lsrs	r3, r3, #31
    897c:	b2db      	uxtb	r3, r3
    897e:	2b00      	cmp	r3, #0
    8980:	d044      	beq.n	8a0c <sw_timer_task+0xb0>
    8982:	6879      	ldr	r1, [r7, #4]
    8984:	68fa      	ldr	r2, [r7, #12]
    8986:	0013      	movs	r3, r2
    8988:	009b      	lsls	r3, r3, #2
    898a:	189b      	adds	r3, r3, r2
    898c:	009b      	lsls	r3, r3, #2
    898e:	5c5b      	ldrb	r3, [r3, r1]
    8990:	079b      	lsls	r3, r3, #30
    8992:	0fdb      	lsrs	r3, r3, #31
    8994:	b2db      	uxtb	r3, r3
    8996:	2b00      	cmp	r3, #0
    8998:	d038      	beq.n	8a0c <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
    899a:	68fa      	ldr	r2, [r7, #12]
    899c:	0013      	movs	r3, r2
    899e:	009b      	lsls	r3, r3, #2
    89a0:	189b      	adds	r3, r3, r2
    89a2:	009b      	lsls	r3, r3, #2
    89a4:	687a      	ldr	r2, [r7, #4]
    89a6:	18d3      	adds	r3, r2, r3
    89a8:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    89aa:	68bb      	ldr	r3, [r7, #8]
    89ac:	691a      	ldr	r2, [r3, #16]
    89ae:	4b1c      	ldr	r3, [pc, #112]	; (8a20 <sw_timer_task+0xc4>)
    89b0:	681b      	ldr	r3, [r3, #0]
    89b2:	1ad3      	subs	r3, r2, r3
    89b4:	d52a      	bpl.n	8a0c <sw_timer_task+0xb0>
    89b6:	68bb      	ldr	r3, [r7, #8]
    89b8:	781b      	ldrb	r3, [r3, #0]
    89ba:	2204      	movs	r2, #4
    89bc:	4013      	ands	r3, r2
    89be:	b2db      	uxtb	r3, r3
    89c0:	2b00      	cmp	r3, #0
    89c2:	d123      	bne.n	8a0c <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
    89c4:	68bb      	ldr	r3, [r7, #8]
    89c6:	781a      	ldrb	r2, [r3, #0]
    89c8:	2104      	movs	r1, #4
    89ca:	430a      	orrs	r2, r1
    89cc:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
    89ce:	68bb      	ldr	r3, [r7, #8]
    89d0:	68db      	ldr	r3, [r3, #12]
    89d2:	2b00      	cmp	r3, #0
    89d4:	d007      	beq.n	89e6 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
    89d6:	68bb      	ldr	r3, [r7, #8]
    89d8:	68da      	ldr	r2, [r3, #12]
    89da:	4b11      	ldr	r3, [pc, #68]	; (8a20 <sw_timer_task+0xc4>)
    89dc:	681b      	ldr	r3, [r3, #0]
    89de:	18d2      	adds	r2, r2, r3
    89e0:	68bb      	ldr	r3, [r7, #8]
    89e2:	611a      	str	r2, [r3, #16]
    89e4:	e004      	b.n	89f0 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
    89e6:	68bb      	ldr	r3, [r7, #8]
    89e8:	781a      	ldrb	r2, [r3, #0]
    89ea:	2102      	movs	r1, #2
    89ec:	438a      	bics	r2, r1
    89ee:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
    89f0:	68bb      	ldr	r3, [r7, #8]
    89f2:	685c      	ldr	r4, [r3, #4]
    89f4:	68bb      	ldr	r3, [r7, #8]
    89f6:	689a      	ldr	r2, [r3, #8]
    89f8:	68bb      	ldr	r3, [r7, #8]
    89fa:	68db      	ldr	r3, [r3, #12]
    89fc:	68f9      	ldr	r1, [r7, #12]
    89fe:	6878      	ldr	r0, [r7, #4]
    8a00:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
    8a02:	68bb      	ldr	r3, [r7, #8]
    8a04:	781a      	ldrb	r2, [r3, #0]
    8a06:	2104      	movs	r1, #4
    8a08:	438a      	bics	r2, r1
    8a0a:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    8a0c:	68fb      	ldr	r3, [r7, #12]
    8a0e:	3301      	adds	r3, #1
    8a10:	60fb      	str	r3, [r7, #12]
    8a12:	68fb      	ldr	r3, [r7, #12]
    8a14:	2b00      	cmp	r3, #0
    8a16:	dda8      	ble.n	896a <sw_timer_task+0xe>
			}
		}
	}
}
    8a18:	46c0      	nop			; (mov r8, r8)
    8a1a:	46bd      	mov	sp, r7
    8a1c:	b005      	add	sp, #20
    8a1e:	bd90      	pop	{r4, r7, pc}
    8a20:	20000238 	.word	0x20000238

00008a24 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    8a24:	b580      	push	{r7, lr}
    8a26:	b082      	sub	sp, #8
    8a28:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    8a2a:	4b10      	ldr	r3, [pc, #64]	; (8a6c <cpu_irq_enter_critical+0x48>)
    8a2c:	681b      	ldr	r3, [r3, #0]
    8a2e:	2b00      	cmp	r3, #0
    8a30:	d112      	bne.n	8a58 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    8a32:	f3ef 8310 	mrs	r3, PRIMASK
    8a36:	607b      	str	r3, [r7, #4]
  return(result);
    8a38:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    8a3a:	2b00      	cmp	r3, #0
    8a3c:	d109      	bne.n	8a52 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    8a3e:	b672      	cpsid	i
    8a40:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    8a44:	4b0a      	ldr	r3, [pc, #40]	; (8a70 <cpu_irq_enter_critical+0x4c>)
    8a46:	2200      	movs	r2, #0
    8a48:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    8a4a:	4b0a      	ldr	r3, [pc, #40]	; (8a74 <cpu_irq_enter_critical+0x50>)
    8a4c:	2201      	movs	r2, #1
    8a4e:	701a      	strb	r2, [r3, #0]
    8a50:	e002      	b.n	8a58 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    8a52:	4b08      	ldr	r3, [pc, #32]	; (8a74 <cpu_irq_enter_critical+0x50>)
    8a54:	2200      	movs	r2, #0
    8a56:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    8a58:	4b04      	ldr	r3, [pc, #16]	; (8a6c <cpu_irq_enter_critical+0x48>)
    8a5a:	681b      	ldr	r3, [r3, #0]
    8a5c:	1c5a      	adds	r2, r3, #1
    8a5e:	4b03      	ldr	r3, [pc, #12]	; (8a6c <cpu_irq_enter_critical+0x48>)
    8a60:	601a      	str	r2, [r3, #0]
}
    8a62:	46c0      	nop			; (mov r8, r8)
    8a64:	46bd      	mov	sp, r7
    8a66:	b002      	add	sp, #8
    8a68:	bd80      	pop	{r7, pc}
    8a6a:	46c0      	nop			; (mov r8, r8)
    8a6c:	2000023c 	.word	0x2000023c
    8a70:	2000000c 	.word	0x2000000c
    8a74:	20000240 	.word	0x20000240

00008a78 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    8a78:	b580      	push	{r7, lr}
    8a7a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    8a7c:	4b0b      	ldr	r3, [pc, #44]	; (8aac <cpu_irq_leave_critical+0x34>)
    8a7e:	681b      	ldr	r3, [r3, #0]
    8a80:	1e5a      	subs	r2, r3, #1
    8a82:	4b0a      	ldr	r3, [pc, #40]	; (8aac <cpu_irq_leave_critical+0x34>)
    8a84:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    8a86:	4b09      	ldr	r3, [pc, #36]	; (8aac <cpu_irq_leave_critical+0x34>)
    8a88:	681b      	ldr	r3, [r3, #0]
    8a8a:	2b00      	cmp	r3, #0
    8a8c:	d10a      	bne.n	8aa4 <cpu_irq_leave_critical+0x2c>
    8a8e:	4b08      	ldr	r3, [pc, #32]	; (8ab0 <cpu_irq_leave_critical+0x38>)
    8a90:	781b      	ldrb	r3, [r3, #0]
    8a92:	b2db      	uxtb	r3, r3
    8a94:	2b00      	cmp	r3, #0
    8a96:	d005      	beq.n	8aa4 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    8a98:	4b06      	ldr	r3, [pc, #24]	; (8ab4 <cpu_irq_leave_critical+0x3c>)
    8a9a:	2201      	movs	r2, #1
    8a9c:	701a      	strb	r2, [r3, #0]
    8a9e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8aa2:	b662      	cpsie	i
	}
}
    8aa4:	46c0      	nop			; (mov r8, r8)
    8aa6:	46bd      	mov	sp, r7
    8aa8:	bd80      	pop	{r7, pc}
    8aaa:	46c0      	nop			; (mov r8, r8)
    8aac:	2000023c 	.word	0x2000023c
    8ab0:	20000240 	.word	0x20000240
    8ab4:	2000000c 	.word	0x2000000c

00008ab8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    8ab8:	b580      	push	{r7, lr}
    8aba:	b082      	sub	sp, #8
    8abc:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    8abe:	4b2f      	ldr	r3, [pc, #188]	; (8b7c <Reset_Handler+0xc4>)
    8ac0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    8ac2:	4b2f      	ldr	r3, [pc, #188]	; (8b80 <Reset_Handler+0xc8>)
    8ac4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    8ac6:	687a      	ldr	r2, [r7, #4]
    8ac8:	683b      	ldr	r3, [r7, #0]
    8aca:	429a      	cmp	r2, r3
    8acc:	d00c      	beq.n	8ae8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    8ace:	e007      	b.n	8ae0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    8ad0:	683b      	ldr	r3, [r7, #0]
    8ad2:	1d1a      	adds	r2, r3, #4
    8ad4:	603a      	str	r2, [r7, #0]
    8ad6:	687a      	ldr	r2, [r7, #4]
    8ad8:	1d11      	adds	r1, r2, #4
    8ada:	6079      	str	r1, [r7, #4]
    8adc:	6812      	ldr	r2, [r2, #0]
    8ade:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    8ae0:	683a      	ldr	r2, [r7, #0]
    8ae2:	4b28      	ldr	r3, [pc, #160]	; (8b84 <Reset_Handler+0xcc>)
    8ae4:	429a      	cmp	r2, r3
    8ae6:	d3f3      	bcc.n	8ad0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    8ae8:	4b27      	ldr	r3, [pc, #156]	; (8b88 <Reset_Handler+0xd0>)
    8aea:	603b      	str	r3, [r7, #0]
    8aec:	e004      	b.n	8af8 <Reset_Handler+0x40>
                *pDest++ = 0;
    8aee:	683b      	ldr	r3, [r7, #0]
    8af0:	1d1a      	adds	r2, r3, #4
    8af2:	603a      	str	r2, [r7, #0]
    8af4:	2200      	movs	r2, #0
    8af6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    8af8:	683a      	ldr	r2, [r7, #0]
    8afa:	4b24      	ldr	r3, [pc, #144]	; (8b8c <Reset_Handler+0xd4>)
    8afc:	429a      	cmp	r2, r3
    8afe:	d3f6      	bcc.n	8aee <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    8b00:	4b23      	ldr	r3, [pc, #140]	; (8b90 <Reset_Handler+0xd8>)
    8b02:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    8b04:	4b23      	ldr	r3, [pc, #140]	; (8b94 <Reset_Handler+0xdc>)
    8b06:	687a      	ldr	r2, [r7, #4]
    8b08:	21ff      	movs	r1, #255	; 0xff
    8b0a:	438a      	bics	r2, r1
    8b0c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    8b0e:	4a22      	ldr	r2, [pc, #136]	; (8b98 <Reset_Handler+0xe0>)
    8b10:	2390      	movs	r3, #144	; 0x90
    8b12:	005b      	lsls	r3, r3, #1
    8b14:	2102      	movs	r1, #2
    8b16:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    8b18:	4a20      	ldr	r2, [pc, #128]	; (8b9c <Reset_Handler+0xe4>)
    8b1a:	78d3      	ldrb	r3, [r2, #3]
    8b1c:	2103      	movs	r1, #3
    8b1e:	438b      	bics	r3, r1
    8b20:	1c19      	adds	r1, r3, #0
    8b22:	2302      	movs	r3, #2
    8b24:	430b      	orrs	r3, r1
    8b26:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    8b28:	4a1c      	ldr	r2, [pc, #112]	; (8b9c <Reset_Handler+0xe4>)
    8b2a:	78d3      	ldrb	r3, [r2, #3]
    8b2c:	210c      	movs	r1, #12
    8b2e:	438b      	bics	r3, r1
    8b30:	1c19      	adds	r1, r3, #0
    8b32:	2308      	movs	r3, #8
    8b34:	430b      	orrs	r3, r1
    8b36:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    8b38:	4a19      	ldr	r2, [pc, #100]	; (8ba0 <Reset_Handler+0xe8>)
    8b3a:	7b93      	ldrb	r3, [r2, #14]
    8b3c:	2130      	movs	r1, #48	; 0x30
    8b3e:	438b      	bics	r3, r1
    8b40:	1c19      	adds	r1, r3, #0
    8b42:	2320      	movs	r3, #32
    8b44:	430b      	orrs	r3, r1
    8b46:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    8b48:	4a15      	ldr	r2, [pc, #84]	; (8ba0 <Reset_Handler+0xe8>)
    8b4a:	7b93      	ldrb	r3, [r2, #14]
    8b4c:	210c      	movs	r1, #12
    8b4e:	438b      	bics	r3, r1
    8b50:	1c19      	adds	r1, r3, #0
    8b52:	2308      	movs	r3, #8
    8b54:	430b      	orrs	r3, r1
    8b56:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    8b58:	4a11      	ldr	r2, [pc, #68]	; (8ba0 <Reset_Handler+0xe8>)
    8b5a:	7b93      	ldrb	r3, [r2, #14]
    8b5c:	2103      	movs	r1, #3
    8b5e:	438b      	bics	r3, r1
    8b60:	1c19      	adds	r1, r3, #0
    8b62:	2302      	movs	r3, #2
    8b64:	430b      	orrs	r3, r1
    8b66:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    8b68:	4a0e      	ldr	r2, [pc, #56]	; (8ba4 <Reset_Handler+0xec>)
    8b6a:	6853      	ldr	r3, [r2, #4]
    8b6c:	2180      	movs	r1, #128	; 0x80
    8b6e:	430b      	orrs	r3, r1
    8b70:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    8b72:	4b0d      	ldr	r3, [pc, #52]	; (8ba8 <Reset_Handler+0xf0>)
    8b74:	4798      	blx	r3

        /* Branch to main function */
        main();
    8b76:	4b0d      	ldr	r3, [pc, #52]	; (8bac <Reset_Handler+0xf4>)
    8b78:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    8b7a:	e7fe      	b.n	8b7a <Reset_Handler+0xc2>
    8b7c:	00010eec 	.word	0x00010eec
    8b80:	20000000 	.word	0x20000000
    8b84:	200001e8 	.word	0x200001e8
    8b88:	200001e8 	.word	0x200001e8
    8b8c:	20000e0c 	.word	0x20000e0c
    8b90:	00000000 	.word	0x00000000
    8b94:	e000ed00 	.word	0xe000ed00
    8b98:	41007000 	.word	0x41007000
    8b9c:	41005000 	.word	0x41005000
    8ba0:	41004800 	.word	0x41004800
    8ba4:	41004000 	.word	0x41004000
    8ba8:	0000dda5 	.word	0x0000dda5
    8bac:	0000d921 	.word	0x0000d921

00008bb0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    8bb0:	b580      	push	{r7, lr}
    8bb2:	af00      	add	r7, sp, #0
        while (1) {
    8bb4:	e7fe      	b.n	8bb4 <Dummy_Handler+0x4>
	...

00008bb8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    8bb8:	b580      	push	{r7, lr}
    8bba:	b084      	sub	sp, #16
    8bbc:	af00      	add	r7, sp, #0
    8bbe:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    8bc0:	4b0a      	ldr	r3, [pc, #40]	; (8bec <_sbrk+0x34>)
    8bc2:	681b      	ldr	r3, [r3, #0]
    8bc4:	2b00      	cmp	r3, #0
    8bc6:	d102      	bne.n	8bce <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    8bc8:	4b08      	ldr	r3, [pc, #32]	; (8bec <_sbrk+0x34>)
    8bca:	4a09      	ldr	r2, [pc, #36]	; (8bf0 <_sbrk+0x38>)
    8bcc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    8bce:	4b07      	ldr	r3, [pc, #28]	; (8bec <_sbrk+0x34>)
    8bd0:	681b      	ldr	r3, [r3, #0]
    8bd2:	60fb      	str	r3, [r7, #12]

	heap += incr;
    8bd4:	4b05      	ldr	r3, [pc, #20]	; (8bec <_sbrk+0x34>)
    8bd6:	681a      	ldr	r2, [r3, #0]
    8bd8:	687b      	ldr	r3, [r7, #4]
    8bda:	18d2      	adds	r2, r2, r3
    8bdc:	4b03      	ldr	r3, [pc, #12]	; (8bec <_sbrk+0x34>)
    8bde:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    8be0:	68fb      	ldr	r3, [r7, #12]
}
    8be2:	0018      	movs	r0, r3
    8be4:	46bd      	mov	sp, r7
    8be6:	b004      	add	sp, #16
    8be8:	bd80      	pop	{r7, pc}
    8bea:	46c0      	nop			; (mov r8, r8)
    8bec:	20000244 	.word	0x20000244
    8bf0:	20002e10 	.word	0x20002e10

00008bf4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    8bf4:	b580      	push	{r7, lr}
    8bf6:	b082      	sub	sp, #8
    8bf8:	af00      	add	r7, sp, #0
    8bfa:	6078      	str	r0, [r7, #4]
	return -1;
    8bfc:	2301      	movs	r3, #1
    8bfe:	425b      	negs	r3, r3
}
    8c00:	0018      	movs	r0, r3
    8c02:	46bd      	mov	sp, r7
    8c04:	b002      	add	sp, #8
    8c06:	bd80      	pop	{r7, pc}

00008c08 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    8c08:	b580      	push	{r7, lr}
    8c0a:	b082      	sub	sp, #8
    8c0c:	af00      	add	r7, sp, #0
    8c0e:	6078      	str	r0, [r7, #4]
    8c10:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    8c12:	683b      	ldr	r3, [r7, #0]
    8c14:	2280      	movs	r2, #128	; 0x80
    8c16:	0192      	lsls	r2, r2, #6
    8c18:	605a      	str	r2, [r3, #4]

	return 0;
    8c1a:	2300      	movs	r3, #0
}
    8c1c:	0018      	movs	r0, r3
    8c1e:	46bd      	mov	sp, r7
    8c20:	b002      	add	sp, #8
    8c22:	bd80      	pop	{r7, pc}

00008c24 <_isatty>:

extern int _isatty(int file)
{
    8c24:	b580      	push	{r7, lr}
    8c26:	b082      	sub	sp, #8
    8c28:	af00      	add	r7, sp, #0
    8c2a:	6078      	str	r0, [r7, #4]
	return 1;
    8c2c:	2301      	movs	r3, #1
}
    8c2e:	0018      	movs	r0, r3
    8c30:	46bd      	mov	sp, r7
    8c32:	b002      	add	sp, #8
    8c34:	bd80      	pop	{r7, pc}

00008c36 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    8c36:	b580      	push	{r7, lr}
    8c38:	b084      	sub	sp, #16
    8c3a:	af00      	add	r7, sp, #0
    8c3c:	60f8      	str	r0, [r7, #12]
    8c3e:	60b9      	str	r1, [r7, #8]
    8c40:	607a      	str	r2, [r7, #4]
	return 0;
    8c42:	2300      	movs	r3, #0
}
    8c44:	0018      	movs	r0, r3
    8c46:	46bd      	mov	sp, r7
    8c48:	b004      	add	sp, #16
    8c4a:	bd80      	pop	{r7, pc}

00008c4c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    8c4c:	b580      	push	{r7, lr}
    8c4e:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    8c50:	46c0      	nop			; (mov r8, r8)
    8c52:	46bd      	mov	sp, r7
    8c54:	bd80      	pop	{r7, pc}
	...

00008c58 <system_pinmux_get_group_from_gpio_pin>:
{
    8c58:	b580      	push	{r7, lr}
    8c5a:	b084      	sub	sp, #16
    8c5c:	af00      	add	r7, sp, #0
    8c5e:	0002      	movs	r2, r0
    8c60:	1dfb      	adds	r3, r7, #7
    8c62:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8c64:	230f      	movs	r3, #15
    8c66:	18fb      	adds	r3, r7, r3
    8c68:	1dfa      	adds	r2, r7, #7
    8c6a:	7812      	ldrb	r2, [r2, #0]
    8c6c:	09d2      	lsrs	r2, r2, #7
    8c6e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8c70:	230e      	movs	r3, #14
    8c72:	18fb      	adds	r3, r7, r3
    8c74:	1dfa      	adds	r2, r7, #7
    8c76:	7812      	ldrb	r2, [r2, #0]
    8c78:	0952      	lsrs	r2, r2, #5
    8c7a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8c7c:	4b0d      	ldr	r3, [pc, #52]	; (8cb4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    8c7e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    8c80:	230f      	movs	r3, #15
    8c82:	18fb      	adds	r3, r7, r3
    8c84:	781b      	ldrb	r3, [r3, #0]
    8c86:	2b00      	cmp	r3, #0
    8c88:	d10f      	bne.n	8caa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    8c8a:	230f      	movs	r3, #15
    8c8c:	18fb      	adds	r3, r7, r3
    8c8e:	781b      	ldrb	r3, [r3, #0]
    8c90:	009b      	lsls	r3, r3, #2
    8c92:	2210      	movs	r2, #16
    8c94:	4694      	mov	ip, r2
    8c96:	44bc      	add	ip, r7
    8c98:	4463      	add	r3, ip
    8c9a:	3b08      	subs	r3, #8
    8c9c:	681a      	ldr	r2, [r3, #0]
    8c9e:	230e      	movs	r3, #14
    8ca0:	18fb      	adds	r3, r7, r3
    8ca2:	781b      	ldrb	r3, [r3, #0]
    8ca4:	01db      	lsls	r3, r3, #7
    8ca6:	18d3      	adds	r3, r2, r3
    8ca8:	e000      	b.n	8cac <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    8caa:	2300      	movs	r3, #0
}
    8cac:	0018      	movs	r0, r3
    8cae:	46bd      	mov	sp, r7
    8cb0:	b004      	add	sp, #16
    8cb2:	bd80      	pop	{r7, pc}
    8cb4:	41004400 	.word	0x41004400

00008cb8 <port_get_group_from_gpio_pin>:
{
    8cb8:	b580      	push	{r7, lr}
    8cba:	b082      	sub	sp, #8
    8cbc:	af00      	add	r7, sp, #0
    8cbe:	0002      	movs	r2, r0
    8cc0:	1dfb      	adds	r3, r7, #7
    8cc2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    8cc4:	1dfb      	adds	r3, r7, #7
    8cc6:	781b      	ldrb	r3, [r3, #0]
    8cc8:	0018      	movs	r0, r3
    8cca:	4b03      	ldr	r3, [pc, #12]	; (8cd8 <port_get_group_from_gpio_pin+0x20>)
    8ccc:	4798      	blx	r3
    8cce:	0003      	movs	r3, r0
}
    8cd0:	0018      	movs	r0, r3
    8cd2:	46bd      	mov	sp, r7
    8cd4:	b002      	add	sp, #8
    8cd6:	bd80      	pop	{r7, pc}
    8cd8:	00008c59 	.word	0x00008c59

00008cdc <port_pin_set_output_level>:
{
    8cdc:	b580      	push	{r7, lr}
    8cde:	b084      	sub	sp, #16
    8ce0:	af00      	add	r7, sp, #0
    8ce2:	0002      	movs	r2, r0
    8ce4:	1dfb      	adds	r3, r7, #7
    8ce6:	701a      	strb	r2, [r3, #0]
    8ce8:	1dbb      	adds	r3, r7, #6
    8cea:	1c0a      	adds	r2, r1, #0
    8cec:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    8cee:	1dfb      	adds	r3, r7, #7
    8cf0:	781b      	ldrb	r3, [r3, #0]
    8cf2:	0018      	movs	r0, r3
    8cf4:	4b0d      	ldr	r3, [pc, #52]	; (8d2c <port_pin_set_output_level+0x50>)
    8cf6:	4798      	blx	r3
    8cf8:	0003      	movs	r3, r0
    8cfa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8cfc:	1dfb      	adds	r3, r7, #7
    8cfe:	781b      	ldrb	r3, [r3, #0]
    8d00:	221f      	movs	r2, #31
    8d02:	4013      	ands	r3, r2
    8d04:	2201      	movs	r2, #1
    8d06:	409a      	lsls	r2, r3
    8d08:	0013      	movs	r3, r2
    8d0a:	60bb      	str	r3, [r7, #8]
	if (level) {
    8d0c:	1dbb      	adds	r3, r7, #6
    8d0e:	781b      	ldrb	r3, [r3, #0]
    8d10:	2b00      	cmp	r3, #0
    8d12:	d003      	beq.n	8d1c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    8d14:	68fb      	ldr	r3, [r7, #12]
    8d16:	68ba      	ldr	r2, [r7, #8]
    8d18:	619a      	str	r2, [r3, #24]
}
    8d1a:	e002      	b.n	8d22 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    8d1c:	68fb      	ldr	r3, [r7, #12]
    8d1e:	68ba      	ldr	r2, [r7, #8]
    8d20:	615a      	str	r2, [r3, #20]
}
    8d22:	46c0      	nop			; (mov r8, r8)
    8d24:	46bd      	mov	sp, r7
    8d26:	b004      	add	sp, #16
    8d28:	bd80      	pop	{r7, pc}
    8d2a:	46c0      	nop			; (mov r8, r8)
    8d2c:	00008cb9 	.word	0x00008cb9

00008d30 <system_interrupt_enter_critical_section>:
{
    8d30:	b580      	push	{r7, lr}
    8d32:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    8d34:	4b02      	ldr	r3, [pc, #8]	; (8d40 <system_interrupt_enter_critical_section+0x10>)
    8d36:	4798      	blx	r3
}
    8d38:	46c0      	nop			; (mov r8, r8)
    8d3a:	46bd      	mov	sp, r7
    8d3c:	bd80      	pop	{r7, pc}
    8d3e:	46c0      	nop			; (mov r8, r8)
    8d40:	00008a25 	.word	0x00008a25

00008d44 <system_interrupt_leave_critical_section>:
{
    8d44:	b580      	push	{r7, lr}
    8d46:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    8d48:	4b02      	ldr	r3, [pc, #8]	; (8d54 <system_interrupt_leave_critical_section+0x10>)
    8d4a:	4798      	blx	r3
}
    8d4c:	46c0      	nop			; (mov r8, r8)
    8d4e:	46bd      	mov	sp, r7
    8d50:	bd80      	pop	{r7, pc}
    8d52:	46c0      	nop			; (mov r8, r8)
    8d54:	00008a79 	.word	0x00008a79

00008d58 <spi_lock>:
{
    8d58:	b580      	push	{r7, lr}
    8d5a:	b084      	sub	sp, #16
    8d5c:	af00      	add	r7, sp, #0
    8d5e:	6078      	str	r0, [r7, #4]
	system_interrupt_enter_critical_section();
    8d60:	4b0d      	ldr	r3, [pc, #52]	; (8d98 <spi_lock+0x40>)
    8d62:	4798      	blx	r3
	if (module->locked) {
    8d64:	687b      	ldr	r3, [r7, #4]
    8d66:	791b      	ldrb	r3, [r3, #4]
    8d68:	b2db      	uxtb	r3, r3
    8d6a:	2b00      	cmp	r3, #0
    8d6c:	d004      	beq.n	8d78 <spi_lock+0x20>
		status = STATUS_BUSY;
    8d6e:	230f      	movs	r3, #15
    8d70:	18fb      	adds	r3, r7, r3
    8d72:	2205      	movs	r2, #5
    8d74:	701a      	strb	r2, [r3, #0]
    8d76:	e006      	b.n	8d86 <spi_lock+0x2e>
		module->locked = true;
    8d78:	687b      	ldr	r3, [r7, #4]
    8d7a:	2201      	movs	r2, #1
    8d7c:	711a      	strb	r2, [r3, #4]
		status = STATUS_OK;
    8d7e:	230f      	movs	r3, #15
    8d80:	18fb      	adds	r3, r7, r3
    8d82:	2200      	movs	r2, #0
    8d84:	701a      	strb	r2, [r3, #0]
	system_interrupt_leave_critical_section();
    8d86:	4b05      	ldr	r3, [pc, #20]	; (8d9c <spi_lock+0x44>)
    8d88:	4798      	blx	r3
	return status;
    8d8a:	230f      	movs	r3, #15
    8d8c:	18fb      	adds	r3, r7, r3
    8d8e:	781b      	ldrb	r3, [r3, #0]
}
    8d90:	0018      	movs	r0, r3
    8d92:	46bd      	mov	sp, r7
    8d94:	b004      	add	sp, #16
    8d96:	bd80      	pop	{r7, pc}
    8d98:	00008d31 	.word	0x00008d31
    8d9c:	00008d45 	.word	0x00008d45

00008da0 <spi_unlock>:
{
    8da0:	b580      	push	{r7, lr}
    8da2:	b082      	sub	sp, #8
    8da4:	af00      	add	r7, sp, #0
    8da6:	6078      	str	r0, [r7, #4]
	module->locked = false;
    8da8:	687b      	ldr	r3, [r7, #4]
    8daa:	2200      	movs	r2, #0
    8dac:	711a      	strb	r2, [r3, #4]
}
    8dae:	46c0      	nop			; (mov r8, r8)
    8db0:	46bd      	mov	sp, r7
    8db2:	b002      	add	sp, #8
    8db4:	bd80      	pop	{r7, pc}

00008db6 <spi_is_ready_to_write>:
{
    8db6:	b580      	push	{r7, lr}
    8db8:	b084      	sub	sp, #16
    8dba:	af00      	add	r7, sp, #0
    8dbc:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    8dbe:	687b      	ldr	r3, [r7, #4]
    8dc0:	681b      	ldr	r3, [r3, #0]
    8dc2:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8dc4:	68fb      	ldr	r3, [r7, #12]
    8dc6:	7e1b      	ldrb	r3, [r3, #24]
    8dc8:	b2db      	uxtb	r3, r3
    8dca:	001a      	movs	r2, r3
    8dcc:	2301      	movs	r3, #1
    8dce:	4013      	ands	r3, r2
    8dd0:	1e5a      	subs	r2, r3, #1
    8dd2:	4193      	sbcs	r3, r2
    8dd4:	b2db      	uxtb	r3, r3
}
    8dd6:	0018      	movs	r0, r3
    8dd8:	46bd      	mov	sp, r7
    8dda:	b004      	add	sp, #16
    8ddc:	bd80      	pop	{r7, pc}

00008dde <spi_is_ready_to_read>:
{
    8dde:	b580      	push	{r7, lr}
    8de0:	b084      	sub	sp, #16
    8de2:	af00      	add	r7, sp, #0
    8de4:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    8de6:	687b      	ldr	r3, [r7, #4]
    8de8:	681b      	ldr	r3, [r3, #0]
    8dea:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8dec:	68fb      	ldr	r3, [r7, #12]
    8dee:	7e1b      	ldrb	r3, [r3, #24]
    8df0:	b2db      	uxtb	r3, r3
    8df2:	001a      	movs	r2, r3
    8df4:	2304      	movs	r3, #4
    8df6:	4013      	ands	r3, r2
    8df8:	1e5a      	subs	r2, r3, #1
    8dfa:	4193      	sbcs	r3, r2
    8dfc:	b2db      	uxtb	r3, r3
}
    8dfe:	0018      	movs	r0, r3
    8e00:	46bd      	mov	sp, r7
    8e02:	b004      	add	sp, #16
    8e04:	bd80      	pop	{r7, pc}
	...

00008e08 <spi_write>:
{
    8e08:	b580      	push	{r7, lr}
    8e0a:	b084      	sub	sp, #16
    8e0c:	af00      	add	r7, sp, #0
    8e0e:	6078      	str	r0, [r7, #4]
    8e10:	000a      	movs	r2, r1
    8e12:	1cbb      	adds	r3, r7, #2
    8e14:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    8e16:	687b      	ldr	r3, [r7, #4]
    8e18:	681b      	ldr	r3, [r3, #0]
    8e1a:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
    8e1c:	687b      	ldr	r3, [r7, #4]
    8e1e:	0018      	movs	r0, r3
    8e20:	4b0a      	ldr	r3, [pc, #40]	; (8e4c <spi_write+0x44>)
    8e22:	4798      	blx	r3
    8e24:	0003      	movs	r3, r0
    8e26:	001a      	movs	r2, r3
    8e28:	2301      	movs	r3, #1
    8e2a:	4053      	eors	r3, r2
    8e2c:	b2db      	uxtb	r3, r3
    8e2e:	2b00      	cmp	r3, #0
    8e30:	d001      	beq.n	8e36 <spi_write+0x2e>
		return STATUS_BUSY;
    8e32:	2305      	movs	r3, #5
    8e34:	e006      	b.n	8e44 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    8e36:	1cbb      	adds	r3, r7, #2
    8e38:	881b      	ldrh	r3, [r3, #0]
    8e3a:	05db      	lsls	r3, r3, #23
    8e3c:	0dda      	lsrs	r2, r3, #23
    8e3e:	68fb      	ldr	r3, [r7, #12]
    8e40:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
    8e42:	2300      	movs	r3, #0
}
    8e44:	0018      	movs	r0, r3
    8e46:	46bd      	mov	sp, r7
    8e48:	b004      	add	sp, #16
    8e4a:	bd80      	pop	{r7, pc}
    8e4c:	00008db7 	.word	0x00008db7

00008e50 <spi_read>:
{
    8e50:	b580      	push	{r7, lr}
    8e52:	b084      	sub	sp, #16
    8e54:	af00      	add	r7, sp, #0
    8e56:	6078      	str	r0, [r7, #4]
    8e58:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    8e5a:	687b      	ldr	r3, [r7, #4]
    8e5c:	681b      	ldr	r3, [r3, #0]
    8e5e:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
    8e60:	687b      	ldr	r3, [r7, #4]
    8e62:	0018      	movs	r0, r3
    8e64:	4b1b      	ldr	r3, [pc, #108]	; (8ed4 <spi_read+0x84>)
    8e66:	4798      	blx	r3
    8e68:	0003      	movs	r3, r0
    8e6a:	001a      	movs	r2, r3
    8e6c:	2301      	movs	r3, #1
    8e6e:	4053      	eors	r3, r2
    8e70:	b2db      	uxtb	r3, r3
    8e72:	2b00      	cmp	r3, #0
    8e74:	d001      	beq.n	8e7a <spi_read+0x2a>
		return STATUS_ERR_IO;
    8e76:	2310      	movs	r3, #16
    8e78:	e027      	b.n	8eca <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
    8e7a:	230f      	movs	r3, #15
    8e7c:	18fb      	adds	r3, r7, r3
    8e7e:	2200      	movs	r2, #0
    8e80:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8e82:	68bb      	ldr	r3, [r7, #8]
    8e84:	8b5b      	ldrh	r3, [r3, #26]
    8e86:	b29b      	uxth	r3, r3
    8e88:	001a      	movs	r2, r3
    8e8a:	2304      	movs	r3, #4
    8e8c:	4013      	ands	r3, r2
    8e8e:	d006      	beq.n	8e9e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    8e90:	230f      	movs	r3, #15
    8e92:	18fb      	adds	r3, r7, r3
    8e94:	221e      	movs	r2, #30
    8e96:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    8e98:	68bb      	ldr	r3, [r7, #8]
    8e9a:	2204      	movs	r2, #4
    8e9c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8e9e:	687b      	ldr	r3, [r7, #4]
    8ea0:	799b      	ldrb	r3, [r3, #6]
    8ea2:	2b01      	cmp	r3, #1
    8ea4:	d108      	bne.n	8eb8 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    8ea6:	68bb      	ldr	r3, [r7, #8]
    8ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8eaa:	b29b      	uxth	r3, r3
    8eac:	05db      	lsls	r3, r3, #23
    8eae:	0ddb      	lsrs	r3, r3, #23
    8eb0:	b29a      	uxth	r2, r3
    8eb2:	683b      	ldr	r3, [r7, #0]
    8eb4:	801a      	strh	r2, [r3, #0]
    8eb6:	e005      	b.n	8ec4 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    8eb8:	68bb      	ldr	r3, [r7, #8]
    8eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8ebc:	b2db      	uxtb	r3, r3
    8ebe:	b29a      	uxth	r2, r3
    8ec0:	683b      	ldr	r3, [r7, #0]
    8ec2:	801a      	strh	r2, [r3, #0]
	return retval;
    8ec4:	230f      	movs	r3, #15
    8ec6:	18fb      	adds	r3, r7, r3
    8ec8:	781b      	ldrb	r3, [r3, #0]
}
    8eca:	0018      	movs	r0, r3
    8ecc:	46bd      	mov	sp, r7
    8ece:	b004      	add	sp, #16
    8ed0:	bd80      	pop	{r7, pc}
    8ed2:	46c0      	nop			; (mov r8, r8)
    8ed4:	00008ddf 	.word	0x00008ddf

00008ed8 <_at25dfx_get_device_id>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash device ID.
 */
static inline uint32_t _at25dfx_get_device_id(enum at25dfx_type type)
{
    8ed8:	b580      	push	{r7, lr}
    8eda:	b082      	sub	sp, #8
    8edc:	af00      	add	r7, sp, #0
    8ede:	0002      	movs	r2, r0
    8ee0:	1dfb      	adds	r3, r7, #7
    8ee2:	701a      	strb	r2, [r3, #0]
	switch (type) {
    8ee4:	1dfb      	adds	r3, r7, #7
    8ee6:	781b      	ldrb	r3, [r3, #0]
    8ee8:	2b09      	cmp	r3, #9
    8eea:	d818      	bhi.n	8f1e <_at25dfx_get_device_id+0x46>
    8eec:	009a      	lsls	r2, r3, #2
    8eee:	4b0e      	ldr	r3, [pc, #56]	; (8f28 <_at25dfx_get_device_id+0x50>)
    8ef0:	18d3      	adds	r3, r2, r3
    8ef2:	681b      	ldr	r3, [r3, #0]
    8ef4:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 0x00651f;
    8ef6:	4b0d      	ldr	r3, [pc, #52]	; (8f2c <_at25dfx_get_device_id+0x54>)
    8ef8:	e012      	b.n	8f20 <_at25dfx_get_device_id+0x48>

	case AT25DFX_021:
		return 0x00431f;
    8efa:	4b0d      	ldr	r3, [pc, #52]	; (8f30 <_at25dfx_get_device_id+0x58>)
    8efc:	e010      	b.n	8f20 <_at25dfx_get_device_id+0x48>

	case AT25DFX_041A:
		return 0x01441f;
    8efe:	4b0d      	ldr	r3, [pc, #52]	; (8f34 <_at25dfx_get_device_id+0x5c>)
    8f00:	e00e      	b.n	8f20 <_at25dfx_get_device_id+0x48>

	case AT25DFX_081:
		return 0x02451f;
    8f02:	4b0d      	ldr	r3, [pc, #52]	; (8f38 <_at25dfx_get_device_id+0x60>)
    8f04:	e00c      	b.n	8f20 <_at25dfx_get_device_id+0x48>

	case AT25DFX_081A:
		return 0x01451f;
    8f06:	4b0d      	ldr	r3, [pc, #52]	; (8f3c <_at25dfx_get_device_id+0x64>)
    8f08:	e00a      	b.n	8f20 <_at25dfx_get_device_id+0x48>

	case AT25DFX_161:
		return 0x02461f;
    8f0a:	4b0d      	ldr	r3, [pc, #52]	; (8f40 <_at25dfx_get_device_id+0x68>)
    8f0c:	e008      	b.n	8f20 <_at25dfx_get_device_id+0x48>

	case AT25DFX_L161:
		return 0x03461f;
    8f0e:	4b0d      	ldr	r3, [pc, #52]	; (8f44 <_at25dfx_get_device_id+0x6c>)
    8f10:	e006      	b.n	8f20 <_at25dfx_get_device_id+0x48>

	case AT25DFX_Q161:
		return 0x00861f;
    8f12:	4b0d      	ldr	r3, [pc, #52]	; (8f48 <_at25dfx_get_device_id+0x70>)
    8f14:	e004      	b.n	8f20 <_at25dfx_get_device_id+0x48>

	case AT25DFX_321A:
		return 0x01471f;
    8f16:	4b0d      	ldr	r3, [pc, #52]	; (8f4c <_at25dfx_get_device_id+0x74>)
    8f18:	e002      	b.n	8f20 <_at25dfx_get_device_id+0x48>

	case AT25DFX_641:
		return 0x00481f;
    8f1a:	4b0d      	ldr	r3, [pc, #52]	; (8f50 <_at25dfx_get_device_id+0x78>)
    8f1c:	e000      	b.n	8f20 <_at25dfx_get_device_id+0x48>

	default:
		Assert(false);
		return 0;
    8f1e:	2300      	movs	r3, #0
	}
}
    8f20:	0018      	movs	r0, r3
    8f22:	46bd      	mov	sp, r7
    8f24:	b002      	add	sp, #8
    8f26:	bd80      	pop	{r7, pc}
    8f28:	000107d0 	.word	0x000107d0
    8f2c:	0000651f 	.word	0x0000651f
    8f30:	0000431f 	.word	0x0000431f
    8f34:	0001441f 	.word	0x0001441f
    8f38:	0002451f 	.word	0x0002451f
    8f3c:	0001451f 	.word	0x0001451f
    8f40:	0002461f 	.word	0x0002461f
    8f44:	0003461f 	.word	0x0003461f
    8f48:	0000861f 	.word	0x0000861f
    8f4c:	0001471f 	.word	0x0001471f
    8f50:	0000481f 	.word	0x0000481f

00008f54 <_at25dfx_get_device_size>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash storage size.
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
    8f54:	b580      	push	{r7, lr}
    8f56:	b082      	sub	sp, #8
    8f58:	af00      	add	r7, sp, #0
    8f5a:	0002      	movs	r2, r0
    8f5c:	1dfb      	adds	r3, r7, #7
    8f5e:	701a      	strb	r2, [r3, #0]
	switch (type) {
    8f60:	1dfb      	adds	r3, r7, #7
    8f62:	781b      	ldrb	r3, [r3, #0]
    8f64:	2b09      	cmp	r3, #9
    8f66:	d819      	bhi.n	8f9c <_at25dfx_get_device_size+0x48>
    8f68:	009a      	lsls	r2, r3, #2
    8f6a:	4b0f      	ldr	r3, [pc, #60]	; (8fa8 <_at25dfx_get_device_size+0x54>)
    8f6c:	18d3      	adds	r3, r2, r3
    8f6e:	681b      	ldr	r3, [r3, #0]
    8f70:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 64 * 1024UL;
    8f72:	2380      	movs	r3, #128	; 0x80
    8f74:	025b      	lsls	r3, r3, #9
    8f76:	e012      	b.n	8f9e <_at25dfx_get_device_size+0x4a>

	case AT25DFX_021:
		return 256 * 1024UL;
    8f78:	2380      	movs	r3, #128	; 0x80
    8f7a:	02db      	lsls	r3, r3, #11
    8f7c:	e00f      	b.n	8f9e <_at25dfx_get_device_size+0x4a>

	case AT25DFX_041A:
		return 512 * 1024UL;
    8f7e:	2380      	movs	r3, #128	; 0x80
    8f80:	031b      	lsls	r3, r3, #12
    8f82:	e00c      	b.n	8f9e <_at25dfx_get_device_size+0x4a>

	case AT25DFX_081:
	case AT25DFX_081A:
		return 1024 * 1024UL;
    8f84:	2380      	movs	r3, #128	; 0x80
    8f86:	035b      	lsls	r3, r3, #13
    8f88:	e009      	b.n	8f9e <_at25dfx_get_device_size+0x4a>

	case AT25DFX_161:
	case AT25DFX_L161:
	case AT25DFX_Q161:
		return 2048 * 1024UL;
    8f8a:	2380      	movs	r3, #128	; 0x80
    8f8c:	039b      	lsls	r3, r3, #14
    8f8e:	e006      	b.n	8f9e <_at25dfx_get_device_size+0x4a>

	case AT25DFX_321A:
		return 4096 * 1024UL;
    8f90:	2380      	movs	r3, #128	; 0x80
    8f92:	03db      	lsls	r3, r3, #15
    8f94:	e003      	b.n	8f9e <_at25dfx_get_device_size+0x4a>

	case AT25DFX_641:
		return 8192 * 1024UL;
    8f96:	2380      	movs	r3, #128	; 0x80
    8f98:	041b      	lsls	r3, r3, #16
    8f9a:	e000      	b.n	8f9e <_at25dfx_get_device_size+0x4a>

	default:
		Assert(false);
		return 0;
    8f9c:	2300      	movs	r3, #0
	}
}
    8f9e:	0018      	movs	r0, r3
    8fa0:	46bd      	mov	sp, r7
    8fa2:	b002      	add	sp, #8
    8fa4:	bd80      	pop	{r7, pc}
    8fa6:	46c0      	nop			; (mov r8, r8)
    8fa8:	000107f8 	.word	0x000107f8

00008fac <_at25dfx_chip_select>:
 * This function selects the specified chip by driving its CS line low.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
    8fac:	b580      	push	{r7, lr}
    8fae:	b082      	sub	sp, #8
    8fb0:	af00      	add	r7, sp, #0
    8fb2:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, false);
    8fb4:	687b      	ldr	r3, [r7, #4]
    8fb6:	795b      	ldrb	r3, [r3, #5]
    8fb8:	2100      	movs	r1, #0
    8fba:	0018      	movs	r0, r3
    8fbc:	4b02      	ldr	r3, [pc, #8]	; (8fc8 <_at25dfx_chip_select+0x1c>)
    8fbe:	4798      	blx	r3
}
    8fc0:	46c0      	nop			; (mov r8, r8)
    8fc2:	46bd      	mov	sp, r7
    8fc4:	b002      	add	sp, #8
    8fc6:	bd80      	pop	{r7, pc}
    8fc8:	00008cdd 	.word	0x00008cdd

00008fcc <_at25dfx_chip_deselect>:
 * This function deselects the specified chip by driving its CS line high.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
    8fcc:	b580      	push	{r7, lr}
    8fce:	b082      	sub	sp, #8
    8fd0:	af00      	add	r7, sp, #0
    8fd2:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, true);
    8fd4:	687b      	ldr	r3, [r7, #4]
    8fd6:	795b      	ldrb	r3, [r3, #5]
    8fd8:	2101      	movs	r1, #1
    8fda:	0018      	movs	r0, r3
    8fdc:	4b02      	ldr	r3, [pc, #8]	; (8fe8 <_at25dfx_chip_deselect+0x1c>)
    8fde:	4798      	blx	r3
}
    8fe0:	46c0      	nop			; (mov r8, r8)
    8fe2:	46bd      	mov	sp, r7
    8fe4:	b002      	add	sp, #8
    8fe6:	bd80      	pop	{r7, pc}
    8fe8:	00008cdd 	.word	0x00008cdd

00008fec <_at25dfx_chip_issue_read_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_read_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
    8fec:	b084      	sub	sp, #16
    8fee:	b5b0      	push	{r4, r5, r7, lr}
    8ff0:	b084      	sub	sp, #16
    8ff2:	af00      	add	r7, sp, #0
    8ff4:	6078      	str	r0, [r7, #4]
    8ff6:	2004      	movs	r0, #4
    8ff8:	2420      	movs	r4, #32
    8ffa:	46a4      	mov	ip, r4
    8ffc:	44bc      	add	ip, r7
    8ffe:	4460      	add	r0, ip
    9000:	6001      	str	r1, [r0, #0]
    9002:	6042      	str	r2, [r0, #4]
    9004:	6083      	str	r3, [r0, #8]
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
    9006:	2304      	movs	r3, #4
    9008:	2220      	movs	r2, #32
    900a:	4694      	mov	ip, r2
    900c:	44bc      	add	ip, r7
    900e:	4463      	add	r3, ip
    9010:	781a      	ldrb	r2, [r3, #0]
    9012:	2308      	movs	r3, #8
    9014:	18fb      	adds	r3, r7, r3
    9016:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
    9018:	2304      	movs	r3, #4
    901a:	2220      	movs	r2, #32
    901c:	4694      	mov	ip, r2
    901e:	44bc      	add	ip, r7
    9020:	4463      	add	r3, ip
    9022:	785b      	ldrb	r3, [r3, #1]
    9024:	2b01      	cmp	r3, #1
    9026:	d91f      	bls.n	9068 <_at25dfx_chip_issue_read_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
    9028:	2304      	movs	r3, #4
    902a:	2220      	movs	r2, #32
    902c:	4694      	mov	ip, r2
    902e:	44bc      	add	ip, r7
    9030:	4463      	add	r3, ip
    9032:	685b      	ldr	r3, [r3, #4]
    9034:	b2da      	uxtb	r2, r3
    9036:	2308      	movs	r3, #8
    9038:	18fb      	adds	r3, r7, r3
    903a:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    903c:	2304      	movs	r3, #4
    903e:	2220      	movs	r2, #32
    9040:	4694      	mov	ip, r2
    9042:	44bc      	add	ip, r7
    9044:	4463      	add	r3, ip
    9046:	685b      	ldr	r3, [r3, #4]
    9048:	0a1b      	lsrs	r3, r3, #8
    904a:	b2da      	uxtb	r2, r3
    904c:	2308      	movs	r3, #8
    904e:	18fb      	adds	r3, r7, r3
    9050:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    9052:	2304      	movs	r3, #4
    9054:	2220      	movs	r2, #32
    9056:	4694      	mov	ip, r2
    9058:	44bc      	add	ip, r7
    905a:	4463      	add	r3, ip
    905c:	685b      	ldr	r3, [r3, #4]
    905e:	0c1b      	lsrs	r3, r3, #16
    9060:	b2da      	uxtb	r2, r3
    9062:	2308      	movs	r3, #8
    9064:	18fb      	adds	r3, r7, r3
    9066:	705a      	strb	r2, [r3, #1]
	}
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);
    9068:	687b      	ldr	r3, [r7, #4]
    906a:	0018      	movs	r0, r3
    906c:	4b1d      	ldr	r3, [pc, #116]	; (90e4 <_at25dfx_chip_issue_read_command_wait+0xf8>)
    906e:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    9070:	687b      	ldr	r3, [r7, #4]
    9072:	6818      	ldr	r0, [r3, #0]
    9074:	2304      	movs	r3, #4
    9076:	2220      	movs	r2, #32
    9078:	4694      	mov	ip, r2
    907a:	44bc      	add	ip, r7
    907c:	4463      	add	r3, ip
    907e:	785b      	ldrb	r3, [r3, #1]
    9080:	b29a      	uxth	r2, r3
    9082:	230f      	movs	r3, #15
    9084:	18fc      	adds	r4, r7, r3
    9086:	2308      	movs	r3, #8
    9088:	18fb      	adds	r3, r7, r3
    908a:	0019      	movs	r1, r3
    908c:	4b16      	ldr	r3, [pc, #88]	; (90e8 <_at25dfx_chip_issue_read_command_wait+0xfc>)
    908e:	4798      	blx	r3
    9090:	0003      	movs	r3, r0
    9092:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
    9094:	2304      	movs	r3, #4
    9096:	2220      	movs	r2, #32
    9098:	4694      	mov	ip, r2
    909a:	44bc      	add	ip, r7
    909c:	4463      	add	r3, ip
    909e:	899b      	ldrh	r3, [r3, #12]
    90a0:	2b00      	cmp	r3, #0
    90a2:	d014      	beq.n	90ce <_at25dfx_chip_issue_read_command_wait+0xe2>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
    90a4:	687b      	ldr	r3, [r7, #4]
    90a6:	6818      	ldr	r0, [r3, #0]
    90a8:	2304      	movs	r3, #4
    90aa:	2220      	movs	r2, #32
    90ac:	4694      	mov	ip, r2
    90ae:	44bc      	add	ip, r7
    90b0:	4463      	add	r3, ip
    90b2:	6899      	ldr	r1, [r3, #8]
    90b4:	2304      	movs	r3, #4
    90b6:	2220      	movs	r2, #32
    90b8:	4694      	mov	ip, r2
    90ba:	44bc      	add	ip, r7
    90bc:	4463      	add	r3, ip
    90be:	899a      	ldrh	r2, [r3, #12]
    90c0:	230f      	movs	r3, #15
    90c2:	18fc      	adds	r4, r7, r3
    90c4:	2300      	movs	r3, #0
    90c6:	4d09      	ldr	r5, [pc, #36]	; (90ec <_at25dfx_chip_issue_read_command_wait+0x100>)
    90c8:	47a8      	blx	r5
    90ca:	0003      	movs	r3, r0
    90cc:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
    90ce:	687b      	ldr	r3, [r7, #4]
    90d0:	0018      	movs	r0, r3
    90d2:	4b07      	ldr	r3, [pc, #28]	; (90f0 <_at25dfx_chip_issue_read_command_wait+0x104>)
    90d4:	4798      	blx	r3
}
    90d6:	46c0      	nop			; (mov r8, r8)
    90d8:	46bd      	mov	sp, r7
    90da:	b004      	add	sp, #16
    90dc:	bcb0      	pop	{r4, r5, r7}
    90de:	bc08      	pop	{r3}
    90e0:	b004      	add	sp, #16
    90e2:	4718      	bx	r3
    90e4:	00008fad 	.word	0x00008fad
    90e8:	0000ae49 	.word	0x0000ae49
    90ec:	0000ac25 	.word	0x0000ac25
    90f0:	00008fcd 	.word	0x00008fcd

000090f4 <_at25dfx_chip_issue_write_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_write_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
    90f4:	b084      	sub	sp, #16
    90f6:	b590      	push	{r4, r7, lr}
    90f8:	b085      	sub	sp, #20
    90fa:	af00      	add	r7, sp, #0
    90fc:	6078      	str	r0, [r7, #4]
    90fe:	2004      	movs	r0, #4
    9100:	2420      	movs	r4, #32
    9102:	46a4      	mov	ip, r4
    9104:	44bc      	add	ip, r7
    9106:	4460      	add	r0, ip
    9108:	6001      	str	r1, [r0, #0]
    910a:	6042      	str	r2, [r0, #4]
    910c:	6083      	str	r3, [r0, #8]

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    910e:	2304      	movs	r3, #4
    9110:	2220      	movs	r2, #32
    9112:	4694      	mov	ip, r2
    9114:	44bc      	add	ip, r7
    9116:	4463      	add	r3, ip
    9118:	781a      	ldrb	r2, [r3, #0]
    911a:	2308      	movs	r3, #8
    911c:	18fb      	adds	r3, r7, r3
    911e:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
    9120:	2304      	movs	r3, #4
    9122:	2220      	movs	r2, #32
    9124:	4694      	mov	ip, r2
    9126:	44bc      	add	ip, r7
    9128:	4463      	add	r3, ip
    912a:	785b      	ldrb	r3, [r3, #1]
    912c:	2b01      	cmp	r3, #1
    912e:	d91f      	bls.n	9170 <_at25dfx_chip_issue_write_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
    9130:	2304      	movs	r3, #4
    9132:	2220      	movs	r2, #32
    9134:	4694      	mov	ip, r2
    9136:	44bc      	add	ip, r7
    9138:	4463      	add	r3, ip
    913a:	685b      	ldr	r3, [r3, #4]
    913c:	b2da      	uxtb	r2, r3
    913e:	2308      	movs	r3, #8
    9140:	18fb      	adds	r3, r7, r3
    9142:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    9144:	2304      	movs	r3, #4
    9146:	2220      	movs	r2, #32
    9148:	4694      	mov	ip, r2
    914a:	44bc      	add	ip, r7
    914c:	4463      	add	r3, ip
    914e:	685b      	ldr	r3, [r3, #4]
    9150:	0a1b      	lsrs	r3, r3, #8
    9152:	b2da      	uxtb	r2, r3
    9154:	2308      	movs	r3, #8
    9156:	18fb      	adds	r3, r7, r3
    9158:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    915a:	2304      	movs	r3, #4
    915c:	2220      	movs	r2, #32
    915e:	4694      	mov	ip, r2
    9160:	44bc      	add	ip, r7
    9162:	4463      	add	r3, ip
    9164:	685b      	ldr	r3, [r3, #4]
    9166:	0c1b      	lsrs	r3, r3, #16
    9168:	b2da      	uxtb	r2, r3
    916a:	2308      	movs	r3, #8
    916c:	18fb      	adds	r3, r7, r3
    916e:	705a      	strb	r2, [r3, #1]
	}

	_at25dfx_chip_select(chip);
    9170:	687b      	ldr	r3, [r7, #4]
    9172:	0018      	movs	r0, r3
    9174:	4b1d      	ldr	r3, [pc, #116]	; (91ec <_at25dfx_chip_issue_write_command_wait+0xf8>)
    9176:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    9178:	687b      	ldr	r3, [r7, #4]
    917a:	6818      	ldr	r0, [r3, #0]
    917c:	2304      	movs	r3, #4
    917e:	2220      	movs	r2, #32
    9180:	4694      	mov	ip, r2
    9182:	44bc      	add	ip, r7
    9184:	4463      	add	r3, ip
    9186:	785b      	ldrb	r3, [r3, #1]
    9188:	b29a      	uxth	r2, r3
    918a:	230f      	movs	r3, #15
    918c:	18fc      	adds	r4, r7, r3
    918e:	2308      	movs	r3, #8
    9190:	18fb      	adds	r3, r7, r3
    9192:	0019      	movs	r1, r3
    9194:	4b16      	ldr	r3, [pc, #88]	; (91f0 <_at25dfx_chip_issue_write_command_wait+0xfc>)
    9196:	4798      	blx	r3
    9198:	0003      	movs	r3, r0
    919a:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
    919c:	2304      	movs	r3, #4
    919e:	2220      	movs	r2, #32
    91a0:	4694      	mov	ip, r2
    91a2:	44bc      	add	ip, r7
    91a4:	4463      	add	r3, ip
    91a6:	899b      	ldrh	r3, [r3, #12]
    91a8:	2b00      	cmp	r3, #0
    91aa:	d014      	beq.n	91d6 <_at25dfx_chip_issue_write_command_wait+0xe2>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    91ac:	687b      	ldr	r3, [r7, #4]
    91ae:	6818      	ldr	r0, [r3, #0]
    91b0:	2304      	movs	r3, #4
    91b2:	2220      	movs	r2, #32
    91b4:	4694      	mov	ip, r2
    91b6:	44bc      	add	ip, r7
    91b8:	4463      	add	r3, ip
    91ba:	6899      	ldr	r1, [r3, #8]
    91bc:	2304      	movs	r3, #4
    91be:	2220      	movs	r2, #32
    91c0:	4694      	mov	ip, r2
    91c2:	44bc      	add	ip, r7
    91c4:	4463      	add	r3, ip
    91c6:	899b      	ldrh	r3, [r3, #12]
    91c8:	220f      	movs	r2, #15
    91ca:	18bc      	adds	r4, r7, r2
    91cc:	001a      	movs	r2, r3
    91ce:	4b08      	ldr	r3, [pc, #32]	; (91f0 <_at25dfx_chip_issue_write_command_wait+0xfc>)
    91d0:	4798      	blx	r3
    91d2:	0003      	movs	r3, r0
    91d4:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
    91d6:	687b      	ldr	r3, [r7, #4]
    91d8:	0018      	movs	r0, r3
    91da:	4b06      	ldr	r3, [pc, #24]	; (91f4 <_at25dfx_chip_issue_write_command_wait+0x100>)
    91dc:	4798      	blx	r3
}
    91de:	46c0      	nop			; (mov r8, r8)
    91e0:	46bd      	mov	sp, r7
    91e2:	b005      	add	sp, #20
    91e4:	bc90      	pop	{r4, r7}
    91e6:	bc08      	pop	{r3}
    91e8:	b004      	add	sp, #16
    91ea:	4718      	bx	r3
    91ec:	00008fad 	.word	0x00008fad
    91f0:	0000ae49 	.word	0x0000ae49
    91f4:	00008fcd 	.word	0x00008fcd

000091f8 <_at25dfx_chip_get_nonbusy_status>:
 * \retval STATUS_OK if operation succeeded.
 * \retval STATUS_ERR_IO if an error occurred.
 */
static inline enum status_code _at25dfx_chip_get_nonbusy_status(
		struct at25dfx_chip_module *chip)
{
    91f8:	b590      	push	{r4, r7, lr}
    91fa:	b085      	sub	sp, #20
    91fc:	af00      	add	r7, sp, #0
    91fe:	6078      	str	r0, [r7, #4]
	enum status_code status;
	uint16_t status_reg = 0;
    9200:	230c      	movs	r3, #12
    9202:	18fb      	adds	r3, r7, r3
    9204:	2200      	movs	r2, #0
    9206:	801a      	strh	r2, [r3, #0]

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
    9208:	46c0      	nop			; (mov r8, r8)
    920a:	687b      	ldr	r3, [r7, #4]
    920c:	681b      	ldr	r3, [r3, #0]
    920e:	0018      	movs	r0, r3
    9210:	4b3c      	ldr	r3, [pc, #240]	; (9304 <_at25dfx_chip_get_nonbusy_status+0x10c>)
    9212:	4798      	blx	r3
    9214:	0003      	movs	r3, r0
    9216:	001a      	movs	r2, r3
    9218:	2301      	movs	r3, #1
    921a:	4053      	eors	r3, r2
    921c:	b2db      	uxtb	r3, r3
    921e:	2b00      	cmp	r3, #0
    9220:	d1f3      	bne.n	920a <_at25dfx_chip_get_nonbusy_status+0x12>
	}

	_at25dfx_chip_select(chip);
    9222:	687b      	ldr	r3, [r7, #4]
    9224:	0018      	movs	r0, r3
    9226:	4b38      	ldr	r3, [pc, #224]	; (9308 <_at25dfx_chip_get_nonbusy_status+0x110>)
    9228:	4798      	blx	r3
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
    922a:	687b      	ldr	r3, [r7, #4]
    922c:	681b      	ldr	r3, [r3, #0]
    922e:	220f      	movs	r2, #15
    9230:	18bc      	adds	r4, r7, r2
    9232:	2105      	movs	r1, #5
    9234:	0018      	movs	r0, r3
    9236:	4b35      	ldr	r3, [pc, #212]	; (930c <_at25dfx_chip_get_nonbusy_status+0x114>)
    9238:	4798      	blx	r3
    923a:	0003      	movs	r3, r0
    923c:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
    923e:	46c0      	nop			; (mov r8, r8)
    9240:	687b      	ldr	r3, [r7, #4]
    9242:	681b      	ldr	r3, [r3, #0]
    9244:	0018      	movs	r0, r3
    9246:	4b32      	ldr	r3, [pc, #200]	; (9310 <_at25dfx_chip_get_nonbusy_status+0x118>)
    9248:	4798      	blx	r3
    924a:	0003      	movs	r3, r0
    924c:	001a      	movs	r2, r3
    924e:	2301      	movs	r3, #1
    9250:	4053      	eors	r3, r2
    9252:	b2db      	uxtb	r3, r3
    9254:	2b00      	cmp	r3, #0
    9256:	d1f3      	bne.n	9240 <_at25dfx_chip_get_nonbusy_status+0x48>
	}
	status = spi_read(chip->spi, &status_reg);
    9258:	687b      	ldr	r3, [r7, #4]
    925a:	681b      	ldr	r3, [r3, #0]
    925c:	220f      	movs	r2, #15
    925e:	18bc      	adds	r4, r7, r2
    9260:	220c      	movs	r2, #12
    9262:	18ba      	adds	r2, r7, r2
    9264:	0011      	movs	r1, r2
    9266:	0018      	movs	r0, r3
    9268:	4b2a      	ldr	r3, [pc, #168]	; (9314 <_at25dfx_chip_get_nonbusy_status+0x11c>)
    926a:	4798      	blx	r3
    926c:	0003      	movs	r3, r0
    926e:	7023      	strb	r3, [r4, #0]

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
    9270:	46c0      	nop			; (mov r8, r8)
    9272:	687b      	ldr	r3, [r7, #4]
    9274:	681b      	ldr	r3, [r3, #0]
    9276:	0018      	movs	r0, r3
    9278:	4b22      	ldr	r3, [pc, #136]	; (9304 <_at25dfx_chip_get_nonbusy_status+0x10c>)
    927a:	4798      	blx	r3
    927c:	0003      	movs	r3, r0
    927e:	001a      	movs	r2, r3
    9280:	2301      	movs	r3, #1
    9282:	4053      	eors	r3, r2
    9284:	b2db      	uxtb	r3, r3
    9286:	2b00      	cmp	r3, #0
    9288:	d1f3      	bne.n	9272 <_at25dfx_chip_get_nonbusy_status+0x7a>
		}
		status = spi_write(chip->spi, 0);
    928a:	687b      	ldr	r3, [r7, #4]
    928c:	681b      	ldr	r3, [r3, #0]
    928e:	220f      	movs	r2, #15
    9290:	18bc      	adds	r4, r7, r2
    9292:	2100      	movs	r1, #0
    9294:	0018      	movs	r0, r3
    9296:	4b1d      	ldr	r3, [pc, #116]	; (930c <_at25dfx_chip_get_nonbusy_status+0x114>)
    9298:	4798      	blx	r3
    929a:	0003      	movs	r3, r0
    929c:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
    929e:	46c0      	nop			; (mov r8, r8)
    92a0:	687b      	ldr	r3, [r7, #4]
    92a2:	681b      	ldr	r3, [r3, #0]
    92a4:	0018      	movs	r0, r3
    92a6:	4b1a      	ldr	r3, [pc, #104]	; (9310 <_at25dfx_chip_get_nonbusy_status+0x118>)
    92a8:	4798      	blx	r3
    92aa:	0003      	movs	r3, r0
    92ac:	001a      	movs	r2, r3
    92ae:	2301      	movs	r3, #1
    92b0:	4053      	eors	r3, r2
    92b2:	b2db      	uxtb	r3, r3
    92b4:	2b00      	cmp	r3, #0
    92b6:	d1f3      	bne.n	92a0 <_at25dfx_chip_get_nonbusy_status+0xa8>
		}
		status = spi_read(chip->spi, &status_reg);
    92b8:	687b      	ldr	r3, [r7, #4]
    92ba:	681b      	ldr	r3, [r3, #0]
    92bc:	220f      	movs	r2, #15
    92be:	18bc      	adds	r4, r7, r2
    92c0:	220c      	movs	r2, #12
    92c2:	18ba      	adds	r2, r7, r2
    92c4:	0011      	movs	r1, r2
    92c6:	0018      	movs	r0, r3
    92c8:	4b12      	ldr	r3, [pc, #72]	; (9314 <_at25dfx_chip_get_nonbusy_status+0x11c>)
    92ca:	4798      	blx	r3
    92cc:	0003      	movs	r3, r0
    92ce:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
    92d0:	230c      	movs	r3, #12
    92d2:	18fb      	adds	r3, r7, r3
    92d4:	881b      	ldrh	r3, [r3, #0]
    92d6:	001a      	movs	r2, r3
    92d8:	2301      	movs	r3, #1
    92da:	4013      	ands	r3, r2
    92dc:	d1c8      	bne.n	9270 <_at25dfx_chip_get_nonbusy_status+0x78>

	_at25dfx_chip_deselect(chip);
    92de:	687b      	ldr	r3, [r7, #4]
    92e0:	0018      	movs	r0, r3
    92e2:	4b0d      	ldr	r3, [pc, #52]	; (9318 <_at25dfx_chip_get_nonbusy_status+0x120>)
    92e4:	4798      	blx	r3

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
    92e6:	230c      	movs	r3, #12
    92e8:	18fb      	adds	r3, r7, r3
    92ea:	881b      	ldrh	r3, [r3, #0]
    92ec:	001a      	movs	r2, r3
    92ee:	2320      	movs	r3, #32
    92f0:	4013      	ands	r3, r2
    92f2:	d001      	beq.n	92f8 <_at25dfx_chip_get_nonbusy_status+0x100>
		return STATUS_ERR_IO;
    92f4:	2310      	movs	r3, #16
    92f6:	e000      	b.n	92fa <_at25dfx_chip_get_nonbusy_status+0x102>
	}
	return STATUS_OK;
    92f8:	2300      	movs	r3, #0
}
    92fa:	0018      	movs	r0, r3
    92fc:	46bd      	mov	sp, r7
    92fe:	b005      	add	sp, #20
    9300:	bd90      	pop	{r4, r7, pc}
    9302:	46c0      	nop			; (mov r8, r8)
    9304:	00008db7 	.word	0x00008db7
    9308:	00008fad 	.word	0x00008fad
    930c:	00008e09 	.word	0x00008e09
    9310:	00008ddf 	.word	0x00008ddf
    9314:	00008e51 	.word	0x00008e51
    9318:	00008fcd 	.word	0x00008fcd

0000931c <_at25dfx_chip_enable_write>:
 * or unprotecting sectors.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_enable_write(struct at25dfx_chip_module *chip)
{
    931c:	b590      	push	{r4, r7, lr}
    931e:	b089      	sub	sp, #36	; 0x24
    9320:	af02      	add	r7, sp, #8
    9322:	6078      	str	r0, [r7, #4]
	struct at25dfx_command cmd;

	cmd.opcode = AT25DFX_COMMAND_WRITE_ENABLE;
    9324:	2308      	movs	r3, #8
    9326:	18fb      	adds	r3, r7, r3
    9328:	2206      	movs	r2, #6
    932a:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    932c:	2308      	movs	r3, #8
    932e:	18fb      	adds	r3, r7, r3
    9330:	2201      	movs	r2, #1
    9332:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
    9334:	2308      	movs	r3, #8
    9336:	18fb      	adds	r3, r7, r3
    9338:	2200      	movs	r2, #0
    933a:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    933c:	2308      	movs	r3, #8
    933e:	18fb      	adds	r3, r7, r3
    9340:	2200      	movs	r2, #0
    9342:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
    9344:	2308      	movs	r3, #8
    9346:	18fb      	adds	r3, r7, r3
    9348:	2200      	movs	r2, #0
    934a:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    934c:	2308      	movs	r3, #8
    934e:	18fb      	adds	r3, r7, r3
    9350:	6878      	ldr	r0, [r7, #4]
    9352:	466a      	mov	r2, sp
    9354:	68d9      	ldr	r1, [r3, #12]
    9356:	6011      	str	r1, [r2, #0]
    9358:	6819      	ldr	r1, [r3, #0]
    935a:	685a      	ldr	r2, [r3, #4]
    935c:	689b      	ldr	r3, [r3, #8]
    935e:	4c03      	ldr	r4, [pc, #12]	; (936c <_at25dfx_chip_enable_write+0x50>)
    9360:	47a0      	blx	r4
}
    9362:	46c0      	nop			; (mov r8, r8)
    9364:	46bd      	mov	sp, r7
    9366:	b007      	add	sp, #28
    9368:	bd90      	pop	{r4, r7, pc}
    936a:	46c0      	nop			; (mov r8, r8)
    936c:	000090f5 	.word	0x000090f5

00009370 <at25dfx_chip_check_presence>:
 * \retval STATUS_OK if chip responded with ID matching its type.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_NOT_FOUND if chip did not respond, or with wrong ID.
 */
enum status_code at25dfx_chip_check_presence(struct at25dfx_chip_module *chip)
{
    9370:	b590      	push	{r4, r7, lr}
    9372:	b08b      	sub	sp, #44	; 0x2c
    9374:	af02      	add	r7, sp, #8
    9376:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
    9378:	2300      	movs	r3, #0
    937a:	60bb      	str	r3, [r7, #8]

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
    937c:	687b      	ldr	r3, [r7, #4]
    937e:	681b      	ldr	r3, [r3, #0]
    9380:	221f      	movs	r2, #31
    9382:	18bc      	adds	r4, r7, r2
    9384:	0018      	movs	r0, r3
    9386:	4b21      	ldr	r3, [pc, #132]	; (940c <at25dfx_chip_check_presence+0x9c>)
    9388:	4798      	blx	r3
    938a:	0003      	movs	r3, r0
    938c:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    938e:	231f      	movs	r3, #31
    9390:	18fb      	adds	r3, r7, r3
    9392:	781b      	ldrb	r3, [r3, #0]
    9394:	2b05      	cmp	r3, #5
    9396:	d103      	bne.n	93a0 <at25dfx_chip_check_presence+0x30>
		return status;
    9398:	231f      	movs	r3, #31
    939a:	18fb      	adds	r3, r7, r3
    939c:	781b      	ldrb	r3, [r3, #0]
    939e:	e030      	b.n	9402 <at25dfx_chip_check_presence+0x92>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_DEVICE_ID;
    93a0:	230c      	movs	r3, #12
    93a2:	18fb      	adds	r3, r7, r3
    93a4:	229f      	movs	r2, #159	; 0x9f
    93a6:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    93a8:	230c      	movs	r3, #12
    93aa:	18fb      	adds	r3, r7, r3
    93ac:	2201      	movs	r2, #1
    93ae:	705a      	strb	r2, [r3, #1]
	cmd.data.rx = (uint8_t *)&id;
    93b0:	230c      	movs	r3, #12
    93b2:	18fb      	adds	r3, r7, r3
    93b4:	2208      	movs	r2, #8
    93b6:	18ba      	adds	r2, r7, r2
    93b8:	609a      	str	r2, [r3, #8]
	cmd.length = 3;
    93ba:	230c      	movs	r3, #12
    93bc:	18fb      	adds	r3, r7, r3
    93be:	2203      	movs	r2, #3
    93c0:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    93c2:	230c      	movs	r3, #12
    93c4:	18fb      	adds	r3, r7, r3
    93c6:	2200      	movs	r2, #0
    93c8:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_read_command_wait(chip, cmd);
    93ca:	230c      	movs	r3, #12
    93cc:	18fb      	adds	r3, r7, r3
    93ce:	6878      	ldr	r0, [r7, #4]
    93d0:	466a      	mov	r2, sp
    93d2:	68d9      	ldr	r1, [r3, #12]
    93d4:	6011      	str	r1, [r2, #0]
    93d6:	6819      	ldr	r1, [r3, #0]
    93d8:	685a      	ldr	r2, [r3, #4]
    93da:	689b      	ldr	r3, [r3, #8]
    93dc:	4c0c      	ldr	r4, [pc, #48]	; (9410 <at25dfx_chip_check_presence+0xa0>)
    93de:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    93e0:	687b      	ldr	r3, [r7, #4]
    93e2:	681b      	ldr	r3, [r3, #0]
    93e4:	0018      	movs	r0, r3
    93e6:	4b0b      	ldr	r3, [pc, #44]	; (9414 <at25dfx_chip_check_presence+0xa4>)
    93e8:	4798      	blx	r3

	if (id == _at25dfx_get_device_id(chip->type)) {
    93ea:	687b      	ldr	r3, [r7, #4]
    93ec:	791b      	ldrb	r3, [r3, #4]
    93ee:	0018      	movs	r0, r3
    93f0:	4b09      	ldr	r3, [pc, #36]	; (9418 <at25dfx_chip_check_presence+0xa8>)
    93f2:	4798      	blx	r3
    93f4:	0002      	movs	r2, r0
    93f6:	68bb      	ldr	r3, [r7, #8]
    93f8:	429a      	cmp	r2, r3
    93fa:	d101      	bne.n	9400 <at25dfx_chip_check_presence+0x90>
		return STATUS_OK;
    93fc:	2300      	movs	r3, #0
    93fe:	e000      	b.n	9402 <at25dfx_chip_check_presence+0x92>
	} else {
		return STATUS_ERR_NOT_FOUND;
    9400:	2314      	movs	r3, #20
	}
}
    9402:	0018      	movs	r0, r3
    9404:	46bd      	mov	sp, r7
    9406:	b009      	add	sp, #36	; 0x24
    9408:	bd90      	pop	{r4, r7, pc}
    940a:	46c0      	nop			; (mov r8, r8)
    940c:	00008d59 	.word	0x00008d59
    9410:	00008fed 	.word	0x00008fed
    9414:	00008da1 	.word	0x00008da1
    9418:	00008ed9 	.word	0x00008ed9

0000941c <at25dfx_chip_read_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_read_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, void *data, at25dfx_datalen_t length)
{
    941c:	b590      	push	{r4, r7, lr}
    941e:	b08d      	sub	sp, #52	; 0x34
    9420:	af02      	add	r7, sp, #8
    9422:	60f8      	str	r0, [r7, #12]
    9424:	60b9      	str	r1, [r7, #8]
    9426:	607a      	str	r2, [r7, #4]
    9428:	001a      	movs	r2, r3
    942a:	1cbb      	adds	r3, r7, #2
    942c:	801a      	strh	r2, [r3, #0]
	Assert(chip);
	Assert(data);
	Assert(length);

	// Address out of range?
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    942e:	1cbb      	adds	r3, r7, #2
    9430:	881a      	ldrh	r2, [r3, #0]
    9432:	68bb      	ldr	r3, [r7, #8]
    9434:	18d4      	adds	r4, r2, r3
    9436:	68fb      	ldr	r3, [r7, #12]
    9438:	791b      	ldrb	r3, [r3, #4]
    943a:	0018      	movs	r0, r3
    943c:	4b21      	ldr	r3, [pc, #132]	; (94c4 <at25dfx_chip_read_buffer+0xa8>)
    943e:	4798      	blx	r3
    9440:	0003      	movs	r3, r0
    9442:	429c      	cmp	r4, r3
    9444:	d901      	bls.n	944a <at25dfx_chip_read_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
    9446:	2317      	movs	r3, #23
    9448:	e037      	b.n	94ba <at25dfx_chip_read_buffer+0x9e>
	}

	status = _at25dfx_spi_lock(chip->spi);
    944a:	68fb      	ldr	r3, [r7, #12]
    944c:	681b      	ldr	r3, [r3, #0]
    944e:	2227      	movs	r2, #39	; 0x27
    9450:	18bc      	adds	r4, r7, r2
    9452:	0018      	movs	r0, r3
    9454:	4b1c      	ldr	r3, [pc, #112]	; (94c8 <at25dfx_chip_read_buffer+0xac>)
    9456:	4798      	blx	r3
    9458:	0003      	movs	r3, r0
    945a:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    945c:	2327      	movs	r3, #39	; 0x27
    945e:	18fb      	adds	r3, r7, r3
    9460:	781b      	ldrb	r3, [r3, #0]
    9462:	2b05      	cmp	r3, #5
    9464:	d103      	bne.n	946e <at25dfx_chip_read_buffer+0x52>
		return status;
    9466:	2327      	movs	r3, #39	; 0x27
    9468:	18fb      	adds	r3, r7, r3
    946a:	781b      	ldrb	r3, [r3, #0]
    946c:	e025      	b.n	94ba <at25dfx_chip_read_buffer+0x9e>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_ARRAY;
    946e:	2314      	movs	r3, #20
    9470:	18fb      	adds	r3, r7, r3
    9472:	220b      	movs	r2, #11
    9474:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 5;
    9476:	2314      	movs	r3, #20
    9478:	18fb      	adds	r3, r7, r3
    947a:	2205      	movs	r2, #5
    947c:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
    947e:	2314      	movs	r3, #20
    9480:	18fb      	adds	r3, r7, r3
    9482:	68ba      	ldr	r2, [r7, #8]
    9484:	605a      	str	r2, [r3, #4]
	cmd.data.rx = (uint8_t *)data;
    9486:	2314      	movs	r3, #20
    9488:	18fb      	adds	r3, r7, r3
    948a:	687a      	ldr	r2, [r7, #4]
    948c:	609a      	str	r2, [r3, #8]
	cmd.length = length;
    948e:	2314      	movs	r3, #20
    9490:	18fb      	adds	r3, r7, r3
    9492:	1cba      	adds	r2, r7, #2
    9494:	8812      	ldrh	r2, [r2, #0]
    9496:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_read_command_wait(chip, cmd);
    9498:	2314      	movs	r3, #20
    949a:	18fb      	adds	r3, r7, r3
    949c:	68f8      	ldr	r0, [r7, #12]
    949e:	466a      	mov	r2, sp
    94a0:	68d9      	ldr	r1, [r3, #12]
    94a2:	6011      	str	r1, [r2, #0]
    94a4:	6819      	ldr	r1, [r3, #0]
    94a6:	685a      	ldr	r2, [r3, #4]
    94a8:	689b      	ldr	r3, [r3, #8]
    94aa:	4c08      	ldr	r4, [pc, #32]	; (94cc <at25dfx_chip_read_buffer+0xb0>)
    94ac:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    94ae:	68fb      	ldr	r3, [r7, #12]
    94b0:	681b      	ldr	r3, [r3, #0]
    94b2:	0018      	movs	r0, r3
    94b4:	4b06      	ldr	r3, [pc, #24]	; (94d0 <at25dfx_chip_read_buffer+0xb4>)
    94b6:	4798      	blx	r3

	return STATUS_OK;
    94b8:	2300      	movs	r3, #0
}
    94ba:	0018      	movs	r0, r3
    94bc:	46bd      	mov	sp, r7
    94be:	b00b      	add	sp, #44	; 0x2c
    94c0:	bd90      	pop	{r4, r7, pc}
    94c2:	46c0      	nop			; (mov r8, r8)
    94c4:	00008f55 	.word	0x00008f55
    94c8:	00008d59 	.word	0x00008d59
    94cc:	00008fed 	.word	0x00008fed
    94d0:	00008da1 	.word	0x00008da1

000094d4 <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
    94d4:	b590      	push	{r4, r7, lr}
    94d6:	b08d      	sub	sp, #52	; 0x34
    94d8:	af02      	add	r7, sp, #8
    94da:	60f8      	str	r0, [r7, #12]
    94dc:	60b9      	str	r1, [r7, #8]
    94de:	607a      	str	r2, [r7, #4]
    94e0:	001a      	movs	r2, r3
    94e2:	1cbb      	adds	r3, r7, #2
    94e4:	801a      	strh	r2, [r3, #0]

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    94e6:	1cbb      	adds	r3, r7, #2
    94e8:	881a      	ldrh	r2, [r3, #0]
    94ea:	68bb      	ldr	r3, [r7, #8]
    94ec:	18d4      	adds	r4, r2, r3
    94ee:	68fb      	ldr	r3, [r7, #12]
    94f0:	791b      	ldrb	r3, [r3, #4]
    94f2:	0018      	movs	r0, r3
    94f4:	4b5b      	ldr	r3, [pc, #364]	; (9664 <at25dfx_chip_write_buffer+0x190>)
    94f6:	4798      	blx	r3
    94f8:	0003      	movs	r3, r0
    94fa:	429c      	cmp	r4, r3
    94fc:	d901      	bls.n	9502 <at25dfx_chip_write_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
    94fe:	2317      	movs	r3, #23
    9500:	e0ab      	b.n	965a <at25dfx_chip_write_buffer+0x186>
	}

	status = _at25dfx_spi_lock(chip->spi);
    9502:	68fb      	ldr	r3, [r7, #12]
    9504:	681b      	ldr	r3, [r3, #0]
    9506:	2227      	movs	r2, #39	; 0x27
    9508:	18bc      	adds	r4, r7, r2
    950a:	0018      	movs	r0, r3
    950c:	4b56      	ldr	r3, [pc, #344]	; (9668 <at25dfx_chip_write_buffer+0x194>)
    950e:	4798      	blx	r3
    9510:	0003      	movs	r3, r0
    9512:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    9514:	2327      	movs	r3, #39	; 0x27
    9516:	18fb      	adds	r3, r7, r3
    9518:	781b      	ldrb	r3, [r3, #0]
    951a:	2b05      	cmp	r3, #5
    951c:	d103      	bne.n	9526 <at25dfx_chip_write_buffer+0x52>
		return status;
    951e:	2327      	movs	r3, #39	; 0x27
    9520:	18fb      	adds	r3, r7, r3
    9522:	781b      	ldrb	r3, [r3, #0]
    9524:	e099      	b.n	965a <at25dfx_chip_write_buffer+0x186>
	}

	_at25dfx_chip_enable_write(chip);
    9526:	68fb      	ldr	r3, [r7, #12]
    9528:	0018      	movs	r0, r3
    952a:	4b50      	ldr	r3, [pc, #320]	; (966c <at25dfx_chip_write_buffer+0x198>)
    952c:	4798      	blx	r3

	cmd.opcode = AT25DFX_COMMAND_PROGRAM_PAGE;
    952e:	2314      	movs	r3, #20
    9530:	18fb      	adds	r3, r7, r3
    9532:	2202      	movs	r2, #2
    9534:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 4;
    9536:	2314      	movs	r3, #20
    9538:	18fb      	adds	r3, r7, r3
    953a:	2204      	movs	r2, #4
    953c:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
    953e:	2314      	movs	r3, #20
    9540:	18fb      	adds	r3, r7, r3
    9542:	68ba      	ldr	r2, [r7, #8]
    9544:	605a      	str	r2, [r3, #4]
	cmd.data.tx = (uint8_t *)data;
    9546:	2314      	movs	r3, #20
    9548:	18fb      	adds	r3, r7, r3
    954a:	687a      	ldr	r2, [r7, #4]
    954c:	609a      	str	r2, [r3, #8]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
    954e:	68bb      	ldr	r3, [r7, #8]
    9550:	b29b      	uxth	r3, r3
    9552:	22ff      	movs	r2, #255	; 0xff
    9554:	4013      	ands	r3, r2
    9556:	b29a      	uxth	r2, r3
    9558:	2324      	movs	r3, #36	; 0x24
    955a:	18fb      	adds	r3, r7, r3
    955c:	2180      	movs	r1, #128	; 0x80
    955e:	0049      	lsls	r1, r1, #1
    9560:	1a8a      	subs	r2, r1, r2
    9562:	801a      	strh	r2, [r3, #0]
	cmd.length = min(page_bytes, length);
    9564:	1cbb      	adds	r3, r7, #2
    9566:	2224      	movs	r2, #36	; 0x24
    9568:	18ba      	adds	r2, r7, r2
    956a:	8810      	ldrh	r0, [r2, #0]
    956c:	881b      	ldrh	r3, [r3, #0]
    956e:	b299      	uxth	r1, r3
    9570:	b282      	uxth	r2, r0
    9572:	4291      	cmp	r1, r2
    9574:	d900      	bls.n	9578 <at25dfx_chip_write_buffer+0xa4>
    9576:	1c03      	adds	r3, r0, #0
    9578:	b29a      	uxth	r2, r3
    957a:	2314      	movs	r3, #20
    957c:	18fb      	adds	r3, r7, r3
    957e:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    9580:	2314      	movs	r3, #20
    9582:	18fb      	adds	r3, r7, r3
    9584:	68f8      	ldr	r0, [r7, #12]
    9586:	466a      	mov	r2, sp
    9588:	68d9      	ldr	r1, [r3, #12]
    958a:	6011      	str	r1, [r2, #0]
    958c:	6819      	ldr	r1, [r3, #0]
    958e:	685a      	ldr	r2, [r3, #4]
    9590:	689b      	ldr	r3, [r3, #8]
    9592:	4c37      	ldr	r4, [pc, #220]	; (9670 <at25dfx_chip_write_buffer+0x19c>)
    9594:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
    9596:	2327      	movs	r3, #39	; 0x27
    9598:	18fc      	adds	r4, r7, r3
    959a:	68fb      	ldr	r3, [r7, #12]
    959c:	0018      	movs	r0, r3
    959e:	4b35      	ldr	r3, [pc, #212]	; (9674 <at25dfx_chip_write_buffer+0x1a0>)
    95a0:	4798      	blx	r3
    95a2:	0003      	movs	r3, r0
    95a4:	7023      	strb	r3, [r4, #0]

	length -= cmd.length;
    95a6:	2314      	movs	r3, #20
    95a8:	18fb      	adds	r3, r7, r3
    95aa:	899a      	ldrh	r2, [r3, #12]
    95ac:	1cbb      	adds	r3, r7, #2
    95ae:	1cb9      	adds	r1, r7, #2
    95b0:	8809      	ldrh	r1, [r1, #0]
    95b2:	1a8a      	subs	r2, r1, r2
    95b4:	801a      	strh	r2, [r3, #0]

	while (length && (status == STATUS_OK)) {
    95b6:	e03f      	b.n	9638 <at25dfx_chip_write_buffer+0x164>
		_at25dfx_chip_enable_write(chip);
    95b8:	68fb      	ldr	r3, [r7, #12]
    95ba:	0018      	movs	r0, r3
    95bc:	4b2b      	ldr	r3, [pc, #172]	; (966c <at25dfx_chip_write_buffer+0x198>)
    95be:	4798      	blx	r3

		cmd.address += cmd.length;
    95c0:	2314      	movs	r3, #20
    95c2:	18fb      	adds	r3, r7, r3
    95c4:	685b      	ldr	r3, [r3, #4]
    95c6:	2214      	movs	r2, #20
    95c8:	18ba      	adds	r2, r7, r2
    95ca:	8992      	ldrh	r2, [r2, #12]
    95cc:	189a      	adds	r2, r3, r2
    95ce:	2314      	movs	r3, #20
    95d0:	18fb      	adds	r3, r7, r3
    95d2:	605a      	str	r2, [r3, #4]
		cmd.data.tx += cmd.length;
    95d4:	2314      	movs	r3, #20
    95d6:	18fb      	adds	r3, r7, r3
    95d8:	689b      	ldr	r3, [r3, #8]
    95da:	2214      	movs	r2, #20
    95dc:	18ba      	adds	r2, r7, r2
    95de:	8992      	ldrh	r2, [r2, #12]
    95e0:	189a      	adds	r2, r3, r2
    95e2:	2314      	movs	r3, #20
    95e4:	18fb      	adds	r3, r7, r3
    95e6:	609a      	str	r2, [r3, #8]
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
    95e8:	1cbb      	adds	r3, r7, #2
    95ea:	881b      	ldrh	r3, [r3, #0]
    95ec:	b299      	uxth	r1, r3
    95ee:	2280      	movs	r2, #128	; 0x80
    95f0:	0052      	lsls	r2, r2, #1
    95f2:	4291      	cmp	r1, r2
    95f4:	d901      	bls.n	95fa <at25dfx_chip_write_buffer+0x126>
    95f6:	2380      	movs	r3, #128	; 0x80
    95f8:	005b      	lsls	r3, r3, #1
    95fa:	b29a      	uxth	r2, r3
    95fc:	2314      	movs	r3, #20
    95fe:	18fb      	adds	r3, r7, r3
    9600:	819a      	strh	r2, [r3, #12]

		_at25dfx_chip_issue_write_command_wait(chip, cmd);
    9602:	2314      	movs	r3, #20
    9604:	18fb      	adds	r3, r7, r3
    9606:	68f8      	ldr	r0, [r7, #12]
    9608:	466a      	mov	r2, sp
    960a:	68d9      	ldr	r1, [r3, #12]
    960c:	6011      	str	r1, [r2, #0]
    960e:	6819      	ldr	r1, [r3, #0]
    9610:	685a      	ldr	r2, [r3, #4]
    9612:	689b      	ldr	r3, [r3, #8]
    9614:	4c16      	ldr	r4, [pc, #88]	; (9670 <at25dfx_chip_write_buffer+0x19c>)
    9616:	47a0      	blx	r4

		status = _at25dfx_chip_get_nonbusy_status(chip);
    9618:	2327      	movs	r3, #39	; 0x27
    961a:	18fc      	adds	r4, r7, r3
    961c:	68fb      	ldr	r3, [r7, #12]
    961e:	0018      	movs	r0, r3
    9620:	4b14      	ldr	r3, [pc, #80]	; (9674 <at25dfx_chip_write_buffer+0x1a0>)
    9622:	4798      	blx	r3
    9624:	0003      	movs	r3, r0
    9626:	7023      	strb	r3, [r4, #0]

		length -= cmd.length;
    9628:	2314      	movs	r3, #20
    962a:	18fb      	adds	r3, r7, r3
    962c:	899a      	ldrh	r2, [r3, #12]
    962e:	1cbb      	adds	r3, r7, #2
    9630:	1cb9      	adds	r1, r7, #2
    9632:	8809      	ldrh	r1, [r1, #0]
    9634:	1a8a      	subs	r2, r1, r2
    9636:	801a      	strh	r2, [r3, #0]
	while (length && (status == STATUS_OK)) {
    9638:	1cbb      	adds	r3, r7, #2
    963a:	881b      	ldrh	r3, [r3, #0]
    963c:	2b00      	cmp	r3, #0
    963e:	d004      	beq.n	964a <at25dfx_chip_write_buffer+0x176>
    9640:	2327      	movs	r3, #39	; 0x27
    9642:	18fb      	adds	r3, r7, r3
    9644:	781b      	ldrb	r3, [r3, #0]
    9646:	2b00      	cmp	r3, #0
    9648:	d0b6      	beq.n	95b8 <at25dfx_chip_write_buffer+0xe4>
	}

	_at25dfx_spi_unlock(chip->spi);
    964a:	68fb      	ldr	r3, [r7, #12]
    964c:	681b      	ldr	r3, [r3, #0]
    964e:	0018      	movs	r0, r3
    9650:	4b09      	ldr	r3, [pc, #36]	; (9678 <at25dfx_chip_write_buffer+0x1a4>)
    9652:	4798      	blx	r3

	return status;
    9654:	2327      	movs	r3, #39	; 0x27
    9656:	18fb      	adds	r3, r7, r3
    9658:	781b      	ldrb	r3, [r3, #0]
}
    965a:	0018      	movs	r0, r3
    965c:	46bd      	mov	sp, r7
    965e:	b00b      	add	sp, #44	; 0x2c
    9660:	bd90      	pop	{r4, r7, pc}
    9662:	46c0      	nop			; (mov r8, r8)
    9664:	00008f55 	.word	0x00008f55
    9668:	00008d59 	.word	0x00008d59
    966c:	0000931d 	.word	0x0000931d
    9670:	000090f5 	.word	0x000090f5
    9674:	000091f9 	.word	0x000091f9
    9678:	00008da1 	.word	0x00008da1

0000967c <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
    967c:	b590      	push	{r4, r7, lr}
    967e:	b08d      	sub	sp, #52	; 0x34
    9680:	af02      	add	r7, sp, #8
    9682:	60f8      	str	r0, [r7, #12]
    9684:	60b9      	str	r1, [r7, #8]
    9686:	1dfb      	adds	r3, r7, #7
    9688:	701a      	strb	r2, [r3, #0]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
    968a:	68fb      	ldr	r3, [r7, #12]
    968c:	791b      	ldrb	r3, [r3, #4]
    968e:	0018      	movs	r0, r3
    9690:	4b33      	ldr	r3, [pc, #204]	; (9760 <at25dfx_chip_erase_block+0xe4>)
    9692:	4798      	blx	r3
    9694:	0002      	movs	r2, r0
    9696:	68bb      	ldr	r3, [r7, #8]
    9698:	429a      	cmp	r2, r3
    969a:	d801      	bhi.n	96a0 <at25dfx_chip_erase_block+0x24>
		return STATUS_ERR_INVALID_ARG;
    969c:	2317      	movs	r3, #23
    969e:	e05b      	b.n	9758 <at25dfx_chip_erase_block+0xdc>
	}

	status = _at25dfx_spi_lock(chip->spi);
    96a0:	68fb      	ldr	r3, [r7, #12]
    96a2:	681b      	ldr	r3, [r3, #0]
    96a4:	2227      	movs	r2, #39	; 0x27
    96a6:	18bc      	adds	r4, r7, r2
    96a8:	0018      	movs	r0, r3
    96aa:	4b2e      	ldr	r3, [pc, #184]	; (9764 <at25dfx_chip_erase_block+0xe8>)
    96ac:	4798      	blx	r3
    96ae:	0003      	movs	r3, r0
    96b0:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    96b2:	2327      	movs	r3, #39	; 0x27
    96b4:	18fb      	adds	r3, r7, r3
    96b6:	781b      	ldrb	r3, [r3, #0]
    96b8:	2b05      	cmp	r3, #5
    96ba:	d103      	bne.n	96c4 <at25dfx_chip_erase_block+0x48>
		return status;
    96bc:	2327      	movs	r3, #39	; 0x27
    96be:	18fb      	adds	r3, r7, r3
    96c0:	781b      	ldrb	r3, [r3, #0]
    96c2:	e049      	b.n	9758 <at25dfx_chip_erase_block+0xdc>
	}

	_at25dfx_chip_enable_write(chip);
    96c4:	68fb      	ldr	r3, [r7, #12]
    96c6:	0018      	movs	r0, r3
    96c8:	4b27      	ldr	r3, [pc, #156]	; (9768 <at25dfx_chip_erase_block+0xec>)
    96ca:	4798      	blx	r3

	switch (block_size) {
    96cc:	1dfb      	adds	r3, r7, #7
    96ce:	781b      	ldrb	r3, [r3, #0]
    96d0:	2b01      	cmp	r3, #1
    96d2:	d008      	beq.n	96e6 <at25dfx_chip_erase_block+0x6a>
    96d4:	2b02      	cmp	r3, #2
    96d6:	d00b      	beq.n	96f0 <at25dfx_chip_erase_block+0x74>
    96d8:	2b00      	cmp	r3, #0
    96da:	d10e      	bne.n	96fa <at25dfx_chip_erase_block+0x7e>
	case AT25DFX_BLOCK_SIZE_4KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
    96dc:	2314      	movs	r3, #20
    96de:	18fb      	adds	r3, r7, r3
    96e0:	2220      	movs	r2, #32
    96e2:	701a      	strb	r2, [r3, #0]
		break;
    96e4:	e00d      	b.n	9702 <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_32KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
    96e6:	2314      	movs	r3, #20
    96e8:	18fb      	adds	r3, r7, r3
    96ea:	2252      	movs	r2, #82	; 0x52
    96ec:	701a      	strb	r2, [r3, #0]
		break;
    96ee:	e008      	b.n	9702 <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_64KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
    96f0:	2314      	movs	r3, #20
    96f2:	18fb      	adds	r3, r7, r3
    96f4:	22d8      	movs	r2, #216	; 0xd8
    96f6:	701a      	strb	r2, [r3, #0]
		break;
    96f8:	e003      	b.n	9702 <at25dfx_chip_erase_block+0x86>

	default:
		Assert(false);
		cmd.opcode = (enum at25dfx_command_opcode)0;
    96fa:	2314      	movs	r3, #20
    96fc:	18fb      	adds	r3, r7, r3
    96fe:	2200      	movs	r2, #0
    9700:	701a      	strb	r2, [r3, #0]
	}
	cmd.command_size = 4;
    9702:	2314      	movs	r3, #20
    9704:	18fb      	adds	r3, r7, r3
    9706:	2204      	movs	r2, #4
    9708:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
    970a:	2314      	movs	r3, #20
    970c:	18fb      	adds	r3, r7, r3
    970e:	68ba      	ldr	r2, [r7, #8]
    9710:	605a      	str	r2, [r3, #4]
	cmd.length = 0;
    9712:	2314      	movs	r3, #20
    9714:	18fb      	adds	r3, r7, r3
    9716:	2200      	movs	r2, #0
    9718:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.data.tx = NULL;
    971a:	2314      	movs	r3, #20
    971c:	18fb      	adds	r3, r7, r3
    971e:	2200      	movs	r2, #0
    9720:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    9722:	2314      	movs	r3, #20
    9724:	18fb      	adds	r3, r7, r3
    9726:	68f8      	ldr	r0, [r7, #12]
    9728:	466a      	mov	r2, sp
    972a:	68d9      	ldr	r1, [r3, #12]
    972c:	6011      	str	r1, [r2, #0]
    972e:	6819      	ldr	r1, [r3, #0]
    9730:	685a      	ldr	r2, [r3, #4]
    9732:	689b      	ldr	r3, [r3, #8]
    9734:	4c0d      	ldr	r4, [pc, #52]	; (976c <at25dfx_chip_erase_block+0xf0>)
    9736:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
    9738:	2327      	movs	r3, #39	; 0x27
    973a:	18fc      	adds	r4, r7, r3
    973c:	68fb      	ldr	r3, [r7, #12]
    973e:	0018      	movs	r0, r3
    9740:	4b0b      	ldr	r3, [pc, #44]	; (9770 <at25dfx_chip_erase_block+0xf4>)
    9742:	4798      	blx	r3
    9744:	0003      	movs	r3, r0
    9746:	7023      	strb	r3, [r4, #0]

	_at25dfx_spi_unlock(chip->spi);
    9748:	68fb      	ldr	r3, [r7, #12]
    974a:	681b      	ldr	r3, [r3, #0]
    974c:	0018      	movs	r0, r3
    974e:	4b09      	ldr	r3, [pc, #36]	; (9774 <at25dfx_chip_erase_block+0xf8>)
    9750:	4798      	blx	r3

	return status;
    9752:	2327      	movs	r3, #39	; 0x27
    9754:	18fb      	adds	r3, r7, r3
    9756:	781b      	ldrb	r3, [r3, #0]
}
    9758:	0018      	movs	r0, r3
    975a:	46bd      	mov	sp, r7
    975c:	b00b      	add	sp, #44	; 0x2c
    975e:	bd90      	pop	{r4, r7, pc}
    9760:	00008f55 	.word	0x00008f55
    9764:	00008d59 	.word	0x00008d59
    9768:	0000931d 	.word	0x0000931d
    976c:	000090f5 	.word	0x000090f5
    9770:	000091f9 	.word	0x000091f9
    9774:	00008da1 	.word	0x00008da1

00009778 <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
    9778:	b590      	push	{r4, r7, lr}
    977a:	b08b      	sub	sp, #44	; 0x2c
    977c:	af02      	add	r7, sp, #8
    977e:	6078      	str	r0, [r7, #4]
    9780:	000a      	movs	r2, r1
    9782:	1cfb      	adds	r3, r7, #3
    9784:	701a      	strb	r2, [r3, #0]
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    9786:	687b      	ldr	r3, [r7, #4]
    9788:	681b      	ldr	r3, [r3, #0]
    978a:	221f      	movs	r2, #31
    978c:	18bc      	adds	r4, r7, r2
    978e:	0018      	movs	r0, r3
    9790:	4b22      	ldr	r3, [pc, #136]	; (981c <at25dfx_chip_set_global_sector_protect+0xa4>)
    9792:	4798      	blx	r3
    9794:	0003      	movs	r3, r0
    9796:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    9798:	231f      	movs	r3, #31
    979a:	18fb      	adds	r3, r7, r3
    979c:	781b      	ldrb	r3, [r3, #0]
    979e:	2b05      	cmp	r3, #5
    97a0:	d103      	bne.n	97aa <at25dfx_chip_set_global_sector_protect+0x32>
		return status;
    97a2:	231f      	movs	r3, #31
    97a4:	18fb      	adds	r3, r7, r3
    97a6:	781b      	ldrb	r3, [r3, #0]
    97a8:	e033      	b.n	9812 <at25dfx_chip_set_global_sector_protect+0x9a>
	}

	_at25dfx_chip_enable_write(chip);
    97aa:	687b      	ldr	r3, [r7, #4]
    97ac:	0018      	movs	r0, r3
    97ae:	4b1c      	ldr	r3, [pc, #112]	; (9820 <at25dfx_chip_set_global_sector_protect+0xa8>)
    97b0:	4798      	blx	r3

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
    97b2:	1cfb      	adds	r3, r7, #3
    97b4:	781b      	ldrb	r3, [r3, #0]
    97b6:	2b00      	cmp	r3, #0
    97b8:	d001      	beq.n	97be <at25dfx_chip_set_global_sector_protect+0x46>
    97ba:	223c      	movs	r2, #60	; 0x3c
    97bc:	e000      	b.n	97c0 <at25dfx_chip_set_global_sector_protect+0x48>
    97be:	2200      	movs	r2, #0
    97c0:	230b      	movs	r3, #11
    97c2:	18fb      	adds	r3, r7, r3
    97c4:	701a      	strb	r2, [r3, #0]
	cmd.opcode = AT25DFX_COMMAND_WRITE_STATUS;
    97c6:	230c      	movs	r3, #12
    97c8:	18fb      	adds	r3, r7, r3
    97ca:	2201      	movs	r2, #1
    97cc:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    97ce:	230c      	movs	r3, #12
    97d0:	18fb      	adds	r3, r7, r3
    97d2:	2201      	movs	r2, #1
    97d4:	705a      	strb	r2, [r3, #1]
	cmd.length = 1;
    97d6:	230c      	movs	r3, #12
    97d8:	18fb      	adds	r3, r7, r3
    97da:	2201      	movs	r2, #1
    97dc:	819a      	strh	r2, [r3, #12]
	cmd.data.tx = &temp_data;
    97de:	230c      	movs	r3, #12
    97e0:	18fb      	adds	r3, r7, r3
    97e2:	220b      	movs	r2, #11
    97e4:	18ba      	adds	r2, r7, r2
    97e6:	609a      	str	r2, [r3, #8]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    97e8:	230c      	movs	r3, #12
    97ea:	18fb      	adds	r3, r7, r3
    97ec:	2200      	movs	r2, #0
    97ee:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    97f0:	230c      	movs	r3, #12
    97f2:	18fb      	adds	r3, r7, r3
    97f4:	6878      	ldr	r0, [r7, #4]
    97f6:	466a      	mov	r2, sp
    97f8:	68d9      	ldr	r1, [r3, #12]
    97fa:	6011      	str	r1, [r2, #0]
    97fc:	6819      	ldr	r1, [r3, #0]
    97fe:	685a      	ldr	r2, [r3, #4]
    9800:	689b      	ldr	r3, [r3, #8]
    9802:	4c08      	ldr	r4, [pc, #32]	; (9824 <at25dfx_chip_set_global_sector_protect+0xac>)
    9804:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    9806:	687b      	ldr	r3, [r7, #4]
    9808:	681b      	ldr	r3, [r3, #0]
    980a:	0018      	movs	r0, r3
    980c:	4b06      	ldr	r3, [pc, #24]	; (9828 <at25dfx_chip_set_global_sector_protect+0xb0>)
    980e:	4798      	blx	r3

	return STATUS_OK;
    9810:	2300      	movs	r3, #0
}
    9812:	0018      	movs	r0, r3
    9814:	46bd      	mov	sp, r7
    9816:	b009      	add	sp, #36	; 0x24
    9818:	bd90      	pop	{r4, r7, pc}
    981a:	46c0      	nop			; (mov r8, r8)
    981c:	00008d59 	.word	0x00008d59
    9820:	0000931d 	.word	0x0000931d
    9824:	000090f5 	.word	0x000090f5
    9828:	00008da1 	.word	0x00008da1

0000982c <at25dfx_chip_set_sector_protect>:
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_set_sector_protect(
		struct at25dfx_chip_module *chip, at25dfx_address_t address,
		bool protect)
{
    982c:	b590      	push	{r4, r7, lr}
    982e:	b08d      	sub	sp, #52	; 0x34
    9830:	af02      	add	r7, sp, #8
    9832:	60f8      	str	r0, [r7, #12]
    9834:	60b9      	str	r1, [r7, #8]
    9836:	1dfb      	adds	r3, r7, #7
    9838:	701a      	strb	r2, [r3, #0]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if ((address) >= _at25dfx_get_device_size(chip->type)) {
    983a:	68fb      	ldr	r3, [r7, #12]
    983c:	791b      	ldrb	r3, [r3, #4]
    983e:	0018      	movs	r0, r3
    9840:	4b26      	ldr	r3, [pc, #152]	; (98dc <at25dfx_chip_set_sector_protect+0xb0>)
    9842:	4798      	blx	r3
    9844:	0002      	movs	r2, r0
    9846:	68bb      	ldr	r3, [r7, #8]
    9848:	429a      	cmp	r2, r3
    984a:	d801      	bhi.n	9850 <at25dfx_chip_set_sector_protect+0x24>
		return STATUS_ERR_INVALID_ARG;
    984c:	2317      	movs	r3, #23
    984e:	e040      	b.n	98d2 <at25dfx_chip_set_sector_protect+0xa6>
	}

	status = _at25dfx_spi_lock(chip->spi);
    9850:	68fb      	ldr	r3, [r7, #12]
    9852:	681b      	ldr	r3, [r3, #0]
    9854:	2227      	movs	r2, #39	; 0x27
    9856:	18bc      	adds	r4, r7, r2
    9858:	0018      	movs	r0, r3
    985a:	4b21      	ldr	r3, [pc, #132]	; (98e0 <at25dfx_chip_set_sector_protect+0xb4>)
    985c:	4798      	blx	r3
    985e:	0003      	movs	r3, r0
    9860:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    9862:	2327      	movs	r3, #39	; 0x27
    9864:	18fb      	adds	r3, r7, r3
    9866:	781b      	ldrb	r3, [r3, #0]
    9868:	2b05      	cmp	r3, #5
    986a:	d103      	bne.n	9874 <at25dfx_chip_set_sector_protect+0x48>
		return status;
    986c:	2327      	movs	r3, #39	; 0x27
    986e:	18fb      	adds	r3, r7, r3
    9870:	781b      	ldrb	r3, [r3, #0]
    9872:	e02e      	b.n	98d2 <at25dfx_chip_set_sector_protect+0xa6>
	}

	_at25dfx_chip_enable_write(chip);
    9874:	68fb      	ldr	r3, [r7, #12]
    9876:	0018      	movs	r0, r3
    9878:	4b1a      	ldr	r3, [pc, #104]	; (98e4 <at25dfx_chip_set_sector_protect+0xb8>)
    987a:	4798      	blx	r3

	cmd.opcode = protect ?
    987c:	1dfb      	adds	r3, r7, #7
    987e:	781b      	ldrb	r3, [r3, #0]
    9880:	2b00      	cmp	r3, #0
    9882:	d001      	beq.n	9888 <at25dfx_chip_set_sector_protect+0x5c>
    9884:	2236      	movs	r2, #54	; 0x36
    9886:	e000      	b.n	988a <at25dfx_chip_set_sector_protect+0x5e>
    9888:	2239      	movs	r2, #57	; 0x39
    988a:	2314      	movs	r3, #20
    988c:	18fb      	adds	r3, r7, r3
    988e:	701a      	strb	r2, [r3, #0]
			AT25DFX_COMMAND_PROTECT_SECTOR : AT25DFX_COMMAND_UNPROTECT_SECTOR;
	cmd.command_size = 4;
    9890:	2314      	movs	r3, #20
    9892:	18fb      	adds	r3, r7, r3
    9894:	2204      	movs	r2, #4
    9896:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
    9898:	2314      	movs	r3, #20
    989a:	18fb      	adds	r3, r7, r3
    989c:	68ba      	ldr	r2, [r7, #8]
    989e:	605a      	str	r2, [r3, #4]
	cmd.length = 0;
    98a0:	2314      	movs	r3, #20
    98a2:	18fb      	adds	r3, r7, r3
    98a4:	2200      	movs	r2, #0
    98a6:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.data.tx = NULL;
    98a8:	2314      	movs	r3, #20
    98aa:	18fb      	adds	r3, r7, r3
    98ac:	2200      	movs	r2, #0
    98ae:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    98b0:	2314      	movs	r3, #20
    98b2:	18fb      	adds	r3, r7, r3
    98b4:	68f8      	ldr	r0, [r7, #12]
    98b6:	466a      	mov	r2, sp
    98b8:	68d9      	ldr	r1, [r3, #12]
    98ba:	6011      	str	r1, [r2, #0]
    98bc:	6819      	ldr	r1, [r3, #0]
    98be:	685a      	ldr	r2, [r3, #4]
    98c0:	689b      	ldr	r3, [r3, #8]
    98c2:	4c09      	ldr	r4, [pc, #36]	; (98e8 <at25dfx_chip_set_sector_protect+0xbc>)
    98c4:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    98c6:	68fb      	ldr	r3, [r7, #12]
    98c8:	681b      	ldr	r3, [r3, #0]
    98ca:	0018      	movs	r0, r3
    98cc:	4b07      	ldr	r3, [pc, #28]	; (98ec <at25dfx_chip_set_sector_protect+0xc0>)
    98ce:	4798      	blx	r3

	return STATUS_OK;
    98d0:	2300      	movs	r3, #0
}
    98d2:	0018      	movs	r0, r3
    98d4:	46bd      	mov	sp, r7
    98d6:	b00b      	add	sp, #44	; 0x2c
    98d8:	bd90      	pop	{r4, r7, pc}
    98da:	46c0      	nop			; (mov r8, r8)
    98dc:	00008f55 	.word	0x00008f55
    98e0:	00008d59 	.word	0x00008d59
    98e4:	0000931d 	.word	0x0000931d
    98e8:	000090f5 	.word	0x000090f5
    98ec:	00008da1 	.word	0x00008da1

000098f0 <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
    98f0:	b590      	push	{r4, r7, lr}
    98f2:	b08b      	sub	sp, #44	; 0x2c
    98f4:	af02      	add	r7, sp, #8
    98f6:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    98f8:	687b      	ldr	r3, [r7, #4]
    98fa:	681b      	ldr	r3, [r3, #0]
    98fc:	221f      	movs	r2, #31
    98fe:	18bc      	adds	r4, r7, r2
    9900:	0018      	movs	r0, r3
    9902:	4b1b      	ldr	r3, [pc, #108]	; (9970 <at25dfx_chip_sleep+0x80>)
    9904:	4798      	blx	r3
    9906:	0003      	movs	r3, r0
    9908:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    990a:	231f      	movs	r3, #31
    990c:	18fb      	adds	r3, r7, r3
    990e:	781b      	ldrb	r3, [r3, #0]
    9910:	2b05      	cmp	r3, #5
    9912:	d103      	bne.n	991c <at25dfx_chip_sleep+0x2c>
		return status;
    9914:	231f      	movs	r3, #31
    9916:	18fb      	adds	r3, r7, r3
    9918:	781b      	ldrb	r3, [r3, #0]
    991a:	e024      	b.n	9966 <at25dfx_chip_sleep+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_SLEEP;
    991c:	230c      	movs	r3, #12
    991e:	18fb      	adds	r3, r7, r3
    9920:	22b9      	movs	r2, #185	; 0xb9
    9922:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    9924:	230c      	movs	r3, #12
    9926:	18fb      	adds	r3, r7, r3
    9928:	2201      	movs	r2, #1
    992a:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
    992c:	230c      	movs	r3, #12
    992e:	18fb      	adds	r3, r7, r3
    9930:	2200      	movs	r2, #0
    9932:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    9934:	230c      	movs	r3, #12
    9936:	18fb      	adds	r3, r7, r3
    9938:	2200      	movs	r2, #0
    993a:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
    993c:	230c      	movs	r3, #12
    993e:	18fb      	adds	r3, r7, r3
    9940:	2200      	movs	r2, #0
    9942:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    9944:	230c      	movs	r3, #12
    9946:	18fb      	adds	r3, r7, r3
    9948:	6878      	ldr	r0, [r7, #4]
    994a:	466a      	mov	r2, sp
    994c:	68d9      	ldr	r1, [r3, #12]
    994e:	6011      	str	r1, [r2, #0]
    9950:	6819      	ldr	r1, [r3, #0]
    9952:	685a      	ldr	r2, [r3, #4]
    9954:	689b      	ldr	r3, [r3, #8]
    9956:	4c07      	ldr	r4, [pc, #28]	; (9974 <at25dfx_chip_sleep+0x84>)
    9958:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    995a:	687b      	ldr	r3, [r7, #4]
    995c:	681b      	ldr	r3, [r3, #0]
    995e:	0018      	movs	r0, r3
    9960:	4b05      	ldr	r3, [pc, #20]	; (9978 <at25dfx_chip_sleep+0x88>)
    9962:	4798      	blx	r3

	return STATUS_OK;
    9964:	2300      	movs	r3, #0
}
    9966:	0018      	movs	r0, r3
    9968:	46bd      	mov	sp, r7
    996a:	b009      	add	sp, #36	; 0x24
    996c:	bd90      	pop	{r4, r7, pc}
    996e:	46c0      	nop			; (mov r8, r8)
    9970:	00008d59 	.word	0x00008d59
    9974:	000090f5 	.word	0x000090f5
    9978:	00008da1 	.word	0x00008da1

0000997c <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
    997c:	b590      	push	{r4, r7, lr}
    997e:	b08b      	sub	sp, #44	; 0x2c
    9980:	af02      	add	r7, sp, #8
    9982:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    9984:	687b      	ldr	r3, [r7, #4]
    9986:	681b      	ldr	r3, [r3, #0]
    9988:	221f      	movs	r2, #31
    998a:	18bc      	adds	r4, r7, r2
    998c:	0018      	movs	r0, r3
    998e:	4b1b      	ldr	r3, [pc, #108]	; (99fc <at25dfx_chip_wake+0x80>)
    9990:	4798      	blx	r3
    9992:	0003      	movs	r3, r0
    9994:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    9996:	231f      	movs	r3, #31
    9998:	18fb      	adds	r3, r7, r3
    999a:	781b      	ldrb	r3, [r3, #0]
    999c:	2b05      	cmp	r3, #5
    999e:	d103      	bne.n	99a8 <at25dfx_chip_wake+0x2c>
		return status;
    99a0:	231f      	movs	r3, #31
    99a2:	18fb      	adds	r3, r7, r3
    99a4:	781b      	ldrb	r3, [r3, #0]
    99a6:	e024      	b.n	99f2 <at25dfx_chip_wake+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_WAKE;
    99a8:	230c      	movs	r3, #12
    99aa:	18fb      	adds	r3, r7, r3
    99ac:	22ab      	movs	r2, #171	; 0xab
    99ae:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    99b0:	230c      	movs	r3, #12
    99b2:	18fb      	adds	r3, r7, r3
    99b4:	2201      	movs	r2, #1
    99b6:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
    99b8:	230c      	movs	r3, #12
    99ba:	18fb      	adds	r3, r7, r3
    99bc:	2200      	movs	r2, #0
    99be:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    99c0:	230c      	movs	r3, #12
    99c2:	18fb      	adds	r3, r7, r3
    99c4:	2200      	movs	r2, #0
    99c6:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
    99c8:	230c      	movs	r3, #12
    99ca:	18fb      	adds	r3, r7, r3
    99cc:	2200      	movs	r2, #0
    99ce:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    99d0:	230c      	movs	r3, #12
    99d2:	18fb      	adds	r3, r7, r3
    99d4:	6878      	ldr	r0, [r7, #4]
    99d6:	466a      	mov	r2, sp
    99d8:	68d9      	ldr	r1, [r3, #12]
    99da:	6011      	str	r1, [r2, #0]
    99dc:	6819      	ldr	r1, [r3, #0]
    99de:	685a      	ldr	r2, [r3, #4]
    99e0:	689b      	ldr	r3, [r3, #8]
    99e2:	4c07      	ldr	r4, [pc, #28]	; (9a00 <at25dfx_chip_wake+0x84>)
    99e4:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    99e6:	687b      	ldr	r3, [r7, #4]
    99e8:	681b      	ldr	r3, [r3, #0]
    99ea:	0018      	movs	r0, r3
    99ec:	4b05      	ldr	r3, [pc, #20]	; (9a04 <at25dfx_chip_wake+0x88>)
    99ee:	4798      	blx	r3

	return STATUS_OK;
    99f0:	2300      	movs	r3, #0
    99f2:	0018      	movs	r0, r3
    99f4:	46bd      	mov	sp, r7
    99f6:	b009      	add	sp, #36	; 0x24
    99f8:	bd90      	pop	{r4, r7, pc}
    99fa:	46c0      	nop			; (mov r8, r8)
    99fc:	00008d59 	.word	0x00008d59
    9a00:	000090f5 	.word	0x000090f5
    9a04:	00008da1 	.word	0x00008da1

00009a08 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    9a08:	b580      	push	{r7, lr}
    9a0a:	b082      	sub	sp, #8
    9a0c:	af00      	add	r7, sp, #0
    9a0e:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    9a10:	687b      	ldr	r3, [r7, #4]
    9a12:	2b00      	cmp	r3, #0
    9a14:	d00c      	beq.n	9a30 <delay_cycles+0x28>
		SysTick->LOAD = n;
    9a16:	4b08      	ldr	r3, [pc, #32]	; (9a38 <delay_cycles+0x30>)
    9a18:	687a      	ldr	r2, [r7, #4]
    9a1a:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    9a1c:	4b06      	ldr	r3, [pc, #24]	; (9a38 <delay_cycles+0x30>)
    9a1e:	2200      	movs	r2, #0
    9a20:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    9a22:	46c0      	nop			; (mov r8, r8)
    9a24:	4b04      	ldr	r3, [pc, #16]	; (9a38 <delay_cycles+0x30>)
    9a26:	681a      	ldr	r2, [r3, #0]
    9a28:	2380      	movs	r3, #128	; 0x80
    9a2a:	025b      	lsls	r3, r3, #9
    9a2c:	4013      	ands	r3, r2
    9a2e:	d0f9      	beq.n	9a24 <delay_cycles+0x1c>
		};
	}
}
    9a30:	46c0      	nop			; (mov r8, r8)
    9a32:	46bd      	mov	sp, r7
    9a34:	b002      	add	sp, #8
    9a36:	bd80      	pop	{r7, pc}
    9a38:	e000e010 	.word	0xe000e010

00009a3c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    9a3c:	b580      	push	{r7, lr}
    9a3e:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    9a40:	2000      	movs	r0, #0
    9a42:	4b0f      	ldr	r3, [pc, #60]	; (9a80 <delay_init+0x44>)
    9a44:	4798      	blx	r3
    9a46:	0002      	movs	r2, r0
    9a48:	4b0e      	ldr	r3, [pc, #56]	; (9a84 <delay_init+0x48>)
    9a4a:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    9a4c:	4b0d      	ldr	r3, [pc, #52]	; (9a84 <delay_init+0x48>)
    9a4e:	6818      	ldr	r0, [r3, #0]
    9a50:	4b0d      	ldr	r3, [pc, #52]	; (9a88 <delay_init+0x4c>)
    9a52:	22fa      	movs	r2, #250	; 0xfa
    9a54:	0091      	lsls	r1, r2, #2
    9a56:	4798      	blx	r3
    9a58:	0003      	movs	r3, r0
    9a5a:	001a      	movs	r2, r3
    9a5c:	4b09      	ldr	r3, [pc, #36]	; (9a84 <delay_init+0x48>)
    9a5e:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    9a60:	4b08      	ldr	r3, [pc, #32]	; (9a84 <delay_init+0x48>)
    9a62:	6818      	ldr	r0, [r3, #0]
    9a64:	4b08      	ldr	r3, [pc, #32]	; (9a88 <delay_init+0x4c>)
    9a66:	22fa      	movs	r2, #250	; 0xfa
    9a68:	0091      	lsls	r1, r2, #2
    9a6a:	4798      	blx	r3
    9a6c:	0003      	movs	r3, r0
    9a6e:	001a      	movs	r2, r3
    9a70:	4b06      	ldr	r3, [pc, #24]	; (9a8c <delay_init+0x50>)
    9a72:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    9a74:	4b06      	ldr	r3, [pc, #24]	; (9a90 <delay_init+0x54>)
    9a76:	2205      	movs	r2, #5
    9a78:	601a      	str	r2, [r3, #0]
}
    9a7a:	46c0      	nop			; (mov r8, r8)
    9a7c:	46bd      	mov	sp, r7
    9a7e:	bd80      	pop	{r7, pc}
    9a80:	0000c529 	.word	0x0000c529
    9a84:	20000010 	.word	0x20000010
    9a88:	0000da59 	.word	0x0000da59
    9a8c:	20000014 	.word	0x20000014
    9a90:	e000e010 	.word	0xe000e010

00009a94 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    9a94:	b580      	push	{r7, lr}
    9a96:	b082      	sub	sp, #8
    9a98:	af00      	add	r7, sp, #0
    9a9a:	6078      	str	r0, [r7, #4]
	while (n--) {
    9a9c:	e004      	b.n	9aa8 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    9a9e:	4b07      	ldr	r3, [pc, #28]	; (9abc <delay_cycles_ms+0x28>)
    9aa0:	681b      	ldr	r3, [r3, #0]
    9aa2:	0018      	movs	r0, r3
    9aa4:	4b06      	ldr	r3, [pc, #24]	; (9ac0 <delay_cycles_ms+0x2c>)
    9aa6:	4798      	blx	r3
	while (n--) {
    9aa8:	687b      	ldr	r3, [r7, #4]
    9aaa:	1e5a      	subs	r2, r3, #1
    9aac:	607a      	str	r2, [r7, #4]
    9aae:	2b00      	cmp	r3, #0
    9ab0:	d1f5      	bne.n	9a9e <delay_cycles_ms+0xa>
	}
}
    9ab2:	46c0      	nop			; (mov r8, r8)
    9ab4:	46bd      	mov	sp, r7
    9ab6:	b002      	add	sp, #8
    9ab8:	bd80      	pop	{r7, pc}
    9aba:	46c0      	nop			; (mov r8, r8)
    9abc:	20000010 	.word	0x20000010
    9ac0:	00009a09 	.word	0x00009a09

00009ac4 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
    9ac4:	b580      	push	{r7, lr}
    9ac6:	b082      	sub	sp, #8
    9ac8:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    9aca:	4b07      	ldr	r3, [pc, #28]	; (9ae8 <nvm_is_ready+0x24>)
    9acc:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    9ace:	687b      	ldr	r3, [r7, #4]
    9ad0:	7d1b      	ldrb	r3, [r3, #20]
    9ad2:	b2db      	uxtb	r3, r3
    9ad4:	001a      	movs	r2, r3
    9ad6:	2301      	movs	r3, #1
    9ad8:	4013      	ands	r3, r2
    9ada:	1e5a      	subs	r2, r3, #1
    9adc:	4193      	sbcs	r3, r2
    9ade:	b2db      	uxtb	r3, r3
}
    9ae0:	0018      	movs	r0, r3
    9ae2:	46bd      	mov	sp, r7
    9ae4:	b002      	add	sp, #8
    9ae6:	bd80      	pop	{r7, pc}
    9ae8:	41004000 	.word	0x41004000

00009aec <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    9aec:	b580      	push	{r7, lr}
    9aee:	b086      	sub	sp, #24
    9af0:	af00      	add	r7, sp, #0
    9af2:	60b9      	str	r1, [r7, #8]
    9af4:	607a      	str	r2, [r7, #4]
    9af6:	230f      	movs	r3, #15
    9af8:	18fb      	adds	r3, r7, r3
    9afa:	1c02      	adds	r2, r0, #0
    9afc:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    9afe:	4b3a      	ldr	r3, [pc, #232]	; (9be8 <nvm_execute_command+0xfc>)
    9b00:	881b      	ldrh	r3, [r3, #0]
    9b02:	001a      	movs	r2, r3
    9b04:	4b38      	ldr	r3, [pc, #224]	; (9be8 <nvm_execute_command+0xfc>)
    9b06:	885b      	ldrh	r3, [r3, #2]
    9b08:	435a      	muls	r2, r3
    9b0a:	68bb      	ldr	r3, [r7, #8]
    9b0c:	429a      	cmp	r2, r3
    9b0e:	d209      	bcs.n	9b24 <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    9b10:	68bb      	ldr	r3, [r7, #8]
    9b12:	4a36      	ldr	r2, [pc, #216]	; (9bec <nvm_execute_command+0x100>)
    9b14:	4293      	cmp	r3, r2
    9b16:	d903      	bls.n	9b20 <nvm_execute_command+0x34>
    9b18:	68bb      	ldr	r3, [r7, #8]
    9b1a:	4a35      	ldr	r2, [pc, #212]	; (9bf0 <nvm_execute_command+0x104>)
    9b1c:	4293      	cmp	r3, r2
    9b1e:	d901      	bls.n	9b24 <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    9b20:	2318      	movs	r3, #24
    9b22:	e05c      	b.n	9bde <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    9b24:	4b33      	ldr	r3, [pc, #204]	; (9bf4 <nvm_execute_command+0x108>)
    9b26:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    9b28:	697b      	ldr	r3, [r7, #20]
    9b2a:	685b      	ldr	r3, [r3, #4]
    9b2c:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    9b2e:	693b      	ldr	r3, [r7, #16]
    9b30:	2280      	movs	r2, #128	; 0x80
    9b32:	02d2      	lsls	r2, r2, #11
    9b34:	431a      	orrs	r2, r3
    9b36:	697b      	ldr	r3, [r7, #20]
    9b38:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    9b3a:	697b      	ldr	r3, [r7, #20]
    9b3c:	2220      	movs	r2, #32
    9b3e:	32ff      	adds	r2, #255	; 0xff
    9b40:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    9b42:	4b2d      	ldr	r3, [pc, #180]	; (9bf8 <nvm_execute_command+0x10c>)
    9b44:	4798      	blx	r3
    9b46:	0003      	movs	r3, r0
    9b48:	001a      	movs	r2, r3
    9b4a:	2301      	movs	r3, #1
    9b4c:	4053      	eors	r3, r2
    9b4e:	b2db      	uxtb	r3, r3
    9b50:	2b00      	cmp	r3, #0
    9b52:	d004      	beq.n	9b5e <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    9b54:	697b      	ldr	r3, [r7, #20]
    9b56:	693a      	ldr	r2, [r7, #16]
    9b58:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
    9b5a:	2305      	movs	r3, #5
    9b5c:	e03f      	b.n	9bde <nvm_execute_command+0xf2>
	}

	switch (command) {
    9b5e:	230f      	movs	r3, #15
    9b60:	18fb      	adds	r3, r7, r3
    9b62:	781b      	ldrb	r3, [r3, #0]
    9b64:	2b45      	cmp	r3, #69	; 0x45
    9b66:	d81d      	bhi.n	9ba4 <nvm_execute_command+0xb8>
    9b68:	009a      	lsls	r2, r3, #2
    9b6a:	4b24      	ldr	r3, [pc, #144]	; (9bfc <nvm_execute_command+0x110>)
    9b6c:	18d3      	adds	r3, r2, r3
    9b6e:	681b      	ldr	r3, [r3, #0]
    9b70:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    9b72:	697b      	ldr	r3, [r7, #20]
    9b74:	8b1b      	ldrh	r3, [r3, #24]
    9b76:	b29b      	uxth	r3, r3
    9b78:	001a      	movs	r2, r3
    9b7a:	2380      	movs	r3, #128	; 0x80
    9b7c:	005b      	lsls	r3, r3, #1
    9b7e:	4013      	ands	r3, r2
    9b80:	d004      	beq.n	9b8c <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
    9b82:	697b      	ldr	r3, [r7, #20]
    9b84:	693a      	ldr	r2, [r7, #16]
    9b86:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
    9b88:	2310      	movs	r3, #16
    9b8a:	e028      	b.n	9bde <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    9b8c:	68bb      	ldr	r3, [r7, #8]
    9b8e:	089b      	lsrs	r3, r3, #2
    9b90:	005a      	lsls	r2, r3, #1
    9b92:	697b      	ldr	r3, [r7, #20]
    9b94:	61da      	str	r2, [r3, #28]
			break;
    9b96:	e00b      	b.n	9bb0 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    9b98:	68bb      	ldr	r3, [r7, #8]
    9b9a:	089b      	lsrs	r3, r3, #2
    9b9c:	005a      	lsls	r2, r3, #1
    9b9e:	697b      	ldr	r3, [r7, #20]
    9ba0:	61da      	str	r2, [r3, #28]
			break;
    9ba2:	e005      	b.n	9bb0 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
    9ba4:	697b      	ldr	r3, [r7, #20]
    9ba6:	693a      	ldr	r2, [r7, #16]
    9ba8:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    9baa:	2317      	movs	r3, #23
    9bac:	e017      	b.n	9bde <nvm_execute_command+0xf2>
			break;
    9bae:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    9bb0:	230f      	movs	r3, #15
    9bb2:	18fb      	adds	r3, r7, r3
    9bb4:	781b      	ldrb	r3, [r3, #0]
    9bb6:	b29b      	uxth	r3, r3
    9bb8:	4a11      	ldr	r2, [pc, #68]	; (9c00 <nvm_execute_command+0x114>)
    9bba:	4313      	orrs	r3, r2
    9bbc:	b29a      	uxth	r2, r3
    9bbe:	697b      	ldr	r3, [r7, #20]
    9bc0:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
    9bc2:	46c0      	nop			; (mov r8, r8)
    9bc4:	4b0c      	ldr	r3, [pc, #48]	; (9bf8 <nvm_execute_command+0x10c>)
    9bc6:	4798      	blx	r3
    9bc8:	0003      	movs	r3, r0
    9bca:	001a      	movs	r2, r3
    9bcc:	2301      	movs	r3, #1
    9bce:	4053      	eors	r3, r2
    9bd0:	b2db      	uxtb	r3, r3
    9bd2:	2b00      	cmp	r3, #0
    9bd4:	d1f6      	bne.n	9bc4 <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
    9bd6:	697b      	ldr	r3, [r7, #20]
    9bd8:	693a      	ldr	r2, [r7, #16]
    9bda:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    9bdc:	2300      	movs	r3, #0
}
    9bde:	0018      	movs	r0, r3
    9be0:	46bd      	mov	sp, r7
    9be2:	b006      	add	sp, #24
    9be4:	bd80      	pop	{r7, pc}
    9be6:	46c0      	nop			; (mov r8, r8)
    9be8:	20000248 	.word	0x20000248
    9bec:	00803fff 	.word	0x00803fff
    9bf0:	00806000 	.word	0x00806000
    9bf4:	41004000 	.word	0x41004000
    9bf8:	00009ac5 	.word	0x00009ac5
    9bfc:	00010820 	.word	0x00010820
    9c00:	ffffa500 	.word	0xffffa500

00009c04 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    9c04:	b580      	push	{r7, lr}
    9c06:	b088      	sub	sp, #32
    9c08:	af00      	add	r7, sp, #0
    9c0a:	60f8      	str	r0, [r7, #12]
    9c0c:	60b9      	str	r1, [r7, #8]
    9c0e:	1dbb      	adds	r3, r7, #6
    9c10:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    9c12:	4b4a      	ldr	r3, [pc, #296]	; (9d3c <nvm_write_buffer+0x138>)
    9c14:	881b      	ldrh	r3, [r3, #0]
    9c16:	001a      	movs	r2, r3
    9c18:	4b48      	ldr	r3, [pc, #288]	; (9d3c <nvm_write_buffer+0x138>)
    9c1a:	885b      	ldrh	r3, [r3, #2]
    9c1c:	435a      	muls	r2, r3
	if (destination_address >
    9c1e:	68fb      	ldr	r3, [r7, #12]
    9c20:	429a      	cmp	r2, r3
    9c22:	d201      	bcs.n	9c28 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    9c24:	2318      	movs	r3, #24
    9c26:	e084      	b.n	9d32 <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    9c28:	4b44      	ldr	r3, [pc, #272]	; (9d3c <nvm_write_buffer+0x138>)
    9c2a:	881b      	ldrh	r3, [r3, #0]
    9c2c:	3b01      	subs	r3, #1
    9c2e:	001a      	movs	r2, r3
    9c30:	68fb      	ldr	r3, [r7, #12]
    9c32:	4013      	ands	r3, r2
    9c34:	d001      	beq.n	9c3a <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
    9c36:	2318      	movs	r3, #24
    9c38:	e07b      	b.n	9d32 <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    9c3a:	4b40      	ldr	r3, [pc, #256]	; (9d3c <nvm_write_buffer+0x138>)
    9c3c:	881b      	ldrh	r3, [r3, #0]
    9c3e:	1dba      	adds	r2, r7, #6
    9c40:	8812      	ldrh	r2, [r2, #0]
    9c42:	429a      	cmp	r2, r3
    9c44:	d901      	bls.n	9c4a <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
    9c46:	2317      	movs	r3, #23
    9c48:	e073      	b.n	9d32 <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    9c4a:	4b3d      	ldr	r3, [pc, #244]	; (9d40 <nvm_write_buffer+0x13c>)
    9c4c:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    9c4e:	4b3d      	ldr	r3, [pc, #244]	; (9d44 <nvm_write_buffer+0x140>)
    9c50:	4798      	blx	r3
    9c52:	0003      	movs	r3, r0
    9c54:	001a      	movs	r2, r3
    9c56:	2301      	movs	r3, #1
    9c58:	4053      	eors	r3, r2
    9c5a:	b2db      	uxtb	r3, r3
    9c5c:	2b00      	cmp	r3, #0
    9c5e:	d001      	beq.n	9c64 <nvm_write_buffer+0x60>
		return STATUS_BUSY;
    9c60:	2305      	movs	r3, #5
    9c62:	e066      	b.n	9d32 <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    9c64:	697b      	ldr	r3, [r7, #20]
    9c66:	4a38      	ldr	r2, [pc, #224]	; (9d48 <nvm_write_buffer+0x144>)
    9c68:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    9c6a:	46c0      	nop			; (mov r8, r8)
    9c6c:	4b35      	ldr	r3, [pc, #212]	; (9d44 <nvm_write_buffer+0x140>)
    9c6e:	4798      	blx	r3
    9c70:	0003      	movs	r3, r0
    9c72:	001a      	movs	r2, r3
    9c74:	2301      	movs	r3, #1
    9c76:	4053      	eors	r3, r2
    9c78:	b2db      	uxtb	r3, r3
    9c7a:	2b00      	cmp	r3, #0
    9c7c:	d1f6      	bne.n	9c6c <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    9c7e:	697b      	ldr	r3, [r7, #20]
    9c80:	2220      	movs	r2, #32
    9c82:	32ff      	adds	r2, #255	; 0xff
    9c84:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
    9c86:	68fb      	ldr	r3, [r7, #12]
    9c88:	085b      	lsrs	r3, r3, #1
    9c8a:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    9c8c:	231a      	movs	r3, #26
    9c8e:	18fb      	adds	r3, r7, r3
    9c90:	2200      	movs	r2, #0
    9c92:	801a      	strh	r2, [r3, #0]
    9c94:	e032      	b.n	9cfc <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    9c96:	231a      	movs	r3, #26
    9c98:	18fb      	adds	r3, r7, r3
    9c9a:	881b      	ldrh	r3, [r3, #0]
    9c9c:	68ba      	ldr	r2, [r7, #8]
    9c9e:	18d3      	adds	r3, r2, r3
    9ca0:	781a      	ldrb	r2, [r3, #0]
    9ca2:	2318      	movs	r3, #24
    9ca4:	18fb      	adds	r3, r7, r3
    9ca6:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    9ca8:	231a      	movs	r3, #26
    9caa:	18fb      	adds	r3, r7, r3
    9cac:	881a      	ldrh	r2, [r3, #0]
    9cae:	1dbb      	adds	r3, r7, #6
    9cb0:	881b      	ldrh	r3, [r3, #0]
    9cb2:	3b01      	subs	r3, #1
    9cb4:	429a      	cmp	r2, r3
    9cb6:	da11      	bge.n	9cdc <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
    9cb8:	231a      	movs	r3, #26
    9cba:	18fb      	adds	r3, r7, r3
    9cbc:	881b      	ldrh	r3, [r3, #0]
    9cbe:	3301      	adds	r3, #1
    9cc0:	68ba      	ldr	r2, [r7, #8]
    9cc2:	18d3      	adds	r3, r2, r3
    9cc4:	781b      	ldrb	r3, [r3, #0]
    9cc6:	021b      	lsls	r3, r3, #8
    9cc8:	b21a      	sxth	r2, r3
    9cca:	2318      	movs	r3, #24
    9ccc:	18fb      	adds	r3, r7, r3
    9cce:	2100      	movs	r1, #0
    9cd0:	5e5b      	ldrsh	r3, [r3, r1]
    9cd2:	4313      	orrs	r3, r2
    9cd4:	b21a      	sxth	r2, r3
    9cd6:	2318      	movs	r3, #24
    9cd8:	18fb      	adds	r3, r7, r3
    9cda:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
    9cdc:	69fb      	ldr	r3, [r7, #28]
    9cde:	1c5a      	adds	r2, r3, #1
    9ce0:	61fa      	str	r2, [r7, #28]
    9ce2:	005b      	lsls	r3, r3, #1
    9ce4:	001a      	movs	r2, r3
    9ce6:	2318      	movs	r3, #24
    9ce8:	18fb      	adds	r3, r7, r3
    9cea:	881b      	ldrh	r3, [r3, #0]
    9cec:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    9cee:	231a      	movs	r3, #26
    9cf0:	18fb      	adds	r3, r7, r3
    9cf2:	221a      	movs	r2, #26
    9cf4:	18ba      	adds	r2, r7, r2
    9cf6:	8812      	ldrh	r2, [r2, #0]
    9cf8:	3202      	adds	r2, #2
    9cfa:	801a      	strh	r2, [r3, #0]
    9cfc:	231a      	movs	r3, #26
    9cfe:	18fa      	adds	r2, r7, r3
    9d00:	1dbb      	adds	r3, r7, #6
    9d02:	8812      	ldrh	r2, [r2, #0]
    9d04:	881b      	ldrh	r3, [r3, #0]
    9d06:	429a      	cmp	r2, r3
    9d08:	d3c5      	bcc.n	9c96 <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    9d0a:	4b0c      	ldr	r3, [pc, #48]	; (9d3c <nvm_write_buffer+0x138>)
    9d0c:	791b      	ldrb	r3, [r3, #4]
    9d0e:	2201      	movs	r2, #1
    9d10:	4053      	eors	r3, r2
    9d12:	b2db      	uxtb	r3, r3
    9d14:	2b00      	cmp	r3, #0
    9d16:	d00b      	beq.n	9d30 <nvm_write_buffer+0x12c>
    9d18:	1dbb      	adds	r3, r7, #6
    9d1a:	881b      	ldrh	r3, [r3, #0]
    9d1c:	2b3f      	cmp	r3, #63	; 0x3f
    9d1e:	d807      	bhi.n	9d30 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    9d20:	68fb      	ldr	r3, [r7, #12]
    9d22:	2200      	movs	r2, #0
    9d24:	0019      	movs	r1, r3
    9d26:	2004      	movs	r0, #4
    9d28:	4b08      	ldr	r3, [pc, #32]	; (9d4c <nvm_write_buffer+0x148>)
    9d2a:	4798      	blx	r3
    9d2c:	0003      	movs	r3, r0
    9d2e:	e000      	b.n	9d32 <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    9d30:	2300      	movs	r3, #0
}
    9d32:	0018      	movs	r0, r3
    9d34:	46bd      	mov	sp, r7
    9d36:	b008      	add	sp, #32
    9d38:	bd80      	pop	{r7, pc}
    9d3a:	46c0      	nop			; (mov r8, r8)
    9d3c:	20000248 	.word	0x20000248
    9d40:	41004000 	.word	0x41004000
    9d44:	00009ac5 	.word	0x00009ac5
    9d48:	ffffa544 	.word	0xffffa544
    9d4c:	00009aed 	.word	0x00009aed

00009d50 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    9d50:	b580      	push	{r7, lr}
    9d52:	b084      	sub	sp, #16
    9d54:	af00      	add	r7, sp, #0
    9d56:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    9d58:	4b23      	ldr	r3, [pc, #140]	; (9de8 <nvm_erase_row+0x98>)
    9d5a:	881b      	ldrh	r3, [r3, #0]
    9d5c:	001a      	movs	r2, r3
    9d5e:	4b22      	ldr	r3, [pc, #136]	; (9de8 <nvm_erase_row+0x98>)
    9d60:	885b      	ldrh	r3, [r3, #2]
    9d62:	435a      	muls	r2, r3
	if (row_address >
    9d64:	687b      	ldr	r3, [r7, #4]
    9d66:	429a      	cmp	r2, r3
    9d68:	d201      	bcs.n	9d6e <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    9d6a:	2318      	movs	r3, #24
    9d6c:	e037      	b.n	9dde <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    9d6e:	4b1e      	ldr	r3, [pc, #120]	; (9de8 <nvm_erase_row+0x98>)
    9d70:	881b      	ldrh	r3, [r3, #0]
    9d72:	009b      	lsls	r3, r3, #2
    9d74:	3b01      	subs	r3, #1
    9d76:	001a      	movs	r2, r3
    9d78:	687b      	ldr	r3, [r7, #4]
    9d7a:	4013      	ands	r3, r2
    9d7c:	d001      	beq.n	9d82 <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
    9d7e:	2318      	movs	r3, #24
    9d80:	e02d      	b.n	9dde <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    9d82:	4b1a      	ldr	r3, [pc, #104]	; (9dec <nvm_erase_row+0x9c>)
    9d84:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    9d86:	4b1a      	ldr	r3, [pc, #104]	; (9df0 <nvm_erase_row+0xa0>)
    9d88:	4798      	blx	r3
    9d8a:	0003      	movs	r3, r0
    9d8c:	001a      	movs	r2, r3
    9d8e:	2301      	movs	r3, #1
    9d90:	4053      	eors	r3, r2
    9d92:	b2db      	uxtb	r3, r3
    9d94:	2b00      	cmp	r3, #0
    9d96:	d001      	beq.n	9d9c <nvm_erase_row+0x4c>
		return STATUS_BUSY;
    9d98:	2305      	movs	r3, #5
    9d9a:	e020      	b.n	9dde <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    9d9c:	68fb      	ldr	r3, [r7, #12]
    9d9e:	2220      	movs	r2, #32
    9da0:	32ff      	adds	r2, #255	; 0xff
    9da2:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    9da4:	687b      	ldr	r3, [r7, #4]
    9da6:	089b      	lsrs	r3, r3, #2
    9da8:	005a      	lsls	r2, r3, #1
    9daa:	68fb      	ldr	r3, [r7, #12]
    9dac:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    9dae:	68fb      	ldr	r3, [r7, #12]
    9db0:	4a10      	ldr	r2, [pc, #64]	; (9df4 <nvm_erase_row+0xa4>)
    9db2:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
    9db4:	46c0      	nop			; (mov r8, r8)
    9db6:	4b0e      	ldr	r3, [pc, #56]	; (9df0 <nvm_erase_row+0xa0>)
    9db8:	4798      	blx	r3
    9dba:	0003      	movs	r3, r0
    9dbc:	001a      	movs	r2, r3
    9dbe:	2301      	movs	r3, #1
    9dc0:	4053      	eors	r3, r2
    9dc2:	b2db      	uxtb	r3, r3
    9dc4:	2b00      	cmp	r3, #0
    9dc6:	d1f6      	bne.n	9db6 <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    9dc8:	68fb      	ldr	r3, [r7, #12]
    9dca:	8b1b      	ldrh	r3, [r3, #24]
    9dcc:	b29b      	uxth	r3, r3
    9dce:	b2db      	uxtb	r3, r3
    9dd0:	001a      	movs	r2, r3
    9dd2:	231c      	movs	r3, #28
    9dd4:	4013      	ands	r3, r2
    9dd6:	d001      	beq.n	9ddc <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
    9dd8:	2304      	movs	r3, #4
    9dda:	e000      	b.n	9dde <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
    9ddc:	2300      	movs	r3, #0
}
    9dde:	0018      	movs	r0, r3
    9de0:	46bd      	mov	sp, r7
    9de2:	b004      	add	sp, #16
    9de4:	bd80      	pop	{r7, pc}
    9de6:	46c0      	nop			; (mov r8, r8)
    9de8:	20000248 	.word	0x20000248
    9dec:	41004000 	.word	0x41004000
    9df0:	00009ac5 	.word	0x00009ac5
    9df4:	ffffa502 	.word	0xffffa502

00009df8 <system_pinmux_get_config_defaults>:
{
    9df8:	b580      	push	{r7, lr}
    9dfa:	b082      	sub	sp, #8
    9dfc:	af00      	add	r7, sp, #0
    9dfe:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    9e00:	687b      	ldr	r3, [r7, #4]
    9e02:	2280      	movs	r2, #128	; 0x80
    9e04:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9e06:	687b      	ldr	r3, [r7, #4]
    9e08:	2200      	movs	r2, #0
    9e0a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    9e0c:	687b      	ldr	r3, [r7, #4]
    9e0e:	2201      	movs	r2, #1
    9e10:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    9e12:	687b      	ldr	r3, [r7, #4]
    9e14:	2200      	movs	r2, #0
    9e16:	70da      	strb	r2, [r3, #3]
}
    9e18:	46c0      	nop			; (mov r8, r8)
    9e1a:	46bd      	mov	sp, r7
    9e1c:	b002      	add	sp, #8
    9e1e:	bd80      	pop	{r7, pc}

00009e20 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    9e20:	b580      	push	{r7, lr}
    9e22:	b084      	sub	sp, #16
    9e24:	af00      	add	r7, sp, #0
    9e26:	0002      	movs	r2, r0
    9e28:	6039      	str	r1, [r7, #0]
    9e2a:	1dfb      	adds	r3, r7, #7
    9e2c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    9e2e:	230c      	movs	r3, #12
    9e30:	18fb      	adds	r3, r7, r3
    9e32:	0018      	movs	r0, r3
    9e34:	4b10      	ldr	r3, [pc, #64]	; (9e78 <port_pin_set_config+0x58>)
    9e36:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    9e38:	230c      	movs	r3, #12
    9e3a:	18fb      	adds	r3, r7, r3
    9e3c:	2280      	movs	r2, #128	; 0x80
    9e3e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    9e40:	683b      	ldr	r3, [r7, #0]
    9e42:	781a      	ldrb	r2, [r3, #0]
    9e44:	230c      	movs	r3, #12
    9e46:	18fb      	adds	r3, r7, r3
    9e48:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    9e4a:	683b      	ldr	r3, [r7, #0]
    9e4c:	785a      	ldrb	r2, [r3, #1]
    9e4e:	230c      	movs	r3, #12
    9e50:	18fb      	adds	r3, r7, r3
    9e52:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    9e54:	683b      	ldr	r3, [r7, #0]
    9e56:	789a      	ldrb	r2, [r3, #2]
    9e58:	230c      	movs	r3, #12
    9e5a:	18fb      	adds	r3, r7, r3
    9e5c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    9e5e:	230c      	movs	r3, #12
    9e60:	18fa      	adds	r2, r7, r3
    9e62:	1dfb      	adds	r3, r7, #7
    9e64:	781b      	ldrb	r3, [r3, #0]
    9e66:	0011      	movs	r1, r2
    9e68:	0018      	movs	r0, r3
    9e6a:	4b04      	ldr	r3, [pc, #16]	; (9e7c <port_pin_set_config+0x5c>)
    9e6c:	4798      	blx	r3
}
    9e6e:	46c0      	nop			; (mov r8, r8)
    9e70:	46bd      	mov	sp, r7
    9e72:	b004      	add	sp, #16
    9e74:	bd80      	pop	{r7, pc}
    9e76:	46c0      	nop			; (mov r8, r8)
    9e78:	00009df9 	.word	0x00009df9
    9e7c:	0000c8ed 	.word	0x0000c8ed

00009e80 <system_gclk_chan_get_config_defaults>:
{
    9e80:	b580      	push	{r7, lr}
    9e82:	b082      	sub	sp, #8
    9e84:	af00      	add	r7, sp, #0
    9e86:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    9e88:	687b      	ldr	r3, [r7, #4]
    9e8a:	2200      	movs	r2, #0
    9e8c:	701a      	strb	r2, [r3, #0]
}
    9e8e:	46c0      	nop			; (mov r8, r8)
    9e90:	46bd      	mov	sp, r7
    9e92:	b002      	add	sp, #8
    9e94:	bd80      	pop	{r7, pc}

00009e96 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    9e96:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e98:	b08d      	sub	sp, #52	; 0x34
    9e9a:	af00      	add	r7, sp, #0
    9e9c:	60b8      	str	r0, [r7, #8]
    9e9e:	60f9      	str	r1, [r7, #12]
    9ea0:	603a      	str	r2, [r7, #0]
    9ea2:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    9ea4:	2300      	movs	r3, #0
    9ea6:	2400      	movs	r4, #0
    9ea8:	623b      	str	r3, [r7, #32]
    9eaa:	627c      	str	r4, [r7, #36]	; 0x24
    9eac:	2300      	movs	r3, #0
    9eae:	2400      	movs	r4, #0
    9eb0:	61bb      	str	r3, [r7, #24]
    9eb2:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    9eb4:	233f      	movs	r3, #63	; 0x3f
    9eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    9eb8:	e053      	b.n	9f62 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    9eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9ebc:	3b20      	subs	r3, #32
    9ebe:	2b00      	cmp	r3, #0
    9ec0:	db04      	blt.n	9ecc <long_division+0x36>
    9ec2:	2201      	movs	r2, #1
    9ec4:	409a      	lsls	r2, r3
    9ec6:	0013      	movs	r3, r2
    9ec8:	617b      	str	r3, [r7, #20]
    9eca:	e00b      	b.n	9ee4 <long_division+0x4e>
    9ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9ece:	2220      	movs	r2, #32
    9ed0:	1ad3      	subs	r3, r2, r3
    9ed2:	2201      	movs	r2, #1
    9ed4:	40da      	lsrs	r2, r3
    9ed6:	0013      	movs	r3, r2
    9ed8:	2100      	movs	r1, #0
    9eda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9edc:	4091      	lsls	r1, r2
    9ede:	000a      	movs	r2, r1
    9ee0:	4313      	orrs	r3, r2
    9ee2:	617b      	str	r3, [r7, #20]
    9ee4:	2201      	movs	r2, #1
    9ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9ee8:	409a      	lsls	r2, r3
    9eea:	0013      	movs	r3, r2
    9eec:	613b      	str	r3, [r7, #16]

		r = r << 1;
    9eee:	69bb      	ldr	r3, [r7, #24]
    9ef0:	69fc      	ldr	r4, [r7, #28]
    9ef2:	18db      	adds	r3, r3, r3
    9ef4:	4164      	adcs	r4, r4
    9ef6:	61bb      	str	r3, [r7, #24]
    9ef8:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    9efa:	68bb      	ldr	r3, [r7, #8]
    9efc:	693a      	ldr	r2, [r7, #16]
    9efe:	401a      	ands	r2, r3
    9f00:	0015      	movs	r5, r2
    9f02:	68fb      	ldr	r3, [r7, #12]
    9f04:	697a      	ldr	r2, [r7, #20]
    9f06:	401a      	ands	r2, r3
    9f08:	0016      	movs	r6, r2
    9f0a:	002b      	movs	r3, r5
    9f0c:	4333      	orrs	r3, r6
    9f0e:	d007      	beq.n	9f20 <long_division+0x8a>
			r |= 0x01;
    9f10:	69bb      	ldr	r3, [r7, #24]
    9f12:	2201      	movs	r2, #1
    9f14:	4313      	orrs	r3, r2
    9f16:	61bb      	str	r3, [r7, #24]
    9f18:	69fb      	ldr	r3, [r7, #28]
    9f1a:	2200      	movs	r2, #0
    9f1c:	4313      	orrs	r3, r2
    9f1e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    9f20:	687a      	ldr	r2, [r7, #4]
    9f22:	69fb      	ldr	r3, [r7, #28]
    9f24:	429a      	cmp	r2, r3
    9f26:	d819      	bhi.n	9f5c <long_division+0xc6>
    9f28:	687a      	ldr	r2, [r7, #4]
    9f2a:	69fb      	ldr	r3, [r7, #28]
    9f2c:	429a      	cmp	r2, r3
    9f2e:	d103      	bne.n	9f38 <long_division+0xa2>
    9f30:	683a      	ldr	r2, [r7, #0]
    9f32:	69bb      	ldr	r3, [r7, #24]
    9f34:	429a      	cmp	r2, r3
    9f36:	d811      	bhi.n	9f5c <long_division+0xc6>
			r = r - d;
    9f38:	69b9      	ldr	r1, [r7, #24]
    9f3a:	69fa      	ldr	r2, [r7, #28]
    9f3c:	683b      	ldr	r3, [r7, #0]
    9f3e:	687c      	ldr	r4, [r7, #4]
    9f40:	1ac9      	subs	r1, r1, r3
    9f42:	41a2      	sbcs	r2, r4
    9f44:	000b      	movs	r3, r1
    9f46:	0014      	movs	r4, r2
    9f48:	61bb      	str	r3, [r7, #24]
    9f4a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    9f4c:	6a3a      	ldr	r2, [r7, #32]
    9f4e:	693b      	ldr	r3, [r7, #16]
    9f50:	4313      	orrs	r3, r2
    9f52:	623b      	str	r3, [r7, #32]
    9f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9f56:	697b      	ldr	r3, [r7, #20]
    9f58:	4313      	orrs	r3, r2
    9f5a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    9f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9f5e:	3b01      	subs	r3, #1
    9f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    9f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9f64:	2b00      	cmp	r3, #0
    9f66:	daa8      	bge.n	9eba <long_division+0x24>
		}
	}

	return q;
    9f68:	6a3b      	ldr	r3, [r7, #32]
    9f6a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    9f6c:	0018      	movs	r0, r3
    9f6e:	0021      	movs	r1, r4
    9f70:	46bd      	mov	sp, r7
    9f72:	b00d      	add	sp, #52	; 0x34
    9f74:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009f76 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    9f76:	b580      	push	{r7, lr}
    9f78:	b086      	sub	sp, #24
    9f7a:	af00      	add	r7, sp, #0
    9f7c:	60f8      	str	r0, [r7, #12]
    9f7e:	60b9      	str	r1, [r7, #8]
    9f80:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    9f82:	2316      	movs	r3, #22
    9f84:	18fb      	adds	r3, r7, r3
    9f86:	2200      	movs	r2, #0
    9f88:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    9f8a:	68bb      	ldr	r3, [r7, #8]
    9f8c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    9f8e:	68bb      	ldr	r3, [r7, #8]
    9f90:	085a      	lsrs	r2, r3, #1
    9f92:	68fb      	ldr	r3, [r7, #12]
    9f94:	429a      	cmp	r2, r3
    9f96:	d201      	bcs.n	9f9c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    9f98:	2340      	movs	r3, #64	; 0x40
    9f9a:	e026      	b.n	9fea <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    9f9c:	68bb      	ldr	r3, [r7, #8]
    9f9e:	085b      	lsrs	r3, r3, #1
    9fa0:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    9fa2:	e00a      	b.n	9fba <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    9fa4:	693a      	ldr	r2, [r7, #16]
    9fa6:	68fb      	ldr	r3, [r7, #12]
    9fa8:	1ad3      	subs	r3, r2, r3
    9faa:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    9fac:	2316      	movs	r3, #22
    9fae:	18fb      	adds	r3, r7, r3
    9fb0:	881a      	ldrh	r2, [r3, #0]
    9fb2:	2316      	movs	r3, #22
    9fb4:	18fb      	adds	r3, r7, r3
    9fb6:	3201      	adds	r2, #1
    9fb8:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    9fba:	693a      	ldr	r2, [r7, #16]
    9fbc:	68fb      	ldr	r3, [r7, #12]
    9fbe:	429a      	cmp	r2, r3
    9fc0:	d2f0      	bcs.n	9fa4 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    9fc2:	2316      	movs	r3, #22
    9fc4:	18fb      	adds	r3, r7, r3
    9fc6:	2216      	movs	r2, #22
    9fc8:	18ba      	adds	r2, r7, r2
    9fca:	8812      	ldrh	r2, [r2, #0]
    9fcc:	3a01      	subs	r2, #1
    9fce:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    9fd0:	2316      	movs	r3, #22
    9fd2:	18fb      	adds	r3, r7, r3
    9fd4:	881b      	ldrh	r3, [r3, #0]
    9fd6:	2bff      	cmp	r3, #255	; 0xff
    9fd8:	d901      	bls.n	9fde <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    9fda:	2340      	movs	r3, #64	; 0x40
    9fdc:	e005      	b.n	9fea <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    9fde:	687b      	ldr	r3, [r7, #4]
    9fe0:	2216      	movs	r2, #22
    9fe2:	18ba      	adds	r2, r7, r2
    9fe4:	8812      	ldrh	r2, [r2, #0]
    9fe6:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    9fe8:	2300      	movs	r3, #0
	}
}
    9fea:	0018      	movs	r0, r3
    9fec:	46bd      	mov	sp, r7
    9fee:	b006      	add	sp, #24
    9ff0:	bd80      	pop	{r7, pc}
	...

00009ff4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    9ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ff6:	b0a1      	sub	sp, #132	; 0x84
    9ff8:	af00      	add	r7, sp, #0
    9ffa:	64f8      	str	r0, [r7, #76]	; 0x4c
    9ffc:	64b9      	str	r1, [r7, #72]	; 0x48
    9ffe:	647a      	str	r2, [r7, #68]	; 0x44
    a000:	2243      	movs	r2, #67	; 0x43
    a002:	18ba      	adds	r2, r7, r2
    a004:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    a006:	2300      	movs	r3, #0
    a008:	2400      	movs	r4, #0
    a00a:	673b      	str	r3, [r7, #112]	; 0x70
    a00c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    a00e:	2300      	movs	r3, #0
    a010:	2400      	movs	r4, #0
    a012:	66bb      	str	r3, [r7, #104]	; 0x68
    a014:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    a016:	2300      	movs	r3, #0
    a018:	2400      	movs	r4, #0
    a01a:	67bb      	str	r3, [r7, #120]	; 0x78
    a01c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    a01e:	2300      	movs	r3, #0
    a020:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    a022:	2358      	movs	r3, #88	; 0x58
    a024:	2240      	movs	r2, #64	; 0x40
    a026:	4694      	mov	ip, r2
    a028:	44bc      	add	ip, r7
    a02a:	4463      	add	r3, ip
    a02c:	781a      	ldrb	r2, [r3, #0]
    a02e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a030:	435a      	muls	r2, r3
    a032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a034:	429a      	cmp	r2, r3
    a036:	d901      	bls.n	a03c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    a038:	2340      	movs	r3, #64	; 0x40
    a03a:	e0b3      	b.n	a1a4 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    a03c:	2343      	movs	r3, #67	; 0x43
    a03e:	18fb      	adds	r3, r7, r3
    a040:	781b      	ldrb	r3, [r3, #0]
    a042:	2b00      	cmp	r3, #0
    a044:	d13d      	bne.n	a0c2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    a046:	2358      	movs	r3, #88	; 0x58
    a048:	2240      	movs	r2, #64	; 0x40
    a04a:	4694      	mov	ip, r2
    a04c:	44bc      	add	ip, r7
    a04e:	4463      	add	r3, ip
    a050:	781b      	ldrb	r3, [r3, #0]
    a052:	b2db      	uxtb	r3, r3
    a054:	613b      	str	r3, [r7, #16]
    a056:	2300      	movs	r3, #0
    a058:	617b      	str	r3, [r7, #20]
    a05a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a05c:	60bb      	str	r3, [r7, #8]
    a05e:	2300      	movs	r3, #0
    a060:	60fb      	str	r3, [r7, #12]
    a062:	4c52      	ldr	r4, [pc, #328]	; (a1ac <_sercom_get_async_baud_val+0x1b8>)
    a064:	68ba      	ldr	r2, [r7, #8]
    a066:	68fb      	ldr	r3, [r7, #12]
    a068:	6938      	ldr	r0, [r7, #16]
    a06a:	6979      	ldr	r1, [r7, #20]
    a06c:	47a0      	blx	r4
    a06e:	0003      	movs	r3, r0
    a070:	000c      	movs	r4, r1
    a072:	001b      	movs	r3, r3
    a074:	65fb      	str	r3, [r7, #92]	; 0x5c
    a076:	2300      	movs	r3, #0
    a078:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    a07a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a07c:	603b      	str	r3, [r7, #0]
    a07e:	2300      	movs	r3, #0
    a080:	607b      	str	r3, [r7, #4]
    a082:	6db8      	ldr	r0, [r7, #88]	; 0x58
    a084:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    a086:	683a      	ldr	r2, [r7, #0]
    a088:	687b      	ldr	r3, [r7, #4]
    a08a:	4c49      	ldr	r4, [pc, #292]	; (a1b0 <_sercom_get_async_baud_val+0x1bc>)
    a08c:	47a0      	blx	r4
    a08e:	0003      	movs	r3, r0
    a090:	000c      	movs	r4, r1
    a092:	673b      	str	r3, [r7, #112]	; 0x70
    a094:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    a096:	2100      	movs	r1, #0
    a098:	2201      	movs	r2, #1
    a09a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    a09c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    a09e:	1ac9      	subs	r1, r1, r3
    a0a0:	41a2      	sbcs	r2, r4
    a0a2:	000b      	movs	r3, r1
    a0a4:	0014      	movs	r4, r2
    a0a6:	66bb      	str	r3, [r7, #104]	; 0x68
    a0a8:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    a0aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    a0ac:	0c1b      	lsrs	r3, r3, #16
    a0ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    a0b0:	0416      	lsls	r6, r2, #16
    a0b2:	431e      	orrs	r6, r3
    a0b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    a0b6:	041d      	lsls	r5, r3, #16
    a0b8:	0033      	movs	r3, r6
    a0ba:	67bb      	str	r3, [r7, #120]	; 0x78
    a0bc:	2300      	movs	r3, #0
    a0be:	67fb      	str	r3, [r7, #124]	; 0x7c
    a0c0:	e06a      	b.n	a198 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    a0c2:	2343      	movs	r3, #67	; 0x43
    a0c4:	18fb      	adds	r3, r7, r3
    a0c6:	781b      	ldrb	r3, [r3, #0]
    a0c8:	2b01      	cmp	r3, #1
    a0ca:	d165      	bne.n	a198 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    a0cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a0ce:	633b      	str	r3, [r7, #48]	; 0x30
    a0d0:	2300      	movs	r3, #0
    a0d2:	637b      	str	r3, [r7, #52]	; 0x34
    a0d4:	2358      	movs	r3, #88	; 0x58
    a0d6:	2240      	movs	r2, #64	; 0x40
    a0d8:	4694      	mov	ip, r2
    a0da:	44bc      	add	ip, r7
    a0dc:	4463      	add	r3, ip
    a0de:	781b      	ldrb	r3, [r3, #0]
    a0e0:	b2db      	uxtb	r3, r3
    a0e2:	62bb      	str	r3, [r7, #40]	; 0x28
    a0e4:	2300      	movs	r3, #0
    a0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    a0e8:	4c30      	ldr	r4, [pc, #192]	; (a1ac <_sercom_get_async_baud_val+0x1b8>)
    a0ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a0ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
    a0f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
    a0f2:	47a0      	blx	r4
    a0f4:	0003      	movs	r3, r0
    a0f6:	000c      	movs	r4, r1
    a0f8:	65bb      	str	r3, [r7, #88]	; 0x58
    a0fa:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    a0fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a0fe:	623b      	str	r3, [r7, #32]
    a100:	2300      	movs	r3, #0
    a102:	627b      	str	r3, [r7, #36]	; 0x24
    a104:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a106:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    a108:	001a      	movs	r2, r3
    a10a:	0023      	movs	r3, r4
    a10c:	6a38      	ldr	r0, [r7, #32]
    a10e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    a110:	4c27      	ldr	r4, [pc, #156]	; (a1b0 <_sercom_get_async_baud_val+0x1bc>)
    a112:	47a0      	blx	r4
    a114:	0003      	movs	r3, r0
    a116:	000c      	movs	r4, r1
    a118:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    a11a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    a11c:	2380      	movs	r3, #128	; 0x80
    a11e:	019b      	lsls	r3, r3, #6
    a120:	429a      	cmp	r2, r3
    a122:	d901      	bls.n	a128 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    a124:	2340      	movs	r3, #64	; 0x40
    a126:	e03d      	b.n	a1a4 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    a128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a12a:	61bb      	str	r3, [r7, #24]
    a12c:	2300      	movs	r3, #0
    a12e:	61fb      	str	r3, [r7, #28]
    a130:	69b9      	ldr	r1, [r7, #24]
    a132:	69fa      	ldr	r2, [r7, #28]
    a134:	000b      	movs	r3, r1
    a136:	0f5b      	lsrs	r3, r3, #29
    a138:	0010      	movs	r0, r2
    a13a:	00c0      	lsls	r0, r0, #3
    a13c:	63f8      	str	r0, [r7, #60]	; 0x3c
    a13e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    a140:	4318      	orrs	r0, r3
    a142:	63f8      	str	r0, [r7, #60]	; 0x3c
    a144:	000b      	movs	r3, r1
    a146:	00db      	lsls	r3, r3, #3
    a148:	63bb      	str	r3, [r7, #56]	; 0x38
    a14a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a14c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    a14e:	001a      	movs	r2, r3
    a150:	0023      	movs	r3, r4
    a152:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    a154:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    a156:	4c16      	ldr	r4, [pc, #88]	; (a1b0 <_sercom_get_async_baud_val+0x1bc>)
    a158:	47a0      	blx	r4
    a15a:	0003      	movs	r3, r0
    a15c:	000c      	movs	r4, r1
    a15e:	65bb      	str	r3, [r7, #88]	; 0x58
    a160:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    a162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a164:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    a166:	b2d9      	uxtb	r1, r3
    a168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    a16a:	b2db      	uxtb	r3, r3
    a16c:	00db      	lsls	r3, r3, #3
    a16e:	b2da      	uxtb	r2, r3
    a170:	2317      	movs	r3, #23
    a172:	2040      	movs	r0, #64	; 0x40
    a174:	4684      	mov	ip, r0
    a176:	44bc      	add	ip, r7
    a178:	4463      	add	r3, ip
    a17a:	1a8a      	subs	r2, r1, r2
    a17c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    a17e:	2317      	movs	r3, #23
    a180:	2240      	movs	r2, #64	; 0x40
    a182:	4694      	mov	ip, r2
    a184:	44bc      	add	ip, r7
    a186:	4463      	add	r3, ip
    a188:	781b      	ldrb	r3, [r3, #0]
    a18a:	035b      	lsls	r3, r3, #13
    a18c:	001a      	movs	r2, r3
    a18e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    a190:	4313      	orrs	r3, r2
    a192:	67bb      	str	r3, [r7, #120]	; 0x78
    a194:	2300      	movs	r3, #0
    a196:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    a198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    a19a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    a19c:	b29a      	uxth	r2, r3
    a19e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    a1a0:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    a1a2:	2300      	movs	r3, #0
}
    a1a4:	0018      	movs	r0, r3
    a1a6:	46bd      	mov	sp, r7
    a1a8:	b021      	add	sp, #132	; 0x84
    a1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a1ac:	0000dd45 	.word	0x0000dd45
    a1b0:	00009e97 	.word	0x00009e97

0000a1b4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    a1b4:	b580      	push	{r7, lr}
    a1b6:	b084      	sub	sp, #16
    a1b8:	af00      	add	r7, sp, #0
    a1ba:	0002      	movs	r2, r0
    a1bc:	1dfb      	adds	r3, r7, #7
    a1be:	701a      	strb	r2, [r3, #0]
    a1c0:	1dbb      	adds	r3, r7, #6
    a1c2:	1c0a      	adds	r2, r1, #0
    a1c4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    a1c6:	4b1a      	ldr	r3, [pc, #104]	; (a230 <sercom_set_gclk_generator+0x7c>)
    a1c8:	781b      	ldrb	r3, [r3, #0]
    a1ca:	2201      	movs	r2, #1
    a1cc:	4053      	eors	r3, r2
    a1ce:	b2db      	uxtb	r3, r3
    a1d0:	2b00      	cmp	r3, #0
    a1d2:	d103      	bne.n	a1dc <sercom_set_gclk_generator+0x28>
    a1d4:	1dbb      	adds	r3, r7, #6
    a1d6:	781b      	ldrb	r3, [r3, #0]
    a1d8:	2b00      	cmp	r3, #0
    a1da:	d01b      	beq.n	a214 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    a1dc:	230c      	movs	r3, #12
    a1de:	18fb      	adds	r3, r7, r3
    a1e0:	0018      	movs	r0, r3
    a1e2:	4b14      	ldr	r3, [pc, #80]	; (a234 <sercom_set_gclk_generator+0x80>)
    a1e4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    a1e6:	230c      	movs	r3, #12
    a1e8:	18fb      	adds	r3, r7, r3
    a1ea:	1dfa      	adds	r2, r7, #7
    a1ec:	7812      	ldrb	r2, [r2, #0]
    a1ee:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    a1f0:	230c      	movs	r3, #12
    a1f2:	18fb      	adds	r3, r7, r3
    a1f4:	0019      	movs	r1, r3
    a1f6:	2013      	movs	r0, #19
    a1f8:	4b0f      	ldr	r3, [pc, #60]	; (a238 <sercom_set_gclk_generator+0x84>)
    a1fa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    a1fc:	2013      	movs	r0, #19
    a1fe:	4b0f      	ldr	r3, [pc, #60]	; (a23c <sercom_set_gclk_generator+0x88>)
    a200:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    a202:	4b0b      	ldr	r3, [pc, #44]	; (a230 <sercom_set_gclk_generator+0x7c>)
    a204:	1dfa      	adds	r2, r7, #7
    a206:	7812      	ldrb	r2, [r2, #0]
    a208:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    a20a:	4b09      	ldr	r3, [pc, #36]	; (a230 <sercom_set_gclk_generator+0x7c>)
    a20c:	2201      	movs	r2, #1
    a20e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    a210:	2300      	movs	r3, #0
    a212:	e008      	b.n	a226 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    a214:	4b06      	ldr	r3, [pc, #24]	; (a230 <sercom_set_gclk_generator+0x7c>)
    a216:	785b      	ldrb	r3, [r3, #1]
    a218:	1dfa      	adds	r2, r7, #7
    a21a:	7812      	ldrb	r2, [r2, #0]
    a21c:	429a      	cmp	r2, r3
    a21e:	d101      	bne.n	a224 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    a220:	2300      	movs	r3, #0
    a222:	e000      	b.n	a226 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    a224:	231d      	movs	r3, #29
}
    a226:	0018      	movs	r0, r3
    a228:	46bd      	mov	sp, r7
    a22a:	b004      	add	sp, #16
    a22c:	bd80      	pop	{r7, pc}
    a22e:	46c0      	nop			; (mov r8, r8)
    a230:	20000250 	.word	0x20000250
    a234:	00009e81 	.word	0x00009e81
    a238:	0000c601 	.word	0x0000c601
    a23c:	0000c645 	.word	0x0000c645

0000a240 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    a240:	b580      	push	{r7, lr}
    a242:	b082      	sub	sp, #8
    a244:	af00      	add	r7, sp, #0
    a246:	6078      	str	r0, [r7, #4]
    a248:	000a      	movs	r2, r1
    a24a:	1cfb      	adds	r3, r7, #3
    a24c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    a24e:	687b      	ldr	r3, [r7, #4]
    a250:	4a4d      	ldr	r2, [pc, #308]	; (a388 <_sercom_get_default_pad+0x148>)
    a252:	4293      	cmp	r3, r2
    a254:	d03f      	beq.n	a2d6 <_sercom_get_default_pad+0x96>
    a256:	4a4c      	ldr	r2, [pc, #304]	; (a388 <_sercom_get_default_pad+0x148>)
    a258:	4293      	cmp	r3, r2
    a25a:	d806      	bhi.n	a26a <_sercom_get_default_pad+0x2a>
    a25c:	4a4b      	ldr	r2, [pc, #300]	; (a38c <_sercom_get_default_pad+0x14c>)
    a25e:	4293      	cmp	r3, r2
    a260:	d00f      	beq.n	a282 <_sercom_get_default_pad+0x42>
    a262:	4a4b      	ldr	r2, [pc, #300]	; (a390 <_sercom_get_default_pad+0x150>)
    a264:	4293      	cmp	r3, r2
    a266:	d021      	beq.n	a2ac <_sercom_get_default_pad+0x6c>
    a268:	e089      	b.n	a37e <_sercom_get_default_pad+0x13e>
    a26a:	4a4a      	ldr	r2, [pc, #296]	; (a394 <_sercom_get_default_pad+0x154>)
    a26c:	4293      	cmp	r3, r2
    a26e:	d100      	bne.n	a272 <_sercom_get_default_pad+0x32>
    a270:	e05b      	b.n	a32a <_sercom_get_default_pad+0xea>
    a272:	4a49      	ldr	r2, [pc, #292]	; (a398 <_sercom_get_default_pad+0x158>)
    a274:	4293      	cmp	r3, r2
    a276:	d100      	bne.n	a27a <_sercom_get_default_pad+0x3a>
    a278:	e06c      	b.n	a354 <_sercom_get_default_pad+0x114>
    a27a:	4a48      	ldr	r2, [pc, #288]	; (a39c <_sercom_get_default_pad+0x15c>)
    a27c:	4293      	cmp	r3, r2
    a27e:	d03f      	beq.n	a300 <_sercom_get_default_pad+0xc0>
    a280:	e07d      	b.n	a37e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    a282:	1cfb      	adds	r3, r7, #3
    a284:	781b      	ldrb	r3, [r3, #0]
    a286:	2b01      	cmp	r3, #1
    a288:	d00a      	beq.n	a2a0 <_sercom_get_default_pad+0x60>
    a28a:	dc02      	bgt.n	a292 <_sercom_get_default_pad+0x52>
    a28c:	2b00      	cmp	r3, #0
    a28e:	d005      	beq.n	a29c <_sercom_get_default_pad+0x5c>
    a290:	e075      	b.n	a37e <_sercom_get_default_pad+0x13e>
    a292:	2b02      	cmp	r3, #2
    a294:	d006      	beq.n	a2a4 <_sercom_get_default_pad+0x64>
    a296:	2b03      	cmp	r3, #3
    a298:	d006      	beq.n	a2a8 <_sercom_get_default_pad+0x68>
    a29a:	e070      	b.n	a37e <_sercom_get_default_pad+0x13e>
    a29c:	4b40      	ldr	r3, [pc, #256]	; (a3a0 <_sercom_get_default_pad+0x160>)
    a29e:	e06f      	b.n	a380 <_sercom_get_default_pad+0x140>
    a2a0:	4b40      	ldr	r3, [pc, #256]	; (a3a4 <_sercom_get_default_pad+0x164>)
    a2a2:	e06d      	b.n	a380 <_sercom_get_default_pad+0x140>
    a2a4:	4b40      	ldr	r3, [pc, #256]	; (a3a8 <_sercom_get_default_pad+0x168>)
    a2a6:	e06b      	b.n	a380 <_sercom_get_default_pad+0x140>
    a2a8:	4b40      	ldr	r3, [pc, #256]	; (a3ac <_sercom_get_default_pad+0x16c>)
    a2aa:	e069      	b.n	a380 <_sercom_get_default_pad+0x140>
    a2ac:	1cfb      	adds	r3, r7, #3
    a2ae:	781b      	ldrb	r3, [r3, #0]
    a2b0:	2b01      	cmp	r3, #1
    a2b2:	d00a      	beq.n	a2ca <_sercom_get_default_pad+0x8a>
    a2b4:	dc02      	bgt.n	a2bc <_sercom_get_default_pad+0x7c>
    a2b6:	2b00      	cmp	r3, #0
    a2b8:	d005      	beq.n	a2c6 <_sercom_get_default_pad+0x86>
    a2ba:	e060      	b.n	a37e <_sercom_get_default_pad+0x13e>
    a2bc:	2b02      	cmp	r3, #2
    a2be:	d006      	beq.n	a2ce <_sercom_get_default_pad+0x8e>
    a2c0:	2b03      	cmp	r3, #3
    a2c2:	d006      	beq.n	a2d2 <_sercom_get_default_pad+0x92>
    a2c4:	e05b      	b.n	a37e <_sercom_get_default_pad+0x13e>
    a2c6:	2303      	movs	r3, #3
    a2c8:	e05a      	b.n	a380 <_sercom_get_default_pad+0x140>
    a2ca:	4b39      	ldr	r3, [pc, #228]	; (a3b0 <_sercom_get_default_pad+0x170>)
    a2cc:	e058      	b.n	a380 <_sercom_get_default_pad+0x140>
    a2ce:	4b39      	ldr	r3, [pc, #228]	; (a3b4 <_sercom_get_default_pad+0x174>)
    a2d0:	e056      	b.n	a380 <_sercom_get_default_pad+0x140>
    a2d2:	4b39      	ldr	r3, [pc, #228]	; (a3b8 <_sercom_get_default_pad+0x178>)
    a2d4:	e054      	b.n	a380 <_sercom_get_default_pad+0x140>
    a2d6:	1cfb      	adds	r3, r7, #3
    a2d8:	781b      	ldrb	r3, [r3, #0]
    a2da:	2b01      	cmp	r3, #1
    a2dc:	d00a      	beq.n	a2f4 <_sercom_get_default_pad+0xb4>
    a2de:	dc02      	bgt.n	a2e6 <_sercom_get_default_pad+0xa6>
    a2e0:	2b00      	cmp	r3, #0
    a2e2:	d005      	beq.n	a2f0 <_sercom_get_default_pad+0xb0>
    a2e4:	e04b      	b.n	a37e <_sercom_get_default_pad+0x13e>
    a2e6:	2b02      	cmp	r3, #2
    a2e8:	d006      	beq.n	a2f8 <_sercom_get_default_pad+0xb8>
    a2ea:	2b03      	cmp	r3, #3
    a2ec:	d006      	beq.n	a2fc <_sercom_get_default_pad+0xbc>
    a2ee:	e046      	b.n	a37e <_sercom_get_default_pad+0x13e>
    a2f0:	4b32      	ldr	r3, [pc, #200]	; (a3bc <_sercom_get_default_pad+0x17c>)
    a2f2:	e045      	b.n	a380 <_sercom_get_default_pad+0x140>
    a2f4:	4b32      	ldr	r3, [pc, #200]	; (a3c0 <_sercom_get_default_pad+0x180>)
    a2f6:	e043      	b.n	a380 <_sercom_get_default_pad+0x140>
    a2f8:	4b32      	ldr	r3, [pc, #200]	; (a3c4 <_sercom_get_default_pad+0x184>)
    a2fa:	e041      	b.n	a380 <_sercom_get_default_pad+0x140>
    a2fc:	4b32      	ldr	r3, [pc, #200]	; (a3c8 <_sercom_get_default_pad+0x188>)
    a2fe:	e03f      	b.n	a380 <_sercom_get_default_pad+0x140>
    a300:	1cfb      	adds	r3, r7, #3
    a302:	781b      	ldrb	r3, [r3, #0]
    a304:	2b01      	cmp	r3, #1
    a306:	d00a      	beq.n	a31e <_sercom_get_default_pad+0xde>
    a308:	dc02      	bgt.n	a310 <_sercom_get_default_pad+0xd0>
    a30a:	2b00      	cmp	r3, #0
    a30c:	d005      	beq.n	a31a <_sercom_get_default_pad+0xda>
    a30e:	e036      	b.n	a37e <_sercom_get_default_pad+0x13e>
    a310:	2b02      	cmp	r3, #2
    a312:	d006      	beq.n	a322 <_sercom_get_default_pad+0xe2>
    a314:	2b03      	cmp	r3, #3
    a316:	d006      	beq.n	a326 <_sercom_get_default_pad+0xe6>
    a318:	e031      	b.n	a37e <_sercom_get_default_pad+0x13e>
    a31a:	4b2c      	ldr	r3, [pc, #176]	; (a3cc <_sercom_get_default_pad+0x18c>)
    a31c:	e030      	b.n	a380 <_sercom_get_default_pad+0x140>
    a31e:	4b2c      	ldr	r3, [pc, #176]	; (a3d0 <_sercom_get_default_pad+0x190>)
    a320:	e02e      	b.n	a380 <_sercom_get_default_pad+0x140>
    a322:	4b2c      	ldr	r3, [pc, #176]	; (a3d4 <_sercom_get_default_pad+0x194>)
    a324:	e02c      	b.n	a380 <_sercom_get_default_pad+0x140>
    a326:	4b2c      	ldr	r3, [pc, #176]	; (a3d8 <_sercom_get_default_pad+0x198>)
    a328:	e02a      	b.n	a380 <_sercom_get_default_pad+0x140>
    a32a:	1cfb      	adds	r3, r7, #3
    a32c:	781b      	ldrb	r3, [r3, #0]
    a32e:	2b01      	cmp	r3, #1
    a330:	d00a      	beq.n	a348 <_sercom_get_default_pad+0x108>
    a332:	dc02      	bgt.n	a33a <_sercom_get_default_pad+0xfa>
    a334:	2b00      	cmp	r3, #0
    a336:	d005      	beq.n	a344 <_sercom_get_default_pad+0x104>
    a338:	e021      	b.n	a37e <_sercom_get_default_pad+0x13e>
    a33a:	2b02      	cmp	r3, #2
    a33c:	d006      	beq.n	a34c <_sercom_get_default_pad+0x10c>
    a33e:	2b03      	cmp	r3, #3
    a340:	d006      	beq.n	a350 <_sercom_get_default_pad+0x110>
    a342:	e01c      	b.n	a37e <_sercom_get_default_pad+0x13e>
    a344:	4b25      	ldr	r3, [pc, #148]	; (a3dc <_sercom_get_default_pad+0x19c>)
    a346:	e01b      	b.n	a380 <_sercom_get_default_pad+0x140>
    a348:	4b25      	ldr	r3, [pc, #148]	; (a3e0 <_sercom_get_default_pad+0x1a0>)
    a34a:	e019      	b.n	a380 <_sercom_get_default_pad+0x140>
    a34c:	4b25      	ldr	r3, [pc, #148]	; (a3e4 <_sercom_get_default_pad+0x1a4>)
    a34e:	e017      	b.n	a380 <_sercom_get_default_pad+0x140>
    a350:	4b25      	ldr	r3, [pc, #148]	; (a3e8 <_sercom_get_default_pad+0x1a8>)
    a352:	e015      	b.n	a380 <_sercom_get_default_pad+0x140>
    a354:	1cfb      	adds	r3, r7, #3
    a356:	781b      	ldrb	r3, [r3, #0]
    a358:	2b01      	cmp	r3, #1
    a35a:	d00a      	beq.n	a372 <_sercom_get_default_pad+0x132>
    a35c:	dc02      	bgt.n	a364 <_sercom_get_default_pad+0x124>
    a35e:	2b00      	cmp	r3, #0
    a360:	d005      	beq.n	a36e <_sercom_get_default_pad+0x12e>
    a362:	e00c      	b.n	a37e <_sercom_get_default_pad+0x13e>
    a364:	2b02      	cmp	r3, #2
    a366:	d006      	beq.n	a376 <_sercom_get_default_pad+0x136>
    a368:	2b03      	cmp	r3, #3
    a36a:	d006      	beq.n	a37a <_sercom_get_default_pad+0x13a>
    a36c:	e007      	b.n	a37e <_sercom_get_default_pad+0x13e>
    a36e:	4b1f      	ldr	r3, [pc, #124]	; (a3ec <_sercom_get_default_pad+0x1ac>)
    a370:	e006      	b.n	a380 <_sercom_get_default_pad+0x140>
    a372:	4b1f      	ldr	r3, [pc, #124]	; (a3f0 <_sercom_get_default_pad+0x1b0>)
    a374:	e004      	b.n	a380 <_sercom_get_default_pad+0x140>
    a376:	4b1f      	ldr	r3, [pc, #124]	; (a3f4 <_sercom_get_default_pad+0x1b4>)
    a378:	e002      	b.n	a380 <_sercom_get_default_pad+0x140>
    a37a:	4b1f      	ldr	r3, [pc, #124]	; (a3f8 <_sercom_get_default_pad+0x1b8>)
    a37c:	e000      	b.n	a380 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    a37e:	2300      	movs	r3, #0
}
    a380:	0018      	movs	r0, r3
    a382:	46bd      	mov	sp, r7
    a384:	b002      	add	sp, #8
    a386:	bd80      	pop	{r7, pc}
    a388:	42001000 	.word	0x42001000
    a38c:	42000800 	.word	0x42000800
    a390:	42000c00 	.word	0x42000c00
    a394:	42001800 	.word	0x42001800
    a398:	42001c00 	.word	0x42001c00
    a39c:	42001400 	.word	0x42001400
    a3a0:	00040003 	.word	0x00040003
    a3a4:	00050003 	.word	0x00050003
    a3a8:	00060003 	.word	0x00060003
    a3ac:	00070003 	.word	0x00070003
    a3b0:	00010003 	.word	0x00010003
    a3b4:	001e0003 	.word	0x001e0003
    a3b8:	001f0003 	.word	0x001f0003
    a3bc:	00080003 	.word	0x00080003
    a3c0:	00090003 	.word	0x00090003
    a3c4:	000a0003 	.word	0x000a0003
    a3c8:	000b0003 	.word	0x000b0003
    a3cc:	00100003 	.word	0x00100003
    a3d0:	00110003 	.word	0x00110003
    a3d4:	00120003 	.word	0x00120003
    a3d8:	00130003 	.word	0x00130003
    a3dc:	000c0003 	.word	0x000c0003
    a3e0:	000d0003 	.word	0x000d0003
    a3e4:	000e0003 	.word	0x000e0003
    a3e8:	000f0003 	.word	0x000f0003
    a3ec:	00160003 	.word	0x00160003
    a3f0:	00170003 	.word	0x00170003
    a3f4:	00180003 	.word	0x00180003
    a3f8:	00190003 	.word	0x00190003

0000a3fc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    a3fc:	b590      	push	{r4, r7, lr}
    a3fe:	b08b      	sub	sp, #44	; 0x2c
    a400:	af00      	add	r7, sp, #0
    a402:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    a404:	230c      	movs	r3, #12
    a406:	18fb      	adds	r3, r7, r3
    a408:	4a0f      	ldr	r2, [pc, #60]	; (a448 <_sercom_get_sercom_inst_index+0x4c>)
    a40a:	ca13      	ldmia	r2!, {r0, r1, r4}
    a40c:	c313      	stmia	r3!, {r0, r1, r4}
    a40e:	ca13      	ldmia	r2!, {r0, r1, r4}
    a410:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a412:	2300      	movs	r3, #0
    a414:	627b      	str	r3, [r7, #36]	; 0x24
    a416:	e00e      	b.n	a436 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    a418:	230c      	movs	r3, #12
    a41a:	18fb      	adds	r3, r7, r3
    a41c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a41e:	0092      	lsls	r2, r2, #2
    a420:	58d3      	ldr	r3, [r2, r3]
    a422:	001a      	movs	r2, r3
    a424:	687b      	ldr	r3, [r7, #4]
    a426:	429a      	cmp	r2, r3
    a428:	d102      	bne.n	a430 <_sercom_get_sercom_inst_index+0x34>
			return i;
    a42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a42c:	b2db      	uxtb	r3, r3
    a42e:	e006      	b.n	a43e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a432:	3301      	adds	r3, #1
    a434:	627b      	str	r3, [r7, #36]	; 0x24
    a436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a438:	2b05      	cmp	r3, #5
    a43a:	d9ed      	bls.n	a418 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    a43c:	2300      	movs	r3, #0
}
    a43e:	0018      	movs	r0, r3
    a440:	46bd      	mov	sp, r7
    a442:	b00b      	add	sp, #44	; 0x2c
    a444:	bd90      	pop	{r4, r7, pc}
    a446:	46c0      	nop			; (mov r8, r8)
    a448:	00010938 	.word	0x00010938

0000a44c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    a44c:	b580      	push	{r7, lr}
    a44e:	b082      	sub	sp, #8
    a450:	af00      	add	r7, sp, #0
    a452:	0002      	movs	r2, r0
    a454:	1dfb      	adds	r3, r7, #7
    a456:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    a458:	46c0      	nop			; (mov r8, r8)
    a45a:	46bd      	mov	sp, r7
    a45c:	b002      	add	sp, #8
    a45e:	bd80      	pop	{r7, pc}

0000a460 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    a460:	b580      	push	{r7, lr}
    a462:	b084      	sub	sp, #16
    a464:	af00      	add	r7, sp, #0
    a466:	0002      	movs	r2, r0
    a468:	6039      	str	r1, [r7, #0]
    a46a:	1dfb      	adds	r3, r7, #7
    a46c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    a46e:	4b13      	ldr	r3, [pc, #76]	; (a4bc <_sercom_set_handler+0x5c>)
    a470:	781b      	ldrb	r3, [r3, #0]
    a472:	2201      	movs	r2, #1
    a474:	4053      	eors	r3, r2
    a476:	b2db      	uxtb	r3, r3
    a478:	2b00      	cmp	r3, #0
    a47a:	d015      	beq.n	a4a8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a47c:	2300      	movs	r3, #0
    a47e:	60fb      	str	r3, [r7, #12]
    a480:	e00c      	b.n	a49c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    a482:	4b0f      	ldr	r3, [pc, #60]	; (a4c0 <_sercom_set_handler+0x60>)
    a484:	68fa      	ldr	r2, [r7, #12]
    a486:	0092      	lsls	r2, r2, #2
    a488:	490e      	ldr	r1, [pc, #56]	; (a4c4 <_sercom_set_handler+0x64>)
    a48a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    a48c:	4b0e      	ldr	r3, [pc, #56]	; (a4c8 <_sercom_set_handler+0x68>)
    a48e:	68fa      	ldr	r2, [r7, #12]
    a490:	0092      	lsls	r2, r2, #2
    a492:	2100      	movs	r1, #0
    a494:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a496:	68fb      	ldr	r3, [r7, #12]
    a498:	3301      	adds	r3, #1
    a49a:	60fb      	str	r3, [r7, #12]
    a49c:	68fb      	ldr	r3, [r7, #12]
    a49e:	2b05      	cmp	r3, #5
    a4a0:	d9ef      	bls.n	a482 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    a4a2:	4b06      	ldr	r3, [pc, #24]	; (a4bc <_sercom_set_handler+0x5c>)
    a4a4:	2201      	movs	r2, #1
    a4a6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    a4a8:	1dfb      	adds	r3, r7, #7
    a4aa:	781a      	ldrb	r2, [r3, #0]
    a4ac:	4b04      	ldr	r3, [pc, #16]	; (a4c0 <_sercom_set_handler+0x60>)
    a4ae:	0092      	lsls	r2, r2, #2
    a4b0:	6839      	ldr	r1, [r7, #0]
    a4b2:	50d1      	str	r1, [r2, r3]
}
    a4b4:	46c0      	nop			; (mov r8, r8)
    a4b6:	46bd      	mov	sp, r7
    a4b8:	b004      	add	sp, #16
    a4ba:	bd80      	pop	{r7, pc}
    a4bc:	20000252 	.word	0x20000252
    a4c0:	20000254 	.word	0x20000254
    a4c4:	0000a44d 	.word	0x0000a44d
    a4c8:	20000428 	.word	0x20000428

0000a4cc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    a4cc:	b590      	push	{r4, r7, lr}
    a4ce:	b085      	sub	sp, #20
    a4d0:	af00      	add	r7, sp, #0
    a4d2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    a4d4:	2308      	movs	r3, #8
    a4d6:	18fa      	adds	r2, r7, r3
    a4d8:	4b0c      	ldr	r3, [pc, #48]	; (a50c <_sercom_get_interrupt_vector+0x40>)
    a4da:	0010      	movs	r0, r2
    a4dc:	0019      	movs	r1, r3
    a4de:	2306      	movs	r3, #6
    a4e0:	001a      	movs	r2, r3
    a4e2:	4b0b      	ldr	r3, [pc, #44]	; (a510 <_sercom_get_interrupt_vector+0x44>)
    a4e4:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    a4e6:	230f      	movs	r3, #15
    a4e8:	18fc      	adds	r4, r7, r3
    a4ea:	687b      	ldr	r3, [r7, #4]
    a4ec:	0018      	movs	r0, r3
    a4ee:	4b09      	ldr	r3, [pc, #36]	; (a514 <_sercom_get_interrupt_vector+0x48>)
    a4f0:	4798      	blx	r3
    a4f2:	0003      	movs	r3, r0
    a4f4:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    a4f6:	230f      	movs	r3, #15
    a4f8:	18fb      	adds	r3, r7, r3
    a4fa:	781b      	ldrb	r3, [r3, #0]
    a4fc:	2208      	movs	r2, #8
    a4fe:	18ba      	adds	r2, r7, r2
    a500:	5cd3      	ldrb	r3, [r2, r3]
    a502:	b25b      	sxtb	r3, r3
}
    a504:	0018      	movs	r0, r3
    a506:	46bd      	mov	sp, r7
    a508:	b005      	add	sp, #20
    a50a:	bd90      	pop	{r4, r7, pc}
    a50c:	00010950 	.word	0x00010950
    a510:	0000de15 	.word	0x0000de15
    a514:	0000a3fd 	.word	0x0000a3fd

0000a518 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    a518:	b580      	push	{r7, lr}
    a51a:	af00      	add	r7, sp, #0
    a51c:	4b03      	ldr	r3, [pc, #12]	; (a52c <SERCOM0_Handler+0x14>)
    a51e:	681b      	ldr	r3, [r3, #0]
    a520:	2000      	movs	r0, #0
    a522:	4798      	blx	r3
    a524:	46c0      	nop			; (mov r8, r8)
    a526:	46bd      	mov	sp, r7
    a528:	bd80      	pop	{r7, pc}
    a52a:	46c0      	nop			; (mov r8, r8)
    a52c:	20000254 	.word	0x20000254

0000a530 <SERCOM1_Handler>:
    a530:	b580      	push	{r7, lr}
    a532:	af00      	add	r7, sp, #0
    a534:	4b03      	ldr	r3, [pc, #12]	; (a544 <SERCOM1_Handler+0x14>)
    a536:	685b      	ldr	r3, [r3, #4]
    a538:	2001      	movs	r0, #1
    a53a:	4798      	blx	r3
    a53c:	46c0      	nop			; (mov r8, r8)
    a53e:	46bd      	mov	sp, r7
    a540:	bd80      	pop	{r7, pc}
    a542:	46c0      	nop			; (mov r8, r8)
    a544:	20000254 	.word	0x20000254

0000a548 <SERCOM2_Handler>:
    a548:	b580      	push	{r7, lr}
    a54a:	af00      	add	r7, sp, #0
    a54c:	4b03      	ldr	r3, [pc, #12]	; (a55c <SERCOM2_Handler+0x14>)
    a54e:	689b      	ldr	r3, [r3, #8]
    a550:	2002      	movs	r0, #2
    a552:	4798      	blx	r3
    a554:	46c0      	nop			; (mov r8, r8)
    a556:	46bd      	mov	sp, r7
    a558:	bd80      	pop	{r7, pc}
    a55a:	46c0      	nop			; (mov r8, r8)
    a55c:	20000254 	.word	0x20000254

0000a560 <SERCOM3_Handler>:
    a560:	b580      	push	{r7, lr}
    a562:	af00      	add	r7, sp, #0
    a564:	4b03      	ldr	r3, [pc, #12]	; (a574 <SERCOM3_Handler+0x14>)
    a566:	68db      	ldr	r3, [r3, #12]
    a568:	2003      	movs	r0, #3
    a56a:	4798      	blx	r3
    a56c:	46c0      	nop			; (mov r8, r8)
    a56e:	46bd      	mov	sp, r7
    a570:	bd80      	pop	{r7, pc}
    a572:	46c0      	nop			; (mov r8, r8)
    a574:	20000254 	.word	0x20000254

0000a578 <SERCOM4_Handler>:
    a578:	b580      	push	{r7, lr}
    a57a:	af00      	add	r7, sp, #0
    a57c:	4b03      	ldr	r3, [pc, #12]	; (a58c <SERCOM4_Handler+0x14>)
    a57e:	691b      	ldr	r3, [r3, #16]
    a580:	2004      	movs	r0, #4
    a582:	4798      	blx	r3
    a584:	46c0      	nop			; (mov r8, r8)
    a586:	46bd      	mov	sp, r7
    a588:	bd80      	pop	{r7, pc}
    a58a:	46c0      	nop			; (mov r8, r8)
    a58c:	20000254 	.word	0x20000254

0000a590 <SERCOM5_Handler>:
    a590:	b580      	push	{r7, lr}
    a592:	af00      	add	r7, sp, #0
    a594:	4b03      	ldr	r3, [pc, #12]	; (a5a4 <SERCOM5_Handler+0x14>)
    a596:	695b      	ldr	r3, [r3, #20]
    a598:	2005      	movs	r0, #5
    a59a:	4798      	blx	r3
    a59c:	46c0      	nop			; (mov r8, r8)
    a59e:	46bd      	mov	sp, r7
    a5a0:	bd80      	pop	{r7, pc}
    a5a2:	46c0      	nop			; (mov r8, r8)
    a5a4:	20000254 	.word	0x20000254

0000a5a8 <system_pinmux_get_config_defaults>:
{
    a5a8:	b580      	push	{r7, lr}
    a5aa:	b082      	sub	sp, #8
    a5ac:	af00      	add	r7, sp, #0
    a5ae:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    a5b0:	687b      	ldr	r3, [r7, #4]
    a5b2:	2280      	movs	r2, #128	; 0x80
    a5b4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    a5b6:	687b      	ldr	r3, [r7, #4]
    a5b8:	2200      	movs	r2, #0
    a5ba:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    a5bc:	687b      	ldr	r3, [r7, #4]
    a5be:	2201      	movs	r2, #1
    a5c0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    a5c2:	687b      	ldr	r3, [r7, #4]
    a5c4:	2200      	movs	r2, #0
    a5c6:	70da      	strb	r2, [r3, #3]
}
    a5c8:	46c0      	nop			; (mov r8, r8)
    a5ca:	46bd      	mov	sp, r7
    a5cc:	b002      	add	sp, #8
    a5ce:	bd80      	pop	{r7, pc}

0000a5d0 <system_pinmux_get_group_from_gpio_pin>:
{
    a5d0:	b580      	push	{r7, lr}
    a5d2:	b084      	sub	sp, #16
    a5d4:	af00      	add	r7, sp, #0
    a5d6:	0002      	movs	r2, r0
    a5d8:	1dfb      	adds	r3, r7, #7
    a5da:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    a5dc:	230f      	movs	r3, #15
    a5de:	18fb      	adds	r3, r7, r3
    a5e0:	1dfa      	adds	r2, r7, #7
    a5e2:	7812      	ldrb	r2, [r2, #0]
    a5e4:	09d2      	lsrs	r2, r2, #7
    a5e6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    a5e8:	230e      	movs	r3, #14
    a5ea:	18fb      	adds	r3, r7, r3
    a5ec:	1dfa      	adds	r2, r7, #7
    a5ee:	7812      	ldrb	r2, [r2, #0]
    a5f0:	0952      	lsrs	r2, r2, #5
    a5f2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    a5f4:	4b0d      	ldr	r3, [pc, #52]	; (a62c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    a5f6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    a5f8:	230f      	movs	r3, #15
    a5fa:	18fb      	adds	r3, r7, r3
    a5fc:	781b      	ldrb	r3, [r3, #0]
    a5fe:	2b00      	cmp	r3, #0
    a600:	d10f      	bne.n	a622 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    a602:	230f      	movs	r3, #15
    a604:	18fb      	adds	r3, r7, r3
    a606:	781b      	ldrb	r3, [r3, #0]
    a608:	009b      	lsls	r3, r3, #2
    a60a:	2210      	movs	r2, #16
    a60c:	4694      	mov	ip, r2
    a60e:	44bc      	add	ip, r7
    a610:	4463      	add	r3, ip
    a612:	3b08      	subs	r3, #8
    a614:	681a      	ldr	r2, [r3, #0]
    a616:	230e      	movs	r3, #14
    a618:	18fb      	adds	r3, r7, r3
    a61a:	781b      	ldrb	r3, [r3, #0]
    a61c:	01db      	lsls	r3, r3, #7
    a61e:	18d3      	adds	r3, r2, r3
    a620:	e000      	b.n	a624 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    a622:	2300      	movs	r3, #0
}
    a624:	0018      	movs	r0, r3
    a626:	46bd      	mov	sp, r7
    a628:	b004      	add	sp, #16
    a62a:	bd80      	pop	{r7, pc}
    a62c:	41004400 	.word	0x41004400

0000a630 <port_get_group_from_gpio_pin>:
{
    a630:	b580      	push	{r7, lr}
    a632:	b082      	sub	sp, #8
    a634:	af00      	add	r7, sp, #0
    a636:	0002      	movs	r2, r0
    a638:	1dfb      	adds	r3, r7, #7
    a63a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    a63c:	1dfb      	adds	r3, r7, #7
    a63e:	781b      	ldrb	r3, [r3, #0]
    a640:	0018      	movs	r0, r3
    a642:	4b03      	ldr	r3, [pc, #12]	; (a650 <port_get_group_from_gpio_pin+0x20>)
    a644:	4798      	blx	r3
    a646:	0003      	movs	r3, r0
}
    a648:	0018      	movs	r0, r3
    a64a:	46bd      	mov	sp, r7
    a64c:	b002      	add	sp, #8
    a64e:	bd80      	pop	{r7, pc}
    a650:	0000a5d1 	.word	0x0000a5d1

0000a654 <port_pin_set_output_level>:
{
    a654:	b580      	push	{r7, lr}
    a656:	b084      	sub	sp, #16
    a658:	af00      	add	r7, sp, #0
    a65a:	0002      	movs	r2, r0
    a65c:	1dfb      	adds	r3, r7, #7
    a65e:	701a      	strb	r2, [r3, #0]
    a660:	1dbb      	adds	r3, r7, #6
    a662:	1c0a      	adds	r2, r1, #0
    a664:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    a666:	1dfb      	adds	r3, r7, #7
    a668:	781b      	ldrb	r3, [r3, #0]
    a66a:	0018      	movs	r0, r3
    a66c:	4b0d      	ldr	r3, [pc, #52]	; (a6a4 <port_pin_set_output_level+0x50>)
    a66e:	4798      	blx	r3
    a670:	0003      	movs	r3, r0
    a672:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    a674:	1dfb      	adds	r3, r7, #7
    a676:	781b      	ldrb	r3, [r3, #0]
    a678:	221f      	movs	r2, #31
    a67a:	4013      	ands	r3, r2
    a67c:	2201      	movs	r2, #1
    a67e:	409a      	lsls	r2, r3
    a680:	0013      	movs	r3, r2
    a682:	60bb      	str	r3, [r7, #8]
	if (level) {
    a684:	1dbb      	adds	r3, r7, #6
    a686:	781b      	ldrb	r3, [r3, #0]
    a688:	2b00      	cmp	r3, #0
    a68a:	d003      	beq.n	a694 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    a68c:	68fb      	ldr	r3, [r7, #12]
    a68e:	68ba      	ldr	r2, [r7, #8]
    a690:	619a      	str	r2, [r3, #24]
}
    a692:	e002      	b.n	a69a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    a694:	68fb      	ldr	r3, [r7, #12]
    a696:	68ba      	ldr	r2, [r7, #8]
    a698:	615a      	str	r2, [r3, #20]
}
    a69a:	46c0      	nop			; (mov r8, r8)
    a69c:	46bd      	mov	sp, r7
    a69e:	b004      	add	sp, #16
    a6a0:	bd80      	pop	{r7, pc}
    a6a2:	46c0      	nop			; (mov r8, r8)
    a6a4:	0000a631 	.word	0x0000a631

0000a6a8 <system_gclk_chan_get_config_defaults>:
{
    a6a8:	b580      	push	{r7, lr}
    a6aa:	b082      	sub	sp, #8
    a6ac:	af00      	add	r7, sp, #0
    a6ae:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    a6b0:	687b      	ldr	r3, [r7, #4]
    a6b2:	2200      	movs	r2, #0
    a6b4:	701a      	strb	r2, [r3, #0]
}
    a6b6:	46c0      	nop			; (mov r8, r8)
    a6b8:	46bd      	mov	sp, r7
    a6ba:	b002      	add	sp, #8
    a6bc:	bd80      	pop	{r7, pc}
	...

0000a6c0 <system_apb_clock_set_mask>:
{
    a6c0:	b580      	push	{r7, lr}
    a6c2:	b082      	sub	sp, #8
    a6c4:	af00      	add	r7, sp, #0
    a6c6:	0002      	movs	r2, r0
    a6c8:	6039      	str	r1, [r7, #0]
    a6ca:	1dfb      	adds	r3, r7, #7
    a6cc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    a6ce:	1dfb      	adds	r3, r7, #7
    a6d0:	781b      	ldrb	r3, [r3, #0]
    a6d2:	2b01      	cmp	r3, #1
    a6d4:	d00a      	beq.n	a6ec <system_apb_clock_set_mask+0x2c>
    a6d6:	2b02      	cmp	r3, #2
    a6d8:	d00f      	beq.n	a6fa <system_apb_clock_set_mask+0x3a>
    a6da:	2b00      	cmp	r3, #0
    a6dc:	d114      	bne.n	a708 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    a6de:	4b0e      	ldr	r3, [pc, #56]	; (a718 <system_apb_clock_set_mask+0x58>)
    a6e0:	4a0d      	ldr	r2, [pc, #52]	; (a718 <system_apb_clock_set_mask+0x58>)
    a6e2:	6991      	ldr	r1, [r2, #24]
    a6e4:	683a      	ldr	r2, [r7, #0]
    a6e6:	430a      	orrs	r2, r1
    a6e8:	619a      	str	r2, [r3, #24]
			break;
    a6ea:	e00f      	b.n	a70c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    a6ec:	4b0a      	ldr	r3, [pc, #40]	; (a718 <system_apb_clock_set_mask+0x58>)
    a6ee:	4a0a      	ldr	r2, [pc, #40]	; (a718 <system_apb_clock_set_mask+0x58>)
    a6f0:	69d1      	ldr	r1, [r2, #28]
    a6f2:	683a      	ldr	r2, [r7, #0]
    a6f4:	430a      	orrs	r2, r1
    a6f6:	61da      	str	r2, [r3, #28]
			break;
    a6f8:	e008      	b.n	a70c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    a6fa:	4b07      	ldr	r3, [pc, #28]	; (a718 <system_apb_clock_set_mask+0x58>)
    a6fc:	4a06      	ldr	r2, [pc, #24]	; (a718 <system_apb_clock_set_mask+0x58>)
    a6fe:	6a11      	ldr	r1, [r2, #32]
    a700:	683a      	ldr	r2, [r7, #0]
    a702:	430a      	orrs	r2, r1
    a704:	621a      	str	r2, [r3, #32]
			break;
    a706:	e001      	b.n	a70c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    a708:	2317      	movs	r3, #23
    a70a:	e000      	b.n	a70e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    a70c:	2300      	movs	r3, #0
}
    a70e:	0018      	movs	r0, r3
    a710:	46bd      	mov	sp, r7
    a712:	b002      	add	sp, #8
    a714:	bd80      	pop	{r7, pc}
    a716:	46c0      	nop			; (mov r8, r8)
    a718:	40000400 	.word	0x40000400

0000a71c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    a71c:	b580      	push	{r7, lr}
    a71e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    a720:	4b05      	ldr	r3, [pc, #20]	; (a738 <system_is_debugger_present+0x1c>)
    a722:	789b      	ldrb	r3, [r3, #2]
    a724:	b2db      	uxtb	r3, r3
    a726:	001a      	movs	r2, r3
    a728:	2302      	movs	r3, #2
    a72a:	4013      	ands	r3, r2
    a72c:	1e5a      	subs	r2, r3, #1
    a72e:	4193      	sbcs	r3, r2
    a730:	b2db      	uxtb	r3, r3
}
    a732:	0018      	movs	r0, r3
    a734:	46bd      	mov	sp, r7
    a736:	bd80      	pop	{r7, pc}
    a738:	41002000 	.word	0x41002000

0000a73c <spi_is_write_complete>:
{
    a73c:	b580      	push	{r7, lr}
    a73e:	b084      	sub	sp, #16
    a740:	af00      	add	r7, sp, #0
    a742:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    a744:	687b      	ldr	r3, [r7, #4]
    a746:	681b      	ldr	r3, [r3, #0]
    a748:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    a74a:	68fb      	ldr	r3, [r7, #12]
    a74c:	7e1b      	ldrb	r3, [r3, #24]
    a74e:	b2db      	uxtb	r3, r3
    a750:	001a      	movs	r2, r3
    a752:	2302      	movs	r3, #2
    a754:	4013      	ands	r3, r2
    a756:	1e5a      	subs	r2, r3, #1
    a758:	4193      	sbcs	r3, r2
    a75a:	b2db      	uxtb	r3, r3
}
    a75c:	0018      	movs	r0, r3
    a75e:	46bd      	mov	sp, r7
    a760:	b004      	add	sp, #16
    a762:	bd80      	pop	{r7, pc}

0000a764 <spi_is_ready_to_write>:
{
    a764:	b580      	push	{r7, lr}
    a766:	b084      	sub	sp, #16
    a768:	af00      	add	r7, sp, #0
    a76a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    a76c:	687b      	ldr	r3, [r7, #4]
    a76e:	681b      	ldr	r3, [r3, #0]
    a770:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    a772:	68fb      	ldr	r3, [r7, #12]
    a774:	7e1b      	ldrb	r3, [r3, #24]
    a776:	b2db      	uxtb	r3, r3
    a778:	001a      	movs	r2, r3
    a77a:	2301      	movs	r3, #1
    a77c:	4013      	ands	r3, r2
    a77e:	1e5a      	subs	r2, r3, #1
    a780:	4193      	sbcs	r3, r2
    a782:	b2db      	uxtb	r3, r3
}
    a784:	0018      	movs	r0, r3
    a786:	46bd      	mov	sp, r7
    a788:	b004      	add	sp, #16
    a78a:	bd80      	pop	{r7, pc}

0000a78c <spi_is_ready_to_read>:
{
    a78c:	b580      	push	{r7, lr}
    a78e:	b084      	sub	sp, #16
    a790:	af00      	add	r7, sp, #0
    a792:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    a794:	687b      	ldr	r3, [r7, #4]
    a796:	681b      	ldr	r3, [r3, #0]
    a798:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    a79a:	68fb      	ldr	r3, [r7, #12]
    a79c:	7e1b      	ldrb	r3, [r3, #24]
    a79e:	b2db      	uxtb	r3, r3
    a7a0:	001a      	movs	r2, r3
    a7a2:	2304      	movs	r3, #4
    a7a4:	4013      	ands	r3, r2
    a7a6:	1e5a      	subs	r2, r3, #1
    a7a8:	4193      	sbcs	r3, r2
    a7aa:	b2db      	uxtb	r3, r3
}
    a7ac:	0018      	movs	r0, r3
    a7ae:	46bd      	mov	sp, r7
    a7b0:	b004      	add	sp, #16
    a7b2:	bd80      	pop	{r7, pc}

0000a7b4 <spi_write>:
{
    a7b4:	b580      	push	{r7, lr}
    a7b6:	b084      	sub	sp, #16
    a7b8:	af00      	add	r7, sp, #0
    a7ba:	6078      	str	r0, [r7, #4]
    a7bc:	000a      	movs	r2, r1
    a7be:	1cbb      	adds	r3, r7, #2
    a7c0:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    a7c2:	687b      	ldr	r3, [r7, #4]
    a7c4:	681b      	ldr	r3, [r3, #0]
    a7c6:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
    a7c8:	687b      	ldr	r3, [r7, #4]
    a7ca:	0018      	movs	r0, r3
    a7cc:	4b0a      	ldr	r3, [pc, #40]	; (a7f8 <spi_write+0x44>)
    a7ce:	4798      	blx	r3
    a7d0:	0003      	movs	r3, r0
    a7d2:	001a      	movs	r2, r3
    a7d4:	2301      	movs	r3, #1
    a7d6:	4053      	eors	r3, r2
    a7d8:	b2db      	uxtb	r3, r3
    a7da:	2b00      	cmp	r3, #0
    a7dc:	d001      	beq.n	a7e2 <spi_write+0x2e>
		return STATUS_BUSY;
    a7de:	2305      	movs	r3, #5
    a7e0:	e006      	b.n	a7f0 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    a7e2:	1cbb      	adds	r3, r7, #2
    a7e4:	881b      	ldrh	r3, [r3, #0]
    a7e6:	05db      	lsls	r3, r3, #23
    a7e8:	0dda      	lsrs	r2, r3, #23
    a7ea:	68fb      	ldr	r3, [r7, #12]
    a7ec:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
    a7ee:	2300      	movs	r3, #0
}
    a7f0:	0018      	movs	r0, r3
    a7f2:	46bd      	mov	sp, r7
    a7f4:	b004      	add	sp, #16
    a7f6:	bd80      	pop	{r7, pc}
    a7f8:	0000a765 	.word	0x0000a765

0000a7fc <spi_read>:
{
    a7fc:	b580      	push	{r7, lr}
    a7fe:	b084      	sub	sp, #16
    a800:	af00      	add	r7, sp, #0
    a802:	6078      	str	r0, [r7, #4]
    a804:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    a806:	687b      	ldr	r3, [r7, #4]
    a808:	681b      	ldr	r3, [r3, #0]
    a80a:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
    a80c:	687b      	ldr	r3, [r7, #4]
    a80e:	0018      	movs	r0, r3
    a810:	4b1b      	ldr	r3, [pc, #108]	; (a880 <spi_read+0x84>)
    a812:	4798      	blx	r3
    a814:	0003      	movs	r3, r0
    a816:	001a      	movs	r2, r3
    a818:	2301      	movs	r3, #1
    a81a:	4053      	eors	r3, r2
    a81c:	b2db      	uxtb	r3, r3
    a81e:	2b00      	cmp	r3, #0
    a820:	d001      	beq.n	a826 <spi_read+0x2a>
		return STATUS_ERR_IO;
    a822:	2310      	movs	r3, #16
    a824:	e027      	b.n	a876 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
    a826:	230f      	movs	r3, #15
    a828:	18fb      	adds	r3, r7, r3
    a82a:	2200      	movs	r2, #0
    a82c:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    a82e:	68bb      	ldr	r3, [r7, #8]
    a830:	8b5b      	ldrh	r3, [r3, #26]
    a832:	b29b      	uxth	r3, r3
    a834:	001a      	movs	r2, r3
    a836:	2304      	movs	r3, #4
    a838:	4013      	ands	r3, r2
    a83a:	d006      	beq.n	a84a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    a83c:	230f      	movs	r3, #15
    a83e:	18fb      	adds	r3, r7, r3
    a840:	221e      	movs	r2, #30
    a842:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    a844:	68bb      	ldr	r3, [r7, #8]
    a846:	2204      	movs	r2, #4
    a848:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    a84a:	687b      	ldr	r3, [r7, #4]
    a84c:	799b      	ldrb	r3, [r3, #6]
    a84e:	2b01      	cmp	r3, #1
    a850:	d108      	bne.n	a864 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    a852:	68bb      	ldr	r3, [r7, #8]
    a854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a856:	b29b      	uxth	r3, r3
    a858:	05db      	lsls	r3, r3, #23
    a85a:	0ddb      	lsrs	r3, r3, #23
    a85c:	b29a      	uxth	r2, r3
    a85e:	683b      	ldr	r3, [r7, #0]
    a860:	801a      	strh	r2, [r3, #0]
    a862:	e005      	b.n	a870 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    a864:	68bb      	ldr	r3, [r7, #8]
    a866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a868:	b2db      	uxtb	r3, r3
    a86a:	b29a      	uxth	r2, r3
    a86c:	683b      	ldr	r3, [r7, #0]
    a86e:	801a      	strh	r2, [r3, #0]
	return retval;
    a870:	230f      	movs	r3, #15
    a872:	18fb      	adds	r3, r7, r3
    a874:	781b      	ldrb	r3, [r3, #0]
}
    a876:	0018      	movs	r0, r3
    a878:	46bd      	mov	sp, r7
    a87a:	b004      	add	sp, #16
    a87c:	bd80      	pop	{r7, pc}
    a87e:	46c0      	nop			; (mov r8, r8)
    a880:	0000a78d 	.word	0x0000a78d

0000a884 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    a884:	b590      	push	{r4, r7, lr}
    a886:	b093      	sub	sp, #76	; 0x4c
    a888:	af00      	add	r7, sp, #0
    a88a:	6078      	str	r0, [r7, #4]
    a88c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    a88e:	687b      	ldr	r3, [r7, #4]
    a890:	681b      	ldr	r3, [r3, #0]
    a892:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    a894:	687b      	ldr	r3, [r7, #4]
    a896:	681b      	ldr	r3, [r3, #0]
    a898:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    a89a:	231c      	movs	r3, #28
    a89c:	18fb      	adds	r3, r7, r3
    a89e:	0018      	movs	r0, r3
    a8a0:	4b75      	ldr	r3, [pc, #468]	; (aa78 <_spi_set_config+0x1f4>)
    a8a2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    a8a4:	231c      	movs	r3, #28
    a8a6:	18fb      	adds	r3, r7, r3
    a8a8:	2200      	movs	r2, #0
    a8aa:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    a8ac:	683b      	ldr	r3, [r7, #0]
    a8ae:	781b      	ldrb	r3, [r3, #0]
    a8b0:	2b00      	cmp	r3, #0
    a8b2:	d103      	bne.n	a8bc <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    a8b4:	231c      	movs	r3, #28
    a8b6:	18fb      	adds	r3, r7, r3
    a8b8:	2200      	movs	r2, #0
    a8ba:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    a8bc:	683b      	ldr	r3, [r7, #0]
    a8be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    a8c0:	230c      	movs	r3, #12
    a8c2:	18fb      	adds	r3, r7, r3
    a8c4:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    a8c6:	683b      	ldr	r3, [r7, #0]
    a8c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    a8ca:	230c      	movs	r3, #12
    a8cc:	18fb      	adds	r3, r7, r3
    a8ce:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    a8d0:	683b      	ldr	r3, [r7, #0]
    a8d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    a8d4:	230c      	movs	r3, #12
    a8d6:	18fb      	adds	r3, r7, r3
    a8d8:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    a8da:	683b      	ldr	r3, [r7, #0]
    a8dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    a8de:	230c      	movs	r3, #12
    a8e0:	18fb      	adds	r3, r7, r3
    a8e2:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    a8e4:	2347      	movs	r3, #71	; 0x47
    a8e6:	18fb      	adds	r3, r7, r3
    a8e8:	2200      	movs	r2, #0
    a8ea:	701a      	strb	r2, [r3, #0]
    a8ec:	e02c      	b.n	a948 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    a8ee:	2347      	movs	r3, #71	; 0x47
    a8f0:	18fb      	adds	r3, r7, r3
    a8f2:	781a      	ldrb	r2, [r3, #0]
    a8f4:	230c      	movs	r3, #12
    a8f6:	18fb      	adds	r3, r7, r3
    a8f8:	0092      	lsls	r2, r2, #2
    a8fa:	58d3      	ldr	r3, [r2, r3]
    a8fc:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    a8fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a900:	2b00      	cmp	r3, #0
    a902:	d109      	bne.n	a918 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    a904:	2347      	movs	r3, #71	; 0x47
    a906:	18fb      	adds	r3, r7, r3
    a908:	781a      	ldrb	r2, [r3, #0]
    a90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a90c:	0011      	movs	r1, r2
    a90e:	0018      	movs	r0, r3
    a910:	4b5a      	ldr	r3, [pc, #360]	; (aa7c <_spi_set_config+0x1f8>)
    a912:	4798      	blx	r3
    a914:	0003      	movs	r3, r0
    a916:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    a918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a91a:	3301      	adds	r3, #1
    a91c:	d00d      	beq.n	a93a <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    a91e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a920:	b2da      	uxtb	r2, r3
    a922:	231c      	movs	r3, #28
    a924:	18fb      	adds	r3, r7, r3
    a926:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    a928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a92a:	0c1b      	lsrs	r3, r3, #16
    a92c:	b2db      	uxtb	r3, r3
    a92e:	221c      	movs	r2, #28
    a930:	18ba      	adds	r2, r7, r2
    a932:	0011      	movs	r1, r2
    a934:	0018      	movs	r0, r3
    a936:	4b52      	ldr	r3, [pc, #328]	; (aa80 <_spi_set_config+0x1fc>)
    a938:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    a93a:	2347      	movs	r3, #71	; 0x47
    a93c:	18fb      	adds	r3, r7, r3
    a93e:	781a      	ldrb	r2, [r3, #0]
    a940:	2347      	movs	r3, #71	; 0x47
    a942:	18fb      	adds	r3, r7, r3
    a944:	3201      	adds	r2, #1
    a946:	701a      	strb	r2, [r3, #0]
    a948:	2347      	movs	r3, #71	; 0x47
    a94a:	18fb      	adds	r3, r7, r3
    a94c:	781b      	ldrb	r3, [r3, #0]
    a94e:	2b03      	cmp	r3, #3
    a950:	d9cd      	bls.n	a8ee <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    a952:	683b      	ldr	r3, [r7, #0]
    a954:	781a      	ldrb	r2, [r3, #0]
    a956:	687b      	ldr	r3, [r7, #4]
    a958:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    a95a:	683b      	ldr	r3, [r7, #0]
    a95c:	7c1a      	ldrb	r2, [r3, #16]
    a95e:	687b      	ldr	r3, [r7, #4]
    a960:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    a962:	683b      	ldr	r3, [r7, #0]
    a964:	7c9a      	ldrb	r2, [r3, #18]
    a966:	687b      	ldr	r3, [r7, #4]
    a968:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    a96a:	683b      	ldr	r3, [r7, #0]
    a96c:	7d1a      	ldrb	r2, [r3, #20]
    a96e:	687b      	ldr	r3, [r7, #4]
    a970:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    a972:	230a      	movs	r3, #10
    a974:	18fb      	adds	r3, r7, r3
    a976:	2200      	movs	r2, #0
    a978:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    a97a:	2300      	movs	r3, #0
    a97c:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    a97e:	2300      	movs	r3, #0
    a980:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    a982:	683b      	ldr	r3, [r7, #0]
    a984:	781b      	ldrb	r3, [r3, #0]
    a986:	2b01      	cmp	r3, #1
    a988:	d129      	bne.n	a9de <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    a98a:	687b      	ldr	r3, [r7, #4]
    a98c:	681b      	ldr	r3, [r3, #0]
    a98e:	0018      	movs	r0, r3
    a990:	4b3c      	ldr	r3, [pc, #240]	; (aa84 <_spi_set_config+0x200>)
    a992:	4798      	blx	r3
    a994:	0003      	movs	r3, r0
    a996:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    a998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a99a:	3314      	adds	r3, #20
    a99c:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    a99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a9a0:	b2db      	uxtb	r3, r3
    a9a2:	0018      	movs	r0, r3
    a9a4:	4b38      	ldr	r3, [pc, #224]	; (aa88 <_spi_set_config+0x204>)
    a9a6:	4798      	blx	r3
    a9a8:	0003      	movs	r3, r0
    a9aa:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    a9ac:	683b      	ldr	r3, [r7, #0]
    a9ae:	699b      	ldr	r3, [r3, #24]
    a9b0:	2223      	movs	r2, #35	; 0x23
    a9b2:	18bc      	adds	r4, r7, r2
    a9b4:	220a      	movs	r2, #10
    a9b6:	18ba      	adds	r2, r7, r2
    a9b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    a9ba:	0018      	movs	r0, r3
    a9bc:	4b33      	ldr	r3, [pc, #204]	; (aa8c <_spi_set_config+0x208>)
    a9be:	4798      	blx	r3
    a9c0:	0003      	movs	r3, r0
    a9c2:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    a9c4:	2323      	movs	r3, #35	; 0x23
    a9c6:	18fb      	adds	r3, r7, r3
    a9c8:	781b      	ldrb	r3, [r3, #0]
    a9ca:	2b00      	cmp	r3, #0
    a9cc:	d001      	beq.n	a9d2 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    a9ce:	2317      	movs	r3, #23
    a9d0:	e04e      	b.n	aa70 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    a9d2:	230a      	movs	r3, #10
    a9d4:	18fb      	adds	r3, r7, r3
    a9d6:	881b      	ldrh	r3, [r3, #0]
    a9d8:	b2da      	uxtb	r2, r3
    a9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a9dc:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    a9de:	683b      	ldr	r3, [r7, #0]
    a9e0:	685b      	ldr	r3, [r3, #4]
    a9e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    a9e4:	4313      	orrs	r3, r2
    a9e6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    a9e8:	683b      	ldr	r3, [r7, #0]
    a9ea:	689b      	ldr	r3, [r3, #8]
    a9ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    a9ee:	4313      	orrs	r3, r2
    a9f0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    a9f2:	683b      	ldr	r3, [r7, #0]
    a9f4:	68db      	ldr	r3, [r3, #12]
    a9f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    a9f8:	4313      	orrs	r3, r2
    a9fa:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    a9fc:	683b      	ldr	r3, [r7, #0]
    a9fe:	7c1b      	ldrb	r3, [r3, #16]
    aa00:	001a      	movs	r2, r3
    aa02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    aa04:	4313      	orrs	r3, r2
    aa06:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    aa08:	683b      	ldr	r3, [r7, #0]
    aa0a:	7c5b      	ldrb	r3, [r3, #17]
    aa0c:	2b00      	cmp	r3, #0
    aa0e:	d103      	bne.n	aa18 <_spi_set_config+0x194>
    aa10:	4b1f      	ldr	r3, [pc, #124]	; (aa90 <_spi_set_config+0x20c>)
    aa12:	4798      	blx	r3
    aa14:	1e03      	subs	r3, r0, #0
    aa16:	d003      	beq.n	aa20 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    aa18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    aa1a:	2280      	movs	r2, #128	; 0x80
    aa1c:	4313      	orrs	r3, r2
    aa1e:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    aa20:	683b      	ldr	r3, [r7, #0]
    aa22:	7c9b      	ldrb	r3, [r3, #18]
    aa24:	2b00      	cmp	r3, #0
    aa26:	d004      	beq.n	aa32 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    aa28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    aa2a:	2280      	movs	r2, #128	; 0x80
    aa2c:	0292      	lsls	r2, r2, #10
    aa2e:	4313      	orrs	r3, r2
    aa30:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    aa32:	683b      	ldr	r3, [r7, #0]
    aa34:	7cdb      	ldrb	r3, [r3, #19]
    aa36:	2b00      	cmp	r3, #0
    aa38:	d004      	beq.n	aa44 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    aa3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    aa3c:	2280      	movs	r2, #128	; 0x80
    aa3e:	0092      	lsls	r2, r2, #2
    aa40:	4313      	orrs	r3, r2
    aa42:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    aa44:	683b      	ldr	r3, [r7, #0]
    aa46:	7d1b      	ldrb	r3, [r3, #20]
    aa48:	2b00      	cmp	r3, #0
    aa4a:	d004      	beq.n	aa56 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    aa4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    aa4e:	2280      	movs	r2, #128	; 0x80
    aa50:	0192      	lsls	r2, r2, #6
    aa52:	4313      	orrs	r3, r2
    aa54:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    aa56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    aa58:	681a      	ldr	r2, [r3, #0]
    aa5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    aa5c:	431a      	orrs	r2, r3
    aa5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    aa60:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    aa62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    aa64:	685a      	ldr	r2, [r3, #4]
    aa66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    aa68:	431a      	orrs	r2, r3
    aa6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    aa6c:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    aa6e:	2300      	movs	r3, #0
}
    aa70:	0018      	movs	r0, r3
    aa72:	46bd      	mov	sp, r7
    aa74:	b013      	add	sp, #76	; 0x4c
    aa76:	bd90      	pop	{r4, r7, pc}
    aa78:	0000a5a9 	.word	0x0000a5a9
    aa7c:	0000a241 	.word	0x0000a241
    aa80:	0000c8ed 	.word	0x0000c8ed
    aa84:	0000a3fd 	.word	0x0000a3fd
    aa88:	0000c725 	.word	0x0000c725
    aa8c:	00009f77 	.word	0x00009f77
    aa90:	0000a71d 	.word	0x0000a71d

0000aa94 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    aa94:	b590      	push	{r4, r7, lr}
    aa96:	b08b      	sub	sp, #44	; 0x2c
    aa98:	af00      	add	r7, sp, #0
    aa9a:	60f8      	str	r0, [r7, #12]
    aa9c:	60b9      	str	r1, [r7, #8]
    aa9e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    aaa0:	68fb      	ldr	r3, [r7, #12]
    aaa2:	68ba      	ldr	r2, [r7, #8]
    aaa4:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    aaa6:	68fb      	ldr	r3, [r7, #12]
    aaa8:	681b      	ldr	r3, [r3, #0]
    aaaa:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    aaac:	6a3b      	ldr	r3, [r7, #32]
    aaae:	681b      	ldr	r3, [r3, #0]
    aab0:	2202      	movs	r2, #2
    aab2:	4013      	ands	r3, r2
    aab4:	d001      	beq.n	aaba <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    aab6:	231c      	movs	r3, #28
    aab8:	e09c      	b.n	abf4 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    aaba:	6a3b      	ldr	r3, [r7, #32]
    aabc:	681b      	ldr	r3, [r3, #0]
    aabe:	2201      	movs	r2, #1
    aac0:	4013      	ands	r3, r2
    aac2:	d001      	beq.n	aac8 <spi_init+0x34>
		return STATUS_BUSY;
    aac4:	2305      	movs	r3, #5
    aac6:	e095      	b.n	abf4 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    aac8:	68fb      	ldr	r3, [r7, #12]
    aaca:	681b      	ldr	r3, [r3, #0]
    aacc:	0018      	movs	r0, r3
    aace:	4b4b      	ldr	r3, [pc, #300]	; (abfc <spi_init+0x168>)
    aad0:	4798      	blx	r3
    aad2:	0003      	movs	r3, r0
    aad4:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    aad6:	69fb      	ldr	r3, [r7, #28]
    aad8:	3302      	adds	r3, #2
    aada:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    aadc:	69fb      	ldr	r3, [r7, #28]
    aade:	3314      	adds	r3, #20
    aae0:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    aae2:	2201      	movs	r2, #1
    aae4:	69bb      	ldr	r3, [r7, #24]
    aae6:	409a      	lsls	r2, r3
    aae8:	0013      	movs	r3, r2
    aaea:	0019      	movs	r1, r3
    aaec:	2002      	movs	r0, #2
    aaee:	4b44      	ldr	r3, [pc, #272]	; (ac00 <spi_init+0x16c>)
    aaf0:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    aaf2:	2310      	movs	r3, #16
    aaf4:	18fb      	adds	r3, r7, r3
    aaf6:	0018      	movs	r0, r3
    aaf8:	4b42      	ldr	r3, [pc, #264]	; (ac04 <spi_init+0x170>)
    aafa:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    aafc:	687b      	ldr	r3, [r7, #4]
    aafe:	2224      	movs	r2, #36	; 0x24
    ab00:	5c9a      	ldrb	r2, [r3, r2]
    ab02:	2310      	movs	r3, #16
    ab04:	18fb      	adds	r3, r7, r3
    ab06:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    ab08:	697b      	ldr	r3, [r7, #20]
    ab0a:	b2db      	uxtb	r3, r3
    ab0c:	2210      	movs	r2, #16
    ab0e:	18ba      	adds	r2, r7, r2
    ab10:	0011      	movs	r1, r2
    ab12:	0018      	movs	r0, r3
    ab14:	4b3c      	ldr	r3, [pc, #240]	; (ac08 <spi_init+0x174>)
    ab16:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    ab18:	697b      	ldr	r3, [r7, #20]
    ab1a:	b2db      	uxtb	r3, r3
    ab1c:	0018      	movs	r0, r3
    ab1e:	4b3b      	ldr	r3, [pc, #236]	; (ac0c <spi_init+0x178>)
    ab20:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    ab22:	687b      	ldr	r3, [r7, #4]
    ab24:	2224      	movs	r2, #36	; 0x24
    ab26:	5c9b      	ldrb	r3, [r3, r2]
    ab28:	2100      	movs	r1, #0
    ab2a:	0018      	movs	r0, r3
    ab2c:	4b38      	ldr	r3, [pc, #224]	; (ac10 <spi_init+0x17c>)
    ab2e:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    ab30:	687b      	ldr	r3, [r7, #4]
    ab32:	781b      	ldrb	r3, [r3, #0]
    ab34:	2b01      	cmp	r3, #1
    ab36:	d105      	bne.n	ab44 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    ab38:	6a3b      	ldr	r3, [r7, #32]
    ab3a:	681b      	ldr	r3, [r3, #0]
    ab3c:	220c      	movs	r2, #12
    ab3e:	431a      	orrs	r2, r3
    ab40:	6a3b      	ldr	r3, [r7, #32]
    ab42:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    ab44:	2327      	movs	r3, #39	; 0x27
    ab46:	18fb      	adds	r3, r7, r3
    ab48:	2200      	movs	r2, #0
    ab4a:	701a      	strb	r2, [r3, #0]
    ab4c:	e010      	b.n	ab70 <spi_init+0xdc>
		module->callback[i]        = NULL;
    ab4e:	2327      	movs	r3, #39	; 0x27
    ab50:	18fb      	adds	r3, r7, r3
    ab52:	781b      	ldrb	r3, [r3, #0]
    ab54:	68fa      	ldr	r2, [r7, #12]
    ab56:	3302      	adds	r3, #2
    ab58:	009b      	lsls	r3, r3, #2
    ab5a:	18d3      	adds	r3, r2, r3
    ab5c:	3304      	adds	r3, #4
    ab5e:	2200      	movs	r2, #0
    ab60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    ab62:	2327      	movs	r3, #39	; 0x27
    ab64:	18fb      	adds	r3, r7, r3
    ab66:	781a      	ldrb	r2, [r3, #0]
    ab68:	2327      	movs	r3, #39	; 0x27
    ab6a:	18fb      	adds	r3, r7, r3
    ab6c:	3201      	adds	r2, #1
    ab6e:	701a      	strb	r2, [r3, #0]
    ab70:	2327      	movs	r3, #39	; 0x27
    ab72:	18fb      	adds	r3, r7, r3
    ab74:	781b      	ldrb	r3, [r3, #0]
    ab76:	2b06      	cmp	r3, #6
    ab78:	d9e9      	bls.n	ab4e <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    ab7a:	68fb      	ldr	r3, [r7, #12]
    ab7c:	2200      	movs	r2, #0
    ab7e:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    ab80:	68fb      	ldr	r3, [r7, #12]
    ab82:	2200      	movs	r2, #0
    ab84:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    ab86:	68fb      	ldr	r3, [r7, #12]
    ab88:	2200      	movs	r2, #0
    ab8a:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    ab8c:	68fb      	ldr	r3, [r7, #12]
    ab8e:	2200      	movs	r2, #0
    ab90:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    ab92:	68fb      	ldr	r3, [r7, #12]
    ab94:	2236      	movs	r2, #54	; 0x36
    ab96:	2100      	movs	r1, #0
    ab98:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    ab9a:	68fb      	ldr	r3, [r7, #12]
    ab9c:	2237      	movs	r2, #55	; 0x37
    ab9e:	2100      	movs	r1, #0
    aba0:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    aba2:	68fb      	ldr	r3, [r7, #12]
    aba4:	2238      	movs	r2, #56	; 0x38
    aba6:	2100      	movs	r1, #0
    aba8:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    abaa:	68fb      	ldr	r3, [r7, #12]
    abac:	2203      	movs	r2, #3
    abae:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    abb0:	68fb      	ldr	r3, [r7, #12]
    abb2:	2200      	movs	r2, #0
    abb4:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    abb6:	68fb      	ldr	r3, [r7, #12]
    abb8:	681b      	ldr	r3, [r3, #0]
    abba:	2213      	movs	r2, #19
    abbc:	18bc      	adds	r4, r7, r2
    abbe:	0018      	movs	r0, r3
    abc0:	4b0e      	ldr	r3, [pc, #56]	; (abfc <spi_init+0x168>)
    abc2:	4798      	blx	r3
    abc4:	0003      	movs	r3, r0
    abc6:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    abc8:	4a12      	ldr	r2, [pc, #72]	; (ac14 <spi_init+0x180>)
    abca:	2313      	movs	r3, #19
    abcc:	18fb      	adds	r3, r7, r3
    abce:	781b      	ldrb	r3, [r3, #0]
    abd0:	0011      	movs	r1, r2
    abd2:	0018      	movs	r0, r3
    abd4:	4b10      	ldr	r3, [pc, #64]	; (ac18 <spi_init+0x184>)
    abd6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    abd8:	2313      	movs	r3, #19
    abda:	18fb      	adds	r3, r7, r3
    abdc:	781a      	ldrb	r2, [r3, #0]
    abde:	4b0f      	ldr	r3, [pc, #60]	; (ac1c <spi_init+0x188>)
    abe0:	0092      	lsls	r2, r2, #2
    abe2:	68f9      	ldr	r1, [r7, #12]
    abe4:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    abe6:	687a      	ldr	r2, [r7, #4]
    abe8:	68fb      	ldr	r3, [r7, #12]
    abea:	0011      	movs	r1, r2
    abec:	0018      	movs	r0, r3
    abee:	4b0c      	ldr	r3, [pc, #48]	; (ac20 <spi_init+0x18c>)
    abf0:	4798      	blx	r3
    abf2:	0003      	movs	r3, r0
}
    abf4:	0018      	movs	r0, r3
    abf6:	46bd      	mov	sp, r7
    abf8:	b00b      	add	sp, #44	; 0x2c
    abfa:	bd90      	pop	{r4, r7, pc}
    abfc:	0000a3fd 	.word	0x0000a3fd
    ac00:	0000a6c1 	.word	0x0000a6c1
    ac04:	0000a6a9 	.word	0x0000a6a9
    ac08:	0000c601 	.word	0x0000c601
    ac0c:	0000c645 	.word	0x0000c645
    ac10:	0000a1b5 	.word	0x0000a1b5
    ac14:	0000b0ed 	.word	0x0000b0ed
    ac18:	0000a461 	.word	0x0000a461
    ac1c:	20000428 	.word	0x20000428
    ac20:	0000a885 	.word	0x0000a885

0000ac24 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    ac24:	b590      	push	{r4, r7, lr}
    ac26:	b087      	sub	sp, #28
    ac28:	af00      	add	r7, sp, #0
    ac2a:	60f8      	str	r0, [r7, #12]
    ac2c:	60b9      	str	r1, [r7, #8]
    ac2e:	0019      	movs	r1, r3
    ac30:	1dbb      	adds	r3, r7, #6
    ac32:	801a      	strh	r2, [r3, #0]
    ac34:	1d3b      	adds	r3, r7, #4
    ac36:	1c0a      	adds	r2, r1, #0
    ac38:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    ac3a:	68fb      	ldr	r3, [r7, #12]
    ac3c:	2238      	movs	r2, #56	; 0x38
    ac3e:	5c9b      	ldrb	r3, [r3, r2]
    ac40:	b2db      	uxtb	r3, r3
    ac42:	2b05      	cmp	r3, #5
    ac44:	d101      	bne.n	ac4a <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    ac46:	2305      	movs	r3, #5
    ac48:	e07a      	b.n	ad40 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    ac4a:	1dbb      	adds	r3, r7, #6
    ac4c:	881b      	ldrh	r3, [r3, #0]
    ac4e:	2b00      	cmp	r3, #0
    ac50:	d101      	bne.n	ac56 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    ac52:	2317      	movs	r3, #23
    ac54:	e074      	b.n	ad40 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
    ac56:	68fb      	ldr	r3, [r7, #12]
    ac58:	79db      	ldrb	r3, [r3, #7]
    ac5a:	2201      	movs	r2, #1
    ac5c:	4053      	eors	r3, r2
    ac5e:	b2db      	uxtb	r3, r3
    ac60:	2b00      	cmp	r3, #0
    ac62:	d001      	beq.n	ac68 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    ac64:	231c      	movs	r3, #28
    ac66:	e06b      	b.n	ad40 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    ac68:	2316      	movs	r3, #22
    ac6a:	18fb      	adds	r3, r7, r3
    ac6c:	2200      	movs	r2, #0
    ac6e:	801a      	strh	r2, [r3, #0]

	while (length--) {
    ac70:	e05e      	b.n	ad30 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    ac72:	68fb      	ldr	r3, [r7, #12]
    ac74:	795b      	ldrb	r3, [r3, #5]
    ac76:	2b01      	cmp	r3, #1
    ac78:	d112      	bne.n	aca0 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    ac7a:	46c0      	nop			; (mov r8, r8)
    ac7c:	68fb      	ldr	r3, [r7, #12]
    ac7e:	0018      	movs	r0, r3
    ac80:	4b31      	ldr	r3, [pc, #196]	; (ad48 <spi_read_buffer_wait+0x124>)
    ac82:	4798      	blx	r3
    ac84:	0003      	movs	r3, r0
    ac86:	001a      	movs	r2, r3
    ac88:	2301      	movs	r3, #1
    ac8a:	4053      	eors	r3, r2
    ac8c:	b2db      	uxtb	r3, r3
    ac8e:	2b00      	cmp	r3, #0
    ac90:	d1f4      	bne.n	ac7c <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    ac92:	1d3b      	adds	r3, r7, #4
    ac94:	881a      	ldrh	r2, [r3, #0]
    ac96:	68fb      	ldr	r3, [r7, #12]
    ac98:	0011      	movs	r1, r2
    ac9a:	0018      	movs	r0, r3
    ac9c:	4b2b      	ldr	r3, [pc, #172]	; (ad4c <spi_read_buffer_wait+0x128>)
    ac9e:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    aca0:	46c0      	nop			; (mov r8, r8)
    aca2:	68fb      	ldr	r3, [r7, #12]
    aca4:	0018      	movs	r0, r3
    aca6:	4b2a      	ldr	r3, [pc, #168]	; (ad50 <spi_read_buffer_wait+0x12c>)
    aca8:	4798      	blx	r3
    acaa:	0003      	movs	r3, r0
    acac:	001a      	movs	r2, r3
    acae:	2301      	movs	r3, #1
    acb0:	4053      	eors	r3, r2
    acb2:	b2db      	uxtb	r3, r3
    acb4:	2b00      	cmp	r3, #0
    acb6:	d1f4      	bne.n	aca2 <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
    acb8:	2312      	movs	r3, #18
    acba:	18fb      	adds	r3, r7, r3
    acbc:	2200      	movs	r2, #0
    acbe:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    acc0:	2315      	movs	r3, #21
    acc2:	18fc      	adds	r4, r7, r3
    acc4:	2312      	movs	r3, #18
    acc6:	18fa      	adds	r2, r7, r3
    acc8:	68fb      	ldr	r3, [r7, #12]
    acca:	0011      	movs	r1, r2
    accc:	0018      	movs	r0, r3
    acce:	4b21      	ldr	r3, [pc, #132]	; (ad54 <spi_read_buffer_wait+0x130>)
    acd0:	4798      	blx	r3
    acd2:	0003      	movs	r3, r0
    acd4:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    acd6:	2315      	movs	r3, #21
    acd8:	18fb      	adds	r3, r7, r3
    acda:	781b      	ldrb	r3, [r3, #0]
    acdc:	2b00      	cmp	r3, #0
    acde:	d003      	beq.n	ace8 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
    ace0:	2315      	movs	r3, #21
    ace2:	18fb      	adds	r3, r7, r3
    ace4:	781b      	ldrb	r3, [r3, #0]
    ace6:	e02b      	b.n	ad40 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    ace8:	2316      	movs	r3, #22
    acea:	18fb      	adds	r3, r7, r3
    acec:	881b      	ldrh	r3, [r3, #0]
    acee:	2216      	movs	r2, #22
    acf0:	18ba      	adds	r2, r7, r2
    acf2:	1c59      	adds	r1, r3, #1
    acf4:	8011      	strh	r1, [r2, #0]
    acf6:	001a      	movs	r2, r3
    acf8:	68bb      	ldr	r3, [r7, #8]
    acfa:	189b      	adds	r3, r3, r2
    acfc:	2212      	movs	r2, #18
    acfe:	18ba      	adds	r2, r7, r2
    ad00:	8812      	ldrh	r2, [r2, #0]
    ad02:	b2d2      	uxtb	r2, r2
    ad04:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ad06:	68fb      	ldr	r3, [r7, #12]
    ad08:	799b      	ldrb	r3, [r3, #6]
    ad0a:	2b01      	cmp	r3, #1
    ad0c:	d110      	bne.n	ad30 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
    ad0e:	2316      	movs	r3, #22
    ad10:	18fb      	adds	r3, r7, r3
    ad12:	881b      	ldrh	r3, [r3, #0]
    ad14:	2216      	movs	r2, #22
    ad16:	18ba      	adds	r2, r7, r2
    ad18:	1c59      	adds	r1, r3, #1
    ad1a:	8011      	strh	r1, [r2, #0]
    ad1c:	001a      	movs	r2, r3
    ad1e:	68bb      	ldr	r3, [r7, #8]
    ad20:	189b      	adds	r3, r3, r2
    ad22:	2212      	movs	r2, #18
    ad24:	18ba      	adds	r2, r7, r2
    ad26:	8812      	ldrh	r2, [r2, #0]
    ad28:	0a12      	lsrs	r2, r2, #8
    ad2a:	b292      	uxth	r2, r2
    ad2c:	b2d2      	uxtb	r2, r2
    ad2e:	701a      	strb	r2, [r3, #0]
	while (length--) {
    ad30:	1dbb      	adds	r3, r7, #6
    ad32:	881b      	ldrh	r3, [r3, #0]
    ad34:	1dba      	adds	r2, r7, #6
    ad36:	1e59      	subs	r1, r3, #1
    ad38:	8011      	strh	r1, [r2, #0]
    ad3a:	2b00      	cmp	r3, #0
    ad3c:	d199      	bne.n	ac72 <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
    ad3e:	2300      	movs	r3, #0
}
    ad40:	0018      	movs	r0, r3
    ad42:	46bd      	mov	sp, r7
    ad44:	b007      	add	sp, #28
    ad46:	bd90      	pop	{r4, r7, pc}
    ad48:	0000a765 	.word	0x0000a765
    ad4c:	0000a7b5 	.word	0x0000a7b5
    ad50:	0000a78d 	.word	0x0000a78d
    ad54:	0000a7fd 	.word	0x0000a7fd

0000ad58 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    ad58:	b580      	push	{r7, lr}
    ad5a:	b086      	sub	sp, #24
    ad5c:	af00      	add	r7, sp, #0
    ad5e:	60f8      	str	r0, [r7, #12]
    ad60:	60b9      	str	r1, [r7, #8]
    ad62:	1dfb      	adds	r3, r7, #7
    ad64:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    ad66:	68fb      	ldr	r3, [r7, #12]
    ad68:	795b      	ldrb	r3, [r3, #5]
    ad6a:	2b01      	cmp	r3, #1
    ad6c:	d001      	beq.n	ad72 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    ad6e:	2315      	movs	r3, #21
    ad70:	e05c      	b.n	ae2c <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    ad72:	68fb      	ldr	r3, [r7, #12]
    ad74:	7a1b      	ldrb	r3, [r3, #8]
    ad76:	2201      	movs	r2, #1
    ad78:	4053      	eors	r3, r2
    ad7a:	b2db      	uxtb	r3, r3
    ad7c:	2b00      	cmp	r3, #0
    ad7e:	d054      	beq.n	ae2a <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    ad80:	1dfb      	adds	r3, r7, #7
    ad82:	781b      	ldrb	r3, [r3, #0]
    ad84:	2b00      	cmp	r3, #0
    ad86:	d04a      	beq.n	ae1e <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    ad88:	68bb      	ldr	r3, [r7, #8]
    ad8a:	785b      	ldrb	r3, [r3, #1]
    ad8c:	2b00      	cmp	r3, #0
    ad8e:	d03f      	beq.n	ae10 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    ad90:	68fb      	ldr	r3, [r7, #12]
    ad92:	0018      	movs	r0, r3
    ad94:	4b27      	ldr	r3, [pc, #156]	; (ae34 <spi_select_slave+0xdc>)
    ad96:	4798      	blx	r3
    ad98:	0003      	movs	r3, r0
    ad9a:	001a      	movs	r2, r3
    ad9c:	2301      	movs	r3, #1
    ad9e:	4053      	eors	r3, r2
    ada0:	b2db      	uxtb	r3, r3
    ada2:	2b00      	cmp	r3, #0
    ada4:	d007      	beq.n	adb6 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    ada6:	68bb      	ldr	r3, [r7, #8]
    ada8:	781b      	ldrb	r3, [r3, #0]
    adaa:	2101      	movs	r1, #1
    adac:	0018      	movs	r0, r3
    adae:	4b22      	ldr	r3, [pc, #136]	; (ae38 <spi_select_slave+0xe0>)
    adb0:	4798      	blx	r3
					return STATUS_BUSY;
    adb2:	2305      	movs	r3, #5
    adb4:	e03a      	b.n	ae2c <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    adb6:	68bb      	ldr	r3, [r7, #8]
    adb8:	781b      	ldrb	r3, [r3, #0]
    adba:	2100      	movs	r1, #0
    adbc:	0018      	movs	r0, r3
    adbe:	4b1e      	ldr	r3, [pc, #120]	; (ae38 <spi_select_slave+0xe0>)
    adc0:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    adc2:	68bb      	ldr	r3, [r7, #8]
    adc4:	789b      	ldrb	r3, [r3, #2]
    adc6:	b29a      	uxth	r2, r3
    adc8:	68fb      	ldr	r3, [r7, #12]
    adca:	0011      	movs	r1, r2
    adcc:	0018      	movs	r0, r3
    adce:	4b1b      	ldr	r3, [pc, #108]	; (ae3c <spi_select_slave+0xe4>)
    add0:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    add2:	68fb      	ldr	r3, [r7, #12]
    add4:	79db      	ldrb	r3, [r3, #7]
    add6:	2201      	movs	r2, #1
    add8:	4053      	eors	r3, r2
    adda:	b2db      	uxtb	r3, r3
    addc:	2b00      	cmp	r3, #0
    adde:	d024      	beq.n	ae2a <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    ade0:	46c0      	nop			; (mov r8, r8)
    ade2:	68fb      	ldr	r3, [r7, #12]
    ade4:	0018      	movs	r0, r3
    ade6:	4b16      	ldr	r3, [pc, #88]	; (ae40 <spi_select_slave+0xe8>)
    ade8:	4798      	blx	r3
    adea:	0003      	movs	r3, r0
    adec:	001a      	movs	r2, r3
    adee:	2301      	movs	r3, #1
    adf0:	4053      	eors	r3, r2
    adf2:	b2db      	uxtb	r3, r3
    adf4:	2b00      	cmp	r3, #0
    adf6:	d1f4      	bne.n	ade2 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    adf8:	2316      	movs	r3, #22
    adfa:	18fb      	adds	r3, r7, r3
    adfc:	2200      	movs	r2, #0
    adfe:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    ae00:	2316      	movs	r3, #22
    ae02:	18fa      	adds	r2, r7, r3
    ae04:	68fb      	ldr	r3, [r7, #12]
    ae06:	0011      	movs	r1, r2
    ae08:	0018      	movs	r0, r3
    ae0a:	4b0e      	ldr	r3, [pc, #56]	; (ae44 <spi_select_slave+0xec>)
    ae0c:	4798      	blx	r3
    ae0e:	e00c      	b.n	ae2a <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    ae10:	68bb      	ldr	r3, [r7, #8]
    ae12:	781b      	ldrb	r3, [r3, #0]
    ae14:	2100      	movs	r1, #0
    ae16:	0018      	movs	r0, r3
    ae18:	4b07      	ldr	r3, [pc, #28]	; (ae38 <spi_select_slave+0xe0>)
    ae1a:	4798      	blx	r3
    ae1c:	e005      	b.n	ae2a <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    ae1e:	68bb      	ldr	r3, [r7, #8]
    ae20:	781b      	ldrb	r3, [r3, #0]
    ae22:	2101      	movs	r1, #1
    ae24:	0018      	movs	r0, r3
    ae26:	4b04      	ldr	r3, [pc, #16]	; (ae38 <spi_select_slave+0xe0>)
    ae28:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    ae2a:	2300      	movs	r3, #0
}
    ae2c:	0018      	movs	r0, r3
    ae2e:	46bd      	mov	sp, r7
    ae30:	b006      	add	sp, #24
    ae32:	bd80      	pop	{r7, pc}
    ae34:	0000a765 	.word	0x0000a765
    ae38:	0000a655 	.word	0x0000a655
    ae3c:	0000a7b5 	.word	0x0000a7b5
    ae40:	0000a78d 	.word	0x0000a78d
    ae44:	0000a7fd 	.word	0x0000a7fd

0000ae48 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    ae48:	b580      	push	{r7, lr}
    ae4a:	b086      	sub	sp, #24
    ae4c:	af00      	add	r7, sp, #0
    ae4e:	60f8      	str	r0, [r7, #12]
    ae50:	60b9      	str	r1, [r7, #8]
    ae52:	1dbb      	adds	r3, r7, #6
    ae54:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    ae56:	68fb      	ldr	r3, [r7, #12]
    ae58:	2238      	movs	r2, #56	; 0x38
    ae5a:	5c9b      	ldrb	r3, [r3, r2]
    ae5c:	b2db      	uxtb	r3, r3
    ae5e:	2b05      	cmp	r3, #5
    ae60:	d101      	bne.n	ae66 <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    ae62:	2305      	movs	r3, #5
    ae64:	e087      	b.n	af76 <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
    ae66:	1dbb      	adds	r3, r7, #6
    ae68:	881b      	ldrh	r3, [r3, #0]
    ae6a:	2b00      	cmp	r3, #0
    ae6c:	d101      	bne.n	ae72 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    ae6e:	2317      	movs	r3, #23
    ae70:	e081      	b.n	af76 <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    ae72:	2316      	movs	r3, #22
    ae74:	18fb      	adds	r3, r7, r3
    ae76:	2200      	movs	r2, #0
    ae78:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    ae7a:	2314      	movs	r3, #20
    ae7c:	18fb      	adds	r3, r7, r3
    ae7e:	1dba      	adds	r2, r7, #6
    ae80:	8812      	ldrh	r2, [r2, #0]
    ae82:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    ae84:	e05f      	b.n	af46 <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    ae86:	46c0      	nop			; (mov r8, r8)
    ae88:	68fb      	ldr	r3, [r7, #12]
    ae8a:	0018      	movs	r0, r3
    ae8c:	4b3c      	ldr	r3, [pc, #240]	; (af80 <spi_write_buffer_wait+0x138>)
    ae8e:	4798      	blx	r3
    ae90:	0003      	movs	r3, r0
    ae92:	001a      	movs	r2, r3
    ae94:	2301      	movs	r3, #1
    ae96:	4053      	eors	r3, r2
    ae98:	b2db      	uxtb	r3, r3
    ae9a:	2b00      	cmp	r3, #0
    ae9c:	d1f4      	bne.n	ae88 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    ae9e:	2316      	movs	r3, #22
    aea0:	18fb      	adds	r3, r7, r3
    aea2:	881b      	ldrh	r3, [r3, #0]
    aea4:	2216      	movs	r2, #22
    aea6:	18ba      	adds	r2, r7, r2
    aea8:	1c59      	adds	r1, r3, #1
    aeaa:	8011      	strh	r1, [r2, #0]
    aeac:	001a      	movs	r2, r3
    aeae:	68bb      	ldr	r3, [r7, #8]
    aeb0:	189b      	adds	r3, r3, r2
    aeb2:	781a      	ldrb	r2, [r3, #0]
    aeb4:	2312      	movs	r3, #18
    aeb6:	18fb      	adds	r3, r7, r3
    aeb8:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    aeba:	68fb      	ldr	r3, [r7, #12]
    aebc:	799b      	ldrb	r3, [r3, #6]
    aebe:	2b01      	cmp	r3, #1
    aec0:	d115      	bne.n	aeee <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    aec2:	2316      	movs	r3, #22
    aec4:	18fb      	adds	r3, r7, r3
    aec6:	881b      	ldrh	r3, [r3, #0]
    aec8:	2216      	movs	r2, #22
    aeca:	18ba      	adds	r2, r7, r2
    aecc:	1c59      	adds	r1, r3, #1
    aece:	8011      	strh	r1, [r2, #0]
    aed0:	001a      	movs	r2, r3
    aed2:	68bb      	ldr	r3, [r7, #8]
    aed4:	189b      	adds	r3, r3, r2
    aed6:	781b      	ldrb	r3, [r3, #0]
    aed8:	021b      	lsls	r3, r3, #8
    aeda:	b21a      	sxth	r2, r3
    aedc:	2312      	movs	r3, #18
    aede:	18fb      	adds	r3, r7, r3
    aee0:	2100      	movs	r1, #0
    aee2:	5e5b      	ldrsh	r3, [r3, r1]
    aee4:	4313      	orrs	r3, r2
    aee6:	b21a      	sxth	r2, r3
    aee8:	2312      	movs	r3, #18
    aeea:	18fb      	adds	r3, r7, r3
    aeec:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    aeee:	2312      	movs	r3, #18
    aef0:	18fb      	adds	r3, r7, r3
    aef2:	881a      	ldrh	r2, [r3, #0]
    aef4:	68fb      	ldr	r3, [r7, #12]
    aef6:	0011      	movs	r1, r2
    aef8:	0018      	movs	r0, r3
    aefa:	4b22      	ldr	r3, [pc, #136]	; (af84 <spi_write_buffer_wait+0x13c>)
    aefc:	4798      	blx	r3

		if (module->receiver_enabled) {
    aefe:	68fb      	ldr	r3, [r7, #12]
    af00:	79db      	ldrb	r3, [r3, #7]
    af02:	2214      	movs	r2, #20
    af04:	18ba      	adds	r2, r7, r2
    af06:	2114      	movs	r1, #20
    af08:	1879      	adds	r1, r7, r1
    af0a:	8809      	ldrh	r1, [r1, #0]
    af0c:	8011      	strh	r1, [r2, #0]
    af0e:	2b00      	cmp	r3, #0
    af10:	d019      	beq.n	af46 <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    af12:	46c0      	nop			; (mov r8, r8)
    af14:	68fb      	ldr	r3, [r7, #12]
    af16:	0018      	movs	r0, r3
    af18:	4b1b      	ldr	r3, [pc, #108]	; (af88 <spi_write_buffer_wait+0x140>)
    af1a:	4798      	blx	r3
    af1c:	0003      	movs	r3, r0
    af1e:	001a      	movs	r2, r3
    af20:	2301      	movs	r3, #1
    af22:	4053      	eors	r3, r2
    af24:	b2db      	uxtb	r3, r3
    af26:	2b00      	cmp	r3, #0
    af28:	d1f4      	bne.n	af14 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    af2a:	2310      	movs	r3, #16
    af2c:	18fa      	adds	r2, r7, r3
    af2e:	68fb      	ldr	r3, [r7, #12]
    af30:	0011      	movs	r1, r2
    af32:	0018      	movs	r0, r3
    af34:	4b15      	ldr	r3, [pc, #84]	; (af8c <spi_write_buffer_wait+0x144>)
    af36:	4798      	blx	r3
			flush_length--;
    af38:	2314      	movs	r3, #20
    af3a:	18fb      	adds	r3, r7, r3
    af3c:	881a      	ldrh	r2, [r3, #0]
    af3e:	2314      	movs	r3, #20
    af40:	18fb      	adds	r3, r7, r3
    af42:	3a01      	subs	r2, #1
    af44:	801a      	strh	r2, [r3, #0]
	while (length--) {
    af46:	1dbb      	adds	r3, r7, #6
    af48:	881b      	ldrh	r3, [r3, #0]
    af4a:	1dba      	adds	r2, r7, #6
    af4c:	1e59      	subs	r1, r3, #1
    af4e:	8011      	strh	r1, [r2, #0]
    af50:	2b00      	cmp	r3, #0
    af52:	d198      	bne.n	ae86 <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    af54:	68fb      	ldr	r3, [r7, #12]
    af56:	795b      	ldrb	r3, [r3, #5]
    af58:	2b01      	cmp	r3, #1
    af5a:	d10b      	bne.n	af74 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    af5c:	46c0      	nop			; (mov r8, r8)
    af5e:	68fb      	ldr	r3, [r7, #12]
    af60:	0018      	movs	r0, r3
    af62:	4b0b      	ldr	r3, [pc, #44]	; (af90 <spi_write_buffer_wait+0x148>)
    af64:	4798      	blx	r3
    af66:	0003      	movs	r3, r0
    af68:	001a      	movs	r2, r3
    af6a:	2301      	movs	r3, #1
    af6c:	4053      	eors	r3, r2
    af6e:	b2db      	uxtb	r3, r3
    af70:	2b00      	cmp	r3, #0
    af72:	d1f4      	bne.n	af5e <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    af74:	2300      	movs	r3, #0
}
    af76:	0018      	movs	r0, r3
    af78:	46bd      	mov	sp, r7
    af7a:	b006      	add	sp, #24
    af7c:	bd80      	pop	{r7, pc}
    af7e:	46c0      	nop			; (mov r8, r8)
    af80:	0000a765 	.word	0x0000a765
    af84:	0000a7b5 	.word	0x0000a7b5
    af88:	0000a78d 	.word	0x0000a78d
    af8c:	0000a7fd 	.word	0x0000a7fd
    af90:	0000a73d 	.word	0x0000a73d

0000af94 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    af94:	b580      	push	{r7, lr}
    af96:	b084      	sub	sp, #16
    af98:	af00      	add	r7, sp, #0
    af9a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    af9c:	687b      	ldr	r3, [r7, #4]
    af9e:	681b      	ldr	r3, [r3, #0]
    afa0:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    afa2:	687b      	ldr	r3, [r7, #4]
    afa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    afa6:	781b      	ldrb	r3, [r3, #0]
    afa8:	b2da      	uxtb	r2, r3
    afaa:	230e      	movs	r3, #14
    afac:	18fb      	adds	r3, r7, r3
    afae:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    afb0:	687b      	ldr	r3, [r7, #4]
    afb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    afb4:	1c5a      	adds	r2, r3, #1
    afb6:	687b      	ldr	r3, [r7, #4]
    afb8:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    afba:	687b      	ldr	r3, [r7, #4]
    afbc:	799b      	ldrb	r3, [r3, #6]
    afbe:	2b01      	cmp	r3, #1
    afc0:	d113      	bne.n	afea <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    afc2:	687b      	ldr	r3, [r7, #4]
    afc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    afc6:	781b      	ldrb	r3, [r3, #0]
    afc8:	b2db      	uxtb	r3, r3
    afca:	021b      	lsls	r3, r3, #8
    afcc:	b21a      	sxth	r2, r3
    afce:	230e      	movs	r3, #14
    afd0:	18fb      	adds	r3, r7, r3
    afd2:	2100      	movs	r1, #0
    afd4:	5e5b      	ldrsh	r3, [r3, r1]
    afd6:	4313      	orrs	r3, r2
    afd8:	b21a      	sxth	r2, r3
    afda:	230e      	movs	r3, #14
    afdc:	18fb      	adds	r3, r7, r3
    afde:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    afe0:	687b      	ldr	r3, [r7, #4]
    afe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    afe4:	1c5a      	adds	r2, r3, #1
    afe6:	687b      	ldr	r3, [r7, #4]
    afe8:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    afea:	230e      	movs	r3, #14
    afec:	18fb      	adds	r3, r7, r3
    afee:	881b      	ldrh	r3, [r3, #0]
    aff0:	05db      	lsls	r3, r3, #23
    aff2:	0dda      	lsrs	r2, r3, #23
    aff4:	68bb      	ldr	r3, [r7, #8]
    aff6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    aff8:	687b      	ldr	r3, [r7, #4]
    affa:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    affc:	b29b      	uxth	r3, r3
    affe:	3b01      	subs	r3, #1
    b000:	b29a      	uxth	r2, r3
    b002:	687b      	ldr	r3, [r7, #4]
    b004:	869a      	strh	r2, [r3, #52]	; 0x34
}
    b006:	46c0      	nop			; (mov r8, r8)
    b008:	46bd      	mov	sp, r7
    b00a:	b004      	add	sp, #16
    b00c:	bd80      	pop	{r7, pc}
	...

0000b010 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    b010:	b580      	push	{r7, lr}
    b012:	b084      	sub	sp, #16
    b014:	af00      	add	r7, sp, #0
    b016:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    b018:	687b      	ldr	r3, [r7, #4]
    b01a:	681b      	ldr	r3, [r3, #0]
    b01c:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    b01e:	4b08      	ldr	r3, [pc, #32]	; (b040 <_spi_write_dummy+0x30>)
    b020:	881b      	ldrh	r3, [r3, #0]
    b022:	001a      	movs	r2, r3
    b024:	68fb      	ldr	r3, [r7, #12]
    b026:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    b028:	687b      	ldr	r3, [r7, #4]
    b02a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    b02c:	b29b      	uxth	r3, r3
    b02e:	3b01      	subs	r3, #1
    b030:	b29a      	uxth	r2, r3
    b032:	687b      	ldr	r3, [r7, #4]
    b034:	865a      	strh	r2, [r3, #50]	; 0x32
}
    b036:	46c0      	nop			; (mov r8, r8)
    b038:	46bd      	mov	sp, r7
    b03a:	b004      	add	sp, #16
    b03c:	bd80      	pop	{r7, pc}
    b03e:	46c0      	nop			; (mov r8, r8)
    b040:	20000440 	.word	0x20000440

0000b044 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    b044:	b580      	push	{r7, lr}
    b046:	b084      	sub	sp, #16
    b048:	af00      	add	r7, sp, #0
    b04a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    b04c:	687b      	ldr	r3, [r7, #4]
    b04e:	681b      	ldr	r3, [r3, #0]
    b050:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    b052:	230a      	movs	r3, #10
    b054:	18fb      	adds	r3, r7, r3
    b056:	2200      	movs	r2, #0
    b058:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    b05a:	68fb      	ldr	r3, [r7, #12]
    b05c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b05e:	230a      	movs	r3, #10
    b060:	18fb      	adds	r3, r7, r3
    b062:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    b064:	687b      	ldr	r3, [r7, #4]
    b066:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    b068:	b29b      	uxth	r3, r3
    b06a:	3b01      	subs	r3, #1
    b06c:	b29a      	uxth	r2, r3
    b06e:	687b      	ldr	r3, [r7, #4]
    b070:	865a      	strh	r2, [r3, #50]	; 0x32
}
    b072:	46c0      	nop			; (mov r8, r8)
    b074:	46bd      	mov	sp, r7
    b076:	b004      	add	sp, #16
    b078:	bd80      	pop	{r7, pc}

0000b07a <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    b07a:	b580      	push	{r7, lr}
    b07c:	b084      	sub	sp, #16
    b07e:	af00      	add	r7, sp, #0
    b080:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    b082:	687b      	ldr	r3, [r7, #4]
    b084:	681b      	ldr	r3, [r3, #0]
    b086:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    b088:	68fb      	ldr	r3, [r7, #12]
    b08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b08c:	b29a      	uxth	r2, r3
    b08e:	230a      	movs	r3, #10
    b090:	18fb      	adds	r3, r7, r3
    b092:	05d2      	lsls	r2, r2, #23
    b094:	0dd2      	lsrs	r2, r2, #23
    b096:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    b098:	687b      	ldr	r3, [r7, #4]
    b09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b09c:	220a      	movs	r2, #10
    b09e:	18ba      	adds	r2, r7, r2
    b0a0:	8812      	ldrh	r2, [r2, #0]
    b0a2:	b2d2      	uxtb	r2, r2
    b0a4:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    b0a6:	687b      	ldr	r3, [r7, #4]
    b0a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b0aa:	1c5a      	adds	r2, r3, #1
    b0ac:	687b      	ldr	r3, [r7, #4]
    b0ae:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    b0b0:	687b      	ldr	r3, [r7, #4]
    b0b2:	799b      	ldrb	r3, [r3, #6]
    b0b4:	2b01      	cmp	r3, #1
    b0b6:	d10d      	bne.n	b0d4 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    b0b8:	687b      	ldr	r3, [r7, #4]
    b0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b0bc:	220a      	movs	r2, #10
    b0be:	18ba      	adds	r2, r7, r2
    b0c0:	8812      	ldrh	r2, [r2, #0]
    b0c2:	0a12      	lsrs	r2, r2, #8
    b0c4:	b292      	uxth	r2, r2
    b0c6:	b2d2      	uxtb	r2, r2
    b0c8:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    b0ca:	687b      	ldr	r3, [r7, #4]
    b0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b0ce:	1c5a      	adds	r2, r3, #1
    b0d0:	687b      	ldr	r3, [r7, #4]
    b0d2:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    b0d4:	687b      	ldr	r3, [r7, #4]
    b0d6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    b0d8:	b29b      	uxth	r3, r3
    b0da:	3b01      	subs	r3, #1
    b0dc:	b29a      	uxth	r2, r3
    b0de:	687b      	ldr	r3, [r7, #4]
    b0e0:	861a      	strh	r2, [r3, #48]	; 0x30
}
    b0e2:	46c0      	nop			; (mov r8, r8)
    b0e4:	46bd      	mov	sp, r7
    b0e6:	b004      	add	sp, #16
    b0e8:	bd80      	pop	{r7, pc}
	...

0000b0ec <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    b0ec:	b580      	push	{r7, lr}
    b0ee:	b086      	sub	sp, #24
    b0f0:	af00      	add	r7, sp, #0
    b0f2:	0002      	movs	r2, r0
    b0f4:	1dfb      	adds	r3, r7, #7
    b0f6:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    b0f8:	1dfb      	adds	r3, r7, #7
    b0fa:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    b0fc:	4b96      	ldr	r3, [pc, #600]	; (b358 <_spi_interrupt_handler+0x26c>)
    b0fe:	0092      	lsls	r2, r2, #2
    b100:	58d3      	ldr	r3, [r2, r3]
    b102:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    b104:	697b      	ldr	r3, [r7, #20]
    b106:	681b      	ldr	r3, [r3, #0]
    b108:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    b10a:	697b      	ldr	r3, [r7, #20]
    b10c:	2237      	movs	r2, #55	; 0x37
    b10e:	5c9a      	ldrb	r2, [r3, r2]
    b110:	697b      	ldr	r3, [r7, #20]
    b112:	2136      	movs	r1, #54	; 0x36
    b114:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    b116:	230f      	movs	r3, #15
    b118:	18fb      	adds	r3, r7, r3
    b11a:	400a      	ands	r2, r1
    b11c:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    b11e:	693b      	ldr	r3, [r7, #16]
    b120:	7e1b      	ldrb	r3, [r3, #24]
    b122:	b2da      	uxtb	r2, r3
    b124:	230c      	movs	r3, #12
    b126:	18fb      	adds	r3, r7, r3
    b128:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    b12a:	693b      	ldr	r3, [r7, #16]
    b12c:	7d9b      	ldrb	r3, [r3, #22]
    b12e:	b2db      	uxtb	r3, r3
    b130:	b29a      	uxth	r2, r3
    b132:	230c      	movs	r3, #12
    b134:	18fb      	adds	r3, r7, r3
    b136:	210c      	movs	r1, #12
    b138:	1879      	adds	r1, r7, r1
    b13a:	8809      	ldrh	r1, [r1, #0]
    b13c:	400a      	ands	r2, r1
    b13e:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    b140:	230c      	movs	r3, #12
    b142:	18fb      	adds	r3, r7, r3
    b144:	881b      	ldrh	r3, [r3, #0]
    b146:	2201      	movs	r2, #1
    b148:	4013      	ands	r3, r2
    b14a:	d038      	beq.n	b1be <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    b14c:	697b      	ldr	r3, [r7, #20]
    b14e:	795b      	ldrb	r3, [r3, #5]
    b150:	2b01      	cmp	r3, #1
    b152:	d110      	bne.n	b176 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    b154:	697b      	ldr	r3, [r7, #20]
    b156:	7a5b      	ldrb	r3, [r3, #9]
    b158:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    b15a:	2b00      	cmp	r3, #0
    b15c:	d10b      	bne.n	b176 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    b15e:	697b      	ldr	r3, [r7, #20]
    b160:	0018      	movs	r0, r3
    b162:	4b7e      	ldr	r3, [pc, #504]	; (b35c <_spi_interrupt_handler+0x270>)
    b164:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    b166:	697b      	ldr	r3, [r7, #20]
    b168:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    b16a:	b29b      	uxth	r3, r3
    b16c:	2b00      	cmp	r3, #0
    b16e:	d102      	bne.n	b176 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    b170:	693b      	ldr	r3, [r7, #16]
    b172:	2201      	movs	r2, #1
    b174:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    b176:	697b      	ldr	r3, [r7, #20]
    b178:	795b      	ldrb	r3, [r3, #5]
		if (0
    b17a:	2b01      	cmp	r3, #1
    b17c:	d11f      	bne.n	b1be <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    b17e:	697b      	ldr	r3, [r7, #20]
    b180:	7a5b      	ldrb	r3, [r3, #9]
    b182:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    b184:	2b00      	cmp	r3, #0
    b186:	d01a      	beq.n	b1be <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    b188:	697b      	ldr	r3, [r7, #20]
    b18a:	0018      	movs	r0, r3
    b18c:	4b74      	ldr	r3, [pc, #464]	; (b360 <_spi_interrupt_handler+0x274>)
    b18e:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    b190:	697b      	ldr	r3, [r7, #20]
    b192:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    b194:	b29b      	uxth	r3, r3
    b196:	2b00      	cmp	r3, #0
    b198:	d111      	bne.n	b1be <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    b19a:	693b      	ldr	r3, [r7, #16]
    b19c:	2201      	movs	r2, #1
    b19e:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    b1a0:	697b      	ldr	r3, [r7, #20]
    b1a2:	7a5b      	ldrb	r3, [r3, #9]
    b1a4:	b2db      	uxtb	r3, r3
    b1a6:	2b01      	cmp	r3, #1
    b1a8:	d109      	bne.n	b1be <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    b1aa:	697b      	ldr	r3, [r7, #20]
    b1ac:	79db      	ldrb	r3, [r3, #7]
    b1ae:	2201      	movs	r2, #1
    b1b0:	4053      	eors	r3, r2
    b1b2:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    b1b4:	2b00      	cmp	r3, #0
    b1b6:	d002      	beq.n	b1be <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    b1b8:	693b      	ldr	r3, [r7, #16]
    b1ba:	2202      	movs	r2, #2
    b1bc:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    b1be:	230c      	movs	r3, #12
    b1c0:	18fb      	adds	r3, r7, r3
    b1c2:	881b      	ldrh	r3, [r3, #0]
    b1c4:	2204      	movs	r2, #4
    b1c6:	4013      	ands	r3, r2
    b1c8:	d100      	bne.n	b1cc <_spi_interrupt_handler+0xe0>
    b1ca:	e07e      	b.n	b2ca <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    b1cc:	693b      	ldr	r3, [r7, #16]
    b1ce:	8b5b      	ldrh	r3, [r3, #26]
    b1d0:	b29b      	uxth	r3, r3
    b1d2:	001a      	movs	r2, r3
    b1d4:	2304      	movs	r3, #4
    b1d6:	4013      	ands	r3, r2
    b1d8:	d022      	beq.n	b220 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    b1da:	697b      	ldr	r3, [r7, #20]
    b1dc:	7a5b      	ldrb	r3, [r3, #9]
    b1de:	b2db      	uxtb	r3, r3
    b1e0:	2b01      	cmp	r3, #1
    b1e2:	d014      	beq.n	b20e <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    b1e4:	697b      	ldr	r3, [r7, #20]
    b1e6:	2238      	movs	r2, #56	; 0x38
    b1e8:	211e      	movs	r1, #30
    b1ea:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    b1ec:	697b      	ldr	r3, [r7, #20]
    b1ee:	2203      	movs	r2, #3
    b1f0:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    b1f2:	693b      	ldr	r3, [r7, #16]
    b1f4:	2205      	movs	r2, #5
    b1f6:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    b1f8:	230f      	movs	r3, #15
    b1fa:	18fb      	adds	r3, r7, r3
    b1fc:	781b      	ldrb	r3, [r3, #0]
    b1fe:	2208      	movs	r2, #8
    b200:	4013      	ands	r3, r2
    b202:	d004      	beq.n	b20e <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    b204:	697b      	ldr	r3, [r7, #20]
    b206:	699b      	ldr	r3, [r3, #24]
    b208:	697a      	ldr	r2, [r7, #20]
    b20a:	0010      	movs	r0, r2
    b20c:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    b20e:	693b      	ldr	r3, [r7, #16]
    b210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b212:	230a      	movs	r3, #10
    b214:	18fb      	adds	r3, r7, r3
    b216:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    b218:	693b      	ldr	r3, [r7, #16]
    b21a:	2204      	movs	r2, #4
    b21c:	835a      	strh	r2, [r3, #26]
    b21e:	e054      	b.n	b2ca <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    b220:	697b      	ldr	r3, [r7, #20]
    b222:	7a5b      	ldrb	r3, [r3, #9]
    b224:	b2db      	uxtb	r3, r3
    b226:	2b01      	cmp	r3, #1
    b228:	d11e      	bne.n	b268 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    b22a:	697b      	ldr	r3, [r7, #20]
    b22c:	0018      	movs	r0, r3
    b22e:	4b4d      	ldr	r3, [pc, #308]	; (b364 <_spi_interrupt_handler+0x278>)
    b230:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    b232:	697b      	ldr	r3, [r7, #20]
    b234:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    b236:	b29b      	uxth	r3, r3
    b238:	2b00      	cmp	r3, #0
    b23a:	d146      	bne.n	b2ca <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    b23c:	693b      	ldr	r3, [r7, #16]
    b23e:	2204      	movs	r2, #4
    b240:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    b242:	697b      	ldr	r3, [r7, #20]
    b244:	2238      	movs	r2, #56	; 0x38
    b246:	2100      	movs	r1, #0
    b248:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    b24a:	697b      	ldr	r3, [r7, #20]
    b24c:	2203      	movs	r2, #3
    b24e:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    b250:	230f      	movs	r3, #15
    b252:	18fb      	adds	r3, r7, r3
    b254:	781b      	ldrb	r3, [r3, #0]
    b256:	2201      	movs	r2, #1
    b258:	4013      	ands	r3, r2
    b25a:	d036      	beq.n	b2ca <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    b25c:	697b      	ldr	r3, [r7, #20]
    b25e:	68db      	ldr	r3, [r3, #12]
    b260:	697a      	ldr	r2, [r7, #20]
    b262:	0010      	movs	r0, r2
    b264:	4798      	blx	r3
    b266:	e030      	b.n	b2ca <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    b268:	697b      	ldr	r3, [r7, #20]
    b26a:	0018      	movs	r0, r3
    b26c:	4b3e      	ldr	r3, [pc, #248]	; (b368 <_spi_interrupt_handler+0x27c>)
    b26e:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    b270:	697b      	ldr	r3, [r7, #20]
    b272:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    b274:	b29b      	uxth	r3, r3
    b276:	2b00      	cmp	r3, #0
    b278:	d127      	bne.n	b2ca <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    b27a:	697b      	ldr	r3, [r7, #20]
    b27c:	2238      	movs	r2, #56	; 0x38
    b27e:	2100      	movs	r1, #0
    b280:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    b282:	693b      	ldr	r3, [r7, #16]
    b284:	2204      	movs	r2, #4
    b286:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    b288:	697b      	ldr	r3, [r7, #20]
    b28a:	7a5b      	ldrb	r3, [r3, #9]
    b28c:	b2db      	uxtb	r3, r3
    b28e:	2b02      	cmp	r3, #2
    b290:	d10b      	bne.n	b2aa <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    b292:	230f      	movs	r3, #15
    b294:	18fb      	adds	r3, r7, r3
    b296:	781b      	ldrb	r3, [r3, #0]
    b298:	2204      	movs	r2, #4
    b29a:	4013      	ands	r3, r2
    b29c:	d015      	beq.n	b2ca <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    b29e:	697b      	ldr	r3, [r7, #20]
    b2a0:	695b      	ldr	r3, [r3, #20]
    b2a2:	697a      	ldr	r2, [r7, #20]
    b2a4:	0010      	movs	r0, r2
    b2a6:	4798      	blx	r3
    b2a8:	e00f      	b.n	b2ca <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    b2aa:	697b      	ldr	r3, [r7, #20]
    b2ac:	7a5b      	ldrb	r3, [r3, #9]
    b2ae:	b2db      	uxtb	r3, r3
    b2b0:	2b00      	cmp	r3, #0
    b2b2:	d10a      	bne.n	b2ca <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    b2b4:	230f      	movs	r3, #15
    b2b6:	18fb      	adds	r3, r7, r3
    b2b8:	781b      	ldrb	r3, [r3, #0]
    b2ba:	2202      	movs	r2, #2
    b2bc:	4013      	ands	r3, r2
    b2be:	d004      	beq.n	b2ca <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    b2c0:	697b      	ldr	r3, [r7, #20]
    b2c2:	691b      	ldr	r3, [r3, #16]
    b2c4:	697a      	ldr	r2, [r7, #20]
    b2c6:	0010      	movs	r0, r2
    b2c8:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    b2ca:	230c      	movs	r3, #12
    b2cc:	18fb      	adds	r3, r7, r3
    b2ce:	881b      	ldrh	r3, [r3, #0]
    b2d0:	2202      	movs	r2, #2
    b2d2:	4013      	ands	r3, r2
    b2d4:	d024      	beq.n	b320 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    b2d6:	697b      	ldr	r3, [r7, #20]
    b2d8:	795b      	ldrb	r3, [r3, #5]
    b2da:	2b01      	cmp	r3, #1
    b2dc:	d120      	bne.n	b320 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    b2de:	697b      	ldr	r3, [r7, #20]
    b2e0:	7a5b      	ldrb	r3, [r3, #9]
    b2e2:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    b2e4:	2b01      	cmp	r3, #1
    b2e6:	d11b      	bne.n	b320 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    b2e8:	697b      	ldr	r3, [r7, #20]
    b2ea:	79db      	ldrb	r3, [r3, #7]
    b2ec:	2201      	movs	r2, #1
    b2ee:	4053      	eors	r3, r2
    b2f0:	b2db      	uxtb	r3, r3
    b2f2:	2b00      	cmp	r3, #0
    b2f4:	d014      	beq.n	b320 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    b2f6:	693b      	ldr	r3, [r7, #16]
    b2f8:	2202      	movs	r2, #2
    b2fa:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    b2fc:	697b      	ldr	r3, [r7, #20]
    b2fe:	2203      	movs	r2, #3
    b300:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    b302:	697b      	ldr	r3, [r7, #20]
    b304:	2238      	movs	r2, #56	; 0x38
    b306:	2100      	movs	r1, #0
    b308:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    b30a:	230f      	movs	r3, #15
    b30c:	18fb      	adds	r3, r7, r3
    b30e:	781b      	ldrb	r3, [r3, #0]
    b310:	2201      	movs	r2, #1
    b312:	4013      	ands	r3, r2
    b314:	d004      	beq.n	b320 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    b316:	697b      	ldr	r3, [r7, #20]
    b318:	68db      	ldr	r3, [r3, #12]
    b31a:	697a      	ldr	r2, [r7, #20]
    b31c:	0010      	movs	r0, r2
    b31e:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    b320:	230c      	movs	r3, #12
    b322:	18fb      	adds	r3, r7, r3
    b324:	881b      	ldrh	r3, [r3, #0]
    b326:	2280      	movs	r2, #128	; 0x80
    b328:	4013      	ands	r3, r2
    b32a:	d010      	beq.n	b34e <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    b32c:	693b      	ldr	r3, [r7, #16]
    b32e:	2280      	movs	r2, #128	; 0x80
    b330:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    b332:	693b      	ldr	r3, [r7, #16]
    b334:	2280      	movs	r2, #128	; 0x80
    b336:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    b338:	230f      	movs	r3, #15
    b33a:	18fb      	adds	r3, r7, r3
    b33c:	781b      	ldrb	r3, [r3, #0]
    b33e:	2240      	movs	r2, #64	; 0x40
    b340:	4013      	ands	r3, r2
    b342:	d004      	beq.n	b34e <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    b344:	697b      	ldr	r3, [r7, #20]
    b346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b348:	697a      	ldr	r2, [r7, #20]
    b34a:	0010      	movs	r0, r2
    b34c:	4798      	blx	r3
		}
	}
#  endif
}
    b34e:	46c0      	nop			; (mov r8, r8)
    b350:	46bd      	mov	sp, r7
    b352:	b006      	add	sp, #24
    b354:	bd80      	pop	{r7, pc}
    b356:	46c0      	nop			; (mov r8, r8)
    b358:	20000428 	.word	0x20000428
    b35c:	0000b011 	.word	0x0000b011
    b360:	0000af95 	.word	0x0000af95
    b364:	0000b045 	.word	0x0000b045
    b368:	0000b07b 	.word	0x0000b07b

0000b36c <system_gclk_chan_get_config_defaults>:
{
    b36c:	b580      	push	{r7, lr}
    b36e:	b082      	sub	sp, #8
    b370:	af00      	add	r7, sp, #0
    b372:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    b374:	687b      	ldr	r3, [r7, #4]
    b376:	2200      	movs	r2, #0
    b378:	701a      	strb	r2, [r3, #0]
}
    b37a:	46c0      	nop			; (mov r8, r8)
    b37c:	46bd      	mov	sp, r7
    b37e:	b002      	add	sp, #8
    b380:	bd80      	pop	{r7, pc}
	...

0000b384 <system_apb_clock_set_mask>:
{
    b384:	b580      	push	{r7, lr}
    b386:	b082      	sub	sp, #8
    b388:	af00      	add	r7, sp, #0
    b38a:	0002      	movs	r2, r0
    b38c:	6039      	str	r1, [r7, #0]
    b38e:	1dfb      	adds	r3, r7, #7
    b390:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    b392:	1dfb      	adds	r3, r7, #7
    b394:	781b      	ldrb	r3, [r3, #0]
    b396:	2b01      	cmp	r3, #1
    b398:	d00a      	beq.n	b3b0 <system_apb_clock_set_mask+0x2c>
    b39a:	2b02      	cmp	r3, #2
    b39c:	d00f      	beq.n	b3be <system_apb_clock_set_mask+0x3a>
    b39e:	2b00      	cmp	r3, #0
    b3a0:	d114      	bne.n	b3cc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    b3a2:	4b0e      	ldr	r3, [pc, #56]	; (b3dc <system_apb_clock_set_mask+0x58>)
    b3a4:	4a0d      	ldr	r2, [pc, #52]	; (b3dc <system_apb_clock_set_mask+0x58>)
    b3a6:	6991      	ldr	r1, [r2, #24]
    b3a8:	683a      	ldr	r2, [r7, #0]
    b3aa:	430a      	orrs	r2, r1
    b3ac:	619a      	str	r2, [r3, #24]
			break;
    b3ae:	e00f      	b.n	b3d0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    b3b0:	4b0a      	ldr	r3, [pc, #40]	; (b3dc <system_apb_clock_set_mask+0x58>)
    b3b2:	4a0a      	ldr	r2, [pc, #40]	; (b3dc <system_apb_clock_set_mask+0x58>)
    b3b4:	69d1      	ldr	r1, [r2, #28]
    b3b6:	683a      	ldr	r2, [r7, #0]
    b3b8:	430a      	orrs	r2, r1
    b3ba:	61da      	str	r2, [r3, #28]
			break;
    b3bc:	e008      	b.n	b3d0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    b3be:	4b07      	ldr	r3, [pc, #28]	; (b3dc <system_apb_clock_set_mask+0x58>)
    b3c0:	4a06      	ldr	r2, [pc, #24]	; (b3dc <system_apb_clock_set_mask+0x58>)
    b3c2:	6a11      	ldr	r1, [r2, #32]
    b3c4:	683a      	ldr	r2, [r7, #0]
    b3c6:	430a      	orrs	r2, r1
    b3c8:	621a      	str	r2, [r3, #32]
			break;
    b3ca:	e001      	b.n	b3d0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    b3cc:	2317      	movs	r3, #23
    b3ce:	e000      	b.n	b3d2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    b3d0:	2300      	movs	r3, #0
}
    b3d2:	0018      	movs	r0, r3
    b3d4:	46bd      	mov	sp, r7
    b3d6:	b002      	add	sp, #8
    b3d8:	bd80      	pop	{r7, pc}
    b3da:	46c0      	nop			; (mov r8, r8)
    b3dc:	40000400 	.word	0x40000400

0000b3e0 <system_pinmux_get_config_defaults>:
{
    b3e0:	b580      	push	{r7, lr}
    b3e2:	b082      	sub	sp, #8
    b3e4:	af00      	add	r7, sp, #0
    b3e6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    b3e8:	687b      	ldr	r3, [r7, #4]
    b3ea:	2280      	movs	r2, #128	; 0x80
    b3ec:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    b3ee:	687b      	ldr	r3, [r7, #4]
    b3f0:	2200      	movs	r2, #0
    b3f2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    b3f4:	687b      	ldr	r3, [r7, #4]
    b3f6:	2201      	movs	r2, #1
    b3f8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    b3fa:	687b      	ldr	r3, [r7, #4]
    b3fc:	2200      	movs	r2, #0
    b3fe:	70da      	strb	r2, [r3, #3]
}
    b400:	46c0      	nop			; (mov r8, r8)
    b402:	46bd      	mov	sp, r7
    b404:	b002      	add	sp, #8
    b406:	bd80      	pop	{r7, pc}

0000b408 <system_is_debugger_present>:
{
    b408:	b580      	push	{r7, lr}
    b40a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    b40c:	4b05      	ldr	r3, [pc, #20]	; (b424 <system_is_debugger_present+0x1c>)
    b40e:	789b      	ldrb	r3, [r3, #2]
    b410:	b2db      	uxtb	r3, r3
    b412:	001a      	movs	r2, r3
    b414:	2302      	movs	r3, #2
    b416:	4013      	ands	r3, r2
    b418:	1e5a      	subs	r2, r3, #1
    b41a:	4193      	sbcs	r3, r2
    b41c:	b2db      	uxtb	r3, r3
}
    b41e:	0018      	movs	r0, r3
    b420:	46bd      	mov	sp, r7
    b422:	bd80      	pop	{r7, pc}
    b424:	41002000 	.word	0x41002000

0000b428 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    b428:	b580      	push	{r7, lr}
    b42a:	b084      	sub	sp, #16
    b42c:	af00      	add	r7, sp, #0
    b42e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    b430:	687b      	ldr	r3, [r7, #4]
    b432:	681b      	ldr	r3, [r3, #0]
    b434:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    b436:	68fb      	ldr	r3, [r7, #12]
    b438:	69db      	ldr	r3, [r3, #28]
    b43a:	1e5a      	subs	r2, r3, #1
    b43c:	4193      	sbcs	r3, r2
    b43e:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    b440:	0018      	movs	r0, r3
    b442:	46bd      	mov	sp, r7
    b444:	b004      	add	sp, #16
    b446:	bd80      	pop	{r7, pc}

0000b448 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    b448:	b580      	push	{r7, lr}
    b44a:	b082      	sub	sp, #8
    b44c:	af00      	add	r7, sp, #0
    b44e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    b450:	46c0      	nop			; (mov r8, r8)
    b452:	687b      	ldr	r3, [r7, #4]
    b454:	0018      	movs	r0, r3
    b456:	4b04      	ldr	r3, [pc, #16]	; (b468 <_usart_wait_for_sync+0x20>)
    b458:	4798      	blx	r3
    b45a:	1e03      	subs	r3, r0, #0
    b45c:	d1f9      	bne.n	b452 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    b45e:	46c0      	nop			; (mov r8, r8)
    b460:	46bd      	mov	sp, r7
    b462:	b002      	add	sp, #8
    b464:	bd80      	pop	{r7, pc}
    b466:	46c0      	nop			; (mov r8, r8)
    b468:	0000b429 	.word	0x0000b429

0000b46c <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    b46c:	b5b0      	push	{r4, r5, r7, lr}
    b46e:	b08c      	sub	sp, #48	; 0x30
    b470:	af02      	add	r7, sp, #8
    b472:	6078      	str	r0, [r7, #4]
    b474:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    b476:	687b      	ldr	r3, [r7, #4]
    b478:	681b      	ldr	r3, [r3, #0]
    b47a:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    b47c:	687b      	ldr	r3, [r7, #4]
    b47e:	681b      	ldr	r3, [r3, #0]
    b480:	0018      	movs	r0, r3
    b482:	4bab      	ldr	r3, [pc, #684]	; (b730 <_usart_set_config+0x2c4>)
    b484:	4798      	blx	r3
    b486:	0003      	movs	r3, r0
    b488:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    b48a:	697b      	ldr	r3, [r7, #20]
    b48c:	3314      	adds	r3, #20
    b48e:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    b490:	2300      	movs	r3, #0
    b492:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    b494:	2300      	movs	r3, #0
    b496:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    b498:	230a      	movs	r3, #10
    b49a:	18fb      	adds	r3, r7, r3
    b49c:	2200      	movs	r2, #0
    b49e:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    b4a0:	231f      	movs	r3, #31
    b4a2:	18fb      	adds	r3, r7, r3
    b4a4:	2200      	movs	r2, #0
    b4a6:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    b4a8:	231e      	movs	r3, #30
    b4aa:	18fb      	adds	r3, r7, r3
    b4ac:	2210      	movs	r2, #16
    b4ae:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    b4b0:	683b      	ldr	r3, [r7, #0]
    b4b2:	8a1b      	ldrh	r3, [r3, #16]
    b4b4:	2280      	movs	r2, #128	; 0x80
    b4b6:	01d2      	lsls	r2, r2, #7
    b4b8:	4293      	cmp	r3, r2
    b4ba:	d01c      	beq.n	b4f6 <_usart_set_config+0x8a>
    b4bc:	2280      	movs	r2, #128	; 0x80
    b4be:	01d2      	lsls	r2, r2, #7
    b4c0:	4293      	cmp	r3, r2
    b4c2:	dc06      	bgt.n	b4d2 <_usart_set_config+0x66>
    b4c4:	2b00      	cmp	r3, #0
    b4c6:	d00d      	beq.n	b4e4 <_usart_set_config+0x78>
    b4c8:	2280      	movs	r2, #128	; 0x80
    b4ca:	0192      	lsls	r2, r2, #6
    b4cc:	4293      	cmp	r3, r2
    b4ce:	d024      	beq.n	b51a <_usart_set_config+0xae>
    b4d0:	e035      	b.n	b53e <_usart_set_config+0xd2>
    b4d2:	22c0      	movs	r2, #192	; 0xc0
    b4d4:	01d2      	lsls	r2, r2, #7
    b4d6:	4293      	cmp	r3, r2
    b4d8:	d028      	beq.n	b52c <_usart_set_config+0xc0>
    b4da:	2280      	movs	r2, #128	; 0x80
    b4dc:	0212      	lsls	r2, r2, #8
    b4de:	4293      	cmp	r3, r2
    b4e0:	d012      	beq.n	b508 <_usart_set_config+0x9c>
    b4e2:	e02c      	b.n	b53e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    b4e4:	231f      	movs	r3, #31
    b4e6:	18fb      	adds	r3, r7, r3
    b4e8:	2200      	movs	r2, #0
    b4ea:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    b4ec:	231e      	movs	r3, #30
    b4ee:	18fb      	adds	r3, r7, r3
    b4f0:	2210      	movs	r2, #16
    b4f2:	701a      	strb	r2, [r3, #0]
			break;
    b4f4:	e023      	b.n	b53e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    b4f6:	231f      	movs	r3, #31
    b4f8:	18fb      	adds	r3, r7, r3
    b4fa:	2200      	movs	r2, #0
    b4fc:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    b4fe:	231e      	movs	r3, #30
    b500:	18fb      	adds	r3, r7, r3
    b502:	2208      	movs	r2, #8
    b504:	701a      	strb	r2, [r3, #0]
			break;
    b506:	e01a      	b.n	b53e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    b508:	231f      	movs	r3, #31
    b50a:	18fb      	adds	r3, r7, r3
    b50c:	2200      	movs	r2, #0
    b50e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    b510:	231e      	movs	r3, #30
    b512:	18fb      	adds	r3, r7, r3
    b514:	2203      	movs	r2, #3
    b516:	701a      	strb	r2, [r3, #0]
			break;
    b518:	e011      	b.n	b53e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    b51a:	231f      	movs	r3, #31
    b51c:	18fb      	adds	r3, r7, r3
    b51e:	2201      	movs	r2, #1
    b520:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    b522:	231e      	movs	r3, #30
    b524:	18fb      	adds	r3, r7, r3
    b526:	2210      	movs	r2, #16
    b528:	701a      	strb	r2, [r3, #0]
			break;
    b52a:	e008      	b.n	b53e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    b52c:	231f      	movs	r3, #31
    b52e:	18fb      	adds	r3, r7, r3
    b530:	2201      	movs	r2, #1
    b532:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    b534:	231e      	movs	r3, #30
    b536:	18fb      	adds	r3, r7, r3
    b538:	2208      	movs	r2, #8
    b53a:	701a      	strb	r2, [r3, #0]
			break;
    b53c:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    b53e:	683b      	ldr	r3, [r7, #0]
    b540:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    b542:	683b      	ldr	r3, [r7, #0]
    b544:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    b546:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    b548:	683b      	ldr	r3, [r7, #0]
    b54a:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    b54c:	4313      	orrs	r3, r2
		config->sample_rate |
    b54e:	683a      	ldr	r2, [r7, #0]
    b550:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    b552:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    b554:	683a      	ldr	r2, [r7, #0]
    b556:	7e12      	ldrb	r2, [r2, #24]
    b558:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    b55a:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    b55c:	683a      	ldr	r2, [r7, #0]
    b55e:	2126      	movs	r1, #38	; 0x26
    b560:	5c52      	ldrb	r2, [r2, r1]
    b562:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    b564:	4313      	orrs	r3, r2
    b566:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    b568:	231d      	movs	r3, #29
    b56a:	18fb      	adds	r3, r7, r3
    b56c:	2200      	movs	r2, #0
    b56e:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    b570:	683b      	ldr	r3, [r7, #0]
    b572:	685b      	ldr	r3, [r3, #4]
    b574:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    b576:	68fb      	ldr	r3, [r7, #12]
    b578:	2b00      	cmp	r3, #0
    b57a:	d01e      	beq.n	b5ba <_usart_set_config+0x14e>
    b57c:	2280      	movs	r2, #128	; 0x80
    b57e:	0552      	lsls	r2, r2, #21
    b580:	4293      	cmp	r3, r2
    b582:	d14f      	bne.n	b624 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    b584:	683b      	ldr	r3, [r7, #0]
    b586:	2227      	movs	r2, #39	; 0x27
    b588:	5c9b      	ldrb	r3, [r3, r2]
    b58a:	2201      	movs	r2, #1
    b58c:	4053      	eors	r3, r2
    b58e:	b2db      	uxtb	r3, r3
    b590:	2b00      	cmp	r3, #0
    b592:	d046      	beq.n	b622 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    b594:	683b      	ldr	r3, [r7, #0]
    b596:	6a1d      	ldr	r5, [r3, #32]
    b598:	693b      	ldr	r3, [r7, #16]
    b59a:	b2db      	uxtb	r3, r3
    b59c:	0018      	movs	r0, r3
    b59e:	4b65      	ldr	r3, [pc, #404]	; (b734 <_usart_set_config+0x2c8>)
    b5a0:	4798      	blx	r3
    b5a2:	0001      	movs	r1, r0
    b5a4:	231d      	movs	r3, #29
    b5a6:	18fc      	adds	r4, r7, r3
    b5a8:	230a      	movs	r3, #10
    b5aa:	18fb      	adds	r3, r7, r3
    b5ac:	001a      	movs	r2, r3
    b5ae:	0028      	movs	r0, r5
    b5b0:	4b61      	ldr	r3, [pc, #388]	; (b738 <_usart_set_config+0x2cc>)
    b5b2:	4798      	blx	r3
    b5b4:	0003      	movs	r3, r0
    b5b6:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    b5b8:	e033      	b.n	b622 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    b5ba:	683b      	ldr	r3, [r7, #0]
    b5bc:	2227      	movs	r2, #39	; 0x27
    b5be:	5c9b      	ldrb	r3, [r3, r2]
    b5c0:	2b00      	cmp	r3, #0
    b5c2:	d014      	beq.n	b5ee <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    b5c4:	683b      	ldr	r3, [r7, #0]
    b5c6:	6a18      	ldr	r0, [r3, #32]
    b5c8:	683b      	ldr	r3, [r7, #0]
    b5ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    b5cc:	231d      	movs	r3, #29
    b5ce:	18fc      	adds	r4, r7, r3
    b5d0:	231f      	movs	r3, #31
    b5d2:	18fb      	adds	r3, r7, r3
    b5d4:	781d      	ldrb	r5, [r3, #0]
    b5d6:	230a      	movs	r3, #10
    b5d8:	18fa      	adds	r2, r7, r3
    b5da:	231e      	movs	r3, #30
    b5dc:	18fb      	adds	r3, r7, r3
    b5de:	781b      	ldrb	r3, [r3, #0]
    b5e0:	9300      	str	r3, [sp, #0]
    b5e2:	002b      	movs	r3, r5
    b5e4:	4d55      	ldr	r5, [pc, #340]	; (b73c <_usart_set_config+0x2d0>)
    b5e6:	47a8      	blx	r5
    b5e8:	0003      	movs	r3, r0
    b5ea:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    b5ec:	e01a      	b.n	b624 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    b5ee:	683b      	ldr	r3, [r7, #0]
    b5f0:	6a1d      	ldr	r5, [r3, #32]
    b5f2:	693b      	ldr	r3, [r7, #16]
    b5f4:	b2db      	uxtb	r3, r3
    b5f6:	0018      	movs	r0, r3
    b5f8:	4b4e      	ldr	r3, [pc, #312]	; (b734 <_usart_set_config+0x2c8>)
    b5fa:	4798      	blx	r3
				status_code =
    b5fc:	231d      	movs	r3, #29
    b5fe:	18fc      	adds	r4, r7, r3
    b600:	231f      	movs	r3, #31
    b602:	18fb      	adds	r3, r7, r3
    b604:	7819      	ldrb	r1, [r3, #0]
    b606:	230a      	movs	r3, #10
    b608:	18fa      	adds	r2, r7, r3
    b60a:	231e      	movs	r3, #30
    b60c:	18fb      	adds	r3, r7, r3
    b60e:	781b      	ldrb	r3, [r3, #0]
    b610:	9300      	str	r3, [sp, #0]
    b612:	000b      	movs	r3, r1
    b614:	0001      	movs	r1, r0
    b616:	0028      	movs	r0, r5
    b618:	4d48      	ldr	r5, [pc, #288]	; (b73c <_usart_set_config+0x2d0>)
    b61a:	47a8      	blx	r5
    b61c:	0003      	movs	r3, r0
    b61e:	7023      	strb	r3, [r4, #0]
			break;
    b620:	e000      	b.n	b624 <_usart_set_config+0x1b8>
			break;
    b622:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    b624:	231d      	movs	r3, #29
    b626:	18fb      	adds	r3, r7, r3
    b628:	781b      	ldrb	r3, [r3, #0]
    b62a:	2b00      	cmp	r3, #0
    b62c:	d003      	beq.n	b636 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    b62e:	231d      	movs	r3, #29
    b630:	18fb      	adds	r3, r7, r3
    b632:	781b      	ldrb	r3, [r3, #0]
    b634:	e077      	b.n	b726 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    b636:	683b      	ldr	r3, [r7, #0]
    b638:	7e5b      	ldrb	r3, [r3, #25]
    b63a:	2b00      	cmp	r3, #0
    b63c:	d003      	beq.n	b646 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    b63e:	683b      	ldr	r3, [r7, #0]
    b640:	7e9a      	ldrb	r2, [r3, #26]
    b642:	69bb      	ldr	r3, [r7, #24]
    b644:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    b646:	687b      	ldr	r3, [r7, #4]
    b648:	0018      	movs	r0, r3
    b64a:	4b3d      	ldr	r3, [pc, #244]	; (b740 <_usart_set_config+0x2d4>)
    b64c:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    b64e:	230a      	movs	r3, #10
    b650:	18fb      	adds	r3, r7, r3
    b652:	881a      	ldrh	r2, [r3, #0]
    b654:	69bb      	ldr	r3, [r7, #24]
    b656:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    b658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    b65a:	68fb      	ldr	r3, [r7, #12]
    b65c:	4313      	orrs	r3, r2
    b65e:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    b660:	683b      	ldr	r3, [r7, #0]
    b662:	2227      	movs	r2, #39	; 0x27
    b664:	5c9b      	ldrb	r3, [r3, r2]
    b666:	2201      	movs	r2, #1
    b668:	4053      	eors	r3, r2
    b66a:	b2db      	uxtb	r3, r3
    b66c:	2b00      	cmp	r3, #0
    b66e:	d003      	beq.n	b678 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    b670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b672:	2204      	movs	r2, #4
    b674:	4313      	orrs	r3, r2
    b676:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    b678:	683b      	ldr	r3, [r7, #0]
    b67a:	7e5b      	ldrb	r3, [r3, #25]
    b67c:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    b67e:	683b      	ldr	r3, [r7, #0]
    b680:	7f1b      	ldrb	r3, [r3, #28]
    b682:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    b684:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    b686:	683b      	ldr	r3, [r7, #0]
    b688:	7f5b      	ldrb	r3, [r3, #29]
    b68a:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    b68c:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    b68e:	683b      	ldr	r3, [r7, #0]
    b690:	2124      	movs	r1, #36	; 0x24
    b692:	5c5b      	ldrb	r3, [r3, r1]
    b694:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    b696:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    b698:	683b      	ldr	r3, [r7, #0]
    b69a:	2125      	movs	r1, #37	; 0x25
    b69c:	5c5b      	ldrb	r3, [r3, r1]
    b69e:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    b6a0:	4313      	orrs	r3, r2
	ctrlb =  
    b6a2:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    b6a4:	683b      	ldr	r3, [r7, #0]
    b6a6:	7a9b      	ldrb	r3, [r3, #10]
    b6a8:	001a      	movs	r2, r3
    b6aa:	6a3b      	ldr	r3, [r7, #32]
    b6ac:	4313      	orrs	r3, r2
    b6ae:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    b6b0:	683b      	ldr	r3, [r7, #0]
    b6b2:	7adb      	ldrb	r3, [r3, #11]
    b6b4:	001a      	movs	r2, r3
    b6b6:	6a3b      	ldr	r3, [r7, #32]
    b6b8:	4313      	orrs	r3, r2
    b6ba:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    b6bc:	683b      	ldr	r3, [r7, #0]
    b6be:	891b      	ldrh	r3, [r3, #8]
    b6c0:	2bff      	cmp	r3, #255	; 0xff
    b6c2:	d00b      	beq.n	b6dc <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    b6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b6c6:	2280      	movs	r2, #128	; 0x80
    b6c8:	0452      	lsls	r2, r2, #17
    b6ca:	4313      	orrs	r3, r2
    b6cc:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    b6ce:	683b      	ldr	r3, [r7, #0]
    b6d0:	891b      	ldrh	r3, [r3, #8]
    b6d2:	001a      	movs	r2, r3
    b6d4:	6a3b      	ldr	r3, [r7, #32]
    b6d6:	4313      	orrs	r3, r2
    b6d8:	623b      	str	r3, [r7, #32]
    b6da:	e008      	b.n	b6ee <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    b6dc:	683b      	ldr	r3, [r7, #0]
    b6de:	7edb      	ldrb	r3, [r3, #27]
    b6e0:	2b00      	cmp	r3, #0
    b6e2:	d004      	beq.n	b6ee <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    b6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b6e6:	2280      	movs	r2, #128	; 0x80
    b6e8:	04d2      	lsls	r2, r2, #19
    b6ea:	4313      	orrs	r3, r2
    b6ec:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    b6ee:	683b      	ldr	r3, [r7, #0]
    b6f0:	222c      	movs	r2, #44	; 0x2c
    b6f2:	5c9b      	ldrb	r3, [r3, r2]
    b6f4:	2b00      	cmp	r3, #0
    b6f6:	d103      	bne.n	b700 <_usart_set_config+0x294>
    b6f8:	4b12      	ldr	r3, [pc, #72]	; (b744 <_usart_set_config+0x2d8>)
    b6fa:	4798      	blx	r3
    b6fc:	1e03      	subs	r3, r0, #0
    b6fe:	d003      	beq.n	b708 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    b700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b702:	2280      	movs	r2, #128	; 0x80
    b704:	4313      	orrs	r3, r2
    b706:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    b708:	687b      	ldr	r3, [r7, #4]
    b70a:	0018      	movs	r0, r3
    b70c:	4b0c      	ldr	r3, [pc, #48]	; (b740 <_usart_set_config+0x2d4>)
    b70e:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    b710:	69bb      	ldr	r3, [r7, #24]
    b712:	6a3a      	ldr	r2, [r7, #32]
    b714:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    b716:	687b      	ldr	r3, [r7, #4]
    b718:	0018      	movs	r0, r3
    b71a:	4b09      	ldr	r3, [pc, #36]	; (b740 <_usart_set_config+0x2d4>)
    b71c:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    b71e:	69bb      	ldr	r3, [r7, #24]
    b720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    b722:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    b724:	2300      	movs	r3, #0
}
    b726:	0018      	movs	r0, r3
    b728:	46bd      	mov	sp, r7
    b72a:	b00a      	add	sp, #40	; 0x28
    b72c:	bdb0      	pop	{r4, r5, r7, pc}
    b72e:	46c0      	nop			; (mov r8, r8)
    b730:	0000a3fd 	.word	0x0000a3fd
    b734:	0000c725 	.word	0x0000c725
    b738:	00009f77 	.word	0x00009f77
    b73c:	00009ff5 	.word	0x00009ff5
    b740:	0000b449 	.word	0x0000b449
    b744:	0000b409 	.word	0x0000b409

0000b748 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    b748:	b590      	push	{r4, r7, lr}
    b74a:	b093      	sub	sp, #76	; 0x4c
    b74c:	af00      	add	r7, sp, #0
    b74e:	60f8      	str	r0, [r7, #12]
    b750:	60b9      	str	r1, [r7, #8]
    b752:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    b754:	233b      	movs	r3, #59	; 0x3b
    b756:	18fb      	adds	r3, r7, r3
    b758:	2200      	movs	r2, #0
    b75a:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    b75c:	68fb      	ldr	r3, [r7, #12]
    b75e:	68ba      	ldr	r2, [r7, #8]
    b760:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    b762:	68fb      	ldr	r3, [r7, #12]
    b764:	681b      	ldr	r3, [r3, #0]
    b766:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    b768:	68fb      	ldr	r3, [r7, #12]
    b76a:	681b      	ldr	r3, [r3, #0]
    b76c:	0018      	movs	r0, r3
    b76e:	4b86      	ldr	r3, [pc, #536]	; (b988 <usart_init+0x240>)
    b770:	4798      	blx	r3
    b772:	0003      	movs	r3, r0
    b774:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    b776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b778:	3302      	adds	r3, #2
    b77a:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    b77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b77e:	3314      	adds	r3, #20
    b780:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    b782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b784:	681b      	ldr	r3, [r3, #0]
    b786:	2201      	movs	r2, #1
    b788:	4013      	ands	r3, r2
    b78a:	d001      	beq.n	b790 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    b78c:	2305      	movs	r3, #5
    b78e:	e0f6      	b.n	b97e <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    b790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b792:	681b      	ldr	r3, [r3, #0]
    b794:	2202      	movs	r2, #2
    b796:	4013      	ands	r3, r2
    b798:	d001      	beq.n	b79e <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    b79a:	231c      	movs	r3, #28
    b79c:	e0ef      	b.n	b97e <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    b79e:	2201      	movs	r2, #1
    b7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b7a2:	409a      	lsls	r2, r3
    b7a4:	0013      	movs	r3, r2
    b7a6:	0019      	movs	r1, r3
    b7a8:	2002      	movs	r0, #2
    b7aa:	4b78      	ldr	r3, [pc, #480]	; (b98c <usart_init+0x244>)
    b7ac:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    b7ae:	2324      	movs	r3, #36	; 0x24
    b7b0:	18fb      	adds	r3, r7, r3
    b7b2:	0018      	movs	r0, r3
    b7b4:	4b76      	ldr	r3, [pc, #472]	; (b990 <usart_init+0x248>)
    b7b6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    b7b8:	687b      	ldr	r3, [r7, #4]
    b7ba:	222d      	movs	r2, #45	; 0x2d
    b7bc:	5c9a      	ldrb	r2, [r3, r2]
    b7be:	2324      	movs	r3, #36	; 0x24
    b7c0:	18fb      	adds	r3, r7, r3
    b7c2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    b7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b7c6:	b2db      	uxtb	r3, r3
    b7c8:	2224      	movs	r2, #36	; 0x24
    b7ca:	18ba      	adds	r2, r7, r2
    b7cc:	0011      	movs	r1, r2
    b7ce:	0018      	movs	r0, r3
    b7d0:	4b70      	ldr	r3, [pc, #448]	; (b994 <usart_init+0x24c>)
    b7d2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    b7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b7d6:	b2db      	uxtb	r3, r3
    b7d8:	0018      	movs	r0, r3
    b7da:	4b6f      	ldr	r3, [pc, #444]	; (b998 <usart_init+0x250>)
    b7dc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    b7de:	687b      	ldr	r3, [r7, #4]
    b7e0:	222d      	movs	r2, #45	; 0x2d
    b7e2:	5c9b      	ldrb	r3, [r3, r2]
    b7e4:	2100      	movs	r1, #0
    b7e6:	0018      	movs	r0, r3
    b7e8:	4b6c      	ldr	r3, [pc, #432]	; (b99c <usart_init+0x254>)
    b7ea:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    b7ec:	687b      	ldr	r3, [r7, #4]
    b7ee:	7ada      	ldrb	r2, [r3, #11]
    b7f0:	68fb      	ldr	r3, [r7, #12]
    b7f2:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    b7f4:	687b      	ldr	r3, [r7, #4]
    b7f6:	2224      	movs	r2, #36	; 0x24
    b7f8:	5c9a      	ldrb	r2, [r3, r2]
    b7fa:	68fb      	ldr	r3, [r7, #12]
    b7fc:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    b7fe:	687b      	ldr	r3, [r7, #4]
    b800:	2225      	movs	r2, #37	; 0x25
    b802:	5c9a      	ldrb	r2, [r3, r2]
    b804:	68fb      	ldr	r3, [r7, #12]
    b806:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    b808:	687b      	ldr	r3, [r7, #4]
    b80a:	7eda      	ldrb	r2, [r3, #27]
    b80c:	68fb      	ldr	r3, [r7, #12]
    b80e:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    b810:	687b      	ldr	r3, [r7, #4]
    b812:	7f1a      	ldrb	r2, [r3, #28]
    b814:	68fb      	ldr	r3, [r7, #12]
    b816:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    b818:	233b      	movs	r3, #59	; 0x3b
    b81a:	18fc      	adds	r4, r7, r3
    b81c:	687a      	ldr	r2, [r7, #4]
    b81e:	68fb      	ldr	r3, [r7, #12]
    b820:	0011      	movs	r1, r2
    b822:	0018      	movs	r0, r3
    b824:	4b5e      	ldr	r3, [pc, #376]	; (b9a0 <usart_init+0x258>)
    b826:	4798      	blx	r3
    b828:	0003      	movs	r3, r0
    b82a:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    b82c:	233b      	movs	r3, #59	; 0x3b
    b82e:	18fb      	adds	r3, r7, r3
    b830:	781b      	ldrb	r3, [r3, #0]
    b832:	2b00      	cmp	r3, #0
    b834:	d003      	beq.n	b83e <usart_init+0xf6>
		return status_code;
    b836:	233b      	movs	r3, #59	; 0x3b
    b838:	18fb      	adds	r3, r7, r3
    b83a:	781b      	ldrb	r3, [r3, #0]
    b83c:	e09f      	b.n	b97e <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    b83e:	2320      	movs	r3, #32
    b840:	18fb      	adds	r3, r7, r3
    b842:	0018      	movs	r0, r3
    b844:	4b57      	ldr	r3, [pc, #348]	; (b9a4 <usart_init+0x25c>)
    b846:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    b848:	2320      	movs	r3, #32
    b84a:	18fb      	adds	r3, r7, r3
    b84c:	2200      	movs	r2, #0
    b84e:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    b850:	2320      	movs	r3, #32
    b852:	18fb      	adds	r3, r7, r3
    b854:	2200      	movs	r2, #0
    b856:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    b858:	687b      	ldr	r3, [r7, #4]
    b85a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    b85c:	2310      	movs	r3, #16
    b85e:	18fb      	adds	r3, r7, r3
    b860:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    b862:	687b      	ldr	r3, [r7, #4]
    b864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    b866:	2310      	movs	r3, #16
    b868:	18fb      	adds	r3, r7, r3
    b86a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    b86c:	687b      	ldr	r3, [r7, #4]
    b86e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    b870:	2310      	movs	r3, #16
    b872:	18fb      	adds	r3, r7, r3
    b874:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    b876:	687b      	ldr	r3, [r7, #4]
    b878:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    b87a:	2310      	movs	r3, #16
    b87c:	18fb      	adds	r3, r7, r3
    b87e:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    b880:	2347      	movs	r3, #71	; 0x47
    b882:	18fb      	adds	r3, r7, r3
    b884:	2200      	movs	r2, #0
    b886:	701a      	strb	r2, [r3, #0]
    b888:	e02c      	b.n	b8e4 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    b88a:	2347      	movs	r3, #71	; 0x47
    b88c:	18fb      	adds	r3, r7, r3
    b88e:	781a      	ldrb	r2, [r3, #0]
    b890:	2310      	movs	r3, #16
    b892:	18fb      	adds	r3, r7, r3
    b894:	0092      	lsls	r2, r2, #2
    b896:	58d3      	ldr	r3, [r2, r3]
    b898:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    b89a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b89c:	2b00      	cmp	r3, #0
    b89e:	d109      	bne.n	b8b4 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    b8a0:	2347      	movs	r3, #71	; 0x47
    b8a2:	18fb      	adds	r3, r7, r3
    b8a4:	781a      	ldrb	r2, [r3, #0]
    b8a6:	68bb      	ldr	r3, [r7, #8]
    b8a8:	0011      	movs	r1, r2
    b8aa:	0018      	movs	r0, r3
    b8ac:	4b3e      	ldr	r3, [pc, #248]	; (b9a8 <usart_init+0x260>)
    b8ae:	4798      	blx	r3
    b8b0:	0003      	movs	r3, r0
    b8b2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    b8b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b8b6:	3301      	adds	r3, #1
    b8b8:	d00d      	beq.n	b8d6 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    b8ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b8bc:	b2da      	uxtb	r2, r3
    b8be:	2320      	movs	r3, #32
    b8c0:	18fb      	adds	r3, r7, r3
    b8c2:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    b8c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b8c6:	0c1b      	lsrs	r3, r3, #16
    b8c8:	b2db      	uxtb	r3, r3
    b8ca:	2220      	movs	r2, #32
    b8cc:	18ba      	adds	r2, r7, r2
    b8ce:	0011      	movs	r1, r2
    b8d0:	0018      	movs	r0, r3
    b8d2:	4b36      	ldr	r3, [pc, #216]	; (b9ac <usart_init+0x264>)
    b8d4:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    b8d6:	2347      	movs	r3, #71	; 0x47
    b8d8:	18fb      	adds	r3, r7, r3
    b8da:	781a      	ldrb	r2, [r3, #0]
    b8dc:	2347      	movs	r3, #71	; 0x47
    b8de:	18fb      	adds	r3, r7, r3
    b8e0:	3201      	adds	r2, #1
    b8e2:	701a      	strb	r2, [r3, #0]
    b8e4:	2347      	movs	r3, #71	; 0x47
    b8e6:	18fb      	adds	r3, r7, r3
    b8e8:	781b      	ldrb	r3, [r3, #0]
    b8ea:	2b03      	cmp	r3, #3
    b8ec:	d9cd      	bls.n	b88a <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    b8ee:	2300      	movs	r3, #0
    b8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    b8f2:	e00a      	b.n	b90a <usart_init+0x1c2>
		module->callback[i]            = NULL;
    b8f4:	68fa      	ldr	r2, [r7, #12]
    b8f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b8f8:	3302      	adds	r3, #2
    b8fa:	009b      	lsls	r3, r3, #2
    b8fc:	18d3      	adds	r3, r2, r3
    b8fe:	3304      	adds	r3, #4
    b900:	2200      	movs	r2, #0
    b902:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    b904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b906:	3301      	adds	r3, #1
    b908:	63fb      	str	r3, [r7, #60]	; 0x3c
    b90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b90c:	2b05      	cmp	r3, #5
    b90e:	d9f1      	bls.n	b8f4 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    b910:	68fb      	ldr	r3, [r7, #12]
    b912:	2200      	movs	r2, #0
    b914:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    b916:	68fb      	ldr	r3, [r7, #12]
    b918:	2200      	movs	r2, #0
    b91a:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    b91c:	68fb      	ldr	r3, [r7, #12]
    b91e:	2200      	movs	r2, #0
    b920:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    b922:	68fb      	ldr	r3, [r7, #12]
    b924:	2200      	movs	r2, #0
    b926:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    b928:	68fb      	ldr	r3, [r7, #12]
    b92a:	2230      	movs	r2, #48	; 0x30
    b92c:	2100      	movs	r1, #0
    b92e:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    b930:	68fb      	ldr	r3, [r7, #12]
    b932:	2231      	movs	r2, #49	; 0x31
    b934:	2100      	movs	r1, #0
    b936:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    b938:	68fb      	ldr	r3, [r7, #12]
    b93a:	2232      	movs	r2, #50	; 0x32
    b93c:	2100      	movs	r1, #0
    b93e:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    b940:	68fb      	ldr	r3, [r7, #12]
    b942:	2233      	movs	r2, #51	; 0x33
    b944:	2100      	movs	r1, #0
    b946:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    b948:	68fb      	ldr	r3, [r7, #12]
    b94a:	681b      	ldr	r3, [r3, #0]
    b94c:	2227      	movs	r2, #39	; 0x27
    b94e:	18bc      	adds	r4, r7, r2
    b950:	0018      	movs	r0, r3
    b952:	4b0d      	ldr	r3, [pc, #52]	; (b988 <usart_init+0x240>)
    b954:	4798      	blx	r3
    b956:	0003      	movs	r3, r0
    b958:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    b95a:	4a15      	ldr	r2, [pc, #84]	; (b9b0 <usart_init+0x268>)
    b95c:	2327      	movs	r3, #39	; 0x27
    b95e:	18fb      	adds	r3, r7, r3
    b960:	781b      	ldrb	r3, [r3, #0]
    b962:	0011      	movs	r1, r2
    b964:	0018      	movs	r0, r3
    b966:	4b13      	ldr	r3, [pc, #76]	; (b9b4 <usart_init+0x26c>)
    b968:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    b96a:	2327      	movs	r3, #39	; 0x27
    b96c:	18fb      	adds	r3, r7, r3
    b96e:	781a      	ldrb	r2, [r3, #0]
    b970:	4b11      	ldr	r3, [pc, #68]	; (b9b8 <usart_init+0x270>)
    b972:	0092      	lsls	r2, r2, #2
    b974:	68f9      	ldr	r1, [r7, #12]
    b976:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    b978:	233b      	movs	r3, #59	; 0x3b
    b97a:	18fb      	adds	r3, r7, r3
    b97c:	781b      	ldrb	r3, [r3, #0]
}
    b97e:	0018      	movs	r0, r3
    b980:	46bd      	mov	sp, r7
    b982:	b013      	add	sp, #76	; 0x4c
    b984:	bd90      	pop	{r4, r7, pc}
    b986:	46c0      	nop			; (mov r8, r8)
    b988:	0000a3fd 	.word	0x0000a3fd
    b98c:	0000b385 	.word	0x0000b385
    b990:	0000b36d 	.word	0x0000b36d
    b994:	0000c601 	.word	0x0000c601
    b998:	0000c645 	.word	0x0000c645
    b99c:	0000a1b5 	.word	0x0000a1b5
    b9a0:	0000b46d 	.word	0x0000b46d
    b9a4:	0000b3e1 	.word	0x0000b3e1
    b9a8:	0000a241 	.word	0x0000a241
    b9ac:	0000c8ed 	.word	0x0000c8ed
    b9b0:	0000bb51 	.word	0x0000bb51
    b9b4:	0000a461 	.word	0x0000a461
    b9b8:	20000428 	.word	0x20000428

0000b9bc <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    b9bc:	b580      	push	{r7, lr}
    b9be:	b084      	sub	sp, #16
    b9c0:	af00      	add	r7, sp, #0
    b9c2:	6078      	str	r0, [r7, #4]
    b9c4:	000a      	movs	r2, r1
    b9c6:	1cbb      	adds	r3, r7, #2
    b9c8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    b9ca:	687b      	ldr	r3, [r7, #4]
    b9cc:	681b      	ldr	r3, [r3, #0]
    b9ce:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    b9d0:	687b      	ldr	r3, [r7, #4]
    b9d2:	79db      	ldrb	r3, [r3, #7]
    b9d4:	2201      	movs	r2, #1
    b9d6:	4053      	eors	r3, r2
    b9d8:	b2db      	uxtb	r3, r3
    b9da:	2b00      	cmp	r3, #0
    b9dc:	d001      	beq.n	b9e2 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    b9de:	231c      	movs	r3, #28
    b9e0:	e017      	b.n	ba12 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    b9e2:	687b      	ldr	r3, [r7, #4]
    b9e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    b9e6:	b29b      	uxth	r3, r3
    b9e8:	2b00      	cmp	r3, #0
    b9ea:	d001      	beq.n	b9f0 <usart_write_wait+0x34>
		return STATUS_BUSY;
    b9ec:	2305      	movs	r3, #5
    b9ee:	e010      	b.n	ba12 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    b9f0:	687b      	ldr	r3, [r7, #4]
    b9f2:	0018      	movs	r0, r3
    b9f4:	4b09      	ldr	r3, [pc, #36]	; (ba1c <usart_write_wait+0x60>)
    b9f6:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    b9f8:	68fb      	ldr	r3, [r7, #12]
    b9fa:	1cba      	adds	r2, r7, #2
    b9fc:	8812      	ldrh	r2, [r2, #0]
    b9fe:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    ba00:	46c0      	nop			; (mov r8, r8)
    ba02:	68fb      	ldr	r3, [r7, #12]
    ba04:	7e1b      	ldrb	r3, [r3, #24]
    ba06:	b2db      	uxtb	r3, r3
    ba08:	001a      	movs	r2, r3
    ba0a:	2302      	movs	r3, #2
    ba0c:	4013      	ands	r3, r2
    ba0e:	d0f8      	beq.n	ba02 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    ba10:	2300      	movs	r3, #0
}
    ba12:	0018      	movs	r0, r3
    ba14:	46bd      	mov	sp, r7
    ba16:	b004      	add	sp, #16
    ba18:	bd80      	pop	{r7, pc}
    ba1a:	46c0      	nop			; (mov r8, r8)
    ba1c:	0000b449 	.word	0x0000b449

0000ba20 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    ba20:	b580      	push	{r7, lr}
    ba22:	b084      	sub	sp, #16
    ba24:	af00      	add	r7, sp, #0
    ba26:	6078      	str	r0, [r7, #4]
    ba28:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    ba2a:	687b      	ldr	r3, [r7, #4]
    ba2c:	681b      	ldr	r3, [r3, #0]
    ba2e:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    ba30:	687b      	ldr	r3, [r7, #4]
    ba32:	799b      	ldrb	r3, [r3, #6]
    ba34:	2201      	movs	r2, #1
    ba36:	4053      	eors	r3, r2
    ba38:	b2db      	uxtb	r3, r3
    ba3a:	2b00      	cmp	r3, #0
    ba3c:	d001      	beq.n	ba42 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    ba3e:	231c      	movs	r3, #28
    ba40:	e05e      	b.n	bb00 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    ba42:	687b      	ldr	r3, [r7, #4]
    ba44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    ba46:	b29b      	uxth	r3, r3
    ba48:	2b00      	cmp	r3, #0
    ba4a:	d001      	beq.n	ba50 <usart_read_wait+0x30>
		return STATUS_BUSY;
    ba4c:	2305      	movs	r3, #5
    ba4e:	e057      	b.n	bb00 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    ba50:	68fb      	ldr	r3, [r7, #12]
    ba52:	7e1b      	ldrb	r3, [r3, #24]
    ba54:	b2db      	uxtb	r3, r3
    ba56:	001a      	movs	r2, r3
    ba58:	2304      	movs	r3, #4
    ba5a:	4013      	ands	r3, r2
    ba5c:	d101      	bne.n	ba62 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    ba5e:	2305      	movs	r3, #5
    ba60:	e04e      	b.n	bb00 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    ba62:	687b      	ldr	r3, [r7, #4]
    ba64:	0018      	movs	r0, r3
    ba66:	4b28      	ldr	r3, [pc, #160]	; (bb08 <usart_read_wait+0xe8>)
    ba68:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    ba6a:	68fb      	ldr	r3, [r7, #12]
    ba6c:	8b5b      	ldrh	r3, [r3, #26]
    ba6e:	b29b      	uxth	r3, r3
    ba70:	b2da      	uxtb	r2, r3
    ba72:	230b      	movs	r3, #11
    ba74:	18fb      	adds	r3, r7, r3
    ba76:	213f      	movs	r1, #63	; 0x3f
    ba78:	400a      	ands	r2, r1
    ba7a:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    ba7c:	230b      	movs	r3, #11
    ba7e:	18fb      	adds	r3, r7, r3
    ba80:	781b      	ldrb	r3, [r3, #0]
    ba82:	2b00      	cmp	r3, #0
    ba84:	d036      	beq.n	baf4 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    ba86:	230b      	movs	r3, #11
    ba88:	18fb      	adds	r3, r7, r3
    ba8a:	781b      	ldrb	r3, [r3, #0]
    ba8c:	2202      	movs	r2, #2
    ba8e:	4013      	ands	r3, r2
    ba90:	d004      	beq.n	ba9c <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    ba92:	68fb      	ldr	r3, [r7, #12]
    ba94:	2202      	movs	r2, #2
    ba96:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    ba98:	231a      	movs	r3, #26
    ba9a:	e031      	b.n	bb00 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    ba9c:	230b      	movs	r3, #11
    ba9e:	18fb      	adds	r3, r7, r3
    baa0:	781b      	ldrb	r3, [r3, #0]
    baa2:	2204      	movs	r2, #4
    baa4:	4013      	ands	r3, r2
    baa6:	d004      	beq.n	bab2 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    baa8:	68fb      	ldr	r3, [r7, #12]
    baaa:	2204      	movs	r2, #4
    baac:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    baae:	231e      	movs	r3, #30
    bab0:	e026      	b.n	bb00 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    bab2:	230b      	movs	r3, #11
    bab4:	18fb      	adds	r3, r7, r3
    bab6:	781b      	ldrb	r3, [r3, #0]
    bab8:	2201      	movs	r2, #1
    baba:	4013      	ands	r3, r2
    babc:	d004      	beq.n	bac8 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    babe:	68fb      	ldr	r3, [r7, #12]
    bac0:	2201      	movs	r2, #1
    bac2:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    bac4:	2313      	movs	r3, #19
    bac6:	e01b      	b.n	bb00 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    bac8:	230b      	movs	r3, #11
    baca:	18fb      	adds	r3, r7, r3
    bacc:	781b      	ldrb	r3, [r3, #0]
    bace:	2210      	movs	r2, #16
    bad0:	4013      	ands	r3, r2
    bad2:	d004      	beq.n	bade <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    bad4:	68fb      	ldr	r3, [r7, #12]
    bad6:	2210      	movs	r2, #16
    bad8:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    bada:	2342      	movs	r3, #66	; 0x42
    badc:	e010      	b.n	bb00 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    bade:	230b      	movs	r3, #11
    bae0:	18fb      	adds	r3, r7, r3
    bae2:	781b      	ldrb	r3, [r3, #0]
    bae4:	2220      	movs	r2, #32
    bae6:	4013      	ands	r3, r2
    bae8:	d004      	beq.n	baf4 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    baea:	68fb      	ldr	r3, [r7, #12]
    baec:	2220      	movs	r2, #32
    baee:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    baf0:	2341      	movs	r3, #65	; 0x41
    baf2:	e005      	b.n	bb00 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    baf4:	68fb      	ldr	r3, [r7, #12]
    baf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    baf8:	b29a      	uxth	r2, r3
    bafa:	683b      	ldr	r3, [r7, #0]
    bafc:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    bafe:	2300      	movs	r3, #0
}
    bb00:	0018      	movs	r0, r3
    bb02:	46bd      	mov	sp, r7
    bb04:	b004      	add	sp, #16
    bb06:	bd80      	pop	{r7, pc}
    bb08:	0000b449 	.word	0x0000b449

0000bb0c <usart_is_syncing>:
{
    bb0c:	b580      	push	{r7, lr}
    bb0e:	b084      	sub	sp, #16
    bb10:	af00      	add	r7, sp, #0
    bb12:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    bb14:	687b      	ldr	r3, [r7, #4]
    bb16:	681b      	ldr	r3, [r3, #0]
    bb18:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    bb1a:	68fb      	ldr	r3, [r7, #12]
    bb1c:	69db      	ldr	r3, [r3, #28]
    bb1e:	1e5a      	subs	r2, r3, #1
    bb20:	4193      	sbcs	r3, r2
    bb22:	b2db      	uxtb	r3, r3
}
    bb24:	0018      	movs	r0, r3
    bb26:	46bd      	mov	sp, r7
    bb28:	b004      	add	sp, #16
    bb2a:	bd80      	pop	{r7, pc}

0000bb2c <_usart_wait_for_sync>:
{
    bb2c:	b580      	push	{r7, lr}
    bb2e:	b082      	sub	sp, #8
    bb30:	af00      	add	r7, sp, #0
    bb32:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    bb34:	46c0      	nop			; (mov r8, r8)
    bb36:	687b      	ldr	r3, [r7, #4]
    bb38:	0018      	movs	r0, r3
    bb3a:	4b04      	ldr	r3, [pc, #16]	; (bb4c <_usart_wait_for_sync+0x20>)
    bb3c:	4798      	blx	r3
    bb3e:	1e03      	subs	r3, r0, #0
    bb40:	d1f9      	bne.n	bb36 <_usart_wait_for_sync+0xa>
}
    bb42:	46c0      	nop			; (mov r8, r8)
    bb44:	46bd      	mov	sp, r7
    bb46:	b002      	add	sp, #8
    bb48:	bd80      	pop	{r7, pc}
    bb4a:	46c0      	nop			; (mov r8, r8)
    bb4c:	0000bb0d 	.word	0x0000bb0d

0000bb50 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    bb50:	b580      	push	{r7, lr}
    bb52:	b088      	sub	sp, #32
    bb54:	af00      	add	r7, sp, #0
    bb56:	0002      	movs	r2, r0
    bb58:	1dfb      	adds	r3, r7, #7
    bb5a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    bb5c:	1dfb      	adds	r3, r7, #7
    bb5e:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    bb60:	4ba3      	ldr	r3, [pc, #652]	; (bdf0 <_usart_interrupt_handler+0x2a0>)
    bb62:	0092      	lsls	r2, r2, #2
    bb64:	58d3      	ldr	r3, [r2, r3]
    bb66:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    bb68:	69bb      	ldr	r3, [r7, #24]
    bb6a:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    bb6c:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    bb6e:	69bb      	ldr	r3, [r7, #24]
    bb70:	0018      	movs	r0, r3
    bb72:	4ba0      	ldr	r3, [pc, #640]	; (bdf4 <_usart_interrupt_handler+0x2a4>)
    bb74:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    bb76:	697b      	ldr	r3, [r7, #20]
    bb78:	7e1b      	ldrb	r3, [r3, #24]
    bb7a:	b2da      	uxtb	r2, r3
    bb7c:	2312      	movs	r3, #18
    bb7e:	18fb      	adds	r3, r7, r3
    bb80:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    bb82:	697b      	ldr	r3, [r7, #20]
    bb84:	7d9b      	ldrb	r3, [r3, #22]
    bb86:	b2db      	uxtb	r3, r3
    bb88:	b29a      	uxth	r2, r3
    bb8a:	2312      	movs	r3, #18
    bb8c:	18fb      	adds	r3, r7, r3
    bb8e:	2112      	movs	r1, #18
    bb90:	1879      	adds	r1, r7, r1
    bb92:	8809      	ldrh	r1, [r1, #0]
    bb94:	400a      	ands	r2, r1
    bb96:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    bb98:	69bb      	ldr	r3, [r7, #24]
    bb9a:	2230      	movs	r2, #48	; 0x30
    bb9c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    bb9e:	69ba      	ldr	r2, [r7, #24]
    bba0:	2131      	movs	r1, #49	; 0x31
    bba2:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    bba4:	4013      	ands	r3, r2
    bba6:	b2da      	uxtb	r2, r3
    bba8:	2310      	movs	r3, #16
    bbaa:	18fb      	adds	r3, r7, r3
    bbac:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    bbae:	2312      	movs	r3, #18
    bbb0:	18fb      	adds	r3, r7, r3
    bbb2:	881b      	ldrh	r3, [r3, #0]
    bbb4:	2201      	movs	r2, #1
    bbb6:	4013      	ands	r3, r2
    bbb8:	d044      	beq.n	bc44 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    bbba:	69bb      	ldr	r3, [r7, #24]
    bbbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    bbbe:	b29b      	uxth	r3, r3
    bbc0:	2b00      	cmp	r3, #0
    bbc2:	d03c      	beq.n	bc3e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    bbc4:	69bb      	ldr	r3, [r7, #24]
    bbc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bbc8:	781b      	ldrb	r3, [r3, #0]
    bbca:	b2da      	uxtb	r2, r3
    bbcc:	231c      	movs	r3, #28
    bbce:	18fb      	adds	r3, r7, r3
    bbd0:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    bbd2:	69bb      	ldr	r3, [r7, #24]
    bbd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bbd6:	1c5a      	adds	r2, r3, #1
    bbd8:	69bb      	ldr	r3, [r7, #24]
    bbda:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    bbdc:	69bb      	ldr	r3, [r7, #24]
    bbde:	795b      	ldrb	r3, [r3, #5]
    bbe0:	2b01      	cmp	r3, #1
    bbe2:	d113      	bne.n	bc0c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    bbe4:	69bb      	ldr	r3, [r7, #24]
    bbe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bbe8:	781b      	ldrb	r3, [r3, #0]
    bbea:	b2db      	uxtb	r3, r3
    bbec:	021b      	lsls	r3, r3, #8
    bbee:	b21a      	sxth	r2, r3
    bbf0:	231c      	movs	r3, #28
    bbf2:	18fb      	adds	r3, r7, r3
    bbf4:	2100      	movs	r1, #0
    bbf6:	5e5b      	ldrsh	r3, [r3, r1]
    bbf8:	4313      	orrs	r3, r2
    bbfa:	b21a      	sxth	r2, r3
    bbfc:	231c      	movs	r3, #28
    bbfe:	18fb      	adds	r3, r7, r3
    bc00:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    bc02:	69bb      	ldr	r3, [r7, #24]
    bc04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bc06:	1c5a      	adds	r2, r3, #1
    bc08:	69bb      	ldr	r3, [r7, #24]
    bc0a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    bc0c:	231c      	movs	r3, #28
    bc0e:	18fb      	adds	r3, r7, r3
    bc10:	881b      	ldrh	r3, [r3, #0]
    bc12:	05db      	lsls	r3, r3, #23
    bc14:	0ddb      	lsrs	r3, r3, #23
    bc16:	b29a      	uxth	r2, r3
    bc18:	697b      	ldr	r3, [r7, #20]
    bc1a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    bc1c:	69bb      	ldr	r3, [r7, #24]
    bc1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    bc20:	b29b      	uxth	r3, r3
    bc22:	3b01      	subs	r3, #1
    bc24:	b29b      	uxth	r3, r3
    bc26:	69ba      	ldr	r2, [r7, #24]
    bc28:	1c19      	adds	r1, r3, #0
    bc2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    bc2c:	2b00      	cmp	r3, #0
    bc2e:	d109      	bne.n	bc44 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    bc30:	697b      	ldr	r3, [r7, #20]
    bc32:	2201      	movs	r2, #1
    bc34:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    bc36:	697b      	ldr	r3, [r7, #20]
    bc38:	2202      	movs	r2, #2
    bc3a:	759a      	strb	r2, [r3, #22]
    bc3c:	e002      	b.n	bc44 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    bc3e:	697b      	ldr	r3, [r7, #20]
    bc40:	2201      	movs	r2, #1
    bc42:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    bc44:	2312      	movs	r3, #18
    bc46:	18fb      	adds	r3, r7, r3
    bc48:	881b      	ldrh	r3, [r3, #0]
    bc4a:	2202      	movs	r2, #2
    bc4c:	4013      	ands	r3, r2
    bc4e:	d011      	beq.n	bc74 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    bc50:	697b      	ldr	r3, [r7, #20]
    bc52:	2202      	movs	r2, #2
    bc54:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    bc56:	69bb      	ldr	r3, [r7, #24]
    bc58:	2233      	movs	r2, #51	; 0x33
    bc5a:	2100      	movs	r1, #0
    bc5c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    bc5e:	2310      	movs	r3, #16
    bc60:	18fb      	adds	r3, r7, r3
    bc62:	881b      	ldrh	r3, [r3, #0]
    bc64:	2201      	movs	r2, #1
    bc66:	4013      	ands	r3, r2
    bc68:	d004      	beq.n	bc74 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    bc6a:	69bb      	ldr	r3, [r7, #24]
    bc6c:	68db      	ldr	r3, [r3, #12]
    bc6e:	69ba      	ldr	r2, [r7, #24]
    bc70:	0010      	movs	r0, r2
    bc72:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    bc74:	2312      	movs	r3, #18
    bc76:	18fb      	adds	r3, r7, r3
    bc78:	881b      	ldrh	r3, [r3, #0]
    bc7a:	2204      	movs	r2, #4
    bc7c:	4013      	ands	r3, r2
    bc7e:	d100      	bne.n	bc82 <_usart_interrupt_handler+0x132>
    bc80:	e0bd      	b.n	bdfe <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    bc82:	69bb      	ldr	r3, [r7, #24]
    bc84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    bc86:	b29b      	uxth	r3, r3
    bc88:	2b00      	cmp	r3, #0
    bc8a:	d100      	bne.n	bc8e <_usart_interrupt_handler+0x13e>
    bc8c:	e0b4      	b.n	bdf8 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    bc8e:	697b      	ldr	r3, [r7, #20]
    bc90:	8b5b      	ldrh	r3, [r3, #26]
    bc92:	b29b      	uxth	r3, r3
    bc94:	b2da      	uxtb	r2, r3
    bc96:	231f      	movs	r3, #31
    bc98:	18fb      	adds	r3, r7, r3
    bc9a:	213f      	movs	r1, #63	; 0x3f
    bc9c:	400a      	ands	r2, r1
    bc9e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    bca0:	231f      	movs	r3, #31
    bca2:	18fb      	adds	r3, r7, r3
    bca4:	781b      	ldrb	r3, [r3, #0]
    bca6:	2208      	movs	r2, #8
    bca8:	4013      	ands	r3, r2
    bcaa:	d007      	beq.n	bcbc <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    bcac:	231f      	movs	r3, #31
    bcae:	18fb      	adds	r3, r7, r3
    bcb0:	221f      	movs	r2, #31
    bcb2:	18ba      	adds	r2, r7, r2
    bcb4:	7812      	ldrb	r2, [r2, #0]
    bcb6:	2108      	movs	r1, #8
    bcb8:	438a      	bics	r2, r1
    bcba:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    bcbc:	231f      	movs	r3, #31
    bcbe:	18fb      	adds	r3, r7, r3
    bcc0:	781b      	ldrb	r3, [r3, #0]
    bcc2:	2b00      	cmp	r3, #0
    bcc4:	d050      	beq.n	bd68 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    bcc6:	231f      	movs	r3, #31
    bcc8:	18fb      	adds	r3, r7, r3
    bcca:	781b      	ldrb	r3, [r3, #0]
    bccc:	2202      	movs	r2, #2
    bcce:	4013      	ands	r3, r2
    bcd0:	d007      	beq.n	bce2 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    bcd2:	69bb      	ldr	r3, [r7, #24]
    bcd4:	2232      	movs	r2, #50	; 0x32
    bcd6:	211a      	movs	r1, #26
    bcd8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    bcda:	697b      	ldr	r3, [r7, #20]
    bcdc:	2202      	movs	r2, #2
    bcde:	835a      	strh	r2, [r3, #26]
    bce0:	e036      	b.n	bd50 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    bce2:	231f      	movs	r3, #31
    bce4:	18fb      	adds	r3, r7, r3
    bce6:	781b      	ldrb	r3, [r3, #0]
    bce8:	2204      	movs	r2, #4
    bcea:	4013      	ands	r3, r2
    bcec:	d007      	beq.n	bcfe <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    bcee:	69bb      	ldr	r3, [r7, #24]
    bcf0:	2232      	movs	r2, #50	; 0x32
    bcf2:	211e      	movs	r1, #30
    bcf4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    bcf6:	697b      	ldr	r3, [r7, #20]
    bcf8:	2204      	movs	r2, #4
    bcfa:	835a      	strh	r2, [r3, #26]
    bcfc:	e028      	b.n	bd50 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    bcfe:	231f      	movs	r3, #31
    bd00:	18fb      	adds	r3, r7, r3
    bd02:	781b      	ldrb	r3, [r3, #0]
    bd04:	2201      	movs	r2, #1
    bd06:	4013      	ands	r3, r2
    bd08:	d007      	beq.n	bd1a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    bd0a:	69bb      	ldr	r3, [r7, #24]
    bd0c:	2232      	movs	r2, #50	; 0x32
    bd0e:	2113      	movs	r1, #19
    bd10:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    bd12:	697b      	ldr	r3, [r7, #20]
    bd14:	2201      	movs	r2, #1
    bd16:	835a      	strh	r2, [r3, #26]
    bd18:	e01a      	b.n	bd50 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    bd1a:	231f      	movs	r3, #31
    bd1c:	18fb      	adds	r3, r7, r3
    bd1e:	781b      	ldrb	r3, [r3, #0]
    bd20:	2210      	movs	r2, #16
    bd22:	4013      	ands	r3, r2
    bd24:	d007      	beq.n	bd36 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    bd26:	69bb      	ldr	r3, [r7, #24]
    bd28:	2232      	movs	r2, #50	; 0x32
    bd2a:	2142      	movs	r1, #66	; 0x42
    bd2c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    bd2e:	697b      	ldr	r3, [r7, #20]
    bd30:	2210      	movs	r2, #16
    bd32:	835a      	strh	r2, [r3, #26]
    bd34:	e00c      	b.n	bd50 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    bd36:	231f      	movs	r3, #31
    bd38:	18fb      	adds	r3, r7, r3
    bd3a:	781b      	ldrb	r3, [r3, #0]
    bd3c:	2220      	movs	r2, #32
    bd3e:	4013      	ands	r3, r2
    bd40:	d006      	beq.n	bd50 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    bd42:	69bb      	ldr	r3, [r7, #24]
    bd44:	2232      	movs	r2, #50	; 0x32
    bd46:	2141      	movs	r1, #65	; 0x41
    bd48:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    bd4a:	697b      	ldr	r3, [r7, #20]
    bd4c:	2220      	movs	r2, #32
    bd4e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    bd50:	2310      	movs	r3, #16
    bd52:	18fb      	adds	r3, r7, r3
    bd54:	881b      	ldrh	r3, [r3, #0]
    bd56:	2204      	movs	r2, #4
    bd58:	4013      	ands	r3, r2
				if (callback_status
    bd5a:	d050      	beq.n	bdfe <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    bd5c:	69bb      	ldr	r3, [r7, #24]
    bd5e:	695b      	ldr	r3, [r3, #20]
    bd60:	69ba      	ldr	r2, [r7, #24]
    bd62:	0010      	movs	r0, r2
    bd64:	4798      	blx	r3
    bd66:	e04a      	b.n	bdfe <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    bd68:	697b      	ldr	r3, [r7, #20]
    bd6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    bd6c:	b29a      	uxth	r2, r3
    bd6e:	230e      	movs	r3, #14
    bd70:	18fb      	adds	r3, r7, r3
    bd72:	05d2      	lsls	r2, r2, #23
    bd74:	0dd2      	lsrs	r2, r2, #23
    bd76:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    bd78:	69bb      	ldr	r3, [r7, #24]
    bd7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bd7c:	220e      	movs	r2, #14
    bd7e:	18ba      	adds	r2, r7, r2
    bd80:	8812      	ldrh	r2, [r2, #0]
    bd82:	b2d2      	uxtb	r2, r2
    bd84:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    bd86:	69bb      	ldr	r3, [r7, #24]
    bd88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bd8a:	1c5a      	adds	r2, r3, #1
    bd8c:	69bb      	ldr	r3, [r7, #24]
    bd8e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    bd90:	69bb      	ldr	r3, [r7, #24]
    bd92:	795b      	ldrb	r3, [r3, #5]
    bd94:	2b01      	cmp	r3, #1
    bd96:	d10d      	bne.n	bdb4 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    bd98:	69bb      	ldr	r3, [r7, #24]
    bd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bd9c:	220e      	movs	r2, #14
    bd9e:	18ba      	adds	r2, r7, r2
    bda0:	8812      	ldrh	r2, [r2, #0]
    bda2:	0a12      	lsrs	r2, r2, #8
    bda4:	b292      	uxth	r2, r2
    bda6:	b2d2      	uxtb	r2, r2
    bda8:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    bdaa:	69bb      	ldr	r3, [r7, #24]
    bdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bdae:	1c5a      	adds	r2, r3, #1
    bdb0:	69bb      	ldr	r3, [r7, #24]
    bdb2:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    bdb4:	69bb      	ldr	r3, [r7, #24]
    bdb6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    bdb8:	b29b      	uxth	r3, r3
    bdba:	3b01      	subs	r3, #1
    bdbc:	b29b      	uxth	r3, r3
    bdbe:	69ba      	ldr	r2, [r7, #24]
    bdc0:	1c19      	adds	r1, r3, #0
    bdc2:	8591      	strh	r1, [r2, #44]	; 0x2c
    bdc4:	2b00      	cmp	r3, #0
    bdc6:	d11a      	bne.n	bdfe <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    bdc8:	697b      	ldr	r3, [r7, #20]
    bdca:	2204      	movs	r2, #4
    bdcc:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    bdce:	69bb      	ldr	r3, [r7, #24]
    bdd0:	2232      	movs	r2, #50	; 0x32
    bdd2:	2100      	movs	r1, #0
    bdd4:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    bdd6:	2310      	movs	r3, #16
    bdd8:	18fb      	adds	r3, r7, r3
    bdda:	881b      	ldrh	r3, [r3, #0]
    bddc:	2202      	movs	r2, #2
    bdde:	4013      	ands	r3, r2
					if (callback_status
    bde0:	d00d      	beq.n	bdfe <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    bde2:	69bb      	ldr	r3, [r7, #24]
    bde4:	691b      	ldr	r3, [r3, #16]
    bde6:	69ba      	ldr	r2, [r7, #24]
    bde8:	0010      	movs	r0, r2
    bdea:	4798      	blx	r3
    bdec:	e007      	b.n	bdfe <_usart_interrupt_handler+0x2ae>
    bdee:	46c0      	nop			; (mov r8, r8)
    bdf0:	20000428 	.word	0x20000428
    bdf4:	0000bb2d 	.word	0x0000bb2d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    bdf8:	697b      	ldr	r3, [r7, #20]
    bdfa:	2204      	movs	r2, #4
    bdfc:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    bdfe:	2312      	movs	r3, #18
    be00:	18fb      	adds	r3, r7, r3
    be02:	881b      	ldrh	r3, [r3, #0]
    be04:	2210      	movs	r2, #16
    be06:	4013      	ands	r3, r2
    be08:	d010      	beq.n	be2c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    be0a:	697b      	ldr	r3, [r7, #20]
    be0c:	2210      	movs	r2, #16
    be0e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    be10:	697b      	ldr	r3, [r7, #20]
    be12:	2210      	movs	r2, #16
    be14:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    be16:	2310      	movs	r3, #16
    be18:	18fb      	adds	r3, r7, r3
    be1a:	881b      	ldrh	r3, [r3, #0]
    be1c:	2210      	movs	r2, #16
    be1e:	4013      	ands	r3, r2
    be20:	d004      	beq.n	be2c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    be22:	69bb      	ldr	r3, [r7, #24]
    be24:	69db      	ldr	r3, [r3, #28]
    be26:	69ba      	ldr	r2, [r7, #24]
    be28:	0010      	movs	r0, r2
    be2a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    be2c:	2312      	movs	r3, #18
    be2e:	18fb      	adds	r3, r7, r3
    be30:	881b      	ldrh	r3, [r3, #0]
    be32:	2220      	movs	r2, #32
    be34:	4013      	ands	r3, r2
    be36:	d010      	beq.n	be5a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    be38:	697b      	ldr	r3, [r7, #20]
    be3a:	2220      	movs	r2, #32
    be3c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    be3e:	697b      	ldr	r3, [r7, #20]
    be40:	2220      	movs	r2, #32
    be42:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    be44:	2310      	movs	r3, #16
    be46:	18fb      	adds	r3, r7, r3
    be48:	881b      	ldrh	r3, [r3, #0]
    be4a:	2208      	movs	r2, #8
    be4c:	4013      	ands	r3, r2
    be4e:	d004      	beq.n	be5a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    be50:	69bb      	ldr	r3, [r7, #24]
    be52:	699b      	ldr	r3, [r3, #24]
    be54:	69ba      	ldr	r2, [r7, #24]
    be56:	0010      	movs	r0, r2
    be58:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    be5a:	2312      	movs	r3, #18
    be5c:	18fb      	adds	r3, r7, r3
    be5e:	881b      	ldrh	r3, [r3, #0]
    be60:	2208      	movs	r2, #8
    be62:	4013      	ands	r3, r2
    be64:	d010      	beq.n	be88 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    be66:	697b      	ldr	r3, [r7, #20]
    be68:	2208      	movs	r2, #8
    be6a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    be6c:	697b      	ldr	r3, [r7, #20]
    be6e:	2208      	movs	r2, #8
    be70:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    be72:	2310      	movs	r3, #16
    be74:	18fb      	adds	r3, r7, r3
    be76:	881b      	ldrh	r3, [r3, #0]
    be78:	2220      	movs	r2, #32
    be7a:	4013      	ands	r3, r2
    be7c:	d004      	beq.n	be88 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    be7e:	69bb      	ldr	r3, [r7, #24]
    be80:	6a1b      	ldr	r3, [r3, #32]
    be82:	69ba      	ldr	r2, [r7, #24]
    be84:	0010      	movs	r0, r2
    be86:	4798      	blx	r3
		}
	}
#endif
}
    be88:	46c0      	nop			; (mov r8, r8)
    be8a:	46bd      	mov	sp, r7
    be8c:	b008      	add	sp, #32
    be8e:	bd80      	pop	{r7, pc}

0000be90 <system_gclk_gen_get_config_defaults>:
{
    be90:	b580      	push	{r7, lr}
    be92:	b082      	sub	sp, #8
    be94:	af00      	add	r7, sp, #0
    be96:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    be98:	687b      	ldr	r3, [r7, #4]
    be9a:	2201      	movs	r2, #1
    be9c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    be9e:	687b      	ldr	r3, [r7, #4]
    bea0:	2200      	movs	r2, #0
    bea2:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    bea4:	687b      	ldr	r3, [r7, #4]
    bea6:	2206      	movs	r2, #6
    bea8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    beaa:	687b      	ldr	r3, [r7, #4]
    beac:	2200      	movs	r2, #0
    beae:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    beb0:	687b      	ldr	r3, [r7, #4]
    beb2:	2200      	movs	r2, #0
    beb4:	725a      	strb	r2, [r3, #9]
}
    beb6:	46c0      	nop			; (mov r8, r8)
    beb8:	46bd      	mov	sp, r7
    beba:	b002      	add	sp, #8
    bebc:	bd80      	pop	{r7, pc}

0000bebe <system_clock_source_osc8m_get_config_defaults>:
{
    bebe:	b580      	push	{r7, lr}
    bec0:	b082      	sub	sp, #8
    bec2:	af00      	add	r7, sp, #0
    bec4:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    bec6:	687b      	ldr	r3, [r7, #4]
    bec8:	2203      	movs	r2, #3
    beca:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    becc:	687b      	ldr	r3, [r7, #4]
    bece:	2200      	movs	r2, #0
    bed0:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    bed2:	687b      	ldr	r3, [r7, #4]
    bed4:	2201      	movs	r2, #1
    bed6:	709a      	strb	r2, [r3, #2]
}
    bed8:	46c0      	nop			; (mov r8, r8)
    beda:	46bd      	mov	sp, r7
    bedc:	b002      	add	sp, #8
    bede:	bd80      	pop	{r7, pc}

0000bee0 <system_cpu_clock_set_divider>:
{
    bee0:	b580      	push	{r7, lr}
    bee2:	b082      	sub	sp, #8
    bee4:	af00      	add	r7, sp, #0
    bee6:	0002      	movs	r2, r0
    bee8:	1dfb      	adds	r3, r7, #7
    beea:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    beec:	4a03      	ldr	r2, [pc, #12]	; (befc <system_cpu_clock_set_divider+0x1c>)
    beee:	1dfb      	adds	r3, r7, #7
    bef0:	781b      	ldrb	r3, [r3, #0]
    bef2:	7213      	strb	r3, [r2, #8]
}
    bef4:	46c0      	nop			; (mov r8, r8)
    bef6:	46bd      	mov	sp, r7
    bef8:	b002      	add	sp, #8
    befa:	bd80      	pop	{r7, pc}
    befc:	40000400 	.word	0x40000400

0000bf00 <system_apb_clock_set_divider>:
{
    bf00:	b580      	push	{r7, lr}
    bf02:	b082      	sub	sp, #8
    bf04:	af00      	add	r7, sp, #0
    bf06:	0002      	movs	r2, r0
    bf08:	1dfb      	adds	r3, r7, #7
    bf0a:	701a      	strb	r2, [r3, #0]
    bf0c:	1dbb      	adds	r3, r7, #6
    bf0e:	1c0a      	adds	r2, r1, #0
    bf10:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    bf12:	1dfb      	adds	r3, r7, #7
    bf14:	781b      	ldrb	r3, [r3, #0]
    bf16:	2b01      	cmp	r3, #1
    bf18:	d008      	beq.n	bf2c <system_apb_clock_set_divider+0x2c>
    bf1a:	2b02      	cmp	r3, #2
    bf1c:	d00b      	beq.n	bf36 <system_apb_clock_set_divider+0x36>
    bf1e:	2b00      	cmp	r3, #0
    bf20:	d10e      	bne.n	bf40 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    bf22:	4a0b      	ldr	r2, [pc, #44]	; (bf50 <system_apb_clock_set_divider+0x50>)
    bf24:	1dbb      	adds	r3, r7, #6
    bf26:	781b      	ldrb	r3, [r3, #0]
    bf28:	7253      	strb	r3, [r2, #9]
			break;
    bf2a:	e00b      	b.n	bf44 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    bf2c:	4a08      	ldr	r2, [pc, #32]	; (bf50 <system_apb_clock_set_divider+0x50>)
    bf2e:	1dbb      	adds	r3, r7, #6
    bf30:	781b      	ldrb	r3, [r3, #0]
    bf32:	7293      	strb	r3, [r2, #10]
			break;
    bf34:	e006      	b.n	bf44 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    bf36:	4a06      	ldr	r2, [pc, #24]	; (bf50 <system_apb_clock_set_divider+0x50>)
    bf38:	1dbb      	adds	r3, r7, #6
    bf3a:	781b      	ldrb	r3, [r3, #0]
    bf3c:	72d3      	strb	r3, [r2, #11]
			break;
    bf3e:	e001      	b.n	bf44 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    bf40:	2317      	movs	r3, #23
    bf42:	e000      	b.n	bf46 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    bf44:	2300      	movs	r3, #0
}
    bf46:	0018      	movs	r0, r3
    bf48:	46bd      	mov	sp, r7
    bf4a:	b002      	add	sp, #8
    bf4c:	bd80      	pop	{r7, pc}
    bf4e:	46c0      	nop			; (mov r8, r8)
    bf50:	40000400 	.word	0x40000400

0000bf54 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    bf54:	b580      	push	{r7, lr}
    bf56:	b082      	sub	sp, #8
    bf58:	af00      	add	r7, sp, #0
    bf5a:	0002      	movs	r2, r0
    bf5c:	1dfb      	adds	r3, r7, #7
    bf5e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    bf60:	4a08      	ldr	r2, [pc, #32]	; (bf84 <system_flash_set_waitstates+0x30>)
    bf62:	1dfb      	adds	r3, r7, #7
    bf64:	781b      	ldrb	r3, [r3, #0]
    bf66:	210f      	movs	r1, #15
    bf68:	400b      	ands	r3, r1
    bf6a:	b2d9      	uxtb	r1, r3
    bf6c:	6853      	ldr	r3, [r2, #4]
    bf6e:	200f      	movs	r0, #15
    bf70:	4001      	ands	r1, r0
    bf72:	0049      	lsls	r1, r1, #1
    bf74:	201e      	movs	r0, #30
    bf76:	4383      	bics	r3, r0
    bf78:	430b      	orrs	r3, r1
    bf7a:	6053      	str	r3, [r2, #4]
}
    bf7c:	46c0      	nop			; (mov r8, r8)
    bf7e:	46bd      	mov	sp, r7
    bf80:	b002      	add	sp, #8
    bf82:	bd80      	pop	{r7, pc}
    bf84:	41004000 	.word	0x41004000

0000bf88 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    bf88:	b580      	push	{r7, lr}
    bf8a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    bf8c:	46c0      	nop			; (mov r8, r8)
    bf8e:	4b04      	ldr	r3, [pc, #16]	; (bfa0 <_system_dfll_wait_for_sync+0x18>)
    bf90:	68db      	ldr	r3, [r3, #12]
    bf92:	2210      	movs	r2, #16
    bf94:	4013      	ands	r3, r2
    bf96:	d0fa      	beq.n	bf8e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    bf98:	46c0      	nop			; (mov r8, r8)
    bf9a:	46bd      	mov	sp, r7
    bf9c:	bd80      	pop	{r7, pc}
    bf9e:	46c0      	nop			; (mov r8, r8)
    bfa0:	40000800 	.word	0x40000800

0000bfa4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    bfa4:	b580      	push	{r7, lr}
    bfa6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    bfa8:	4b0c      	ldr	r3, [pc, #48]	; (bfdc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    bfaa:	2202      	movs	r2, #2
    bfac:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    bfae:	4b0c      	ldr	r3, [pc, #48]	; (bfe0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    bfb0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    bfb2:	4a0a      	ldr	r2, [pc, #40]	; (bfdc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    bfb4:	4b0b      	ldr	r3, [pc, #44]	; (bfe4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    bfb6:	689b      	ldr	r3, [r3, #8]
    bfb8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    bfba:	4a08      	ldr	r2, [pc, #32]	; (bfdc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    bfbc:	4b09      	ldr	r3, [pc, #36]	; (bfe4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    bfbe:	685b      	ldr	r3, [r3, #4]
    bfc0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    bfc2:	4b06      	ldr	r3, [pc, #24]	; (bfdc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    bfc4:	2200      	movs	r2, #0
    bfc6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    bfc8:	4b05      	ldr	r3, [pc, #20]	; (bfe0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    bfca:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    bfcc:	4a03      	ldr	r2, [pc, #12]	; (bfdc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    bfce:	4b05      	ldr	r3, [pc, #20]	; (bfe4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    bfd0:	681b      	ldr	r3, [r3, #0]
    bfd2:	b29b      	uxth	r3, r3
    bfd4:	8493      	strh	r3, [r2, #36]	; 0x24
}
    bfd6:	46c0      	nop			; (mov r8, r8)
    bfd8:	46bd      	mov	sp, r7
    bfda:	bd80      	pop	{r7, pc}
    bfdc:	40000800 	.word	0x40000800
    bfe0:	0000bf89 	.word	0x0000bf89
    bfe4:	2000026c 	.word	0x2000026c

0000bfe8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    bfe8:	b580      	push	{r7, lr}
    bfea:	b082      	sub	sp, #8
    bfec:	af00      	add	r7, sp, #0
    bfee:	0002      	movs	r2, r0
    bff0:	1dfb      	adds	r3, r7, #7
    bff2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    bff4:	1dfb      	adds	r3, r7, #7
    bff6:	781b      	ldrb	r3, [r3, #0]
    bff8:	2b08      	cmp	r3, #8
    bffa:	d840      	bhi.n	c07e <system_clock_source_get_hz+0x96>
    bffc:	009a      	lsls	r2, r3, #2
    bffe:	4b22      	ldr	r3, [pc, #136]	; (c088 <system_clock_source_get_hz+0xa0>)
    c000:	18d3      	adds	r3, r2, r3
    c002:	681b      	ldr	r3, [r3, #0]
    c004:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    c006:	4b21      	ldr	r3, [pc, #132]	; (c08c <system_clock_source_get_hz+0xa4>)
    c008:	691b      	ldr	r3, [r3, #16]
    c00a:	e039      	b.n	c080 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    c00c:	4b20      	ldr	r3, [pc, #128]	; (c090 <system_clock_source_get_hz+0xa8>)
    c00e:	6a1b      	ldr	r3, [r3, #32]
    c010:	059b      	lsls	r3, r3, #22
    c012:	0f9b      	lsrs	r3, r3, #30
    c014:	b2db      	uxtb	r3, r3
    c016:	001a      	movs	r2, r3
    c018:	4b1e      	ldr	r3, [pc, #120]	; (c094 <system_clock_source_get_hz+0xac>)
    c01a:	40d3      	lsrs	r3, r2
    c01c:	e030      	b.n	c080 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    c01e:	2380      	movs	r3, #128	; 0x80
    c020:	021b      	lsls	r3, r3, #8
    c022:	e02d      	b.n	c080 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    c024:	2380      	movs	r3, #128	; 0x80
    c026:	021b      	lsls	r3, r3, #8
    c028:	e02a      	b.n	c080 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    c02a:	4b18      	ldr	r3, [pc, #96]	; (c08c <system_clock_source_get_hz+0xa4>)
    c02c:	695b      	ldr	r3, [r3, #20]
    c02e:	e027      	b.n	c080 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    c030:	4b16      	ldr	r3, [pc, #88]	; (c08c <system_clock_source_get_hz+0xa4>)
    c032:	681b      	ldr	r3, [r3, #0]
    c034:	2202      	movs	r2, #2
    c036:	4013      	ands	r3, r2
    c038:	d101      	bne.n	c03e <system_clock_source_get_hz+0x56>
			return 0;
    c03a:	2300      	movs	r3, #0
    c03c:	e020      	b.n	c080 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    c03e:	4b16      	ldr	r3, [pc, #88]	; (c098 <system_clock_source_get_hz+0xb0>)
    c040:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    c042:	4b12      	ldr	r3, [pc, #72]	; (c08c <system_clock_source_get_hz+0xa4>)
    c044:	681b      	ldr	r3, [r3, #0]
    c046:	2204      	movs	r2, #4
    c048:	4013      	ands	r3, r2
    c04a:	d009      	beq.n	c060 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    c04c:	2000      	movs	r0, #0
    c04e:	4b13      	ldr	r3, [pc, #76]	; (c09c <system_clock_source_get_hz+0xb4>)
    c050:	4798      	blx	r3
    c052:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    c054:	4b0d      	ldr	r3, [pc, #52]	; (c08c <system_clock_source_get_hz+0xa4>)
    c056:	689b      	ldr	r3, [r3, #8]
    c058:	041b      	lsls	r3, r3, #16
    c05a:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    c05c:	4353      	muls	r3, r2
    c05e:	e00f      	b.n	c080 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    c060:	4b0f      	ldr	r3, [pc, #60]	; (c0a0 <system_clock_source_get_hz+0xb8>)
    c062:	e00d      	b.n	c080 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    c064:	4a0a      	ldr	r2, [pc, #40]	; (c090 <system_clock_source_get_hz+0xa8>)
    c066:	2350      	movs	r3, #80	; 0x50
    c068:	5cd3      	ldrb	r3, [r2, r3]
    c06a:	b2db      	uxtb	r3, r3
    c06c:	001a      	movs	r2, r3
    c06e:	2304      	movs	r3, #4
    c070:	4013      	ands	r3, r2
    c072:	d101      	bne.n	c078 <system_clock_source_get_hz+0x90>
			return 0;
    c074:	2300      	movs	r3, #0
    c076:	e003      	b.n	c080 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    c078:	4b04      	ldr	r3, [pc, #16]	; (c08c <system_clock_source_get_hz+0xa4>)
    c07a:	68db      	ldr	r3, [r3, #12]
    c07c:	e000      	b.n	c080 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    c07e:	2300      	movs	r3, #0
	}
}
    c080:	0018      	movs	r0, r3
    c082:	46bd      	mov	sp, r7
    c084:	b002      	add	sp, #8
    c086:	bd80      	pop	{r7, pc}
    c088:	00010958 	.word	0x00010958
    c08c:	2000026c 	.word	0x2000026c
    c090:	40000800 	.word	0x40000800
    c094:	007a1200 	.word	0x007a1200
    c098:	0000bf89 	.word	0x0000bf89
    c09c:	0000c725 	.word	0x0000c725
    c0a0:	02dc6c00 	.word	0x02dc6c00

0000c0a4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    c0a4:	b580      	push	{r7, lr}
    c0a6:	b084      	sub	sp, #16
    c0a8:	af00      	add	r7, sp, #0
    c0aa:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    c0ac:	4b1a      	ldr	r3, [pc, #104]	; (c118 <system_clock_source_osc8m_set_config+0x74>)
    c0ae:	6a1b      	ldr	r3, [r3, #32]
    c0b0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    c0b2:	687b      	ldr	r3, [r7, #4]
    c0b4:	781b      	ldrb	r3, [r3, #0]
    c0b6:	1c1a      	adds	r2, r3, #0
    c0b8:	2303      	movs	r3, #3
    c0ba:	4013      	ands	r3, r2
    c0bc:	b2da      	uxtb	r2, r3
    c0be:	230d      	movs	r3, #13
    c0c0:	18fb      	adds	r3, r7, r3
    c0c2:	2103      	movs	r1, #3
    c0c4:	400a      	ands	r2, r1
    c0c6:	0010      	movs	r0, r2
    c0c8:	781a      	ldrb	r2, [r3, #0]
    c0ca:	2103      	movs	r1, #3
    c0cc:	438a      	bics	r2, r1
    c0ce:	1c11      	adds	r1, r2, #0
    c0d0:	1c02      	adds	r2, r0, #0
    c0d2:	430a      	orrs	r2, r1
    c0d4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    c0d6:	687b      	ldr	r3, [r7, #4]
    c0d8:	789a      	ldrb	r2, [r3, #2]
    c0da:	230c      	movs	r3, #12
    c0dc:	18fb      	adds	r3, r7, r3
    c0de:	01d0      	lsls	r0, r2, #7
    c0e0:	781a      	ldrb	r2, [r3, #0]
    c0e2:	217f      	movs	r1, #127	; 0x7f
    c0e4:	400a      	ands	r2, r1
    c0e6:	1c11      	adds	r1, r2, #0
    c0e8:	1c02      	adds	r2, r0, #0
    c0ea:	430a      	orrs	r2, r1
    c0ec:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    c0ee:	687b      	ldr	r3, [r7, #4]
    c0f0:	785a      	ldrb	r2, [r3, #1]
    c0f2:	230c      	movs	r3, #12
    c0f4:	18fb      	adds	r3, r7, r3
    c0f6:	2101      	movs	r1, #1
    c0f8:	400a      	ands	r2, r1
    c0fa:	0190      	lsls	r0, r2, #6
    c0fc:	781a      	ldrb	r2, [r3, #0]
    c0fe:	2140      	movs	r1, #64	; 0x40
    c100:	438a      	bics	r2, r1
    c102:	1c11      	adds	r1, r2, #0
    c104:	1c02      	adds	r2, r0, #0
    c106:	430a      	orrs	r2, r1
    c108:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    c10a:	4b03      	ldr	r3, [pc, #12]	; (c118 <system_clock_source_osc8m_set_config+0x74>)
    c10c:	68fa      	ldr	r2, [r7, #12]
    c10e:	621a      	str	r2, [r3, #32]
}
    c110:	46c0      	nop			; (mov r8, r8)
    c112:	46bd      	mov	sp, r7
    c114:	b004      	add	sp, #16
    c116:	bd80      	pop	{r7, pc}
    c118:	40000800 	.word	0x40000800

0000c11c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    c11c:	b580      	push	{r7, lr}
    c11e:	b082      	sub	sp, #8
    c120:	af00      	add	r7, sp, #0
    c122:	0002      	movs	r2, r0
    c124:	1dfb      	adds	r3, r7, #7
    c126:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    c128:	1dfb      	adds	r3, r7, #7
    c12a:	781b      	ldrb	r3, [r3, #0]
    c12c:	2b08      	cmp	r3, #8
    c12e:	d83b      	bhi.n	c1a8 <system_clock_source_enable+0x8c>
    c130:	009a      	lsls	r2, r3, #2
    c132:	4b21      	ldr	r3, [pc, #132]	; (c1b8 <system_clock_source_enable+0x9c>)
    c134:	18d3      	adds	r3, r2, r3
    c136:	681b      	ldr	r3, [r3, #0]
    c138:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    c13a:	4b20      	ldr	r3, [pc, #128]	; (c1bc <system_clock_source_enable+0xa0>)
    c13c:	4a1f      	ldr	r2, [pc, #124]	; (c1bc <system_clock_source_enable+0xa0>)
    c13e:	6a12      	ldr	r2, [r2, #32]
    c140:	2102      	movs	r1, #2
    c142:	430a      	orrs	r2, r1
    c144:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    c146:	2300      	movs	r3, #0
    c148:	e031      	b.n	c1ae <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    c14a:	4b1c      	ldr	r3, [pc, #112]	; (c1bc <system_clock_source_enable+0xa0>)
    c14c:	4a1b      	ldr	r2, [pc, #108]	; (c1bc <system_clock_source_enable+0xa0>)
    c14e:	6992      	ldr	r2, [r2, #24]
    c150:	2102      	movs	r1, #2
    c152:	430a      	orrs	r2, r1
    c154:	619a      	str	r2, [r3, #24]
		break;
    c156:	e029      	b.n	c1ac <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    c158:	4a18      	ldr	r2, [pc, #96]	; (c1bc <system_clock_source_enable+0xa0>)
    c15a:	4b18      	ldr	r3, [pc, #96]	; (c1bc <system_clock_source_enable+0xa0>)
    c15c:	8a1b      	ldrh	r3, [r3, #16]
    c15e:	b29b      	uxth	r3, r3
    c160:	2102      	movs	r1, #2
    c162:	430b      	orrs	r3, r1
    c164:	b29b      	uxth	r3, r3
    c166:	8213      	strh	r3, [r2, #16]
		break;
    c168:	e020      	b.n	c1ac <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    c16a:	4a14      	ldr	r2, [pc, #80]	; (c1bc <system_clock_source_enable+0xa0>)
    c16c:	4b13      	ldr	r3, [pc, #76]	; (c1bc <system_clock_source_enable+0xa0>)
    c16e:	8a9b      	ldrh	r3, [r3, #20]
    c170:	b29b      	uxth	r3, r3
    c172:	2102      	movs	r1, #2
    c174:	430b      	orrs	r3, r1
    c176:	b29b      	uxth	r3, r3
    c178:	8293      	strh	r3, [r2, #20]
		break;
    c17a:	e017      	b.n	c1ac <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    c17c:	4b10      	ldr	r3, [pc, #64]	; (c1c0 <system_clock_source_enable+0xa4>)
    c17e:	681b      	ldr	r3, [r3, #0]
    c180:	2202      	movs	r2, #2
    c182:	431a      	orrs	r2, r3
    c184:	4b0e      	ldr	r3, [pc, #56]	; (c1c0 <system_clock_source_enable+0xa4>)
    c186:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    c188:	4b0e      	ldr	r3, [pc, #56]	; (c1c4 <system_clock_source_enable+0xa8>)
    c18a:	4798      	blx	r3
		break;
    c18c:	e00e      	b.n	c1ac <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    c18e:	4a0b      	ldr	r2, [pc, #44]	; (c1bc <system_clock_source_enable+0xa0>)
    c190:	490a      	ldr	r1, [pc, #40]	; (c1bc <system_clock_source_enable+0xa0>)
    c192:	2344      	movs	r3, #68	; 0x44
    c194:	5ccb      	ldrb	r3, [r1, r3]
    c196:	b2db      	uxtb	r3, r3
    c198:	2102      	movs	r1, #2
    c19a:	430b      	orrs	r3, r1
    c19c:	b2d9      	uxtb	r1, r3
    c19e:	2344      	movs	r3, #68	; 0x44
    c1a0:	54d1      	strb	r1, [r2, r3]
		break;
    c1a2:	e003      	b.n	c1ac <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    c1a4:	2300      	movs	r3, #0
    c1a6:	e002      	b.n	c1ae <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    c1a8:	2317      	movs	r3, #23
    c1aa:	e000      	b.n	c1ae <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    c1ac:	2300      	movs	r3, #0
}
    c1ae:	0018      	movs	r0, r3
    c1b0:	46bd      	mov	sp, r7
    c1b2:	b002      	add	sp, #8
    c1b4:	bd80      	pop	{r7, pc}
    c1b6:	46c0      	nop			; (mov r8, r8)
    c1b8:	0001097c 	.word	0x0001097c
    c1bc:	40000800 	.word	0x40000800
    c1c0:	2000026c 	.word	0x2000026c
    c1c4:	0000bfa5 	.word	0x0000bfa5

0000c1c8 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    c1c8:	b580      	push	{r7, lr}
    c1ca:	b082      	sub	sp, #8
    c1cc:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    c1ce:	003b      	movs	r3, r7
    c1d0:	2201      	movs	r2, #1
    c1d2:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    c1d4:	2300      	movs	r3, #0
    c1d6:	607b      	str	r3, [r7, #4]
    c1d8:	e009      	b.n	c1ee <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    c1da:	687b      	ldr	r3, [r7, #4]
    c1dc:	b2db      	uxtb	r3, r3
    c1de:	003a      	movs	r2, r7
    c1e0:	0011      	movs	r1, r2
    c1e2:	0018      	movs	r0, r3
    c1e4:	4b05      	ldr	r3, [pc, #20]	; (c1fc <_switch_peripheral_gclk+0x34>)
    c1e6:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    c1e8:	687b      	ldr	r3, [r7, #4]
    c1ea:	3301      	adds	r3, #1
    c1ec:	607b      	str	r3, [r7, #4]
    c1ee:	687b      	ldr	r3, [r7, #4]
    c1f0:	2b24      	cmp	r3, #36	; 0x24
    c1f2:	d9f2      	bls.n	c1da <_switch_peripheral_gclk+0x12>
	}
}
    c1f4:	46c0      	nop			; (mov r8, r8)
    c1f6:	46bd      	mov	sp, r7
    c1f8:	b002      	add	sp, #8
    c1fa:	bd80      	pop	{r7, pc}
    c1fc:	0000c601 	.word	0x0000c601

0000c200 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    c200:	b580      	push	{r7, lr}
    c202:	b0a0      	sub	sp, #128	; 0x80
    c204:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    c206:	4b27      	ldr	r3, [pc, #156]	; (c2a4 <system_clock_init+0xa4>)
    c208:	22c2      	movs	r2, #194	; 0xc2
    c20a:	00d2      	lsls	r2, r2, #3
    c20c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    c20e:	2000      	movs	r0, #0
    c210:	4b25      	ldr	r3, [pc, #148]	; (c2a8 <system_clock_init+0xa8>)
    c212:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    c214:	4b25      	ldr	r3, [pc, #148]	; (c2ac <system_clock_init+0xac>)
    c216:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    c218:	237c      	movs	r3, #124	; 0x7c
    c21a:	18fb      	adds	r3, r7, r3
    c21c:	0018      	movs	r0, r3
    c21e:	4b24      	ldr	r3, [pc, #144]	; (c2b0 <system_clock_init+0xb0>)
    c220:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    c222:	237c      	movs	r3, #124	; 0x7c
    c224:	18fb      	adds	r3, r7, r3
    c226:	2200      	movs	r2, #0
    c228:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    c22a:	237c      	movs	r3, #124	; 0x7c
    c22c:	18fb      	adds	r3, r7, r3
    c22e:	2201      	movs	r2, #1
    c230:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    c232:	237c      	movs	r3, #124	; 0x7c
    c234:	18fb      	adds	r3, r7, r3
    c236:	2200      	movs	r2, #0
    c238:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    c23a:	237c      	movs	r3, #124	; 0x7c
    c23c:	18fb      	adds	r3, r7, r3
    c23e:	0018      	movs	r0, r3
    c240:	4b1c      	ldr	r3, [pc, #112]	; (c2b4 <system_clock_init+0xb4>)
    c242:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    c244:	2006      	movs	r0, #6
    c246:	4b1c      	ldr	r3, [pc, #112]	; (c2b8 <system_clock_init+0xb8>)
    c248:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    c24a:	4b1c      	ldr	r3, [pc, #112]	; (c2bc <system_clock_init+0xbc>)
    c24c:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    c24e:	2000      	movs	r0, #0
    c250:	4b1b      	ldr	r3, [pc, #108]	; (c2c0 <system_clock_init+0xc0>)
    c252:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    c254:	2100      	movs	r1, #0
    c256:	2000      	movs	r0, #0
    c258:	4b1a      	ldr	r3, [pc, #104]	; (c2c4 <system_clock_init+0xc4>)
    c25a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    c25c:	2100      	movs	r1, #0
    c25e:	2001      	movs	r0, #1
    c260:	4b18      	ldr	r3, [pc, #96]	; (c2c4 <system_clock_init+0xc4>)
    c262:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    c264:	2100      	movs	r1, #0
    c266:	2002      	movs	r0, #2
    c268:	4b16      	ldr	r3, [pc, #88]	; (c2c4 <system_clock_init+0xc4>)
    c26a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    c26c:	1d3b      	adds	r3, r7, #4
    c26e:	0018      	movs	r0, r3
    c270:	4b15      	ldr	r3, [pc, #84]	; (c2c8 <system_clock_init+0xc8>)
    c272:	4798      	blx	r3
    c274:	1d3b      	adds	r3, r7, #4
    c276:	2206      	movs	r2, #6
    c278:	701a      	strb	r2, [r3, #0]
    c27a:	1d3b      	adds	r3, r7, #4
    c27c:	2201      	movs	r2, #1
    c27e:	605a      	str	r2, [r3, #4]
    c280:	1d3b      	adds	r3, r7, #4
    c282:	2200      	movs	r2, #0
    c284:	721a      	strb	r2, [r3, #8]
    c286:	1d3b      	adds	r3, r7, #4
    c288:	2200      	movs	r2, #0
    c28a:	725a      	strb	r2, [r3, #9]
    c28c:	1d3b      	adds	r3, r7, #4
    c28e:	0019      	movs	r1, r3
    c290:	2000      	movs	r0, #0
    c292:	4b0e      	ldr	r3, [pc, #56]	; (c2cc <system_clock_init+0xcc>)
    c294:	4798      	blx	r3
    c296:	2000      	movs	r0, #0
    c298:	4b0d      	ldr	r3, [pc, #52]	; (c2d0 <system_clock_init+0xd0>)
    c29a:	4798      	blx	r3
#endif
}
    c29c:	46c0      	nop			; (mov r8, r8)
    c29e:	46bd      	mov	sp, r7
    c2a0:	b020      	add	sp, #128	; 0x80
    c2a2:	bd80      	pop	{r7, pc}
    c2a4:	40000800 	.word	0x40000800
    c2a8:	0000bf55 	.word	0x0000bf55
    c2ac:	0000c1c9 	.word	0x0000c1c9
    c2b0:	0000bebf 	.word	0x0000bebf
    c2b4:	0000c0a5 	.word	0x0000c0a5
    c2b8:	0000c11d 	.word	0x0000c11d
    c2bc:	0000c379 	.word	0x0000c379
    c2c0:	0000bee1 	.word	0x0000bee1
    c2c4:	0000bf01 	.word	0x0000bf01
    c2c8:	0000be91 	.word	0x0000be91
    c2cc:	0000c3a9 	.word	0x0000c3a9
    c2d0:	0000c4cd 	.word	0x0000c4cd

0000c2d4 <system_apb_clock_set_mask>:
{
    c2d4:	b580      	push	{r7, lr}
    c2d6:	b082      	sub	sp, #8
    c2d8:	af00      	add	r7, sp, #0
    c2da:	0002      	movs	r2, r0
    c2dc:	6039      	str	r1, [r7, #0]
    c2de:	1dfb      	adds	r3, r7, #7
    c2e0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    c2e2:	1dfb      	adds	r3, r7, #7
    c2e4:	781b      	ldrb	r3, [r3, #0]
    c2e6:	2b01      	cmp	r3, #1
    c2e8:	d00a      	beq.n	c300 <system_apb_clock_set_mask+0x2c>
    c2ea:	2b02      	cmp	r3, #2
    c2ec:	d00f      	beq.n	c30e <system_apb_clock_set_mask+0x3a>
    c2ee:	2b00      	cmp	r3, #0
    c2f0:	d114      	bne.n	c31c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    c2f2:	4b0e      	ldr	r3, [pc, #56]	; (c32c <system_apb_clock_set_mask+0x58>)
    c2f4:	4a0d      	ldr	r2, [pc, #52]	; (c32c <system_apb_clock_set_mask+0x58>)
    c2f6:	6991      	ldr	r1, [r2, #24]
    c2f8:	683a      	ldr	r2, [r7, #0]
    c2fa:	430a      	orrs	r2, r1
    c2fc:	619a      	str	r2, [r3, #24]
			break;
    c2fe:	e00f      	b.n	c320 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    c300:	4b0a      	ldr	r3, [pc, #40]	; (c32c <system_apb_clock_set_mask+0x58>)
    c302:	4a0a      	ldr	r2, [pc, #40]	; (c32c <system_apb_clock_set_mask+0x58>)
    c304:	69d1      	ldr	r1, [r2, #28]
    c306:	683a      	ldr	r2, [r7, #0]
    c308:	430a      	orrs	r2, r1
    c30a:	61da      	str	r2, [r3, #28]
			break;
    c30c:	e008      	b.n	c320 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    c30e:	4b07      	ldr	r3, [pc, #28]	; (c32c <system_apb_clock_set_mask+0x58>)
    c310:	4a06      	ldr	r2, [pc, #24]	; (c32c <system_apb_clock_set_mask+0x58>)
    c312:	6a11      	ldr	r1, [r2, #32]
    c314:	683a      	ldr	r2, [r7, #0]
    c316:	430a      	orrs	r2, r1
    c318:	621a      	str	r2, [r3, #32]
			break;
    c31a:	e001      	b.n	c320 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    c31c:	2317      	movs	r3, #23
    c31e:	e000      	b.n	c322 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    c320:	2300      	movs	r3, #0
}
    c322:	0018      	movs	r0, r3
    c324:	46bd      	mov	sp, r7
    c326:	b002      	add	sp, #8
    c328:	bd80      	pop	{r7, pc}
    c32a:	46c0      	nop			; (mov r8, r8)
    c32c:	40000400 	.word	0x40000400

0000c330 <system_interrupt_enter_critical_section>:
{
    c330:	b580      	push	{r7, lr}
    c332:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    c334:	4b02      	ldr	r3, [pc, #8]	; (c340 <system_interrupt_enter_critical_section+0x10>)
    c336:	4798      	blx	r3
}
    c338:	46c0      	nop			; (mov r8, r8)
    c33a:	46bd      	mov	sp, r7
    c33c:	bd80      	pop	{r7, pc}
    c33e:	46c0      	nop			; (mov r8, r8)
    c340:	00008a25 	.word	0x00008a25

0000c344 <system_interrupt_leave_critical_section>:
{
    c344:	b580      	push	{r7, lr}
    c346:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    c348:	4b02      	ldr	r3, [pc, #8]	; (c354 <system_interrupt_leave_critical_section+0x10>)
    c34a:	4798      	blx	r3
}
    c34c:	46c0      	nop			; (mov r8, r8)
    c34e:	46bd      	mov	sp, r7
    c350:	bd80      	pop	{r7, pc}
    c352:	46c0      	nop			; (mov r8, r8)
    c354:	00008a79 	.word	0x00008a79

0000c358 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    c358:	b580      	push	{r7, lr}
    c35a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    c35c:	4b05      	ldr	r3, [pc, #20]	; (c374 <system_gclk_is_syncing+0x1c>)
    c35e:	785b      	ldrb	r3, [r3, #1]
    c360:	b2db      	uxtb	r3, r3
    c362:	b25b      	sxtb	r3, r3
    c364:	2b00      	cmp	r3, #0
    c366:	da01      	bge.n	c36c <system_gclk_is_syncing+0x14>
		return true;
    c368:	2301      	movs	r3, #1
    c36a:	e000      	b.n	c36e <system_gclk_is_syncing+0x16>
	}

	return false;
    c36c:	2300      	movs	r3, #0
}
    c36e:	0018      	movs	r0, r3
    c370:	46bd      	mov	sp, r7
    c372:	bd80      	pop	{r7, pc}
    c374:	40000c00 	.word	0x40000c00

0000c378 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    c378:	b580      	push	{r7, lr}
    c37a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    c37c:	2108      	movs	r1, #8
    c37e:	2000      	movs	r0, #0
    c380:	4b07      	ldr	r3, [pc, #28]	; (c3a0 <system_gclk_init+0x28>)
    c382:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    c384:	4b07      	ldr	r3, [pc, #28]	; (c3a4 <system_gclk_init+0x2c>)
    c386:	2201      	movs	r2, #1
    c388:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    c38a:	46c0      	nop			; (mov r8, r8)
    c38c:	4b05      	ldr	r3, [pc, #20]	; (c3a4 <system_gclk_init+0x2c>)
    c38e:	781b      	ldrb	r3, [r3, #0]
    c390:	b2db      	uxtb	r3, r3
    c392:	001a      	movs	r2, r3
    c394:	2301      	movs	r3, #1
    c396:	4013      	ands	r3, r2
    c398:	d1f8      	bne.n	c38c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    c39a:	46c0      	nop			; (mov r8, r8)
    c39c:	46bd      	mov	sp, r7
    c39e:	bd80      	pop	{r7, pc}
    c3a0:	0000c2d5 	.word	0x0000c2d5
    c3a4:	40000c00 	.word	0x40000c00

0000c3a8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    c3a8:	b580      	push	{r7, lr}
    c3aa:	b086      	sub	sp, #24
    c3ac:	af00      	add	r7, sp, #0
    c3ae:	0002      	movs	r2, r0
    c3b0:	6039      	str	r1, [r7, #0]
    c3b2:	1dfb      	adds	r3, r7, #7
    c3b4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    c3b6:	1dfb      	adds	r3, r7, #7
    c3b8:	781b      	ldrb	r3, [r3, #0]
    c3ba:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    c3bc:	1dfb      	adds	r3, r7, #7
    c3be:	781b      	ldrb	r3, [r3, #0]
    c3c0:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    c3c2:	683b      	ldr	r3, [r7, #0]
    c3c4:	781b      	ldrb	r3, [r3, #0]
    c3c6:	021b      	lsls	r3, r3, #8
    c3c8:	001a      	movs	r2, r3
    c3ca:	697b      	ldr	r3, [r7, #20]
    c3cc:	4313      	orrs	r3, r2
    c3ce:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    c3d0:	683b      	ldr	r3, [r7, #0]
    c3d2:	785b      	ldrb	r3, [r3, #1]
    c3d4:	2b00      	cmp	r3, #0
    c3d6:	d004      	beq.n	c3e2 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    c3d8:	697b      	ldr	r3, [r7, #20]
    c3da:	2280      	movs	r2, #128	; 0x80
    c3dc:	02d2      	lsls	r2, r2, #11
    c3de:	4313      	orrs	r3, r2
    c3e0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    c3e2:	683b      	ldr	r3, [r7, #0]
    c3e4:	7a5b      	ldrb	r3, [r3, #9]
    c3e6:	2b00      	cmp	r3, #0
    c3e8:	d004      	beq.n	c3f4 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    c3ea:	697b      	ldr	r3, [r7, #20]
    c3ec:	2280      	movs	r2, #128	; 0x80
    c3ee:	0312      	lsls	r2, r2, #12
    c3f0:	4313      	orrs	r3, r2
    c3f2:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    c3f4:	683b      	ldr	r3, [r7, #0]
    c3f6:	685b      	ldr	r3, [r3, #4]
    c3f8:	2b01      	cmp	r3, #1
    c3fa:	d92c      	bls.n	c456 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    c3fc:	683b      	ldr	r3, [r7, #0]
    c3fe:	685a      	ldr	r2, [r3, #4]
    c400:	683b      	ldr	r3, [r7, #0]
    c402:	685b      	ldr	r3, [r3, #4]
    c404:	3b01      	subs	r3, #1
    c406:	4013      	ands	r3, r2
    c408:	d11a      	bne.n	c440 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    c40a:	2300      	movs	r3, #0
    c40c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    c40e:	2302      	movs	r3, #2
    c410:	60bb      	str	r3, [r7, #8]
    c412:	e005      	b.n	c420 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    c414:	68fb      	ldr	r3, [r7, #12]
    c416:	3301      	adds	r3, #1
    c418:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    c41a:	68bb      	ldr	r3, [r7, #8]
    c41c:	005b      	lsls	r3, r3, #1
    c41e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    c420:	683b      	ldr	r3, [r7, #0]
    c422:	685a      	ldr	r2, [r3, #4]
    c424:	68bb      	ldr	r3, [r7, #8]
    c426:	429a      	cmp	r2, r3
    c428:	d8f4      	bhi.n	c414 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    c42a:	68fb      	ldr	r3, [r7, #12]
    c42c:	021b      	lsls	r3, r3, #8
    c42e:	693a      	ldr	r2, [r7, #16]
    c430:	4313      	orrs	r3, r2
    c432:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    c434:	697b      	ldr	r3, [r7, #20]
    c436:	2280      	movs	r2, #128	; 0x80
    c438:	0352      	lsls	r2, r2, #13
    c43a:	4313      	orrs	r3, r2
    c43c:	617b      	str	r3, [r7, #20]
    c43e:	e00a      	b.n	c456 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    c440:	683b      	ldr	r3, [r7, #0]
    c442:	685b      	ldr	r3, [r3, #4]
    c444:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    c446:	693a      	ldr	r2, [r7, #16]
    c448:	4313      	orrs	r3, r2
    c44a:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    c44c:	697b      	ldr	r3, [r7, #20]
    c44e:	2280      	movs	r2, #128	; 0x80
    c450:	0292      	lsls	r2, r2, #10
    c452:	4313      	orrs	r3, r2
    c454:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    c456:	683b      	ldr	r3, [r7, #0]
    c458:	7a1b      	ldrb	r3, [r3, #8]
    c45a:	2b00      	cmp	r3, #0
    c45c:	d004      	beq.n	c468 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    c45e:	697b      	ldr	r3, [r7, #20]
    c460:	2280      	movs	r2, #128	; 0x80
    c462:	0392      	lsls	r2, r2, #14
    c464:	4313      	orrs	r3, r2
    c466:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    c468:	46c0      	nop			; (mov r8, r8)
    c46a:	4b13      	ldr	r3, [pc, #76]	; (c4b8 <system_gclk_gen_set_config+0x110>)
    c46c:	4798      	blx	r3
    c46e:	1e03      	subs	r3, r0, #0
    c470:	d1fb      	bne.n	c46a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    c472:	4b12      	ldr	r3, [pc, #72]	; (c4bc <system_gclk_gen_set_config+0x114>)
    c474:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    c476:	4a12      	ldr	r2, [pc, #72]	; (c4c0 <system_gclk_gen_set_config+0x118>)
    c478:	1dfb      	adds	r3, r7, #7
    c47a:	781b      	ldrb	r3, [r3, #0]
    c47c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    c47e:	46c0      	nop			; (mov r8, r8)
    c480:	4b0d      	ldr	r3, [pc, #52]	; (c4b8 <system_gclk_gen_set_config+0x110>)
    c482:	4798      	blx	r3
    c484:	1e03      	subs	r3, r0, #0
    c486:	d1fb      	bne.n	c480 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    c488:	4b0e      	ldr	r3, [pc, #56]	; (c4c4 <system_gclk_gen_set_config+0x11c>)
    c48a:	693a      	ldr	r2, [r7, #16]
    c48c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    c48e:	46c0      	nop			; (mov r8, r8)
    c490:	4b09      	ldr	r3, [pc, #36]	; (c4b8 <system_gclk_gen_set_config+0x110>)
    c492:	4798      	blx	r3
    c494:	1e03      	subs	r3, r0, #0
    c496:	d1fb      	bne.n	c490 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    c498:	4b0a      	ldr	r3, [pc, #40]	; (c4c4 <system_gclk_gen_set_config+0x11c>)
    c49a:	4a0a      	ldr	r2, [pc, #40]	; (c4c4 <system_gclk_gen_set_config+0x11c>)
    c49c:	6851      	ldr	r1, [r2, #4]
    c49e:	2280      	movs	r2, #128	; 0x80
    c4a0:	0252      	lsls	r2, r2, #9
    c4a2:	4011      	ands	r1, r2
    c4a4:	697a      	ldr	r2, [r7, #20]
    c4a6:	430a      	orrs	r2, r1
    c4a8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    c4aa:	4b07      	ldr	r3, [pc, #28]	; (c4c8 <system_gclk_gen_set_config+0x120>)
    c4ac:	4798      	blx	r3
}
    c4ae:	46c0      	nop			; (mov r8, r8)
    c4b0:	46bd      	mov	sp, r7
    c4b2:	b006      	add	sp, #24
    c4b4:	bd80      	pop	{r7, pc}
    c4b6:	46c0      	nop			; (mov r8, r8)
    c4b8:	0000c359 	.word	0x0000c359
    c4bc:	0000c331 	.word	0x0000c331
    c4c0:	40000c08 	.word	0x40000c08
    c4c4:	40000c00 	.word	0x40000c00
    c4c8:	0000c345 	.word	0x0000c345

0000c4cc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    c4cc:	b580      	push	{r7, lr}
    c4ce:	b082      	sub	sp, #8
    c4d0:	af00      	add	r7, sp, #0
    c4d2:	0002      	movs	r2, r0
    c4d4:	1dfb      	adds	r3, r7, #7
    c4d6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    c4d8:	46c0      	nop			; (mov r8, r8)
    c4da:	4b0e      	ldr	r3, [pc, #56]	; (c514 <system_gclk_gen_enable+0x48>)
    c4dc:	4798      	blx	r3
    c4de:	1e03      	subs	r3, r0, #0
    c4e0:	d1fb      	bne.n	c4da <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    c4e2:	4b0d      	ldr	r3, [pc, #52]	; (c518 <system_gclk_gen_enable+0x4c>)
    c4e4:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    c4e6:	4a0d      	ldr	r2, [pc, #52]	; (c51c <system_gclk_gen_enable+0x50>)
    c4e8:	1dfb      	adds	r3, r7, #7
    c4ea:	781b      	ldrb	r3, [r3, #0]
    c4ec:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    c4ee:	46c0      	nop			; (mov r8, r8)
    c4f0:	4b08      	ldr	r3, [pc, #32]	; (c514 <system_gclk_gen_enable+0x48>)
    c4f2:	4798      	blx	r3
    c4f4:	1e03      	subs	r3, r0, #0
    c4f6:	d1fb      	bne.n	c4f0 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    c4f8:	4b09      	ldr	r3, [pc, #36]	; (c520 <system_gclk_gen_enable+0x54>)
    c4fa:	4a09      	ldr	r2, [pc, #36]	; (c520 <system_gclk_gen_enable+0x54>)
    c4fc:	6852      	ldr	r2, [r2, #4]
    c4fe:	2180      	movs	r1, #128	; 0x80
    c500:	0249      	lsls	r1, r1, #9
    c502:	430a      	orrs	r2, r1
    c504:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    c506:	4b07      	ldr	r3, [pc, #28]	; (c524 <system_gclk_gen_enable+0x58>)
    c508:	4798      	blx	r3
}
    c50a:	46c0      	nop			; (mov r8, r8)
    c50c:	46bd      	mov	sp, r7
    c50e:	b002      	add	sp, #8
    c510:	bd80      	pop	{r7, pc}
    c512:	46c0      	nop			; (mov r8, r8)
    c514:	0000c359 	.word	0x0000c359
    c518:	0000c331 	.word	0x0000c331
    c51c:	40000c04 	.word	0x40000c04
    c520:	40000c00 	.word	0x40000c00
    c524:	0000c345 	.word	0x0000c345

0000c528 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    c528:	b580      	push	{r7, lr}
    c52a:	b086      	sub	sp, #24
    c52c:	af00      	add	r7, sp, #0
    c52e:	0002      	movs	r2, r0
    c530:	1dfb      	adds	r3, r7, #7
    c532:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    c534:	46c0      	nop			; (mov r8, r8)
    c536:	4b2a      	ldr	r3, [pc, #168]	; (c5e0 <system_gclk_gen_get_hz+0xb8>)
    c538:	4798      	blx	r3
    c53a:	1e03      	subs	r3, r0, #0
    c53c:	d1fb      	bne.n	c536 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    c53e:	4b29      	ldr	r3, [pc, #164]	; (c5e4 <system_gclk_gen_get_hz+0xbc>)
    c540:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    c542:	4a29      	ldr	r2, [pc, #164]	; (c5e8 <system_gclk_gen_get_hz+0xc0>)
    c544:	1dfb      	adds	r3, r7, #7
    c546:	781b      	ldrb	r3, [r3, #0]
    c548:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    c54a:	46c0      	nop			; (mov r8, r8)
    c54c:	4b24      	ldr	r3, [pc, #144]	; (c5e0 <system_gclk_gen_get_hz+0xb8>)
    c54e:	4798      	blx	r3
    c550:	1e03      	subs	r3, r0, #0
    c552:	d1fb      	bne.n	c54c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    c554:	4b25      	ldr	r3, [pc, #148]	; (c5ec <system_gclk_gen_get_hz+0xc4>)
    c556:	685b      	ldr	r3, [r3, #4]
    c558:	04db      	lsls	r3, r3, #19
    c55a:	0edb      	lsrs	r3, r3, #27
    c55c:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    c55e:	0018      	movs	r0, r3
    c560:	4b23      	ldr	r3, [pc, #140]	; (c5f0 <system_gclk_gen_get_hz+0xc8>)
    c562:	4798      	blx	r3
    c564:	0003      	movs	r3, r0
    c566:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    c568:	4a1f      	ldr	r2, [pc, #124]	; (c5e8 <system_gclk_gen_get_hz+0xc0>)
    c56a:	1dfb      	adds	r3, r7, #7
    c56c:	781b      	ldrb	r3, [r3, #0]
    c56e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    c570:	4b1e      	ldr	r3, [pc, #120]	; (c5ec <system_gclk_gen_get_hz+0xc4>)
    c572:	685b      	ldr	r3, [r3, #4]
    c574:	02db      	lsls	r3, r3, #11
    c576:	0fdb      	lsrs	r3, r3, #31
    c578:	b2da      	uxtb	r2, r3
    c57a:	2313      	movs	r3, #19
    c57c:	18fb      	adds	r3, r7, r3
    c57e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    c580:	4a1c      	ldr	r2, [pc, #112]	; (c5f4 <system_gclk_gen_get_hz+0xcc>)
    c582:	1dfb      	adds	r3, r7, #7
    c584:	781b      	ldrb	r3, [r3, #0]
    c586:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    c588:	46c0      	nop			; (mov r8, r8)
    c58a:	4b15      	ldr	r3, [pc, #84]	; (c5e0 <system_gclk_gen_get_hz+0xb8>)
    c58c:	4798      	blx	r3
    c58e:	1e03      	subs	r3, r0, #0
    c590:	d1fb      	bne.n	c58a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    c592:	4b16      	ldr	r3, [pc, #88]	; (c5ec <system_gclk_gen_get_hz+0xc4>)
    c594:	689b      	ldr	r3, [r3, #8]
    c596:	021b      	lsls	r3, r3, #8
    c598:	0c1b      	lsrs	r3, r3, #16
    c59a:	b29b      	uxth	r3, r3
    c59c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    c59e:	4b16      	ldr	r3, [pc, #88]	; (c5f8 <system_gclk_gen_get_hz+0xd0>)
    c5a0:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    c5a2:	2313      	movs	r3, #19
    c5a4:	18fb      	adds	r3, r7, r3
    c5a6:	781b      	ldrb	r3, [r3, #0]
    c5a8:	2b00      	cmp	r3, #0
    c5aa:	d109      	bne.n	c5c0 <system_gclk_gen_get_hz+0x98>
    c5ac:	68fb      	ldr	r3, [r7, #12]
    c5ae:	2b01      	cmp	r3, #1
    c5b0:	d906      	bls.n	c5c0 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    c5b2:	4b12      	ldr	r3, [pc, #72]	; (c5fc <system_gclk_gen_get_hz+0xd4>)
    c5b4:	68f9      	ldr	r1, [r7, #12]
    c5b6:	6978      	ldr	r0, [r7, #20]
    c5b8:	4798      	blx	r3
    c5ba:	0003      	movs	r3, r0
    c5bc:	617b      	str	r3, [r7, #20]
    c5be:	e00a      	b.n	c5d6 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    c5c0:	2313      	movs	r3, #19
    c5c2:	18fb      	adds	r3, r7, r3
    c5c4:	781b      	ldrb	r3, [r3, #0]
    c5c6:	2b00      	cmp	r3, #0
    c5c8:	d005      	beq.n	c5d6 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    c5ca:	68fb      	ldr	r3, [r7, #12]
    c5cc:	3301      	adds	r3, #1
    c5ce:	697a      	ldr	r2, [r7, #20]
    c5d0:	40da      	lsrs	r2, r3
    c5d2:	0013      	movs	r3, r2
    c5d4:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    c5d6:	697b      	ldr	r3, [r7, #20]
}
    c5d8:	0018      	movs	r0, r3
    c5da:	46bd      	mov	sp, r7
    c5dc:	b006      	add	sp, #24
    c5de:	bd80      	pop	{r7, pc}
    c5e0:	0000c359 	.word	0x0000c359
    c5e4:	0000c331 	.word	0x0000c331
    c5e8:	40000c04 	.word	0x40000c04
    c5ec:	40000c00 	.word	0x40000c00
    c5f0:	0000bfe9 	.word	0x0000bfe9
    c5f4:	40000c08 	.word	0x40000c08
    c5f8:	0000c345 	.word	0x0000c345
    c5fc:	0000da59 	.word	0x0000da59

0000c600 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    c600:	b580      	push	{r7, lr}
    c602:	b084      	sub	sp, #16
    c604:	af00      	add	r7, sp, #0
    c606:	0002      	movs	r2, r0
    c608:	6039      	str	r1, [r7, #0]
    c60a:	1dfb      	adds	r3, r7, #7
    c60c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    c60e:	1dfb      	adds	r3, r7, #7
    c610:	781b      	ldrb	r3, [r3, #0]
    c612:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    c614:	683b      	ldr	r3, [r7, #0]
    c616:	781b      	ldrb	r3, [r3, #0]
    c618:	021b      	lsls	r3, r3, #8
    c61a:	001a      	movs	r2, r3
    c61c:	68fb      	ldr	r3, [r7, #12]
    c61e:	4313      	orrs	r3, r2
    c620:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    c622:	1dfb      	adds	r3, r7, #7
    c624:	781b      	ldrb	r3, [r3, #0]
    c626:	0018      	movs	r0, r3
    c628:	4b04      	ldr	r3, [pc, #16]	; (c63c <system_gclk_chan_set_config+0x3c>)
    c62a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    c62c:	4b04      	ldr	r3, [pc, #16]	; (c640 <system_gclk_chan_set_config+0x40>)
    c62e:	68fa      	ldr	r2, [r7, #12]
    c630:	b292      	uxth	r2, r2
    c632:	805a      	strh	r2, [r3, #2]
}
    c634:	46c0      	nop			; (mov r8, r8)
    c636:	46bd      	mov	sp, r7
    c638:	b004      	add	sp, #16
    c63a:	bd80      	pop	{r7, pc}
    c63c:	0000c68d 	.word	0x0000c68d
    c640:	40000c00 	.word	0x40000c00

0000c644 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    c644:	b580      	push	{r7, lr}
    c646:	b082      	sub	sp, #8
    c648:	af00      	add	r7, sp, #0
    c64a:	0002      	movs	r2, r0
    c64c:	1dfb      	adds	r3, r7, #7
    c64e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    c650:	4b0a      	ldr	r3, [pc, #40]	; (c67c <system_gclk_chan_enable+0x38>)
    c652:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    c654:	4a0a      	ldr	r2, [pc, #40]	; (c680 <system_gclk_chan_enable+0x3c>)
    c656:	1dfb      	adds	r3, r7, #7
    c658:	781b      	ldrb	r3, [r3, #0]
    c65a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    c65c:	4909      	ldr	r1, [pc, #36]	; (c684 <system_gclk_chan_enable+0x40>)
    c65e:	4b09      	ldr	r3, [pc, #36]	; (c684 <system_gclk_chan_enable+0x40>)
    c660:	885b      	ldrh	r3, [r3, #2]
    c662:	b29b      	uxth	r3, r3
    c664:	2280      	movs	r2, #128	; 0x80
    c666:	01d2      	lsls	r2, r2, #7
    c668:	4313      	orrs	r3, r2
    c66a:	b29b      	uxth	r3, r3
    c66c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    c66e:	4b06      	ldr	r3, [pc, #24]	; (c688 <system_gclk_chan_enable+0x44>)
    c670:	4798      	blx	r3
}
    c672:	46c0      	nop			; (mov r8, r8)
    c674:	46bd      	mov	sp, r7
    c676:	b002      	add	sp, #8
    c678:	bd80      	pop	{r7, pc}
    c67a:	46c0      	nop			; (mov r8, r8)
    c67c:	0000c331 	.word	0x0000c331
    c680:	40000c02 	.word	0x40000c02
    c684:	40000c00 	.word	0x40000c00
    c688:	0000c345 	.word	0x0000c345

0000c68c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    c68c:	b580      	push	{r7, lr}
    c68e:	b084      	sub	sp, #16
    c690:	af00      	add	r7, sp, #0
    c692:	0002      	movs	r2, r0
    c694:	1dfb      	adds	r3, r7, #7
    c696:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    c698:	4b1c      	ldr	r3, [pc, #112]	; (c70c <system_gclk_chan_disable+0x80>)
    c69a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    c69c:	4a1c      	ldr	r2, [pc, #112]	; (c710 <system_gclk_chan_disable+0x84>)
    c69e:	1dfb      	adds	r3, r7, #7
    c6a0:	781b      	ldrb	r3, [r3, #0]
    c6a2:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    c6a4:	4b1b      	ldr	r3, [pc, #108]	; (c714 <system_gclk_chan_disable+0x88>)
    c6a6:	885b      	ldrh	r3, [r3, #2]
    c6a8:	051b      	lsls	r3, r3, #20
    c6aa:	0f1b      	lsrs	r3, r3, #28
    c6ac:	b2db      	uxtb	r3, r3
    c6ae:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    c6b0:	4a18      	ldr	r2, [pc, #96]	; (c714 <system_gclk_chan_disable+0x88>)
    c6b2:	8853      	ldrh	r3, [r2, #2]
    c6b4:	4918      	ldr	r1, [pc, #96]	; (c718 <system_gclk_chan_disable+0x8c>)
    c6b6:	400b      	ands	r3, r1
    c6b8:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    c6ba:	4a16      	ldr	r2, [pc, #88]	; (c714 <system_gclk_chan_disable+0x88>)
    c6bc:	4b15      	ldr	r3, [pc, #84]	; (c714 <system_gclk_chan_disable+0x88>)
    c6be:	885b      	ldrh	r3, [r3, #2]
    c6c0:	b29b      	uxth	r3, r3
    c6c2:	4916      	ldr	r1, [pc, #88]	; (c71c <system_gclk_chan_disable+0x90>)
    c6c4:	400b      	ands	r3, r1
    c6c6:	b29b      	uxth	r3, r3
    c6c8:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    c6ca:	46c0      	nop			; (mov r8, r8)
    c6cc:	4b11      	ldr	r3, [pc, #68]	; (c714 <system_gclk_chan_disable+0x88>)
    c6ce:	885b      	ldrh	r3, [r3, #2]
    c6d0:	b29b      	uxth	r3, r3
    c6d2:	001a      	movs	r2, r3
    c6d4:	2380      	movs	r3, #128	; 0x80
    c6d6:	01db      	lsls	r3, r3, #7
    c6d8:	4013      	ands	r3, r2
    c6da:	d1f7      	bne.n	c6cc <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    c6dc:	4a0d      	ldr	r2, [pc, #52]	; (c714 <system_gclk_chan_disable+0x88>)
    c6de:	68fb      	ldr	r3, [r7, #12]
    c6e0:	b2db      	uxtb	r3, r3
    c6e2:	1c19      	adds	r1, r3, #0
    c6e4:	230f      	movs	r3, #15
    c6e6:	400b      	ands	r3, r1
    c6e8:	b2d9      	uxtb	r1, r3
    c6ea:	8853      	ldrh	r3, [r2, #2]
    c6ec:	1c08      	adds	r0, r1, #0
    c6ee:	210f      	movs	r1, #15
    c6f0:	4001      	ands	r1, r0
    c6f2:	0208      	lsls	r0, r1, #8
    c6f4:	4908      	ldr	r1, [pc, #32]	; (c718 <system_gclk_chan_disable+0x8c>)
    c6f6:	400b      	ands	r3, r1
    c6f8:	1c19      	adds	r1, r3, #0
    c6fa:	1c03      	adds	r3, r0, #0
    c6fc:	430b      	orrs	r3, r1
    c6fe:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    c700:	4b07      	ldr	r3, [pc, #28]	; (c720 <system_gclk_chan_disable+0x94>)
    c702:	4798      	blx	r3
}
    c704:	46c0      	nop			; (mov r8, r8)
    c706:	46bd      	mov	sp, r7
    c708:	b004      	add	sp, #16
    c70a:	bd80      	pop	{r7, pc}
    c70c:	0000c331 	.word	0x0000c331
    c710:	40000c02 	.word	0x40000c02
    c714:	40000c00 	.word	0x40000c00
    c718:	fffff0ff 	.word	0xfffff0ff
    c71c:	ffffbfff 	.word	0xffffbfff
    c720:	0000c345 	.word	0x0000c345

0000c724 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    c724:	b580      	push	{r7, lr}
    c726:	b084      	sub	sp, #16
    c728:	af00      	add	r7, sp, #0
    c72a:	0002      	movs	r2, r0
    c72c:	1dfb      	adds	r3, r7, #7
    c72e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    c730:	4b0d      	ldr	r3, [pc, #52]	; (c768 <system_gclk_chan_get_hz+0x44>)
    c732:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    c734:	4a0d      	ldr	r2, [pc, #52]	; (c76c <system_gclk_chan_get_hz+0x48>)
    c736:	1dfb      	adds	r3, r7, #7
    c738:	781b      	ldrb	r3, [r3, #0]
    c73a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    c73c:	4b0c      	ldr	r3, [pc, #48]	; (c770 <system_gclk_chan_get_hz+0x4c>)
    c73e:	885b      	ldrh	r3, [r3, #2]
    c740:	051b      	lsls	r3, r3, #20
    c742:	0f1b      	lsrs	r3, r3, #28
    c744:	b2da      	uxtb	r2, r3
    c746:	230f      	movs	r3, #15
    c748:	18fb      	adds	r3, r7, r3
    c74a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    c74c:	4b09      	ldr	r3, [pc, #36]	; (c774 <system_gclk_chan_get_hz+0x50>)
    c74e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    c750:	230f      	movs	r3, #15
    c752:	18fb      	adds	r3, r7, r3
    c754:	781b      	ldrb	r3, [r3, #0]
    c756:	0018      	movs	r0, r3
    c758:	4b07      	ldr	r3, [pc, #28]	; (c778 <system_gclk_chan_get_hz+0x54>)
    c75a:	4798      	blx	r3
    c75c:	0003      	movs	r3, r0
}
    c75e:	0018      	movs	r0, r3
    c760:	46bd      	mov	sp, r7
    c762:	b004      	add	sp, #16
    c764:	bd80      	pop	{r7, pc}
    c766:	46c0      	nop			; (mov r8, r8)
    c768:	0000c331 	.word	0x0000c331
    c76c:	40000c02 	.word	0x40000c02
    c770:	40000c00 	.word	0x40000c00
    c774:	0000c345 	.word	0x0000c345
    c778:	0000c529 	.word	0x0000c529

0000c77c <system_pinmux_get_group_from_gpio_pin>:
{
    c77c:	b580      	push	{r7, lr}
    c77e:	b084      	sub	sp, #16
    c780:	af00      	add	r7, sp, #0
    c782:	0002      	movs	r2, r0
    c784:	1dfb      	adds	r3, r7, #7
    c786:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    c788:	230f      	movs	r3, #15
    c78a:	18fb      	adds	r3, r7, r3
    c78c:	1dfa      	adds	r2, r7, #7
    c78e:	7812      	ldrb	r2, [r2, #0]
    c790:	09d2      	lsrs	r2, r2, #7
    c792:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    c794:	230e      	movs	r3, #14
    c796:	18fb      	adds	r3, r7, r3
    c798:	1dfa      	adds	r2, r7, #7
    c79a:	7812      	ldrb	r2, [r2, #0]
    c79c:	0952      	lsrs	r2, r2, #5
    c79e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    c7a0:	4b0d      	ldr	r3, [pc, #52]	; (c7d8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    c7a2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    c7a4:	230f      	movs	r3, #15
    c7a6:	18fb      	adds	r3, r7, r3
    c7a8:	781b      	ldrb	r3, [r3, #0]
    c7aa:	2b00      	cmp	r3, #0
    c7ac:	d10f      	bne.n	c7ce <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    c7ae:	230f      	movs	r3, #15
    c7b0:	18fb      	adds	r3, r7, r3
    c7b2:	781b      	ldrb	r3, [r3, #0]
    c7b4:	009b      	lsls	r3, r3, #2
    c7b6:	2210      	movs	r2, #16
    c7b8:	4694      	mov	ip, r2
    c7ba:	44bc      	add	ip, r7
    c7bc:	4463      	add	r3, ip
    c7be:	3b08      	subs	r3, #8
    c7c0:	681a      	ldr	r2, [r3, #0]
    c7c2:	230e      	movs	r3, #14
    c7c4:	18fb      	adds	r3, r7, r3
    c7c6:	781b      	ldrb	r3, [r3, #0]
    c7c8:	01db      	lsls	r3, r3, #7
    c7ca:	18d3      	adds	r3, r2, r3
    c7cc:	e000      	b.n	c7d0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    c7ce:	2300      	movs	r3, #0
}
    c7d0:	0018      	movs	r0, r3
    c7d2:	46bd      	mov	sp, r7
    c7d4:	b004      	add	sp, #16
    c7d6:	bd80      	pop	{r7, pc}
    c7d8:	41004400 	.word	0x41004400

0000c7dc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    c7dc:	b580      	push	{r7, lr}
    c7de:	b088      	sub	sp, #32
    c7e0:	af00      	add	r7, sp, #0
    c7e2:	60f8      	str	r0, [r7, #12]
    c7e4:	60b9      	str	r1, [r7, #8]
    c7e6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    c7e8:	2300      	movs	r3, #0
    c7ea:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    c7ec:	687b      	ldr	r3, [r7, #4]
    c7ee:	78db      	ldrb	r3, [r3, #3]
    c7f0:	2201      	movs	r2, #1
    c7f2:	4053      	eors	r3, r2
    c7f4:	b2db      	uxtb	r3, r3
    c7f6:	2b00      	cmp	r3, #0
    c7f8:	d035      	beq.n	c866 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    c7fa:	687b      	ldr	r3, [r7, #4]
    c7fc:	781b      	ldrb	r3, [r3, #0]
    c7fe:	2b80      	cmp	r3, #128	; 0x80
    c800:	d00b      	beq.n	c81a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    c802:	69fb      	ldr	r3, [r7, #28]
    c804:	2280      	movs	r2, #128	; 0x80
    c806:	0252      	lsls	r2, r2, #9
    c808:	4313      	orrs	r3, r2
    c80a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    c80c:	687b      	ldr	r3, [r7, #4]
    c80e:	781b      	ldrb	r3, [r3, #0]
    c810:	061b      	lsls	r3, r3, #24
    c812:	001a      	movs	r2, r3
    c814:	69fb      	ldr	r3, [r7, #28]
    c816:	4313      	orrs	r3, r2
    c818:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    c81a:	687b      	ldr	r3, [r7, #4]
    c81c:	785b      	ldrb	r3, [r3, #1]
    c81e:	2b00      	cmp	r3, #0
    c820:	d003      	beq.n	c82a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    c822:	687b      	ldr	r3, [r7, #4]
    c824:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    c826:	2b02      	cmp	r3, #2
    c828:	d110      	bne.n	c84c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    c82a:	69fb      	ldr	r3, [r7, #28]
    c82c:	2280      	movs	r2, #128	; 0x80
    c82e:	0292      	lsls	r2, r2, #10
    c830:	4313      	orrs	r3, r2
    c832:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    c834:	687b      	ldr	r3, [r7, #4]
    c836:	789b      	ldrb	r3, [r3, #2]
    c838:	2b00      	cmp	r3, #0
    c83a:	d004      	beq.n	c846 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    c83c:	69fb      	ldr	r3, [r7, #28]
    c83e:	2280      	movs	r2, #128	; 0x80
    c840:	02d2      	lsls	r2, r2, #11
    c842:	4313      	orrs	r3, r2
    c844:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    c846:	68fb      	ldr	r3, [r7, #12]
    c848:	68ba      	ldr	r2, [r7, #8]
    c84a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    c84c:	687b      	ldr	r3, [r7, #4]
    c84e:	785b      	ldrb	r3, [r3, #1]
    c850:	2b01      	cmp	r3, #1
    c852:	d003      	beq.n	c85c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    c854:	687b      	ldr	r3, [r7, #4]
    c856:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    c858:	2b02      	cmp	r3, #2
    c85a:	d107      	bne.n	c86c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    c85c:	69fb      	ldr	r3, [r7, #28]
    c85e:	4a22      	ldr	r2, [pc, #136]	; (c8e8 <_system_pinmux_config+0x10c>)
    c860:	4013      	ands	r3, r2
    c862:	61fb      	str	r3, [r7, #28]
    c864:	e002      	b.n	c86c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    c866:	68fb      	ldr	r3, [r7, #12]
    c868:	68ba      	ldr	r2, [r7, #8]
    c86a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    c86c:	68bb      	ldr	r3, [r7, #8]
    c86e:	041b      	lsls	r3, r3, #16
    c870:	0c1b      	lsrs	r3, r3, #16
    c872:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    c874:	68bb      	ldr	r3, [r7, #8]
    c876:	0c1b      	lsrs	r3, r3, #16
    c878:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    c87a:	69ba      	ldr	r2, [r7, #24]
    c87c:	69fb      	ldr	r3, [r7, #28]
    c87e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    c880:	22a0      	movs	r2, #160	; 0xa0
    c882:	05d2      	lsls	r2, r2, #23
    c884:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    c886:	68fb      	ldr	r3, [r7, #12]
    c888:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    c88a:	697a      	ldr	r2, [r7, #20]
    c88c:	69fb      	ldr	r3, [r7, #28]
    c88e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    c890:	22d0      	movs	r2, #208	; 0xd0
    c892:	0612      	lsls	r2, r2, #24
    c894:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    c896:	68fb      	ldr	r3, [r7, #12]
    c898:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    c89a:	687b      	ldr	r3, [r7, #4]
    c89c:	78db      	ldrb	r3, [r3, #3]
    c89e:	2201      	movs	r2, #1
    c8a0:	4053      	eors	r3, r2
    c8a2:	b2db      	uxtb	r3, r3
    c8a4:	2b00      	cmp	r3, #0
    c8a6:	d01a      	beq.n	c8de <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    c8a8:	69fa      	ldr	r2, [r7, #28]
    c8aa:	2380      	movs	r3, #128	; 0x80
    c8ac:	02db      	lsls	r3, r3, #11
    c8ae:	4013      	ands	r3, r2
    c8b0:	d00a      	beq.n	c8c8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    c8b2:	687b      	ldr	r3, [r7, #4]
    c8b4:	789b      	ldrb	r3, [r3, #2]
    c8b6:	2b01      	cmp	r3, #1
    c8b8:	d103      	bne.n	c8c2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    c8ba:	68fb      	ldr	r3, [r7, #12]
    c8bc:	68ba      	ldr	r2, [r7, #8]
    c8be:	619a      	str	r2, [r3, #24]
    c8c0:	e002      	b.n	c8c8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    c8c2:	68fb      	ldr	r3, [r7, #12]
    c8c4:	68ba      	ldr	r2, [r7, #8]
    c8c6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    c8c8:	687b      	ldr	r3, [r7, #4]
    c8ca:	785b      	ldrb	r3, [r3, #1]
    c8cc:	2b01      	cmp	r3, #1
    c8ce:	d003      	beq.n	c8d8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    c8d0:	687b      	ldr	r3, [r7, #4]
    c8d2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    c8d4:	2b02      	cmp	r3, #2
    c8d6:	d102      	bne.n	c8de <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    c8d8:	68fb      	ldr	r3, [r7, #12]
    c8da:	68ba      	ldr	r2, [r7, #8]
    c8dc:	609a      	str	r2, [r3, #8]
		}
	}
}
    c8de:	46c0      	nop			; (mov r8, r8)
    c8e0:	46bd      	mov	sp, r7
    c8e2:	b008      	add	sp, #32
    c8e4:	bd80      	pop	{r7, pc}
    c8e6:	46c0      	nop			; (mov r8, r8)
    c8e8:	fffbffff 	.word	0xfffbffff

0000c8ec <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    c8ec:	b580      	push	{r7, lr}
    c8ee:	b084      	sub	sp, #16
    c8f0:	af00      	add	r7, sp, #0
    c8f2:	0002      	movs	r2, r0
    c8f4:	6039      	str	r1, [r7, #0]
    c8f6:	1dfb      	adds	r3, r7, #7
    c8f8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    c8fa:	1dfb      	adds	r3, r7, #7
    c8fc:	781b      	ldrb	r3, [r3, #0]
    c8fe:	0018      	movs	r0, r3
    c900:	4b0a      	ldr	r3, [pc, #40]	; (c92c <system_pinmux_pin_set_config+0x40>)
    c902:	4798      	blx	r3
    c904:	0003      	movs	r3, r0
    c906:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    c908:	1dfb      	adds	r3, r7, #7
    c90a:	781b      	ldrb	r3, [r3, #0]
    c90c:	221f      	movs	r2, #31
    c90e:	4013      	ands	r3, r2
    c910:	2201      	movs	r2, #1
    c912:	409a      	lsls	r2, r3
    c914:	0013      	movs	r3, r2
    c916:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    c918:	683a      	ldr	r2, [r7, #0]
    c91a:	68b9      	ldr	r1, [r7, #8]
    c91c:	68fb      	ldr	r3, [r7, #12]
    c91e:	0018      	movs	r0, r3
    c920:	4b03      	ldr	r3, [pc, #12]	; (c930 <system_pinmux_pin_set_config+0x44>)
    c922:	4798      	blx	r3
}
    c924:	46c0      	nop			; (mov r8, r8)
    c926:	46bd      	mov	sp, r7
    c928:	b004      	add	sp, #16
    c92a:	bd80      	pop	{r7, pc}
    c92c:	0000c77d 	.word	0x0000c77d
    c930:	0000c7dd 	.word	0x0000c7dd

0000c934 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    c934:	b580      	push	{r7, lr}
    c936:	af00      	add	r7, sp, #0
	return;
    c938:	46c0      	nop			; (mov r8, r8)
}
    c93a:	46bd      	mov	sp, r7
    c93c:	bd80      	pop	{r7, pc}
	...

0000c940 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    c940:	b580      	push	{r7, lr}
    c942:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    c944:	4b06      	ldr	r3, [pc, #24]	; (c960 <system_init+0x20>)
    c946:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    c948:	4b06      	ldr	r3, [pc, #24]	; (c964 <system_init+0x24>)
    c94a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    c94c:	4b06      	ldr	r3, [pc, #24]	; (c968 <system_init+0x28>)
    c94e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    c950:	4b06      	ldr	r3, [pc, #24]	; (c96c <system_init+0x2c>)
    c952:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    c954:	4b06      	ldr	r3, [pc, #24]	; (c970 <system_init+0x30>)
    c956:	4798      	blx	r3
}
    c958:	46c0      	nop			; (mov r8, r8)
    c95a:	46bd      	mov	sp, r7
    c95c:	bd80      	pop	{r7, pc}
    c95e:	46c0      	nop			; (mov r8, r8)
    c960:	0000c201 	.word	0x0000c201
    c964:	00008c4d 	.word	0x00008c4d
    c968:	0000c935 	.word	0x0000c935
    c96c:	00005de5 	.word	0x00005de5
    c970:	0000c935 	.word	0x0000c935

0000c974 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    c974:	b580      	push	{r7, lr}
    c976:	b086      	sub	sp, #24
    c978:	af00      	add	r7, sp, #0
    c97a:	60f8      	str	r0, [r7, #12]
    c97c:	60b9      	str	r1, [r7, #8]
    c97e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    c980:	2300      	movs	r3, #0
    c982:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    c984:	68fb      	ldr	r3, [r7, #12]
    c986:	2b00      	cmp	r3, #0
    c988:	d012      	beq.n	c9b0 <_read+0x3c>
		return -1;
    c98a:	2301      	movs	r3, #1
    c98c:	425b      	negs	r3, r3
    c98e:	e013      	b.n	c9b8 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    c990:	4b0b      	ldr	r3, [pc, #44]	; (c9c0 <_read+0x4c>)
    c992:	681a      	ldr	r2, [r3, #0]
    c994:	4b0b      	ldr	r3, [pc, #44]	; (c9c4 <_read+0x50>)
    c996:	681b      	ldr	r3, [r3, #0]
    c998:	68b9      	ldr	r1, [r7, #8]
    c99a:	0018      	movs	r0, r3
    c99c:	4790      	blx	r2
		ptr++;
    c99e:	68bb      	ldr	r3, [r7, #8]
    c9a0:	3301      	adds	r3, #1
    c9a2:	60bb      	str	r3, [r7, #8]
		nChars++;
    c9a4:	697b      	ldr	r3, [r7, #20]
    c9a6:	3301      	adds	r3, #1
    c9a8:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    c9aa:	687b      	ldr	r3, [r7, #4]
    c9ac:	3b01      	subs	r3, #1
    c9ae:	607b      	str	r3, [r7, #4]
    c9b0:	687b      	ldr	r3, [r7, #4]
    c9b2:	2b00      	cmp	r3, #0
    c9b4:	dcec      	bgt.n	c990 <_read+0x1c>
	}
	return nChars;
    c9b6:	697b      	ldr	r3, [r7, #20]
}
    c9b8:	0018      	movs	r0, r3
    c9ba:	46bd      	mov	sp, r7
    c9bc:	b006      	add	sp, #24
    c9be:	bd80      	pop	{r7, pc}
    c9c0:	20000444 	.word	0x20000444
    c9c4:	2000044c 	.word	0x2000044c

0000c9c8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    c9c8:	b580      	push	{r7, lr}
    c9ca:	b086      	sub	sp, #24
    c9cc:	af00      	add	r7, sp, #0
    c9ce:	60f8      	str	r0, [r7, #12]
    c9d0:	60b9      	str	r1, [r7, #8]
    c9d2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    c9d4:	2300      	movs	r3, #0
    c9d6:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    c9d8:	68fb      	ldr	r3, [r7, #12]
    c9da:	2b01      	cmp	r3, #1
    c9dc:	d01d      	beq.n	ca1a <_write+0x52>
    c9de:	68fb      	ldr	r3, [r7, #12]
    c9e0:	2b02      	cmp	r3, #2
    c9e2:	d01a      	beq.n	ca1a <_write+0x52>
    c9e4:	68fb      	ldr	r3, [r7, #12]
    c9e6:	2b03      	cmp	r3, #3
    c9e8:	d017      	beq.n	ca1a <_write+0x52>
		return -1;
    c9ea:	2301      	movs	r3, #1
    c9ec:	425b      	negs	r3, r3
    c9ee:	e018      	b.n	ca22 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    c9f0:	4b0e      	ldr	r3, [pc, #56]	; (ca2c <_write+0x64>)
    c9f2:	681a      	ldr	r2, [r3, #0]
    c9f4:	4b0e      	ldr	r3, [pc, #56]	; (ca30 <_write+0x68>)
    c9f6:	6818      	ldr	r0, [r3, #0]
    c9f8:	68bb      	ldr	r3, [r7, #8]
    c9fa:	1c59      	adds	r1, r3, #1
    c9fc:	60b9      	str	r1, [r7, #8]
    c9fe:	781b      	ldrb	r3, [r3, #0]
    ca00:	0019      	movs	r1, r3
    ca02:	4790      	blx	r2
    ca04:	1e03      	subs	r3, r0, #0
    ca06:	da02      	bge.n	ca0e <_write+0x46>
			return -1;
    ca08:	2301      	movs	r3, #1
    ca0a:	425b      	negs	r3, r3
    ca0c:	e009      	b.n	ca22 <_write+0x5a>
		}
		++nChars;
    ca0e:	697b      	ldr	r3, [r7, #20]
    ca10:	3301      	adds	r3, #1
    ca12:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    ca14:	687b      	ldr	r3, [r7, #4]
    ca16:	3b01      	subs	r3, #1
    ca18:	607b      	str	r3, [r7, #4]
    ca1a:	687b      	ldr	r3, [r7, #4]
    ca1c:	2b00      	cmp	r3, #0
    ca1e:	d1e7      	bne.n	c9f0 <_write+0x28>
	}
	return nChars;
    ca20:	697b      	ldr	r3, [r7, #20]
}
    ca22:	0018      	movs	r0, r3
    ca24:	46bd      	mov	sp, r7
    ca26:	b006      	add	sp, #24
    ca28:	bd80      	pop	{r7, pc}
    ca2a:	46c0      	nop			; (mov r8, r8)
    ca2c:	20000448 	.word	0x20000448
    ca30:	2000044c 	.word	0x2000044c

0000ca34 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    ca34:	b580      	push	{r7, lr}
    ca36:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
    ca38:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    ca3c:	4b02      	ldr	r3, [pc, #8]	; (ca48 <NVIC_SystemReset+0x14>)
    ca3e:	4a03      	ldr	r2, [pc, #12]	; (ca4c <NVIC_SystemReset+0x18>)
    ca40:	60da      	str	r2, [r3, #12]
    ca42:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    ca46:	e7fe      	b.n	ca46 <NVIC_SystemReset+0x12>
    ca48:	e000ed00 	.word	0xe000ed00
    ca4c:	05fa0004 	.word	0x05fa0004

0000ca50 <system_pinmux_get_group_from_gpio_pin>:
{
    ca50:	b580      	push	{r7, lr}
    ca52:	b084      	sub	sp, #16
    ca54:	af00      	add	r7, sp, #0
    ca56:	0002      	movs	r2, r0
    ca58:	1dfb      	adds	r3, r7, #7
    ca5a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    ca5c:	230f      	movs	r3, #15
    ca5e:	18fb      	adds	r3, r7, r3
    ca60:	1dfa      	adds	r2, r7, #7
    ca62:	7812      	ldrb	r2, [r2, #0]
    ca64:	09d2      	lsrs	r2, r2, #7
    ca66:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    ca68:	230e      	movs	r3, #14
    ca6a:	18fb      	adds	r3, r7, r3
    ca6c:	1dfa      	adds	r2, r7, #7
    ca6e:	7812      	ldrb	r2, [r2, #0]
    ca70:	0952      	lsrs	r2, r2, #5
    ca72:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    ca74:	4b0d      	ldr	r3, [pc, #52]	; (caac <system_pinmux_get_group_from_gpio_pin+0x5c>)
    ca76:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    ca78:	230f      	movs	r3, #15
    ca7a:	18fb      	adds	r3, r7, r3
    ca7c:	781b      	ldrb	r3, [r3, #0]
    ca7e:	2b00      	cmp	r3, #0
    ca80:	d10f      	bne.n	caa2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    ca82:	230f      	movs	r3, #15
    ca84:	18fb      	adds	r3, r7, r3
    ca86:	781b      	ldrb	r3, [r3, #0]
    ca88:	009b      	lsls	r3, r3, #2
    ca8a:	2210      	movs	r2, #16
    ca8c:	4694      	mov	ip, r2
    ca8e:	44bc      	add	ip, r7
    ca90:	4463      	add	r3, ip
    ca92:	3b08      	subs	r3, #8
    ca94:	681a      	ldr	r2, [r3, #0]
    ca96:	230e      	movs	r3, #14
    ca98:	18fb      	adds	r3, r7, r3
    ca9a:	781b      	ldrb	r3, [r3, #0]
    ca9c:	01db      	lsls	r3, r3, #7
    ca9e:	18d3      	adds	r3, r2, r3
    caa0:	e000      	b.n	caa4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    caa2:	2300      	movs	r3, #0
}
    caa4:	0018      	movs	r0, r3
    caa6:	46bd      	mov	sp, r7
    caa8:	b004      	add	sp, #16
    caaa:	bd80      	pop	{r7, pc}
    caac:	41004400 	.word	0x41004400

0000cab0 <port_get_group_from_gpio_pin>:
{
    cab0:	b580      	push	{r7, lr}
    cab2:	b082      	sub	sp, #8
    cab4:	af00      	add	r7, sp, #0
    cab6:	0002      	movs	r2, r0
    cab8:	1dfb      	adds	r3, r7, #7
    caba:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    cabc:	1dfb      	adds	r3, r7, #7
    cabe:	781b      	ldrb	r3, [r3, #0]
    cac0:	0018      	movs	r0, r3
    cac2:	4b03      	ldr	r3, [pc, #12]	; (cad0 <port_get_group_from_gpio_pin+0x20>)
    cac4:	4798      	blx	r3
    cac6:	0003      	movs	r3, r0
}
    cac8:	0018      	movs	r0, r3
    caca:	46bd      	mov	sp, r7
    cacc:	b002      	add	sp, #8
    cace:	bd80      	pop	{r7, pc}
    cad0:	0000ca51 	.word	0x0000ca51

0000cad4 <port_get_config_defaults>:
{
    cad4:	b580      	push	{r7, lr}
    cad6:	b082      	sub	sp, #8
    cad8:	af00      	add	r7, sp, #0
    cada:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    cadc:	687b      	ldr	r3, [r7, #4]
    cade:	2200      	movs	r2, #0
    cae0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    cae2:	687b      	ldr	r3, [r7, #4]
    cae4:	2201      	movs	r2, #1
    cae6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    cae8:	687b      	ldr	r3, [r7, #4]
    caea:	2200      	movs	r2, #0
    caec:	709a      	strb	r2, [r3, #2]
}
    caee:	46c0      	nop			; (mov r8, r8)
    caf0:	46bd      	mov	sp, r7
    caf2:	b002      	add	sp, #8
    caf4:	bd80      	pop	{r7, pc}
	...

0000caf8 <port_pin_get_input_level>:
{
    caf8:	b580      	push	{r7, lr}
    cafa:	b084      	sub	sp, #16
    cafc:	af00      	add	r7, sp, #0
    cafe:	0002      	movs	r2, r0
    cb00:	1dfb      	adds	r3, r7, #7
    cb02:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    cb04:	1dfb      	adds	r3, r7, #7
    cb06:	781b      	ldrb	r3, [r3, #0]
    cb08:	0018      	movs	r0, r3
    cb0a:	4b0b      	ldr	r3, [pc, #44]	; (cb38 <port_pin_get_input_level+0x40>)
    cb0c:	4798      	blx	r3
    cb0e:	0003      	movs	r3, r0
    cb10:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    cb12:	1dfb      	adds	r3, r7, #7
    cb14:	781b      	ldrb	r3, [r3, #0]
    cb16:	221f      	movs	r2, #31
    cb18:	4013      	ands	r3, r2
    cb1a:	2201      	movs	r2, #1
    cb1c:	409a      	lsls	r2, r3
    cb1e:	0013      	movs	r3, r2
    cb20:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
    cb22:	68fb      	ldr	r3, [r7, #12]
    cb24:	6a1b      	ldr	r3, [r3, #32]
    cb26:	68ba      	ldr	r2, [r7, #8]
    cb28:	4013      	ands	r3, r2
    cb2a:	1e5a      	subs	r2, r3, #1
    cb2c:	4193      	sbcs	r3, r2
    cb2e:	b2db      	uxtb	r3, r3
}
    cb30:	0018      	movs	r0, r3
    cb32:	46bd      	mov	sp, r7
    cb34:	b004      	add	sp, #16
    cb36:	bd80      	pop	{r7, pc}
    cb38:	0000cab1 	.word	0x0000cab1

0000cb3c <port_pin_set_output_level>:
{
    cb3c:	b580      	push	{r7, lr}
    cb3e:	b084      	sub	sp, #16
    cb40:	af00      	add	r7, sp, #0
    cb42:	0002      	movs	r2, r0
    cb44:	1dfb      	adds	r3, r7, #7
    cb46:	701a      	strb	r2, [r3, #0]
    cb48:	1dbb      	adds	r3, r7, #6
    cb4a:	1c0a      	adds	r2, r1, #0
    cb4c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    cb4e:	1dfb      	adds	r3, r7, #7
    cb50:	781b      	ldrb	r3, [r3, #0]
    cb52:	0018      	movs	r0, r3
    cb54:	4b0d      	ldr	r3, [pc, #52]	; (cb8c <port_pin_set_output_level+0x50>)
    cb56:	4798      	blx	r3
    cb58:	0003      	movs	r3, r0
    cb5a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    cb5c:	1dfb      	adds	r3, r7, #7
    cb5e:	781b      	ldrb	r3, [r3, #0]
    cb60:	221f      	movs	r2, #31
    cb62:	4013      	ands	r3, r2
    cb64:	2201      	movs	r2, #1
    cb66:	409a      	lsls	r2, r3
    cb68:	0013      	movs	r3, r2
    cb6a:	60bb      	str	r3, [r7, #8]
	if (level) {
    cb6c:	1dbb      	adds	r3, r7, #6
    cb6e:	781b      	ldrb	r3, [r3, #0]
    cb70:	2b00      	cmp	r3, #0
    cb72:	d003      	beq.n	cb7c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    cb74:	68fb      	ldr	r3, [r7, #12]
    cb76:	68ba      	ldr	r2, [r7, #8]
    cb78:	619a      	str	r2, [r3, #24]
}
    cb7a:	e002      	b.n	cb82 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    cb7c:	68fb      	ldr	r3, [r7, #12]
    cb7e:	68ba      	ldr	r2, [r7, #8]
    cb80:	615a      	str	r2, [r3, #20]
}
    cb82:	46c0      	nop			; (mov r8, r8)
    cb84:	46bd      	mov	sp, r7
    cb86:	b004      	add	sp, #16
    cb88:	bd80      	pop	{r7, pc}
    cb8a:	46c0      	nop			; (mov r8, r8)
    cb8c:	0000cab1 	.word	0x0000cab1

0000cb90 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    cb90:	b580      	push	{r7, lr}
    cb92:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    cb94:	4b02      	ldr	r3, [pc, #8]	; (cba0 <system_reset+0x10>)
    cb96:	4798      	blx	r3
}
    cb98:	46c0      	nop			; (mov r8, r8)
    cb9a:	46bd      	mov	sp, r7
    cb9c:	bd80      	pop	{r7, pc}
    cb9e:	46c0      	nop			; (mov r8, r8)
    cba0:	0000ca35 	.word	0x0000ca35

0000cba4 <system_interrupt_enable>:
{
    cba4:	b580      	push	{r7, lr}
    cba6:	b082      	sub	sp, #8
    cba8:	af00      	add	r7, sp, #0
    cbaa:	0002      	movs	r2, r0
    cbac:	1dfb      	adds	r3, r7, #7
    cbae:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    cbb0:	4b06      	ldr	r3, [pc, #24]	; (cbcc <system_interrupt_enable+0x28>)
    cbb2:	1dfa      	adds	r2, r7, #7
    cbb4:	7812      	ldrb	r2, [r2, #0]
    cbb6:	0011      	movs	r1, r2
    cbb8:	221f      	movs	r2, #31
    cbba:	400a      	ands	r2, r1
    cbbc:	2101      	movs	r1, #1
    cbbe:	4091      	lsls	r1, r2
    cbc0:	000a      	movs	r2, r1
    cbc2:	601a      	str	r2, [r3, #0]
}
    cbc4:	46c0      	nop			; (mov r8, r8)
    cbc6:	46bd      	mov	sp, r7
    cbc8:	b002      	add	sp, #8
    cbca:	bd80      	pop	{r7, pc}
    cbcc:	e000e100 	.word	0xe000e100

0000cbd0 <spi_is_syncing>:
{
    cbd0:	b580      	push	{r7, lr}
    cbd2:	b084      	sub	sp, #16
    cbd4:	af00      	add	r7, sp, #0
    cbd6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    cbd8:	687b      	ldr	r3, [r7, #4]
    cbda:	681b      	ldr	r3, [r3, #0]
    cbdc:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    cbde:	68fb      	ldr	r3, [r7, #12]
    cbe0:	69db      	ldr	r3, [r3, #28]
    cbe2:	1e5a      	subs	r2, r3, #1
    cbe4:	4193      	sbcs	r3, r2
    cbe6:	b2db      	uxtb	r3, r3
}
    cbe8:	0018      	movs	r0, r3
    cbea:	46bd      	mov	sp, r7
    cbec:	b004      	add	sp, #16
    cbee:	bd80      	pop	{r7, pc}

0000cbf0 <spi_get_config_defaults>:
{
    cbf0:	b580      	push	{r7, lr}
    cbf2:	b082      	sub	sp, #8
    cbf4:	af00      	add	r7, sp, #0
    cbf6:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    cbf8:	687b      	ldr	r3, [r7, #4]
    cbfa:	2201      	movs	r2, #1
    cbfc:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    cbfe:	687b      	ldr	r3, [r7, #4]
    cc00:	2200      	movs	r2, #0
    cc02:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    cc04:	687b      	ldr	r3, [r7, #4]
    cc06:	2200      	movs	r2, #0
    cc08:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    cc0a:	687b      	ldr	r3, [r7, #4]
    cc0c:	22c0      	movs	r2, #192	; 0xc0
    cc0e:	0392      	lsls	r2, r2, #14
    cc10:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    cc12:	687b      	ldr	r3, [r7, #4]
    cc14:	2200      	movs	r2, #0
    cc16:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    cc18:	687b      	ldr	r3, [r7, #4]
    cc1a:	2200      	movs	r2, #0
    cc1c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    cc1e:	687b      	ldr	r3, [r7, #4]
    cc20:	2201      	movs	r2, #1
    cc22:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    cc24:	687b      	ldr	r3, [r7, #4]
    cc26:	2201      	movs	r2, #1
    cc28:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    cc2a:	687b      	ldr	r3, [r7, #4]
    cc2c:	2200      	movs	r2, #0
    cc2e:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    cc30:	687b      	ldr	r3, [r7, #4]
    cc32:	2224      	movs	r2, #36	; 0x24
    cc34:	2100      	movs	r1, #0
    cc36:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    cc38:	687b      	ldr	r3, [r7, #4]
    cc3a:	3318      	adds	r3, #24
    cc3c:	220c      	movs	r2, #12
    cc3e:	2100      	movs	r1, #0
    cc40:	0018      	movs	r0, r3
    cc42:	4b0a      	ldr	r3, [pc, #40]	; (cc6c <spi_get_config_defaults+0x7c>)
    cc44:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    cc46:	687b      	ldr	r3, [r7, #4]
    cc48:	4a09      	ldr	r2, [pc, #36]	; (cc70 <spi_get_config_defaults+0x80>)
    cc4a:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    cc4c:	687b      	ldr	r3, [r7, #4]
    cc4e:	2200      	movs	r2, #0
    cc50:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    cc52:	687b      	ldr	r3, [r7, #4]
    cc54:	2200      	movs	r2, #0
    cc56:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    cc58:	687b      	ldr	r3, [r7, #4]
    cc5a:	2200      	movs	r2, #0
    cc5c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    cc5e:	687b      	ldr	r3, [r7, #4]
    cc60:	2200      	movs	r2, #0
    cc62:	635a      	str	r2, [r3, #52]	; 0x34
};
    cc64:	46c0      	nop			; (mov r8, r8)
    cc66:	46bd      	mov	sp, r7
    cc68:	b002      	add	sp, #8
    cc6a:	bd80      	pop	{r7, pc}
    cc6c:	0000de4b 	.word	0x0000de4b
    cc70:	000186a0 	.word	0x000186a0

0000cc74 <spi_enable>:
{
    cc74:	b580      	push	{r7, lr}
    cc76:	b084      	sub	sp, #16
    cc78:	af00      	add	r7, sp, #0
    cc7a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    cc7c:	687b      	ldr	r3, [r7, #4]
    cc7e:	681b      	ldr	r3, [r3, #0]
    cc80:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    cc82:	687b      	ldr	r3, [r7, #4]
    cc84:	681b      	ldr	r3, [r3, #0]
    cc86:	0018      	movs	r0, r3
    cc88:	4b0b      	ldr	r3, [pc, #44]	; (ccb8 <spi_enable+0x44>)
    cc8a:	4798      	blx	r3
    cc8c:	0003      	movs	r3, r0
    cc8e:	0018      	movs	r0, r3
    cc90:	4b0a      	ldr	r3, [pc, #40]	; (ccbc <spi_enable+0x48>)
    cc92:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    cc94:	46c0      	nop			; (mov r8, r8)
    cc96:	687b      	ldr	r3, [r7, #4]
    cc98:	0018      	movs	r0, r3
    cc9a:	4b09      	ldr	r3, [pc, #36]	; (ccc0 <spi_enable+0x4c>)
    cc9c:	4798      	blx	r3
    cc9e:	1e03      	subs	r3, r0, #0
    cca0:	d1f9      	bne.n	cc96 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    cca2:	68fb      	ldr	r3, [r7, #12]
    cca4:	681b      	ldr	r3, [r3, #0]
    cca6:	2202      	movs	r2, #2
    cca8:	431a      	orrs	r2, r3
    ccaa:	68fb      	ldr	r3, [r7, #12]
    ccac:	601a      	str	r2, [r3, #0]
}
    ccae:	46c0      	nop			; (mov r8, r8)
    ccb0:	46bd      	mov	sp, r7
    ccb2:	b004      	add	sp, #16
    ccb4:	bd80      	pop	{r7, pc}
    ccb6:	46c0      	nop			; (mov r8, r8)
    ccb8:	0000a4cd 	.word	0x0000a4cd
    ccbc:	0000cba5 	.word	0x0000cba5
    ccc0:	0000cbd1 	.word	0x0000cbd1

0000ccc4 <at25dfx_chip_init>:
 */
static inline enum status_code at25dfx_chip_init(
		struct at25dfx_chip_module *const module,
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
    ccc4:	b580      	push	{r7, lr}
    ccc6:	b086      	sub	sp, #24
    ccc8:	af00      	add	r7, sp, #0
    ccca:	60f8      	str	r0, [r7, #12]
    cccc:	60b9      	str	r1, [r7, #8]
    ccce:	607a      	str	r2, [r7, #4]
	struct port_config port_config;

	module->type = config->type;
    ccd0:	687b      	ldr	r3, [r7, #4]
    ccd2:	781a      	ldrb	r2, [r3, #0]
    ccd4:	68fb      	ldr	r3, [r7, #12]
    ccd6:	711a      	strb	r2, [r3, #4]
	module->cs_pin = config->cs_pin;
    ccd8:	687b      	ldr	r3, [r7, #4]
    ccda:	785a      	ldrb	r2, [r3, #1]
    ccdc:	68fb      	ldr	r3, [r7, #12]
    ccde:	715a      	strb	r2, [r3, #5]
	module->spi = spi_module;
    cce0:	68fb      	ldr	r3, [r7, #12]
    cce2:	68ba      	ldr	r2, [r7, #8]
    cce4:	601a      	str	r2, [r3, #0]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
    cce6:	2314      	movs	r3, #20
    cce8:	18fb      	adds	r3, r7, r3
    ccea:	0018      	movs	r0, r3
    ccec:	4b0c      	ldr	r3, [pc, #48]	; (cd20 <at25dfx_chip_init+0x5c>)
    ccee:	4798      	blx	r3
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    ccf0:	2314      	movs	r3, #20
    ccf2:	18fb      	adds	r3, r7, r3
    ccf4:	2201      	movs	r2, #1
    ccf6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    ccf8:	68fb      	ldr	r3, [r7, #12]
    ccfa:	795b      	ldrb	r3, [r3, #5]
    ccfc:	2214      	movs	r2, #20
    ccfe:	18ba      	adds	r2, r7, r2
    cd00:	0011      	movs	r1, r2
    cd02:	0018      	movs	r0, r3
    cd04:	4b07      	ldr	r3, [pc, #28]	; (cd24 <at25dfx_chip_init+0x60>)
    cd06:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    cd08:	68fb      	ldr	r3, [r7, #12]
    cd0a:	795b      	ldrb	r3, [r3, #5]
    cd0c:	2101      	movs	r1, #1
    cd0e:	0018      	movs	r0, r3
    cd10:	4b05      	ldr	r3, [pc, #20]	; (cd28 <at25dfx_chip_init+0x64>)
    cd12:	4798      	blx	r3

	return STATUS_OK;
    cd14:	2300      	movs	r3, #0
}
    cd16:	0018      	movs	r0, r3
    cd18:	46bd      	mov	sp, r7
    cd1a:	b006      	add	sp, #24
    cd1c:	bd80      	pop	{r7, pc}
    cd1e:	46c0      	nop			; (mov r8, r8)
    cd20:	0000cad5 	.word	0x0000cad5
    cd24:	00009e21 	.word	0x00009e21
    cd28:	0000cb3d 	.word	0x0000cb3d

0000cd2c <usart_is_syncing>:
{
    cd2c:	b580      	push	{r7, lr}
    cd2e:	b084      	sub	sp, #16
    cd30:	af00      	add	r7, sp, #0
    cd32:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    cd34:	687b      	ldr	r3, [r7, #4]
    cd36:	681b      	ldr	r3, [r3, #0]
    cd38:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    cd3a:	68fb      	ldr	r3, [r7, #12]
    cd3c:	69db      	ldr	r3, [r3, #28]
    cd3e:	1e5a      	subs	r2, r3, #1
    cd40:	4193      	sbcs	r3, r2
    cd42:	b2db      	uxtb	r3, r3
}
    cd44:	0018      	movs	r0, r3
    cd46:	46bd      	mov	sp, r7
    cd48:	b004      	add	sp, #16
    cd4a:	bd80      	pop	{r7, pc}

0000cd4c <_usart_wait_for_sync>:
{
    cd4c:	b580      	push	{r7, lr}
    cd4e:	b082      	sub	sp, #8
    cd50:	af00      	add	r7, sp, #0
    cd52:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    cd54:	46c0      	nop			; (mov r8, r8)
    cd56:	687b      	ldr	r3, [r7, #4]
    cd58:	0018      	movs	r0, r3
    cd5a:	4b04      	ldr	r3, [pc, #16]	; (cd6c <_usart_wait_for_sync+0x20>)
    cd5c:	4798      	blx	r3
    cd5e:	1e03      	subs	r3, r0, #0
    cd60:	d1f9      	bne.n	cd56 <_usart_wait_for_sync+0xa>
}
    cd62:	46c0      	nop			; (mov r8, r8)
    cd64:	46bd      	mov	sp, r7
    cd66:	b002      	add	sp, #8
    cd68:	bd80      	pop	{r7, pc}
    cd6a:	46c0      	nop			; (mov r8, r8)
    cd6c:	0000cd2d 	.word	0x0000cd2d

0000cd70 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    cd70:	b580      	push	{r7, lr}
    cd72:	b082      	sub	sp, #8
    cd74:	af00      	add	r7, sp, #0
    cd76:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    cd78:	687b      	ldr	r3, [r7, #4]
    cd7a:	2280      	movs	r2, #128	; 0x80
    cd7c:	05d2      	lsls	r2, r2, #23
    cd7e:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    cd80:	687b      	ldr	r3, [r7, #4]
    cd82:	2200      	movs	r2, #0
    cd84:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    cd86:	687b      	ldr	r3, [r7, #4]
    cd88:	22ff      	movs	r2, #255	; 0xff
    cd8a:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    cd8c:	687b      	ldr	r3, [r7, #4]
    cd8e:	2200      	movs	r2, #0
    cd90:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    cd92:	687b      	ldr	r3, [r7, #4]
    cd94:	2200      	movs	r2, #0
    cd96:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    cd98:	687b      	ldr	r3, [r7, #4]
    cd9a:	2296      	movs	r2, #150	; 0x96
    cd9c:	0192      	lsls	r2, r2, #6
    cd9e:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    cda0:	687b      	ldr	r3, [r7, #4]
    cda2:	2224      	movs	r2, #36	; 0x24
    cda4:	2101      	movs	r1, #1
    cda6:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    cda8:	687b      	ldr	r3, [r7, #4]
    cdaa:	2225      	movs	r2, #37	; 0x25
    cdac:	2101      	movs	r1, #1
    cdae:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    cdb0:	687b      	ldr	r3, [r7, #4]
    cdb2:	2226      	movs	r2, #38	; 0x26
    cdb4:	2100      	movs	r1, #0
    cdb6:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    cdb8:	687b      	ldr	r3, [r7, #4]
    cdba:	2227      	movs	r2, #39	; 0x27
    cdbc:	2100      	movs	r1, #0
    cdbe:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    cdc0:	687b      	ldr	r3, [r7, #4]
    cdc2:	2200      	movs	r2, #0
    cdc4:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    cdc6:	687b      	ldr	r3, [r7, #4]
    cdc8:	2288      	movs	r2, #136	; 0x88
    cdca:	0352      	lsls	r2, r2, #13
    cdcc:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    cdce:	687b      	ldr	r3, [r7, #4]
    cdd0:	222c      	movs	r2, #44	; 0x2c
    cdd2:	2100      	movs	r1, #0
    cdd4:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    cdd6:	687b      	ldr	r3, [r7, #4]
    cdd8:	222d      	movs	r2, #45	; 0x2d
    cdda:	2100      	movs	r1, #0
    cddc:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    cdde:	687b      	ldr	r3, [r7, #4]
    cde0:	2200      	movs	r2, #0
    cde2:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    cde4:	687b      	ldr	r3, [r7, #4]
    cde6:	2200      	movs	r2, #0
    cde8:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    cdea:	687b      	ldr	r3, [r7, #4]
    cdec:	2200      	movs	r2, #0
    cdee:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    cdf0:	687b      	ldr	r3, [r7, #4]
    cdf2:	2200      	movs	r2, #0
    cdf4:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    cdf6:	687b      	ldr	r3, [r7, #4]
    cdf8:	2200      	movs	r2, #0
    cdfa:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    cdfc:	687b      	ldr	r3, [r7, #4]
    cdfe:	2200      	movs	r2, #0
    ce00:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    ce02:	687b      	ldr	r3, [r7, #4]
    ce04:	2200      	movs	r2, #0
    ce06:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    ce08:	687b      	ldr	r3, [r7, #4]
    ce0a:	2200      	movs	r2, #0
    ce0c:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    ce0e:	687b      	ldr	r3, [r7, #4]
    ce10:	2200      	movs	r2, #0
    ce12:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    ce14:	687b      	ldr	r3, [r7, #4]
    ce16:	2200      	movs	r2, #0
    ce18:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    ce1a:	687b      	ldr	r3, [r7, #4]
    ce1c:	2213      	movs	r2, #19
    ce1e:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    ce20:	687b      	ldr	r3, [r7, #4]
    ce22:	2200      	movs	r2, #0
    ce24:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    ce26:	46c0      	nop			; (mov r8, r8)
    ce28:	46bd      	mov	sp, r7
    ce2a:	b002      	add	sp, #8
    ce2c:	bd80      	pop	{r7, pc}
	...

0000ce30 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    ce30:	b580      	push	{r7, lr}
    ce32:	b084      	sub	sp, #16
    ce34:	af00      	add	r7, sp, #0
    ce36:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    ce38:	687b      	ldr	r3, [r7, #4]
    ce3a:	681b      	ldr	r3, [r3, #0]
    ce3c:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    ce3e:	687b      	ldr	r3, [r7, #4]
    ce40:	681b      	ldr	r3, [r3, #0]
    ce42:	0018      	movs	r0, r3
    ce44:	4b09      	ldr	r3, [pc, #36]	; (ce6c <usart_enable+0x3c>)
    ce46:	4798      	blx	r3
    ce48:	0003      	movs	r3, r0
    ce4a:	0018      	movs	r0, r3
    ce4c:	4b08      	ldr	r3, [pc, #32]	; (ce70 <usart_enable+0x40>)
    ce4e:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    ce50:	687b      	ldr	r3, [r7, #4]
    ce52:	0018      	movs	r0, r3
    ce54:	4b07      	ldr	r3, [pc, #28]	; (ce74 <usart_enable+0x44>)
    ce56:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    ce58:	68fb      	ldr	r3, [r7, #12]
    ce5a:	681b      	ldr	r3, [r3, #0]
    ce5c:	2202      	movs	r2, #2
    ce5e:	431a      	orrs	r2, r3
    ce60:	68fb      	ldr	r3, [r7, #12]
    ce62:	601a      	str	r2, [r3, #0]
}
    ce64:	46c0      	nop			; (mov r8, r8)
    ce66:	46bd      	mov	sp, r7
    ce68:	b004      	add	sp, #16
    ce6a:	bd80      	pop	{r7, pc}
    ce6c:	0000a4cd 	.word	0x0000a4cd
    ce70:	0000cba5 	.word	0x0000cba5
    ce74:	0000cd4d 	.word	0x0000cd4d

0000ce78 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    ce78:	b580      	push	{r7, lr}
    ce7a:	b084      	sub	sp, #16
    ce7c:	af00      	add	r7, sp, #0
    ce7e:	60f8      	str	r0, [r7, #12]
    ce80:	60b9      	str	r1, [r7, #8]
    ce82:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    ce84:	687a      	ldr	r2, [r7, #4]
    ce86:	68b9      	ldr	r1, [r7, #8]
    ce88:	68fb      	ldr	r3, [r7, #12]
    ce8a:	0018      	movs	r0, r3
    ce8c:	4b05      	ldr	r3, [pc, #20]	; (cea4 <usart_serial_init+0x2c>)
    ce8e:	4798      	blx	r3
    ce90:	1e03      	subs	r3, r0, #0
    ce92:	d101      	bne.n	ce98 <usart_serial_init+0x20>
		return true;
    ce94:	2301      	movs	r3, #1
    ce96:	e000      	b.n	ce9a <usart_serial_init+0x22>
	}
	else {
		return false;
    ce98:	2300      	movs	r3, #0
	}
}
    ce9a:	0018      	movs	r0, r3
    ce9c:	46bd      	mov	sp, r7
    ce9e:	b004      	add	sp, #16
    cea0:	bd80      	pop	{r7, pc}
    cea2:	46c0      	nop			; (mov r8, r8)
    cea4:	0000b749 	.word	0x0000b749

0000cea8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    cea8:	b580      	push	{r7, lr}
    ceaa:	b082      	sub	sp, #8
    ceac:	af00      	add	r7, sp, #0
    ceae:	6078      	str	r0, [r7, #4]
    ceb0:	000a      	movs	r2, r1
    ceb2:	1cfb      	adds	r3, r7, #3
    ceb4:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    ceb6:	46c0      	nop			; (mov r8, r8)
    ceb8:	1cfb      	adds	r3, r7, #3
    ceba:	781b      	ldrb	r3, [r3, #0]
    cebc:	b29a      	uxth	r2, r3
    cebe:	687b      	ldr	r3, [r7, #4]
    cec0:	0011      	movs	r1, r2
    cec2:	0018      	movs	r0, r3
    cec4:	4b04      	ldr	r3, [pc, #16]	; (ced8 <usart_serial_putchar+0x30>)
    cec6:	4798      	blx	r3
    cec8:	1e03      	subs	r3, r0, #0
    ceca:	d1f5      	bne.n	ceb8 <usart_serial_putchar+0x10>

	return STATUS_OK;
    cecc:	2300      	movs	r3, #0
}
    cece:	0018      	movs	r0, r3
    ced0:	46bd      	mov	sp, r7
    ced2:	b002      	add	sp, #8
    ced4:	bd80      	pop	{r7, pc}
    ced6:	46c0      	nop			; (mov r8, r8)
    ced8:	0000b9bd 	.word	0x0000b9bd

0000cedc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    cedc:	b580      	push	{r7, lr}
    cede:	b084      	sub	sp, #16
    cee0:	af00      	add	r7, sp, #0
    cee2:	6078      	str	r0, [r7, #4]
    cee4:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    cee6:	230e      	movs	r3, #14
    cee8:	18fb      	adds	r3, r7, r3
    ceea:	2200      	movs	r2, #0
    ceec:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    ceee:	46c0      	nop			; (mov r8, r8)
    cef0:	230e      	movs	r3, #14
    cef2:	18fa      	adds	r2, r7, r3
    cef4:	687b      	ldr	r3, [r7, #4]
    cef6:	0011      	movs	r1, r2
    cef8:	0018      	movs	r0, r3
    cefa:	4b07      	ldr	r3, [pc, #28]	; (cf18 <usart_serial_getchar+0x3c>)
    cefc:	4798      	blx	r3
    cefe:	1e03      	subs	r3, r0, #0
    cf00:	d1f6      	bne.n	cef0 <usart_serial_getchar+0x14>

	*c = temp;
    cf02:	230e      	movs	r3, #14
    cf04:	18fb      	adds	r3, r7, r3
    cf06:	881b      	ldrh	r3, [r3, #0]
    cf08:	b2da      	uxtb	r2, r3
    cf0a:	683b      	ldr	r3, [r7, #0]
    cf0c:	701a      	strb	r2, [r3, #0]
}
    cf0e:	46c0      	nop			; (mov r8, r8)
    cf10:	46bd      	mov	sp, r7
    cf12:	b004      	add	sp, #16
    cf14:	bd80      	pop	{r7, pc}
    cf16:	46c0      	nop			; (mov r8, r8)
    cf18:	0000ba21 	.word	0x0000ba21

0000cf1c <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    cf1c:	b580      	push	{r7, lr}
    cf1e:	b084      	sub	sp, #16
    cf20:	af00      	add	r7, sp, #0
    cf22:	60f8      	str	r0, [r7, #12]
    cf24:	60b9      	str	r1, [r7, #8]
    cf26:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    cf28:	4b10      	ldr	r3, [pc, #64]	; (cf6c <stdio_serial_init+0x50>)
    cf2a:	68fa      	ldr	r2, [r7, #12]
    cf2c:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    cf2e:	4b10      	ldr	r3, [pc, #64]	; (cf70 <stdio_serial_init+0x54>)
    cf30:	4a10      	ldr	r2, [pc, #64]	; (cf74 <stdio_serial_init+0x58>)
    cf32:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    cf34:	4b10      	ldr	r3, [pc, #64]	; (cf78 <stdio_serial_init+0x5c>)
    cf36:	4a11      	ldr	r2, [pc, #68]	; (cf7c <stdio_serial_init+0x60>)
    cf38:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    cf3a:	687a      	ldr	r2, [r7, #4]
    cf3c:	68b9      	ldr	r1, [r7, #8]
    cf3e:	68fb      	ldr	r3, [r7, #12]
    cf40:	0018      	movs	r0, r3
    cf42:	4b0f      	ldr	r3, [pc, #60]	; (cf80 <stdio_serial_init+0x64>)
    cf44:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    cf46:	4b0f      	ldr	r3, [pc, #60]	; (cf84 <stdio_serial_init+0x68>)
    cf48:	681b      	ldr	r3, [r3, #0]
    cf4a:	689b      	ldr	r3, [r3, #8]
    cf4c:	2100      	movs	r1, #0
    cf4e:	0018      	movs	r0, r3
    cf50:	4b0d      	ldr	r3, [pc, #52]	; (cf88 <stdio_serial_init+0x6c>)
    cf52:	4798      	blx	r3
	setbuf(stdin, NULL);
    cf54:	4b0b      	ldr	r3, [pc, #44]	; (cf84 <stdio_serial_init+0x68>)
    cf56:	681b      	ldr	r3, [r3, #0]
    cf58:	685b      	ldr	r3, [r3, #4]
    cf5a:	2100      	movs	r1, #0
    cf5c:	0018      	movs	r0, r3
    cf5e:	4b0a      	ldr	r3, [pc, #40]	; (cf88 <stdio_serial_init+0x6c>)
    cf60:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    cf62:	46c0      	nop			; (mov r8, r8)
    cf64:	46bd      	mov	sp, r7
    cf66:	b004      	add	sp, #16
    cf68:	bd80      	pop	{r7, pc}
    cf6a:	46c0      	nop			; (mov r8, r8)
    cf6c:	2000044c 	.word	0x2000044c
    cf70:	20000448 	.word	0x20000448
    cf74:	0000cea9 	.word	0x0000cea9
    cf78:	20000444 	.word	0x20000444
    cf7c:	0000cedd 	.word	0x0000cedd
    cf80:	0000ce79 	.word	0x0000ce79
    cf84:	20000018 	.word	0x20000018
    cf88:	0000e101 	.word	0x0000e101

0000cf8c <configure_console>:
// begin source code



static void configure_console(void)
{
    cf8c:	b580      	push	{r7, lr}
    cf8e:	b090      	sub	sp, #64	; 0x40
    cf90:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;
	usart_get_config_defaults(&usart_conf);
    cf92:	003b      	movs	r3, r7
    cf94:	0018      	movs	r0, r3
    cf96:	4b13      	ldr	r3, [pc, #76]	; (cfe4 <configure_console+0x58>)
    cf98:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    cf9a:	003b      	movs	r3, r7
    cf9c:	22c4      	movs	r2, #196	; 0xc4
    cf9e:	0392      	lsls	r2, r2, #14
    cfa0:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    cfa2:	003b      	movs	r3, r7
    cfa4:	2201      	movs	r2, #1
    cfa6:	4252      	negs	r2, r2
    cfa8:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    cfaa:	003b      	movs	r3, r7
    cfac:	2201      	movs	r2, #1
    cfae:	4252      	negs	r2, r2
    cfb0:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    cfb2:	003b      	movs	r3, r7
    cfb4:	4a0c      	ldr	r2, [pc, #48]	; (cfe8 <configure_console+0x5c>)
    cfb6:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    cfb8:	003b      	movs	r3, r7
    cfba:	4a0c      	ldr	r2, [pc, #48]	; (cfec <configure_console+0x60>)
    cfbc:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    cfbe:	003b      	movs	r3, r7
    cfc0:	22e1      	movs	r2, #225	; 0xe1
    cfc2:	0252      	lsls	r2, r2, #9
    cfc4:	621a      	str	r2, [r3, #32]
	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &usart_conf);
    cfc6:	003a      	movs	r2, r7
    cfc8:	4909      	ldr	r1, [pc, #36]	; (cff0 <configure_console+0x64>)
    cfca:	4b0a      	ldr	r3, [pc, #40]	; (cff4 <configure_console+0x68>)
    cfcc:	0018      	movs	r0, r3
    cfce:	4b0a      	ldr	r3, [pc, #40]	; (cff8 <configure_console+0x6c>)
    cfd0:	4798      	blx	r3
	usart_enable(&usart_instance);
    cfd2:	4b08      	ldr	r3, [pc, #32]	; (cff4 <configure_console+0x68>)
    cfd4:	0018      	movs	r0, r3
    cfd6:	4b09      	ldr	r3, [pc, #36]	; (cffc <configure_console+0x70>)
    cfd8:	4798      	blx	r3
}
    cfda:	46c0      	nop			; (mov r8, r8)
    cfdc:	46bd      	mov	sp, r7
    cfde:	b010      	add	sp, #64	; 0x40
    cfe0:	bd80      	pop	{r7, pc}
    cfe2:	46c0      	nop			; (mov r8, r8)
    cfe4:	0000cd71 	.word	0x0000cd71
    cfe8:	002a0003 	.word	0x002a0003
    cfec:	002b0003 	.word	0x002b0003
    cff0:	42001800 	.word	0x42001800
    cff4:	20000450 	.word	0x20000450
    cff8:	0000cf1d 	.word	0x0000cf1d
    cffc:	0000ce31 	.word	0x0000ce31

0000d000 <writeFWStat>:
	config.manual_page_write = false;
	nvm_set_config(&config);
}

static void writeFWStat(Firmware_Status_t thisFW)
{
    d000:	b590      	push	{r4, r7, lr}
    d002:	b095      	sub	sp, #84	; 0x54
    d004:	af00      	add	r7, sp, #0
    d006:	003b      	movs	r3, r7
    d008:	6018      	str	r0, [r3, #0]
    d00a:	6059      	str	r1, [r3, #4]
	uint8_t page_buffer[NVMCTRL_PAGE_SIZE]={0};
    d00c:	230c      	movs	r3, #12
    d00e:	18fb      	adds	r3, r7, r3
    d010:	0018      	movs	r0, r3
    d012:	2340      	movs	r3, #64	; 0x40
    d014:	001a      	movs	r2, r3
    d016:	2100      	movs	r1, #0
    d018:	4b23      	ldr	r3, [pc, #140]	; (d0a8 <writeFWStat+0xa8>)
    d01a:	4798      	blx	r3
	page_buffer[0] = thisFW.signature[0];
    d01c:	003b      	movs	r3, r7
    d01e:	781a      	ldrb	r2, [r3, #0]
    d020:	230c      	movs	r3, #12
    d022:	18fb      	adds	r3, r7, r3
    d024:	701a      	strb	r2, [r3, #0]
	page_buffer[1] = thisFW.signature[1];
    d026:	003b      	movs	r3, r7
    d028:	785a      	ldrb	r2, [r3, #1]
    d02a:	230c      	movs	r3, #12
    d02c:	18fb      	adds	r3, r7, r3
    d02e:	705a      	strb	r2, [r3, #1]
	page_buffer[2] = thisFW.signature[2];
    d030:	003b      	movs	r3, r7
    d032:	789a      	ldrb	r2, [r3, #2]
    d034:	230c      	movs	r3, #12
    d036:	18fb      	adds	r3, r7, r3
    d038:	709a      	strb	r2, [r3, #2]
	page_buffer[3] = thisFW.signature[3];
    d03a:	003b      	movs	r3, r7
    d03c:	78da      	ldrb	r2, [r3, #3]
    d03e:	230c      	movs	r3, #12
    d040:	18fb      	adds	r3, r7, r3
    d042:	70da      	strb	r2, [r3, #3]
	page_buffer[4] = thisFW.executing_image;
    d044:	003b      	movs	r3, r7
    d046:	791a      	ldrb	r2, [r3, #4]
    d048:	230c      	movs	r3, #12
    d04a:	18fb      	adds	r3, r7, r3
    d04c:	711a      	strb	r2, [r3, #4]
	page_buffer[5] = thisFW.downloaded_image;
    d04e:	003b      	movs	r3, r7
    d050:	795a      	ldrb	r2, [r3, #5]
    d052:	230c      	movs	r3, #12
    d054:	18fb      	adds	r3, r7, r3
    d056:	715a      	strb	r2, [r3, #5]
	page_buffer[6] = thisFW.writenew_image;
    d058:	003b      	movs	r3, r7
    d05a:	799a      	ldrb	r2, [r3, #6]
    d05c:	230c      	movs	r3, #12
    d05e:	18fb      	adds	r3, r7, r3
    d060:	719a      	strb	r2, [r3, #6]
	
	status_code_genare_t error_code;
	do
	{
		error_code = nvm_erase_row(FW_STAT_ADDRESS);			// Erase FW stat row
    d062:	234f      	movs	r3, #79	; 0x4f
    d064:	18fc      	adds	r4, r7, r3
    d066:	23fe      	movs	r3, #254	; 0xfe
    d068:	01db      	lsls	r3, r3, #7
    d06a:	0018      	movs	r0, r3
    d06c:	4b0f      	ldr	r3, [pc, #60]	; (d0ac <writeFWStat+0xac>)
    d06e:	4798      	blx	r3
    d070:	0003      	movs	r3, r0
    d072:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    d074:	234f      	movs	r3, #79	; 0x4f
    d076:	18fb      	adds	r3, r7, r3
    d078:	781b      	ldrb	r3, [r3, #0]
    d07a:	2b05      	cmp	r3, #5
    d07c:	d0f1      	beq.n	d062 <writeFWStat+0x62>
	
	do
	{
		error_code = nvm_write_buffer(FW_STAT_ADDRESS, page_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
    d07e:	234f      	movs	r3, #79	; 0x4f
    d080:	18fc      	adds	r4, r7, r3
    d082:	230c      	movs	r3, #12
    d084:	18f9      	adds	r1, r7, r3
    d086:	23fe      	movs	r3, #254	; 0xfe
    d088:	01db      	lsls	r3, r3, #7
    d08a:	2240      	movs	r2, #64	; 0x40
    d08c:	0018      	movs	r0, r3
    d08e:	4b08      	ldr	r3, [pc, #32]	; (d0b0 <writeFWStat+0xb0>)
    d090:	4798      	blx	r3
    d092:	0003      	movs	r3, r0
    d094:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    d096:	234f      	movs	r3, #79	; 0x4f
    d098:	18fb      	adds	r3, r7, r3
    d09a:	781b      	ldrb	r3, [r3, #0]
    d09c:	2b05      	cmp	r3, #5
    d09e:	d0ee      	beq.n	d07e <writeFWStat+0x7e>
}
    d0a0:	46c0      	nop			; (mov r8, r8)
    d0a2:	46bd      	mov	sp, r7
    d0a4:	b015      	add	sp, #84	; 0x54
    d0a6:	bd90      	pop	{r4, r7, pc}
    d0a8:	0000de4b 	.word	0x0000de4b
    d0ac:	00009d51 	.word	0x00009d51
    d0b0:	00009c05 	.word	0x00009c05

0000d0b4 <configure_port_pins>:
void configure_port_pins(void)
{
    d0b4:	b580      	push	{r7, lr}
    d0b6:	b082      	sub	sp, #8
    d0b8:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    d0ba:	1d3b      	adds	r3, r7, #4
    d0bc:	0018      	movs	r0, r3
    d0be:	4b0b      	ldr	r3, [pc, #44]	; (d0ec <configure_port_pins+0x38>)
    d0c0:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    d0c2:	1d3b      	adds	r3, r7, #4
    d0c4:	2201      	movs	r2, #1
    d0c6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &config_port_pin);
    d0c8:	1d3b      	adds	r3, r7, #4
    d0ca:	0019      	movs	r1, r3
    d0cc:	2017      	movs	r0, #23
    d0ce:	4b08      	ldr	r3, [pc, #32]	; (d0f0 <configure_port_pins+0x3c>)
    d0d0:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    d0d2:	1d3b      	adds	r3, r7, #4
    d0d4:	2200      	movs	r2, #0
    d0d6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(B1, &config_port_pin);
    d0d8:	1d3b      	adds	r3, r7, #4
    d0da:	0019      	movs	r1, r3
    d0dc:	2037      	movs	r0, #55	; 0x37
    d0de:	4b04      	ldr	r3, [pc, #16]	; (d0f0 <configure_port_pins+0x3c>)
    d0e0:	4798      	blx	r3
}
    d0e2:	46c0      	nop			; (mov r8, r8)
    d0e4:	46bd      	mov	sp, r7
    d0e6:	b002      	add	sp, #8
    d0e8:	bd80      	pop	{r7, pc}
    d0ea:	46c0      	nop			; (mov r8, r8)
    d0ec:	0000cad5 	.word	0x0000cad5
    d0f0:	00009e21 	.word	0x00009e21

0000d0f4 <configure_spi_flash>:

static void configure_spi_flash()
{
    d0f4:	b580      	push	{r7, lr}
    d0f6:	b090      	sub	sp, #64	; 0x40
    d0f8:	af00      	add	r7, sp, #0
	struct at25dfx_chip_config at25dfx_chip_config;
	struct spi_config at25dfx_spi_config;
	spi_get_config_defaults(&at25dfx_spi_config);
    d0fa:	1d3b      	adds	r3, r7, #4
    d0fc:	0018      	movs	r0, r3
    d0fe:	4b19      	ldr	r3, [pc, #100]	; (d164 <configure_spi_flash+0x70>)
    d100:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
    d102:	1d3b      	adds	r3, r7, #4
    d104:	4a18      	ldr	r2, [pc, #96]	; (d168 <configure_spi_flash+0x74>)
    d106:	619a      	str	r2, [r3, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
    d108:	1d3b      	adds	r3, r7, #4
    d10a:	2280      	movs	r2, #128	; 0x80
    d10c:	0252      	lsls	r2, r2, #9
    d10e:	60da      	str	r2, [r3, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
    d110:	1d3b      	adds	r3, r7, #4
    d112:	4a16      	ldr	r2, [pc, #88]	; (d16c <configure_spi_flash+0x78>)
    d114:	629a      	str	r2, [r3, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
    d116:	1d3b      	adds	r3, r7, #4
    d118:	4a15      	ldr	r2, [pc, #84]	; (d170 <configure_spi_flash+0x7c>)
    d11a:	62da      	str	r2, [r3, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
    d11c:	1d3b      	adds	r3, r7, #4
    d11e:	4a15      	ldr	r2, [pc, #84]	; (d174 <configure_spi_flash+0x80>)
    d120:	631a      	str	r2, [r3, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
    d122:	1d3b      	adds	r3, r7, #4
    d124:	4a14      	ldr	r2, [pc, #80]	; (d178 <configure_spi_flash+0x84>)
    d126:	635a      	str	r2, [r3, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    d128:	1d3a      	adds	r2, r7, #4
    d12a:	4914      	ldr	r1, [pc, #80]	; (d17c <configure_spi_flash+0x88>)
    d12c:	4b14      	ldr	r3, [pc, #80]	; (d180 <configure_spi_flash+0x8c>)
    d12e:	0018      	movs	r0, r3
    d130:	4b14      	ldr	r3, [pc, #80]	; (d184 <configure_spi_flash+0x90>)
    d132:	4798      	blx	r3
	spi_enable(&at25dfx_spi);
    d134:	4b12      	ldr	r3, [pc, #72]	; (d180 <configure_spi_flash+0x8c>)
    d136:	0018      	movs	r0, r3
    d138:	4b13      	ldr	r3, [pc, #76]	; (d188 <configure_spi_flash+0x94>)
    d13a:	4798      	blx	r3
	
	at25dfx_chip_config.type = AT25DFX_MEM_TYPE;
    d13c:	233c      	movs	r3, #60	; 0x3c
    d13e:	18fb      	adds	r3, r7, r3
    d140:	2204      	movs	r2, #4
    d142:	701a      	strb	r2, [r3, #0]
	at25dfx_chip_config.cs_pin = AT25DFX_CS;
    d144:	233c      	movs	r3, #60	; 0x3c
    d146:	18fb      	adds	r3, r7, r3
    d148:	2207      	movs	r2, #7
    d14a:	705a      	strb	r2, [r3, #1]
	at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at25dfx_chip_config);
    d14c:	233c      	movs	r3, #60	; 0x3c
    d14e:	18fa      	adds	r2, r7, r3
    d150:	490b      	ldr	r1, [pc, #44]	; (d180 <configure_spi_flash+0x8c>)
    d152:	4b0e      	ldr	r3, [pc, #56]	; (d18c <configure_spi_flash+0x98>)
    d154:	0018      	movs	r0, r3
    d156:	4b0e      	ldr	r3, [pc, #56]	; (d190 <configure_spi_flash+0x9c>)
    d158:	4798      	blx	r3
}
    d15a:	46c0      	nop			; (mov r8, r8)
    d15c:	46bd      	mov	sp, r7
    d15e:	b010      	add	sp, #64	; 0x40
    d160:	bd80      	pop	{r7, pc}
    d162:	46c0      	nop			; (mov r8, r8)
    d164:	0000cbf1 	.word	0x0000cbf1
    d168:	0001d4c0 	.word	0x0001d4c0
    d16c:	00100002 	.word	0x00100002
    d170:	00110002 	.word	0x00110002
    d174:	00120002 	.word	0x00120002
    d178:	00130002 	.word	0x00130002
    d17c:	42000c00 	.word	0x42000c00
    d180:	20000dcc 	.word	0x20000dcc
    d184:	0000aa95 	.word	0x0000aa95
    d188:	0000cc75 	.word	0x0000cc75
    d18c:	20000c84 	.word	0x20000c84
    d190:	0000ccc5 	.word	0x0000ccc5

0000d194 <configure_timer>:

//Http downloader source code

static void configure_timer(void)
{
    d194:	b580      	push	{r7, lr}
    d196:	b082      	sub	sp, #8
    d198:	af00      	add	r7, sp, #0
	struct sw_timer_config swt_conf;
	sw_timer_get_config_defaults(&swt_conf);
    d19a:	1d3b      	adds	r3, r7, #4
    d19c:	0018      	movs	r0, r3
    d19e:	4b08      	ldr	r3, [pc, #32]	; (d1c0 <configure_timer+0x2c>)
    d1a0:	4798      	blx	r3

	sw_timer_init(&swt_module_inst, &swt_conf);
    d1a2:	1d3a      	adds	r2, r7, #4
    d1a4:	4b07      	ldr	r3, [pc, #28]	; (d1c4 <configure_timer+0x30>)
    d1a6:	0011      	movs	r1, r2
    d1a8:	0018      	movs	r0, r3
    d1aa:	4b07      	ldr	r3, [pc, #28]	; (d1c8 <configure_timer+0x34>)
    d1ac:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    d1ae:	4b05      	ldr	r3, [pc, #20]	; (d1c4 <configure_timer+0x30>)
    d1b0:	0018      	movs	r0, r3
    d1b2:	4b06      	ldr	r3, [pc, #24]	; (d1cc <configure_timer+0x38>)
    d1b4:	4798      	blx	r3
}
    d1b6:	46c0      	nop			; (mov r8, r8)
    d1b8:	46bd      	mov	sp, r7
    d1ba:	b002      	add	sp, #8
    d1bc:	bd80      	pop	{r7, pc}
    d1be:	46c0      	nop			; (mov r8, r8)
    d1c0:	0000871d 	.word	0x0000871d
    d1c4:	20000c8c 	.word	0x20000c8c
    d1c8:	00008741 	.word	0x00008741
    d1cc:	0000882d 	.word	0x0000882d

0000d1d0 <init_state>:

static void init_state(void)
{
    d1d0:	b580      	push	{r7, lr}
    d1d2:	af00      	add	r7, sp, #0
	down_state = NOT_READY;
    d1d4:	4b02      	ldr	r3, [pc, #8]	; (d1e0 <init_state+0x10>)
    d1d6:	2200      	movs	r2, #0
    d1d8:	701a      	strb	r2, [r3, #0]
}
    d1da:	46c0      	nop			; (mov r8, r8)
    d1dc:	46bd      	mov	sp, r7
    d1de:	bd80      	pop	{r7, pc}
    d1e0:	200002a0 	.word	0x200002a0

0000d1e4 <clear_state>:

static void clear_state(download_state mask)
{
    d1e4:	b580      	push	{r7, lr}
    d1e6:	b082      	sub	sp, #8
    d1e8:	af00      	add	r7, sp, #0
    d1ea:	0002      	movs	r2, r0
    d1ec:	1dfb      	adds	r3, r7, #7
    d1ee:	701a      	strb	r2, [r3, #0]
	down_state &= ~mask;
    d1f0:	1dfb      	adds	r3, r7, #7
    d1f2:	781b      	ldrb	r3, [r3, #0]
    d1f4:	b25b      	sxtb	r3, r3
    d1f6:	43db      	mvns	r3, r3
    d1f8:	b25b      	sxtb	r3, r3
    d1fa:	4a06      	ldr	r2, [pc, #24]	; (d214 <clear_state+0x30>)
    d1fc:	7812      	ldrb	r2, [r2, #0]
    d1fe:	b252      	sxtb	r2, r2
    d200:	4013      	ands	r3, r2
    d202:	b25b      	sxtb	r3, r3
    d204:	b2da      	uxtb	r2, r3
    d206:	4b03      	ldr	r3, [pc, #12]	; (d214 <clear_state+0x30>)
    d208:	701a      	strb	r2, [r3, #0]
}
    d20a:	46c0      	nop			; (mov r8, r8)
    d20c:	46bd      	mov	sp, r7
    d20e:	b002      	add	sp, #8
    d210:	bd80      	pop	{r7, pc}
    d212:	46c0      	nop			; (mov r8, r8)
    d214:	200002a0 	.word	0x200002a0

0000d218 <add_state>:

static void add_state(download_state mask)
{
    d218:	b580      	push	{r7, lr}
    d21a:	b082      	sub	sp, #8
    d21c:	af00      	add	r7, sp, #0
    d21e:	0002      	movs	r2, r0
    d220:	1dfb      	adds	r3, r7, #7
    d222:	701a      	strb	r2, [r3, #0]
	down_state |= mask;
    d224:	4b05      	ldr	r3, [pc, #20]	; (d23c <add_state+0x24>)
    d226:	781a      	ldrb	r2, [r3, #0]
    d228:	1dfb      	adds	r3, r7, #7
    d22a:	781b      	ldrb	r3, [r3, #0]
    d22c:	4313      	orrs	r3, r2
    d22e:	b2da      	uxtb	r2, r3
    d230:	4b02      	ldr	r3, [pc, #8]	; (d23c <add_state+0x24>)
    d232:	701a      	strb	r2, [r3, #0]
}
    d234:	46c0      	nop			; (mov r8, r8)
    d236:	46bd      	mov	sp, r7
    d238:	b002      	add	sp, #8
    d23a:	bd80      	pop	{r7, pc}
    d23c:	200002a0 	.word	0x200002a0

0000d240 <is_state_set>:

static inline bool is_state_set(download_state mask)
{
    d240:	b580      	push	{r7, lr}
    d242:	b082      	sub	sp, #8
    d244:	af00      	add	r7, sp, #0
    d246:	0002      	movs	r2, r0
    d248:	1dfb      	adds	r3, r7, #7
    d24a:	701a      	strb	r2, [r3, #0]
	return ((down_state & mask) != 0);
    d24c:	4b06      	ldr	r3, [pc, #24]	; (d268 <is_state_set+0x28>)
    d24e:	781b      	ldrb	r3, [r3, #0]
    d250:	1dfa      	adds	r2, r7, #7
    d252:	7812      	ldrb	r2, [r2, #0]
    d254:	4013      	ands	r3, r2
    d256:	b2db      	uxtb	r3, r3
    d258:	1e5a      	subs	r2, r3, #1
    d25a:	4193      	sbcs	r3, r2
    d25c:	b2db      	uxtb	r3, r3
}
    d25e:	0018      	movs	r0, r3
    d260:	46bd      	mov	sp, r7
    d262:	b002      	add	sp, #8
    d264:	bd80      	pop	{r7, pc}
    d266:	46c0      	nop			; (mov r8, r8)
    d268:	200002a0 	.word	0x200002a0

0000d26c <write_spi_flash_frm_buf>:

void write_spi_flash_frm_buf(uint32 len){
    d26c:	b590      	push	{r4, r7, lr}
    d26e:	b083      	sub	sp, #12
    d270:	af00      	add	r7, sp, #0
    d272:	6078      	str	r0, [r7, #4]
	at25dfx_chip_wake(&at25dfx_chip);
    d274:	4b1d      	ldr	r3, [pc, #116]	; (d2ec <write_spi_flash_frm_buf+0x80>)
    d276:	0018      	movs	r0, r3
    d278:	4b1d      	ldr	r3, [pc, #116]	; (d2f0 <write_spi_flash_frm_buf+0x84>)
    d27a:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    d27c:	4b1b      	ldr	r3, [pc, #108]	; (d2ec <write_spi_flash_frm_buf+0x80>)
    d27e:	0018      	movs	r0, r3
    d280:	4b1c      	ldr	r3, [pc, #112]	; (d2f4 <write_spi_flash_frm_buf+0x88>)
    d282:	4798      	blx	r3
		// Handle missing or non-responsive device
	}
	
	at25dfx_chip_set_sector_protect(&at25dfx_chip, flash_addr, false);				// unprotect sector
    d284:	4b1c      	ldr	r3, [pc, #112]	; (d2f8 <write_spi_flash_frm_buf+0x8c>)
    d286:	6819      	ldr	r1, [r3, #0]
    d288:	4b18      	ldr	r3, [pc, #96]	; (d2ec <write_spi_flash_frm_buf+0x80>)
    d28a:	2200      	movs	r2, #0
    d28c:	0018      	movs	r0, r3
    d28e:	4b1b      	ldr	r3, [pc, #108]	; (d2fc <write_spi_flash_frm_buf+0x90>)
    d290:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr, AT25DFX_BLOCK_SIZE_4KB);	// erase block
    d292:	4b19      	ldr	r3, [pc, #100]	; (d2f8 <write_spi_flash_frm_buf+0x8c>)
    d294:	6819      	ldr	r1, [r3, #0]
    d296:	4b15      	ldr	r3, [pc, #84]	; (d2ec <write_spi_flash_frm_buf+0x80>)
    d298:	2200      	movs	r2, #0
    d29a:	0018      	movs	r0, r3
    d29c:	4b18      	ldr	r3, [pc, #96]	; (d300 <write_spi_flash_frm_buf+0x94>)
    d29e:	4798      	blx	r3
	at25dfx_chip_write_buffer(&at25dfx_chip, flash_addr, http_buf + http_buf_read_ptr, len);	// write buffer
    d2a0:	4b15      	ldr	r3, [pc, #84]	; (d2f8 <write_spi_flash_frm_buf+0x8c>)
    d2a2:	6819      	ldr	r1, [r3, #0]
    d2a4:	4b17      	ldr	r3, [pc, #92]	; (d304 <write_spi_flash_frm_buf+0x98>)
    d2a6:	681a      	ldr	r2, [r3, #0]
    d2a8:	4b17      	ldr	r3, [pc, #92]	; (d308 <write_spi_flash_frm_buf+0x9c>)
    d2aa:	18d2      	adds	r2, r2, r3
    d2ac:	687b      	ldr	r3, [r7, #4]
    d2ae:	b29b      	uxth	r3, r3
    d2b0:	480e      	ldr	r0, [pc, #56]	; (d2ec <write_spi_flash_frm_buf+0x80>)
    d2b2:	4c16      	ldr	r4, [pc, #88]	; (d30c <write_spi_flash_frm_buf+0xa0>)
    d2b4:	47a0      	blx	r4
	at25dfx_chip_read_buffer(&at25dfx_chip, flash_addr, read_buffer, len);		// read same location
    d2b6:	4b10      	ldr	r3, [pc, #64]	; (d2f8 <write_spi_flash_frm_buf+0x8c>)
    d2b8:	6819      	ldr	r1, [r3, #0]
    d2ba:	687b      	ldr	r3, [r7, #4]
    d2bc:	b29b      	uxth	r3, r3
    d2be:	4a14      	ldr	r2, [pc, #80]	; (d310 <write_spi_flash_frm_buf+0xa4>)
    d2c0:	480a      	ldr	r0, [pc, #40]	; (d2ec <write_spi_flash_frm_buf+0x80>)
    d2c2:	4c14      	ldr	r4, [pc, #80]	; (d314 <write_spi_flash_frm_buf+0xa8>)
    d2c4:	47a0      	blx	r4
	//at25dfx_chip_read_buffer(&at25dfx_chip, (flash_addr+0x0020), read_buffer, AT25DFX_BUFFER_SIZE);		// read same location
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip, true);				// protect sector
    d2c6:	4b09      	ldr	r3, [pc, #36]	; (d2ec <write_spi_flash_frm_buf+0x80>)
    d2c8:	2101      	movs	r1, #1
    d2ca:	0018      	movs	r0, r3
    d2cc:	4b12      	ldr	r3, [pc, #72]	; (d318 <write_spi_flash_frm_buf+0xac>)
    d2ce:	4798      	blx	r3
	at25dfx_chip_sleep(&at25dfx_chip);											// back to sleep
    d2d0:	4b06      	ldr	r3, [pc, #24]	; (d2ec <write_spi_flash_frm_buf+0x80>)
    d2d2:	0018      	movs	r0, r3
    d2d4:	4b11      	ldr	r3, [pc, #68]	; (d31c <write_spi_flash_frm_buf+0xb0>)
    d2d6:	4798      	blx	r3
	flash_addr = flash_addr + len;
    d2d8:	4b07      	ldr	r3, [pc, #28]	; (d2f8 <write_spi_flash_frm_buf+0x8c>)
    d2da:	681a      	ldr	r2, [r3, #0]
    d2dc:	687b      	ldr	r3, [r7, #4]
    d2de:	18d2      	adds	r2, r2, r3
    d2e0:	4b05      	ldr	r3, [pc, #20]	; (d2f8 <write_spi_flash_frm_buf+0x8c>)
    d2e2:	601a      	str	r2, [r3, #0]
}
    d2e4:	46c0      	nop			; (mov r8, r8)
    d2e6:	46bd      	mov	sp, r7
    d2e8:	b003      	add	sp, #12
    d2ea:	bd90      	pop	{r4, r7, pc}
    d2ec:	20000c84 	.word	0x20000c84
    d2f0:	0000997d 	.word	0x0000997d
    d2f4:	00009371 	.word	0x00009371
    d2f8:	20000294 	.word	0x20000294
    d2fc:	0000982d 	.word	0x0000982d
    d300:	0000967d 	.word	0x0000967d
    d304:	2000029c 	.word	0x2000029c
    d308:	20000484 	.word	0x20000484
    d30c:	000094d5 	.word	0x000094d5
    d310:	20000288 	.word	0x20000288
    d314:	0000941d 	.word	0x0000941d
    d318:	00009779 	.word	0x00009779
    d31c:	000098f1 	.word	0x000098f1

0000d320 <start_download>:

static void start_download(void)
{
    d320:	b590      	push	{r4, r7, lr}
    d322:	b083      	sub	sp, #12
    d324:	af02      	add	r7, sp, #8
	if (!is_state_set(STORAGE_READY)) {
		printf("start_download: Flash not initialized.\r\n");
		return;
	}
	*/
	if (!is_state_set(WIFI_CONNECTED)) {
    d326:	2002      	movs	r0, #2
    d328:	4b18      	ldr	r3, [pc, #96]	; (d38c <start_download+0x6c>)
    d32a:	4798      	blx	r3
    d32c:	0003      	movs	r3, r0
    d32e:	001a      	movs	r2, r3
    d330:	2301      	movs	r3, #1
    d332:	4053      	eors	r3, r2
    d334:	b2db      	uxtb	r3, r3
    d336:	2b00      	cmp	r3, #0
    d338:	d004      	beq.n	d344 <start_download+0x24>
		printf("start_download: Wi-Fi is not connected.\r\n");
    d33a:	4b15      	ldr	r3, [pc, #84]	; (d390 <start_download+0x70>)
    d33c:	0018      	movs	r0, r3
    d33e:	4b15      	ldr	r3, [pc, #84]	; (d394 <start_download+0x74>)
    d340:	4798      	blx	r3
		return;
    d342:	e01f      	b.n	d384 <start_download+0x64>
	}

	if (is_state_set(GET_REQUESTED)) {
    d344:	2004      	movs	r0, #4
    d346:	4b11      	ldr	r3, [pc, #68]	; (d38c <start_download+0x6c>)
    d348:	4798      	blx	r3
    d34a:	1e03      	subs	r3, r0, #0
    d34c:	d004      	beq.n	d358 <start_download+0x38>
		printf("start_download: request is sent already.\r\n");
    d34e:	4b12      	ldr	r3, [pc, #72]	; (d398 <start_download+0x78>)
    d350:	0018      	movs	r0, r3
    d352:	4b10      	ldr	r3, [pc, #64]	; (d394 <start_download+0x74>)
    d354:	4798      	blx	r3
		return;
    d356:	e015      	b.n	d384 <start_download+0x64>
	}

	if (is_state_set(DOWNLOADING)) {
    d358:	2008      	movs	r0, #8
    d35a:	4b0c      	ldr	r3, [pc, #48]	; (d38c <start_download+0x6c>)
    d35c:	4798      	blx	r3
    d35e:	1e03      	subs	r3, r0, #0
    d360:	d004      	beq.n	d36c <start_download+0x4c>
		printf("start_download: running download already.\r\n");
    d362:	4b0e      	ldr	r3, [pc, #56]	; (d39c <start_download+0x7c>)
    d364:	0018      	movs	r0, r3
    d366:	4b0b      	ldr	r3, [pc, #44]	; (d394 <start_download+0x74>)
    d368:	4798      	blx	r3
		return;
    d36a:	e00b      	b.n	d384 <start_download+0x64>
	}

	/* Send the HTTP request. */
	printf("start_download: sending HTTP request...\r\n");
    d36c:	4b0c      	ldr	r3, [pc, #48]	; (d3a0 <start_download+0x80>)
    d36e:	0018      	movs	r0, r3
    d370:	4b08      	ldr	r3, [pc, #32]	; (d394 <start_download+0x74>)
    d372:	4798      	blx	r3
	http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    d374:	490b      	ldr	r1, [pc, #44]	; (d3a4 <start_download+0x84>)
    d376:	480c      	ldr	r0, [pc, #48]	; (d3a8 <start_download+0x88>)
    d378:	2300      	movs	r3, #0
    d37a:	9300      	str	r3, [sp, #0]
    d37c:	2300      	movs	r3, #0
    d37e:	2201      	movs	r2, #1
    d380:	4c0a      	ldr	r4, [pc, #40]	; (d3ac <start_download+0x8c>)
    d382:	47a0      	blx	r4
}
    d384:	46bd      	mov	sp, r7
    d386:	b001      	add	sp, #4
    d388:	bd90      	pop	{r4, r7, pc}
    d38a:	46c0      	nop			; (mov r8, r8)
    d38c:	0000d241 	.word	0x0000d241
    d390:	000109a0 	.word	0x000109a0
    d394:	0000e0c9 	.word	0x0000e0c9
    d398:	000109cc 	.word	0x000109cc
    d39c:	000109f8 	.word	0x000109f8
    d3a0:	00010a24 	.word	0x00010a24
    d3a4:	00010a50 	.word	0x00010a50
    d3a8:	20000ce4 	.word	0x20000ce4
    d3ac:	0000728d 	.word	0x0000728d

0000d3b0 <http_client_callback>:

static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
    d3b0:	b580      	push	{r7, lr}
    d3b2:	b088      	sub	sp, #32
    d3b4:	af00      	add	r7, sp, #0
    d3b6:	60f8      	str	r0, [r7, #12]
    d3b8:	60b9      	str	r1, [r7, #8]
    d3ba:	607a      	str	r2, [r7, #4]
	switch (type) {
    d3bc:	68bb      	ldr	r3, [r7, #8]
    d3be:	2b04      	cmp	r3, #4
    d3c0:	d900      	bls.n	d3c4 <http_client_callback+0x14>
    d3c2:	e137      	b.n	d634 <http_client_callback+0x284>
    d3c4:	68bb      	ldr	r3, [r7, #8]
    d3c6:	009a      	lsls	r2, r3, #2
    d3c8:	4b9c      	ldr	r3, [pc, #624]	; (d63c <http_client_callback+0x28c>)
    d3ca:	18d3      	adds	r3, r2, r3
    d3cc:	681b      	ldr	r3, [r3, #0]
    d3ce:	469f      	mov	pc, r3
	case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
		printf("http_client_callback: HTTP client socket connected.\r\n");
    d3d0:	4b9b      	ldr	r3, [pc, #620]	; (d640 <http_client_callback+0x290>)
    d3d2:	0018      	movs	r0, r3
    d3d4:	4b9b      	ldr	r3, [pc, #620]	; (d644 <http_client_callback+0x294>)
    d3d6:	4798      	blx	r3
		break;
    d3d8:	e12c      	b.n	d634 <http_client_callback+0x284>

	case HTTP_CLIENT_CALLBACK_REQUESTED:
		printf("http_client_callback: request completed.\r\n");
    d3da:	4b9b      	ldr	r3, [pc, #620]	; (d648 <http_client_callback+0x298>)
    d3dc:	0018      	movs	r0, r3
    d3de:	4b99      	ldr	r3, [pc, #612]	; (d644 <http_client_callback+0x294>)
    d3e0:	4798      	blx	r3
		add_state(GET_REQUESTED);
    d3e2:	2004      	movs	r0, #4
    d3e4:	4b99      	ldr	r3, [pc, #612]	; (d64c <http_client_callback+0x29c>)
    d3e6:	4798      	blx	r3
		break;
    d3e8:	e124      	b.n	d634 <http_client_callback+0x284>

	case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
		printf("http_client_callback: received response %u data size %u\r\n",
				(unsigned int)data->recv_response.response_code,
    d3ea:	687b      	ldr	r3, [r7, #4]
    d3ec:	881b      	ldrh	r3, [r3, #0]
		printf("http_client_callback: received response %u data size %u\r\n",
    d3ee:	0019      	movs	r1, r3
				(unsigned int)data->recv_response.content_length);
    d3f0:	687b      	ldr	r3, [r7, #4]
    d3f2:	685a      	ldr	r2, [r3, #4]
		printf("http_client_callback: received response %u data size %u\r\n",
    d3f4:	4b96      	ldr	r3, [pc, #600]	; (d650 <http_client_callback+0x2a0>)
    d3f6:	0018      	movs	r0, r3
    d3f8:	4b96      	ldr	r3, [pc, #600]	; (d654 <http_client_callback+0x2a4>)
    d3fa:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
    d3fc:	687b      	ldr	r3, [r7, #4]
    d3fe:	881b      	ldrh	r3, [r3, #0]
    d400:	2bc8      	cmp	r3, #200	; 0xc8
    d402:	d003      	beq.n	d40c <http_client_callback+0x5c>
		} 
		else {
			add_state(CANCELED);
    d404:	2020      	movs	r0, #32
    d406:	4b91      	ldr	r3, [pc, #580]	; (d64c <http_client_callback+0x29c>)
    d408:	4798      	blx	r3
			return;
    d40a:	e113      	b.n	d634 <http_client_callback+0x284>
		}
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
    d40c:	687b      	ldr	r3, [r7, #4]
    d40e:	685a      	ldr	r2, [r3, #4]
    d410:	2380      	movs	r3, #128	; 0x80
    d412:	00db      	lsls	r3, r3, #3
    d414:	429a      	cmp	r2, r3
    d416:	d900      	bls.n	d41a <http_client_callback+0x6a>
    d418:	e107      	b.n	d62a <http_client_callback+0x27a>
			//***store_file_packet(data->recv_response.content, data->recv_response.content_length);
			
			//This is run only when file size < MAIN_BUFFER_MAX_SIZE which we assume never happens!
			
			add_state(COMPLETED);
    d41a:	2010      	movs	r0, #16
    d41c:	4b8b      	ldr	r3, [pc, #556]	; (d64c <http_client_callback+0x29c>)
    d41e:	4798      	blx	r3
		}
		break;
    d420:	e103      	b.n	d62a <http_client_callback+0x27a>

	case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
		printf("http_client_callback_CHUNKED DATA: received response data size %u\r\n",
				(unsigned int)data->recv_chunked_data.length);
    d422:	687b      	ldr	r3, [r7, #4]
    d424:	681a      	ldr	r2, [r3, #0]
		printf("http_client_callback_CHUNKED DATA: received response data size %u\r\n",
    d426:	4b8c      	ldr	r3, [pc, #560]	; (d658 <http_client_callback+0x2a8>)
    d428:	0011      	movs	r1, r2
    d42a:	0018      	movs	r0, r3
    d42c:	4b89      	ldr	r3, [pc, #548]	; (d654 <http_client_callback+0x2a4>)
    d42e:	4798      	blx	r3
		//***store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
		if (http_buf_write_ptr + data->recv_chunked_data.length > 2048){
    d430:	687b      	ldr	r3, [r7, #4]
    d432:	681a      	ldr	r2, [r3, #0]
    d434:	4b89      	ldr	r3, [pc, #548]	; (d65c <http_client_callback+0x2ac>)
    d436:	681b      	ldr	r3, [r3, #0]
    d438:	18d2      	adds	r2, r2, r3
    d43a:	2380      	movs	r3, #128	; 0x80
    d43c:	011b      	lsls	r3, r3, #4
    d43e:	429a      	cmp	r2, r3
    d440:	d92a      	bls.n	d498 <http_client_callback+0xe8>
			memcpy_ram2ram(http_buf + http_buf_write_ptr,data->recv_chunked_data.data,(2048-http_buf_write_ptr));
    d442:	4b86      	ldr	r3, [pc, #536]	; (d65c <http_client_callback+0x2ac>)
    d444:	681a      	ldr	r2, [r3, #0]
    d446:	4b86      	ldr	r3, [pc, #536]	; (d660 <http_client_callback+0x2b0>)
    d448:	18d0      	adds	r0, r2, r3
    d44a:	687b      	ldr	r3, [r7, #4]
    d44c:	6859      	ldr	r1, [r3, #4]
    d44e:	4b83      	ldr	r3, [pc, #524]	; (d65c <http_client_callback+0x2ac>)
    d450:	681b      	ldr	r3, [r3, #0]
    d452:	2280      	movs	r2, #128	; 0x80
    d454:	0112      	lsls	r2, r2, #4
    d456:	1ad3      	subs	r3, r2, r3
    d458:	001a      	movs	r2, r3
    d45a:	4b82      	ldr	r3, [pc, #520]	; (d664 <http_client_callback+0x2b4>)
    d45c:	4798      	blx	r3
			memcpy_ram2ram(http_buf, data->recv_chunked_data.data + (2048-http_buf_write_ptr), data->recv_chunked_data.length-(2048-http_buf_write_ptr));
    d45e:	687b      	ldr	r3, [r7, #4]
    d460:	685a      	ldr	r2, [r3, #4]
    d462:	4b7e      	ldr	r3, [pc, #504]	; (d65c <http_client_callback+0x2ac>)
    d464:	681b      	ldr	r3, [r3, #0]
    d466:	2180      	movs	r1, #128	; 0x80
    d468:	0109      	lsls	r1, r1, #4
    d46a:	1acb      	subs	r3, r1, r3
    d46c:	18d1      	adds	r1, r2, r3
    d46e:	687b      	ldr	r3, [r7, #4]
    d470:	681a      	ldr	r2, [r3, #0]
    d472:	4b7a      	ldr	r3, [pc, #488]	; (d65c <http_client_callback+0x2ac>)
    d474:	681b      	ldr	r3, [r3, #0]
    d476:	18d3      	adds	r3, r2, r3
    d478:	4a7b      	ldr	r2, [pc, #492]	; (d668 <http_client_callback+0x2b8>)
    d47a:	189a      	adds	r2, r3, r2
    d47c:	4b78      	ldr	r3, [pc, #480]	; (d660 <http_client_callback+0x2b0>)
    d47e:	0018      	movs	r0, r3
    d480:	4b78      	ldr	r3, [pc, #480]	; (d664 <http_client_callback+0x2b4>)
    d482:	4798      	blx	r3
			http_buf_write_ptr = data->recv_chunked_data.length-(2048-http_buf_write_ptr);
    d484:	687b      	ldr	r3, [r7, #4]
    d486:	681a      	ldr	r2, [r3, #0]
    d488:	4b74      	ldr	r3, [pc, #464]	; (d65c <http_client_callback+0x2ac>)
    d48a:	681b      	ldr	r3, [r3, #0]
    d48c:	18d3      	adds	r3, r2, r3
    d48e:	4a76      	ldr	r2, [pc, #472]	; (d668 <http_client_callback+0x2b8>)
    d490:	189a      	adds	r2, r3, r2
    d492:	4b72      	ldr	r3, [pc, #456]	; (d65c <http_client_callback+0x2ac>)
    d494:	601a      	str	r2, [r3, #0]
    d496:	e011      	b.n	d4bc <http_client_callback+0x10c>
		}
		else {
			memcpy_ram2ram(http_buf + http_buf_write_ptr, data->recv_chunked_data.data, data->recv_chunked_data.length);
    d498:	4b70      	ldr	r3, [pc, #448]	; (d65c <http_client_callback+0x2ac>)
    d49a:	681a      	ldr	r2, [r3, #0]
    d49c:	4b70      	ldr	r3, [pc, #448]	; (d660 <http_client_callback+0x2b0>)
    d49e:	18d0      	adds	r0, r2, r3
    d4a0:	687b      	ldr	r3, [r7, #4]
    d4a2:	6859      	ldr	r1, [r3, #4]
    d4a4:	687b      	ldr	r3, [r7, #4]
    d4a6:	681b      	ldr	r3, [r3, #0]
    d4a8:	001a      	movs	r2, r3
    d4aa:	4b6e      	ldr	r3, [pc, #440]	; (d664 <http_client_callback+0x2b4>)
    d4ac:	4798      	blx	r3
			http_buf_write_ptr = http_buf_write_ptr + data->recv_chunked_data.length;
    d4ae:	687b      	ldr	r3, [r7, #4]
    d4b0:	681a      	ldr	r2, [r3, #0]
    d4b2:	4b6a      	ldr	r3, [pc, #424]	; (d65c <http_client_callback+0x2ac>)
    d4b4:	681b      	ldr	r3, [r3, #0]
    d4b6:	18d2      	adds	r2, r2, r3
    d4b8:	4b68      	ldr	r3, [pc, #416]	; (d65c <http_client_callback+0x2ac>)
    d4ba:	601a      	str	r2, [r3, #0]
		}
		 
		if  (http_buf_write_ptr > http_buf_read_ptr){
    d4bc:	4b67      	ldr	r3, [pc, #412]	; (d65c <http_client_callback+0x2ac>)
    d4be:	681a      	ldr	r2, [r3, #0]
    d4c0:	4b6a      	ldr	r3, [pc, #424]	; (d66c <http_client_callback+0x2bc>)
    d4c2:	681b      	ldr	r3, [r3, #0]
    d4c4:	429a      	cmp	r2, r3
    d4c6:	d920      	bls.n	d50a <http_client_callback+0x15a>
			uint8 n = (http_buf_write_ptr-http_buf_read_ptr) / 256;
    d4c8:	4b64      	ldr	r3, [pc, #400]	; (d65c <http_client_callback+0x2ac>)
    d4ca:	681a      	ldr	r2, [r3, #0]
    d4cc:	4b67      	ldr	r3, [pc, #412]	; (d66c <http_client_callback+0x2bc>)
    d4ce:	681b      	ldr	r3, [r3, #0]
    d4d0:	1ad3      	subs	r3, r2, r3
    d4d2:	0a1a      	lsrs	r2, r3, #8
    d4d4:	2313      	movs	r3, #19
    d4d6:	18fb      	adds	r3, r7, r3
    d4d8:	701a      	strb	r2, [r3, #0]
			for (int i=0 ; i<n ; i++ ){
    d4da:	2300      	movs	r3, #0
    d4dc:	61fb      	str	r3, [r7, #28]
    d4de:	e00d      	b.n	d4fc <http_client_callback+0x14c>
				write_spi_flash_frm_buf(256);
    d4e0:	2380      	movs	r3, #128	; 0x80
    d4e2:	005b      	lsls	r3, r3, #1
    d4e4:	0018      	movs	r0, r3
    d4e6:	4b62      	ldr	r3, [pc, #392]	; (d670 <http_client_callback+0x2c0>)
    d4e8:	4798      	blx	r3
				http_buf_read_ptr = http_buf_read_ptr + 256;
    d4ea:	4b60      	ldr	r3, [pc, #384]	; (d66c <http_client_callback+0x2bc>)
    d4ec:	681b      	ldr	r3, [r3, #0]
    d4ee:	1c5a      	adds	r2, r3, #1
    d4f0:	32ff      	adds	r2, #255	; 0xff
    d4f2:	4b5e      	ldr	r3, [pc, #376]	; (d66c <http_client_callback+0x2bc>)
    d4f4:	601a      	str	r2, [r3, #0]
			for (int i=0 ; i<n ; i++ ){
    d4f6:	69fb      	ldr	r3, [r7, #28]
    d4f8:	3301      	adds	r3, #1
    d4fa:	61fb      	str	r3, [r7, #28]
    d4fc:	2313      	movs	r3, #19
    d4fe:	18fb      	adds	r3, r7, r3
    d500:	781a      	ldrb	r2, [r3, #0]
    d502:	69fb      	ldr	r3, [r7, #28]
    d504:	429a      	cmp	r2, r3
    d506:	dceb      	bgt.n	d4e0 <http_client_callback+0x130>
    d508:	e048      	b.n	d59c <http_client_callback+0x1ec>
			}
		}
		else if (http_buf_write_ptr < http_buf_read_ptr){
    d50a:	4b54      	ldr	r3, [pc, #336]	; (d65c <http_client_callback+0x2ac>)
    d50c:	681a      	ldr	r2, [r3, #0]
    d50e:	4b57      	ldr	r3, [pc, #348]	; (d66c <http_client_callback+0x2bc>)
    d510:	681b      	ldr	r3, [r3, #0]
    d512:	429a      	cmp	r2, r3
    d514:	d242      	bcs.n	d59c <http_client_callback+0x1ec>
			uint8 n = (2048 - http_buf_read_ptr) / 256;
    d516:	4b55      	ldr	r3, [pc, #340]	; (d66c <http_client_callback+0x2bc>)
    d518:	681b      	ldr	r3, [r3, #0]
    d51a:	2280      	movs	r2, #128	; 0x80
    d51c:	0112      	lsls	r2, r2, #4
    d51e:	1ad3      	subs	r3, r2, r3
    d520:	0a1a      	lsrs	r2, r3, #8
    d522:	2312      	movs	r3, #18
    d524:	18fb      	adds	r3, r7, r3
    d526:	701a      	strb	r2, [r3, #0]
			for (int i=0 ; i<n ; i++ ){
    d528:	2300      	movs	r3, #0
    d52a:	61bb      	str	r3, [r7, #24]
    d52c:	e00d      	b.n	d54a <http_client_callback+0x19a>
				write_spi_flash_frm_buf(256);
    d52e:	2380      	movs	r3, #128	; 0x80
    d530:	005b      	lsls	r3, r3, #1
    d532:	0018      	movs	r0, r3
    d534:	4b4e      	ldr	r3, [pc, #312]	; (d670 <http_client_callback+0x2c0>)
    d536:	4798      	blx	r3
				http_buf_read_ptr = http_buf_read_ptr + 256;
    d538:	4b4c      	ldr	r3, [pc, #304]	; (d66c <http_client_callback+0x2bc>)
    d53a:	681b      	ldr	r3, [r3, #0]
    d53c:	1c5a      	adds	r2, r3, #1
    d53e:	32ff      	adds	r2, #255	; 0xff
    d540:	4b4a      	ldr	r3, [pc, #296]	; (d66c <http_client_callback+0x2bc>)
    d542:	601a      	str	r2, [r3, #0]
			for (int i=0 ; i<n ; i++ ){
    d544:	69bb      	ldr	r3, [r7, #24]
    d546:	3301      	adds	r3, #1
    d548:	61bb      	str	r3, [r7, #24]
    d54a:	2312      	movs	r3, #18
    d54c:	18fb      	adds	r3, r7, r3
    d54e:	781a      	ldrb	r2, [r3, #0]
    d550:	69bb      	ldr	r3, [r7, #24]
    d552:	429a      	cmp	r2, r3
    d554:	dceb      	bgt.n	d52e <http_client_callback+0x17e>
			}
			http_buf_read_ptr = 0;
    d556:	4b45      	ldr	r3, [pc, #276]	; (d66c <http_client_callback+0x2bc>)
    d558:	2200      	movs	r2, #0
    d55a:	601a      	str	r2, [r3, #0]
			n = (http_buf_write_ptr-http_buf_read_ptr) / 256;
    d55c:	4b3f      	ldr	r3, [pc, #252]	; (d65c <http_client_callback+0x2ac>)
    d55e:	681a      	ldr	r2, [r3, #0]
    d560:	4b42      	ldr	r3, [pc, #264]	; (d66c <http_client_callback+0x2bc>)
    d562:	681b      	ldr	r3, [r3, #0]
    d564:	1ad3      	subs	r3, r2, r3
    d566:	0a1a      	lsrs	r2, r3, #8
    d568:	2312      	movs	r3, #18
    d56a:	18fb      	adds	r3, r7, r3
    d56c:	701a      	strb	r2, [r3, #0]
			for (int i=0 ; i<n ; i++ ){
    d56e:	2300      	movs	r3, #0
    d570:	617b      	str	r3, [r7, #20]
    d572:	e00d      	b.n	d590 <http_client_callback+0x1e0>
				write_spi_flash_frm_buf(256);
    d574:	2380      	movs	r3, #128	; 0x80
    d576:	005b      	lsls	r3, r3, #1
    d578:	0018      	movs	r0, r3
    d57a:	4b3d      	ldr	r3, [pc, #244]	; (d670 <http_client_callback+0x2c0>)
    d57c:	4798      	blx	r3
				http_buf_read_ptr = http_buf_read_ptr + 256;
    d57e:	4b3b      	ldr	r3, [pc, #236]	; (d66c <http_client_callback+0x2bc>)
    d580:	681b      	ldr	r3, [r3, #0]
    d582:	1c5a      	adds	r2, r3, #1
    d584:	32ff      	adds	r2, #255	; 0xff
    d586:	4b39      	ldr	r3, [pc, #228]	; (d66c <http_client_callback+0x2bc>)
    d588:	601a      	str	r2, [r3, #0]
			for (int i=0 ; i<n ; i++ ){
    d58a:	697b      	ldr	r3, [r7, #20]
    d58c:	3301      	adds	r3, #1
    d58e:	617b      	str	r3, [r7, #20]
    d590:	2312      	movs	r3, #18
    d592:	18fb      	adds	r3, r7, r3
    d594:	781a      	ldrb	r2, [r3, #0]
    d596:	697b      	ldr	r3, [r7, #20]
    d598:	429a      	cmp	r2, r3
    d59a:	dceb      	bgt.n	d574 <http_client_callback+0x1c4>
			}
		}
		
		
		if (data->recv_chunked_data.is_complete) {
    d59c:	687b      	ldr	r3, [r7, #4]
    d59e:	7a1b      	ldrb	r3, [r3, #8]
    d5a0:	2b00      	cmp	r3, #0
    d5a2:	d044      	beq.n	d62e <http_client_callback+0x27e>
			add_state(COMPLETED);
    d5a4:	2010      	movs	r0, #16
    d5a6:	4b29      	ldr	r3, [pc, #164]	; (d64c <http_client_callback+0x29c>)
    d5a8:	4798      	blx	r3
			if  (http_buf_write_ptr < http_buf_read_ptr){
    d5aa:	4b2c      	ldr	r3, [pc, #176]	; (d65c <http_client_callback+0x2ac>)
    d5ac:	681a      	ldr	r2, [r3, #0]
    d5ae:	4b2f      	ldr	r3, [pc, #188]	; (d66c <http_client_callback+0x2bc>)
    d5b0:	681b      	ldr	r3, [r3, #0]
    d5b2:	429a      	cmp	r2, r3
    d5b4:	d20b      	bcs.n	d5ce <http_client_callback+0x21e>
				http_buf_read_ptr =0;
    d5b6:	4b2d      	ldr	r3, [pc, #180]	; (d66c <http_client_callback+0x2bc>)
    d5b8:	2200      	movs	r2, #0
    d5ba:	601a      	str	r2, [r3, #0]
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
    d5bc:	4b27      	ldr	r3, [pc, #156]	; (d65c <http_client_callback+0x2ac>)
    d5be:	681a      	ldr	r2, [r3, #0]
    d5c0:	4b2a      	ldr	r3, [pc, #168]	; (d66c <http_client_callback+0x2bc>)
    d5c2:	681b      	ldr	r3, [r3, #0]
    d5c4:	1ad3      	subs	r3, r2, r3
    d5c6:	0018      	movs	r0, r3
    d5c8:	4b29      	ldr	r3, [pc, #164]	; (d670 <http_client_callback+0x2c0>)
    d5ca:	4798      	blx	r3
			else if(http_buf_write_ptr > http_buf_read_ptr){
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
			}
		}

		break;
    d5cc:	e02f      	b.n	d62e <http_client_callback+0x27e>
			else if(http_buf_write_ptr > http_buf_read_ptr){
    d5ce:	4b23      	ldr	r3, [pc, #140]	; (d65c <http_client_callback+0x2ac>)
    d5d0:	681a      	ldr	r2, [r3, #0]
    d5d2:	4b26      	ldr	r3, [pc, #152]	; (d66c <http_client_callback+0x2bc>)
    d5d4:	681b      	ldr	r3, [r3, #0]
    d5d6:	429a      	cmp	r2, r3
    d5d8:	d929      	bls.n	d62e <http_client_callback+0x27e>
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
    d5da:	4b20      	ldr	r3, [pc, #128]	; (d65c <http_client_callback+0x2ac>)
    d5dc:	681a      	ldr	r2, [r3, #0]
    d5de:	4b23      	ldr	r3, [pc, #140]	; (d66c <http_client_callback+0x2bc>)
    d5e0:	681b      	ldr	r3, [r3, #0]
    d5e2:	1ad3      	subs	r3, r2, r3
    d5e4:	0018      	movs	r0, r3
    d5e6:	4b22      	ldr	r3, [pc, #136]	; (d670 <http_client_callback+0x2c0>)
    d5e8:	4798      	blx	r3
		break;
    d5ea:	e020      	b.n	d62e <http_client_callback+0x27e>

	case HTTP_CLIENT_CALLBACK_DISCONNECTED:
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    d5ec:	687b      	ldr	r3, [r7, #4]
    d5ee:	681a      	ldr	r2, [r3, #0]
    d5f0:	4b20      	ldr	r3, [pc, #128]	; (d674 <http_client_callback+0x2c4>)
    d5f2:	0011      	movs	r1, r2
    d5f4:	0018      	movs	r0, r3
    d5f6:	4b17      	ldr	r3, [pc, #92]	; (d654 <http_client_callback+0x2a4>)
    d5f8:	4798      	blx	r3

		/* If disconnect reason is equal to -ECONNRESET(-104),
		 * It means the server has closed the connection (timeout).
		 * This is normal operation.
		 */
		if (data->disconnected.reason == -EAGAIN) {
    d5fa:	687b      	ldr	r3, [r7, #4]
    d5fc:	681b      	ldr	r3, [r3, #0]
    d5fe:	330b      	adds	r3, #11
    d600:	d117      	bne.n	d632 <http_client_callback+0x282>
			/* Server has not responded. Retry immediately. */
			if (is_state_set(DOWNLOADING)) {
    d602:	2008      	movs	r0, #8
    d604:	4b1c      	ldr	r3, [pc, #112]	; (d678 <http_client_callback+0x2c8>)
    d606:	4798      	blx	r3
    d608:	1e03      	subs	r3, r0, #0
    d60a:	d002      	beq.n	d612 <http_client_callback+0x262>
				//f_close(&file_object);
				clear_state(DOWNLOADING);
    d60c:	2008      	movs	r0, #8
    d60e:	4b1b      	ldr	r3, [pc, #108]	; (d67c <http_client_callback+0x2cc>)
    d610:	4798      	blx	r3
			}

			if (is_state_set(GET_REQUESTED)) {
    d612:	2004      	movs	r0, #4
    d614:	4b18      	ldr	r3, [pc, #96]	; (d678 <http_client_callback+0x2c8>)
    d616:	4798      	blx	r3
    d618:	1e03      	subs	r3, r0, #0
    d61a:	d002      	beq.n	d622 <http_client_callback+0x272>
				clear_state(GET_REQUESTED);
    d61c:	2004      	movs	r0, #4
    d61e:	4b17      	ldr	r3, [pc, #92]	; (d67c <http_client_callback+0x2cc>)
    d620:	4798      	blx	r3
			}

			start_download();
    d622:	4b17      	ldr	r3, [pc, #92]	; (d680 <http_client_callback+0x2d0>)
    d624:	4798      	blx	r3
		}

		break;
    d626:	46c0      	nop			; (mov r8, r8)
    d628:	e003      	b.n	d632 <http_client_callback+0x282>
		break;
    d62a:	46c0      	nop			; (mov r8, r8)
    d62c:	e002      	b.n	d634 <http_client_callback+0x284>
		break;
    d62e:	46c0      	nop			; (mov r8, r8)
    d630:	e000      	b.n	d634 <http_client_callback+0x284>
		break;
    d632:	46c0      	nop			; (mov r8, r8)
	}
}
    d634:	46bd      	mov	sp, r7
    d636:	b008      	add	sp, #32
    d638:	bd80      	pop	{r7, pc}
    d63a:	46c0      	nop			; (mov r8, r8)
    d63c:	00010d14 	.word	0x00010d14
    d640:	00010a84 	.word	0x00010a84
    d644:	0000e0c9 	.word	0x0000e0c9
    d648:	00010abc 	.word	0x00010abc
    d64c:	0000d219 	.word	0x0000d219
    d650:	00010ae8 	.word	0x00010ae8
    d654:	0000dfad 	.word	0x0000dfad
    d658:	00010b24 	.word	0x00010b24
    d65c:	20000298 	.word	0x20000298
    d660:	20000484 	.word	0x20000484
    d664:	0000de15 	.word	0x0000de15
    d668:	fffff800 	.word	0xfffff800
    d66c:	2000029c 	.word	0x2000029c
    d670:	0000d26d 	.word	0x0000d26d
    d674:	00010b68 	.word	0x00010b68
    d678:	0000d241 	.word	0x0000d241
    d67c:	0000d1e5 	.word	0x0000d1e5
    d680:	0000d321 	.word	0x0000d321

0000d684 <socket_cb>:

static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    d684:	b580      	push	{r7, lr}
    d686:	b082      	sub	sp, #8
    d688:	af00      	add	r7, sp, #0
    d68a:	603a      	str	r2, [r7, #0]
    d68c:	1dfb      	adds	r3, r7, #7
    d68e:	1c02      	adds	r2, r0, #0
    d690:	701a      	strb	r2, [r3, #0]
    d692:	1dbb      	adds	r3, r7, #6
    d694:	1c0a      	adds	r2, r1, #0
    d696:	701a      	strb	r2, [r3, #0]
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
    d698:	683a      	ldr	r2, [r7, #0]
    d69a:	1dbb      	adds	r3, r7, #6
    d69c:	7819      	ldrb	r1, [r3, #0]
    d69e:	1dfb      	adds	r3, r7, #7
    d6a0:	781b      	ldrb	r3, [r3, #0]
    d6a2:	b25b      	sxtb	r3, r3
    d6a4:	0018      	movs	r0, r3
    d6a6:	4b03      	ldr	r3, [pc, #12]	; (d6b4 <socket_cb+0x30>)
    d6a8:	4798      	blx	r3
}
    d6aa:	46c0      	nop			; (mov r8, r8)
    d6ac:	46bd      	mov	sp, r7
    d6ae:	b002      	add	sp, #8
    d6b0:	bd80      	pop	{r7, pc}
    d6b2:	46c0      	nop			; (mov r8, r8)
    d6b4:	00006f9d 	.word	0x00006f9d

0000d6b8 <resolve_cb>:


static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
    d6b8:	b5b0      	push	{r4, r5, r7, lr}
    d6ba:	b084      	sub	sp, #16
    d6bc:	af02      	add	r7, sp, #8
    d6be:	6078      	str	r0, [r7, #4]
    d6c0:	6039      	str	r1, [r7, #0]
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
	(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
    d6c2:	683b      	ldr	r3, [r7, #0]
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    d6c4:	22ff      	movs	r2, #255	; 0xff
    d6c6:	4013      	ands	r3, r2
    d6c8:	001c      	movs	r4, r3
	(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
    d6ca:	683b      	ldr	r3, [r7, #0]
    d6cc:	0a1b      	lsrs	r3, r3, #8
    d6ce:	001a      	movs	r2, r3
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    d6d0:	23ff      	movs	r3, #255	; 0xff
    d6d2:	401a      	ands	r2, r3
    d6d4:	0015      	movs	r5, r2
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    d6d6:	683b      	ldr	r3, [r7, #0]
    d6d8:	0c1b      	lsrs	r3, r3, #16
    d6da:	001a      	movs	r2, r3
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    d6dc:	23ff      	movs	r3, #255	; 0xff
    d6de:	4013      	ands	r3, r2
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    d6e0:	683a      	ldr	r2, [r7, #0]
    d6e2:	0e12      	lsrs	r2, r2, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    d6e4:	6879      	ldr	r1, [r7, #4]
    d6e6:	4808      	ldr	r0, [pc, #32]	; (d708 <resolve_cb+0x50>)
    d6e8:	9201      	str	r2, [sp, #4]
    d6ea:	9300      	str	r3, [sp, #0]
    d6ec:	002b      	movs	r3, r5
    d6ee:	0022      	movs	r2, r4
    d6f0:	4c06      	ldr	r4, [pc, #24]	; (d70c <resolve_cb+0x54>)
    d6f2:	47a0      	blx	r4
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    d6f4:	683a      	ldr	r2, [r7, #0]
    d6f6:	687b      	ldr	r3, [r7, #4]
    d6f8:	0011      	movs	r1, r2
    d6fa:	0018      	movs	r0, r3
    d6fc:	4b04      	ldr	r3, [pc, #16]	; (d710 <resolve_cb+0x58>)
    d6fe:	4798      	blx	r3
}
    d700:	46c0      	nop			; (mov r8, r8)
    d702:	46bd      	mov	sp, r7
    d704:	b002      	add	sp, #8
    d706:	bdb0      	pop	{r4, r5, r7, pc}
    d708:	00010b98 	.word	0x00010b98
    d70c:	0000dfad 	.word	0x0000dfad
    d710:	00007101 	.word	0x00007101

0000d714 <wifi_cb>:

static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    d714:	b590      	push	{r4, r7, lr}
    d716:	b087      	sub	sp, #28
    d718:	af02      	add	r7, sp, #8
    d71a:	0002      	movs	r2, r0
    d71c:	6039      	str	r1, [r7, #0]
    d71e:	1dfb      	adds	r3, r7, #7
    d720:	701a      	strb	r2, [r3, #0]
	switch (u8MsgType) {
    d722:	1dfb      	adds	r3, r7, #7
    d724:	781b      	ldrb	r3, [r3, #0]
    d726:	2b2c      	cmp	r3, #44	; 0x2c
    d728:	d002      	beq.n	d730 <wifi_cb+0x1c>
    d72a:	2b32      	cmp	r3, #50	; 0x32
    d72c:	d032      	beq.n	d794 <wifi_cb+0x80>
			start_download();
			break;
		}

		default:
		break;
    d72e:	e04d      	b.n	d7cc <wifi_cb+0xb8>
			tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
    d730:	683b      	ldr	r3, [r7, #0]
    d732:	60fb      	str	r3, [r7, #12]
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    d734:	68fb      	ldr	r3, [r7, #12]
    d736:	781b      	ldrb	r3, [r3, #0]
    d738:	2b01      	cmp	r3, #1
    d73a:	d106      	bne.n	d74a <wifi_cb+0x36>
				printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
    d73c:	4b25      	ldr	r3, [pc, #148]	; (d7d4 <wifi_cb+0xc0>)
    d73e:	0018      	movs	r0, r3
    d740:	4b25      	ldr	r3, [pc, #148]	; (d7d8 <wifi_cb+0xc4>)
    d742:	4798      	blx	r3
				m2m_wifi_request_dhcp_client();
    d744:	4b25      	ldr	r3, [pc, #148]	; (d7dc <wifi_cb+0xc8>)
    d746:	4798      	blx	r3
			break;
    d748:	e03f      	b.n	d7ca <wifi_cb+0xb6>
				} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    d74a:	68fb      	ldr	r3, [r7, #12]
    d74c:	781b      	ldrb	r3, [r3, #0]
    d74e:	2b00      	cmp	r3, #0
    d750:	d13b      	bne.n	d7ca <wifi_cb+0xb6>
				printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    d752:	4b23      	ldr	r3, [pc, #140]	; (d7e0 <wifi_cb+0xcc>)
    d754:	0018      	movs	r0, r3
    d756:	4b20      	ldr	r3, [pc, #128]	; (d7d8 <wifi_cb+0xc4>)
    d758:	4798      	blx	r3
				clear_state(WIFI_CONNECTED);
    d75a:	2002      	movs	r0, #2
    d75c:	4b21      	ldr	r3, [pc, #132]	; (d7e4 <wifi_cb+0xd0>)
    d75e:	4798      	blx	r3
				if (is_state_set(DOWNLOADING)) {
    d760:	2008      	movs	r0, #8
    d762:	4b21      	ldr	r3, [pc, #132]	; (d7e8 <wifi_cb+0xd4>)
    d764:	4798      	blx	r3
    d766:	1e03      	subs	r3, r0, #0
    d768:	d002      	beq.n	d770 <wifi_cb+0x5c>
					clear_state(DOWNLOADING);
    d76a:	2008      	movs	r0, #8
    d76c:	4b1d      	ldr	r3, [pc, #116]	; (d7e4 <wifi_cb+0xd0>)
    d76e:	4798      	blx	r3
				if (is_state_set(GET_REQUESTED)) {
    d770:	2004      	movs	r0, #4
    d772:	4b1d      	ldr	r3, [pc, #116]	; (d7e8 <wifi_cb+0xd4>)
    d774:	4798      	blx	r3
    d776:	1e03      	subs	r3, r0, #0
    d778:	d002      	beq.n	d780 <wifi_cb+0x6c>
					clear_state(GET_REQUESTED);
    d77a:	2004      	movs	r0, #4
    d77c:	4b19      	ldr	r3, [pc, #100]	; (d7e4 <wifi_cb+0xd0>)
    d77e:	4798      	blx	r3
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    d780:	4a1a      	ldr	r2, [pc, #104]	; (d7ec <wifi_cb+0xd8>)
    d782:	481b      	ldr	r0, [pc, #108]	; (d7f0 <wifi_cb+0xdc>)
    d784:	23ff      	movs	r3, #255	; 0xff
    d786:	9300      	str	r3, [sp, #0]
    d788:	0013      	movs	r3, r2
    d78a:	2202      	movs	r2, #2
    d78c:	2111      	movs	r1, #17
    d78e:	4c19      	ldr	r4, [pc, #100]	; (d7f4 <wifi_cb+0xe0>)
    d790:	47a0      	blx	r4
			break;
    d792:	e01a      	b.n	d7ca <wifi_cb+0xb6>
			uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
    d794:	683b      	ldr	r3, [r7, #0]
    d796:	60bb      	str	r3, [r7, #8]
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    d798:	68bb      	ldr	r3, [r7, #8]
    d79a:	781b      	ldrb	r3, [r3, #0]
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    d79c:	0019      	movs	r1, r3
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    d79e:	68bb      	ldr	r3, [r7, #8]
    d7a0:	3301      	adds	r3, #1
    d7a2:	781b      	ldrb	r3, [r3, #0]
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    d7a4:	001a      	movs	r2, r3
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    d7a6:	68bb      	ldr	r3, [r7, #8]
    d7a8:	3302      	adds	r3, #2
    d7aa:	781b      	ldrb	r3, [r3, #0]
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    d7ac:	001c      	movs	r4, r3
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    d7ae:	68bb      	ldr	r3, [r7, #8]
    d7b0:	3303      	adds	r3, #3
    d7b2:	781b      	ldrb	r3, [r3, #0]
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    d7b4:	4810      	ldr	r0, [pc, #64]	; (d7f8 <wifi_cb+0xe4>)
    d7b6:	9300      	str	r3, [sp, #0]
    d7b8:	0023      	movs	r3, r4
    d7ba:	4c10      	ldr	r4, [pc, #64]	; (d7fc <wifi_cb+0xe8>)
    d7bc:	47a0      	blx	r4
			add_state(WIFI_CONNECTED);
    d7be:	2002      	movs	r0, #2
    d7c0:	4b0f      	ldr	r3, [pc, #60]	; (d800 <wifi_cb+0xec>)
    d7c2:	4798      	blx	r3
			start_download();
    d7c4:	4b0f      	ldr	r3, [pc, #60]	; (d804 <wifi_cb+0xf0>)
    d7c6:	4798      	blx	r3
			break;
    d7c8:	e000      	b.n	d7cc <wifi_cb+0xb8>
			break;
    d7ca:	46c0      	nop			; (mov r8, r8)
	}
}
    d7cc:	46c0      	nop			; (mov r8, r8)
    d7ce:	46bd      	mov	sp, r7
    d7d0:	b005      	add	sp, #20
    d7d2:	bd90      	pop	{r4, r7, pc}
    d7d4:	00010bc8 	.word	0x00010bc8
    d7d8:	0000e0c9 	.word	0x0000e0c9
    d7dc:	00002429 	.word	0x00002429
    d7e0:	00010be8 	.word	0x00010be8
    d7e4:	0000d1e5 	.word	0x0000d1e5
    d7e8:	0000d241 	.word	0x0000d241
    d7ec:	00010c08 	.word	0x00010c08
    d7f0:	00010c14 	.word	0x00010c14
    d7f4:	00001f61 	.word	0x00001f61
    d7f8:	00010c28 	.word	0x00010c28
    d7fc:	0000dfad 	.word	0x0000dfad
    d800:	0000d219 	.word	0x0000d219
    d804:	0000d321 	.word	0x0000d321

0000d808 <configure_http_client>:


static void configure_http_client(void)
{
    d808:	b580      	push	{r7, lr}
    d80a:	b088      	sub	sp, #32
    d80c:	af00      	add	r7, sp, #0
	struct http_client_config httpc_conf;
	int ret;

	http_client_get_config_defaults(&httpc_conf);
    d80e:	003b      	movs	r3, r7
    d810:	0018      	movs	r0, r3
    d812:	4b12      	ldr	r3, [pc, #72]	; (d85c <configure_http_client+0x54>)
    d814:	4798      	blx	r3

	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
    d816:	003b      	movs	r3, r7
    d818:	2280      	movs	r2, #128	; 0x80
    d81a:	00d2      	lsls	r2, r2, #3
    d81c:	611a      	str	r2, [r3, #16]
	httpc_conf.timer_inst = &swt_module_inst;
    d81e:	003b      	movs	r3, r7
    d820:	4a0f      	ldr	r2, [pc, #60]	; (d860 <configure_http_client+0x58>)
    d822:	605a      	str	r2, [r3, #4]

	ret = http_client_init(&http_client_module_inst, &httpc_conf);
    d824:	003a      	movs	r2, r7
    d826:	4b0f      	ldr	r3, [pc, #60]	; (d864 <configure_http_client+0x5c>)
    d828:	0011      	movs	r1, r2
    d82a:	0018      	movs	r0, r3
    d82c:	4b0e      	ldr	r3, [pc, #56]	; (d868 <configure_http_client+0x60>)
    d82e:	4798      	blx	r3
    d830:	0003      	movs	r3, r0
    d832:	61fb      	str	r3, [r7, #28]
	if (ret < 0) {
    d834:	69fb      	ldr	r3, [r7, #28]
    d836:	2b00      	cmp	r3, #0
    d838:	da06      	bge.n	d848 <configure_http_client+0x40>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    d83a:	69fa      	ldr	r2, [r7, #28]
    d83c:	4b0b      	ldr	r3, [pc, #44]	; (d86c <configure_http_client+0x64>)
    d83e:	0011      	movs	r1, r2
    d840:	0018      	movs	r0, r3
    d842:	4b0b      	ldr	r3, [pc, #44]	; (d870 <configure_http_client+0x68>)
    d844:	4798      	blx	r3
		while (1) {
    d846:	e7fe      	b.n	d846 <configure_http_client+0x3e>
			} // Loop forever
		}

		http_client_register_callback(&http_client_module_inst, http_client_callback);
    d848:	4a0a      	ldr	r2, [pc, #40]	; (d874 <configure_http_client+0x6c>)
    d84a:	4b06      	ldr	r3, [pc, #24]	; (d864 <configure_http_client+0x5c>)
    d84c:	0011      	movs	r1, r2
    d84e:	0018      	movs	r0, r3
    d850:	4b09      	ldr	r3, [pc, #36]	; (d878 <configure_http_client+0x70>)
    d852:	4798      	blx	r3
}
    d854:	46c0      	nop			; (mov r8, r8)
    d856:	46bd      	mov	sp, r7
    d858:	b008      	add	sp, #32
    d85a:	bd80      	pop	{r7, pc}
    d85c:	00006dc5 	.word	0x00006dc5
    d860:	20000c8c 	.word	0x20000c8c
    d864:	20000ce4 	.word	0x20000ce4
    d868:	00006e11 	.word	0x00006e11
    d86c:	00010c50 	.word	0x00010c50
    d870:	0000dfad 	.word	0x0000dfad
    d874:	0000d3b1 	.word	0x0000d3b1
    d878:	00006efd 	.word	0x00006efd

0000d87c <download_firmware>:

static void download_firmware()
{
    d87c:	b590      	push	{r4, r7, lr}
    d87e:	b083      	sub	sp, #12
    d880:	af02      	add	r7, sp, #8
	flash_addr = 0x00000; //Starting addr on flash where downloaded file is stored
    d882:	4b1b      	ldr	r3, [pc, #108]	; (d8f0 <download_firmware+0x74>)
    d884:	2200      	movs	r2, #0
    d886:	601a      	str	r2, [r3, #0]
	
	/* Connect to router and download stuff and store it in flash */
	printf("download_firmware: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
    d888:	4a1a      	ldr	r2, [pc, #104]	; (d8f4 <download_firmware+0x78>)
    d88a:	4b1b      	ldr	r3, [pc, #108]	; (d8f8 <download_firmware+0x7c>)
    d88c:	0011      	movs	r1, r2
    d88e:	0018      	movs	r0, r3
    d890:	4b1a      	ldr	r3, [pc, #104]	; (d8fc <download_firmware+0x80>)
    d892:	4798      	blx	r3
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    d894:	4a1a      	ldr	r2, [pc, #104]	; (d900 <download_firmware+0x84>)
    d896:	4817      	ldr	r0, [pc, #92]	; (d8f4 <download_firmware+0x78>)
    d898:	23ff      	movs	r3, #255	; 0xff
    d89a:	9300      	str	r3, [sp, #0]
    d89c:	0013      	movs	r3, r2
    d89e:	2202      	movs	r2, #2
    d8a0:	2111      	movs	r1, #17
    d8a2:	4c18      	ldr	r4, [pc, #96]	; (d904 <download_firmware+0x88>)
    d8a4:	47a0      	blx	r4
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    d8a6:	e006      	b.n	d8b6 <download_firmware+0x3a>
		m2m_wifi_handle_events(NULL);
    d8a8:	2000      	movs	r0, #0
    d8aa:	4b17      	ldr	r3, [pc, #92]	; (d908 <download_firmware+0x8c>)
    d8ac:	4798      	blx	r3
		sw_timer_task(&swt_module_inst);
    d8ae:	4b17      	ldr	r3, [pc, #92]	; (d90c <download_firmware+0x90>)
    d8b0:	0018      	movs	r0, r3
    d8b2:	4b17      	ldr	r3, [pc, #92]	; (d910 <download_firmware+0x94>)
    d8b4:	4798      	blx	r3
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    d8b6:	2010      	movs	r0, #16
    d8b8:	4b16      	ldr	r3, [pc, #88]	; (d914 <download_firmware+0x98>)
    d8ba:	4798      	blx	r3
    d8bc:	0003      	movs	r3, r0
    d8be:	001a      	movs	r2, r3
    d8c0:	2301      	movs	r3, #1
    d8c2:	4053      	eors	r3, r2
    d8c4:	b2db      	uxtb	r3, r3
    d8c6:	2b00      	cmp	r3, #0
    d8c8:	d009      	beq.n	d8de <download_firmware+0x62>
    d8ca:	2020      	movs	r0, #32
    d8cc:	4b11      	ldr	r3, [pc, #68]	; (d914 <download_firmware+0x98>)
    d8ce:	4798      	blx	r3
    d8d0:	0003      	movs	r3, r0
    d8d2:	001a      	movs	r2, r3
    d8d4:	2301      	movs	r3, #1
    d8d6:	4053      	eors	r3, r2
    d8d8:	b2db      	uxtb	r3, r3
    d8da:	2b00      	cmp	r3, #0
    d8dc:	d1e4      	bne.n	d8a8 <download_firmware+0x2c>
	}
	printf("download_firmware: done.\r\n");
    d8de:	4b0e      	ldr	r3, [pc, #56]	; (d918 <download_firmware+0x9c>)
    d8e0:	0018      	movs	r0, r3
    d8e2:	4b0e      	ldr	r3, [pc, #56]	; (d91c <download_firmware+0xa0>)
    d8e4:	4798      	blx	r3
}
    d8e6:	46c0      	nop			; (mov r8, r8)
    d8e8:	46bd      	mov	sp, r7
    d8ea:	b001      	add	sp, #4
    d8ec:	bd90      	pop	{r4, r7, pc}
    d8ee:	46c0      	nop			; (mov r8, r8)
    d8f0:	20000294 	.word	0x20000294
    d8f4:	00010c14 	.word	0x00010c14
    d8f8:	00010c98 	.word	0x00010c98
    d8fc:	0000dfad 	.word	0x0000dfad
    d900:	00010c08 	.word	0x00010c08
    d904:	00001f61 	.word	0x00001f61
    d908:	00001f45 	.word	0x00001f45
    d90c:	20000c8c 	.word	0x20000c8c
    d910:	0000895d 	.word	0x0000895d
    d914:	0000d241 	.word	0x0000d241
    d918:	00010ccc 	.word	0x00010ccc
    d91c:	0000e0c9 	.word	0x0000e0c9

0000d920 <main>:

int main (void)
{
    d920:	b590      	push	{r4, r7, lr}
    d922:	b08b      	sub	sp, #44	; 0x2c
    d924:	af00      	add	r7, sp, #0
	
	tstrWifiInitParam param;
	int8_t ret;
	init_state();
    d926:	4b33      	ldr	r3, [pc, #204]	; (d9f4 <main+0xd4>)
    d928:	4798      	blx	r3
	
	system_init();
    d92a:	4b33      	ldr	r3, [pc, #204]	; (d9f8 <main+0xd8>)
    d92c:	4798      	blx	r3
	//system_interrupt_enable_global();
	configure_port_pins();
    d92e:	4b33      	ldr	r3, [pc, #204]	; (d9fc <main+0xdc>)
    d930:	4798      	blx	r3
	//delay_init();
	configure_console();
    d932:	4b33      	ldr	r3, [pc, #204]	; (da00 <main+0xe0>)
    d934:	4798      	blx	r3
	//configure_nvm();
	configure_spi_flash();
    d936:	4b33      	ldr	r3, [pc, #204]	; (da04 <main+0xe4>)
    d938:	4798      	blx	r3
	configure_timer();
    d93a:	4b33      	ldr	r3, [pc, #204]	; (da08 <main+0xe8>)
    d93c:	4798      	blx	r3
	configure_http_client();
    d93e:	4b33      	ldr	r3, [pc, #204]	; (da0c <main+0xec>)
    d940:	4798      	blx	r3
	nm_bsp_init();
    d942:	4b33      	ldr	r3, [pc, #204]	; (da10 <main+0xf0>)
    d944:	4798      	blx	r3
	
	
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    d946:	230c      	movs	r3, #12
    d948:	18fb      	adds	r3, r7, r3
    d94a:	2218      	movs	r2, #24
    d94c:	2100      	movs	r1, #0
    d94e:	0018      	movs	r0, r3
    d950:	4b30      	ldr	r3, [pc, #192]	; (da14 <main+0xf4>)
    d952:	4798      	blx	r3
	
	param.pfAppWifiCb = wifi_cb;
    d954:	230c      	movs	r3, #12
    d956:	18fb      	adds	r3, r7, r3
    d958:	4a2f      	ldr	r2, [pc, #188]	; (da18 <main+0xf8>)
    d95a:	601a      	str	r2, [r3, #0]
	ret = m2m_wifi_init(&param);
    d95c:	2327      	movs	r3, #39	; 0x27
    d95e:	18fc      	adds	r4, r7, r3
    d960:	230c      	movs	r3, #12
    d962:	18fb      	adds	r3, r7, r3
    d964:	0018      	movs	r0, r3
    d966:	4b2d      	ldr	r3, [pc, #180]	; (da1c <main+0xfc>)
    d968:	4798      	blx	r3
    d96a:	0003      	movs	r3, r0
    d96c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    d96e:	2327      	movs	r3, #39	; 0x27
    d970:	18fb      	adds	r3, r7, r3
    d972:	781b      	ldrb	r3, [r3, #0]
    d974:	b25b      	sxtb	r3, r3
    d976:	2b00      	cmp	r3, #0
    d978:	d009      	beq.n	d98e <main+0x6e>
		printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
    d97a:	2327      	movs	r3, #39	; 0x27
    d97c:	18fb      	adds	r3, r7, r3
    d97e:	2200      	movs	r2, #0
    d980:	569a      	ldrsb	r2, [r3, r2]
    d982:	4b27      	ldr	r3, [pc, #156]	; (da20 <main+0x100>)
    d984:	0011      	movs	r1, r2
    d986:	0018      	movs	r0, r3
    d988:	4b26      	ldr	r3, [pc, #152]	; (da24 <main+0x104>)
    d98a:	4798      	blx	r3
		while (1) {
    d98c:	e7fe      	b.n	d98c <main+0x6c>
		}
	}
	
	socketInit();
    d98e:	4b26      	ldr	r3, [pc, #152]	; (da28 <main+0x108>)
    d990:	4798      	blx	r3
	registerSocketCallback(socket_cb, resolve_cb);
    d992:	4a26      	ldr	r2, [pc, #152]	; (da2c <main+0x10c>)
    d994:	4b26      	ldr	r3, [pc, #152]	; (da30 <main+0x110>)
    d996:	0011      	movs	r1, r2
    d998:	0018      	movs	r0, r3
    d99a:	4b26      	ldr	r3, [pc, #152]	; (da34 <main+0x114>)
    d99c:	4798      	blx	r3
	
	while (1) 
	{
		if (port_pin_get_input_level(B1) == true) {
    d99e:	2037      	movs	r0, #55	; 0x37
    d9a0:	4b25      	ldr	r3, [pc, #148]	; (da38 <main+0x118>)
    d9a2:	4798      	blx	r3
    d9a4:	1e03      	subs	r3, r0, #0
    d9a6:	d004      	beq.n	d9b2 <main+0x92>
			port_pin_set_output_level(LED_0_PIN, false);
    d9a8:	2100      	movs	r1, #0
    d9aa:	2017      	movs	r0, #23
    d9ac:	4b23      	ldr	r3, [pc, #140]	; (da3c <main+0x11c>)
    d9ae:	4798      	blx	r3
    d9b0:	e003      	b.n	d9ba <main+0x9a>
		}
		else 
		{
			port_pin_set_output_level(LED_0_PIN, true);
    d9b2:	2101      	movs	r1, #1
    d9b4:	2017      	movs	r0, #23
    d9b6:	4b21      	ldr	r3, [pc, #132]	; (da3c <main+0x11c>)
    d9b8:	4798      	blx	r3
		}
		
		// receive command from IBM BlueMix
		//....................
		write_firmware = true; //set this to true
    d9ba:	4b21      	ldr	r3, [pc, #132]	; (da40 <main+0x120>)
    d9bc:	2201      	movs	r2, #1
    d9be:	701a      	strb	r2, [r3, #0]
		//write the updated status
		if(write_firmware)
    d9c0:	4b1f      	ldr	r3, [pc, #124]	; (da40 <main+0x120>)
    d9c2:	781b      	ldrb	r3, [r3, #0]
    d9c4:	2b00      	cmp	r3, #0
    d9c6:	d0ea      	beq.n	d99e <main+0x7e>
		{
			// download firmware into serial flash and upgrade
			download_firmware();
    d9c8:	4b1e      	ldr	r3, [pc, #120]	; (da44 <main+0x124>)
    d9ca:	4798      	blx	r3
			Firmware_Status_t fw_status = *(Firmware_Status_t*)FW_STAT_ADDRESS;
    d9cc:	23fe      	movs	r3, #254	; 0xfe
    d9ce:	01db      	lsls	r3, r3, #7
    d9d0:	1d3a      	adds	r2, r7, #4
    d9d2:	0010      	movs	r0, r2
    d9d4:	0019      	movs	r1, r3
    d9d6:	2307      	movs	r3, #7
    d9d8:	001a      	movs	r2, r3
    d9da:	4b1b      	ldr	r3, [pc, #108]	; (da48 <main+0x128>)
    d9dc:	4798      	blx	r3
			*(uint32_t*)fw_status.signature = 0xEFBEADDE; //replace with checksum of downloaded image
    d9de:	1d3b      	adds	r3, r7, #4
    d9e0:	4a1a      	ldr	r2, [pc, #104]	; (da4c <main+0x12c>)
    d9e2:	601a      	str	r2, [r3, #0]
// 			fw_status.downloaded_image = fill version for downloaded image
// 			fw_status.writenew_image = 0xFF;  // write image flag
			writeFWStat(fw_status);
    d9e4:	1d3b      	adds	r3, r7, #4
    d9e6:	6818      	ldr	r0, [r3, #0]
    d9e8:	6859      	ldr	r1, [r3, #4]
    d9ea:	4b19      	ldr	r3, [pc, #100]	; (da50 <main+0x130>)
    d9ec:	4798      	blx	r3
			// reset to begin writing firmware
			system_reset();
    d9ee:	4b19      	ldr	r3, [pc, #100]	; (da54 <main+0x134>)
    d9f0:	4798      	blx	r3
		if (port_pin_get_input_level(B1) == true) {
    d9f2:	e7d4      	b.n	d99e <main+0x7e>
    d9f4:	0000d1d1 	.word	0x0000d1d1
    d9f8:	0000c941 	.word	0x0000c941
    d9fc:	0000d0b5 	.word	0x0000d0b5
    da00:	0000cf8d 	.word	0x0000cf8d
    da04:	0000d0f5 	.word	0x0000d0f5
    da08:	0000d195 	.word	0x0000d195
    da0c:	0000d809 	.word	0x0000d809
    da10:	000002a1 	.word	0x000002a1
    da14:	0000de4b 	.word	0x0000de4b
    da18:	0000d715 	.word	0x0000d715
    da1c:	00001d59 	.word	0x00001d59
    da20:	00010ce8 	.word	0x00010ce8
    da24:	0000dfad 	.word	0x0000dfad
    da28:	00004f5d 	.word	0x00004f5d
    da2c:	0000d6b9 	.word	0x0000d6b9
    da30:	0000d685 	.word	0x0000d685
    da34:	00004fad 	.word	0x00004fad
    da38:	0000caf9 	.word	0x0000caf9
    da3c:	0000cb3d 	.word	0x0000cb3d
    da40:	20000284 	.word	0x20000284
    da44:	0000d87d 	.word	0x0000d87d
    da48:	0000de15 	.word	0x0000de15
    da4c:	efbeadde 	.word	0xefbeadde
    da50:	0000d001 	.word	0x0000d001
    da54:	0000cb91 	.word	0x0000cb91

0000da58 <__udivsi3>:
    da58:	2200      	movs	r2, #0
    da5a:	0843      	lsrs	r3, r0, #1
    da5c:	428b      	cmp	r3, r1
    da5e:	d374      	bcc.n	db4a <__udivsi3+0xf2>
    da60:	0903      	lsrs	r3, r0, #4
    da62:	428b      	cmp	r3, r1
    da64:	d35f      	bcc.n	db26 <__udivsi3+0xce>
    da66:	0a03      	lsrs	r3, r0, #8
    da68:	428b      	cmp	r3, r1
    da6a:	d344      	bcc.n	daf6 <__udivsi3+0x9e>
    da6c:	0b03      	lsrs	r3, r0, #12
    da6e:	428b      	cmp	r3, r1
    da70:	d328      	bcc.n	dac4 <__udivsi3+0x6c>
    da72:	0c03      	lsrs	r3, r0, #16
    da74:	428b      	cmp	r3, r1
    da76:	d30d      	bcc.n	da94 <__udivsi3+0x3c>
    da78:	22ff      	movs	r2, #255	; 0xff
    da7a:	0209      	lsls	r1, r1, #8
    da7c:	ba12      	rev	r2, r2
    da7e:	0c03      	lsrs	r3, r0, #16
    da80:	428b      	cmp	r3, r1
    da82:	d302      	bcc.n	da8a <__udivsi3+0x32>
    da84:	1212      	asrs	r2, r2, #8
    da86:	0209      	lsls	r1, r1, #8
    da88:	d065      	beq.n	db56 <__udivsi3+0xfe>
    da8a:	0b03      	lsrs	r3, r0, #12
    da8c:	428b      	cmp	r3, r1
    da8e:	d319      	bcc.n	dac4 <__udivsi3+0x6c>
    da90:	e000      	b.n	da94 <__udivsi3+0x3c>
    da92:	0a09      	lsrs	r1, r1, #8
    da94:	0bc3      	lsrs	r3, r0, #15
    da96:	428b      	cmp	r3, r1
    da98:	d301      	bcc.n	da9e <__udivsi3+0x46>
    da9a:	03cb      	lsls	r3, r1, #15
    da9c:	1ac0      	subs	r0, r0, r3
    da9e:	4152      	adcs	r2, r2
    daa0:	0b83      	lsrs	r3, r0, #14
    daa2:	428b      	cmp	r3, r1
    daa4:	d301      	bcc.n	daaa <__udivsi3+0x52>
    daa6:	038b      	lsls	r3, r1, #14
    daa8:	1ac0      	subs	r0, r0, r3
    daaa:	4152      	adcs	r2, r2
    daac:	0b43      	lsrs	r3, r0, #13
    daae:	428b      	cmp	r3, r1
    dab0:	d301      	bcc.n	dab6 <__udivsi3+0x5e>
    dab2:	034b      	lsls	r3, r1, #13
    dab4:	1ac0      	subs	r0, r0, r3
    dab6:	4152      	adcs	r2, r2
    dab8:	0b03      	lsrs	r3, r0, #12
    daba:	428b      	cmp	r3, r1
    dabc:	d301      	bcc.n	dac2 <__udivsi3+0x6a>
    dabe:	030b      	lsls	r3, r1, #12
    dac0:	1ac0      	subs	r0, r0, r3
    dac2:	4152      	adcs	r2, r2
    dac4:	0ac3      	lsrs	r3, r0, #11
    dac6:	428b      	cmp	r3, r1
    dac8:	d301      	bcc.n	dace <__udivsi3+0x76>
    daca:	02cb      	lsls	r3, r1, #11
    dacc:	1ac0      	subs	r0, r0, r3
    dace:	4152      	adcs	r2, r2
    dad0:	0a83      	lsrs	r3, r0, #10
    dad2:	428b      	cmp	r3, r1
    dad4:	d301      	bcc.n	dada <__udivsi3+0x82>
    dad6:	028b      	lsls	r3, r1, #10
    dad8:	1ac0      	subs	r0, r0, r3
    dada:	4152      	adcs	r2, r2
    dadc:	0a43      	lsrs	r3, r0, #9
    dade:	428b      	cmp	r3, r1
    dae0:	d301      	bcc.n	dae6 <__udivsi3+0x8e>
    dae2:	024b      	lsls	r3, r1, #9
    dae4:	1ac0      	subs	r0, r0, r3
    dae6:	4152      	adcs	r2, r2
    dae8:	0a03      	lsrs	r3, r0, #8
    daea:	428b      	cmp	r3, r1
    daec:	d301      	bcc.n	daf2 <__udivsi3+0x9a>
    daee:	020b      	lsls	r3, r1, #8
    daf0:	1ac0      	subs	r0, r0, r3
    daf2:	4152      	adcs	r2, r2
    daf4:	d2cd      	bcs.n	da92 <__udivsi3+0x3a>
    daf6:	09c3      	lsrs	r3, r0, #7
    daf8:	428b      	cmp	r3, r1
    dafa:	d301      	bcc.n	db00 <__udivsi3+0xa8>
    dafc:	01cb      	lsls	r3, r1, #7
    dafe:	1ac0      	subs	r0, r0, r3
    db00:	4152      	adcs	r2, r2
    db02:	0983      	lsrs	r3, r0, #6
    db04:	428b      	cmp	r3, r1
    db06:	d301      	bcc.n	db0c <__udivsi3+0xb4>
    db08:	018b      	lsls	r3, r1, #6
    db0a:	1ac0      	subs	r0, r0, r3
    db0c:	4152      	adcs	r2, r2
    db0e:	0943      	lsrs	r3, r0, #5
    db10:	428b      	cmp	r3, r1
    db12:	d301      	bcc.n	db18 <__udivsi3+0xc0>
    db14:	014b      	lsls	r3, r1, #5
    db16:	1ac0      	subs	r0, r0, r3
    db18:	4152      	adcs	r2, r2
    db1a:	0903      	lsrs	r3, r0, #4
    db1c:	428b      	cmp	r3, r1
    db1e:	d301      	bcc.n	db24 <__udivsi3+0xcc>
    db20:	010b      	lsls	r3, r1, #4
    db22:	1ac0      	subs	r0, r0, r3
    db24:	4152      	adcs	r2, r2
    db26:	08c3      	lsrs	r3, r0, #3
    db28:	428b      	cmp	r3, r1
    db2a:	d301      	bcc.n	db30 <__udivsi3+0xd8>
    db2c:	00cb      	lsls	r3, r1, #3
    db2e:	1ac0      	subs	r0, r0, r3
    db30:	4152      	adcs	r2, r2
    db32:	0883      	lsrs	r3, r0, #2
    db34:	428b      	cmp	r3, r1
    db36:	d301      	bcc.n	db3c <__udivsi3+0xe4>
    db38:	008b      	lsls	r3, r1, #2
    db3a:	1ac0      	subs	r0, r0, r3
    db3c:	4152      	adcs	r2, r2
    db3e:	0843      	lsrs	r3, r0, #1
    db40:	428b      	cmp	r3, r1
    db42:	d301      	bcc.n	db48 <__udivsi3+0xf0>
    db44:	004b      	lsls	r3, r1, #1
    db46:	1ac0      	subs	r0, r0, r3
    db48:	4152      	adcs	r2, r2
    db4a:	1a41      	subs	r1, r0, r1
    db4c:	d200      	bcs.n	db50 <__udivsi3+0xf8>
    db4e:	4601      	mov	r1, r0
    db50:	4152      	adcs	r2, r2
    db52:	4610      	mov	r0, r2
    db54:	4770      	bx	lr
    db56:	e7ff      	b.n	db58 <__udivsi3+0x100>
    db58:	b501      	push	{r0, lr}
    db5a:	2000      	movs	r0, #0
    db5c:	f000 f8f0 	bl	dd40 <__aeabi_idiv0>
    db60:	bd02      	pop	{r1, pc}
    db62:	46c0      	nop			; (mov r8, r8)

0000db64 <__aeabi_uidivmod>:
    db64:	2900      	cmp	r1, #0
    db66:	d0f7      	beq.n	db58 <__udivsi3+0x100>
    db68:	e776      	b.n	da58 <__udivsi3>
    db6a:	4770      	bx	lr

0000db6c <__divsi3>:
    db6c:	4603      	mov	r3, r0
    db6e:	430b      	orrs	r3, r1
    db70:	d47f      	bmi.n	dc72 <__divsi3+0x106>
    db72:	2200      	movs	r2, #0
    db74:	0843      	lsrs	r3, r0, #1
    db76:	428b      	cmp	r3, r1
    db78:	d374      	bcc.n	dc64 <__divsi3+0xf8>
    db7a:	0903      	lsrs	r3, r0, #4
    db7c:	428b      	cmp	r3, r1
    db7e:	d35f      	bcc.n	dc40 <__divsi3+0xd4>
    db80:	0a03      	lsrs	r3, r0, #8
    db82:	428b      	cmp	r3, r1
    db84:	d344      	bcc.n	dc10 <__divsi3+0xa4>
    db86:	0b03      	lsrs	r3, r0, #12
    db88:	428b      	cmp	r3, r1
    db8a:	d328      	bcc.n	dbde <__divsi3+0x72>
    db8c:	0c03      	lsrs	r3, r0, #16
    db8e:	428b      	cmp	r3, r1
    db90:	d30d      	bcc.n	dbae <__divsi3+0x42>
    db92:	22ff      	movs	r2, #255	; 0xff
    db94:	0209      	lsls	r1, r1, #8
    db96:	ba12      	rev	r2, r2
    db98:	0c03      	lsrs	r3, r0, #16
    db9a:	428b      	cmp	r3, r1
    db9c:	d302      	bcc.n	dba4 <__divsi3+0x38>
    db9e:	1212      	asrs	r2, r2, #8
    dba0:	0209      	lsls	r1, r1, #8
    dba2:	d065      	beq.n	dc70 <__divsi3+0x104>
    dba4:	0b03      	lsrs	r3, r0, #12
    dba6:	428b      	cmp	r3, r1
    dba8:	d319      	bcc.n	dbde <__divsi3+0x72>
    dbaa:	e000      	b.n	dbae <__divsi3+0x42>
    dbac:	0a09      	lsrs	r1, r1, #8
    dbae:	0bc3      	lsrs	r3, r0, #15
    dbb0:	428b      	cmp	r3, r1
    dbb2:	d301      	bcc.n	dbb8 <__divsi3+0x4c>
    dbb4:	03cb      	lsls	r3, r1, #15
    dbb6:	1ac0      	subs	r0, r0, r3
    dbb8:	4152      	adcs	r2, r2
    dbba:	0b83      	lsrs	r3, r0, #14
    dbbc:	428b      	cmp	r3, r1
    dbbe:	d301      	bcc.n	dbc4 <__divsi3+0x58>
    dbc0:	038b      	lsls	r3, r1, #14
    dbc2:	1ac0      	subs	r0, r0, r3
    dbc4:	4152      	adcs	r2, r2
    dbc6:	0b43      	lsrs	r3, r0, #13
    dbc8:	428b      	cmp	r3, r1
    dbca:	d301      	bcc.n	dbd0 <__divsi3+0x64>
    dbcc:	034b      	lsls	r3, r1, #13
    dbce:	1ac0      	subs	r0, r0, r3
    dbd0:	4152      	adcs	r2, r2
    dbd2:	0b03      	lsrs	r3, r0, #12
    dbd4:	428b      	cmp	r3, r1
    dbd6:	d301      	bcc.n	dbdc <__divsi3+0x70>
    dbd8:	030b      	lsls	r3, r1, #12
    dbda:	1ac0      	subs	r0, r0, r3
    dbdc:	4152      	adcs	r2, r2
    dbde:	0ac3      	lsrs	r3, r0, #11
    dbe0:	428b      	cmp	r3, r1
    dbe2:	d301      	bcc.n	dbe8 <__divsi3+0x7c>
    dbe4:	02cb      	lsls	r3, r1, #11
    dbe6:	1ac0      	subs	r0, r0, r3
    dbe8:	4152      	adcs	r2, r2
    dbea:	0a83      	lsrs	r3, r0, #10
    dbec:	428b      	cmp	r3, r1
    dbee:	d301      	bcc.n	dbf4 <__divsi3+0x88>
    dbf0:	028b      	lsls	r3, r1, #10
    dbf2:	1ac0      	subs	r0, r0, r3
    dbf4:	4152      	adcs	r2, r2
    dbf6:	0a43      	lsrs	r3, r0, #9
    dbf8:	428b      	cmp	r3, r1
    dbfa:	d301      	bcc.n	dc00 <__divsi3+0x94>
    dbfc:	024b      	lsls	r3, r1, #9
    dbfe:	1ac0      	subs	r0, r0, r3
    dc00:	4152      	adcs	r2, r2
    dc02:	0a03      	lsrs	r3, r0, #8
    dc04:	428b      	cmp	r3, r1
    dc06:	d301      	bcc.n	dc0c <__divsi3+0xa0>
    dc08:	020b      	lsls	r3, r1, #8
    dc0a:	1ac0      	subs	r0, r0, r3
    dc0c:	4152      	adcs	r2, r2
    dc0e:	d2cd      	bcs.n	dbac <__divsi3+0x40>
    dc10:	09c3      	lsrs	r3, r0, #7
    dc12:	428b      	cmp	r3, r1
    dc14:	d301      	bcc.n	dc1a <__divsi3+0xae>
    dc16:	01cb      	lsls	r3, r1, #7
    dc18:	1ac0      	subs	r0, r0, r3
    dc1a:	4152      	adcs	r2, r2
    dc1c:	0983      	lsrs	r3, r0, #6
    dc1e:	428b      	cmp	r3, r1
    dc20:	d301      	bcc.n	dc26 <__divsi3+0xba>
    dc22:	018b      	lsls	r3, r1, #6
    dc24:	1ac0      	subs	r0, r0, r3
    dc26:	4152      	adcs	r2, r2
    dc28:	0943      	lsrs	r3, r0, #5
    dc2a:	428b      	cmp	r3, r1
    dc2c:	d301      	bcc.n	dc32 <__divsi3+0xc6>
    dc2e:	014b      	lsls	r3, r1, #5
    dc30:	1ac0      	subs	r0, r0, r3
    dc32:	4152      	adcs	r2, r2
    dc34:	0903      	lsrs	r3, r0, #4
    dc36:	428b      	cmp	r3, r1
    dc38:	d301      	bcc.n	dc3e <__divsi3+0xd2>
    dc3a:	010b      	lsls	r3, r1, #4
    dc3c:	1ac0      	subs	r0, r0, r3
    dc3e:	4152      	adcs	r2, r2
    dc40:	08c3      	lsrs	r3, r0, #3
    dc42:	428b      	cmp	r3, r1
    dc44:	d301      	bcc.n	dc4a <__divsi3+0xde>
    dc46:	00cb      	lsls	r3, r1, #3
    dc48:	1ac0      	subs	r0, r0, r3
    dc4a:	4152      	adcs	r2, r2
    dc4c:	0883      	lsrs	r3, r0, #2
    dc4e:	428b      	cmp	r3, r1
    dc50:	d301      	bcc.n	dc56 <__divsi3+0xea>
    dc52:	008b      	lsls	r3, r1, #2
    dc54:	1ac0      	subs	r0, r0, r3
    dc56:	4152      	adcs	r2, r2
    dc58:	0843      	lsrs	r3, r0, #1
    dc5a:	428b      	cmp	r3, r1
    dc5c:	d301      	bcc.n	dc62 <__divsi3+0xf6>
    dc5e:	004b      	lsls	r3, r1, #1
    dc60:	1ac0      	subs	r0, r0, r3
    dc62:	4152      	adcs	r2, r2
    dc64:	1a41      	subs	r1, r0, r1
    dc66:	d200      	bcs.n	dc6a <__divsi3+0xfe>
    dc68:	4601      	mov	r1, r0
    dc6a:	4152      	adcs	r2, r2
    dc6c:	4610      	mov	r0, r2
    dc6e:	4770      	bx	lr
    dc70:	e05d      	b.n	dd2e <__divsi3+0x1c2>
    dc72:	0fca      	lsrs	r2, r1, #31
    dc74:	d000      	beq.n	dc78 <__divsi3+0x10c>
    dc76:	4249      	negs	r1, r1
    dc78:	1003      	asrs	r3, r0, #32
    dc7a:	d300      	bcc.n	dc7e <__divsi3+0x112>
    dc7c:	4240      	negs	r0, r0
    dc7e:	4053      	eors	r3, r2
    dc80:	2200      	movs	r2, #0
    dc82:	469c      	mov	ip, r3
    dc84:	0903      	lsrs	r3, r0, #4
    dc86:	428b      	cmp	r3, r1
    dc88:	d32d      	bcc.n	dce6 <__divsi3+0x17a>
    dc8a:	0a03      	lsrs	r3, r0, #8
    dc8c:	428b      	cmp	r3, r1
    dc8e:	d312      	bcc.n	dcb6 <__divsi3+0x14a>
    dc90:	22fc      	movs	r2, #252	; 0xfc
    dc92:	0189      	lsls	r1, r1, #6
    dc94:	ba12      	rev	r2, r2
    dc96:	0a03      	lsrs	r3, r0, #8
    dc98:	428b      	cmp	r3, r1
    dc9a:	d30c      	bcc.n	dcb6 <__divsi3+0x14a>
    dc9c:	0189      	lsls	r1, r1, #6
    dc9e:	1192      	asrs	r2, r2, #6
    dca0:	428b      	cmp	r3, r1
    dca2:	d308      	bcc.n	dcb6 <__divsi3+0x14a>
    dca4:	0189      	lsls	r1, r1, #6
    dca6:	1192      	asrs	r2, r2, #6
    dca8:	428b      	cmp	r3, r1
    dcaa:	d304      	bcc.n	dcb6 <__divsi3+0x14a>
    dcac:	0189      	lsls	r1, r1, #6
    dcae:	d03a      	beq.n	dd26 <__divsi3+0x1ba>
    dcb0:	1192      	asrs	r2, r2, #6
    dcb2:	e000      	b.n	dcb6 <__divsi3+0x14a>
    dcb4:	0989      	lsrs	r1, r1, #6
    dcb6:	09c3      	lsrs	r3, r0, #7
    dcb8:	428b      	cmp	r3, r1
    dcba:	d301      	bcc.n	dcc0 <__divsi3+0x154>
    dcbc:	01cb      	lsls	r3, r1, #7
    dcbe:	1ac0      	subs	r0, r0, r3
    dcc0:	4152      	adcs	r2, r2
    dcc2:	0983      	lsrs	r3, r0, #6
    dcc4:	428b      	cmp	r3, r1
    dcc6:	d301      	bcc.n	dccc <__divsi3+0x160>
    dcc8:	018b      	lsls	r3, r1, #6
    dcca:	1ac0      	subs	r0, r0, r3
    dccc:	4152      	adcs	r2, r2
    dcce:	0943      	lsrs	r3, r0, #5
    dcd0:	428b      	cmp	r3, r1
    dcd2:	d301      	bcc.n	dcd8 <__divsi3+0x16c>
    dcd4:	014b      	lsls	r3, r1, #5
    dcd6:	1ac0      	subs	r0, r0, r3
    dcd8:	4152      	adcs	r2, r2
    dcda:	0903      	lsrs	r3, r0, #4
    dcdc:	428b      	cmp	r3, r1
    dcde:	d301      	bcc.n	dce4 <__divsi3+0x178>
    dce0:	010b      	lsls	r3, r1, #4
    dce2:	1ac0      	subs	r0, r0, r3
    dce4:	4152      	adcs	r2, r2
    dce6:	08c3      	lsrs	r3, r0, #3
    dce8:	428b      	cmp	r3, r1
    dcea:	d301      	bcc.n	dcf0 <__divsi3+0x184>
    dcec:	00cb      	lsls	r3, r1, #3
    dcee:	1ac0      	subs	r0, r0, r3
    dcf0:	4152      	adcs	r2, r2
    dcf2:	0883      	lsrs	r3, r0, #2
    dcf4:	428b      	cmp	r3, r1
    dcf6:	d301      	bcc.n	dcfc <__divsi3+0x190>
    dcf8:	008b      	lsls	r3, r1, #2
    dcfa:	1ac0      	subs	r0, r0, r3
    dcfc:	4152      	adcs	r2, r2
    dcfe:	d2d9      	bcs.n	dcb4 <__divsi3+0x148>
    dd00:	0843      	lsrs	r3, r0, #1
    dd02:	428b      	cmp	r3, r1
    dd04:	d301      	bcc.n	dd0a <__divsi3+0x19e>
    dd06:	004b      	lsls	r3, r1, #1
    dd08:	1ac0      	subs	r0, r0, r3
    dd0a:	4152      	adcs	r2, r2
    dd0c:	1a41      	subs	r1, r0, r1
    dd0e:	d200      	bcs.n	dd12 <__divsi3+0x1a6>
    dd10:	4601      	mov	r1, r0
    dd12:	4663      	mov	r3, ip
    dd14:	4152      	adcs	r2, r2
    dd16:	105b      	asrs	r3, r3, #1
    dd18:	4610      	mov	r0, r2
    dd1a:	d301      	bcc.n	dd20 <__divsi3+0x1b4>
    dd1c:	4240      	negs	r0, r0
    dd1e:	2b00      	cmp	r3, #0
    dd20:	d500      	bpl.n	dd24 <__divsi3+0x1b8>
    dd22:	4249      	negs	r1, r1
    dd24:	4770      	bx	lr
    dd26:	4663      	mov	r3, ip
    dd28:	105b      	asrs	r3, r3, #1
    dd2a:	d300      	bcc.n	dd2e <__divsi3+0x1c2>
    dd2c:	4240      	negs	r0, r0
    dd2e:	b501      	push	{r0, lr}
    dd30:	2000      	movs	r0, #0
    dd32:	f000 f805 	bl	dd40 <__aeabi_idiv0>
    dd36:	bd02      	pop	{r1, pc}

0000dd38 <__aeabi_idivmod>:
    dd38:	2900      	cmp	r1, #0
    dd3a:	d0f8      	beq.n	dd2e <__divsi3+0x1c2>
    dd3c:	e716      	b.n	db6c <__divsi3>
    dd3e:	4770      	bx	lr

0000dd40 <__aeabi_idiv0>:
    dd40:	4770      	bx	lr
    dd42:	46c0      	nop			; (mov r8, r8)

0000dd44 <__aeabi_lmul>:
    dd44:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd46:	46ce      	mov	lr, r9
    dd48:	4647      	mov	r7, r8
    dd4a:	0415      	lsls	r5, r2, #16
    dd4c:	0c2d      	lsrs	r5, r5, #16
    dd4e:	002e      	movs	r6, r5
    dd50:	b580      	push	{r7, lr}
    dd52:	0407      	lsls	r7, r0, #16
    dd54:	0c14      	lsrs	r4, r2, #16
    dd56:	0c3f      	lsrs	r7, r7, #16
    dd58:	4699      	mov	r9, r3
    dd5a:	0c03      	lsrs	r3, r0, #16
    dd5c:	437e      	muls	r6, r7
    dd5e:	435d      	muls	r5, r3
    dd60:	4367      	muls	r7, r4
    dd62:	4363      	muls	r3, r4
    dd64:	197f      	adds	r7, r7, r5
    dd66:	0c34      	lsrs	r4, r6, #16
    dd68:	19e4      	adds	r4, r4, r7
    dd6a:	469c      	mov	ip, r3
    dd6c:	42a5      	cmp	r5, r4
    dd6e:	d903      	bls.n	dd78 <__aeabi_lmul+0x34>
    dd70:	2380      	movs	r3, #128	; 0x80
    dd72:	025b      	lsls	r3, r3, #9
    dd74:	4698      	mov	r8, r3
    dd76:	44c4      	add	ip, r8
    dd78:	464b      	mov	r3, r9
    dd7a:	4351      	muls	r1, r2
    dd7c:	4343      	muls	r3, r0
    dd7e:	0436      	lsls	r6, r6, #16
    dd80:	0c36      	lsrs	r6, r6, #16
    dd82:	0c25      	lsrs	r5, r4, #16
    dd84:	0424      	lsls	r4, r4, #16
    dd86:	4465      	add	r5, ip
    dd88:	19a4      	adds	r4, r4, r6
    dd8a:	1859      	adds	r1, r3, r1
    dd8c:	1949      	adds	r1, r1, r5
    dd8e:	0020      	movs	r0, r4
    dd90:	bc0c      	pop	{r2, r3}
    dd92:	4690      	mov	r8, r2
    dd94:	4699      	mov	r9, r3
    dd96:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000dd98 <atoi>:
    dd98:	b510      	push	{r4, lr}
    dd9a:	220a      	movs	r2, #10
    dd9c:	2100      	movs	r1, #0
    dd9e:	f000 fb6d 	bl	e47c <strtol>
    dda2:	bd10      	pop	{r4, pc}

0000dda4 <__libc_init_array>:
    dda4:	b570      	push	{r4, r5, r6, lr}
    dda6:	2600      	movs	r6, #0
    dda8:	4d0c      	ldr	r5, [pc, #48]	; (dddc <__libc_init_array+0x38>)
    ddaa:	4c0d      	ldr	r4, [pc, #52]	; (dde0 <__libc_init_array+0x3c>)
    ddac:	1b64      	subs	r4, r4, r5
    ddae:	10a4      	asrs	r4, r4, #2
    ddb0:	42a6      	cmp	r6, r4
    ddb2:	d109      	bne.n	ddc8 <__libc_init_array+0x24>
    ddb4:	2600      	movs	r6, #0
    ddb6:	f003 f889 	bl	10ecc <_init>
    ddba:	4d0a      	ldr	r5, [pc, #40]	; (dde4 <__libc_init_array+0x40>)
    ddbc:	4c0a      	ldr	r4, [pc, #40]	; (dde8 <__libc_init_array+0x44>)
    ddbe:	1b64      	subs	r4, r4, r5
    ddc0:	10a4      	asrs	r4, r4, #2
    ddc2:	42a6      	cmp	r6, r4
    ddc4:	d105      	bne.n	ddd2 <__libc_init_array+0x2e>
    ddc6:	bd70      	pop	{r4, r5, r6, pc}
    ddc8:	00b3      	lsls	r3, r6, #2
    ddca:	58eb      	ldr	r3, [r5, r3]
    ddcc:	4798      	blx	r3
    ddce:	3601      	adds	r6, #1
    ddd0:	e7ee      	b.n	ddb0 <__libc_init_array+0xc>
    ddd2:	00b3      	lsls	r3, r6, #2
    ddd4:	58eb      	ldr	r3, [r5, r3]
    ddd6:	4798      	blx	r3
    ddd8:	3601      	adds	r6, #1
    ddda:	e7f2      	b.n	ddc2 <__libc_init_array+0x1e>
    dddc:	00010ed8 	.word	0x00010ed8
    dde0:	00010ed8 	.word	0x00010ed8
    dde4:	00010ed8 	.word	0x00010ed8
    dde8:	00010edc 	.word	0x00010edc

0000ddec <malloc>:
    ddec:	b510      	push	{r4, lr}
    ddee:	4b03      	ldr	r3, [pc, #12]	; (ddfc <malloc+0x10>)
    ddf0:	0001      	movs	r1, r0
    ddf2:	6818      	ldr	r0, [r3, #0]
    ddf4:	f000 f87c 	bl	def0 <_malloc_r>
    ddf8:	bd10      	pop	{r4, pc}
    ddfa:	46c0      	nop			; (mov r8, r8)
    ddfc:	20000018 	.word	0x20000018

0000de00 <free>:
    de00:	b510      	push	{r4, lr}
    de02:	4b03      	ldr	r3, [pc, #12]	; (de10 <free+0x10>)
    de04:	0001      	movs	r1, r0
    de06:	6818      	ldr	r0, [r3, #0]
    de08:	f000 f828 	bl	de5c <_free_r>
    de0c:	bd10      	pop	{r4, pc}
    de0e:	46c0      	nop			; (mov r8, r8)
    de10:	20000018 	.word	0x20000018

0000de14 <memcpy>:
    de14:	2300      	movs	r3, #0
    de16:	b510      	push	{r4, lr}
    de18:	429a      	cmp	r2, r3
    de1a:	d100      	bne.n	de1e <memcpy+0xa>
    de1c:	bd10      	pop	{r4, pc}
    de1e:	5ccc      	ldrb	r4, [r1, r3]
    de20:	54c4      	strb	r4, [r0, r3]
    de22:	3301      	adds	r3, #1
    de24:	e7f8      	b.n	de18 <memcpy+0x4>

0000de26 <memmove>:
    de26:	b510      	push	{r4, lr}
    de28:	4288      	cmp	r0, r1
    de2a:	d902      	bls.n	de32 <memmove+0xc>
    de2c:	188b      	adds	r3, r1, r2
    de2e:	4298      	cmp	r0, r3
    de30:	d308      	bcc.n	de44 <memmove+0x1e>
    de32:	2300      	movs	r3, #0
    de34:	429a      	cmp	r2, r3
    de36:	d007      	beq.n	de48 <memmove+0x22>
    de38:	5ccc      	ldrb	r4, [r1, r3]
    de3a:	54c4      	strb	r4, [r0, r3]
    de3c:	3301      	adds	r3, #1
    de3e:	e7f9      	b.n	de34 <memmove+0xe>
    de40:	5c8b      	ldrb	r3, [r1, r2]
    de42:	5483      	strb	r3, [r0, r2]
    de44:	3a01      	subs	r2, #1
    de46:	d2fb      	bcs.n	de40 <memmove+0x1a>
    de48:	bd10      	pop	{r4, pc}

0000de4a <memset>:
    de4a:	0003      	movs	r3, r0
    de4c:	1882      	adds	r2, r0, r2
    de4e:	4293      	cmp	r3, r2
    de50:	d100      	bne.n	de54 <memset+0xa>
    de52:	4770      	bx	lr
    de54:	7019      	strb	r1, [r3, #0]
    de56:	3301      	adds	r3, #1
    de58:	e7f9      	b.n	de4e <memset+0x4>
	...

0000de5c <_free_r>:
    de5c:	b570      	push	{r4, r5, r6, lr}
    de5e:	0005      	movs	r5, r0
    de60:	2900      	cmp	r1, #0
    de62:	d010      	beq.n	de86 <_free_r+0x2a>
    de64:	1f0c      	subs	r4, r1, #4
    de66:	6823      	ldr	r3, [r4, #0]
    de68:	2b00      	cmp	r3, #0
    de6a:	da00      	bge.n	de6e <_free_r+0x12>
    de6c:	18e4      	adds	r4, r4, r3
    de6e:	0028      	movs	r0, r5
    de70:	f000 fdec 	bl	ea4c <__malloc_lock>
    de74:	4a1d      	ldr	r2, [pc, #116]	; (deec <_free_r+0x90>)
    de76:	6813      	ldr	r3, [r2, #0]
    de78:	2b00      	cmp	r3, #0
    de7a:	d105      	bne.n	de88 <_free_r+0x2c>
    de7c:	6063      	str	r3, [r4, #4]
    de7e:	6014      	str	r4, [r2, #0]
    de80:	0028      	movs	r0, r5
    de82:	f000 fde4 	bl	ea4e <__malloc_unlock>
    de86:	bd70      	pop	{r4, r5, r6, pc}
    de88:	42a3      	cmp	r3, r4
    de8a:	d909      	bls.n	dea0 <_free_r+0x44>
    de8c:	6821      	ldr	r1, [r4, #0]
    de8e:	1860      	adds	r0, r4, r1
    de90:	4283      	cmp	r3, r0
    de92:	d1f3      	bne.n	de7c <_free_r+0x20>
    de94:	6818      	ldr	r0, [r3, #0]
    de96:	685b      	ldr	r3, [r3, #4]
    de98:	1841      	adds	r1, r0, r1
    de9a:	6021      	str	r1, [r4, #0]
    de9c:	e7ee      	b.n	de7c <_free_r+0x20>
    de9e:	0013      	movs	r3, r2
    dea0:	685a      	ldr	r2, [r3, #4]
    dea2:	2a00      	cmp	r2, #0
    dea4:	d001      	beq.n	deaa <_free_r+0x4e>
    dea6:	42a2      	cmp	r2, r4
    dea8:	d9f9      	bls.n	de9e <_free_r+0x42>
    deaa:	6819      	ldr	r1, [r3, #0]
    deac:	1858      	adds	r0, r3, r1
    deae:	42a0      	cmp	r0, r4
    deb0:	d10b      	bne.n	deca <_free_r+0x6e>
    deb2:	6820      	ldr	r0, [r4, #0]
    deb4:	1809      	adds	r1, r1, r0
    deb6:	1858      	adds	r0, r3, r1
    deb8:	6019      	str	r1, [r3, #0]
    deba:	4282      	cmp	r2, r0
    debc:	d1e0      	bne.n	de80 <_free_r+0x24>
    debe:	6810      	ldr	r0, [r2, #0]
    dec0:	6852      	ldr	r2, [r2, #4]
    dec2:	1841      	adds	r1, r0, r1
    dec4:	6019      	str	r1, [r3, #0]
    dec6:	605a      	str	r2, [r3, #4]
    dec8:	e7da      	b.n	de80 <_free_r+0x24>
    deca:	42a0      	cmp	r0, r4
    decc:	d902      	bls.n	ded4 <_free_r+0x78>
    dece:	230c      	movs	r3, #12
    ded0:	602b      	str	r3, [r5, #0]
    ded2:	e7d5      	b.n	de80 <_free_r+0x24>
    ded4:	6821      	ldr	r1, [r4, #0]
    ded6:	1860      	adds	r0, r4, r1
    ded8:	4282      	cmp	r2, r0
    deda:	d103      	bne.n	dee4 <_free_r+0x88>
    dedc:	6810      	ldr	r0, [r2, #0]
    dede:	6852      	ldr	r2, [r2, #4]
    dee0:	1841      	adds	r1, r0, r1
    dee2:	6021      	str	r1, [r4, #0]
    dee4:	6062      	str	r2, [r4, #4]
    dee6:	605c      	str	r4, [r3, #4]
    dee8:	e7ca      	b.n	de80 <_free_r+0x24>
    deea:	46c0      	nop			; (mov r8, r8)
    deec:	200002a4 	.word	0x200002a4

0000def0 <_malloc_r>:
    def0:	2303      	movs	r3, #3
    def2:	b570      	push	{r4, r5, r6, lr}
    def4:	1ccd      	adds	r5, r1, #3
    def6:	439d      	bics	r5, r3
    def8:	3508      	adds	r5, #8
    defa:	0006      	movs	r6, r0
    defc:	2d0c      	cmp	r5, #12
    defe:	d21e      	bcs.n	df3e <_malloc_r+0x4e>
    df00:	250c      	movs	r5, #12
    df02:	42a9      	cmp	r1, r5
    df04:	d81d      	bhi.n	df42 <_malloc_r+0x52>
    df06:	0030      	movs	r0, r6
    df08:	f000 fda0 	bl	ea4c <__malloc_lock>
    df0c:	4a25      	ldr	r2, [pc, #148]	; (dfa4 <_malloc_r+0xb4>)
    df0e:	6814      	ldr	r4, [r2, #0]
    df10:	0021      	movs	r1, r4
    df12:	2900      	cmp	r1, #0
    df14:	d119      	bne.n	df4a <_malloc_r+0x5a>
    df16:	4c24      	ldr	r4, [pc, #144]	; (dfa8 <_malloc_r+0xb8>)
    df18:	6823      	ldr	r3, [r4, #0]
    df1a:	2b00      	cmp	r3, #0
    df1c:	d103      	bne.n	df26 <_malloc_r+0x36>
    df1e:	0030      	movs	r0, r6
    df20:	f000 f8dc 	bl	e0dc <_sbrk_r>
    df24:	6020      	str	r0, [r4, #0]
    df26:	0029      	movs	r1, r5
    df28:	0030      	movs	r0, r6
    df2a:	f000 f8d7 	bl	e0dc <_sbrk_r>
    df2e:	1c43      	adds	r3, r0, #1
    df30:	d12c      	bne.n	df8c <_malloc_r+0x9c>
    df32:	230c      	movs	r3, #12
    df34:	0030      	movs	r0, r6
    df36:	6033      	str	r3, [r6, #0]
    df38:	f000 fd89 	bl	ea4e <__malloc_unlock>
    df3c:	e003      	b.n	df46 <_malloc_r+0x56>
    df3e:	2d00      	cmp	r5, #0
    df40:	dadf      	bge.n	df02 <_malloc_r+0x12>
    df42:	230c      	movs	r3, #12
    df44:	6033      	str	r3, [r6, #0]
    df46:	2000      	movs	r0, #0
    df48:	bd70      	pop	{r4, r5, r6, pc}
    df4a:	680b      	ldr	r3, [r1, #0]
    df4c:	1b5b      	subs	r3, r3, r5
    df4e:	d41a      	bmi.n	df86 <_malloc_r+0x96>
    df50:	2b0b      	cmp	r3, #11
    df52:	d903      	bls.n	df5c <_malloc_r+0x6c>
    df54:	600b      	str	r3, [r1, #0]
    df56:	18cc      	adds	r4, r1, r3
    df58:	6025      	str	r5, [r4, #0]
    df5a:	e003      	b.n	df64 <_malloc_r+0x74>
    df5c:	428c      	cmp	r4, r1
    df5e:	d10e      	bne.n	df7e <_malloc_r+0x8e>
    df60:	6863      	ldr	r3, [r4, #4]
    df62:	6013      	str	r3, [r2, #0]
    df64:	0030      	movs	r0, r6
    df66:	f000 fd72 	bl	ea4e <__malloc_unlock>
    df6a:	0020      	movs	r0, r4
    df6c:	2207      	movs	r2, #7
    df6e:	300b      	adds	r0, #11
    df70:	1d23      	adds	r3, r4, #4
    df72:	4390      	bics	r0, r2
    df74:	1ac3      	subs	r3, r0, r3
    df76:	d0e7      	beq.n	df48 <_malloc_r+0x58>
    df78:	425a      	negs	r2, r3
    df7a:	50e2      	str	r2, [r4, r3]
    df7c:	e7e4      	b.n	df48 <_malloc_r+0x58>
    df7e:	684b      	ldr	r3, [r1, #4]
    df80:	6063      	str	r3, [r4, #4]
    df82:	000c      	movs	r4, r1
    df84:	e7ee      	b.n	df64 <_malloc_r+0x74>
    df86:	000c      	movs	r4, r1
    df88:	6849      	ldr	r1, [r1, #4]
    df8a:	e7c2      	b.n	df12 <_malloc_r+0x22>
    df8c:	2303      	movs	r3, #3
    df8e:	1cc4      	adds	r4, r0, #3
    df90:	439c      	bics	r4, r3
    df92:	42a0      	cmp	r0, r4
    df94:	d0e0      	beq.n	df58 <_malloc_r+0x68>
    df96:	1a21      	subs	r1, r4, r0
    df98:	0030      	movs	r0, r6
    df9a:	f000 f89f 	bl	e0dc <_sbrk_r>
    df9e:	1c43      	adds	r3, r0, #1
    dfa0:	d1da      	bne.n	df58 <_malloc_r+0x68>
    dfa2:	e7c6      	b.n	df32 <_malloc_r+0x42>
    dfa4:	200002a4 	.word	0x200002a4
    dfa8:	200002a8 	.word	0x200002a8

0000dfac <iprintf>:
    dfac:	b40f      	push	{r0, r1, r2, r3}
    dfae:	4b0b      	ldr	r3, [pc, #44]	; (dfdc <iprintf+0x30>)
    dfb0:	b513      	push	{r0, r1, r4, lr}
    dfb2:	681c      	ldr	r4, [r3, #0]
    dfb4:	2c00      	cmp	r4, #0
    dfb6:	d005      	beq.n	dfc4 <iprintf+0x18>
    dfb8:	69a3      	ldr	r3, [r4, #24]
    dfba:	2b00      	cmp	r3, #0
    dfbc:	d102      	bne.n	dfc4 <iprintf+0x18>
    dfbe:	0020      	movs	r0, r4
    dfc0:	f000 fc34 	bl	e82c <__sinit>
    dfc4:	ab05      	add	r3, sp, #20
    dfc6:	9a04      	ldr	r2, [sp, #16]
    dfc8:	68a1      	ldr	r1, [r4, #8]
    dfca:	0020      	movs	r0, r4
    dfcc:	9301      	str	r3, [sp, #4]
    dfce:	f000 fecd 	bl	ed6c <_vfiprintf_r>
    dfd2:	bc16      	pop	{r1, r2, r4}
    dfd4:	bc08      	pop	{r3}
    dfd6:	b004      	add	sp, #16
    dfd8:	4718      	bx	r3
    dfda:	46c0      	nop			; (mov r8, r8)
    dfdc:	20000018 	.word	0x20000018

0000dfe0 <putchar>:
    dfe0:	4b08      	ldr	r3, [pc, #32]	; (e004 <putchar+0x24>)
    dfe2:	b570      	push	{r4, r5, r6, lr}
    dfe4:	681c      	ldr	r4, [r3, #0]
    dfe6:	0005      	movs	r5, r0
    dfe8:	2c00      	cmp	r4, #0
    dfea:	d005      	beq.n	dff8 <putchar+0x18>
    dfec:	69a3      	ldr	r3, [r4, #24]
    dfee:	2b00      	cmp	r3, #0
    dff0:	d102      	bne.n	dff8 <putchar+0x18>
    dff2:	0020      	movs	r0, r4
    dff4:	f000 fc1a 	bl	e82c <__sinit>
    dff8:	0029      	movs	r1, r5
    dffa:	68a2      	ldr	r2, [r4, #8]
    dffc:	0020      	movs	r0, r4
    dffe:	f001 f959 	bl	f2b4 <_putc_r>
    e002:	bd70      	pop	{r4, r5, r6, pc}
    e004:	20000018 	.word	0x20000018

0000e008 <_puts_r>:
    e008:	b570      	push	{r4, r5, r6, lr}
    e00a:	0005      	movs	r5, r0
    e00c:	000e      	movs	r6, r1
    e00e:	2800      	cmp	r0, #0
    e010:	d004      	beq.n	e01c <_puts_r+0x14>
    e012:	6983      	ldr	r3, [r0, #24]
    e014:	2b00      	cmp	r3, #0
    e016:	d101      	bne.n	e01c <_puts_r+0x14>
    e018:	f000 fc08 	bl	e82c <__sinit>
    e01c:	69ab      	ldr	r3, [r5, #24]
    e01e:	68ac      	ldr	r4, [r5, #8]
    e020:	2b00      	cmp	r3, #0
    e022:	d102      	bne.n	e02a <_puts_r+0x22>
    e024:	0028      	movs	r0, r5
    e026:	f000 fc01 	bl	e82c <__sinit>
    e02a:	4b24      	ldr	r3, [pc, #144]	; (e0bc <_puts_r+0xb4>)
    e02c:	429c      	cmp	r4, r3
    e02e:	d10f      	bne.n	e050 <_puts_r+0x48>
    e030:	686c      	ldr	r4, [r5, #4]
    e032:	89a3      	ldrh	r3, [r4, #12]
    e034:	071b      	lsls	r3, r3, #28
    e036:	d502      	bpl.n	e03e <_puts_r+0x36>
    e038:	6923      	ldr	r3, [r4, #16]
    e03a:	2b00      	cmp	r3, #0
    e03c:	d120      	bne.n	e080 <_puts_r+0x78>
    e03e:	0021      	movs	r1, r4
    e040:	0028      	movs	r0, r5
    e042:	f000 fa85 	bl	e550 <__swsetup_r>
    e046:	2800      	cmp	r0, #0
    e048:	d01a      	beq.n	e080 <_puts_r+0x78>
    e04a:	2001      	movs	r0, #1
    e04c:	4240      	negs	r0, r0
    e04e:	bd70      	pop	{r4, r5, r6, pc}
    e050:	4b1b      	ldr	r3, [pc, #108]	; (e0c0 <_puts_r+0xb8>)
    e052:	429c      	cmp	r4, r3
    e054:	d101      	bne.n	e05a <_puts_r+0x52>
    e056:	68ac      	ldr	r4, [r5, #8]
    e058:	e7eb      	b.n	e032 <_puts_r+0x2a>
    e05a:	4b1a      	ldr	r3, [pc, #104]	; (e0c4 <_puts_r+0xbc>)
    e05c:	429c      	cmp	r4, r3
    e05e:	d1e8      	bne.n	e032 <_puts_r+0x2a>
    e060:	68ec      	ldr	r4, [r5, #12]
    e062:	e7e6      	b.n	e032 <_puts_r+0x2a>
    e064:	3b01      	subs	r3, #1
    e066:	3601      	adds	r6, #1
    e068:	60a3      	str	r3, [r4, #8]
    e06a:	2b00      	cmp	r3, #0
    e06c:	da04      	bge.n	e078 <_puts_r+0x70>
    e06e:	69a2      	ldr	r2, [r4, #24]
    e070:	4293      	cmp	r3, r2
    e072:	db16      	blt.n	e0a2 <_puts_r+0x9a>
    e074:	290a      	cmp	r1, #10
    e076:	d014      	beq.n	e0a2 <_puts_r+0x9a>
    e078:	6823      	ldr	r3, [r4, #0]
    e07a:	1c5a      	adds	r2, r3, #1
    e07c:	6022      	str	r2, [r4, #0]
    e07e:	7019      	strb	r1, [r3, #0]
    e080:	7831      	ldrb	r1, [r6, #0]
    e082:	68a3      	ldr	r3, [r4, #8]
    e084:	2900      	cmp	r1, #0
    e086:	d1ed      	bne.n	e064 <_puts_r+0x5c>
    e088:	3b01      	subs	r3, #1
    e08a:	60a3      	str	r3, [r4, #8]
    e08c:	2b00      	cmp	r3, #0
    e08e:	da0f      	bge.n	e0b0 <_puts_r+0xa8>
    e090:	0022      	movs	r2, r4
    e092:	310a      	adds	r1, #10
    e094:	0028      	movs	r0, r5
    e096:	f000 fa05 	bl	e4a4 <__swbuf_r>
    e09a:	1c43      	adds	r3, r0, #1
    e09c:	d0d5      	beq.n	e04a <_puts_r+0x42>
    e09e:	200a      	movs	r0, #10
    e0a0:	e7d5      	b.n	e04e <_puts_r+0x46>
    e0a2:	0022      	movs	r2, r4
    e0a4:	0028      	movs	r0, r5
    e0a6:	f000 f9fd 	bl	e4a4 <__swbuf_r>
    e0aa:	1c43      	adds	r3, r0, #1
    e0ac:	d1e8      	bne.n	e080 <_puts_r+0x78>
    e0ae:	e7cc      	b.n	e04a <_puts_r+0x42>
    e0b0:	200a      	movs	r0, #10
    e0b2:	6823      	ldr	r3, [r4, #0]
    e0b4:	1c5a      	adds	r2, r3, #1
    e0b6:	6022      	str	r2, [r4, #0]
    e0b8:	7018      	strb	r0, [r3, #0]
    e0ba:	e7c8      	b.n	e04e <_puts_r+0x46>
    e0bc:	00010d4c 	.word	0x00010d4c
    e0c0:	00010d6c 	.word	0x00010d6c
    e0c4:	00010d2c 	.word	0x00010d2c

0000e0c8 <puts>:
    e0c8:	b510      	push	{r4, lr}
    e0ca:	4b03      	ldr	r3, [pc, #12]	; (e0d8 <puts+0x10>)
    e0cc:	0001      	movs	r1, r0
    e0ce:	6818      	ldr	r0, [r3, #0]
    e0d0:	f7ff ff9a 	bl	e008 <_puts_r>
    e0d4:	bd10      	pop	{r4, pc}
    e0d6:	46c0      	nop			; (mov r8, r8)
    e0d8:	20000018 	.word	0x20000018

0000e0dc <_sbrk_r>:
    e0dc:	2300      	movs	r3, #0
    e0de:	b570      	push	{r4, r5, r6, lr}
    e0e0:	4c06      	ldr	r4, [pc, #24]	; (e0fc <_sbrk_r+0x20>)
    e0e2:	0005      	movs	r5, r0
    e0e4:	0008      	movs	r0, r1
    e0e6:	6023      	str	r3, [r4, #0]
    e0e8:	f7fa fd66 	bl	8bb8 <_sbrk>
    e0ec:	1c43      	adds	r3, r0, #1
    e0ee:	d103      	bne.n	e0f8 <_sbrk_r+0x1c>
    e0f0:	6823      	ldr	r3, [r4, #0]
    e0f2:	2b00      	cmp	r3, #0
    e0f4:	d000      	beq.n	e0f8 <_sbrk_r+0x1c>
    e0f6:	602b      	str	r3, [r5, #0]
    e0f8:	bd70      	pop	{r4, r5, r6, pc}
    e0fa:	46c0      	nop			; (mov r8, r8)
    e0fc:	20000e08 	.word	0x20000e08

0000e100 <setbuf>:
    e100:	424a      	negs	r2, r1
    e102:	414a      	adcs	r2, r1
    e104:	2380      	movs	r3, #128	; 0x80
    e106:	b510      	push	{r4, lr}
    e108:	0052      	lsls	r2, r2, #1
    e10a:	00db      	lsls	r3, r3, #3
    e10c:	f000 f802 	bl	e114 <setvbuf>
    e110:	bd10      	pop	{r4, pc}
	...

0000e114 <setvbuf>:
    e114:	b5f0      	push	{r4, r5, r6, r7, lr}
    e116:	001d      	movs	r5, r3
    e118:	4b4f      	ldr	r3, [pc, #316]	; (e258 <setvbuf+0x144>)
    e11a:	b085      	sub	sp, #20
    e11c:	681e      	ldr	r6, [r3, #0]
    e11e:	0004      	movs	r4, r0
    e120:	000f      	movs	r7, r1
    e122:	9200      	str	r2, [sp, #0]
    e124:	2e00      	cmp	r6, #0
    e126:	d005      	beq.n	e134 <setvbuf+0x20>
    e128:	69b3      	ldr	r3, [r6, #24]
    e12a:	2b00      	cmp	r3, #0
    e12c:	d102      	bne.n	e134 <setvbuf+0x20>
    e12e:	0030      	movs	r0, r6
    e130:	f000 fb7c 	bl	e82c <__sinit>
    e134:	4b49      	ldr	r3, [pc, #292]	; (e25c <setvbuf+0x148>)
    e136:	429c      	cmp	r4, r3
    e138:	d150      	bne.n	e1dc <setvbuf+0xc8>
    e13a:	6874      	ldr	r4, [r6, #4]
    e13c:	9b00      	ldr	r3, [sp, #0]
    e13e:	2b02      	cmp	r3, #2
    e140:	d005      	beq.n	e14e <setvbuf+0x3a>
    e142:	2b01      	cmp	r3, #1
    e144:	d900      	bls.n	e148 <setvbuf+0x34>
    e146:	e084      	b.n	e252 <setvbuf+0x13e>
    e148:	2d00      	cmp	r5, #0
    e14a:	da00      	bge.n	e14e <setvbuf+0x3a>
    e14c:	e081      	b.n	e252 <setvbuf+0x13e>
    e14e:	0021      	movs	r1, r4
    e150:	0030      	movs	r0, r6
    e152:	f000 fafd 	bl	e750 <_fflush_r>
    e156:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e158:	2900      	cmp	r1, #0
    e15a:	d008      	beq.n	e16e <setvbuf+0x5a>
    e15c:	0023      	movs	r3, r4
    e15e:	3344      	adds	r3, #68	; 0x44
    e160:	4299      	cmp	r1, r3
    e162:	d002      	beq.n	e16a <setvbuf+0x56>
    e164:	0030      	movs	r0, r6
    e166:	f7ff fe79 	bl	de5c <_free_r>
    e16a:	2300      	movs	r3, #0
    e16c:	6363      	str	r3, [r4, #52]	; 0x34
    e16e:	2300      	movs	r3, #0
    e170:	61a3      	str	r3, [r4, #24]
    e172:	6063      	str	r3, [r4, #4]
    e174:	89a3      	ldrh	r3, [r4, #12]
    e176:	061b      	lsls	r3, r3, #24
    e178:	d503      	bpl.n	e182 <setvbuf+0x6e>
    e17a:	6921      	ldr	r1, [r4, #16]
    e17c:	0030      	movs	r0, r6
    e17e:	f7ff fe6d 	bl	de5c <_free_r>
    e182:	89a3      	ldrh	r3, [r4, #12]
    e184:	4a36      	ldr	r2, [pc, #216]	; (e260 <setvbuf+0x14c>)
    e186:	4013      	ands	r3, r2
    e188:	81a3      	strh	r3, [r4, #12]
    e18a:	9b00      	ldr	r3, [sp, #0]
    e18c:	2b02      	cmp	r3, #2
    e18e:	d05a      	beq.n	e246 <setvbuf+0x132>
    e190:	ab03      	add	r3, sp, #12
    e192:	aa02      	add	r2, sp, #8
    e194:	0021      	movs	r1, r4
    e196:	0030      	movs	r0, r6
    e198:	f000 fbe0 	bl	e95c <__swhatbuf_r>
    e19c:	89a3      	ldrh	r3, [r4, #12]
    e19e:	4318      	orrs	r0, r3
    e1a0:	81a0      	strh	r0, [r4, #12]
    e1a2:	2d00      	cmp	r5, #0
    e1a4:	d124      	bne.n	e1f0 <setvbuf+0xdc>
    e1a6:	9d02      	ldr	r5, [sp, #8]
    e1a8:	0028      	movs	r0, r5
    e1aa:	f7ff fe1f 	bl	ddec <malloc>
    e1ae:	9501      	str	r5, [sp, #4]
    e1b0:	1e07      	subs	r7, r0, #0
    e1b2:	d142      	bne.n	e23a <setvbuf+0x126>
    e1b4:	9b02      	ldr	r3, [sp, #8]
    e1b6:	9301      	str	r3, [sp, #4]
    e1b8:	42ab      	cmp	r3, r5
    e1ba:	d139      	bne.n	e230 <setvbuf+0x11c>
    e1bc:	2001      	movs	r0, #1
    e1be:	4240      	negs	r0, r0
    e1c0:	2302      	movs	r3, #2
    e1c2:	89a2      	ldrh	r2, [r4, #12]
    e1c4:	4313      	orrs	r3, r2
    e1c6:	81a3      	strh	r3, [r4, #12]
    e1c8:	2300      	movs	r3, #0
    e1ca:	60a3      	str	r3, [r4, #8]
    e1cc:	0023      	movs	r3, r4
    e1ce:	3347      	adds	r3, #71	; 0x47
    e1d0:	6023      	str	r3, [r4, #0]
    e1d2:	6123      	str	r3, [r4, #16]
    e1d4:	2301      	movs	r3, #1
    e1d6:	6163      	str	r3, [r4, #20]
    e1d8:	b005      	add	sp, #20
    e1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e1dc:	4b21      	ldr	r3, [pc, #132]	; (e264 <setvbuf+0x150>)
    e1de:	429c      	cmp	r4, r3
    e1e0:	d101      	bne.n	e1e6 <setvbuf+0xd2>
    e1e2:	68b4      	ldr	r4, [r6, #8]
    e1e4:	e7aa      	b.n	e13c <setvbuf+0x28>
    e1e6:	4b20      	ldr	r3, [pc, #128]	; (e268 <setvbuf+0x154>)
    e1e8:	429c      	cmp	r4, r3
    e1ea:	d1a7      	bne.n	e13c <setvbuf+0x28>
    e1ec:	68f4      	ldr	r4, [r6, #12]
    e1ee:	e7a5      	b.n	e13c <setvbuf+0x28>
    e1f0:	2f00      	cmp	r7, #0
    e1f2:	d0d9      	beq.n	e1a8 <setvbuf+0x94>
    e1f4:	69b3      	ldr	r3, [r6, #24]
    e1f6:	2b00      	cmp	r3, #0
    e1f8:	d102      	bne.n	e200 <setvbuf+0xec>
    e1fa:	0030      	movs	r0, r6
    e1fc:	f000 fb16 	bl	e82c <__sinit>
    e200:	9b00      	ldr	r3, [sp, #0]
    e202:	2b01      	cmp	r3, #1
    e204:	d103      	bne.n	e20e <setvbuf+0xfa>
    e206:	89a3      	ldrh	r3, [r4, #12]
    e208:	9a00      	ldr	r2, [sp, #0]
    e20a:	431a      	orrs	r2, r3
    e20c:	81a2      	strh	r2, [r4, #12]
    e20e:	2008      	movs	r0, #8
    e210:	89a3      	ldrh	r3, [r4, #12]
    e212:	6027      	str	r7, [r4, #0]
    e214:	6127      	str	r7, [r4, #16]
    e216:	6165      	str	r5, [r4, #20]
    e218:	4018      	ands	r0, r3
    e21a:	d018      	beq.n	e24e <setvbuf+0x13a>
    e21c:	2001      	movs	r0, #1
    e21e:	4018      	ands	r0, r3
    e220:	2300      	movs	r3, #0
    e222:	4298      	cmp	r0, r3
    e224:	d011      	beq.n	e24a <setvbuf+0x136>
    e226:	426d      	negs	r5, r5
    e228:	60a3      	str	r3, [r4, #8]
    e22a:	61a5      	str	r5, [r4, #24]
    e22c:	0018      	movs	r0, r3
    e22e:	e7d3      	b.n	e1d8 <setvbuf+0xc4>
    e230:	9801      	ldr	r0, [sp, #4]
    e232:	f7ff fddb 	bl	ddec <malloc>
    e236:	1e07      	subs	r7, r0, #0
    e238:	d0c0      	beq.n	e1bc <setvbuf+0xa8>
    e23a:	2380      	movs	r3, #128	; 0x80
    e23c:	89a2      	ldrh	r2, [r4, #12]
    e23e:	9d01      	ldr	r5, [sp, #4]
    e240:	4313      	orrs	r3, r2
    e242:	81a3      	strh	r3, [r4, #12]
    e244:	e7d6      	b.n	e1f4 <setvbuf+0xe0>
    e246:	2000      	movs	r0, #0
    e248:	e7ba      	b.n	e1c0 <setvbuf+0xac>
    e24a:	60a5      	str	r5, [r4, #8]
    e24c:	e7c4      	b.n	e1d8 <setvbuf+0xc4>
    e24e:	60a0      	str	r0, [r4, #8]
    e250:	e7c2      	b.n	e1d8 <setvbuf+0xc4>
    e252:	2001      	movs	r0, #1
    e254:	4240      	negs	r0, r0
    e256:	e7bf      	b.n	e1d8 <setvbuf+0xc4>
    e258:	20000018 	.word	0x20000018
    e25c:	00010d4c 	.word	0x00010d4c
    e260:	fffff35c 	.word	0xfffff35c
    e264:	00010d6c 	.word	0x00010d6c
    e268:	00010d2c 	.word	0x00010d2c

0000e26c <siprintf>:
    e26c:	b40e      	push	{r1, r2, r3}
    e26e:	b510      	push	{r4, lr}
    e270:	b09d      	sub	sp, #116	; 0x74
    e272:	a902      	add	r1, sp, #8
    e274:	9002      	str	r0, [sp, #8]
    e276:	6108      	str	r0, [r1, #16]
    e278:	480b      	ldr	r0, [pc, #44]	; (e2a8 <siprintf+0x3c>)
    e27a:	2482      	movs	r4, #130	; 0x82
    e27c:	6088      	str	r0, [r1, #8]
    e27e:	6148      	str	r0, [r1, #20]
    e280:	2001      	movs	r0, #1
    e282:	4240      	negs	r0, r0
    e284:	ab1f      	add	r3, sp, #124	; 0x7c
    e286:	81c8      	strh	r0, [r1, #14]
    e288:	4808      	ldr	r0, [pc, #32]	; (e2ac <siprintf+0x40>)
    e28a:	cb04      	ldmia	r3!, {r2}
    e28c:	00a4      	lsls	r4, r4, #2
    e28e:	6800      	ldr	r0, [r0, #0]
    e290:	9301      	str	r3, [sp, #4]
    e292:	818c      	strh	r4, [r1, #12]
    e294:	f000 fc3e 	bl	eb14 <_svfiprintf_r>
    e298:	2300      	movs	r3, #0
    e29a:	9a02      	ldr	r2, [sp, #8]
    e29c:	7013      	strb	r3, [r2, #0]
    e29e:	b01d      	add	sp, #116	; 0x74
    e2a0:	bc10      	pop	{r4}
    e2a2:	bc08      	pop	{r3}
    e2a4:	b003      	add	sp, #12
    e2a6:	4718      	bx	r3
    e2a8:	7fffffff 	.word	0x7fffffff
    e2ac:	20000018 	.word	0x20000018

0000e2b0 <strcmp>:
    e2b0:	7802      	ldrb	r2, [r0, #0]
    e2b2:	780b      	ldrb	r3, [r1, #0]
    e2b4:	2a00      	cmp	r2, #0
    e2b6:	d003      	beq.n	e2c0 <strcmp+0x10>
    e2b8:	3001      	adds	r0, #1
    e2ba:	3101      	adds	r1, #1
    e2bc:	429a      	cmp	r2, r3
    e2be:	d0f7      	beq.n	e2b0 <strcmp>
    e2c0:	1ad0      	subs	r0, r2, r3
    e2c2:	4770      	bx	lr

0000e2c4 <strcpy>:
    e2c4:	1c03      	adds	r3, r0, #0
    e2c6:	780a      	ldrb	r2, [r1, #0]
    e2c8:	3101      	adds	r1, #1
    e2ca:	701a      	strb	r2, [r3, #0]
    e2cc:	3301      	adds	r3, #1
    e2ce:	2a00      	cmp	r2, #0
    e2d0:	d1f9      	bne.n	e2c6 <strcpy+0x2>
    e2d2:	4770      	bx	lr

0000e2d4 <strdup>:
    e2d4:	b510      	push	{r4, lr}
    e2d6:	4b03      	ldr	r3, [pc, #12]	; (e2e4 <strdup+0x10>)
    e2d8:	0001      	movs	r1, r0
    e2da:	6818      	ldr	r0, [r3, #0]
    e2dc:	f000 f804 	bl	e2e8 <_strdup_r>
    e2e0:	bd10      	pop	{r4, pc}
    e2e2:	46c0      	nop			; (mov r8, r8)
    e2e4:	20000018 	.word	0x20000018

0000e2e8 <_strdup_r>:
    e2e8:	b570      	push	{r4, r5, r6, lr}
    e2ea:	0005      	movs	r5, r0
    e2ec:	0008      	movs	r0, r1
    e2ee:	000e      	movs	r6, r1
    e2f0:	f000 f80d 	bl	e30e <strlen>
    e2f4:	1c44      	adds	r4, r0, #1
    e2f6:	0021      	movs	r1, r4
    e2f8:	0028      	movs	r0, r5
    e2fa:	f7ff fdf9 	bl	def0 <_malloc_r>
    e2fe:	1e05      	subs	r5, r0, #0
    e300:	d003      	beq.n	e30a <_strdup_r+0x22>
    e302:	0022      	movs	r2, r4
    e304:	0031      	movs	r1, r6
    e306:	f7ff fd85 	bl	de14 <memcpy>
    e30a:	0028      	movs	r0, r5
    e30c:	bd70      	pop	{r4, r5, r6, pc}

0000e30e <strlen>:
    e30e:	2300      	movs	r3, #0
    e310:	5cc2      	ldrb	r2, [r0, r3]
    e312:	3301      	adds	r3, #1
    e314:	2a00      	cmp	r2, #0
    e316:	d1fb      	bne.n	e310 <strlen+0x2>
    e318:	1e58      	subs	r0, r3, #1
    e31a:	4770      	bx	lr

0000e31c <strncmp>:
    e31c:	2300      	movs	r3, #0
    e31e:	b530      	push	{r4, r5, lr}
    e320:	429a      	cmp	r2, r3
    e322:	d00a      	beq.n	e33a <strncmp+0x1e>
    e324:	3a01      	subs	r2, #1
    e326:	5cc4      	ldrb	r4, [r0, r3]
    e328:	5ccd      	ldrb	r5, [r1, r3]
    e32a:	42ac      	cmp	r4, r5
    e32c:	d104      	bne.n	e338 <strncmp+0x1c>
    e32e:	429a      	cmp	r2, r3
    e330:	d002      	beq.n	e338 <strncmp+0x1c>
    e332:	3301      	adds	r3, #1
    e334:	2c00      	cmp	r4, #0
    e336:	d1f6      	bne.n	e326 <strncmp+0xa>
    e338:	1b63      	subs	r3, r4, r5
    e33a:	0018      	movs	r0, r3
    e33c:	bd30      	pop	{r4, r5, pc}

0000e33e <strstr>:
    e33e:	b510      	push	{r4, lr}
    e340:	0002      	movs	r2, r0
    e342:	7800      	ldrb	r0, [r0, #0]
    e344:	2800      	cmp	r0, #0
    e346:	d104      	bne.n	e352 <strstr+0x14>
    e348:	7809      	ldrb	r1, [r1, #0]
    e34a:	2900      	cmp	r1, #0
    e34c:	d00d      	beq.n	e36a <strstr+0x2c>
    e34e:	bd10      	pop	{r4, pc}
    e350:	3201      	adds	r2, #1
    e352:	7810      	ldrb	r0, [r2, #0]
    e354:	2800      	cmp	r0, #0
    e356:	d0fa      	beq.n	e34e <strstr+0x10>
    e358:	2300      	movs	r3, #0
    e35a:	5cc8      	ldrb	r0, [r1, r3]
    e35c:	2800      	cmp	r0, #0
    e35e:	d004      	beq.n	e36a <strstr+0x2c>
    e360:	5cd4      	ldrb	r4, [r2, r3]
    e362:	4284      	cmp	r4, r0
    e364:	d1f4      	bne.n	e350 <strstr+0x12>
    e366:	3301      	adds	r3, #1
    e368:	e7f7      	b.n	e35a <strstr+0x1c>
    e36a:	0010      	movs	r0, r2
    e36c:	e7ef      	b.n	e34e <strstr+0x10>
	...

0000e370 <_strtol_l.isra.0>:
    e370:	b5f0      	push	{r4, r5, r6, r7, lr}
    e372:	001f      	movs	r7, r3
    e374:	000e      	movs	r6, r1
    e376:	b087      	sub	sp, #28
    e378:	9005      	str	r0, [sp, #20]
    e37a:	9103      	str	r1, [sp, #12]
    e37c:	9202      	str	r2, [sp, #8]
    e37e:	980c      	ldr	r0, [sp, #48]	; 0x30
    e380:	7834      	ldrb	r4, [r6, #0]
    e382:	f000 fae8 	bl	e956 <__locale_ctype_ptr_l>
    e386:	2208      	movs	r2, #8
    e388:	1900      	adds	r0, r0, r4
    e38a:	7843      	ldrb	r3, [r0, #1]
    e38c:	1c75      	adds	r5, r6, #1
    e38e:	4013      	ands	r3, r2
    e390:	d10c      	bne.n	e3ac <_strtol_l.isra.0+0x3c>
    e392:	2c2d      	cmp	r4, #45	; 0x2d
    e394:	d10c      	bne.n	e3b0 <_strtol_l.isra.0+0x40>
    e396:	3301      	adds	r3, #1
    e398:	782c      	ldrb	r4, [r5, #0]
    e39a:	9301      	str	r3, [sp, #4]
    e39c:	1cb5      	adds	r5, r6, #2
    e39e:	2f00      	cmp	r7, #0
    e3a0:	d00c      	beq.n	e3bc <_strtol_l.isra.0+0x4c>
    e3a2:	2f10      	cmp	r7, #16
    e3a4:	d114      	bne.n	e3d0 <_strtol_l.isra.0+0x60>
    e3a6:	2c30      	cmp	r4, #48	; 0x30
    e3a8:	d00a      	beq.n	e3c0 <_strtol_l.isra.0+0x50>
    e3aa:	e011      	b.n	e3d0 <_strtol_l.isra.0+0x60>
    e3ac:	002e      	movs	r6, r5
    e3ae:	e7e6      	b.n	e37e <_strtol_l.isra.0+0xe>
    e3b0:	9301      	str	r3, [sp, #4]
    e3b2:	2c2b      	cmp	r4, #43	; 0x2b
    e3b4:	d1f3      	bne.n	e39e <_strtol_l.isra.0+0x2e>
    e3b6:	782c      	ldrb	r4, [r5, #0]
    e3b8:	1cb5      	adds	r5, r6, #2
    e3ba:	e7f0      	b.n	e39e <_strtol_l.isra.0+0x2e>
    e3bc:	2c30      	cmp	r4, #48	; 0x30
    e3be:	d12f      	bne.n	e420 <_strtol_l.isra.0+0xb0>
    e3c0:	2220      	movs	r2, #32
    e3c2:	782b      	ldrb	r3, [r5, #0]
    e3c4:	4393      	bics	r3, r2
    e3c6:	2b58      	cmp	r3, #88	; 0x58
    e3c8:	d151      	bne.n	e46e <_strtol_l.isra.0+0xfe>
    e3ca:	2710      	movs	r7, #16
    e3cc:	786c      	ldrb	r4, [r5, #1]
    e3ce:	3502      	adds	r5, #2
    e3d0:	9b01      	ldr	r3, [sp, #4]
    e3d2:	4a29      	ldr	r2, [pc, #164]	; (e478 <_strtol_l.isra.0+0x108>)
    e3d4:	0039      	movs	r1, r7
    e3d6:	189e      	adds	r6, r3, r2
    e3d8:	0030      	movs	r0, r6
    e3da:	f7ff fbc3 	bl	db64 <__aeabi_uidivmod>
    e3de:	0030      	movs	r0, r6
    e3e0:	9104      	str	r1, [sp, #16]
    e3e2:	0039      	movs	r1, r7
    e3e4:	f7ff fb38 	bl	da58 <__udivsi3>
    e3e8:	2101      	movs	r1, #1
    e3ea:	2300      	movs	r3, #0
    e3ec:	4249      	negs	r1, r1
    e3ee:	0002      	movs	r2, r0
    e3f0:	468c      	mov	ip, r1
    e3f2:	0018      	movs	r0, r3
    e3f4:	0021      	movs	r1, r4
    e3f6:	3930      	subs	r1, #48	; 0x30
    e3f8:	2909      	cmp	r1, #9
    e3fa:	d813      	bhi.n	e424 <_strtol_l.isra.0+0xb4>
    e3fc:	000c      	movs	r4, r1
    e3fe:	42a7      	cmp	r7, r4
    e400:	dd1c      	ble.n	e43c <_strtol_l.isra.0+0xcc>
    e402:	1c59      	adds	r1, r3, #1
    e404:	d009      	beq.n	e41a <_strtol_l.isra.0+0xaa>
    e406:	4663      	mov	r3, ip
    e408:	4282      	cmp	r2, r0
    e40a:	d306      	bcc.n	e41a <_strtol_l.isra.0+0xaa>
    e40c:	d102      	bne.n	e414 <_strtol_l.isra.0+0xa4>
    e40e:	9904      	ldr	r1, [sp, #16]
    e410:	42a1      	cmp	r1, r4
    e412:	db02      	blt.n	e41a <_strtol_l.isra.0+0xaa>
    e414:	2301      	movs	r3, #1
    e416:	4378      	muls	r0, r7
    e418:	1820      	adds	r0, r4, r0
    e41a:	782c      	ldrb	r4, [r5, #0]
    e41c:	3501      	adds	r5, #1
    e41e:	e7e9      	b.n	e3f4 <_strtol_l.isra.0+0x84>
    e420:	270a      	movs	r7, #10
    e422:	e7d5      	b.n	e3d0 <_strtol_l.isra.0+0x60>
    e424:	0021      	movs	r1, r4
    e426:	3941      	subs	r1, #65	; 0x41
    e428:	2919      	cmp	r1, #25
    e42a:	d801      	bhi.n	e430 <_strtol_l.isra.0+0xc0>
    e42c:	3c37      	subs	r4, #55	; 0x37
    e42e:	e7e6      	b.n	e3fe <_strtol_l.isra.0+0x8e>
    e430:	0021      	movs	r1, r4
    e432:	3961      	subs	r1, #97	; 0x61
    e434:	2919      	cmp	r1, #25
    e436:	d801      	bhi.n	e43c <_strtol_l.isra.0+0xcc>
    e438:	3c57      	subs	r4, #87	; 0x57
    e43a:	e7e0      	b.n	e3fe <_strtol_l.isra.0+0x8e>
    e43c:	1c5a      	adds	r2, r3, #1
    e43e:	d108      	bne.n	e452 <_strtol_l.isra.0+0xe2>
    e440:	9a05      	ldr	r2, [sp, #20]
    e442:	3323      	adds	r3, #35	; 0x23
    e444:	6013      	str	r3, [r2, #0]
    e446:	9b02      	ldr	r3, [sp, #8]
    e448:	0030      	movs	r0, r6
    e44a:	2b00      	cmp	r3, #0
    e44c:	d10b      	bne.n	e466 <_strtol_l.isra.0+0xf6>
    e44e:	b007      	add	sp, #28
    e450:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e452:	9a01      	ldr	r2, [sp, #4]
    e454:	2a00      	cmp	r2, #0
    e456:	d000      	beq.n	e45a <_strtol_l.isra.0+0xea>
    e458:	4240      	negs	r0, r0
    e45a:	9a02      	ldr	r2, [sp, #8]
    e45c:	2a00      	cmp	r2, #0
    e45e:	d0f6      	beq.n	e44e <_strtol_l.isra.0+0xde>
    e460:	9a03      	ldr	r2, [sp, #12]
    e462:	2b00      	cmp	r3, #0
    e464:	d000      	beq.n	e468 <_strtol_l.isra.0+0xf8>
    e466:	1e6a      	subs	r2, r5, #1
    e468:	9b02      	ldr	r3, [sp, #8]
    e46a:	601a      	str	r2, [r3, #0]
    e46c:	e7ef      	b.n	e44e <_strtol_l.isra.0+0xde>
    e46e:	2430      	movs	r4, #48	; 0x30
    e470:	2f00      	cmp	r7, #0
    e472:	d1ad      	bne.n	e3d0 <_strtol_l.isra.0+0x60>
    e474:	3708      	adds	r7, #8
    e476:	e7ab      	b.n	e3d0 <_strtol_l.isra.0+0x60>
    e478:	7fffffff 	.word	0x7fffffff

0000e47c <strtol>:
    e47c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e47e:	0013      	movs	r3, r2
    e480:	4a06      	ldr	r2, [pc, #24]	; (e49c <strtol+0x20>)
    e482:	0005      	movs	r5, r0
    e484:	6810      	ldr	r0, [r2, #0]
    e486:	6a04      	ldr	r4, [r0, #32]
    e488:	2c00      	cmp	r4, #0
    e48a:	d100      	bne.n	e48e <strtol+0x12>
    e48c:	4c04      	ldr	r4, [pc, #16]	; (e4a0 <strtol+0x24>)
    e48e:	000a      	movs	r2, r1
    e490:	9400      	str	r4, [sp, #0]
    e492:	0029      	movs	r1, r5
    e494:	f7ff ff6c 	bl	e370 <_strtol_l.isra.0>
    e498:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e49a:	46c0      	nop			; (mov r8, r8)
    e49c:	20000018 	.word	0x20000018
    e4a0:	2000007c 	.word	0x2000007c

0000e4a4 <__swbuf_r>:
    e4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e4a6:	0005      	movs	r5, r0
    e4a8:	000e      	movs	r6, r1
    e4aa:	0014      	movs	r4, r2
    e4ac:	2800      	cmp	r0, #0
    e4ae:	d004      	beq.n	e4ba <__swbuf_r+0x16>
    e4b0:	6983      	ldr	r3, [r0, #24]
    e4b2:	2b00      	cmp	r3, #0
    e4b4:	d101      	bne.n	e4ba <__swbuf_r+0x16>
    e4b6:	f000 f9b9 	bl	e82c <__sinit>
    e4ba:	4b22      	ldr	r3, [pc, #136]	; (e544 <__swbuf_r+0xa0>)
    e4bc:	429c      	cmp	r4, r3
    e4be:	d12d      	bne.n	e51c <__swbuf_r+0x78>
    e4c0:	686c      	ldr	r4, [r5, #4]
    e4c2:	69a3      	ldr	r3, [r4, #24]
    e4c4:	60a3      	str	r3, [r4, #8]
    e4c6:	89a3      	ldrh	r3, [r4, #12]
    e4c8:	071b      	lsls	r3, r3, #28
    e4ca:	d531      	bpl.n	e530 <__swbuf_r+0x8c>
    e4cc:	6923      	ldr	r3, [r4, #16]
    e4ce:	2b00      	cmp	r3, #0
    e4d0:	d02e      	beq.n	e530 <__swbuf_r+0x8c>
    e4d2:	6823      	ldr	r3, [r4, #0]
    e4d4:	6922      	ldr	r2, [r4, #16]
    e4d6:	b2f7      	uxtb	r7, r6
    e4d8:	1a98      	subs	r0, r3, r2
    e4da:	6963      	ldr	r3, [r4, #20]
    e4dc:	b2f6      	uxtb	r6, r6
    e4de:	4298      	cmp	r0, r3
    e4e0:	db05      	blt.n	e4ee <__swbuf_r+0x4a>
    e4e2:	0021      	movs	r1, r4
    e4e4:	0028      	movs	r0, r5
    e4e6:	f000 f933 	bl	e750 <_fflush_r>
    e4ea:	2800      	cmp	r0, #0
    e4ec:	d126      	bne.n	e53c <__swbuf_r+0x98>
    e4ee:	68a3      	ldr	r3, [r4, #8]
    e4f0:	3001      	adds	r0, #1
    e4f2:	3b01      	subs	r3, #1
    e4f4:	60a3      	str	r3, [r4, #8]
    e4f6:	6823      	ldr	r3, [r4, #0]
    e4f8:	1c5a      	adds	r2, r3, #1
    e4fa:	6022      	str	r2, [r4, #0]
    e4fc:	701f      	strb	r7, [r3, #0]
    e4fe:	6963      	ldr	r3, [r4, #20]
    e500:	4298      	cmp	r0, r3
    e502:	d004      	beq.n	e50e <__swbuf_r+0x6a>
    e504:	89a3      	ldrh	r3, [r4, #12]
    e506:	07db      	lsls	r3, r3, #31
    e508:	d51a      	bpl.n	e540 <__swbuf_r+0x9c>
    e50a:	2e0a      	cmp	r6, #10
    e50c:	d118      	bne.n	e540 <__swbuf_r+0x9c>
    e50e:	0021      	movs	r1, r4
    e510:	0028      	movs	r0, r5
    e512:	f000 f91d 	bl	e750 <_fflush_r>
    e516:	2800      	cmp	r0, #0
    e518:	d012      	beq.n	e540 <__swbuf_r+0x9c>
    e51a:	e00f      	b.n	e53c <__swbuf_r+0x98>
    e51c:	4b0a      	ldr	r3, [pc, #40]	; (e548 <__swbuf_r+0xa4>)
    e51e:	429c      	cmp	r4, r3
    e520:	d101      	bne.n	e526 <__swbuf_r+0x82>
    e522:	68ac      	ldr	r4, [r5, #8]
    e524:	e7cd      	b.n	e4c2 <__swbuf_r+0x1e>
    e526:	4b09      	ldr	r3, [pc, #36]	; (e54c <__swbuf_r+0xa8>)
    e528:	429c      	cmp	r4, r3
    e52a:	d1ca      	bne.n	e4c2 <__swbuf_r+0x1e>
    e52c:	68ec      	ldr	r4, [r5, #12]
    e52e:	e7c8      	b.n	e4c2 <__swbuf_r+0x1e>
    e530:	0021      	movs	r1, r4
    e532:	0028      	movs	r0, r5
    e534:	f000 f80c 	bl	e550 <__swsetup_r>
    e538:	2800      	cmp	r0, #0
    e53a:	d0ca      	beq.n	e4d2 <__swbuf_r+0x2e>
    e53c:	2601      	movs	r6, #1
    e53e:	4276      	negs	r6, r6
    e540:	0030      	movs	r0, r6
    e542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e544:	00010d4c 	.word	0x00010d4c
    e548:	00010d6c 	.word	0x00010d6c
    e54c:	00010d2c 	.word	0x00010d2c

0000e550 <__swsetup_r>:
    e550:	4b36      	ldr	r3, [pc, #216]	; (e62c <__swsetup_r+0xdc>)
    e552:	b570      	push	{r4, r5, r6, lr}
    e554:	681d      	ldr	r5, [r3, #0]
    e556:	0006      	movs	r6, r0
    e558:	000c      	movs	r4, r1
    e55a:	2d00      	cmp	r5, #0
    e55c:	d005      	beq.n	e56a <__swsetup_r+0x1a>
    e55e:	69ab      	ldr	r3, [r5, #24]
    e560:	2b00      	cmp	r3, #0
    e562:	d102      	bne.n	e56a <__swsetup_r+0x1a>
    e564:	0028      	movs	r0, r5
    e566:	f000 f961 	bl	e82c <__sinit>
    e56a:	4b31      	ldr	r3, [pc, #196]	; (e630 <__swsetup_r+0xe0>)
    e56c:	429c      	cmp	r4, r3
    e56e:	d10f      	bne.n	e590 <__swsetup_r+0x40>
    e570:	686c      	ldr	r4, [r5, #4]
    e572:	230c      	movs	r3, #12
    e574:	5ee2      	ldrsh	r2, [r4, r3]
    e576:	b293      	uxth	r3, r2
    e578:	0719      	lsls	r1, r3, #28
    e57a:	d42d      	bmi.n	e5d8 <__swsetup_r+0x88>
    e57c:	06d9      	lsls	r1, r3, #27
    e57e:	d411      	bmi.n	e5a4 <__swsetup_r+0x54>
    e580:	2309      	movs	r3, #9
    e582:	2001      	movs	r0, #1
    e584:	6033      	str	r3, [r6, #0]
    e586:	3337      	adds	r3, #55	; 0x37
    e588:	4313      	orrs	r3, r2
    e58a:	81a3      	strh	r3, [r4, #12]
    e58c:	4240      	negs	r0, r0
    e58e:	bd70      	pop	{r4, r5, r6, pc}
    e590:	4b28      	ldr	r3, [pc, #160]	; (e634 <__swsetup_r+0xe4>)
    e592:	429c      	cmp	r4, r3
    e594:	d101      	bne.n	e59a <__swsetup_r+0x4a>
    e596:	68ac      	ldr	r4, [r5, #8]
    e598:	e7eb      	b.n	e572 <__swsetup_r+0x22>
    e59a:	4b27      	ldr	r3, [pc, #156]	; (e638 <__swsetup_r+0xe8>)
    e59c:	429c      	cmp	r4, r3
    e59e:	d1e8      	bne.n	e572 <__swsetup_r+0x22>
    e5a0:	68ec      	ldr	r4, [r5, #12]
    e5a2:	e7e6      	b.n	e572 <__swsetup_r+0x22>
    e5a4:	075b      	lsls	r3, r3, #29
    e5a6:	d513      	bpl.n	e5d0 <__swsetup_r+0x80>
    e5a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e5aa:	2900      	cmp	r1, #0
    e5ac:	d008      	beq.n	e5c0 <__swsetup_r+0x70>
    e5ae:	0023      	movs	r3, r4
    e5b0:	3344      	adds	r3, #68	; 0x44
    e5b2:	4299      	cmp	r1, r3
    e5b4:	d002      	beq.n	e5bc <__swsetup_r+0x6c>
    e5b6:	0030      	movs	r0, r6
    e5b8:	f7ff fc50 	bl	de5c <_free_r>
    e5bc:	2300      	movs	r3, #0
    e5be:	6363      	str	r3, [r4, #52]	; 0x34
    e5c0:	2224      	movs	r2, #36	; 0x24
    e5c2:	89a3      	ldrh	r3, [r4, #12]
    e5c4:	4393      	bics	r3, r2
    e5c6:	81a3      	strh	r3, [r4, #12]
    e5c8:	2300      	movs	r3, #0
    e5ca:	6063      	str	r3, [r4, #4]
    e5cc:	6923      	ldr	r3, [r4, #16]
    e5ce:	6023      	str	r3, [r4, #0]
    e5d0:	2308      	movs	r3, #8
    e5d2:	89a2      	ldrh	r2, [r4, #12]
    e5d4:	4313      	orrs	r3, r2
    e5d6:	81a3      	strh	r3, [r4, #12]
    e5d8:	6923      	ldr	r3, [r4, #16]
    e5da:	2b00      	cmp	r3, #0
    e5dc:	d10b      	bne.n	e5f6 <__swsetup_r+0xa6>
    e5de:	21a0      	movs	r1, #160	; 0xa0
    e5e0:	2280      	movs	r2, #128	; 0x80
    e5e2:	89a3      	ldrh	r3, [r4, #12]
    e5e4:	0089      	lsls	r1, r1, #2
    e5e6:	0092      	lsls	r2, r2, #2
    e5e8:	400b      	ands	r3, r1
    e5ea:	4293      	cmp	r3, r2
    e5ec:	d003      	beq.n	e5f6 <__swsetup_r+0xa6>
    e5ee:	0021      	movs	r1, r4
    e5f0:	0030      	movs	r0, r6
    e5f2:	f000 f9db 	bl	e9ac <__smakebuf_r>
    e5f6:	2301      	movs	r3, #1
    e5f8:	89a2      	ldrh	r2, [r4, #12]
    e5fa:	4013      	ands	r3, r2
    e5fc:	d011      	beq.n	e622 <__swsetup_r+0xd2>
    e5fe:	2300      	movs	r3, #0
    e600:	60a3      	str	r3, [r4, #8]
    e602:	6963      	ldr	r3, [r4, #20]
    e604:	425b      	negs	r3, r3
    e606:	61a3      	str	r3, [r4, #24]
    e608:	2000      	movs	r0, #0
    e60a:	6923      	ldr	r3, [r4, #16]
    e60c:	4283      	cmp	r3, r0
    e60e:	d1be      	bne.n	e58e <__swsetup_r+0x3e>
    e610:	230c      	movs	r3, #12
    e612:	5ee2      	ldrsh	r2, [r4, r3]
    e614:	0613      	lsls	r3, r2, #24
    e616:	d5ba      	bpl.n	e58e <__swsetup_r+0x3e>
    e618:	2340      	movs	r3, #64	; 0x40
    e61a:	4313      	orrs	r3, r2
    e61c:	81a3      	strh	r3, [r4, #12]
    e61e:	3801      	subs	r0, #1
    e620:	e7b5      	b.n	e58e <__swsetup_r+0x3e>
    e622:	0792      	lsls	r2, r2, #30
    e624:	d400      	bmi.n	e628 <__swsetup_r+0xd8>
    e626:	6963      	ldr	r3, [r4, #20]
    e628:	60a3      	str	r3, [r4, #8]
    e62a:	e7ed      	b.n	e608 <__swsetup_r+0xb8>
    e62c:	20000018 	.word	0x20000018
    e630:	00010d4c 	.word	0x00010d4c
    e634:	00010d6c 	.word	0x00010d6c
    e638:	00010d2c 	.word	0x00010d2c

0000e63c <__sflush_r>:
    e63c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e63e:	898a      	ldrh	r2, [r1, #12]
    e640:	0005      	movs	r5, r0
    e642:	000c      	movs	r4, r1
    e644:	0713      	lsls	r3, r2, #28
    e646:	d460      	bmi.n	e70a <__sflush_r+0xce>
    e648:	684b      	ldr	r3, [r1, #4]
    e64a:	2b00      	cmp	r3, #0
    e64c:	dc04      	bgt.n	e658 <__sflush_r+0x1c>
    e64e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    e650:	2b00      	cmp	r3, #0
    e652:	dc01      	bgt.n	e658 <__sflush_r+0x1c>
    e654:	2000      	movs	r0, #0
    e656:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e658:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    e65a:	2f00      	cmp	r7, #0
    e65c:	d0fa      	beq.n	e654 <__sflush_r+0x18>
    e65e:	2300      	movs	r3, #0
    e660:	682e      	ldr	r6, [r5, #0]
    e662:	602b      	str	r3, [r5, #0]
    e664:	2380      	movs	r3, #128	; 0x80
    e666:	015b      	lsls	r3, r3, #5
    e668:	401a      	ands	r2, r3
    e66a:	d034      	beq.n	e6d6 <__sflush_r+0x9a>
    e66c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    e66e:	89a3      	ldrh	r3, [r4, #12]
    e670:	075b      	lsls	r3, r3, #29
    e672:	d506      	bpl.n	e682 <__sflush_r+0x46>
    e674:	6863      	ldr	r3, [r4, #4]
    e676:	1ac0      	subs	r0, r0, r3
    e678:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e67a:	2b00      	cmp	r3, #0
    e67c:	d001      	beq.n	e682 <__sflush_r+0x46>
    e67e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    e680:	1ac0      	subs	r0, r0, r3
    e682:	0002      	movs	r2, r0
    e684:	6a21      	ldr	r1, [r4, #32]
    e686:	2300      	movs	r3, #0
    e688:	0028      	movs	r0, r5
    e68a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    e68c:	47b8      	blx	r7
    e68e:	89a1      	ldrh	r1, [r4, #12]
    e690:	1c43      	adds	r3, r0, #1
    e692:	d106      	bne.n	e6a2 <__sflush_r+0x66>
    e694:	682b      	ldr	r3, [r5, #0]
    e696:	2b1d      	cmp	r3, #29
    e698:	d831      	bhi.n	e6fe <__sflush_r+0xc2>
    e69a:	4a2c      	ldr	r2, [pc, #176]	; (e74c <__sflush_r+0x110>)
    e69c:	40da      	lsrs	r2, r3
    e69e:	07d3      	lsls	r3, r2, #31
    e6a0:	d52d      	bpl.n	e6fe <__sflush_r+0xc2>
    e6a2:	2300      	movs	r3, #0
    e6a4:	6063      	str	r3, [r4, #4]
    e6a6:	6923      	ldr	r3, [r4, #16]
    e6a8:	6023      	str	r3, [r4, #0]
    e6aa:	04cb      	lsls	r3, r1, #19
    e6ac:	d505      	bpl.n	e6ba <__sflush_r+0x7e>
    e6ae:	1c43      	adds	r3, r0, #1
    e6b0:	d102      	bne.n	e6b8 <__sflush_r+0x7c>
    e6b2:	682b      	ldr	r3, [r5, #0]
    e6b4:	2b00      	cmp	r3, #0
    e6b6:	d100      	bne.n	e6ba <__sflush_r+0x7e>
    e6b8:	6560      	str	r0, [r4, #84]	; 0x54
    e6ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e6bc:	602e      	str	r6, [r5, #0]
    e6be:	2900      	cmp	r1, #0
    e6c0:	d0c8      	beq.n	e654 <__sflush_r+0x18>
    e6c2:	0023      	movs	r3, r4
    e6c4:	3344      	adds	r3, #68	; 0x44
    e6c6:	4299      	cmp	r1, r3
    e6c8:	d002      	beq.n	e6d0 <__sflush_r+0x94>
    e6ca:	0028      	movs	r0, r5
    e6cc:	f7ff fbc6 	bl	de5c <_free_r>
    e6d0:	2000      	movs	r0, #0
    e6d2:	6360      	str	r0, [r4, #52]	; 0x34
    e6d4:	e7bf      	b.n	e656 <__sflush_r+0x1a>
    e6d6:	2301      	movs	r3, #1
    e6d8:	6a21      	ldr	r1, [r4, #32]
    e6da:	0028      	movs	r0, r5
    e6dc:	47b8      	blx	r7
    e6de:	1c43      	adds	r3, r0, #1
    e6e0:	d1c5      	bne.n	e66e <__sflush_r+0x32>
    e6e2:	682b      	ldr	r3, [r5, #0]
    e6e4:	2b00      	cmp	r3, #0
    e6e6:	d0c2      	beq.n	e66e <__sflush_r+0x32>
    e6e8:	2b1d      	cmp	r3, #29
    e6ea:	d001      	beq.n	e6f0 <__sflush_r+0xb4>
    e6ec:	2b16      	cmp	r3, #22
    e6ee:	d101      	bne.n	e6f4 <__sflush_r+0xb8>
    e6f0:	602e      	str	r6, [r5, #0]
    e6f2:	e7af      	b.n	e654 <__sflush_r+0x18>
    e6f4:	2340      	movs	r3, #64	; 0x40
    e6f6:	89a2      	ldrh	r2, [r4, #12]
    e6f8:	4313      	orrs	r3, r2
    e6fa:	81a3      	strh	r3, [r4, #12]
    e6fc:	e7ab      	b.n	e656 <__sflush_r+0x1a>
    e6fe:	2340      	movs	r3, #64	; 0x40
    e700:	430b      	orrs	r3, r1
    e702:	2001      	movs	r0, #1
    e704:	81a3      	strh	r3, [r4, #12]
    e706:	4240      	negs	r0, r0
    e708:	e7a5      	b.n	e656 <__sflush_r+0x1a>
    e70a:	690f      	ldr	r7, [r1, #16]
    e70c:	2f00      	cmp	r7, #0
    e70e:	d0a1      	beq.n	e654 <__sflush_r+0x18>
    e710:	680b      	ldr	r3, [r1, #0]
    e712:	600f      	str	r7, [r1, #0]
    e714:	1bdb      	subs	r3, r3, r7
    e716:	9301      	str	r3, [sp, #4]
    e718:	2300      	movs	r3, #0
    e71a:	0792      	lsls	r2, r2, #30
    e71c:	d100      	bne.n	e720 <__sflush_r+0xe4>
    e71e:	694b      	ldr	r3, [r1, #20]
    e720:	60a3      	str	r3, [r4, #8]
    e722:	9b01      	ldr	r3, [sp, #4]
    e724:	2b00      	cmp	r3, #0
    e726:	dc00      	bgt.n	e72a <__sflush_r+0xee>
    e728:	e794      	b.n	e654 <__sflush_r+0x18>
    e72a:	9b01      	ldr	r3, [sp, #4]
    e72c:	003a      	movs	r2, r7
    e72e:	6a21      	ldr	r1, [r4, #32]
    e730:	0028      	movs	r0, r5
    e732:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    e734:	47b0      	blx	r6
    e736:	2800      	cmp	r0, #0
    e738:	dc03      	bgt.n	e742 <__sflush_r+0x106>
    e73a:	2340      	movs	r3, #64	; 0x40
    e73c:	89a2      	ldrh	r2, [r4, #12]
    e73e:	4313      	orrs	r3, r2
    e740:	e7df      	b.n	e702 <__sflush_r+0xc6>
    e742:	9b01      	ldr	r3, [sp, #4]
    e744:	183f      	adds	r7, r7, r0
    e746:	1a1b      	subs	r3, r3, r0
    e748:	9301      	str	r3, [sp, #4]
    e74a:	e7ea      	b.n	e722 <__sflush_r+0xe6>
    e74c:	20400001 	.word	0x20400001

0000e750 <_fflush_r>:
    e750:	690b      	ldr	r3, [r1, #16]
    e752:	b570      	push	{r4, r5, r6, lr}
    e754:	0005      	movs	r5, r0
    e756:	000c      	movs	r4, r1
    e758:	2b00      	cmp	r3, #0
    e75a:	d101      	bne.n	e760 <_fflush_r+0x10>
    e75c:	2000      	movs	r0, #0
    e75e:	bd70      	pop	{r4, r5, r6, pc}
    e760:	2800      	cmp	r0, #0
    e762:	d004      	beq.n	e76e <_fflush_r+0x1e>
    e764:	6983      	ldr	r3, [r0, #24]
    e766:	2b00      	cmp	r3, #0
    e768:	d101      	bne.n	e76e <_fflush_r+0x1e>
    e76a:	f000 f85f 	bl	e82c <__sinit>
    e76e:	4b0b      	ldr	r3, [pc, #44]	; (e79c <_fflush_r+0x4c>)
    e770:	429c      	cmp	r4, r3
    e772:	d109      	bne.n	e788 <_fflush_r+0x38>
    e774:	686c      	ldr	r4, [r5, #4]
    e776:	220c      	movs	r2, #12
    e778:	5ea3      	ldrsh	r3, [r4, r2]
    e77a:	2b00      	cmp	r3, #0
    e77c:	d0ee      	beq.n	e75c <_fflush_r+0xc>
    e77e:	0021      	movs	r1, r4
    e780:	0028      	movs	r0, r5
    e782:	f7ff ff5b 	bl	e63c <__sflush_r>
    e786:	e7ea      	b.n	e75e <_fflush_r+0xe>
    e788:	4b05      	ldr	r3, [pc, #20]	; (e7a0 <_fflush_r+0x50>)
    e78a:	429c      	cmp	r4, r3
    e78c:	d101      	bne.n	e792 <_fflush_r+0x42>
    e78e:	68ac      	ldr	r4, [r5, #8]
    e790:	e7f1      	b.n	e776 <_fflush_r+0x26>
    e792:	4b04      	ldr	r3, [pc, #16]	; (e7a4 <_fflush_r+0x54>)
    e794:	429c      	cmp	r4, r3
    e796:	d1ee      	bne.n	e776 <_fflush_r+0x26>
    e798:	68ec      	ldr	r4, [r5, #12]
    e79a:	e7ec      	b.n	e776 <_fflush_r+0x26>
    e79c:	00010d4c 	.word	0x00010d4c
    e7a0:	00010d6c 	.word	0x00010d6c
    e7a4:	00010d2c 	.word	0x00010d2c

0000e7a8 <_cleanup_r>:
    e7a8:	b510      	push	{r4, lr}
    e7aa:	4902      	ldr	r1, [pc, #8]	; (e7b4 <_cleanup_r+0xc>)
    e7ac:	f000 f8b2 	bl	e914 <_fwalk_reent>
    e7b0:	bd10      	pop	{r4, pc}
    e7b2:	46c0      	nop			; (mov r8, r8)
    e7b4:	0000e751 	.word	0x0000e751

0000e7b8 <std.isra.0>:
    e7b8:	2300      	movs	r3, #0
    e7ba:	b510      	push	{r4, lr}
    e7bc:	0004      	movs	r4, r0
    e7be:	6003      	str	r3, [r0, #0]
    e7c0:	6043      	str	r3, [r0, #4]
    e7c2:	6083      	str	r3, [r0, #8]
    e7c4:	8181      	strh	r1, [r0, #12]
    e7c6:	6643      	str	r3, [r0, #100]	; 0x64
    e7c8:	81c2      	strh	r2, [r0, #14]
    e7ca:	6103      	str	r3, [r0, #16]
    e7cc:	6143      	str	r3, [r0, #20]
    e7ce:	6183      	str	r3, [r0, #24]
    e7d0:	0019      	movs	r1, r3
    e7d2:	2208      	movs	r2, #8
    e7d4:	305c      	adds	r0, #92	; 0x5c
    e7d6:	f7ff fb38 	bl	de4a <memset>
    e7da:	4b05      	ldr	r3, [pc, #20]	; (e7f0 <std.isra.0+0x38>)
    e7dc:	6224      	str	r4, [r4, #32]
    e7de:	6263      	str	r3, [r4, #36]	; 0x24
    e7e0:	4b04      	ldr	r3, [pc, #16]	; (e7f4 <std.isra.0+0x3c>)
    e7e2:	62a3      	str	r3, [r4, #40]	; 0x28
    e7e4:	4b04      	ldr	r3, [pc, #16]	; (e7f8 <std.isra.0+0x40>)
    e7e6:	62e3      	str	r3, [r4, #44]	; 0x2c
    e7e8:	4b04      	ldr	r3, [pc, #16]	; (e7fc <std.isra.0+0x44>)
    e7ea:	6323      	str	r3, [r4, #48]	; 0x30
    e7ec:	bd10      	pop	{r4, pc}
    e7ee:	46c0      	nop			; (mov r8, r8)
    e7f0:	0000f321 	.word	0x0000f321
    e7f4:	0000f349 	.word	0x0000f349
    e7f8:	0000f381 	.word	0x0000f381
    e7fc:	0000f3ad 	.word	0x0000f3ad

0000e800 <__sfmoreglue>:
    e800:	b570      	push	{r4, r5, r6, lr}
    e802:	2568      	movs	r5, #104	; 0x68
    e804:	1e4a      	subs	r2, r1, #1
    e806:	4355      	muls	r5, r2
    e808:	000e      	movs	r6, r1
    e80a:	0029      	movs	r1, r5
    e80c:	3174      	adds	r1, #116	; 0x74
    e80e:	f7ff fb6f 	bl	def0 <_malloc_r>
    e812:	1e04      	subs	r4, r0, #0
    e814:	d008      	beq.n	e828 <__sfmoreglue+0x28>
    e816:	2100      	movs	r1, #0
    e818:	002a      	movs	r2, r5
    e81a:	6001      	str	r1, [r0, #0]
    e81c:	6046      	str	r6, [r0, #4]
    e81e:	300c      	adds	r0, #12
    e820:	60a0      	str	r0, [r4, #8]
    e822:	3268      	adds	r2, #104	; 0x68
    e824:	f7ff fb11 	bl	de4a <memset>
    e828:	0020      	movs	r0, r4
    e82a:	bd70      	pop	{r4, r5, r6, pc}

0000e82c <__sinit>:
    e82c:	6983      	ldr	r3, [r0, #24]
    e82e:	b513      	push	{r0, r1, r4, lr}
    e830:	0004      	movs	r4, r0
    e832:	2b00      	cmp	r3, #0
    e834:	d128      	bne.n	e888 <__sinit+0x5c>
    e836:	6483      	str	r3, [r0, #72]	; 0x48
    e838:	64c3      	str	r3, [r0, #76]	; 0x4c
    e83a:	6503      	str	r3, [r0, #80]	; 0x50
    e83c:	4b13      	ldr	r3, [pc, #76]	; (e88c <__sinit+0x60>)
    e83e:	4a14      	ldr	r2, [pc, #80]	; (e890 <__sinit+0x64>)
    e840:	681b      	ldr	r3, [r3, #0]
    e842:	6282      	str	r2, [r0, #40]	; 0x28
    e844:	9301      	str	r3, [sp, #4]
    e846:	4298      	cmp	r0, r3
    e848:	d101      	bne.n	e84e <__sinit+0x22>
    e84a:	2301      	movs	r3, #1
    e84c:	6183      	str	r3, [r0, #24]
    e84e:	0020      	movs	r0, r4
    e850:	f000 f820 	bl	e894 <__sfp>
    e854:	6060      	str	r0, [r4, #4]
    e856:	0020      	movs	r0, r4
    e858:	f000 f81c 	bl	e894 <__sfp>
    e85c:	60a0      	str	r0, [r4, #8]
    e85e:	0020      	movs	r0, r4
    e860:	f000 f818 	bl	e894 <__sfp>
    e864:	2200      	movs	r2, #0
    e866:	60e0      	str	r0, [r4, #12]
    e868:	2104      	movs	r1, #4
    e86a:	6860      	ldr	r0, [r4, #4]
    e86c:	f7ff ffa4 	bl	e7b8 <std.isra.0>
    e870:	2201      	movs	r2, #1
    e872:	2109      	movs	r1, #9
    e874:	68a0      	ldr	r0, [r4, #8]
    e876:	f7ff ff9f 	bl	e7b8 <std.isra.0>
    e87a:	2202      	movs	r2, #2
    e87c:	2112      	movs	r1, #18
    e87e:	68e0      	ldr	r0, [r4, #12]
    e880:	f7ff ff9a 	bl	e7b8 <std.isra.0>
    e884:	2301      	movs	r3, #1
    e886:	61a3      	str	r3, [r4, #24]
    e888:	bd13      	pop	{r0, r1, r4, pc}
    e88a:	46c0      	nop			; (mov r8, r8)
    e88c:	00010d28 	.word	0x00010d28
    e890:	0000e7a9 	.word	0x0000e7a9

0000e894 <__sfp>:
    e894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e896:	4b1e      	ldr	r3, [pc, #120]	; (e910 <__sfp+0x7c>)
    e898:	0007      	movs	r7, r0
    e89a:	681e      	ldr	r6, [r3, #0]
    e89c:	69b3      	ldr	r3, [r6, #24]
    e89e:	2b00      	cmp	r3, #0
    e8a0:	d102      	bne.n	e8a8 <__sfp+0x14>
    e8a2:	0030      	movs	r0, r6
    e8a4:	f7ff ffc2 	bl	e82c <__sinit>
    e8a8:	3648      	adds	r6, #72	; 0x48
    e8aa:	68b4      	ldr	r4, [r6, #8]
    e8ac:	6873      	ldr	r3, [r6, #4]
    e8ae:	3b01      	subs	r3, #1
    e8b0:	d504      	bpl.n	e8bc <__sfp+0x28>
    e8b2:	6833      	ldr	r3, [r6, #0]
    e8b4:	2b00      	cmp	r3, #0
    e8b6:	d007      	beq.n	e8c8 <__sfp+0x34>
    e8b8:	6836      	ldr	r6, [r6, #0]
    e8ba:	e7f6      	b.n	e8aa <__sfp+0x16>
    e8bc:	220c      	movs	r2, #12
    e8be:	5ea5      	ldrsh	r5, [r4, r2]
    e8c0:	2d00      	cmp	r5, #0
    e8c2:	d00d      	beq.n	e8e0 <__sfp+0x4c>
    e8c4:	3468      	adds	r4, #104	; 0x68
    e8c6:	e7f2      	b.n	e8ae <__sfp+0x1a>
    e8c8:	2104      	movs	r1, #4
    e8ca:	0038      	movs	r0, r7
    e8cc:	f7ff ff98 	bl	e800 <__sfmoreglue>
    e8d0:	6030      	str	r0, [r6, #0]
    e8d2:	2800      	cmp	r0, #0
    e8d4:	d1f0      	bne.n	e8b8 <__sfp+0x24>
    e8d6:	230c      	movs	r3, #12
    e8d8:	0004      	movs	r4, r0
    e8da:	603b      	str	r3, [r7, #0]
    e8dc:	0020      	movs	r0, r4
    e8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e8e0:	2301      	movs	r3, #1
    e8e2:	0020      	movs	r0, r4
    e8e4:	425b      	negs	r3, r3
    e8e6:	81e3      	strh	r3, [r4, #14]
    e8e8:	3302      	adds	r3, #2
    e8ea:	81a3      	strh	r3, [r4, #12]
    e8ec:	6665      	str	r5, [r4, #100]	; 0x64
    e8ee:	6025      	str	r5, [r4, #0]
    e8f0:	60a5      	str	r5, [r4, #8]
    e8f2:	6065      	str	r5, [r4, #4]
    e8f4:	6125      	str	r5, [r4, #16]
    e8f6:	6165      	str	r5, [r4, #20]
    e8f8:	61a5      	str	r5, [r4, #24]
    e8fa:	2208      	movs	r2, #8
    e8fc:	0029      	movs	r1, r5
    e8fe:	305c      	adds	r0, #92	; 0x5c
    e900:	f7ff faa3 	bl	de4a <memset>
    e904:	6365      	str	r5, [r4, #52]	; 0x34
    e906:	63a5      	str	r5, [r4, #56]	; 0x38
    e908:	64a5      	str	r5, [r4, #72]	; 0x48
    e90a:	64e5      	str	r5, [r4, #76]	; 0x4c
    e90c:	e7e6      	b.n	e8dc <__sfp+0x48>
    e90e:	46c0      	nop			; (mov r8, r8)
    e910:	00010d28 	.word	0x00010d28

0000e914 <_fwalk_reent>:
    e914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e916:	0004      	movs	r4, r0
    e918:	0007      	movs	r7, r0
    e91a:	2600      	movs	r6, #0
    e91c:	9101      	str	r1, [sp, #4]
    e91e:	3448      	adds	r4, #72	; 0x48
    e920:	2c00      	cmp	r4, #0
    e922:	d101      	bne.n	e928 <_fwalk_reent+0x14>
    e924:	0030      	movs	r0, r6
    e926:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e928:	6863      	ldr	r3, [r4, #4]
    e92a:	68a5      	ldr	r5, [r4, #8]
    e92c:	9300      	str	r3, [sp, #0]
    e92e:	9b00      	ldr	r3, [sp, #0]
    e930:	3b01      	subs	r3, #1
    e932:	9300      	str	r3, [sp, #0]
    e934:	d501      	bpl.n	e93a <_fwalk_reent+0x26>
    e936:	6824      	ldr	r4, [r4, #0]
    e938:	e7f2      	b.n	e920 <_fwalk_reent+0xc>
    e93a:	89ab      	ldrh	r3, [r5, #12]
    e93c:	2b01      	cmp	r3, #1
    e93e:	d908      	bls.n	e952 <_fwalk_reent+0x3e>
    e940:	220e      	movs	r2, #14
    e942:	5eab      	ldrsh	r3, [r5, r2]
    e944:	3301      	adds	r3, #1
    e946:	d004      	beq.n	e952 <_fwalk_reent+0x3e>
    e948:	0029      	movs	r1, r5
    e94a:	0038      	movs	r0, r7
    e94c:	9b01      	ldr	r3, [sp, #4]
    e94e:	4798      	blx	r3
    e950:	4306      	orrs	r6, r0
    e952:	3568      	adds	r5, #104	; 0x68
    e954:	e7eb      	b.n	e92e <_fwalk_reent+0x1a>

0000e956 <__locale_ctype_ptr_l>:
    e956:	30ec      	adds	r0, #236	; 0xec
    e958:	6800      	ldr	r0, [r0, #0]
    e95a:	4770      	bx	lr

0000e95c <__swhatbuf_r>:
    e95c:	b570      	push	{r4, r5, r6, lr}
    e95e:	000e      	movs	r6, r1
    e960:	001d      	movs	r5, r3
    e962:	230e      	movs	r3, #14
    e964:	5ec9      	ldrsh	r1, [r1, r3]
    e966:	b090      	sub	sp, #64	; 0x40
    e968:	0014      	movs	r4, r2
    e96a:	2900      	cmp	r1, #0
    e96c:	da07      	bge.n	e97e <__swhatbuf_r+0x22>
    e96e:	2300      	movs	r3, #0
    e970:	602b      	str	r3, [r5, #0]
    e972:	89b3      	ldrh	r3, [r6, #12]
    e974:	061b      	lsls	r3, r3, #24
    e976:	d411      	bmi.n	e99c <__swhatbuf_r+0x40>
    e978:	2380      	movs	r3, #128	; 0x80
    e97a:	00db      	lsls	r3, r3, #3
    e97c:	e00f      	b.n	e99e <__swhatbuf_r+0x42>
    e97e:	aa01      	add	r2, sp, #4
    e980:	f000 fd4c 	bl	f41c <_fstat_r>
    e984:	2800      	cmp	r0, #0
    e986:	dbf2      	blt.n	e96e <__swhatbuf_r+0x12>
    e988:	22f0      	movs	r2, #240	; 0xf0
    e98a:	9b02      	ldr	r3, [sp, #8]
    e98c:	0212      	lsls	r2, r2, #8
    e98e:	4013      	ands	r3, r2
    e990:	4a05      	ldr	r2, [pc, #20]	; (e9a8 <__swhatbuf_r+0x4c>)
    e992:	189b      	adds	r3, r3, r2
    e994:	425a      	negs	r2, r3
    e996:	4153      	adcs	r3, r2
    e998:	602b      	str	r3, [r5, #0]
    e99a:	e7ed      	b.n	e978 <__swhatbuf_r+0x1c>
    e99c:	2340      	movs	r3, #64	; 0x40
    e99e:	2000      	movs	r0, #0
    e9a0:	6023      	str	r3, [r4, #0]
    e9a2:	b010      	add	sp, #64	; 0x40
    e9a4:	bd70      	pop	{r4, r5, r6, pc}
    e9a6:	46c0      	nop			; (mov r8, r8)
    e9a8:	ffffe000 	.word	0xffffe000

0000e9ac <__smakebuf_r>:
    e9ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e9ae:	2602      	movs	r6, #2
    e9b0:	898b      	ldrh	r3, [r1, #12]
    e9b2:	0005      	movs	r5, r0
    e9b4:	000c      	movs	r4, r1
    e9b6:	4233      	tst	r3, r6
    e9b8:	d006      	beq.n	e9c8 <__smakebuf_r+0x1c>
    e9ba:	0023      	movs	r3, r4
    e9bc:	3347      	adds	r3, #71	; 0x47
    e9be:	6023      	str	r3, [r4, #0]
    e9c0:	6123      	str	r3, [r4, #16]
    e9c2:	2301      	movs	r3, #1
    e9c4:	6163      	str	r3, [r4, #20]
    e9c6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    e9c8:	ab01      	add	r3, sp, #4
    e9ca:	466a      	mov	r2, sp
    e9cc:	f7ff ffc6 	bl	e95c <__swhatbuf_r>
    e9d0:	9900      	ldr	r1, [sp, #0]
    e9d2:	0007      	movs	r7, r0
    e9d4:	0028      	movs	r0, r5
    e9d6:	f7ff fa8b 	bl	def0 <_malloc_r>
    e9da:	2800      	cmp	r0, #0
    e9dc:	d106      	bne.n	e9ec <__smakebuf_r+0x40>
    e9de:	220c      	movs	r2, #12
    e9e0:	5ea3      	ldrsh	r3, [r4, r2]
    e9e2:	059a      	lsls	r2, r3, #22
    e9e4:	d4ef      	bmi.n	e9c6 <__smakebuf_r+0x1a>
    e9e6:	431e      	orrs	r6, r3
    e9e8:	81a6      	strh	r6, [r4, #12]
    e9ea:	e7e6      	b.n	e9ba <__smakebuf_r+0xe>
    e9ec:	4b0d      	ldr	r3, [pc, #52]	; (ea24 <__smakebuf_r+0x78>)
    e9ee:	62ab      	str	r3, [r5, #40]	; 0x28
    e9f0:	2380      	movs	r3, #128	; 0x80
    e9f2:	89a2      	ldrh	r2, [r4, #12]
    e9f4:	6020      	str	r0, [r4, #0]
    e9f6:	4313      	orrs	r3, r2
    e9f8:	81a3      	strh	r3, [r4, #12]
    e9fa:	9b00      	ldr	r3, [sp, #0]
    e9fc:	6120      	str	r0, [r4, #16]
    e9fe:	6163      	str	r3, [r4, #20]
    ea00:	9b01      	ldr	r3, [sp, #4]
    ea02:	2b00      	cmp	r3, #0
    ea04:	d00a      	beq.n	ea1c <__smakebuf_r+0x70>
    ea06:	230e      	movs	r3, #14
    ea08:	5ee1      	ldrsh	r1, [r4, r3]
    ea0a:	0028      	movs	r0, r5
    ea0c:	f000 fd18 	bl	f440 <_isatty_r>
    ea10:	2800      	cmp	r0, #0
    ea12:	d003      	beq.n	ea1c <__smakebuf_r+0x70>
    ea14:	2301      	movs	r3, #1
    ea16:	89a2      	ldrh	r2, [r4, #12]
    ea18:	4313      	orrs	r3, r2
    ea1a:	81a3      	strh	r3, [r4, #12]
    ea1c:	89a0      	ldrh	r0, [r4, #12]
    ea1e:	4338      	orrs	r0, r7
    ea20:	81a0      	strh	r0, [r4, #12]
    ea22:	e7d0      	b.n	e9c6 <__smakebuf_r+0x1a>
    ea24:	0000e7a9 	.word	0x0000e7a9

0000ea28 <__ascii_mbtowc>:
    ea28:	b082      	sub	sp, #8
    ea2a:	2900      	cmp	r1, #0
    ea2c:	d100      	bne.n	ea30 <__ascii_mbtowc+0x8>
    ea2e:	a901      	add	r1, sp, #4
    ea30:	1e10      	subs	r0, r2, #0
    ea32:	d006      	beq.n	ea42 <__ascii_mbtowc+0x1a>
    ea34:	2b00      	cmp	r3, #0
    ea36:	d006      	beq.n	ea46 <__ascii_mbtowc+0x1e>
    ea38:	7813      	ldrb	r3, [r2, #0]
    ea3a:	600b      	str	r3, [r1, #0]
    ea3c:	7810      	ldrb	r0, [r2, #0]
    ea3e:	1e43      	subs	r3, r0, #1
    ea40:	4198      	sbcs	r0, r3
    ea42:	b002      	add	sp, #8
    ea44:	4770      	bx	lr
    ea46:	2002      	movs	r0, #2
    ea48:	4240      	negs	r0, r0
    ea4a:	e7fa      	b.n	ea42 <__ascii_mbtowc+0x1a>

0000ea4c <__malloc_lock>:
    ea4c:	4770      	bx	lr

0000ea4e <__malloc_unlock>:
    ea4e:	4770      	bx	lr

0000ea50 <__ssputs_r>:
    ea50:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea52:	688e      	ldr	r6, [r1, #8]
    ea54:	b085      	sub	sp, #20
    ea56:	0007      	movs	r7, r0
    ea58:	000c      	movs	r4, r1
    ea5a:	9203      	str	r2, [sp, #12]
    ea5c:	9301      	str	r3, [sp, #4]
    ea5e:	429e      	cmp	r6, r3
    ea60:	d839      	bhi.n	ead6 <__ssputs_r+0x86>
    ea62:	2390      	movs	r3, #144	; 0x90
    ea64:	898a      	ldrh	r2, [r1, #12]
    ea66:	00db      	lsls	r3, r3, #3
    ea68:	421a      	tst	r2, r3
    ea6a:	d034      	beq.n	ead6 <__ssputs_r+0x86>
    ea6c:	2503      	movs	r5, #3
    ea6e:	6909      	ldr	r1, [r1, #16]
    ea70:	6823      	ldr	r3, [r4, #0]
    ea72:	1a5b      	subs	r3, r3, r1
    ea74:	9302      	str	r3, [sp, #8]
    ea76:	6963      	ldr	r3, [r4, #20]
    ea78:	9802      	ldr	r0, [sp, #8]
    ea7a:	435d      	muls	r5, r3
    ea7c:	0feb      	lsrs	r3, r5, #31
    ea7e:	195d      	adds	r5, r3, r5
    ea80:	9b01      	ldr	r3, [sp, #4]
    ea82:	106d      	asrs	r5, r5, #1
    ea84:	3301      	adds	r3, #1
    ea86:	181b      	adds	r3, r3, r0
    ea88:	42ab      	cmp	r3, r5
    ea8a:	d900      	bls.n	ea8e <__ssputs_r+0x3e>
    ea8c:	001d      	movs	r5, r3
    ea8e:	0553      	lsls	r3, r2, #21
    ea90:	d532      	bpl.n	eaf8 <__ssputs_r+0xa8>
    ea92:	0029      	movs	r1, r5
    ea94:	0038      	movs	r0, r7
    ea96:	f7ff fa2b 	bl	def0 <_malloc_r>
    ea9a:	1e06      	subs	r6, r0, #0
    ea9c:	d109      	bne.n	eab2 <__ssputs_r+0x62>
    ea9e:	230c      	movs	r3, #12
    eaa0:	603b      	str	r3, [r7, #0]
    eaa2:	2340      	movs	r3, #64	; 0x40
    eaa4:	2001      	movs	r0, #1
    eaa6:	89a2      	ldrh	r2, [r4, #12]
    eaa8:	4240      	negs	r0, r0
    eaaa:	4313      	orrs	r3, r2
    eaac:	81a3      	strh	r3, [r4, #12]
    eaae:	b005      	add	sp, #20
    eab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eab2:	9a02      	ldr	r2, [sp, #8]
    eab4:	6921      	ldr	r1, [r4, #16]
    eab6:	f7ff f9ad 	bl	de14 <memcpy>
    eaba:	89a3      	ldrh	r3, [r4, #12]
    eabc:	4a14      	ldr	r2, [pc, #80]	; (eb10 <__ssputs_r+0xc0>)
    eabe:	401a      	ands	r2, r3
    eac0:	2380      	movs	r3, #128	; 0x80
    eac2:	4313      	orrs	r3, r2
    eac4:	81a3      	strh	r3, [r4, #12]
    eac6:	9b02      	ldr	r3, [sp, #8]
    eac8:	6126      	str	r6, [r4, #16]
    eaca:	18f6      	adds	r6, r6, r3
    eacc:	6026      	str	r6, [r4, #0]
    eace:	6165      	str	r5, [r4, #20]
    ead0:	9e01      	ldr	r6, [sp, #4]
    ead2:	1aed      	subs	r5, r5, r3
    ead4:	60a5      	str	r5, [r4, #8]
    ead6:	9b01      	ldr	r3, [sp, #4]
    ead8:	42b3      	cmp	r3, r6
    eada:	d200      	bcs.n	eade <__ssputs_r+0x8e>
    eadc:	001e      	movs	r6, r3
    eade:	0032      	movs	r2, r6
    eae0:	9903      	ldr	r1, [sp, #12]
    eae2:	6820      	ldr	r0, [r4, #0]
    eae4:	f7ff f99f 	bl	de26 <memmove>
    eae8:	68a3      	ldr	r3, [r4, #8]
    eaea:	2000      	movs	r0, #0
    eaec:	1b9b      	subs	r3, r3, r6
    eaee:	60a3      	str	r3, [r4, #8]
    eaf0:	6823      	ldr	r3, [r4, #0]
    eaf2:	199e      	adds	r6, r3, r6
    eaf4:	6026      	str	r6, [r4, #0]
    eaf6:	e7da      	b.n	eaae <__ssputs_r+0x5e>
    eaf8:	002a      	movs	r2, r5
    eafa:	0038      	movs	r0, r7
    eafc:	f000 fcd1 	bl	f4a2 <_realloc_r>
    eb00:	1e06      	subs	r6, r0, #0
    eb02:	d1e0      	bne.n	eac6 <__ssputs_r+0x76>
    eb04:	6921      	ldr	r1, [r4, #16]
    eb06:	0038      	movs	r0, r7
    eb08:	f7ff f9a8 	bl	de5c <_free_r>
    eb0c:	e7c7      	b.n	ea9e <__ssputs_r+0x4e>
    eb0e:	46c0      	nop			; (mov r8, r8)
    eb10:	fffffb7f 	.word	0xfffffb7f

0000eb14 <_svfiprintf_r>:
    eb14:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb16:	b09f      	sub	sp, #124	; 0x7c
    eb18:	9002      	str	r0, [sp, #8]
    eb1a:	9305      	str	r3, [sp, #20]
    eb1c:	898b      	ldrh	r3, [r1, #12]
    eb1e:	000f      	movs	r7, r1
    eb20:	0016      	movs	r6, r2
    eb22:	061b      	lsls	r3, r3, #24
    eb24:	d511      	bpl.n	eb4a <_svfiprintf_r+0x36>
    eb26:	690b      	ldr	r3, [r1, #16]
    eb28:	2b00      	cmp	r3, #0
    eb2a:	d10e      	bne.n	eb4a <_svfiprintf_r+0x36>
    eb2c:	2140      	movs	r1, #64	; 0x40
    eb2e:	f7ff f9df 	bl	def0 <_malloc_r>
    eb32:	6038      	str	r0, [r7, #0]
    eb34:	6138      	str	r0, [r7, #16]
    eb36:	2800      	cmp	r0, #0
    eb38:	d105      	bne.n	eb46 <_svfiprintf_r+0x32>
    eb3a:	230c      	movs	r3, #12
    eb3c:	9a02      	ldr	r2, [sp, #8]
    eb3e:	3801      	subs	r0, #1
    eb40:	6013      	str	r3, [r2, #0]
    eb42:	b01f      	add	sp, #124	; 0x7c
    eb44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb46:	2340      	movs	r3, #64	; 0x40
    eb48:	617b      	str	r3, [r7, #20]
    eb4a:	2300      	movs	r3, #0
    eb4c:	ad06      	add	r5, sp, #24
    eb4e:	616b      	str	r3, [r5, #20]
    eb50:	3320      	adds	r3, #32
    eb52:	766b      	strb	r3, [r5, #25]
    eb54:	3310      	adds	r3, #16
    eb56:	76ab      	strb	r3, [r5, #26]
    eb58:	0034      	movs	r4, r6
    eb5a:	7823      	ldrb	r3, [r4, #0]
    eb5c:	2b00      	cmp	r3, #0
    eb5e:	d147      	bne.n	ebf0 <_svfiprintf_r+0xdc>
    eb60:	1ba3      	subs	r3, r4, r6
    eb62:	9304      	str	r3, [sp, #16]
    eb64:	d00d      	beq.n	eb82 <_svfiprintf_r+0x6e>
    eb66:	1ba3      	subs	r3, r4, r6
    eb68:	0032      	movs	r2, r6
    eb6a:	0039      	movs	r1, r7
    eb6c:	9802      	ldr	r0, [sp, #8]
    eb6e:	f7ff ff6f 	bl	ea50 <__ssputs_r>
    eb72:	1c43      	adds	r3, r0, #1
    eb74:	d100      	bne.n	eb78 <_svfiprintf_r+0x64>
    eb76:	e0b5      	b.n	ece4 <_svfiprintf_r+0x1d0>
    eb78:	696a      	ldr	r2, [r5, #20]
    eb7a:	9b04      	ldr	r3, [sp, #16]
    eb7c:	4694      	mov	ip, r2
    eb7e:	4463      	add	r3, ip
    eb80:	616b      	str	r3, [r5, #20]
    eb82:	7823      	ldrb	r3, [r4, #0]
    eb84:	2b00      	cmp	r3, #0
    eb86:	d100      	bne.n	eb8a <_svfiprintf_r+0x76>
    eb88:	e0ac      	b.n	ece4 <_svfiprintf_r+0x1d0>
    eb8a:	2201      	movs	r2, #1
    eb8c:	2300      	movs	r3, #0
    eb8e:	4252      	negs	r2, r2
    eb90:	606a      	str	r2, [r5, #4]
    eb92:	a902      	add	r1, sp, #8
    eb94:	3254      	adds	r2, #84	; 0x54
    eb96:	1852      	adds	r2, r2, r1
    eb98:	3401      	adds	r4, #1
    eb9a:	602b      	str	r3, [r5, #0]
    eb9c:	60eb      	str	r3, [r5, #12]
    eb9e:	60ab      	str	r3, [r5, #8]
    eba0:	7013      	strb	r3, [r2, #0]
    eba2:	65ab      	str	r3, [r5, #88]	; 0x58
    eba4:	4e58      	ldr	r6, [pc, #352]	; (ed08 <_svfiprintf_r+0x1f4>)
    eba6:	2205      	movs	r2, #5
    eba8:	7821      	ldrb	r1, [r4, #0]
    ebaa:	0030      	movs	r0, r6
    ebac:	f000 fc6e 	bl	f48c <memchr>
    ebb0:	1c62      	adds	r2, r4, #1
    ebb2:	2800      	cmp	r0, #0
    ebb4:	d120      	bne.n	ebf8 <_svfiprintf_r+0xe4>
    ebb6:	6829      	ldr	r1, [r5, #0]
    ebb8:	06cb      	lsls	r3, r1, #27
    ebba:	d504      	bpl.n	ebc6 <_svfiprintf_r+0xb2>
    ebbc:	2353      	movs	r3, #83	; 0x53
    ebbe:	ae02      	add	r6, sp, #8
    ebc0:	3020      	adds	r0, #32
    ebc2:	199b      	adds	r3, r3, r6
    ebc4:	7018      	strb	r0, [r3, #0]
    ebc6:	070b      	lsls	r3, r1, #28
    ebc8:	d504      	bpl.n	ebd4 <_svfiprintf_r+0xc0>
    ebca:	2353      	movs	r3, #83	; 0x53
    ebcc:	202b      	movs	r0, #43	; 0x2b
    ebce:	ae02      	add	r6, sp, #8
    ebd0:	199b      	adds	r3, r3, r6
    ebd2:	7018      	strb	r0, [r3, #0]
    ebd4:	7823      	ldrb	r3, [r4, #0]
    ebd6:	2b2a      	cmp	r3, #42	; 0x2a
    ebd8:	d016      	beq.n	ec08 <_svfiprintf_r+0xf4>
    ebda:	2000      	movs	r0, #0
    ebdc:	210a      	movs	r1, #10
    ebde:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ebe0:	7822      	ldrb	r2, [r4, #0]
    ebe2:	3a30      	subs	r2, #48	; 0x30
    ebe4:	2a09      	cmp	r2, #9
    ebe6:	d955      	bls.n	ec94 <_svfiprintf_r+0x180>
    ebe8:	2800      	cmp	r0, #0
    ebea:	d015      	beq.n	ec18 <_svfiprintf_r+0x104>
    ebec:	9309      	str	r3, [sp, #36]	; 0x24
    ebee:	e013      	b.n	ec18 <_svfiprintf_r+0x104>
    ebf0:	2b25      	cmp	r3, #37	; 0x25
    ebf2:	d0b5      	beq.n	eb60 <_svfiprintf_r+0x4c>
    ebf4:	3401      	adds	r4, #1
    ebf6:	e7b0      	b.n	eb5a <_svfiprintf_r+0x46>
    ebf8:	2301      	movs	r3, #1
    ebfa:	1b80      	subs	r0, r0, r6
    ebfc:	4083      	lsls	r3, r0
    ebfe:	6829      	ldr	r1, [r5, #0]
    ec00:	0014      	movs	r4, r2
    ec02:	430b      	orrs	r3, r1
    ec04:	602b      	str	r3, [r5, #0]
    ec06:	e7cd      	b.n	eba4 <_svfiprintf_r+0x90>
    ec08:	9b05      	ldr	r3, [sp, #20]
    ec0a:	1d18      	adds	r0, r3, #4
    ec0c:	681b      	ldr	r3, [r3, #0]
    ec0e:	9005      	str	r0, [sp, #20]
    ec10:	2b00      	cmp	r3, #0
    ec12:	db39      	blt.n	ec88 <_svfiprintf_r+0x174>
    ec14:	9309      	str	r3, [sp, #36]	; 0x24
    ec16:	0014      	movs	r4, r2
    ec18:	7823      	ldrb	r3, [r4, #0]
    ec1a:	2b2e      	cmp	r3, #46	; 0x2e
    ec1c:	d10b      	bne.n	ec36 <_svfiprintf_r+0x122>
    ec1e:	7863      	ldrb	r3, [r4, #1]
    ec20:	1c62      	adds	r2, r4, #1
    ec22:	2b2a      	cmp	r3, #42	; 0x2a
    ec24:	d13e      	bne.n	eca4 <_svfiprintf_r+0x190>
    ec26:	9b05      	ldr	r3, [sp, #20]
    ec28:	3402      	adds	r4, #2
    ec2a:	1d1a      	adds	r2, r3, #4
    ec2c:	681b      	ldr	r3, [r3, #0]
    ec2e:	9205      	str	r2, [sp, #20]
    ec30:	2b00      	cmp	r3, #0
    ec32:	db34      	blt.n	ec9e <_svfiprintf_r+0x18a>
    ec34:	9307      	str	r3, [sp, #28]
    ec36:	4e35      	ldr	r6, [pc, #212]	; (ed0c <_svfiprintf_r+0x1f8>)
    ec38:	7821      	ldrb	r1, [r4, #0]
    ec3a:	2203      	movs	r2, #3
    ec3c:	0030      	movs	r0, r6
    ec3e:	f000 fc25 	bl	f48c <memchr>
    ec42:	2800      	cmp	r0, #0
    ec44:	d006      	beq.n	ec54 <_svfiprintf_r+0x140>
    ec46:	2340      	movs	r3, #64	; 0x40
    ec48:	1b80      	subs	r0, r0, r6
    ec4a:	4083      	lsls	r3, r0
    ec4c:	682a      	ldr	r2, [r5, #0]
    ec4e:	3401      	adds	r4, #1
    ec50:	4313      	orrs	r3, r2
    ec52:	602b      	str	r3, [r5, #0]
    ec54:	7821      	ldrb	r1, [r4, #0]
    ec56:	2206      	movs	r2, #6
    ec58:	482d      	ldr	r0, [pc, #180]	; (ed10 <_svfiprintf_r+0x1fc>)
    ec5a:	1c66      	adds	r6, r4, #1
    ec5c:	7629      	strb	r1, [r5, #24]
    ec5e:	f000 fc15 	bl	f48c <memchr>
    ec62:	2800      	cmp	r0, #0
    ec64:	d046      	beq.n	ecf4 <_svfiprintf_r+0x1e0>
    ec66:	4b2b      	ldr	r3, [pc, #172]	; (ed14 <_svfiprintf_r+0x200>)
    ec68:	2b00      	cmp	r3, #0
    ec6a:	d12f      	bne.n	eccc <_svfiprintf_r+0x1b8>
    ec6c:	6829      	ldr	r1, [r5, #0]
    ec6e:	9b05      	ldr	r3, [sp, #20]
    ec70:	2207      	movs	r2, #7
    ec72:	05c9      	lsls	r1, r1, #23
    ec74:	d528      	bpl.n	ecc8 <_svfiprintf_r+0x1b4>
    ec76:	189b      	adds	r3, r3, r2
    ec78:	4393      	bics	r3, r2
    ec7a:	3308      	adds	r3, #8
    ec7c:	9305      	str	r3, [sp, #20]
    ec7e:	696b      	ldr	r3, [r5, #20]
    ec80:	9a03      	ldr	r2, [sp, #12]
    ec82:	189b      	adds	r3, r3, r2
    ec84:	616b      	str	r3, [r5, #20]
    ec86:	e767      	b.n	eb58 <_svfiprintf_r+0x44>
    ec88:	425b      	negs	r3, r3
    ec8a:	60eb      	str	r3, [r5, #12]
    ec8c:	2302      	movs	r3, #2
    ec8e:	430b      	orrs	r3, r1
    ec90:	602b      	str	r3, [r5, #0]
    ec92:	e7c0      	b.n	ec16 <_svfiprintf_r+0x102>
    ec94:	434b      	muls	r3, r1
    ec96:	3401      	adds	r4, #1
    ec98:	189b      	adds	r3, r3, r2
    ec9a:	2001      	movs	r0, #1
    ec9c:	e7a0      	b.n	ebe0 <_svfiprintf_r+0xcc>
    ec9e:	2301      	movs	r3, #1
    eca0:	425b      	negs	r3, r3
    eca2:	e7c7      	b.n	ec34 <_svfiprintf_r+0x120>
    eca4:	2300      	movs	r3, #0
    eca6:	0014      	movs	r4, r2
    eca8:	200a      	movs	r0, #10
    ecaa:	001a      	movs	r2, r3
    ecac:	606b      	str	r3, [r5, #4]
    ecae:	7821      	ldrb	r1, [r4, #0]
    ecb0:	3930      	subs	r1, #48	; 0x30
    ecb2:	2909      	cmp	r1, #9
    ecb4:	d903      	bls.n	ecbe <_svfiprintf_r+0x1aa>
    ecb6:	2b00      	cmp	r3, #0
    ecb8:	d0bd      	beq.n	ec36 <_svfiprintf_r+0x122>
    ecba:	9207      	str	r2, [sp, #28]
    ecbc:	e7bb      	b.n	ec36 <_svfiprintf_r+0x122>
    ecbe:	4342      	muls	r2, r0
    ecc0:	3401      	adds	r4, #1
    ecc2:	1852      	adds	r2, r2, r1
    ecc4:	2301      	movs	r3, #1
    ecc6:	e7f2      	b.n	ecae <_svfiprintf_r+0x19a>
    ecc8:	3307      	adds	r3, #7
    ecca:	e7d5      	b.n	ec78 <_svfiprintf_r+0x164>
    eccc:	ab05      	add	r3, sp, #20
    ecce:	9300      	str	r3, [sp, #0]
    ecd0:	003a      	movs	r2, r7
    ecd2:	4b11      	ldr	r3, [pc, #68]	; (ed18 <_svfiprintf_r+0x204>)
    ecd4:	0029      	movs	r1, r5
    ecd6:	9802      	ldr	r0, [sp, #8]
    ecd8:	e000      	b.n	ecdc <_svfiprintf_r+0x1c8>
    ecda:	bf00      	nop
    ecdc:	9003      	str	r0, [sp, #12]
    ecde:	9b03      	ldr	r3, [sp, #12]
    ece0:	3301      	adds	r3, #1
    ece2:	d1cc      	bne.n	ec7e <_svfiprintf_r+0x16a>
    ece4:	89bb      	ldrh	r3, [r7, #12]
    ece6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ece8:	065b      	lsls	r3, r3, #25
    ecea:	d400      	bmi.n	ecee <_svfiprintf_r+0x1da>
    ecec:	e729      	b.n	eb42 <_svfiprintf_r+0x2e>
    ecee:	2001      	movs	r0, #1
    ecf0:	4240      	negs	r0, r0
    ecf2:	e726      	b.n	eb42 <_svfiprintf_r+0x2e>
    ecf4:	ab05      	add	r3, sp, #20
    ecf6:	9300      	str	r3, [sp, #0]
    ecf8:	003a      	movs	r2, r7
    ecfa:	4b07      	ldr	r3, [pc, #28]	; (ed18 <_svfiprintf_r+0x204>)
    ecfc:	0029      	movs	r1, r5
    ecfe:	9802      	ldr	r0, [sp, #8]
    ed00:	f000 f9be 	bl	f080 <_printf_i>
    ed04:	e7ea      	b.n	ecdc <_svfiprintf_r+0x1c8>
    ed06:	46c0      	nop			; (mov r8, r8)
    ed08:	00010d96 	.word	0x00010d96
    ed0c:	00010d9c 	.word	0x00010d9c
    ed10:	00010da0 	.word	0x00010da0
    ed14:	00000000 	.word	0x00000000
    ed18:	0000ea51 	.word	0x0000ea51

0000ed1c <__sfputc_r>:
    ed1c:	6893      	ldr	r3, [r2, #8]
    ed1e:	b510      	push	{r4, lr}
    ed20:	3b01      	subs	r3, #1
    ed22:	6093      	str	r3, [r2, #8]
    ed24:	2b00      	cmp	r3, #0
    ed26:	da05      	bge.n	ed34 <__sfputc_r+0x18>
    ed28:	6994      	ldr	r4, [r2, #24]
    ed2a:	42a3      	cmp	r3, r4
    ed2c:	db08      	blt.n	ed40 <__sfputc_r+0x24>
    ed2e:	b2cb      	uxtb	r3, r1
    ed30:	2b0a      	cmp	r3, #10
    ed32:	d005      	beq.n	ed40 <__sfputc_r+0x24>
    ed34:	6813      	ldr	r3, [r2, #0]
    ed36:	1c58      	adds	r0, r3, #1
    ed38:	6010      	str	r0, [r2, #0]
    ed3a:	7019      	strb	r1, [r3, #0]
    ed3c:	b2c8      	uxtb	r0, r1
    ed3e:	bd10      	pop	{r4, pc}
    ed40:	f7ff fbb0 	bl	e4a4 <__swbuf_r>
    ed44:	e7fb      	b.n	ed3e <__sfputc_r+0x22>

0000ed46 <__sfputs_r>:
    ed46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed48:	0006      	movs	r6, r0
    ed4a:	000f      	movs	r7, r1
    ed4c:	0014      	movs	r4, r2
    ed4e:	18d5      	adds	r5, r2, r3
    ed50:	42ac      	cmp	r4, r5
    ed52:	d101      	bne.n	ed58 <__sfputs_r+0x12>
    ed54:	2000      	movs	r0, #0
    ed56:	e007      	b.n	ed68 <__sfputs_r+0x22>
    ed58:	7821      	ldrb	r1, [r4, #0]
    ed5a:	003a      	movs	r2, r7
    ed5c:	0030      	movs	r0, r6
    ed5e:	f7ff ffdd 	bl	ed1c <__sfputc_r>
    ed62:	3401      	adds	r4, #1
    ed64:	1c43      	adds	r3, r0, #1
    ed66:	d1f3      	bne.n	ed50 <__sfputs_r+0xa>
    ed68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000ed6c <_vfiprintf_r>:
    ed6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed6e:	b09f      	sub	sp, #124	; 0x7c
    ed70:	0006      	movs	r6, r0
    ed72:	000f      	movs	r7, r1
    ed74:	0014      	movs	r4, r2
    ed76:	9305      	str	r3, [sp, #20]
    ed78:	2800      	cmp	r0, #0
    ed7a:	d004      	beq.n	ed86 <_vfiprintf_r+0x1a>
    ed7c:	6983      	ldr	r3, [r0, #24]
    ed7e:	2b00      	cmp	r3, #0
    ed80:	d101      	bne.n	ed86 <_vfiprintf_r+0x1a>
    ed82:	f7ff fd53 	bl	e82c <__sinit>
    ed86:	4b7f      	ldr	r3, [pc, #508]	; (ef84 <_vfiprintf_r+0x218>)
    ed88:	429f      	cmp	r7, r3
    ed8a:	d15c      	bne.n	ee46 <_vfiprintf_r+0xda>
    ed8c:	6877      	ldr	r7, [r6, #4]
    ed8e:	89bb      	ldrh	r3, [r7, #12]
    ed90:	071b      	lsls	r3, r3, #28
    ed92:	d562      	bpl.n	ee5a <_vfiprintf_r+0xee>
    ed94:	693b      	ldr	r3, [r7, #16]
    ed96:	2b00      	cmp	r3, #0
    ed98:	d05f      	beq.n	ee5a <_vfiprintf_r+0xee>
    ed9a:	2300      	movs	r3, #0
    ed9c:	ad06      	add	r5, sp, #24
    ed9e:	616b      	str	r3, [r5, #20]
    eda0:	3320      	adds	r3, #32
    eda2:	766b      	strb	r3, [r5, #25]
    eda4:	3310      	adds	r3, #16
    eda6:	76ab      	strb	r3, [r5, #26]
    eda8:	9402      	str	r4, [sp, #8]
    edaa:	9c02      	ldr	r4, [sp, #8]
    edac:	7823      	ldrb	r3, [r4, #0]
    edae:	2b00      	cmp	r3, #0
    edb0:	d15d      	bne.n	ee6e <_vfiprintf_r+0x102>
    edb2:	9b02      	ldr	r3, [sp, #8]
    edb4:	1ae3      	subs	r3, r4, r3
    edb6:	9304      	str	r3, [sp, #16]
    edb8:	d00d      	beq.n	edd6 <_vfiprintf_r+0x6a>
    edba:	9b04      	ldr	r3, [sp, #16]
    edbc:	9a02      	ldr	r2, [sp, #8]
    edbe:	0039      	movs	r1, r7
    edc0:	0030      	movs	r0, r6
    edc2:	f7ff ffc0 	bl	ed46 <__sfputs_r>
    edc6:	1c43      	adds	r3, r0, #1
    edc8:	d100      	bne.n	edcc <_vfiprintf_r+0x60>
    edca:	e0cc      	b.n	ef66 <_vfiprintf_r+0x1fa>
    edcc:	696a      	ldr	r2, [r5, #20]
    edce:	9b04      	ldr	r3, [sp, #16]
    edd0:	4694      	mov	ip, r2
    edd2:	4463      	add	r3, ip
    edd4:	616b      	str	r3, [r5, #20]
    edd6:	7823      	ldrb	r3, [r4, #0]
    edd8:	2b00      	cmp	r3, #0
    edda:	d100      	bne.n	edde <_vfiprintf_r+0x72>
    eddc:	e0c3      	b.n	ef66 <_vfiprintf_r+0x1fa>
    edde:	2201      	movs	r2, #1
    ede0:	2300      	movs	r3, #0
    ede2:	4252      	negs	r2, r2
    ede4:	606a      	str	r2, [r5, #4]
    ede6:	a902      	add	r1, sp, #8
    ede8:	3254      	adds	r2, #84	; 0x54
    edea:	1852      	adds	r2, r2, r1
    edec:	3401      	adds	r4, #1
    edee:	602b      	str	r3, [r5, #0]
    edf0:	60eb      	str	r3, [r5, #12]
    edf2:	60ab      	str	r3, [r5, #8]
    edf4:	7013      	strb	r3, [r2, #0]
    edf6:	65ab      	str	r3, [r5, #88]	; 0x58
    edf8:	7821      	ldrb	r1, [r4, #0]
    edfa:	2205      	movs	r2, #5
    edfc:	4862      	ldr	r0, [pc, #392]	; (ef88 <_vfiprintf_r+0x21c>)
    edfe:	f000 fb45 	bl	f48c <memchr>
    ee02:	1c63      	adds	r3, r4, #1
    ee04:	469c      	mov	ip, r3
    ee06:	2800      	cmp	r0, #0
    ee08:	d135      	bne.n	ee76 <_vfiprintf_r+0x10a>
    ee0a:	6829      	ldr	r1, [r5, #0]
    ee0c:	06cb      	lsls	r3, r1, #27
    ee0e:	d504      	bpl.n	ee1a <_vfiprintf_r+0xae>
    ee10:	2353      	movs	r3, #83	; 0x53
    ee12:	aa02      	add	r2, sp, #8
    ee14:	3020      	adds	r0, #32
    ee16:	189b      	adds	r3, r3, r2
    ee18:	7018      	strb	r0, [r3, #0]
    ee1a:	070b      	lsls	r3, r1, #28
    ee1c:	d504      	bpl.n	ee28 <_vfiprintf_r+0xbc>
    ee1e:	2353      	movs	r3, #83	; 0x53
    ee20:	202b      	movs	r0, #43	; 0x2b
    ee22:	aa02      	add	r2, sp, #8
    ee24:	189b      	adds	r3, r3, r2
    ee26:	7018      	strb	r0, [r3, #0]
    ee28:	7823      	ldrb	r3, [r4, #0]
    ee2a:	2b2a      	cmp	r3, #42	; 0x2a
    ee2c:	d02c      	beq.n	ee88 <_vfiprintf_r+0x11c>
    ee2e:	2000      	movs	r0, #0
    ee30:	210a      	movs	r1, #10
    ee32:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ee34:	7822      	ldrb	r2, [r4, #0]
    ee36:	3a30      	subs	r2, #48	; 0x30
    ee38:	2a09      	cmp	r2, #9
    ee3a:	d800      	bhi.n	ee3e <_vfiprintf_r+0xd2>
    ee3c:	e06b      	b.n	ef16 <_vfiprintf_r+0x1aa>
    ee3e:	2800      	cmp	r0, #0
    ee40:	d02a      	beq.n	ee98 <_vfiprintf_r+0x12c>
    ee42:	9309      	str	r3, [sp, #36]	; 0x24
    ee44:	e028      	b.n	ee98 <_vfiprintf_r+0x12c>
    ee46:	4b51      	ldr	r3, [pc, #324]	; (ef8c <_vfiprintf_r+0x220>)
    ee48:	429f      	cmp	r7, r3
    ee4a:	d101      	bne.n	ee50 <_vfiprintf_r+0xe4>
    ee4c:	68b7      	ldr	r7, [r6, #8]
    ee4e:	e79e      	b.n	ed8e <_vfiprintf_r+0x22>
    ee50:	4b4f      	ldr	r3, [pc, #316]	; (ef90 <_vfiprintf_r+0x224>)
    ee52:	429f      	cmp	r7, r3
    ee54:	d19b      	bne.n	ed8e <_vfiprintf_r+0x22>
    ee56:	68f7      	ldr	r7, [r6, #12]
    ee58:	e799      	b.n	ed8e <_vfiprintf_r+0x22>
    ee5a:	0039      	movs	r1, r7
    ee5c:	0030      	movs	r0, r6
    ee5e:	f7ff fb77 	bl	e550 <__swsetup_r>
    ee62:	2800      	cmp	r0, #0
    ee64:	d099      	beq.n	ed9a <_vfiprintf_r+0x2e>
    ee66:	2001      	movs	r0, #1
    ee68:	4240      	negs	r0, r0
    ee6a:	b01f      	add	sp, #124	; 0x7c
    ee6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ee6e:	2b25      	cmp	r3, #37	; 0x25
    ee70:	d09f      	beq.n	edb2 <_vfiprintf_r+0x46>
    ee72:	3401      	adds	r4, #1
    ee74:	e79a      	b.n	edac <_vfiprintf_r+0x40>
    ee76:	4b44      	ldr	r3, [pc, #272]	; (ef88 <_vfiprintf_r+0x21c>)
    ee78:	6829      	ldr	r1, [r5, #0]
    ee7a:	1ac0      	subs	r0, r0, r3
    ee7c:	2301      	movs	r3, #1
    ee7e:	4083      	lsls	r3, r0
    ee80:	430b      	orrs	r3, r1
    ee82:	602b      	str	r3, [r5, #0]
    ee84:	4664      	mov	r4, ip
    ee86:	e7b7      	b.n	edf8 <_vfiprintf_r+0x8c>
    ee88:	9b05      	ldr	r3, [sp, #20]
    ee8a:	1d18      	adds	r0, r3, #4
    ee8c:	681b      	ldr	r3, [r3, #0]
    ee8e:	9005      	str	r0, [sp, #20]
    ee90:	2b00      	cmp	r3, #0
    ee92:	db3a      	blt.n	ef0a <_vfiprintf_r+0x19e>
    ee94:	9309      	str	r3, [sp, #36]	; 0x24
    ee96:	4664      	mov	r4, ip
    ee98:	7823      	ldrb	r3, [r4, #0]
    ee9a:	2b2e      	cmp	r3, #46	; 0x2e
    ee9c:	d10b      	bne.n	eeb6 <_vfiprintf_r+0x14a>
    ee9e:	7863      	ldrb	r3, [r4, #1]
    eea0:	1c62      	adds	r2, r4, #1
    eea2:	2b2a      	cmp	r3, #42	; 0x2a
    eea4:	d13f      	bne.n	ef26 <_vfiprintf_r+0x1ba>
    eea6:	9b05      	ldr	r3, [sp, #20]
    eea8:	3402      	adds	r4, #2
    eeaa:	1d1a      	adds	r2, r3, #4
    eeac:	681b      	ldr	r3, [r3, #0]
    eeae:	9205      	str	r2, [sp, #20]
    eeb0:	2b00      	cmp	r3, #0
    eeb2:	db35      	blt.n	ef20 <_vfiprintf_r+0x1b4>
    eeb4:	9307      	str	r3, [sp, #28]
    eeb6:	7821      	ldrb	r1, [r4, #0]
    eeb8:	2203      	movs	r2, #3
    eeba:	4836      	ldr	r0, [pc, #216]	; (ef94 <_vfiprintf_r+0x228>)
    eebc:	f000 fae6 	bl	f48c <memchr>
    eec0:	2800      	cmp	r0, #0
    eec2:	d007      	beq.n	eed4 <_vfiprintf_r+0x168>
    eec4:	4b33      	ldr	r3, [pc, #204]	; (ef94 <_vfiprintf_r+0x228>)
    eec6:	682a      	ldr	r2, [r5, #0]
    eec8:	1ac0      	subs	r0, r0, r3
    eeca:	2340      	movs	r3, #64	; 0x40
    eecc:	4083      	lsls	r3, r0
    eece:	4313      	orrs	r3, r2
    eed0:	602b      	str	r3, [r5, #0]
    eed2:	3401      	adds	r4, #1
    eed4:	7821      	ldrb	r1, [r4, #0]
    eed6:	1c63      	adds	r3, r4, #1
    eed8:	2206      	movs	r2, #6
    eeda:	482f      	ldr	r0, [pc, #188]	; (ef98 <_vfiprintf_r+0x22c>)
    eedc:	9302      	str	r3, [sp, #8]
    eede:	7629      	strb	r1, [r5, #24]
    eee0:	f000 fad4 	bl	f48c <memchr>
    eee4:	2800      	cmp	r0, #0
    eee6:	d044      	beq.n	ef72 <_vfiprintf_r+0x206>
    eee8:	4b2c      	ldr	r3, [pc, #176]	; (ef9c <_vfiprintf_r+0x230>)
    eeea:	2b00      	cmp	r3, #0
    eeec:	d12f      	bne.n	ef4e <_vfiprintf_r+0x1e2>
    eeee:	6829      	ldr	r1, [r5, #0]
    eef0:	9b05      	ldr	r3, [sp, #20]
    eef2:	2207      	movs	r2, #7
    eef4:	05c9      	lsls	r1, r1, #23
    eef6:	d528      	bpl.n	ef4a <_vfiprintf_r+0x1de>
    eef8:	189b      	adds	r3, r3, r2
    eefa:	4393      	bics	r3, r2
    eefc:	3308      	adds	r3, #8
    eefe:	9305      	str	r3, [sp, #20]
    ef00:	696b      	ldr	r3, [r5, #20]
    ef02:	9a03      	ldr	r2, [sp, #12]
    ef04:	189b      	adds	r3, r3, r2
    ef06:	616b      	str	r3, [r5, #20]
    ef08:	e74f      	b.n	edaa <_vfiprintf_r+0x3e>
    ef0a:	425b      	negs	r3, r3
    ef0c:	60eb      	str	r3, [r5, #12]
    ef0e:	2302      	movs	r3, #2
    ef10:	430b      	orrs	r3, r1
    ef12:	602b      	str	r3, [r5, #0]
    ef14:	e7bf      	b.n	ee96 <_vfiprintf_r+0x12a>
    ef16:	434b      	muls	r3, r1
    ef18:	3401      	adds	r4, #1
    ef1a:	189b      	adds	r3, r3, r2
    ef1c:	2001      	movs	r0, #1
    ef1e:	e789      	b.n	ee34 <_vfiprintf_r+0xc8>
    ef20:	2301      	movs	r3, #1
    ef22:	425b      	negs	r3, r3
    ef24:	e7c6      	b.n	eeb4 <_vfiprintf_r+0x148>
    ef26:	2300      	movs	r3, #0
    ef28:	0014      	movs	r4, r2
    ef2a:	200a      	movs	r0, #10
    ef2c:	001a      	movs	r2, r3
    ef2e:	606b      	str	r3, [r5, #4]
    ef30:	7821      	ldrb	r1, [r4, #0]
    ef32:	3930      	subs	r1, #48	; 0x30
    ef34:	2909      	cmp	r1, #9
    ef36:	d903      	bls.n	ef40 <_vfiprintf_r+0x1d4>
    ef38:	2b00      	cmp	r3, #0
    ef3a:	d0bc      	beq.n	eeb6 <_vfiprintf_r+0x14a>
    ef3c:	9207      	str	r2, [sp, #28]
    ef3e:	e7ba      	b.n	eeb6 <_vfiprintf_r+0x14a>
    ef40:	4342      	muls	r2, r0
    ef42:	3401      	adds	r4, #1
    ef44:	1852      	adds	r2, r2, r1
    ef46:	2301      	movs	r3, #1
    ef48:	e7f2      	b.n	ef30 <_vfiprintf_r+0x1c4>
    ef4a:	3307      	adds	r3, #7
    ef4c:	e7d5      	b.n	eefa <_vfiprintf_r+0x18e>
    ef4e:	ab05      	add	r3, sp, #20
    ef50:	9300      	str	r3, [sp, #0]
    ef52:	003a      	movs	r2, r7
    ef54:	4b12      	ldr	r3, [pc, #72]	; (efa0 <_vfiprintf_r+0x234>)
    ef56:	0029      	movs	r1, r5
    ef58:	0030      	movs	r0, r6
    ef5a:	e000      	b.n	ef5e <_vfiprintf_r+0x1f2>
    ef5c:	bf00      	nop
    ef5e:	9003      	str	r0, [sp, #12]
    ef60:	9b03      	ldr	r3, [sp, #12]
    ef62:	3301      	adds	r3, #1
    ef64:	d1cc      	bne.n	ef00 <_vfiprintf_r+0x194>
    ef66:	89bb      	ldrh	r3, [r7, #12]
    ef68:	065b      	lsls	r3, r3, #25
    ef6a:	d500      	bpl.n	ef6e <_vfiprintf_r+0x202>
    ef6c:	e77b      	b.n	ee66 <_vfiprintf_r+0xfa>
    ef6e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ef70:	e77b      	b.n	ee6a <_vfiprintf_r+0xfe>
    ef72:	ab05      	add	r3, sp, #20
    ef74:	9300      	str	r3, [sp, #0]
    ef76:	003a      	movs	r2, r7
    ef78:	4b09      	ldr	r3, [pc, #36]	; (efa0 <_vfiprintf_r+0x234>)
    ef7a:	0029      	movs	r1, r5
    ef7c:	0030      	movs	r0, r6
    ef7e:	f000 f87f 	bl	f080 <_printf_i>
    ef82:	e7ec      	b.n	ef5e <_vfiprintf_r+0x1f2>
    ef84:	00010d4c 	.word	0x00010d4c
    ef88:	00010d96 	.word	0x00010d96
    ef8c:	00010d6c 	.word	0x00010d6c
    ef90:	00010d2c 	.word	0x00010d2c
    ef94:	00010d9c 	.word	0x00010d9c
    ef98:	00010da0 	.word	0x00010da0
    ef9c:	00000000 	.word	0x00000000
    efa0:	0000ed47 	.word	0x0000ed47

0000efa4 <_printf_common>:
    efa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    efa6:	0015      	movs	r5, r2
    efa8:	9301      	str	r3, [sp, #4]
    efaa:	688a      	ldr	r2, [r1, #8]
    efac:	690b      	ldr	r3, [r1, #16]
    efae:	9000      	str	r0, [sp, #0]
    efb0:	000c      	movs	r4, r1
    efb2:	4293      	cmp	r3, r2
    efb4:	da00      	bge.n	efb8 <_printf_common+0x14>
    efb6:	0013      	movs	r3, r2
    efb8:	0022      	movs	r2, r4
    efba:	602b      	str	r3, [r5, #0]
    efbc:	3243      	adds	r2, #67	; 0x43
    efbe:	7812      	ldrb	r2, [r2, #0]
    efc0:	2a00      	cmp	r2, #0
    efc2:	d001      	beq.n	efc8 <_printf_common+0x24>
    efc4:	3301      	adds	r3, #1
    efc6:	602b      	str	r3, [r5, #0]
    efc8:	6823      	ldr	r3, [r4, #0]
    efca:	069b      	lsls	r3, r3, #26
    efcc:	d502      	bpl.n	efd4 <_printf_common+0x30>
    efce:	682b      	ldr	r3, [r5, #0]
    efd0:	3302      	adds	r3, #2
    efd2:	602b      	str	r3, [r5, #0]
    efd4:	2706      	movs	r7, #6
    efd6:	6823      	ldr	r3, [r4, #0]
    efd8:	401f      	ands	r7, r3
    efda:	d027      	beq.n	f02c <_printf_common+0x88>
    efdc:	0023      	movs	r3, r4
    efde:	3343      	adds	r3, #67	; 0x43
    efe0:	781b      	ldrb	r3, [r3, #0]
    efe2:	1e5a      	subs	r2, r3, #1
    efe4:	4193      	sbcs	r3, r2
    efe6:	6822      	ldr	r2, [r4, #0]
    efe8:	0692      	lsls	r2, r2, #26
    efea:	d430      	bmi.n	f04e <_printf_common+0xaa>
    efec:	0022      	movs	r2, r4
    efee:	9901      	ldr	r1, [sp, #4]
    eff0:	3243      	adds	r2, #67	; 0x43
    eff2:	9800      	ldr	r0, [sp, #0]
    eff4:	9e08      	ldr	r6, [sp, #32]
    eff6:	47b0      	blx	r6
    eff8:	1c43      	adds	r3, r0, #1
    effa:	d025      	beq.n	f048 <_printf_common+0xa4>
    effc:	2306      	movs	r3, #6
    effe:	6820      	ldr	r0, [r4, #0]
    f000:	682a      	ldr	r2, [r5, #0]
    f002:	68e1      	ldr	r1, [r4, #12]
    f004:	4003      	ands	r3, r0
    f006:	2500      	movs	r5, #0
    f008:	2b04      	cmp	r3, #4
    f00a:	d103      	bne.n	f014 <_printf_common+0x70>
    f00c:	1a8d      	subs	r5, r1, r2
    f00e:	43eb      	mvns	r3, r5
    f010:	17db      	asrs	r3, r3, #31
    f012:	401d      	ands	r5, r3
    f014:	68a3      	ldr	r3, [r4, #8]
    f016:	6922      	ldr	r2, [r4, #16]
    f018:	4293      	cmp	r3, r2
    f01a:	dd01      	ble.n	f020 <_printf_common+0x7c>
    f01c:	1a9b      	subs	r3, r3, r2
    f01e:	18ed      	adds	r5, r5, r3
    f020:	2700      	movs	r7, #0
    f022:	42bd      	cmp	r5, r7
    f024:	d120      	bne.n	f068 <_printf_common+0xc4>
    f026:	2000      	movs	r0, #0
    f028:	e010      	b.n	f04c <_printf_common+0xa8>
    f02a:	3701      	adds	r7, #1
    f02c:	68e3      	ldr	r3, [r4, #12]
    f02e:	682a      	ldr	r2, [r5, #0]
    f030:	1a9b      	subs	r3, r3, r2
    f032:	429f      	cmp	r7, r3
    f034:	dad2      	bge.n	efdc <_printf_common+0x38>
    f036:	0022      	movs	r2, r4
    f038:	2301      	movs	r3, #1
    f03a:	3219      	adds	r2, #25
    f03c:	9901      	ldr	r1, [sp, #4]
    f03e:	9800      	ldr	r0, [sp, #0]
    f040:	9e08      	ldr	r6, [sp, #32]
    f042:	47b0      	blx	r6
    f044:	1c43      	adds	r3, r0, #1
    f046:	d1f0      	bne.n	f02a <_printf_common+0x86>
    f048:	2001      	movs	r0, #1
    f04a:	4240      	negs	r0, r0
    f04c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f04e:	2030      	movs	r0, #48	; 0x30
    f050:	18e1      	adds	r1, r4, r3
    f052:	3143      	adds	r1, #67	; 0x43
    f054:	7008      	strb	r0, [r1, #0]
    f056:	0021      	movs	r1, r4
    f058:	1c5a      	adds	r2, r3, #1
    f05a:	3145      	adds	r1, #69	; 0x45
    f05c:	7809      	ldrb	r1, [r1, #0]
    f05e:	18a2      	adds	r2, r4, r2
    f060:	3243      	adds	r2, #67	; 0x43
    f062:	3302      	adds	r3, #2
    f064:	7011      	strb	r1, [r2, #0]
    f066:	e7c1      	b.n	efec <_printf_common+0x48>
    f068:	0022      	movs	r2, r4
    f06a:	2301      	movs	r3, #1
    f06c:	321a      	adds	r2, #26
    f06e:	9901      	ldr	r1, [sp, #4]
    f070:	9800      	ldr	r0, [sp, #0]
    f072:	9e08      	ldr	r6, [sp, #32]
    f074:	47b0      	blx	r6
    f076:	1c43      	adds	r3, r0, #1
    f078:	d0e6      	beq.n	f048 <_printf_common+0xa4>
    f07a:	3701      	adds	r7, #1
    f07c:	e7d1      	b.n	f022 <_printf_common+0x7e>
	...

0000f080 <_printf_i>:
    f080:	b5f0      	push	{r4, r5, r6, r7, lr}
    f082:	b08b      	sub	sp, #44	; 0x2c
    f084:	9206      	str	r2, [sp, #24]
    f086:	000a      	movs	r2, r1
    f088:	3243      	adds	r2, #67	; 0x43
    f08a:	9307      	str	r3, [sp, #28]
    f08c:	9005      	str	r0, [sp, #20]
    f08e:	9204      	str	r2, [sp, #16]
    f090:	7e0a      	ldrb	r2, [r1, #24]
    f092:	000c      	movs	r4, r1
    f094:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f096:	2a6e      	cmp	r2, #110	; 0x6e
    f098:	d100      	bne.n	f09c <_printf_i+0x1c>
    f09a:	e08f      	b.n	f1bc <_printf_i+0x13c>
    f09c:	d817      	bhi.n	f0ce <_printf_i+0x4e>
    f09e:	2a63      	cmp	r2, #99	; 0x63
    f0a0:	d02c      	beq.n	f0fc <_printf_i+0x7c>
    f0a2:	d808      	bhi.n	f0b6 <_printf_i+0x36>
    f0a4:	2a00      	cmp	r2, #0
    f0a6:	d100      	bne.n	f0aa <_printf_i+0x2a>
    f0a8:	e099      	b.n	f1de <_printf_i+0x15e>
    f0aa:	2a58      	cmp	r2, #88	; 0x58
    f0ac:	d054      	beq.n	f158 <_printf_i+0xd8>
    f0ae:	0026      	movs	r6, r4
    f0b0:	3642      	adds	r6, #66	; 0x42
    f0b2:	7032      	strb	r2, [r6, #0]
    f0b4:	e029      	b.n	f10a <_printf_i+0x8a>
    f0b6:	2a64      	cmp	r2, #100	; 0x64
    f0b8:	d001      	beq.n	f0be <_printf_i+0x3e>
    f0ba:	2a69      	cmp	r2, #105	; 0x69
    f0bc:	d1f7      	bne.n	f0ae <_printf_i+0x2e>
    f0be:	6821      	ldr	r1, [r4, #0]
    f0c0:	681a      	ldr	r2, [r3, #0]
    f0c2:	0608      	lsls	r0, r1, #24
    f0c4:	d523      	bpl.n	f10e <_printf_i+0x8e>
    f0c6:	1d11      	adds	r1, r2, #4
    f0c8:	6019      	str	r1, [r3, #0]
    f0ca:	6815      	ldr	r5, [r2, #0]
    f0cc:	e025      	b.n	f11a <_printf_i+0x9a>
    f0ce:	2a73      	cmp	r2, #115	; 0x73
    f0d0:	d100      	bne.n	f0d4 <_printf_i+0x54>
    f0d2:	e088      	b.n	f1e6 <_printf_i+0x166>
    f0d4:	d808      	bhi.n	f0e8 <_printf_i+0x68>
    f0d6:	2a6f      	cmp	r2, #111	; 0x6f
    f0d8:	d029      	beq.n	f12e <_printf_i+0xae>
    f0da:	2a70      	cmp	r2, #112	; 0x70
    f0dc:	d1e7      	bne.n	f0ae <_printf_i+0x2e>
    f0de:	2220      	movs	r2, #32
    f0e0:	6809      	ldr	r1, [r1, #0]
    f0e2:	430a      	orrs	r2, r1
    f0e4:	6022      	str	r2, [r4, #0]
    f0e6:	e003      	b.n	f0f0 <_printf_i+0x70>
    f0e8:	2a75      	cmp	r2, #117	; 0x75
    f0ea:	d020      	beq.n	f12e <_printf_i+0xae>
    f0ec:	2a78      	cmp	r2, #120	; 0x78
    f0ee:	d1de      	bne.n	f0ae <_printf_i+0x2e>
    f0f0:	0022      	movs	r2, r4
    f0f2:	2178      	movs	r1, #120	; 0x78
    f0f4:	3245      	adds	r2, #69	; 0x45
    f0f6:	7011      	strb	r1, [r2, #0]
    f0f8:	4a6c      	ldr	r2, [pc, #432]	; (f2ac <_printf_i+0x22c>)
    f0fa:	e030      	b.n	f15e <_printf_i+0xde>
    f0fc:	000e      	movs	r6, r1
    f0fe:	681a      	ldr	r2, [r3, #0]
    f100:	3642      	adds	r6, #66	; 0x42
    f102:	1d11      	adds	r1, r2, #4
    f104:	6019      	str	r1, [r3, #0]
    f106:	6813      	ldr	r3, [r2, #0]
    f108:	7033      	strb	r3, [r6, #0]
    f10a:	2301      	movs	r3, #1
    f10c:	e079      	b.n	f202 <_printf_i+0x182>
    f10e:	0649      	lsls	r1, r1, #25
    f110:	d5d9      	bpl.n	f0c6 <_printf_i+0x46>
    f112:	1d11      	adds	r1, r2, #4
    f114:	6019      	str	r1, [r3, #0]
    f116:	2300      	movs	r3, #0
    f118:	5ed5      	ldrsh	r5, [r2, r3]
    f11a:	2d00      	cmp	r5, #0
    f11c:	da03      	bge.n	f126 <_printf_i+0xa6>
    f11e:	232d      	movs	r3, #45	; 0x2d
    f120:	9a04      	ldr	r2, [sp, #16]
    f122:	426d      	negs	r5, r5
    f124:	7013      	strb	r3, [r2, #0]
    f126:	4b62      	ldr	r3, [pc, #392]	; (f2b0 <_printf_i+0x230>)
    f128:	270a      	movs	r7, #10
    f12a:	9303      	str	r3, [sp, #12]
    f12c:	e02f      	b.n	f18e <_printf_i+0x10e>
    f12e:	6820      	ldr	r0, [r4, #0]
    f130:	6819      	ldr	r1, [r3, #0]
    f132:	0605      	lsls	r5, r0, #24
    f134:	d503      	bpl.n	f13e <_printf_i+0xbe>
    f136:	1d08      	adds	r0, r1, #4
    f138:	6018      	str	r0, [r3, #0]
    f13a:	680d      	ldr	r5, [r1, #0]
    f13c:	e005      	b.n	f14a <_printf_i+0xca>
    f13e:	0640      	lsls	r0, r0, #25
    f140:	d5f9      	bpl.n	f136 <_printf_i+0xb6>
    f142:	680d      	ldr	r5, [r1, #0]
    f144:	1d08      	adds	r0, r1, #4
    f146:	6018      	str	r0, [r3, #0]
    f148:	b2ad      	uxth	r5, r5
    f14a:	4b59      	ldr	r3, [pc, #356]	; (f2b0 <_printf_i+0x230>)
    f14c:	2708      	movs	r7, #8
    f14e:	9303      	str	r3, [sp, #12]
    f150:	2a6f      	cmp	r2, #111	; 0x6f
    f152:	d018      	beq.n	f186 <_printf_i+0x106>
    f154:	270a      	movs	r7, #10
    f156:	e016      	b.n	f186 <_printf_i+0x106>
    f158:	3145      	adds	r1, #69	; 0x45
    f15a:	700a      	strb	r2, [r1, #0]
    f15c:	4a54      	ldr	r2, [pc, #336]	; (f2b0 <_printf_i+0x230>)
    f15e:	9203      	str	r2, [sp, #12]
    f160:	681a      	ldr	r2, [r3, #0]
    f162:	6821      	ldr	r1, [r4, #0]
    f164:	1d10      	adds	r0, r2, #4
    f166:	6018      	str	r0, [r3, #0]
    f168:	6815      	ldr	r5, [r2, #0]
    f16a:	0608      	lsls	r0, r1, #24
    f16c:	d522      	bpl.n	f1b4 <_printf_i+0x134>
    f16e:	07cb      	lsls	r3, r1, #31
    f170:	d502      	bpl.n	f178 <_printf_i+0xf8>
    f172:	2320      	movs	r3, #32
    f174:	4319      	orrs	r1, r3
    f176:	6021      	str	r1, [r4, #0]
    f178:	2710      	movs	r7, #16
    f17a:	2d00      	cmp	r5, #0
    f17c:	d103      	bne.n	f186 <_printf_i+0x106>
    f17e:	2320      	movs	r3, #32
    f180:	6822      	ldr	r2, [r4, #0]
    f182:	439a      	bics	r2, r3
    f184:	6022      	str	r2, [r4, #0]
    f186:	0023      	movs	r3, r4
    f188:	2200      	movs	r2, #0
    f18a:	3343      	adds	r3, #67	; 0x43
    f18c:	701a      	strb	r2, [r3, #0]
    f18e:	6863      	ldr	r3, [r4, #4]
    f190:	60a3      	str	r3, [r4, #8]
    f192:	2b00      	cmp	r3, #0
    f194:	db5c      	blt.n	f250 <_printf_i+0x1d0>
    f196:	2204      	movs	r2, #4
    f198:	6821      	ldr	r1, [r4, #0]
    f19a:	4391      	bics	r1, r2
    f19c:	6021      	str	r1, [r4, #0]
    f19e:	2d00      	cmp	r5, #0
    f1a0:	d158      	bne.n	f254 <_printf_i+0x1d4>
    f1a2:	9e04      	ldr	r6, [sp, #16]
    f1a4:	2b00      	cmp	r3, #0
    f1a6:	d064      	beq.n	f272 <_printf_i+0x1f2>
    f1a8:	0026      	movs	r6, r4
    f1aa:	9b03      	ldr	r3, [sp, #12]
    f1ac:	3642      	adds	r6, #66	; 0x42
    f1ae:	781b      	ldrb	r3, [r3, #0]
    f1b0:	7033      	strb	r3, [r6, #0]
    f1b2:	e05e      	b.n	f272 <_printf_i+0x1f2>
    f1b4:	0648      	lsls	r0, r1, #25
    f1b6:	d5da      	bpl.n	f16e <_printf_i+0xee>
    f1b8:	b2ad      	uxth	r5, r5
    f1ba:	e7d8      	b.n	f16e <_printf_i+0xee>
    f1bc:	6809      	ldr	r1, [r1, #0]
    f1be:	681a      	ldr	r2, [r3, #0]
    f1c0:	0608      	lsls	r0, r1, #24
    f1c2:	d505      	bpl.n	f1d0 <_printf_i+0x150>
    f1c4:	1d11      	adds	r1, r2, #4
    f1c6:	6019      	str	r1, [r3, #0]
    f1c8:	6813      	ldr	r3, [r2, #0]
    f1ca:	6962      	ldr	r2, [r4, #20]
    f1cc:	601a      	str	r2, [r3, #0]
    f1ce:	e006      	b.n	f1de <_printf_i+0x15e>
    f1d0:	0649      	lsls	r1, r1, #25
    f1d2:	d5f7      	bpl.n	f1c4 <_printf_i+0x144>
    f1d4:	1d11      	adds	r1, r2, #4
    f1d6:	6019      	str	r1, [r3, #0]
    f1d8:	6813      	ldr	r3, [r2, #0]
    f1da:	8aa2      	ldrh	r2, [r4, #20]
    f1dc:	801a      	strh	r2, [r3, #0]
    f1de:	2300      	movs	r3, #0
    f1e0:	9e04      	ldr	r6, [sp, #16]
    f1e2:	6123      	str	r3, [r4, #16]
    f1e4:	e054      	b.n	f290 <_printf_i+0x210>
    f1e6:	681a      	ldr	r2, [r3, #0]
    f1e8:	1d11      	adds	r1, r2, #4
    f1ea:	6019      	str	r1, [r3, #0]
    f1ec:	6816      	ldr	r6, [r2, #0]
    f1ee:	2100      	movs	r1, #0
    f1f0:	6862      	ldr	r2, [r4, #4]
    f1f2:	0030      	movs	r0, r6
    f1f4:	f000 f94a 	bl	f48c <memchr>
    f1f8:	2800      	cmp	r0, #0
    f1fa:	d001      	beq.n	f200 <_printf_i+0x180>
    f1fc:	1b80      	subs	r0, r0, r6
    f1fe:	6060      	str	r0, [r4, #4]
    f200:	6863      	ldr	r3, [r4, #4]
    f202:	6123      	str	r3, [r4, #16]
    f204:	2300      	movs	r3, #0
    f206:	9a04      	ldr	r2, [sp, #16]
    f208:	7013      	strb	r3, [r2, #0]
    f20a:	e041      	b.n	f290 <_printf_i+0x210>
    f20c:	6923      	ldr	r3, [r4, #16]
    f20e:	0032      	movs	r2, r6
    f210:	9906      	ldr	r1, [sp, #24]
    f212:	9805      	ldr	r0, [sp, #20]
    f214:	9d07      	ldr	r5, [sp, #28]
    f216:	47a8      	blx	r5
    f218:	1c43      	adds	r3, r0, #1
    f21a:	d043      	beq.n	f2a4 <_printf_i+0x224>
    f21c:	6823      	ldr	r3, [r4, #0]
    f21e:	2500      	movs	r5, #0
    f220:	079b      	lsls	r3, r3, #30
    f222:	d40f      	bmi.n	f244 <_printf_i+0x1c4>
    f224:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f226:	68e0      	ldr	r0, [r4, #12]
    f228:	4298      	cmp	r0, r3
    f22a:	da3d      	bge.n	f2a8 <_printf_i+0x228>
    f22c:	0018      	movs	r0, r3
    f22e:	e03b      	b.n	f2a8 <_printf_i+0x228>
    f230:	0022      	movs	r2, r4
    f232:	2301      	movs	r3, #1
    f234:	3219      	adds	r2, #25
    f236:	9906      	ldr	r1, [sp, #24]
    f238:	9805      	ldr	r0, [sp, #20]
    f23a:	9e07      	ldr	r6, [sp, #28]
    f23c:	47b0      	blx	r6
    f23e:	1c43      	adds	r3, r0, #1
    f240:	d030      	beq.n	f2a4 <_printf_i+0x224>
    f242:	3501      	adds	r5, #1
    f244:	68e3      	ldr	r3, [r4, #12]
    f246:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f248:	1a9b      	subs	r3, r3, r2
    f24a:	429d      	cmp	r5, r3
    f24c:	dbf0      	blt.n	f230 <_printf_i+0x1b0>
    f24e:	e7e9      	b.n	f224 <_printf_i+0x1a4>
    f250:	2d00      	cmp	r5, #0
    f252:	d0a9      	beq.n	f1a8 <_printf_i+0x128>
    f254:	9e04      	ldr	r6, [sp, #16]
    f256:	0028      	movs	r0, r5
    f258:	0039      	movs	r1, r7
    f25a:	f7fe fc83 	bl	db64 <__aeabi_uidivmod>
    f25e:	9b03      	ldr	r3, [sp, #12]
    f260:	3e01      	subs	r6, #1
    f262:	5c5b      	ldrb	r3, [r3, r1]
    f264:	0028      	movs	r0, r5
    f266:	7033      	strb	r3, [r6, #0]
    f268:	0039      	movs	r1, r7
    f26a:	f7fe fbf5 	bl	da58 <__udivsi3>
    f26e:	1e05      	subs	r5, r0, #0
    f270:	d1f1      	bne.n	f256 <_printf_i+0x1d6>
    f272:	2f08      	cmp	r7, #8
    f274:	d109      	bne.n	f28a <_printf_i+0x20a>
    f276:	6823      	ldr	r3, [r4, #0]
    f278:	07db      	lsls	r3, r3, #31
    f27a:	d506      	bpl.n	f28a <_printf_i+0x20a>
    f27c:	6863      	ldr	r3, [r4, #4]
    f27e:	6922      	ldr	r2, [r4, #16]
    f280:	4293      	cmp	r3, r2
    f282:	dc02      	bgt.n	f28a <_printf_i+0x20a>
    f284:	2330      	movs	r3, #48	; 0x30
    f286:	3e01      	subs	r6, #1
    f288:	7033      	strb	r3, [r6, #0]
    f28a:	9b04      	ldr	r3, [sp, #16]
    f28c:	1b9b      	subs	r3, r3, r6
    f28e:	6123      	str	r3, [r4, #16]
    f290:	9b07      	ldr	r3, [sp, #28]
    f292:	aa09      	add	r2, sp, #36	; 0x24
    f294:	9300      	str	r3, [sp, #0]
    f296:	0021      	movs	r1, r4
    f298:	9b06      	ldr	r3, [sp, #24]
    f29a:	9805      	ldr	r0, [sp, #20]
    f29c:	f7ff fe82 	bl	efa4 <_printf_common>
    f2a0:	1c43      	adds	r3, r0, #1
    f2a2:	d1b3      	bne.n	f20c <_printf_i+0x18c>
    f2a4:	2001      	movs	r0, #1
    f2a6:	4240      	negs	r0, r0
    f2a8:	b00b      	add	sp, #44	; 0x2c
    f2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f2ac:	00010db8 	.word	0x00010db8
    f2b0:	00010da7 	.word	0x00010da7

0000f2b4 <_putc_r>:
    f2b4:	b570      	push	{r4, r5, r6, lr}
    f2b6:	0006      	movs	r6, r0
    f2b8:	000d      	movs	r5, r1
    f2ba:	0014      	movs	r4, r2
    f2bc:	2800      	cmp	r0, #0
    f2be:	d004      	beq.n	f2ca <_putc_r+0x16>
    f2c0:	6983      	ldr	r3, [r0, #24]
    f2c2:	2b00      	cmp	r3, #0
    f2c4:	d101      	bne.n	f2ca <_putc_r+0x16>
    f2c6:	f7ff fab1 	bl	e82c <__sinit>
    f2ca:	4b12      	ldr	r3, [pc, #72]	; (f314 <_putc_r+0x60>)
    f2cc:	429c      	cmp	r4, r3
    f2ce:	d111      	bne.n	f2f4 <_putc_r+0x40>
    f2d0:	6874      	ldr	r4, [r6, #4]
    f2d2:	68a3      	ldr	r3, [r4, #8]
    f2d4:	3b01      	subs	r3, #1
    f2d6:	60a3      	str	r3, [r4, #8]
    f2d8:	2b00      	cmp	r3, #0
    f2da:	da05      	bge.n	f2e8 <_putc_r+0x34>
    f2dc:	69a2      	ldr	r2, [r4, #24]
    f2de:	4293      	cmp	r3, r2
    f2e0:	db12      	blt.n	f308 <_putc_r+0x54>
    f2e2:	b2eb      	uxtb	r3, r5
    f2e4:	2b0a      	cmp	r3, #10
    f2e6:	d00f      	beq.n	f308 <_putc_r+0x54>
    f2e8:	6823      	ldr	r3, [r4, #0]
    f2ea:	b2e8      	uxtb	r0, r5
    f2ec:	1c5a      	adds	r2, r3, #1
    f2ee:	6022      	str	r2, [r4, #0]
    f2f0:	701d      	strb	r5, [r3, #0]
    f2f2:	bd70      	pop	{r4, r5, r6, pc}
    f2f4:	4b08      	ldr	r3, [pc, #32]	; (f318 <_putc_r+0x64>)
    f2f6:	429c      	cmp	r4, r3
    f2f8:	d101      	bne.n	f2fe <_putc_r+0x4a>
    f2fa:	68b4      	ldr	r4, [r6, #8]
    f2fc:	e7e9      	b.n	f2d2 <_putc_r+0x1e>
    f2fe:	4b07      	ldr	r3, [pc, #28]	; (f31c <_putc_r+0x68>)
    f300:	429c      	cmp	r4, r3
    f302:	d1e6      	bne.n	f2d2 <_putc_r+0x1e>
    f304:	68f4      	ldr	r4, [r6, #12]
    f306:	e7e4      	b.n	f2d2 <_putc_r+0x1e>
    f308:	0022      	movs	r2, r4
    f30a:	0029      	movs	r1, r5
    f30c:	0030      	movs	r0, r6
    f30e:	f7ff f8c9 	bl	e4a4 <__swbuf_r>
    f312:	e7ee      	b.n	f2f2 <_putc_r+0x3e>
    f314:	00010d4c 	.word	0x00010d4c
    f318:	00010d6c 	.word	0x00010d6c
    f31c:	00010d2c 	.word	0x00010d2c

0000f320 <__sread>:
    f320:	b570      	push	{r4, r5, r6, lr}
    f322:	000c      	movs	r4, r1
    f324:	250e      	movs	r5, #14
    f326:	5f49      	ldrsh	r1, [r1, r5]
    f328:	f000 f8e2 	bl	f4f0 <_read_r>
    f32c:	2800      	cmp	r0, #0
    f32e:	db03      	blt.n	f338 <__sread+0x18>
    f330:	6d63      	ldr	r3, [r4, #84]	; 0x54
    f332:	181b      	adds	r3, r3, r0
    f334:	6563      	str	r3, [r4, #84]	; 0x54
    f336:	bd70      	pop	{r4, r5, r6, pc}
    f338:	89a3      	ldrh	r3, [r4, #12]
    f33a:	4a02      	ldr	r2, [pc, #8]	; (f344 <__sread+0x24>)
    f33c:	4013      	ands	r3, r2
    f33e:	81a3      	strh	r3, [r4, #12]
    f340:	e7f9      	b.n	f336 <__sread+0x16>
    f342:	46c0      	nop			; (mov r8, r8)
    f344:	ffffefff 	.word	0xffffefff

0000f348 <__swrite>:
    f348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f34a:	001f      	movs	r7, r3
    f34c:	898b      	ldrh	r3, [r1, #12]
    f34e:	0005      	movs	r5, r0
    f350:	000c      	movs	r4, r1
    f352:	0016      	movs	r6, r2
    f354:	05db      	lsls	r3, r3, #23
    f356:	d505      	bpl.n	f364 <__swrite+0x1c>
    f358:	230e      	movs	r3, #14
    f35a:	5ec9      	ldrsh	r1, [r1, r3]
    f35c:	2200      	movs	r2, #0
    f35e:	2302      	movs	r3, #2
    f360:	f000 f880 	bl	f464 <_lseek_r>
    f364:	89a3      	ldrh	r3, [r4, #12]
    f366:	4a05      	ldr	r2, [pc, #20]	; (f37c <__swrite+0x34>)
    f368:	0028      	movs	r0, r5
    f36a:	4013      	ands	r3, r2
    f36c:	81a3      	strh	r3, [r4, #12]
    f36e:	0032      	movs	r2, r6
    f370:	230e      	movs	r3, #14
    f372:	5ee1      	ldrsh	r1, [r4, r3]
    f374:	003b      	movs	r3, r7
    f376:	f000 f82b 	bl	f3d0 <_write_r>
    f37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f37c:	ffffefff 	.word	0xffffefff

0000f380 <__sseek>:
    f380:	b570      	push	{r4, r5, r6, lr}
    f382:	000c      	movs	r4, r1
    f384:	250e      	movs	r5, #14
    f386:	5f49      	ldrsh	r1, [r1, r5]
    f388:	f000 f86c 	bl	f464 <_lseek_r>
    f38c:	89a3      	ldrh	r3, [r4, #12]
    f38e:	1c42      	adds	r2, r0, #1
    f390:	d103      	bne.n	f39a <__sseek+0x1a>
    f392:	4a05      	ldr	r2, [pc, #20]	; (f3a8 <__sseek+0x28>)
    f394:	4013      	ands	r3, r2
    f396:	81a3      	strh	r3, [r4, #12]
    f398:	bd70      	pop	{r4, r5, r6, pc}
    f39a:	2280      	movs	r2, #128	; 0x80
    f39c:	0152      	lsls	r2, r2, #5
    f39e:	4313      	orrs	r3, r2
    f3a0:	81a3      	strh	r3, [r4, #12]
    f3a2:	6560      	str	r0, [r4, #84]	; 0x54
    f3a4:	e7f8      	b.n	f398 <__sseek+0x18>
    f3a6:	46c0      	nop			; (mov r8, r8)
    f3a8:	ffffefff 	.word	0xffffefff

0000f3ac <__sclose>:
    f3ac:	b510      	push	{r4, lr}
    f3ae:	230e      	movs	r3, #14
    f3b0:	5ec9      	ldrsh	r1, [r1, r3]
    f3b2:	f000 f821 	bl	f3f8 <_close_r>
    f3b6:	bd10      	pop	{r4, pc}

0000f3b8 <__ascii_wctomb>:
    f3b8:	1e0b      	subs	r3, r1, #0
    f3ba:	d004      	beq.n	f3c6 <__ascii_wctomb+0xe>
    f3bc:	2aff      	cmp	r2, #255	; 0xff
    f3be:	d904      	bls.n	f3ca <__ascii_wctomb+0x12>
    f3c0:	238a      	movs	r3, #138	; 0x8a
    f3c2:	6003      	str	r3, [r0, #0]
    f3c4:	3b8b      	subs	r3, #139	; 0x8b
    f3c6:	0018      	movs	r0, r3
    f3c8:	4770      	bx	lr
    f3ca:	700a      	strb	r2, [r1, #0]
    f3cc:	2301      	movs	r3, #1
    f3ce:	e7fa      	b.n	f3c6 <__ascii_wctomb+0xe>

0000f3d0 <_write_r>:
    f3d0:	b570      	push	{r4, r5, r6, lr}
    f3d2:	0005      	movs	r5, r0
    f3d4:	0008      	movs	r0, r1
    f3d6:	0011      	movs	r1, r2
    f3d8:	2200      	movs	r2, #0
    f3da:	4c06      	ldr	r4, [pc, #24]	; (f3f4 <_write_r+0x24>)
    f3dc:	6022      	str	r2, [r4, #0]
    f3de:	001a      	movs	r2, r3
    f3e0:	f7fd faf2 	bl	c9c8 <_write>
    f3e4:	1c43      	adds	r3, r0, #1
    f3e6:	d103      	bne.n	f3f0 <_write_r+0x20>
    f3e8:	6823      	ldr	r3, [r4, #0]
    f3ea:	2b00      	cmp	r3, #0
    f3ec:	d000      	beq.n	f3f0 <_write_r+0x20>
    f3ee:	602b      	str	r3, [r5, #0]
    f3f0:	bd70      	pop	{r4, r5, r6, pc}
    f3f2:	46c0      	nop			; (mov r8, r8)
    f3f4:	20000e08 	.word	0x20000e08

0000f3f8 <_close_r>:
    f3f8:	2300      	movs	r3, #0
    f3fa:	b570      	push	{r4, r5, r6, lr}
    f3fc:	4c06      	ldr	r4, [pc, #24]	; (f418 <_close_r+0x20>)
    f3fe:	0005      	movs	r5, r0
    f400:	0008      	movs	r0, r1
    f402:	6023      	str	r3, [r4, #0]
    f404:	f7f9 fbf6 	bl	8bf4 <_close>
    f408:	1c43      	adds	r3, r0, #1
    f40a:	d103      	bne.n	f414 <_close_r+0x1c>
    f40c:	6823      	ldr	r3, [r4, #0]
    f40e:	2b00      	cmp	r3, #0
    f410:	d000      	beq.n	f414 <_close_r+0x1c>
    f412:	602b      	str	r3, [r5, #0]
    f414:	bd70      	pop	{r4, r5, r6, pc}
    f416:	46c0      	nop			; (mov r8, r8)
    f418:	20000e08 	.word	0x20000e08

0000f41c <_fstat_r>:
    f41c:	2300      	movs	r3, #0
    f41e:	b570      	push	{r4, r5, r6, lr}
    f420:	4c06      	ldr	r4, [pc, #24]	; (f43c <_fstat_r+0x20>)
    f422:	0005      	movs	r5, r0
    f424:	0008      	movs	r0, r1
    f426:	0011      	movs	r1, r2
    f428:	6023      	str	r3, [r4, #0]
    f42a:	f7f9 fbed 	bl	8c08 <_fstat>
    f42e:	1c43      	adds	r3, r0, #1
    f430:	d103      	bne.n	f43a <_fstat_r+0x1e>
    f432:	6823      	ldr	r3, [r4, #0]
    f434:	2b00      	cmp	r3, #0
    f436:	d000      	beq.n	f43a <_fstat_r+0x1e>
    f438:	602b      	str	r3, [r5, #0]
    f43a:	bd70      	pop	{r4, r5, r6, pc}
    f43c:	20000e08 	.word	0x20000e08

0000f440 <_isatty_r>:
    f440:	2300      	movs	r3, #0
    f442:	b570      	push	{r4, r5, r6, lr}
    f444:	4c06      	ldr	r4, [pc, #24]	; (f460 <_isatty_r+0x20>)
    f446:	0005      	movs	r5, r0
    f448:	0008      	movs	r0, r1
    f44a:	6023      	str	r3, [r4, #0]
    f44c:	f7f9 fbea 	bl	8c24 <_isatty>
    f450:	1c43      	adds	r3, r0, #1
    f452:	d103      	bne.n	f45c <_isatty_r+0x1c>
    f454:	6823      	ldr	r3, [r4, #0]
    f456:	2b00      	cmp	r3, #0
    f458:	d000      	beq.n	f45c <_isatty_r+0x1c>
    f45a:	602b      	str	r3, [r5, #0]
    f45c:	bd70      	pop	{r4, r5, r6, pc}
    f45e:	46c0      	nop			; (mov r8, r8)
    f460:	20000e08 	.word	0x20000e08

0000f464 <_lseek_r>:
    f464:	b570      	push	{r4, r5, r6, lr}
    f466:	0005      	movs	r5, r0
    f468:	0008      	movs	r0, r1
    f46a:	0011      	movs	r1, r2
    f46c:	2200      	movs	r2, #0
    f46e:	4c06      	ldr	r4, [pc, #24]	; (f488 <_lseek_r+0x24>)
    f470:	6022      	str	r2, [r4, #0]
    f472:	001a      	movs	r2, r3
    f474:	f7f9 fbdf 	bl	8c36 <_lseek>
    f478:	1c43      	adds	r3, r0, #1
    f47a:	d103      	bne.n	f484 <_lseek_r+0x20>
    f47c:	6823      	ldr	r3, [r4, #0]
    f47e:	2b00      	cmp	r3, #0
    f480:	d000      	beq.n	f484 <_lseek_r+0x20>
    f482:	602b      	str	r3, [r5, #0]
    f484:	bd70      	pop	{r4, r5, r6, pc}
    f486:	46c0      	nop			; (mov r8, r8)
    f488:	20000e08 	.word	0x20000e08

0000f48c <memchr>:
    f48c:	b2c9      	uxtb	r1, r1
    f48e:	1882      	adds	r2, r0, r2
    f490:	4290      	cmp	r0, r2
    f492:	d101      	bne.n	f498 <memchr+0xc>
    f494:	2000      	movs	r0, #0
    f496:	4770      	bx	lr
    f498:	7803      	ldrb	r3, [r0, #0]
    f49a:	428b      	cmp	r3, r1
    f49c:	d0fb      	beq.n	f496 <memchr+0xa>
    f49e:	3001      	adds	r0, #1
    f4a0:	e7f6      	b.n	f490 <memchr+0x4>

0000f4a2 <_realloc_r>:
    f4a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f4a4:	0007      	movs	r7, r0
    f4a6:	000d      	movs	r5, r1
    f4a8:	0016      	movs	r6, r2
    f4aa:	2900      	cmp	r1, #0
    f4ac:	d105      	bne.n	f4ba <_realloc_r+0x18>
    f4ae:	0011      	movs	r1, r2
    f4b0:	f7fe fd1e 	bl	def0 <_malloc_r>
    f4b4:	0004      	movs	r4, r0
    f4b6:	0020      	movs	r0, r4
    f4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f4ba:	2a00      	cmp	r2, #0
    f4bc:	d103      	bne.n	f4c6 <_realloc_r+0x24>
    f4be:	f7fe fccd 	bl	de5c <_free_r>
    f4c2:	0034      	movs	r4, r6
    f4c4:	e7f7      	b.n	f4b6 <_realloc_r+0x14>
    f4c6:	f000 f827 	bl	f518 <_malloc_usable_size_r>
    f4ca:	002c      	movs	r4, r5
    f4cc:	4286      	cmp	r6, r0
    f4ce:	d9f2      	bls.n	f4b6 <_realloc_r+0x14>
    f4d0:	0031      	movs	r1, r6
    f4d2:	0038      	movs	r0, r7
    f4d4:	f7fe fd0c 	bl	def0 <_malloc_r>
    f4d8:	1e04      	subs	r4, r0, #0
    f4da:	d0ec      	beq.n	f4b6 <_realloc_r+0x14>
    f4dc:	0029      	movs	r1, r5
    f4de:	0032      	movs	r2, r6
    f4e0:	f7fe fc98 	bl	de14 <memcpy>
    f4e4:	0029      	movs	r1, r5
    f4e6:	0038      	movs	r0, r7
    f4e8:	f7fe fcb8 	bl	de5c <_free_r>
    f4ec:	e7e3      	b.n	f4b6 <_realloc_r+0x14>
	...

0000f4f0 <_read_r>:
    f4f0:	b570      	push	{r4, r5, r6, lr}
    f4f2:	0005      	movs	r5, r0
    f4f4:	0008      	movs	r0, r1
    f4f6:	0011      	movs	r1, r2
    f4f8:	2200      	movs	r2, #0
    f4fa:	4c06      	ldr	r4, [pc, #24]	; (f514 <_read_r+0x24>)
    f4fc:	6022      	str	r2, [r4, #0]
    f4fe:	001a      	movs	r2, r3
    f500:	f7fd fa38 	bl	c974 <_read>
    f504:	1c43      	adds	r3, r0, #1
    f506:	d103      	bne.n	f510 <_read_r+0x20>
    f508:	6823      	ldr	r3, [r4, #0]
    f50a:	2b00      	cmp	r3, #0
    f50c:	d000      	beq.n	f510 <_read_r+0x20>
    f50e:	602b      	str	r3, [r5, #0]
    f510:	bd70      	pop	{r4, r5, r6, pc}
    f512:	46c0      	nop			; (mov r8, r8)
    f514:	20000e08 	.word	0x20000e08

0000f518 <_malloc_usable_size_r>:
    f518:	1f0b      	subs	r3, r1, #4
    f51a:	681b      	ldr	r3, [r3, #0]
    f51c:	1f18      	subs	r0, r3, #4
    f51e:	2b00      	cmp	r3, #0
    f520:	da01      	bge.n	f526 <_malloc_usable_size_r+0xe>
    f522:	580b      	ldr	r3, [r1, r0]
    f524:	18c0      	adds	r0, r0, r3
    f526:	4770      	bx	lr
    f528:	50504128 	.word	0x50504128
    f52c:	52452829 	.word	0x52452829
    f530:	255b2952 	.word	0x255b2952
    f534:	255b5d73 	.word	0x255b5d73
    f538:	00005d64 	.word	0x00005d64
    f53c:	61766e69 	.word	0x61766e69
    f540:	6564696c 	.word	0x6564696c
    f544:	636f6920 	.word	0x636f6920
    f548:	6320746c 	.word	0x6320746c
    f54c:	0000646d 	.word	0x0000646d

0000f550 <__FUNCTION__.14445>:
    f550:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    f560:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
    f570:	20676e69 6e776f64 002e2e2e 50504128     ing down....(APP
    f580:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
    f590:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
    f5a0:	74207075 63206568 00706968 66696828     up the chip.(hif
    f5b0:	49572029 485f4946 5f54534f 5f564352     ) WIFI_HOST_RCV_
    f5c0:	4c525443 6220315f 66207375 006c6961     CTRL_1 bus fail.
    f5d0:	66696828 64612029 73657264 75622073     (hif) address bu
    f5e0:	61662073 00006c69 66696828 6f432029     s fail..(hif) Co
    f5f0:	70757272 20646574 6b636170 53207465     rrupted packet S
    f600:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
    f610:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
    f620:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
    f630:	6361626c 7369206b 746f6e20 67657220     lback is not reg
    f640:	65747369 00646572 6b6f6353 63207465     istered.Scoket c
    f650:	626c6c61 206b6361 6e207369 7220746f     allback is not r
    f660:	73696765 65726574 00000064 2061744f     egistered...Ota 
    f670:	6c6c6163 6b636162 20736920 20746f6e     callback is not 
    f680:	69676572 72657473 00006465 70797243     registered..Cryp
    f690:	63206f74 626c6c61 206b6361 6e207369     to callback is n
    f6a0:	7220746f 73696765 65726574 00000064     ot registered...
    f6b0:	6d676953 61632061 61626c6c 69206b63     Sigma callback i
    f6c0:	6f6e2073 65722074 74736967 64657265     s not registered
    f6d0:	00000000 66696828 6e692029 696c6176     ....(hif) invali
    f6e0:	72672064 2070756f 00004449 66696828     d group ID..(hif
    f6f0:	6f682029 61207473 64207070 276e6469     ) host app didn'
    f700:	65732074 58522074 6e6f4420 253c2065     t set RX Done <%
    f710:	253c3e75 000a3e58 66696828 72572029     u><%X>..(hif) Wr
    f720:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
    f730:	61462029 2065736c 65746e69 70757272     ) False interrup
    f740:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
    f750:	74206c69 6552206f 69206461 7265746e     il to Read inter
    f760:	74707572 67657220 00000000 46494828     rupt reg....(HIF
    f770:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
    f780:	746e6920 75727265 25207470 72742064      interrupt %d tr
    f790:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
    f7a0:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
    f7b0:	72612064 656d7567 0000746e 20505041     d argument..APP 
    f7c0:	75716552 65747365 69532064 6920657a     Requested Size i
    f7d0:	616c2073 72656772 61687420 6874206e     s larger than th
    f7e0:	65722065 65766963 75622064 72656666     e recived buffer
    f7f0:	7a697320 253c2065 253c3e75 0a3e756c      size <%u><%lu>.
    f800:	00000000 20505041 75716552 65747365     ....APP Requeste
    f810:	64412064 73657264 65622073 646e6f79     d Address beyond
    f820:	65687420 63657220 64657669 66756220      the recived buf
    f830:	20726566 72646461 20737365 20646e61     fer address and 
    f840:	676e656c 00006874 20705247 6425203f     length..GRp ? %d
    f850:	0000000a 00001958 00001928 00001920     ....X...(... ...
    f860:	00001938 00001930 00001950 00001940     8...0...P...@...
    f870:	00001948                                H...

0000f874 <__FUNCTION__.13058>:
    f874:	5f666968 646e6573 00000000              hif_send....

0000f880 <__FUNCTION__.13068>:
    f880:	5f666968 00727369                       hif_isr.

0000f888 <__FUNCTION__.13074>:
    f888:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0000f898 <__FUNCTION__.13086>:
    f898:	5f666968 65636572 00657669              hif_receive.

0000f8a4 <__FUNCTION__.13102>:
    f8a4:	5f666968 69676572 72657473 0062635f     hif_register_cb.
    f8b4:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
    f8c4:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
    f8d4:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
    f8e4:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
    f8f4:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
    f904:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
    f914:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
    f924:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
    f934:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
    f944:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
    f954:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
    f964:	2044494c 2059454b 49525453 5320474e     LID KEY STRING S
    f974:	00455a49 41564e49 2044494c 2059454b     IZE.INVALID KEY 
    f984:	455a4953 00000000 41564e49 2044494c     SIZE....INVALID 
    f994:	20415057 2059454b 455a4953 00000000     WPA KEY SIZE....
    f9a4:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
    f9b4:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
    f9c4:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
    f9d4:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
    f9e4:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
    f9f4:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
    fa04:	6f206f4e 72702066 2065626f 75716572     No of probe requ
    fa14:	73747365 72657020 61637320 6c73206e     ests per scan sl
    fa24:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
    fa34:	49535352 72687420 6f687365 2520646c     RSSI threshold %
    fa44:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
    fa54:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
    fa64:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
    fa74:	65726177 69754220 2520646c 69542073     ware Build %s Ti
    fa84:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
    fa94:	6e694d20 69726420 20726576 20726576      Min driver ver 
    faa4:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
    fab4:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
    fac4:	0000000a 343a3631 31333a30 00000000     ....16:40:31....
    fad4:	20727041 32203231 00373130 76697244     Apr 12 2017.Driv
    fae4:	62207265 746c6975 20746120 25097325     er built at %s.%
    faf4:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
    fb04:	7277616d 65562065 6f697372 0000006e     mawre Version...
    fb14:	2079654b 6e207369 7620746f 64696c61     Key is not valid
    fb24:	00000000 61766e49 2064696c 0079654b     ....Invalid Key.
    fb34:	44495353 4e454c20 564e4920 44494c41     SSID LEN INVALID
    fb44:	00000000 49204843 4c41564e 00004449     ....CH INVALID..
    fb54:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
    fb64:	65646e69 64252078 0000000a 61766e49     index %d....Inva
    fb74:	2064696c 20706557 2079656b 676e656c     lid Wep key leng
    fb84:	25206874 00000a64 6f636e49 63657272     th %d...Incorrec
    fb94:	53502074 656b204b 656c2079 6874676e     t PSK key length
    fba4:	00000000 65646e75 656e6966 65732064     ....undefined se
    fbb4:	79742063 00006570 5f53505f 56524553     c type.._PS_SERV
    fbc4:	205f5245 6e207369 6420746f 6e696665     ER_ is not defin
    fbd4:	00006465 7473694c 63206e65 6e6e6168     ed..Listen chann
    fbe4:	73206c65 6c756f68 6e6f2064 6220796c     el should only b
    fbf4:	324d2065 49575f4d 435f4946 2f315f48     e M2M_WIFI_CH_1/
    fc04:	31312f36 00000020 45574f50 41532052     6/11 ...POWER SA
    fc14:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
    fc24:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
    fc34:	66754220 20726566 65637865 64656465      Buffer exceeded
    fc44:	78616d20 6d756d69 7a697320 64252065      maximum size %d
    fc54:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
    fc64:	00000000                                ....

0000fc68 <__FUNCTION__.13037>:
    fc68:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0000fc74 <__FUNCTION__.13066>:
    fc74:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0000fc84 <__FUNCTION__.13094>:
    fc84:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    fc94:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
    fca4:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
    fcb4:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
    fcc4:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
    fcd4:	20656874 70696863 00000000 50504128     the chip....(APP
    fce4:	4e492829 00294f46 76697244 65567265     )(INFO).DriverVe
    fcf4:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..
    fd04:	6c696166 74206465 6564206f 696e692d     failed to de-ini
    fd14:	6c616974 00657a69                       tialize.

0000fd1c <__FUNCTION__.12900>:
    fd1c:	70696863 6b61775f 00000065              chip_wake...

0000fd28 <__FUNCTION__.12949>:
    fd28:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
    fd38:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
    fd48:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    fd58:	6e69206c 62207469 00007375 50504128     l init bus..(APP
    fd68:	4e492829 00294f46 70696843 20444920     )(INFO).Chip ID 
    fd78:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
    fd88:	6e65206f 656c6261 746e6920 75727265     o enable interru
    fd98:	2e737470 0000002e 696d6e5b 6f747320     pts.....[nmi sto
    fda8:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
    fdb8:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
    fdc8:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
    fdd8:	6c626173 61662065 00006c69 696d6e5b     sable fail..[nmi
    fde8:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
    fdf8:	75622074 00000073                       t bus...

0000fe00 <__FUNCTION__.12947>:
    fe00:	645f6d6e 695f7672 0074696e              nm_drv_init.

0000fe0c <__FUNCTION__.12954>:
    fe0c:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

0000fe1c <crc7_syndrome_table>:
    fe1c:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    fe2c:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    fe3c:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    fe4c:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    fe5c:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    fe6c:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    fe7c:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    fe8c:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    fe9c:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    feac:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    febc:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    fecc:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    fedc:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    feec:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    fefc:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    ff0c:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    ff1c:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    ff2c:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
    ff3c:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    ff4c:	73756220 72726520 2e2e726f 0000002e      bus error......
    ff5c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    ff6c:	75622064 72652073 2e726f72 00002e2e     d bus error.....
    ff7c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    ff8c:	61642064 72206174 6f707365 2065736e     d data response 
    ff9c:	64616572 7825202c 20782520 000a7825     read, %x %x %x..
    ffac:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    ffbc:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    ffcc:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    ffdc:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    ffec:	656c6961 61642064 72206174 6f707365     ailed data respo
    fffc:	2065736e 64616572 7562202c 72652073     nse read, bus er
   1000c:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   1001c:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   1002c:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   1003c:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   1004c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1005c:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   1006c:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   1007c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1008c:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   1009c:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   100ac:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   100bc:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
   100cc:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   100dc:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   100ec:	656c6961 61642064 62206174 6b636f6c     ailed data block
   100fc:	69727720 202c6574 20737562 6f727265      write, bus erro
   1010c:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
   1011c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1012c:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
   1013c:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   1014c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1015c:	6d632064 77202c64 65746972 67657220     d cmd, write reg
   1016c:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   1017c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   1018c:	65722064 6e6f7073 202c6573 74697277     d response, writ
   1019c:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
   101ac:	00000000 65736552 6e612074 65722064     ....Reset and re
   101bc:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
   101cc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   101dc:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   101ec:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   101fc:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   1020c:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   1021c:	69727720 62206574 6b636f6c 30252820      write block (%0
   1022c:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   1023c:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
   1024c:	61746164 69727720 2e2e6574 0000002e     data write......
   1025c:	65736552 6e612074 65722064 20797274     Reset and retry 
   1026c:	25206425 2520786c 00000a64 696d6e5b     %d %lx %d...[nmi
   1027c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   1028c:	72202c64 20646165 20676572 38302528     d, read reg (%08
   1029c:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   102ac:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   102bc:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   102cc:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   102dc:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   102ec:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   102fc:	6e612074 65722064 20797274 25206425     t and retry %d %
   1030c:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   1031c:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   1032c:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   1033c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1034c:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   1035c:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   1036c:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   1037c:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   1038c:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   1039c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   103ac:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   103bc:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
   103cc:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
   103dc:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
   103ec:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   103fc:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   1040c:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
   1041c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1042c:	6e692064 6e726574 77206c61 65746972     d internal write
   1043c:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   1044c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1045c:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   1046c:	64692070 002e2e2e 00003514 00003514     p id.....5...5..
   1047c:	000035a4 00003468 000034ae 000034d0     .5..h4...4...4..
   1048c:	00003556 00003556 00003610 0000343c     V5..V5...6..<4..
   1049c:	0000366a 0000366a 0000366a 0000366a     j6..j6..j6..j6..
   104ac:	000034f2                                .4..

000104b0 <__FUNCTION__.12253>:
   104b0:	5f697073 00646d63                       spi_cmd.

000104b8 <__FUNCTION__.12260>:
   104b8:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

000104c8 <__FUNCTION__.12269>:
   104c8:	5f697073 5f646d63 00707372              spi_cmd_rsp.

000104d4 <__FUNCTION__.12285>:
   104d4:	5f697073 61746164 6165725f 00000064     spi_data_read...

000104e4 <__FUNCTION__.12300>:
   104e4:	5f697073 61746164 6972775f 00006574     spi_data_write..

000104f4 <__FUNCTION__.12312>:
   104f4:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00010504 <__FUNCTION__.12323>:
   10504:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00010514 <__FUNCTION__.12335>:
   10514:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00010524 <__FUNCTION__.12348>:
   10524:	735f6d6e 725f6970 00646165              nm_spi_read.

00010530 <__FUNCTION__.12369>:
   10530:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   10540:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   10550:	6e657272 253c2074 000a3e64 6b636f53     rrent <%d>..Sock
   10560:	25207465 65732064 6f697373 4449206e     et %d session ID
   10570:	25203d20 000a0d64 6b636f53 206f7420      = %d...Sock to 
   10580:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
   10590:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   105a0:	00005d64 20494e53 65637845 20736465     d]..SNI Exceeds 
   105b0:	2078614d 676e654c 00006874 6e6b6e55     Max Length..Unkn
   105c0:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
   105d0:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
   105e0:	204c5353 6b636f53 00007465              SSL Socket..

000105ec <tcc_modules>:
   105ec:	42002000 42002400 42002800              . .B.$.B.(.B

000105f8 <_tcc_gclk_ids>:
   105f8:	001b1a1a                                ....

000105fc <_tcc_apbcmasks>:
   105fc:	00000100 00000200 00000400              ............

00010608 <_tcc_maxs>:
   10608:	00ffffff 00ffffff 0000ffff              ............

00010614 <_tcc_cc_nums>:
   10614:	00020204                                ....

00010618 <_tcc_ow_nums>:
   10618:	00020408                                ....

0001061c <_tcc_intflag>:
   1061c:	00000001 00000002 00000004 00000008     ................
   1062c:	00001000 00002000 00004000 00008000     ..... ...@......
   1063c:	00010000 00020000 00040000 00080000     ................
   1064c:	656d7461 2e312f6c 00322e30 70747468     atmel/1.0.2.http
   1065c:	002f2f3a 70747468 2f2f3a73 00000000     ://.https://....
   1066c:	20544547 00000000 54534f50 00000020     GET ....POST ...
   1067c:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   1068c:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   1069c:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   106ac:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   106bc:	00000a0d 74736f48 0000203a 6e6e6f43     ....Host: ..Conn
   106cc:	69746365 203a6e6f 7065654b 696c412d     ection: Keep-Ali
   106dc:	0a0d6576 00000000 65636341 452d7470     ve......Accept-E
   106ec:	646f636e 3a676e69 000a0d20 65636341     ncoding: ...Acce
   106fc:	432d7470 73726168 203a7465 2d667475     pt-Charset: utf-
   1070c:	000a0d38 6e617254 72656673 636e452d     8...Transfer-Enc
   1071c:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
   1072c:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
   1073c:	676e654c 203a6874 00000000 33323130     Length: ....0123
   1074c:	37363534 62613938 66656463 6e617254     456789abcdefTran
   1075c:	72656673 636e452d 6e69646f 00203a67     sfer-Encoding: .
   1076c:	6e6e6f43 69746365 203a6e6f 00000000     Connection: ....
   1077c:	50545448 0000002f 00000d31 00006f7a     HTTP/...1...zo..
   1078c:	00006f74 00006f6e 00006f68 00006f80     to..no..ho...o..
   1079c:	00006f62 00006f80 00006f5c 00006f56     bo...o..\o..Vo..
   107ac:	00006f80 00006f50 00006f50 00006f4a     .o..Po..Po..Jo..
   107bc:	00006f44 00006f3e 42002000 42002400     Do..>o... .B.$.B
   107cc:	42002800 00008ef6 00008efa 00008efe     .(.B............
   107dc:	00008f02 00008f06 00008f0a 00008f0e     ................
   107ec:	00008f12 00008f16 00008f1a 00008f72     ............r...
   107fc:	00008f78 00008f7e 00008f84 00008f84     x...~...........
   1080c:	00008f8a 00008f8a 00008f8a 00008f90     ................
   1081c:	00008f96 00009ba4 00009ba4 00009b98     ................
   1082c:	00009ba4 00009b98 00009b72 00009b72     ........r...r...
   1083c:	00009ba4 00009ba4 00009ba4 00009ba4     ................
   1084c:	00009ba4 00009ba4 00009ba4 00009ba4     ................
   1085c:	00009ba4 00009ba4 00009ba4 00009ba4     ................
   1086c:	00009ba4 00009ba4 00009ba4 00009ba4     ................
   1087c:	00009ba4 00009ba4 00009ba4 00009ba4     ................
   1088c:	00009ba4 00009ba4 00009ba4 00009ba4     ................
   1089c:	00009ba4 00009ba4 00009ba4 00009ba4     ................
   108ac:	00009ba4 00009ba4 00009ba4 00009ba4     ................
   108bc:	00009ba4 00009ba4 00009ba4 00009ba4     ................
   108cc:	00009ba4 00009ba4 00009ba4 00009ba4     ................
   108dc:	00009ba4 00009ba4 00009ba4 00009ba4     ................
   108ec:	00009ba4 00009ba4 00009ba4 00009ba4     ................
   108fc:	00009ba4 00009ba4 00009ba4 00009ba4     ................
   1090c:	00009ba4 00009ba4 00009ba4 00009ba4     ................
   1091c:	00009ba4 00009b98 00009b98 00009bae     ................
   1092c:	00009bae 00009bae 00009bae 42000800     ...............B
   1093c:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   1094c:	42001c00 0c0b0a09 00000e0d 0000c006     ...B............
   1095c:	0000c07e 0000c07e 0000c024 0000c01e     ~...~...$.......
   1096c:	0000c02a 0000c00c 0000c030 0000c064     *.......0...d...
   1097c:	0000c158 0000c1a8 0000c1a8 0000c1a4     X...............
   1098c:	0000c14a 0000c16a 0000c13a 0000c17c     J...j...:...|...
   1099c:	0000c18e 72617473 6f645f74 6f6c6e77     ....start_downlo
   109ac:	203a6461 462d6957 73692069 746f6e20     ad: Wi-Fi is not
   109bc:	6e6f6320 7463656e 0d2e6465 00000000      connected......
   109cc:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   109dc:	75716572 20747365 73207369 20746e65     request is sent 
   109ec:	65726c61 2e796461 0000000d 72617473     already.....star
   109fc:	6f645f74 6f6c6e77 203a6461 6e6e7572     t_download: runn
   10a0c:	20676e69 6e776f64 64616f6c 726c6120     ing download alr
   10a1c:	79646165 00000d2e 72617473 6f645f74     eady....start_do
   10a2c:	6f6c6e77 203a6461 646e6573 20676e69     wnload: sending 
   10a3c:	50545448 71657220 74736575 0d2e2e2e     HTTP request....
   10a4c:	00000000 70747468 2f2f3a73 2e777777     ....https://www.
   10a5c:	73616573 6570752e 652e6e6e 7e2f7564     seas.upenn.edu/~
   10a6c:	6863696e 2f736e69 74736574 426b3132     nichins/test21kB
   10a7c:	7478742e 00000000 70747468 696c635f     .txt....http_cli
   10a8c:	5f746e65 6c6c6163 6b636162 5448203a     ent_callback: HT
   10a9c:	63205054 6e65696c 6f732074 74656b63     TP client socket
   10aac:	6e6f6320 7463656e 0d2e6465 00000000      connected......
   10abc:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   10acc:	6b636162 6572203a 73657571 6f632074     back: request co
   10adc:	656c706d 2e646574 0000000d 70747468     mpleted.....http
   10aec:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   10afc:	6572203a 76696563 72206465 6f707365     : received respo
   10b0c:	2065736e 64207525 20617461 657a6973     nse %u data size
   10b1c:	0d752520 0000000a 70747468 696c635f      %u.....http_cli
   10b2c:	5f746e65 6c6c6163 6b636162 5548435f     ent_callback_CHU
   10b3c:	44454b4e 54414420 72203a41 69656365     NKED DATA: recei
   10b4c:	20646576 70736572 65736e6f 74616420     ved response dat
   10b5c:	69732061 2520657a 000a0d75 70747468     a size %u...http
   10b6c:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   10b7c:	6964203a 6e6f6373 7463656e 206e6f69     : disconnection 
   10b8c:	73616572 253a6e6f 000a0d64 6f736572     reason:%d...reso
   10b9c:	5f65766c 203a6263 49207325 64612050     lve_cb: %s IP ad
   10bac:	73657264 73692073 2e642520 252e6425     dress is %d.%d.%
   10bbc:	64252e64 0a0d0a0d 00000000 69666977     d.%d........wifi
   10bcc:	3a62635f 4d324d20 4649575f 4f435f49     _cb: M2M_WIFI_CO
   10bdc:	43454e4e 0d444554 00000000 69666977     NNECTED.....wifi
   10bec:	3a62635f 4d324d20 4649575f 49445f49     _cb: M2M_WIFI_DI
   10bfc:	4e4f4353 5443454e 000d4445 636d6f63     SCONNECTED..comc
   10c0c:	31747361 00213332 636d6f43 2d747361     ast123!.Comcast-
   10c1c:	62616c78 342e322d 00000000 69666977     xlab-2.4....wifi
   10c2c:	3a62635f 20504920 72646461 20737365     _cb: IP address 
   10c3c:	25207369 75252e75 2e75252e 0a0d7525     is %u.%u.%u.%u..
   10c4c:	00000000 666e6f63 72756769 74685f65     ....configure_ht
   10c5c:	635f7074 6e65696c 48203a74 20505454     tp_client: HTTP 
   10c6c:	65696c63 6920746e 6974696e 7a696c61     client initializ
   10c7c:	6f697461 6166206e 64656c69 72282021     ation failed! (r
   10c8c:	25207365 0a0d2964 00000000 6e776f64     es %d)......down
   10c9c:	64616f6c 7269665f 7261776d 63203a65     load_firmware: c
   10cac:	656e6e6f 6e697463 6f742067 46695720     onnecting to WiF
   10cbc:	50412069 2e732520 0a0d2e2e 00000000     i AP %s.........
   10ccc:	6e776f64 64616f6c 7269665f 7261776d     download_firmwar
   10cdc:	64203a65 2e656e6f 0000000d 6e69616d     e: done.....main
   10cec:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   10cfc:	6c6c6163 72726520 2021726f 73657228     call error! (res
   10d0c:	29642520 00000a0d 0000d3d0 0000d3da      %d)............
   10d1c:	0000d3ea 0000d422 0000d5ec              ....".......

00010d28 <_global_impure_ptr>:
   10d28:	2000001c                                ... 

00010d2c <__sf_fake_stderr>:
	...

00010d4c <__sf_fake_stdin>:
	...

00010d6c <__sf_fake_stdout>:
	...
   10d8c:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   10d9c:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   10dac:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   10dbc:	37363534 62613938 66656463 20200000              456789abcdef.

00010dc9 <_ctype_>:
   10dc9:	20202000 20202020 28282020 20282828     .         ((((( 
   10dd9:	20202020 20202020 20202020 20202020                     
   10de9:	10108820 10101010 10101010 10101010      ...............
   10df9:	04040410 04040404 10040404 10101010     ................
   10e09:	41411010 41414141 01010101 01010101     ..AAAAAA........
   10e19:	01010101 01010101 01010101 10101010     ................
   10e29:	42421010 42424242 02020202 02020202     ..BBBBBB........
   10e39:	02020202 02020202 02020202 10101010     ................
   10e49:	00000020 00000000 00000000 00000000      ...............
	...

00010ecc <_init>:
   10ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ece:	46c0      	nop			; (mov r8, r8)
   10ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10ed2:	bc08      	pop	{r3}
   10ed4:	469e      	mov	lr, r3
   10ed6:	4770      	bx	lr

00010ed8 <__init_array_start>:
   10ed8:	000000dd 	.word	0x000000dd

00010edc <_fini>:
   10edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ede:	46c0      	nop			; (mov r8, r8)
   10ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10ee2:	bc08      	pop	{r3}
   10ee4:	469e      	mov	lr, r3
   10ee6:	4770      	bx	lr

00010ee8 <__fini_array_start>:
   10ee8:	000000b5 	.word	0x000000b5
